  EVAL_ONE_STR(
"(linklet"
"()"
"((1/module-path-index? module-path-index?)"
"(1/identifier-binding identifier-binding)"
"(1/module-declared? module-declared?)"
"(1/bound-identifier=? bound-identifier=?)"
"(1/module-path? module-path?)"
"(seal seal)"
"(1/syntax-shift-phase-level syntax-shift-phase-level)"
"(embedded-load embedded-load)"
"(1/syntax->datum syntax->datum)"
"(1/dynamic-require dynamic-require)"
"(1/namespace-attach-module-declaration namespace-attach-module-declaration)"
"(make-namespace make-namespace)"
"(1/resolved-module-path? resolved-module-path?)"
"(boot boot)"
"(1/current-namespace current-namespace)"
"(expand$1 expand)"
"(1/namespace-mapped-symbols namespace-mapped-symbols)"
"(1/namespace-attach-module namespace-attach-module)"
"(compile-to-linklets compile-to-linklets)"
"(1/module-compiled-indirect-exports module-compiled-indirect-exports)"
"(datum->kernel-syntax datum->kernel-syntax)"
"(identifier? identifier?)"
"(1/syntax-e syntax-e)"
"(1/syntax-debug-info syntax-debug-info)"
"(namespace->instance namespace->instance)"
"(1/namespace-module-identifier namespace-module-identifier)"
"(1/eval eval)"
"(1/namespace-require namespace-require)"
"(maybe-syntax->datum maybe-syntax->datum)"
"(maybe-raise-missing-module maybe-raise-missing-module)"
"(syntax?$1 syntax?)"
"(1/module-compiled-exports module-compiled-exports)"
"(1/module-path-index-join module-path-index-join)"
"(1/read-syntax read-syntax)"
"(syntax-property$1 syntax-property)"
"(1/module->language-info module->language-info)"
"(dynamic-require-reader dynamic-require-reader)"
"(1/namespace-syntax-introduce namespace-syntax-introduce)"
"(1/compile compile)"
"(1/datum->syntax datum->syntax))"
"(void)"
"(define-values"
"(qq-append)"
"  (lambda (a_106 b_107) (if (list? a_106) (append a_106 b_107) (raise-argument-error 'unquote-splicing \"list?\" a_106))))"
"(void)"
"(void)"
"(define-values(call/ec) call-with-escape-continuation)"
"(void)"
"(void)"
" (define-values (bad-list$1) (lambda (who_1 orig-l_2) (raise-mismatch-error who_1 \"not a proper list: \" orig-l_2)))"
"(define-values"
"(memq memv member)"
"(let-values()"
"(let-values()"
"(values"
"(let-values(((memq_12)"
"(lambda(v_13 orig-l_14)"
"((letrec-values(((loop_15)"
"(lambda(ls_16)"
"(if(null? ls_16)"
"(let-values() #f)"
"(if(not(pair? ls_16))"
"(let-values()(bad-list$1 'memq orig-l_14))"
"(if(eq? v_13(car ls_16))"
"(let-values() ls_16)"
"(let-values()(loop_15(cdr ls_16)))))))))"
" loop_15)"
" orig-l_14))))"
" memq_12)"
"(let-values(((memv_17)"
"(lambda(v_18 orig-l_19)"
"((letrec-values(((loop_20)"
"(lambda(ls_21)"
"(if(null? ls_21)"
"(let-values() #f)"
"(if(not(pair? ls_21))"
"(let-values()(bad-list$1 'memv orig-l_19))"
"(if(eqv? v_18(car ls_21))"
"(let-values() ls_21)"
"(let-values()(loop_20(cdr ls_21)))))))))"
" loop_20)"
" orig-l_19))))"
" memv_17)"
"(let-values(((default_22)"
"(let-values(((member_23)"
"(lambda(v_24 orig-l_25)"
"((letrec-values(((loop_26)"
"(lambda(ls_27)"
"(if(null? ls_27)"
"(let-values() #f)"
"(if(not(pair? ls_27))"
"(let-values()(bad-list$1 'member orig-l_25))"
"(if(equal? v_24(car ls_27))"
"(let-values() ls_27)"
"(let-values()(loop_26(cdr ls_27)))))))))"
" loop_26)"
" orig-l_25))))"
" member_23)))"
"(let-values(((member_28)"
"(case-lambda"
"((v_29 orig-l_30)(default_22 v_29 orig-l_30))"
"((v_31 orig-l_32 eq?_33)"
"(begin"
"(if(if(procedure? eq?_33)(procedure-arity-includes? eq?_33 2) #f)"
"(void)"
"                             (raise-argument-error 'member \"(procedure-arity-includes/c 2)\" eq?_33))"
"((let-values(((member_34)"
"(lambda(v_35 orig-l_36)"
"((letrec-values(((loop_37)"
"(lambda(ls_38)"
"(if(null? ls_38)"
"(let-values() #f)"
"(if(not(pair? ls_38))"
"(let-values()(bad-list$1 'member orig-l_36))"
"(if(eq?_33 v_35(car ls_38))"
"(let-values() ls_38)"
"(let-values()(loop_37(cdr ls_38)))))))))"
" loop_37)"
" orig-l_36))))"
" member_34)"
" v_31"
" orig-l_32))))))"
" member_28))))))"
"(void)"
"(void)"
"(define-values"
"(call-with-exception-handler)"
"(lambda(exnh_454 thunk_455)(begin0(with-continuation-mark exception-handler-key exnh_454(thunk_455))(void))))"
"(define-values"
"(hash-update hash-update! hash-has-key? hash-ref!)"
"(let-values(((not-there_456)(gensym)))"
"(let-values(((up_457)"
"(lambda(who_458 mut?_459 set_460 ht_461 key_462 xform_463 default_464)"
"(begin"
"(if(if(hash? ht_461)(if mut?_459(not(immutable? ht_461))(immutable? ht_461)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_458"
"                           (if mut?_459 \"(and/c hash? (not/c immutable?))\" \"(and/c hash? immutable?)\")"
" ht_461)))"
"(if(if(procedure? xform_463)(procedure-arity-includes? xform_463 1) #f)"
"(void)"
"                        (let-values () (raise-argument-error who_458 \"(any/c . -> . any/c)\" xform_463)))"
"(let-values(((v_465)(hash-ref ht_461 key_462 default_464)))"
"(if(eq? v_465 not-there_456)"
"                          (raise-mismatch-error who_458 \"no value found for key: \" key_462)"
"(set_460 ht_461 key_462(xform_463 v_465))))))))"
"(let-values(((hash-update_466)"
"(case-lambda"
"((ht_470 key_471 xform_472 default_473)"
"(up_457 'hash-update #f hash-set ht_470 key_471 xform_472 default_473))"
"((ht_474 key_475 xform_476)(hash-update ht_474 key_475 xform_476 not-there_456))))"
"((hash-update!_467)"
"(case-lambda"
"((ht_477 key_478 xform_479 default_480)"
"(up_457 'hash-update! #t hash-set! ht_477 key_478 xform_479 default_480))"
"((ht_481 key_482 xform_483)(hash-update! ht_481 key_482 xform_483 not-there_456))))"
"((hash-has-key?_468)"
"(lambda(ht_484 key_485)"
"(begin"
"(if(hash? ht_484)"
"(void)"
"                          (let-values () (raise-argument-error 'hash-has-key? \"hash?\" 0 ht_484 key_485)))"
"(not(eq? not-there_456(hash-ref ht_484 key_485 not-there_456))))))"
"((hash-ref!_469)"
"(lambda(ht_486 key_487 new_488)"
"(begin"
"(if(if(hash? ht_486)(not(immutable? ht_486)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'hash-ref!"
"                             \"(and/c hash? (not/c immutable?))\""
" 0"
" ht_486"
" key_487"
" new_488)))"
"(let-values(((v_489)(hash-ref ht_486 key_487 not-there_456)))"
"(if(eq? not-there_456 v_489)"
"(let-values(((n_490)(if(procedure? new_488)(new_488) new_488)))"
"(begin(hash-set! ht_486 key_487 n_490) n_490))"
" v_489))))))"
"(values hash-update_466 hash-update!_467 hash-has-key?_468 hash-ref!_469)))))"
"(void)"
"(void)"
"(define-values"
"(path-string?)"
"(lambda(s_1)"
"(let-values(((or-part_2)(path? s_1)))"
"(if or-part_2"
" or-part_2"
"(if(string? s_1)"
"(let-values(((or-part_3)(relative-path? s_1)))(if or-part_3 or-part_3(absolute-path? s_1)))"
" #f)))))"
"(define-values(bsbs)(string '#\\\\ '#\\\\))"
"(define-values"
"(normal-case-path)"
"(lambda(s_4)"
"(begin"
"(if(let-values(((or-part_5)(path-for-some-system? s_4)))(if or-part_5 or-part_5(path-string? s_4)))"
"(void)"
"        (let-values () (raise-argument-error 'normal-path-case \"(or/c path-for-some-system? path-string?)\" s_4)))"
"(if(if(path-for-some-system? s_4)(eq?(path-convention-type s_4) 'windows)(eq?(system-type) 'windows))"
"(let-values()"
"(let-values(((str_6)(if(string? s_4) s_4(bytes->string/locale(path->bytes s_4)))))"
"            (if (regexp-match? '#rx\"^[\\\\][\\\\][?][\\\\]\" str_6)"
"(if(string? s_4)(string->path s_4) s_4)"
"(let-values(((s_7)(string-locale-downcase str_6)))"
"(bytes->path"
"(string->bytes/locale"
"(regexp-replace*"
"                   '#rx\"/\""
"                   (if (regexp-match? '#rx\"[/\\\\][. ]+[/\\\\]*$\" s_7) s_7 (regexp-replace* '#rx\"[ .]+([/\\\\]*)$\" s_7 \"\\\\1\"))"
" bsbs))"
" 'windows)))))"
"(if(string? s_4)(let-values()(string->path s_4))(let-values() s_4))))))"
"(define-values"
"(check-extension-call)"
"(lambda(s_8 sfx_9 who_10)"
"(begin"
"(if(let-values(((or-part_11)(path-for-some-system? s_8)))(if or-part_11 or-part_11(path-string? s_8)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c path-for-some-system? path-string?)\" 0 s_8 sfx_9)))"
"(if(let-values(((or-part_12)(string? sfx_9)))(if or-part_12 or-part_12(bytes? sfx_9)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c string? bytes?)\" 1 s_8 sfx_9)))"
"(let-values(((base_13 name_14 dir?_15)(split-path s_8)))"
"(begin"
"(if(not base_13)"
"            (let-values () (raise-mismatch-error who_10 \"cannot add an extension to a root path: \" s_8))"
"(void))"
"(values base_13 name_14))))))"
"(define-values"
"(path-adjust-extension)"
"(lambda(name_16 sep_17 rest-bytes_18 s_19 sfx_20)"
"(let-values(((base_21 name_22)(check-extension-call s_19 sfx_20 name_16)))"
"(let-values(((bs_23)(path-element->bytes name_22)))"
"(let-values(((finish_24)"
"(lambda(i_25 sep_26 i2_27)"
"(bytes->path-element"
"(bytes-append"
"(subbytes bs_23 0 i_25)"
" sep_26"
"(rest-bytes_18 bs_23 i2_27)"
"(if(string? sfx_20)(string->bytes/locale sfx_20(char->integer '#\\?)) sfx_20))"
"(if(path-for-some-system? s_19)(path-convention-type s_19)(system-path-convention-type))))))"
"(let-values(((new-name_28)"
"(letrec-values(((loop_29)"
"(lambda(i_30)"
"(if(zero? i_30)"
"                                             (finish_24 (bytes-length bs_23) #\"\" (bytes-length bs_23))"
"(let-values(((i_31)(sub1 i_30)))"
"(if(if(not(zero? i_31))"
"(eq?(char->integer '#\\.)(bytes-ref bs_23 i_31))"
" #f)"
"(finish_24 i_31 sep_17(add1 i_31))"
"(loop_29 i_31)))))))"
"(loop_29(bytes-length bs_23)))))"
"(if(path-for-some-system? base_21)(build-path base_21 new-name_28) new-name_28)))))))"
"(define-values"
"(path-replace-extension)"
"  (lambda (s_32 sfx_33) (path-adjust-extension 'path-replace-extension #\"\" (lambda (bs_34 i_35) #\"\") s_32 sfx_33)))"
"(define-values"
"(path-add-extension)"
"  (lambda (s_36 sfx_37) (path-adjust-extension 'path-add-extension #\"_\" subbytes s_36 sfx_37)))"
"(define-values"
"(reroot-path)"
"(lambda(p_38 root_39)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_43)(path-string? p_38)))"
"(if or-part_43 or-part_43(path-for-some-system? p_38)))"
"(void)"
"(let-values()"
"                        (raise-argument-error 'reroot-path \"(or/c path-string? path-for-some-system?)\" 0 p_38 root_39)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_44)(path-string? root_39)))"
"(if or-part_44 or-part_44(path-for-some-system? root_39)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'reroot-path"
"                           \"(or/c path-string? path-for-some-system?)\""
" 1"
" p_38"
" root_39)))"
"(values))))"
"(let-values(((conv_40)"
"(if(path-for-some-system? p_38)(path-convention-type p_38)(system-path-convention-type))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_45)(complete-path? p_38)))"
"(if or-part_45 or-part_45(eq?(system-path-convention-type) conv_40)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                               \"path is not complete and not the platform's convention\""
"                               \"path\""
" p_38"
"                               \"platform convention type\""
"(system-path-convention-type))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?"
"(if(path-for-some-system? root_39)"
"(path-convention-type root_39)"
"(system-path-convention-type))"
" conv_40)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                 \"given paths use different conventions\""
"                                 \"path\""
" p_38"
"                                 \"root path\""
" root_39)))"
"(values))))"
"(let-values(((c-p_41)"
"(normal-case-path"
"(cleanse-path(if(complete-path? p_38) p_38(path->complete-path p_38))))))"
"(let-values(((bstr_42)(path->bytes c-p_41)))"
"(if(eq? conv_40 'unix)"
"(let-values()"
"                      (if (bytes=? bstr_42 #\"/\")"
"(if(path-for-some-system? root_39) root_39(string->path root_39))"
"(build-path root_39(bytes->path(subbytes(path->bytes c-p_41) 1) conv_40))))"
"(if(eq? conv_40 'windows)"
"(let-values()"
"(build-path"
" root_39"
"(bytes->path"
"                          (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\[a-z]:\" bstr_42)"
"(let-values()"
"                              (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4 5) #\"\\\\\" (subbytes bstr_42 6)))"
"                            (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                              (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                              (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                                (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                                (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\\" bstr_42)"
"                                  (let-values () (bytes-append #\"UNC\\\\\" (subbytes bstr_42 2)))"
"                                  (if (regexp-match? '#rx\"^[a-z]:\" bstr_42)"
"(let-values()(bytes-append(subbytes bstr_42 0 1)(subbytes bstr_42 2)))"
"(void))))))"
" conv_40)))"
"(void))))))))))))"
"(void)"
"(void)"
"(define-values"
"(path-list-string->path-list)"
"(let-values(((r_1)"
"(byte-regexp"
"(string->bytes/utf-8"
"                  (let-values (((sep_3) (if (eq? (system-type) 'windows) \";\" \":\")))"
"                    (format \"([^~a]*)~a(.*)\" sep_3 sep_3)))))"
"((cons-path_2)"
"(lambda(default_4 s_5 l_6)"
"                  (let-values (((s_7) (if (eq? (system-type) 'windows) (regexp-replace* '#rx#\"\\\"\" s_5 #\"\") s_5)))"
"                    (if (bytes=? s_7 #\"\") (append default_4 l_6) (cons (bytes->path s_7) l_6))))))"
"(lambda(s_8 default_9)"
"(begin"
"(if(let-values(((or-part_10)(bytes? s_8)))(if or-part_10 or-part_10(string? s_8)))"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(or/c bytes? string?)\" s_8)))"
"(if(if(list? default_9)(andmap path? default_9) #f)"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(listof path?)\" default_9)))"
"((letrec-values(((loop_11)"
"(lambda(s_12)"
"(let-values(((m_13)(regexp-match r_1 s_12)))"
"(if m_13"
"(cons-path_2 default_9(cadr m_13)(loop_11(caddr m_13)))"
"(cons-path_2 default_9 s_12 null))))))"
" loop_11)"
"(if(string? s_8)(string->bytes/utf-8 s_8) s_8))))))"
"(void)"
"(void)"
"(define-values"
"(find-executable-path)"
"(case-lambda"
"((program_1 libpath_2 reverse?_3)"
"(begin"
"(if(path-string? program_1)"
"(void)"
"        (let-values () (raise-argument-error 'find-executable-path \"path-string?\" program_1)))"
"(if(let-values(((or-part_4)(not libpath_2)))"
"(if or-part_4 or-part_4(if(path-string? libpath_2)(relative-path? libpath_2) #f)))"
"(void)"
"(let-values()"
"          (raise-argument-error 'find-executable-path \"(or/c #f (and/c path-string? relative-path?))\" libpath_2)))"
"(letrec-values(((found-exec_5)"
"(lambda(exec-name_6)"
"(if libpath_2"
"(let-values(((base_7 name_8 isdir?_9)(split-path exec-name_6)))"
"(let-values(((next_10)"
"(lambda()"
"(let-values(((resolved_11)(resolve-path exec-name_6)))"
"(if(equal? resolved_11 exec-name_6)"
"(let-values() #f)"
"(if(relative-path? resolved_11)"
"(let-values()(found-exec_5(build-path base_7 resolved_11)))"
"(let-values()(found-exec_5 resolved_11))))))))"
"(let-values(((or-part_12)(if reverse?_3(next_10) #f)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(if(path? base_7)"
"(let-values(((lib_14)(build-path base_7 libpath_2)))"
"(if(let-values(((or-part_15)(directory-exists? lib_14)))"
"(if or-part_15 or-part_15(file-exists? lib_14)))"
" lib_14"
" #f))"
" #f)))"
"(if or-part_13 or-part_13(if(not reverse?_3)(next_10) #f)))))))"
" exec-name_6))))"
"(if(if(relative-path? program_1)"
"(let-values(((base_16 name_17 dir?_18)(split-path program_1)))(eq? base_16 'relative))"
" #f)"
"          (let-values (((paths-str_19) (environment-variables-ref (current-environment-variables) #\"PATH\"))"
"((win-add_20)"
"                        (lambda (s_21) (if (eq? (system-type) 'windows) (cons (bytes->path #\".\") s_21) s_21))))"
"((letrec-values(((loop_22)"
"(lambda(paths_23)"
"(if(null? paths_23)"
" #f"
"(let-values(((base_24)(path->complete-path(car paths_23))))"
"(let-values(((name_25)(build-path base_24 program_1)))"
"(if(file-exists? name_25)(found-exec_5 name_25)(loop_22(cdr paths_23)))))))))"
" loop_22)"
"(win-add_20"
"(if paths-str_19(path-list-string->path-list(bytes->string/locale paths-str_19 '#\\?) null) null))))"
"(let-values(((p_26)(path->complete-path program_1)))(if(file-exists? p_26)(found-exec_5 p_26) #f))))))"
"((program_27 libpath_28)(find-executable-path program_27 libpath_28 #f))"
"((program_29)(find-executable-path program_29 #f #f))))"
"(void)"
"(void)"
"(define-values"
"(call-with-default-reading-parameterization)"
"(lambda(thunk_1)"
"(if(if(procedure? thunk_1)(procedure-arity-includes? thunk_1 0) #f)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-case-sensitive"
" #t"
" read-square-bracket-as-paren"
" #t"
" read-curly-brace-as-paren"
" #t"
" read-square-bracket-with-tag"
" #f"
" read-curly-brace-with-tag"
" #f"
" read-accept-box"
" #t"
" read-accept-compiled"
" #f"
" read-accept-bar-quote"
" #t"
" read-accept-graph"
" #t"
" read-decimal-as-inexact"
" #t"
" read-cdot"
" #f"
" read-accept-dot"
" #t"
" read-accept-infix-dot"
" #t"
" read-accept-quasiquote"
" #t"
" read-accept-reader"
" #f"
" read-accept-lang"
" #t"
" current-readtable"
" #f)"
"(let-values()(thunk_1)))"
"      (raise-argument-error 'call-with-default-reading-parameterization \"(procedure-arity-includes/c 0)\" thunk_1))))"
"(void)"
"(void)"
"(define-values"
"(find-main-collects)"
"(lambda()(cache-configuration 0(lambda()(exe-relative-path->complete-path(find-system-path 'collects-dir))))))"
"(define-values"
"(find-main-config)"
"(lambda()(cache-configuration 1(lambda()(exe-relative-path->complete-path(find-system-path 'config-dir))))))"
"(define-values"
"(exe-relative-path->complete-path)"
"(lambda(collects-path_1)"
"(if(complete-path? collects-path_1)"
"(let-values()(simplify-path collects-path_1))"
"(if(absolute-path? collects-path_1)"
"(let-values()"
"(let-values(((exec_2)"
"(path->complete-path"
"(find-executable-path(find-system-path 'exec-file))"
"(find-system-path 'orig-dir))))"
"(let-values(((base_3 name_4 dir?_5)(split-path exec_2)))"
"(simplify-path(path->complete-path collects-path_1 base_3)))))"
"(let-values()"
"(let-values(((p_6)(find-executable-path(find-system-path 'exec-file) collects-path_1 #t)))"
"(if p_6(simplify-path p_6) #f)))))))"
"(void)"
"(void)"
"(define-values"
"(-check-relpath)"
"(lambda(who_1 s_2)"
"(begin"
"      (if (path-string? s_2) (void) (let-values () (raise-argument-error who_1 \"path-string?\" s_2)))"
"(if(relative-path? s_2)"
"(void)"
"        (let-values () (raise-arguments-error who_1 \"invalid relative path\" \"path\" s_2))))))"
"(define-values"
"(-check-collection)"
"(lambda(who_3 collection_4 collection-path_5)"
"(begin(-check-relpath who_3 collection_4)(for-each(lambda(p_6)(-check-relpath who_3 p_6)) collection-path_5))))"
"(define-values"
"(-check-fail)"
"(lambda(who_7 fail_8)"
"(if(if(procedure? fail_8)(procedure-arity-includes? fail_8 1) #f)"
"(void)"
"      (let-values () (raise-argument-error who_7 \"(any/c . -> . any)\" fail_8)))))"
"(define-values"
"(collection-path)"
"(lambda(fail_9 collection_10 collection-path_11)"
"(begin"
"(-check-collection 'collection-path collection_10 collection-path_11)"
"(-check-fail 'collection-path fail_9)"
"(find-col-file fail_9 collection_10 collection-path_11 #f #f))))"
"(define-values"
"(collection-file-path)"
"(lambda(fail_12 check-compiled?_13 file-name_14 collection_15 collection-path_16)"
"(begin"
"(-check-relpath 'collection-file-path file-name_14)"
"(-check-collection 'collection-file-path collection_15 collection-path_16)"
"(-check-fail 'collection-file-path fail_12)"
"(find-col-file fail_12 collection_15 collection-path_16 file-name_14 check-compiled?_13))))"
"(define-values"
"(get-config-table)"
"(lambda(d_17)"
"    (let-values (((p_18) (if d_17 (build-path d_17 \"config.rktd\") #f)))"
"(let-values(((or-part_19)"
"(if p_18"
"(if(file-exists? p_18)"
"(with-input-from-file"
" p_18"
"(lambda()"
"(let-values(((v_20)(call-with-default-reading-parameterization read)))"
"(if(hash? v_20) v_20 #f))))"
" #f)"
" #f)))"
"(if or-part_19 or-part_19 '#hash())))))"
"(define-values"
"(get-installation-name)"
"(lambda(config-table_21)(hash-ref config-table_21 'installation-name(version))))"
"(define-values"
"(coerce-to-path)"
"(lambda(p_22)"
"(if(string? p_22)"
"(let-values()(collects-relative-path->complete-path(string->path p_22)))"
"(if(bytes? p_22)"
"(let-values()(collects-relative-path->complete-path(bytes->path p_22)))"
"(if(path? p_22)(let-values()(collects-relative-path->complete-path p_22))(let-values() p_22))))))"
"(define-values"
"(collects-relative-path->complete-path)"
"(lambda(p_23)"
"(if(complete-path? p_23)"
"(let-values() p_23)"
"(let-values()"
"(path->complete-path"
" p_23"
"(let-values(((or-part_24)(find-main-collects)))(if or-part_24 or-part_24(current-directory))))))))"
"(define-values"
"(add-config-search)"
"(lambda(ht_25 key_26 orig-l_27)"
"(let-values(((l_28)(hash-ref ht_25 key_26 #f)))"
"(if l_28"
"((letrec-values(((loop_29)"
"(lambda(l_30)"
"(if(null? l_30)"
"(let-values() null)"
"(if(not(car l_30))"
"(let-values()(append orig-l_27(loop_29(cdr l_30))))"
"(let-values()(cons(coerce-to-path(car l_30))(loop_29(cdr l_30)))))))))"
" loop_29)"
" l_28)"
" orig-l_27))))"
"(define-values"
"(find-library-collection-links)"
"(lambda()"
"(let-values(((ht_31)(get-config-table(find-main-config))))"
"(let-values(((lf_32)"
"(coerce-to-path"
"(let-values(((or-part_33)(hash-ref ht_31 'links-file #f)))"
"(if or-part_33"
" or-part_33"
"(build-path"
"(let-values(((or-part_34)(hash-ref ht_31 'share-dir #f)))"
"                            (if or-part_34 or-part_34 (build-path 'up \"share\")))"
"                          \"links.rktd\"))))))"
"(append"
"(list #f)"
"(if(if(use-user-specific-search-paths)(use-collection-link-paths) #f)"
"           (list (build-path (find-system-path 'addon-dir) (get-installation-name ht_31) \"links.rktd\"))"
" null)"
"(if(use-collection-link-paths)(add-config-search ht_31 'links-search-files(list lf_32)) null))))))"
"(define-values(links-cache)(make-weak-hash))"
"(define-values(stamp-prompt-tag)(make-continuation-prompt-tag 'stamp))"
"(define-values"
"(file->stamp)"
"(lambda(path_35 old-stamp_36)"
"(if(if old-stamp_36(if(cdr old-stamp_36)(not(sync/timeout 0(cdr old-stamp_36))) #f) #f)"
"(let-values() old-stamp_36)"
"(let-values()"
"(call-with-continuation-prompt"
"(lambda()"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(exn_37)"
"(abort-current-continuation"
" stamp-prompt-tag"
"(if(exn:fail:filesystem? exn_37)(lambda() #f)(lambda()(raise exn_37)))))"
"(let-values(((dir-evt_38)"
"(if(vector-ref(system-type 'fs-change) 2)"
"((letrec-values(((loop_39)"
"(lambda(path_40)"
"(let-values(((base_41 name_42 dir?_43)(split-path path_40)))"
"(if(path? base_41)"
"(if(directory-exists? base_41)"
"(filesystem-change-evt base_41(lambda() #f))"
"(loop_39 base_41))"
" #f)))))"
" loop_39)"
" path_35)"
" #f)))"
"(if(not(file-exists? path_35))"
"(cons #f dir-evt_38)"
"(let-values(((evt_44)"
"(if(vector-ref(system-type 'fs-change) 2)"
"(filesystem-change-evt path_35(lambda() #f))"
" #f)))"
"(begin"
"(if dir-evt_38(let-values()(filesystem-change-evt-cancel dir-evt_38))(void))"
"(cons"
"(let-values(((p_45)(open-input-file path_35)))"
"(dynamic-wind"
" void"
"(lambda()"
"(let-values(((bstr_46)(read-bytes 8192 p_45)))"
"(if(if(bytes? bstr_46)(>=(bytes-length bstr_46) 8192) #f)"
"(apply"
" bytes-append"
"(cons"
" bstr_46"
"((letrec-values(((loop_47)"
"(lambda()"
"(let-values(((bstr_48)(read-bytes 8192 p_45)))"
"(if(eof-object? bstr_48) null(cons bstr_48(loop_47)))))))"
" loop_47))))"
" bstr_46)))"
"(lambda()(close-input-port p_45))))"
" evt_44)))))))"
" stamp-prompt-tag)))))"
"(define-values"
"(no-file-stamp?)"
"(lambda(a_49)(let-values(((or-part_50)(not a_49)))(if or-part_50 or-part_50(not(car a_49))))))"
"(define-values"
"(get-linked-collections)"
"(lambda(links-path_51)"
"(call-with-escape-continuation"
"(lambda(esc_52)"
"(let-values(((make-handler_53)"
"(lambda(ts_54)"
"(lambda(exn_55)"
"(begin"
"(if(exn:fail? exn_55)"
"(let-values(((l_56)(current-logger)))"
"(if(log-level? l_56 'error)"
"(let-values()"
"(log-message"
" l_56"
" 'error"
"(format"
"                                     \"error reading collection links file ~s: ~a\""
" links-path_51"
"(exn-message exn_55))"
"(current-continuation-marks)))"
"(void)))"
"(void))"
"(if ts_54"
"(let-values()(hash-set! links-cache links-path_51(cons ts_54 '#hasheq())))"
"(void))"
"(if(exn:fail? exn_55)(esc_52(make-hasheq)) exn_55))))))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 #f)"
"(let-values(((links-stamp+cache_57)(hash-ref links-cache links-path_51 '(#f . #hasheq()))))"
"(let-values(((a-links-stamp_58)(car links-stamp+cache_57)))"
"(let-values(((ts_59)(file->stamp links-path_51 a-links-stamp_58)))"
"(if(not(equal? ts_59 a-links-stamp_58))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 ts_59)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(let-values(((v_60)"
"(if(no-file-stamp? ts_59)"
" null"
"(let-values(((p_61)(open-input-file links-path_51 'binary)))"
"(dynamic-wind"
" void"
"(lambda()"
"(begin0"
"(read p_61)"
"(if(eof-object?(read p_61))"
"(void)"
"                                               (let-values () (error \"expected a single S-expression\")))))"
"(lambda()(close-input-port p_61)))))))"
"(begin"
"(if(if(list? v_60)"
"(andmap"
"(lambda(p_62)"
"(if(list? p_62)"
"(if(let-values(((or-part_63)(= 2(length p_62))))"
"(if or-part_63 or-part_63(= 3(length p_62))))"
"(if(let-values(((or-part_64)(string?(car p_62))))"
"(if or-part_64"
" or-part_64"
"(let-values(((or-part_65)(eq? 'root(car p_62))))"
"(if or-part_65 or-part_65(eq? 'static-root(car p_62))))))"
"(if(path-string?(cadr p_62))"
"(let-values(((or-part_66)(null?(cddr p_62))))"
"(if or-part_66 or-part_66(regexp?(caddr p_62))))"
" #f)"
" #f)"
" #f)"
" #f))"
" v_60)"
" #f)"
"(void)"
"                            (let-values () (error \"ill-formed content\")))"
"(let-values(((ht_67)(make-hasheq))"
"((dir_68)"
"(let-values(((base_69 name_70 dir?_71)(split-path links-path_51))) base_69)))"
"(begin"
"(for-each"
"(lambda(p_72)"
"(if(let-values(((or-part_73)(null?(cddr p_72))))"
"(if or-part_73 or-part_73(regexp-match?(caddr p_72)(version))))"
"(let-values()"
"(let-values(((dir_74)(simplify-path(path->complete-path(cadr p_72) dir_68))))"
"(if(eq?(car p_72) 'static-root)"
"(let-values()"
"(for-each"
"(lambda(sub_75)"
"(if(directory-exists?(build-path dir_74 sub_75))"
"(let-values()"
"(let-values(((k_76)(string->symbol(path->string sub_75))))"
"(hash-set! ht_67 k_76(cons dir_74(hash-ref ht_67 k_76 null)))))"
"(void)))"
"(directory-list dir_74)))"
"(if(eq?(car p_72) 'root)"
"(let-values()"
"(begin"
"(if(hash-ref ht_67 #f #f)"
"(void)"
"(let-values()(hash-set! ht_67 #f null)))"
"(hash-for-each"
" ht_67"
"(lambda(k_77 v_78)(hash-set! ht_67 k_77(cons dir_74 v_78))))))"
"(let-values()"
"(let-values(((s_79)(string->symbol(car p_72))))"
"(hash-set!"
" ht_67"
" s_79"
"(cons(box dir_74)(hash-ref ht_67 s_79 null)))))))))"
"(void)))"
" v_60)"
"(hash-for-each ht_67(lambda(k_80 v_81)(hash-set! ht_67 k_80(reverse v_81))))"
"(hash-set! links-cache links-path_51(cons ts_59 ht_67))"
" ht_67)))))))"
"(cdr links-stamp+cache_57)))))))))))"
"(define-values"
"(normalize-collection-reference)"
"(lambda(collection_82 collection-path_83)"
"(if(string? collection_82)"
"(let-values()"
"        (let-values (((m_84) (regexp-match-positions '#rx\"/+\" collection_82)))"
"(if m_84"
"(if(=(caar m_84)(sub1(string-length collection_82)))"
"(let-values()(values(substring collection_82 0(caar m_84)) collection-path_83))"
"(let-values()"
"(values"
"(substring collection_82 0(caar m_84))"
"(cons(substring collection_82(cdar m_84)) collection-path_83))))"
"(values collection_82 collection-path_83))))"
"(let-values()"
"(let-values(((base_85 name_86 dir?_87)(split-path collection_82)))"
"(if(eq? base_85 'relative)"
"(values name_86 collection-path_83)"
"(normalize-collection-reference base_85(cons name_86 collection-path_83))))))))"
"(define-values"
"(find-col-file)"
"(lambda(fail_88 collection_89 collection-path_90 file-name_91 check-compiled?_92)"
"(let-values(((collection_93 collection-path_94)(normalize-collection-reference collection_89 collection-path_90)))"
"(let-values(((all-paths_95)"
"(let-values(((sym_96)"
"(string->symbol"
"(if(path? collection_93)(path->string collection_93) collection_93))))"
"((letrec-values(((loop_97)"
"(lambda(l_98)"
"(if(null? l_98)"
"(let-values() null)"
"(if(not(car l_98))"
"(let-values()"
"(append(current-library-collection-paths)(loop_97(cdr l_98))))"
"(if(hash?(car l_98))"
"(let-values()"
"(append"
"(map box(hash-ref(car l_98) sym_96 null))"
"(hash-ref(car l_98) #f null)"
"(loop_97(cdr l_98))))"
"(let-values()"
"(let-values(((ht_99)(get-linked-collections(car l_98))))"
"(append"
"(hash-ref ht_99 sym_96 null)"
"(hash-ref ht_99 #f null)"
"(loop_97(cdr l_98)))))))))))"
" loop_97)"
"(current-library-collection-links)))))"
"(let-values(((done_100)(lambda(p_104)(if file-name_91(build-path p_104 file-name_91) p_104))))"
"(let-values(((*build-path-rep_101)"
"(lambda(p_105 c_106)(if(path? p_105)(build-path p_105 c_106)(unbox p_105)))))"
"(let-values(((*directory-exists?_102)"
"(lambda(orig_107 p_108)(if(path? orig_107)(directory-exists? p_108) #t))))"
"(let-values(((to-string_103)(lambda(p_109)(if(path? p_109)(path->string p_109) p_109))))"
"((letrec-values(((cloop_110)"
"(lambda(paths_111 found-col_112)"
"(if(null? paths_111)"
"(if found-col_112"
"(done_100 found-col_112)"
"(let-values(((rest-coll_113)"
"(if(null? collection-path_94)"
"                                                        \"\""
"(apply"
" string-append"
"((letrec-values(((loop_114)"
"(lambda(cp_115)"
"(if(null?(cdr cp_115))"
"(list(to-string_103(car cp_115)))"
"(list*"
"(to-string_103(car cp_115))"
"                                                                                \"/\""
"(loop_114(cdr cp_115)))))))"
" loop_114)"
" collection-path_94)))))"
"(letrec-values(((filter_116)"
"(lambda(f_117 l_118)"
"(if(null? l_118)"
" null"
"(if(f_117(car l_118))"
"(cons(car l_118)(filter_116 f_117(cdr l_118)))"
"(filter_116 f_117(cdr l_118)))))))"
"(fail_88"
"(format"
"                                              \"collection not found\\n  collection: ~s\\n  in collection directories:~a~a\""
"(if(null? collection-path_94)"
"(to-string_103 collection_93)"
"                                                (string-append (to-string_103 collection_93) \"/\" rest-coll_113))"
"(apply"
" string-append"
"(map"
"                                                (lambda (p_119) (format \"\\n ~a ~a\" \" \" p_119))"
"(let-values(((len_120)(length all-paths_95))"
"((clen_121)(length(current-library-collection-paths))))"
"(if(<(- len_120 clen_121) 5)"
" all-paths_95"
"(append"
"(current-library-collection-paths)"
"(list"
"(format"
"                                                       \"... [~a additional linked and package directories]\""
"(- len_120 clen_121))))))))"
"(if(ormap box? all-paths_95)"
"(format"
"                                                 \"\\n   sub-collection: ~s\\n  in parent directories:~a\""
" rest-coll_113"
"(apply"
" string-append"
"(map"
"                                                   (lambda (p_122) (format \"\\n   ~a\" (unbox p_122)))"
"(filter_116 box? all-paths_95))))"
"                                                \"\"))))))"
"(let-values(((dir_123)(*build-path-rep_101(car paths_111) collection_93)))"
"(if(*directory-exists?_102(car paths_111) dir_123)"
"(let-values(((cpath_124)(apply build-path dir_123 collection-path_94)))"
"(if(if(null? collection-path_94) #t(directory-exists? cpath_124))"
"(if file-name_91"
"(if(let-values(((or-part_125)"
"(file-exists?/maybe-compiled"
" cpath_124"
" file-name_91"
" check-compiled?_92)))"
"(if or-part_125"
" or-part_125"
"(let-values(((alt-file-name_126)"
"(let-values(((file-name_127)"
"(if(path? file-name_91)"
"(path->string file-name_91)"
" file-name_91)))"
"(let-values(((len_128)"
"(string-length file-name_127)))"
"(if(>= len_128 4)"
"(if(string=?"
"                                                                                 \".rkt\""
"(substring"
" file-name_127"
"(- len_128 4)))"
"(string-append"
"(substring file-name_127 0(- len_128 4))"
"                                                                               \".ss\")"
" #f)"
" #f)))))"
"(if alt-file-name_126"
"(file-exists?/maybe-compiled"
" cpath_124"
" alt-file-name_126"
" check-compiled?_92)"
" #f))))"
"(done_100 cpath_124)"
"(cloop_110"
"(cdr paths_111)"
"(let-values(((or-part_129) found-col_112))"
"(if or-part_129 or-part_129 cpath_124))))"
"(done_100 cpath_124))"
"(cloop_110(cdr paths_111) found-col_112)))"
"(cloop_110(cdr paths_111) found-col_112)))))))"
" cloop_110)"
" all-paths_95"
" #f)))))))))"
"(define-values"
"(file-exists?/maybe-compiled)"
"(lambda(dir_130 path_131 check-compiled?_132)"
"(let-values(((or-part_133)(file-exists?(build-path dir_130 path_131))))"
"(if or-part_133"
" or-part_133"
"(if check-compiled?_132"
"          (let-values (((try-path_134) (path-add-extension path_131 #\".zo\"))"
"((modes_135)(use-compiled-file-paths))"
"((roots_136)(current-compiled-file-roots)))"
"(ormap"
"(lambda(d_137)"
"(ormap"
"(lambda(mode_138)"
"(file-exists?"
"(let-values(((p_139)(build-path dir_130 mode_138 try-path_134)))"
"(if(eq? d_137 'same)"
"(let-values() p_139)"
"(if(relative-path? d_137)"
"(let-values()(build-path p_139 d_137))"
"(let-values()(reroot-path p_139 d_137)))))))"
" modes_135))"
" roots_136))"
" #f)))))"
"(define-values"
"(find-library-collection-paths)"
"(case-lambda"
"(()(find-library-collection-paths null null))"
"((extra-collects-dirs_140)(find-library-collection-paths extra-collects-dirs_140 null))"
"((extra-collects-dirs_141 post-collects-dirs_142)"
"(let-values(((user-too?_143)(use-user-specific-search-paths))"
"((cons-if_144)(lambda(f_146 r_147)(if f_146(cons f_146 r_147) r_147)))"
"((config-table_145)(get-config-table(find-main-config))))"
"(path-list-string->path-list"
"(if user-too?_143"
"         (let-values (((c_148) (environment-variables-ref (current-environment-variables) #\"PLTCOLLECTS\")))"
"           (if c_148 (bytes->string/locale c_148 '#\\?) \"\"))"
"         \"\")"
"(add-config-search"
" config-table_145"
" 'collects-search-dirs"
"(cons-if_144"
"(if user-too?_143"
"           (build-path (find-system-path 'addon-dir) (get-installation-name config-table_145) \"collects\")"
" #f)"
"((letrec-values(((loop_149)"
"(lambda(l_150)"
"(if(null? l_150)"
" null"
"(let-values(((collects-path_151)(car l_150)))"
"(let-values(((v_152)(exe-relative-path->complete-path collects-path_151)))"
"(if v_152"
"(cons"
"(simplify-path(path->complete-path v_152(current-directory)))"
"(loop_149(cdr l_150)))"
"(loop_149(cdr l_150)))))))))"
" loop_149)"
"(append extra-collects-dirs_141(list(find-system-path 'collects-dir)) post-collects-dirs_142)))))))))"
"(void)"
"(void)"
"(define-values(load/use-compiled)(lambda(f_1)((current-load/use-compiled) f_1 #f)))"
"(define-values"
"(embedded-load)"
"(lambda(start_2 end_3 str_4)"
"(let-values(((s_5)"
"(if str_4"
" str_4"
"(let-values(((sp_6)(find-system-path 'exec-file)))"
"(let-values(((exe_7)(find-executable-path sp_6 #f)))"
"(let-values(((start_8)"
"(let-values(((or-part_9)(string->number start_2)))(if or-part_9 or-part_9 0))))"
"(let-values(((end_10)"
"(let-values(((or-part_11)(string->number end_3)))"
"(if or-part_11 or-part_11 0))))"
"(with-input-from-file"
" exe_7"
"(lambda()"
"(begin"
"(file-position(current-input-port) start_8)"
"(read-bytes(max 0(- end_10 start_8)))))))))))))"
"(let-values(((p_12)(open-input-bytes s_5)))"
"((letrec-values(((loop_13)"
"(lambda()"
"(let-values(((e_14)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-on-demand-source"
" #t)"
"(let-values()(read p_12)))))"
"(if(eof-object? e_14)(void)(let-values()(begin((current-eval) e_14)(loop_13))))))))"
" loop_13))))))"
"(void)"
"(void)"
"(define-values"
"(prop:keyword-impersonator keyword-impersonator? keyword-impersonator-ref)"
"(make-struct-type-property 'keyword-impersonator))"
"(define-values"
"(keyword-procedure-impersonator-of)"
"(lambda(v_1556)"
"(if(keyword-impersonator? v_1556)(let-values()((keyword-impersonator-ref v_1556) v_1556))(let-values() #f))))"
"(define-values"
"(struct:keyword-procedure mk-kw-proc keyword-procedure? keyword-procedure-ref keyword-procedure-set!)"
"(make-struct-type"
" 'keyword-procedure"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:checked-procedure #t)(cons prop:impersonator-of keyword-procedure-impersonator-of))"
"(current-inspector)"
" #f"
" '(0 1 2 3)))"
"(define-values(keyword-procedure-checker)(make-struct-field-accessor keyword-procedure-ref 0))"
"(define-values(keyword-procedure-proc)(make-struct-field-accessor keyword-procedure-ref 1))"
"(define-values(keyword-procedure-required)(make-struct-field-accessor keyword-procedure-ref 2))"
"(define-values(keyword-procedure-allowed)(make-struct-field-accessor keyword-procedure-ref 3))"
"(define-values"
"(struct:keyword-method make-km keyword-method? km-ref km-set!)"
"(make-struct-type 'procedure struct:keyword-procedure 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(generate-arity-string)"
"(lambda(proc_1557)"
"(let-values(((req_1558 allowed_1559)(procedure-keywords proc_1557))"
"((a_1560)(procedure-arity proc_1557))"
"((keywords-desc_1561)"
"(lambda(opt_1563 req_1564)"
"(format"
"                     \"~a with keyword~a~a\""
"                     (if (null? (cdr req_1564)) (format \"an ~aargument\" opt_1563) (format \"~aarguments\" opt_1563))"
"                     (if (null? (cdr req_1564)) \"\" \"s\")"
"(let-values(((tmp_1565)(length req_1564)))"
"(if(equal? tmp_1565 1)"
"                         (let-values () (format \" ~a\" (car req_1564)))"
"(if(equal? tmp_1565 2)"
"                           (let-values () (format \" ~a and ~a\" (car req_1564) (cadr req_1564)))"
"(let-values()"
"((letrec-values(((loop_1566)"
"(lambda(req_1567)"
"(if(null?(cdr req_1567))"
"                                                   (format \" and ~a\" (car req_1567))"
"                                                   (format \" ~a,~a\" (car req_1567) (loop_1566 (cdr req_1567)))))))"
" loop_1566)"
" req_1564))))))))"
"((method-adjust_1562)"
"(lambda(a_1568)"
"(if(let-values(((or-part_1569)(okm? proc_1557)))"
"(if or-part_1569 or-part_1569(keyword-method? proc_1557)))"
"(if(zero? a_1568) 0(sub1 a_1568))"
" a_1568))))"
"(string-append"
"(if(number? a_1560)"
"         (let-values () (let-values (((a_1570) (method-adjust_1562 a_1560))) (format \"~a\" a_1570)))"
"(if(arity-at-least? a_1560)"
"(let-values()"
"             (let-values (((a_1571) (method-adjust_1562 (arity-at-least-value a_1560)))) (format \"at least ~a\" a_1571)))"
"           (let-values () \"a different number\")))"
"       (if (null? req_1558) \"\" (format \" plus ~a\" (keywords-desc_1561 \"\" req_1558)))"
"(if allowed_1559"
"(let-values(((others_1572)"
"((letrec-values(((loop_1573)"
"(lambda(req_1574 allowed_1575)"
"(if(null? req_1574)"
"(let-values() allowed_1575)"
"(if(eq?(car req_1574)(car allowed_1575))"
"(let-values()(loop_1573(cdr req_1574)(cdr allowed_1575)))"
"(let-values()"
"(cons(car allowed_1575)(loop_1573 req_1574(cdr allowed_1575)))))))))"
" loop_1573)"
" req_1558"
" allowed_1559)))"
"           (if (null? others_1572) \"\" (format \" plus ~a\" (keywords-desc_1561 \"optional \" others_1572))))"
"         \" plus arbitrary keyword arguments\")))))"
"(define-values"
"(struct:okp make-optional-keyword-procedure okp? okp-ref okp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:arity-string generate-arity-string))"
"(current-inspector)"
" 0))"
"(define-values"
"(struct:okm make-optional-keyword-method okm? okm-ref okm-set!)"
"(make-struct-type 'procedure struct:okp 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(prop:named-keyword-procedure named-keyword-procedure? keyword-procedure-name+fail)"
"(make-struct-type-property 'named-keyword-procedure))"
"(define-values"
"(prop:procedure-accessor procedure-accessor? procedure-accessor-ref)"
"(make-struct-type-property"
" 'procedure"
"(lambda(v_1576 info-l_1577)"
"(if(exact-integer? v_1576)(make-struct-field-accessor(list-ref info-l_1577 3) v_1576) #f))))"
"(define-values"
"(new-prop:procedure new-procedure? new-procedure-ref)"
"(make-struct-type-property 'procedure #f(list(cons prop:procedure values)(cons prop:procedure-accessor values))))"
"(define-values"
"(struct:keyword-procedure/arity-error make-kp/ae kp/ae? kp/ae-ref kp/ae-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 0"
" 0"
" #f"
"(list(cons prop:arity-string generate-arity-string)(cons prop:incomplete-arity #t))))"
"(define-values"
"(make-keyword-procedure)"
"(case-lambda"
"((proc_1592)(make-keyword-procedure proc_1592(lambda args_1593(apply proc_1592 null null args_1593))))"
"((proc_1594 plain-proc_1595)"
"(make-optional-keyword-procedure"
"(make-keyword-checker null #f(procedure-arity proc_1594))"
" proc_1594"
" null"
" #f"
" plain-proc_1595))))"
"(define-values"
"(keyword-apply)"
"(lambda(proc_1596 kws_1597 kw-vals_1598 normal-args_1599 . normal-argss_1600)"
"(let-values(((type-error_1601)"
"(lambda(what_1602 which_1603)"
"(apply"
" raise-argument-error"
" 'keyword-apply"
" what_1602"
" which_1603"
" proc_1596"
" kws_1597"
" kw-vals_1598"
" normal-args_1599"
" normal-argss_1600))))"
"(begin"
"        (if (procedure? proc_1596) (void) (let-values () (type-error_1601 \"procedure?\" 0)))"
"((letrec-values(((loop_1604)"
"(lambda(ks_1605)"
"(if(null? ks_1605)"
"(let-values()(void))"
"(if(let-values(((or-part_1606)(not(pair? ks_1605))))"
"(if or-part_1606 or-part_1606(not(keyword?(car ks_1605)))))"
"                                (let-values () (type-error_1601 \"(listof keyword?)\" 1))"
"(if(null?(cdr ks_1605))"
"(let-values()(void))"
"(if(let-values(((or-part_1607)(not(pair?(cdr ks_1605)))))"
"(if or-part_1607 or-part_1607(not(keyword?(cadr ks_1605)))))"
"(let-values()(loop_1604(cdr ks_1605)))"
"(if(keyword<?(car ks_1605)(cadr ks_1605))"
"(let-values()(loop_1604(cdr ks_1605)))"
"(let-values()"
"                                        (type-error_1601 \"(and/c (listof? keyword?) sorted? distinct?)\" 1))))))))))"
" loop_1604)"
" kws_1597)"
"        (if (list? kw-vals_1598) (void) (let-values () (type-error_1601 \"list?\" 2)))"
"(if(=(length kws_1597)(length kw-vals_1598))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'keyword-apply"
"             \"keyword list length does not match value list length\""
"             \"keyword list length\""
"(length kws_1597)"
"             \"value list length\""
"(length kw-vals_1598)"
"             \"keyword list\""
" kws_1597"
"             \"value list\""
" kw-vals_1598)))"
"(let-values(((normal-args_1608)"
"((letrec-values(((loop_1609)"
"(lambda(normal-argss_1610 pos_1611)"
"(if(null?(cdr normal-argss_1610))"
"(let-values(((l_1612)(car normal-argss_1610)))"
"                                              (if (list? l_1612) l_1612 (type-error_1601 \"list?\" pos_1611)))"
"(cons"
"(car normal-argss_1610)"
"(loop_1609(cdr normal-argss_1610)(add1 pos_1611)))))))"
" loop_1609)"
"(cons normal-args_1599 normal-argss_1600)"
" 3)))"
"(if(null? kws_1597)"
"(apply proc_1596 normal-args_1608)"
"(apply"
"(keyword-procedure-extract/method kws_1597(+ 2(length normal-args_1608)) proc_1596 0)"
" kws_1597"
" kw-vals_1598"
" normal-args_1608)))))))"
"(define-values"
"(procedure-keywords)"
"(lambda(p_1613)"
"(if(keyword-procedure? p_1613)"
"(let-values()(values(keyword-procedure-required p_1613)(keyword-procedure-allowed p_1613)))"
"(if(procedure? p_1613)"
"(let-values()"
"(if(new-procedure? p_1613)"
"(let-values(((v_1614)(new-procedure-ref p_1613)))"
"(if(procedure? v_1614)"
"(procedure-keywords v_1614)"
"(let-values(((a_1615)(procedure-accessor-ref p_1613)))"
"(if a_1615(procedure-keywords(a_1615 p_1613))(values null null)))))"
"(values null null)))"
"        (let-values () (raise-argument-error 'procedure-keywords \"procedure?\" p_1613))))))"
"(define-values"
"(missing-kw)"
"(lambda(proc_1616 . args_1617)(apply(keyword-procedure-extract/method null 0 proc_1616 0) null null args_1617)))"
"(define-values"
"(check-kw-args)"
"(lambda(p_1618 kws_1619)"
"((letrec-values(((loop_1620)"
"(lambda(kws_1621 required_1622 allowed_1623)"
"(if(null? kws_1621)"
"(let-values()(if(null? required_1622)(values #f #f)(values(car required_1622) #f)))"
"(if(if(pair? required_1622)(eq?(car required_1622)(car kws_1621)) #f)"
"(let-values()"
"(loop_1620(cdr kws_1621)(cdr required_1622)(if allowed_1623(cdr allowed_1623) #f)))"
"(if(not allowed_1623)"
"(let-values()(loop_1620(cdr kws_1621) required_1622 #f))"
"(if(pair? allowed_1623)"
"(let-values()"
"(if(eq?(car allowed_1623)(car kws_1621))"
"(loop_1620(cdr kws_1621) required_1622(cdr allowed_1623))"
"(loop_1620 kws_1621 required_1622(cdr allowed_1623))))"
"(let-values()(values #f(car kws_1621))))))))))"
" loop_1620)"
" kws_1619"
"(keyword-procedure-required p_1618)"
"(keyword-procedure-allowed p_1618))))"
"(define-values"
"(make-keyword-checker)"
"(lambda(req-kws_1624 allowed-kws_1625 arity_1626)"
"(let-values()"
"(if(not allowed-kws_1625)"
"(let-values()"
"(if(null? req-kws_1624)"
"(let-values()"
"(if(integer? arity_1626)"
"(let-values()(lambda(kws_1637 a_1638)(= a_1638 arity_1626)))"
"(if(arity-at-least? arity_1626)"
"(let-values()"
"(let-values(((arity_1639)(arity-at-least-value arity_1626)))"
"(lambda(kws_1640 a_1641)(>= a_1641 arity_1639))))"
"(let-values()(lambda(kws_1642 a_1643)(arity-includes? arity_1626 a_1643))))))"
"(let-values()"
"(if(integer? arity_1626)"
"(let-values()"
"(lambda(kws_1644 a_1645)(if(subset?$1 req-kws_1624 kws_1644)(= a_1645 arity_1626) #f)))"
"(if(arity-at-least? arity_1626)"
"(let-values()"
"(let-values(((arity_1646)(arity-at-least-value arity_1626)))"
"(lambda(kws_1647 a_1648)(if(subset?$1 req-kws_1624 kws_1647)(>= a_1648 arity_1646) #f))))"
"(let-values()"
"(lambda(kws_1649 a_1650)"
"(if(subset?$1 req-kws_1624 kws_1649)(arity-includes? arity_1626 a_1650) #f))))))))"
"(if(null? allowed-kws_1625)"
"(let-values()"
"(if(integer? arity_1626)"
"(let-values()(lambda(kws_1651 a_1652)(if(null? kws_1651)(= a_1652 arity_1626) #f)))"
"(if(arity-at-least? arity_1626)"
"(let-values()"
"(let-values(((arity_1653)(arity-at-least-value arity_1626)))"
"(lambda(kws_1654 a_1655)(if(null? kws_1654)(>= a_1655 arity_1653) #f))))"
"(let-values()"
"(lambda(kws_1656 a_1657)(if(null? kws_1656)(arity-includes? arity_1626 a_1657) #f))))))"
"(let-values()"
"(if(null? req-kws_1624)"
"(let-values()"
"(if(integer? arity_1626)"
"(let-values()"
"(lambda(kws_1658 a_1659)(if(subset?$1 kws_1658 allowed-kws_1625)(= a_1659 arity_1626) #f)))"
"(if(arity-at-least? arity_1626)"
"(let-values()"
"(let-values(((arity_1660)(arity-at-least-value arity_1626)))"
"(lambda(kws_1661 a_1662)"
"(if(subset?$1 kws_1661 allowed-kws_1625)(>= a_1662 arity_1660) #f))))"
"(let-values()"
"(lambda(kws_1663 a_1664)"
"(if(subset?$1 kws_1663 allowed-kws_1625)(arity-includes? arity_1626 a_1664) #f))))))"
"(let-values()"
"(if(equal? req-kws_1624 allowed-kws_1625)"
"(if(integer? arity_1626)"
"(let-values()"
"(lambda(kws_1665 a_1666)"
"(if((letrec-values(((loop_1667)"
"(lambda(kws_1668 req-kws_1669)"
"(if(null? req-kws_1669)"
"(null? kws_1668)"
"(if(null? kws_1668)"
" #f"
"(if(eq?(car kws_1668)(car req-kws_1669))"
"(loop_1667(cdr kws_1668)(cdr req-kws_1669))"
" #f))))))"
" loop_1667)"
" kws_1665"
" req-kws_1624)"
"(= a_1666 arity_1626)"
" #f)))"
"(if(arity-at-least? arity_1626)"
"(let-values()"
"(let-values(((arity_1670)(arity-at-least-value arity_1626)))"
"(lambda(kws_1671 a_1672)"
"(if((letrec-values(((loop_1673)"
"(lambda(kws_1674 req-kws_1675)"
"(if(null? req-kws_1675)"
"(null? kws_1674)"
"(if(null? kws_1674)"
" #f"
"(if(eq?(car kws_1674)(car req-kws_1675))"
"(loop_1673(cdr kws_1674)(cdr req-kws_1675))"
" #f))))))"
" loop_1673)"
" kws_1671"
" req-kws_1624)"
"(>= a_1672 arity_1670)"
" #f))))"
"(let-values()"
"(lambda(kws_1676 a_1677)"
"(if((letrec-values(((loop_1678)"
"(lambda(kws_1679 req-kws_1680)"
"(if(null? req-kws_1680)"
"(null? kws_1679)"
"(if(null? kws_1679)"
" #f"
"(if(eq?(car kws_1679)(car req-kws_1680))"
"(loop_1678(cdr kws_1679)(cdr req-kws_1680))"
" #f))))))"
" loop_1678)"
" kws_1676"
" req-kws_1624)"
"(arity-includes? arity_1626 a_1677)"
" #f)))))"
"(if(integer? arity_1626)"
"(let-values()"
"(lambda(kws_1681 a_1682)"
"(if(subsets? req-kws_1624 kws_1681 allowed-kws_1625)(= a_1682 arity_1626) #f)))"
"(if(arity-at-least? arity_1626)"
"(let-values()"
"(let-values(((arity_1683)(arity-at-least-value arity_1626)))"
"(lambda(kws_1684 a_1685)"
"(if(subsets? req-kws_1624 kws_1684 allowed-kws_1625)(>= a_1685 arity_1683) #f))))"
"(let-values()"
"(lambda(kws_1686 a_1687)"
"(if(subsets? req-kws_1624 kws_1686 allowed-kws_1625)"
"(arity-includes? arity_1626 a_1687)"
" #f))))))))))))))"
"(define-values"
"(arity-includes?)"
"(lambda(arity_1688 a_1689)"
"(if(integer? arity_1688)"
"(let-values()(= arity_1688 a_1689))"
"(if(arity-at-least? arity_1688)"
"(let-values()(>= a_1689(arity-at-least-value a_1689)))"
"(let-values()(ormap(lambda(ar_1690)(arity-includes? ar_1690 a_1689)) arity_1688))))))"
"(define-values"
"(subset?$1)"
"(lambda(l1_1691 l2_1692)"
"(if(null? l1_1691)"
"(let-values() #t)"
"(if(null? l2_1692)"
"(let-values() #f)"
"(if(eq?(car l1_1691)(car l2_1692))"
"(let-values()(subset?$1(cdr l1_1691)(cdr l2_1692)))"
"(let-values()(subset?$1 l1_1691(cdr l2_1692))))))))"
"(define-values"
"(subsets?)"
"(lambda(l1_1693 l2_1694 l3_1695)"
"(if(null? l1_1693)"
"(let-values()(subset?$1 l2_1694 l3_1695))"
"(if(null? l2_1694)"
"(let-values() #f)"
"(if(null? l3_1695)"
"(let-values() #f)"
"(let-values()"
"(let-values(((v2_1696)(car l2_1694)))"
"(if(eq?(car l1_1693) v2_1696)"
"(let-values()(subsets?(cdr l1_1693)(cdr l2_1694)(cdr l3_1695)))"
"(if(eq? v2_1696(car l3_1695))"
"(let-values()(subsets? l1_1693(cdr l2_1694)(cdr l3_1695)))"
"(let-values()(subsets? l1_1693 l2_1694(cdr l3_1695))))))))))))"
"(define-values"
"(keyword-procedure-extract/method)"
"(lambda(kws_1697 n_1698 p_1699 method-n_1700)"
"(if(if(keyword-procedure? p_1699)((keyword-procedure-checker p_1699) kws_1697 n_1698) #f)"
"(keyword-procedure-proc p_1699)"
"(let-values(((p2_1701)"
"(if(not(keyword-procedure? p_1699))"
"(if(procedure? p_1699)"
"(let-values(((or-part_1702)"
"(if(new-procedure? p_1699)"
"(let-values(((a_1703)(procedure-accessor-ref p_1699)))"
"(if a_1703(a_1703 p_1699) #f))"
" #f)))"
"(if or-part_1702"
" or-part_1702"
"(let-values(((or-part_1704)(procedure-extract-target p_1699)))"
"(if or-part_1704 or-part_1704(if(new-procedure? p_1699) 'method #f)))))"
" #f)"
" #f)))"
"(if p2_1701"
"(if(eq? p2_1701 'method)"
"(let-values(((p3_1705)"
"(keyword-procedure-extract/method"
" kws_1697"
"(add1 n_1698)"
"(new-procedure-ref p_1699)"
"(add1 method-n_1700))))"
"(lambda(kws_1706 kw-args_1707 . args_1708)"
"(apply p3_1705 kws_1706 kw-args_1707(cons p_1699 args_1708))))"
"(keyword-procedure-extract/method kws_1697 n_1698 p2_1701 method-n_1700))"
"(lambda(kws_1709 kw-args_1710 . args_1711)"
"(let-values(((missing-kw_1712 extra-kw_1713)"
"(if(keyword-procedure? p_1699)(check-kw-args p_1699 kws_1709)(values #f(car kws_1709)))))"
"(let-values(((n_1714)"
"(let-values(((method-n_1717)"
"(+"
" method-n_1700"
"(if(let-values(((or-part_1718)(keyword-method? p_1699)))"
"(if or-part_1718 or-part_1718(okm? p_1699)))"
" 1"
" 0))))"
"(if(>= n_1698 method-n_1717)(- n_1698 method-n_1717) n_1698)))"
"((args-str_1715)"
"(if(if(null? args_1711)(null? kws_1709) #f)"
"                              \"\""
"(apply"
" string-append"
"                               \"\\n  arguments...:\""
"(append"
"                                (map (lambda (v_1719) (format \"\\n   ~e\" v_1719)) args_1711)"
"(map"
"                                 (lambda (kw_1720 kw-arg_1721) (format \"\\n   ~a ~e\" kw_1720 kw-arg_1721))"
" kws_1709"
" kw-args_1710)))))"
"((proc-name_1716)"
"(lambda(p_1722)"
"(let-values(((or-part_1723)"
"(if(named-keyword-procedure? p_1722)"
"(car(keyword-procedure-name+fail p_1722))"
" #f)))"
"(if or-part_1723"
" or-part_1723"
"(let-values(((or-part_1724)(object-name p_1722)))"
"(if or-part_1724 or-part_1724 p_1722)))))))"
"(raise"
"(exn:fail:contract"
"(if extra-kw_1713"
"(if(keyword-procedure? p_1699)"
"(format"
"(string-append"
"                        \"application: procedure does not expect an argument with given keyword\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  given keyword: ~a\""
"                        \"~a\")"
"(proc-name_1716 p_1699)"
" extra-kw_1713"
" args-str_1715)"
"(if(procedure? p_1699)"
"(format"
"(string-append"
"                          \"application: procedure does not accept keyword arguments\\n\""
"                          \"  procedure: ~a\""
"                          \"~a\")"
"(proc-name_1716 p_1699)"
" args-str_1715)"
"(format"
"(string-append"
"                          \"application: not a procedure;\\n\""
"                          \" expected a procedure that can be applied to arguments\\n\""
"                          \"  given: ~e\""
"                          \"~a\")"
" p_1699"
" args-str_1715)))"
"(if missing-kw_1712"
"(format"
"(string-append"
"                        \"application: required keyword argument not supplied\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  required keyword: ~a\""
"                        \"~a\")"
"(proc-name_1716 p_1699)"
" missing-kw_1712"
" args-str_1715)"
"(format"
"(string-append"
"                        \"application: no case matching ~a non-keyword argument~a\\n\""
"                        \"  procedure: ~a\""
"                        \"~a\")"
"(- n_1714 2)"
"                       (if (= 1 (- n_1714 2)) \"\" \"s\")"
"(proc-name_1716 p_1699)"
" args-str_1715)))"
"(current-continuation-marks)))))))))))"
"(void)"
"(void)"
"(define-values(print-values)(lambda vs_3(begin(for-each(current-print) vs_3)(apply values vs_3))))"
"(void)"
"(void)"
"(define-values"
"(alt-reverse)"
"(if(eval-jit-enabled)"
"(let-values(((reverse_1)"
"(lambda(l_2)"
"(begin"
"                      (if (list? l_2) (void) (raise-argument-error 'reverse \"list?\" l_2))"
"(letrec-values(((loop_3)"
"(lambda(a_4 l_5)(if(null? l_5) a_4(loop_3(cons(car l_5) a_4)(cdr l_5))))))"
"(loop_3 null l_2))))))"
" reverse_1)"
" reverse))"
"(void)"
"(void)"
"(define-values"
"(sort vector-sort vector-sort!)"
"(let-values()"
"(let-values(((precompiled-sorts_49)"
"(let-values(((sorts_119)(make-hasheq)))"
"(let-values()"
"(begin"
"(let-values(((sort-proc_135)"
"(lambda(A_136 n_137)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_177)(unsafe-fxrshift n_137 1)))"
"(let-values(((n/2+_178)(unsafe-fx- n_137 n/2-_177)))"
"(letrec-values(((copying-mergesort_214)"
"(lambda(Alo_215 Blo_216 n_217)"
"(if(unsafe-fx= n_217 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_136"
" Blo_216"
"(unsafe-vector-ref A_136 Alo_215)))"
"(if(unsafe-fx= n_217 2)"
"(let-values()"
"(let-values(((x_218)"
"(unsafe-vector-ref"
" A_136"
" Alo_215))"
"((y_219)"
"(unsafe-vector-ref"
" A_136"
"(unsafe-fx+ Alo_215 1))))"
"(if(unsafe-fl< y_219 x_218)"
"(begin"
"(unsafe-vector-set! A_136 Blo_216 y_219)"
"(unsafe-vector-set!"
" A_136"
"(unsafe-fx+ Blo_216 1)"
" x_218))"
"(begin"
"(unsafe-vector-set! A_136 Blo_216 x_218)"
"(unsafe-vector-set!"
" A_136"
"(unsafe-fx+ Blo_216 1)"
" y_219)))))"
"(if(unsafe-fx< n_217 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_136"
" Blo_216"
"(unsafe-vector-ref A_136 Alo_215))"
"((letrec-values(((iloop_220)"
"(lambda(i_221)"
"(if(unsafe-fx<"
" i_221"
" n_217)"
"(let-values()"
"(let-values(((ref-i_222)"
"(unsafe-vector-ref"
" A_136"
"(unsafe-fx+"
" Alo_215"
" i_221))))"
"((letrec-values(((jloop_223)"
"(lambda(j_224)"
"(let-values(((ref-j-1_225)"
"(unsafe-vector-ref"
" A_136"
"(unsafe-fx-"
" j_224"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_216"
" j_224)"
"(unsafe-fl<"
" ref-i_222"
" ref-j-1_225)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_136"
" j_224"
" ref-j-1_225)"
"(jloop_223"
"(unsafe-fx-"
" j_224"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_136"
" j_224"
" ref-i_222)"
"(iloop_220"
"(unsafe-fx+"
" i_221"
" 1))))))))"
" jloop_223)"
"(unsafe-fx+"
" Blo_216"
" i_221))))"
"(void)))))"
" iloop_220)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_226)"
"(unsafe-fxrshift n_217 1)))"
"(let-values(((n/2+_227)"
"(unsafe-fx- n_217 n/2-_226)))"
"(let-values(((Amid1_228)"
"(unsafe-fx+"
" Alo_215"
" n/2-_226))"
"((Amid2_229)"
"(unsafe-fx+"
" Alo_215"
" n/2+_227))"
"((Bmid1_230)"
"(unsafe-fx+"
" Blo_216"
" n/2-_226)))"
"(begin"
"(copying-mergesort_214"
" Amid1_228"
" Bmid1_230"
" n/2+_227)"
"(copying-mergesort_214"
" Alo_215"
" Amid2_229"
" n/2-_226)"
"(let-values(((b2_231)"
"(unsafe-fx+"
" Blo_216"
" n_217)))"
"((letrec-values(((loop_232)"
"(lambda(a1_233"
" b1_234"
" c1_235)"
"(let-values(((x_236)"
"(unsafe-vector-ref"
" A_136"
" a1_233))"
"((y_237)"
"(unsafe-vector-ref"
" A_136"
" b1_234)))"
"(if(not"
"(unsafe-fl<"
" y_237"
" x_236))"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_235"
" x_236)"
"(let-values(((a1_238)"
"(unsafe-fx+"
" a1_233"
" 1))"
"((c1_239)"
"(unsafe-fx+"
" c1_235"
" 1)))"
"(if(unsafe-fx<"
" c1_239"
" b1_234)"
"(let-values()"
"(loop_232"
" a1_238"
" b1_234"
" c1_239))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_235"
" y_237)"
"(let-values(((b1_240)"
"(unsafe-fx+"
" b1_234"
" 1))"
"((c1_241)"
"(unsafe-fx+"
" c1_235"
" 1)))"
"(if(unsafe-fx<="
" b2_231"
" b1_240)"
"((letrec-values(((loop_242)"
"(lambda(a1_243"
" c1_244)"
"(if(unsafe-fx<"
" c1_244"
" b1_240)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_244"
"(unsafe-vector-ref"
" A_136"
" a1_243))"
"(loop_242"
"(unsafe-fx+"
" a1_243"
" 1)"
"(unsafe-fx+"
" c1_244"
" 1))))"
"(void)))))"
" loop_242)"
" a1_233"
" c1_241)"
"(loop_232"
" a1_233"
" b1_240"
" c1_241)))))))))"
" loop_232)"
" Amid2_229"
" Bmid1_230"
" Blo_216)))))))))))))"
"(let-values(((Alo_245) 0)"
"((Amid1_246) n/2-_177)"
"((Amid2_247) n/2+_178)"
"((Ahi_248) n_137)"
"((B1lo_249) n_137))"
"(begin"
"(copying-mergesort_214 Amid1_246 B1lo_249 n/2+_178)"
"(if(zero? n/2-_177)"
"(void)"
"(let-values()"
"(copying-mergesort_214 Alo_245 Amid2_247 n/2-_177)))"
"(let-values(((b2_250) Ahi_248))"
"((letrec-values(((loop_251)"
"(lambda(a1_252 b1_253 c1_254)"
"(let-values(((x_255)"
"(unsafe-vector-ref"
" A_136"
" a1_252))"
"((y_256)"
"(unsafe-vector-ref"
" A_136"
" b1_253)))"
"(if(unsafe-fl< x_255 y_256)"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_254"
" x_255)"
"(let-values(((a1_257)"
"(unsafe-fx+ a1_252 1))"
"((c1_258)"
"(unsafe-fx+ c1_254 1)))"
"(if(unsafe-fx< c1_258 b1_253)"
"(let-values()"
"(loop_251 a1_257 b1_253 c1_258))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_254"
" y_256)"
"(let-values(((b1_259)"
"(unsafe-fx+ b1_253 1))"
"((c1_260)"
"(unsafe-fx+ c1_254 1)))"
"(if(unsafe-fx<= b2_250 b1_259)"
"((letrec-values(((loop_261)"
"(lambda(a1_262"
" c1_263)"
"(if(unsafe-fx<"
" c1_263"
" b1_259)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_263"
"(unsafe-vector-ref"
" A_136"
" a1_262))"
"(loop_261"
"(unsafe-fx+"
" a1_262"
" 1)"
"(unsafe-fx+"
" c1_263"
" 1))))"
"(void)))))"
" loop_261)"
" a1_252"
" c1_260)"
"(loop_251"
" a1_252"
" b1_259"
" c1_260)))))))))"
" loop_251)"
" B1lo_249"
" Amid2_247"
" Alo_245))))))))))))"
"(begin"
"(hash-set! sorts_119 unsafe-fl< sort-proc_135)"
"(hash-set! sorts_119 unsafe-fl<= sort-proc_135)))"
"(let-values(((sort-proc_264)"
"(lambda(A_265 n_266)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_306)(unsafe-fxrshift n_266 1)))"
"(let-values(((n/2+_307)(unsafe-fx- n_266 n/2-_306)))"
"(letrec-values(((copying-mergesort_343)"
"(lambda(Alo_344 Blo_345 n_346)"
"(if(unsafe-fx= n_346 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_265"
" Blo_345"
"(unsafe-vector-ref A_265 Alo_344)))"
"(if(unsafe-fx= n_346 2)"
"(let-values()"
"(let-values(((x_347)"
"(unsafe-vector-ref"
" A_265"
" Alo_344))"
"((y_348)"
"(unsafe-vector-ref"
" A_265"
"(unsafe-fx+ Alo_344 1))))"
"(if(unsafe-fl> y_348 x_347)"
"(begin"
"(unsafe-vector-set! A_265 Blo_345 y_348)"
"(unsafe-vector-set!"
" A_265"
"(unsafe-fx+ Blo_345 1)"
" x_347))"
"(begin"
"(unsafe-vector-set! A_265 Blo_345 x_347)"
"(unsafe-vector-set!"
" A_265"
"(unsafe-fx+ Blo_345 1)"
" y_348)))))"
"(if(unsafe-fx< n_346 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_265"
" Blo_345"
"(unsafe-vector-ref A_265 Alo_344))"
"((letrec-values(((iloop_349)"
"(lambda(i_350)"
"(if(unsafe-fx<"
" i_350"
" n_346)"
"(let-values()"
"(let-values(((ref-i_351)"
"(unsafe-vector-ref"
" A_265"
"(unsafe-fx+"
" Alo_344"
" i_350))))"
"((letrec-values(((jloop_352)"
"(lambda(j_353)"
"(let-values(((ref-j-1_354)"
"(unsafe-vector-ref"
" A_265"
"(unsafe-fx-"
" j_353"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_345"
" j_353)"
"(unsafe-fl>"
" ref-i_351"
" ref-j-1_354)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_265"
" j_353"
" ref-j-1_354)"
"(jloop_352"
"(unsafe-fx-"
" j_353"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_265"
" j_353"
" ref-i_351)"
"(iloop_349"
"(unsafe-fx+"
" i_350"
" 1))))))))"
" jloop_352)"
"(unsafe-fx+"
" Blo_345"
" i_350))))"
"(void)))))"
" iloop_349)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_355)"
"(unsafe-fxrshift n_346 1)))"
"(let-values(((n/2+_356)"
"(unsafe-fx- n_346 n/2-_355)))"
"(let-values(((Amid1_357)"
"(unsafe-fx+"
" Alo_344"
" n/2-_355))"
"((Amid2_358)"
"(unsafe-fx+"
" Alo_344"
" n/2+_356))"
"((Bmid1_359)"
"(unsafe-fx+"
" Blo_345"
" n/2-_355)))"
"(begin"
"(copying-mergesort_343"
" Amid1_357"
" Bmid1_359"
" n/2+_356)"
"(copying-mergesort_343"
" Alo_344"
" Amid2_358"
" n/2-_355)"
"(let-values(((b2_360)"
"(unsafe-fx+"
" Blo_345"
" n_346)))"
"((letrec-values(((loop_361)"
"(lambda(a1_362"
" b1_363"
" c1_364)"
"(let-values(((x_365)"
"(unsafe-vector-ref"
" A_265"
" a1_362))"
"((y_366)"
"(unsafe-vector-ref"
" A_265"
" b1_363)))"
"(if(not"
"(unsafe-fl>"
" y_366"
" x_365))"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_364"
" x_365)"
"(let-values(((a1_367)"
"(unsafe-fx+"
" a1_362"
" 1))"
"((c1_368)"
"(unsafe-fx+"
" c1_364"
" 1)))"
"(if(unsafe-fx<"
" c1_368"
" b1_363)"
"(let-values()"
"(loop_361"
" a1_367"
" b1_363"
" c1_368))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_364"
" y_366)"
"(let-values(((b1_369)"
"(unsafe-fx+"
" b1_363"
" 1))"
"((c1_370)"
"(unsafe-fx+"
" c1_364"
" 1)))"
"(if(unsafe-fx<="
" b2_360"
" b1_369)"
"((letrec-values(((loop_371)"
"(lambda(a1_372"
" c1_373)"
"(if(unsafe-fx<"
" c1_373"
" b1_369)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_373"
"(unsafe-vector-ref"
" A_265"
" a1_372))"
"(loop_371"
"(unsafe-fx+"
" a1_372"
" 1)"
"(unsafe-fx+"
" c1_373"
" 1))))"
"(void)))))"
" loop_371)"
" a1_362"
" c1_370)"
"(loop_361"
" a1_362"
" b1_369"
" c1_370)))))))))"
" loop_361)"
" Amid2_358"
" Bmid1_359"
" Blo_345)))))))))))))"
"(let-values(((Alo_374) 0)"
"((Amid1_375) n/2-_306)"
"((Amid2_376) n/2+_307)"
"((Ahi_377) n_266)"
"((B1lo_378) n_266))"
"(begin"
"(copying-mergesort_343 Amid1_375 B1lo_378 n/2+_307)"
"(if(zero? n/2-_306)"
"(void)"
"(let-values()"
"(copying-mergesort_343 Alo_374 Amid2_376 n/2-_306)))"
"(let-values(((b2_379) Ahi_377))"
"((letrec-values(((loop_380)"
"(lambda(a1_381 b1_382 c1_383)"
"(let-values(((x_384)"
"(unsafe-vector-ref"
" A_265"
" a1_381))"
"((y_385)"
"(unsafe-vector-ref"
" A_265"
" b1_382)))"
"(if(unsafe-fl> x_384 y_385)"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_383"
" x_384)"
"(let-values(((a1_386)"
"(unsafe-fx+ a1_381 1))"
"((c1_387)"
"(unsafe-fx+ c1_383 1)))"
"(if(unsafe-fx< c1_387 b1_382)"
"(let-values()"
"(loop_380 a1_386 b1_382 c1_387))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_383"
" y_385)"
"(let-values(((b1_388)"
"(unsafe-fx+ b1_382 1))"
"((c1_389)"
"(unsafe-fx+ c1_383 1)))"
"(if(unsafe-fx<= b2_379 b1_388)"
"((letrec-values(((loop_390)"
"(lambda(a1_391"
" c1_392)"
"(if(unsafe-fx<"
" c1_392"
" b1_388)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_392"
"(unsafe-vector-ref"
" A_265"
" a1_391))"
"(loop_390"
"(unsafe-fx+"
" a1_391"
" 1)"
"(unsafe-fx+"
" c1_392"
" 1))))"
"(void)))))"
" loop_390)"
" a1_381"
" c1_389)"
"(loop_380"
" a1_381"
" b1_388"
" c1_389)))))))))"
" loop_380)"
" B1lo_378"
" Amid2_376"
" Alo_374))))))))))))"
"(begin"
"(hash-set! sorts_119 unsafe-fl> sort-proc_264)"
"(hash-set! sorts_119 unsafe-fl>= sort-proc_264)))"
"(let-values(((sort-proc_393)"
"(lambda(A_394 n_395)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_435)(unsafe-fxrshift n_395 1)))"
"(let-values(((n/2+_436)(unsafe-fx- n_395 n/2-_435)))"
"(letrec-values(((copying-mergesort_472)"
"(lambda(Alo_473 Blo_474 n_475)"
"(if(unsafe-fx= n_475 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_394"
" Blo_474"
"(unsafe-vector-ref A_394 Alo_473)))"
"(if(unsafe-fx= n_475 2)"
"(let-values()"
"(let-values(((x_476)"
"(unsafe-vector-ref"
" A_394"
" Alo_473))"
"((y_477)"
"(unsafe-vector-ref"
" A_394"
"(unsafe-fx+ Alo_473 1))))"
"(if(unsafe-fx< y_477 x_476)"
"(begin"
"(unsafe-vector-set! A_394 Blo_474 y_477)"
"(unsafe-vector-set!"
" A_394"
"(unsafe-fx+ Blo_474 1)"
" x_476))"
"(begin"
"(unsafe-vector-set! A_394 Blo_474 x_476)"
"(unsafe-vector-set!"
" A_394"
"(unsafe-fx+ Blo_474 1)"
" y_477)))))"
"(if(unsafe-fx< n_475 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_394"
" Blo_474"
"(unsafe-vector-ref A_394 Alo_473))"
"((letrec-values(((iloop_478)"
"(lambda(i_479)"
"(if(unsafe-fx<"
" i_479"
" n_475)"
"(let-values()"
"(let-values(((ref-i_480)"
"(unsafe-vector-ref"
" A_394"
"(unsafe-fx+"
" Alo_473"
" i_479))))"
"((letrec-values(((jloop_481)"
"(lambda(j_482)"
"(let-values(((ref-j-1_483)"
"(unsafe-vector-ref"
" A_394"
"(unsafe-fx-"
" j_482"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_474"
" j_482)"
"(unsafe-fx<"
" ref-i_480"
" ref-j-1_483)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_394"
" j_482"
" ref-j-1_483)"
"(jloop_481"
"(unsafe-fx-"
" j_482"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_394"
" j_482"
" ref-i_480)"
"(iloop_478"
"(unsafe-fx+"
" i_479"
" 1))))))))"
" jloop_481)"
"(unsafe-fx+"
" Blo_474"
" i_479))))"
"(void)))))"
" iloop_478)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_484)"
"(unsafe-fxrshift n_475 1)))"
"(let-values(((n/2+_485)"
"(unsafe-fx- n_475 n/2-_484)))"
"(let-values(((Amid1_486)"
"(unsafe-fx+"
" Alo_473"
" n/2-_484))"
"((Amid2_487)"
"(unsafe-fx+"
" Alo_473"
" n/2+_485))"
"((Bmid1_488)"
"(unsafe-fx+"
" Blo_474"
" n/2-_484)))"
"(begin"
"(copying-mergesort_472"
" Amid1_486"
" Bmid1_488"
" n/2+_485)"
"(copying-mergesort_472"
" Alo_473"
" Amid2_487"
" n/2-_484)"
"(let-values(((b2_489)"
"(unsafe-fx+"
" Blo_474"
" n_475)))"
"((letrec-values(((loop_490)"
"(lambda(a1_491"
" b1_492"
" c1_493)"
"(let-values(((x_494)"
"(unsafe-vector-ref"
" A_394"
" a1_491))"
"((y_495)"
"(unsafe-vector-ref"
" A_394"
" b1_492)))"
"(if(not"
"(unsafe-fx<"
" y_495"
" x_494))"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_493"
" x_494)"
"(let-values(((a1_496)"
"(unsafe-fx+"
" a1_491"
" 1))"
"((c1_497)"
"(unsafe-fx+"
" c1_493"
" 1)))"
"(if(unsafe-fx<"
" c1_497"
" b1_492)"
"(let-values()"
"(loop_490"
" a1_496"
" b1_492"
" c1_497))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_493"
" y_495)"
"(let-values(((b1_498)"
"(unsafe-fx+"
" b1_492"
" 1))"
"((c1_499)"
"(unsafe-fx+"
" c1_493"
" 1)))"
"(if(unsafe-fx<="
" b2_489"
" b1_498)"
"((letrec-values(((loop_500)"
"(lambda(a1_501"
" c1_502)"
"(if(unsafe-fx<"
" c1_502"
" b1_498)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_502"
"(unsafe-vector-ref"
" A_394"
" a1_501))"
"(loop_500"
"(unsafe-fx+"
" a1_501"
" 1)"
"(unsafe-fx+"
" c1_502"
" 1))))"
"(void)))))"
" loop_500)"
" a1_491"
" c1_499)"
"(loop_490"
" a1_491"
" b1_498"
" c1_499)))))))))"
" loop_490)"
" Amid2_487"
" Bmid1_488"
" Blo_474)))))))))))))"
"(let-values(((Alo_503) 0)"
"((Amid1_504) n/2-_435)"
"((Amid2_505) n/2+_436)"
"((Ahi_506) n_395)"
"((B1lo_507) n_395))"
"(begin"
"(copying-mergesort_472 Amid1_504 B1lo_507 n/2+_436)"
"(if(zero? n/2-_435)"
"(void)"
"(let-values()"
"(copying-mergesort_472 Alo_503 Amid2_505 n/2-_435)))"
"(let-values(((b2_508) Ahi_506))"
"((letrec-values(((loop_509)"
"(lambda(a1_510 b1_511 c1_512)"
"(let-values(((x_513)"
"(unsafe-vector-ref"
" A_394"
" a1_510))"
"((y_514)"
"(unsafe-vector-ref"
" A_394"
" b1_511)))"
"(if(unsafe-fx< x_513 y_514)"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_512"
" x_513)"
"(let-values(((a1_515)"
"(unsafe-fx+ a1_510 1))"
"((c1_516)"
"(unsafe-fx+ c1_512 1)))"
"(if(unsafe-fx< c1_516 b1_511)"
"(let-values()"
"(loop_509 a1_515 b1_511 c1_516))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_512"
" y_514)"
"(let-values(((b1_517)"
"(unsafe-fx+ b1_511 1))"
"((c1_518)"
"(unsafe-fx+ c1_512 1)))"
"(if(unsafe-fx<= b2_508 b1_517)"
"((letrec-values(((loop_519)"
"(lambda(a1_520"
" c1_521)"
"(if(unsafe-fx<"
" c1_521"
" b1_517)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_521"
"(unsafe-vector-ref"
" A_394"
" a1_520))"
"(loop_519"
"(unsafe-fx+"
" a1_520"
" 1)"
"(unsafe-fx+"
" c1_521"
" 1))))"
"(void)))))"
" loop_519)"
" a1_510"
" c1_518)"
"(loop_509"
" a1_510"
" b1_517"
" c1_518)))))))))"
" loop_509)"
" B1lo_507"
" Amid2_505"
" Alo_503))))))))))))"
"(begin"
"(hash-set! sorts_119 unsafe-fx< sort-proc_393)"
"(hash-set! sorts_119 unsafe-fx<= sort-proc_393)))"
"(let-values(((sort-proc_522)"
"(lambda(A_523 n_524)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_564)(unsafe-fxrshift n_524 1)))"
"(let-values(((n/2+_565)(unsafe-fx- n_524 n/2-_564)))"
"(letrec-values(((copying-mergesort_601)"
"(lambda(Alo_602 Blo_603 n_604)"
"(if(unsafe-fx= n_604 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_523"
" Blo_603"
"(unsafe-vector-ref A_523 Alo_602)))"
"(if(unsafe-fx= n_604 2)"
"(let-values()"
"(let-values(((x_605)"
"(unsafe-vector-ref"
" A_523"
" Alo_602))"
"((y_606)"
"(unsafe-vector-ref"
" A_523"
"(unsafe-fx+ Alo_602 1))))"
"(if(unsafe-fx> y_606 x_605)"
"(begin"
"(unsafe-vector-set! A_523 Blo_603 y_606)"
"(unsafe-vector-set!"
" A_523"
"(unsafe-fx+ Blo_603 1)"
" x_605))"
"(begin"
"(unsafe-vector-set! A_523 Blo_603 x_605)"
"(unsafe-vector-set!"
" A_523"
"(unsafe-fx+ Blo_603 1)"
" y_606)))))"
"(if(unsafe-fx< n_604 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_523"
" Blo_603"
"(unsafe-vector-ref A_523 Alo_602))"
"((letrec-values(((iloop_607)"
"(lambda(i_608)"
"(if(unsafe-fx<"
" i_608"
" n_604)"
"(let-values()"
"(let-values(((ref-i_609)"
"(unsafe-vector-ref"
" A_523"
"(unsafe-fx+"
" Alo_602"
" i_608))))"
"((letrec-values(((jloop_610)"
"(lambda(j_611)"
"(let-values(((ref-j-1_612)"
"(unsafe-vector-ref"
" A_523"
"(unsafe-fx-"
" j_611"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_603"
" j_611)"
"(unsafe-fx>"
" ref-i_609"
" ref-j-1_612)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_523"
" j_611"
" ref-j-1_612)"
"(jloop_610"
"(unsafe-fx-"
" j_611"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_523"
" j_611"
" ref-i_609)"
"(iloop_607"
"(unsafe-fx+"
" i_608"
" 1))))))))"
" jloop_610)"
"(unsafe-fx+"
" Blo_603"
" i_608))))"
"(void)))))"
" iloop_607)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_613)"
"(unsafe-fxrshift n_604 1)))"
"(let-values(((n/2+_614)"
"(unsafe-fx- n_604 n/2-_613)))"
"(let-values(((Amid1_615)"
"(unsafe-fx+"
" Alo_602"
" n/2-_613))"
"((Amid2_616)"
"(unsafe-fx+"
" Alo_602"
" n/2+_614))"
"((Bmid1_617)"
"(unsafe-fx+"
" Blo_603"
" n/2-_613)))"
"(begin"
"(copying-mergesort_601"
" Amid1_615"
" Bmid1_617"
" n/2+_614)"
"(copying-mergesort_601"
" Alo_602"
" Amid2_616"
" n/2-_613)"
"(let-values(((b2_618)"
"(unsafe-fx+"
" Blo_603"
" n_604)))"
"((letrec-values(((loop_619)"
"(lambda(a1_620"
" b1_621"
" c1_622)"
"(let-values(((x_623)"
"(unsafe-vector-ref"
" A_523"
" a1_620))"
"((y_624)"
"(unsafe-vector-ref"
" A_523"
" b1_621)))"
"(if(not"
"(unsafe-fx>"
" y_624"
" x_623))"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_622"
" x_623)"
"(let-values(((a1_625)"
"(unsafe-fx+"
" a1_620"
" 1))"
"((c1_626)"
"(unsafe-fx+"
" c1_622"
" 1)))"
"(if(unsafe-fx<"
" c1_626"
" b1_621)"
"(let-values()"
"(loop_619"
" a1_625"
" b1_621"
" c1_626))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_622"
" y_624)"
"(let-values(((b1_627)"
"(unsafe-fx+"
" b1_621"
" 1))"
"((c1_628)"
"(unsafe-fx+"
" c1_622"
" 1)))"
"(if(unsafe-fx<="
" b2_618"
" b1_627)"
"((letrec-values(((loop_629)"
"(lambda(a1_630"
" c1_631)"
"(if(unsafe-fx<"
" c1_631"
" b1_627)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_631"
"(unsafe-vector-ref"
" A_523"
" a1_630))"
"(loop_629"
"(unsafe-fx+"
" a1_630"
" 1)"
"(unsafe-fx+"
" c1_631"
" 1))))"
"(void)))))"
" loop_629)"
" a1_620"
" c1_628)"
"(loop_619"
" a1_620"
" b1_627"
" c1_628)))))))))"
" loop_619)"
" Amid2_616"
" Bmid1_617"
" Blo_603)))))))))))))"
"(let-values(((Alo_632) 0)"
"((Amid1_633) n/2-_564)"
"((Amid2_634) n/2+_565)"
"((Ahi_635) n_524)"
"((B1lo_636) n_524))"
"(begin"
"(copying-mergesort_601 Amid1_633 B1lo_636 n/2+_565)"
"(if(zero? n/2-_564)"
"(void)"
"(let-values()"
"(copying-mergesort_601 Alo_632 Amid2_634 n/2-_564)))"
"(let-values(((b2_637) Ahi_635))"
"((letrec-values(((loop_638)"
"(lambda(a1_639 b1_640 c1_641)"
"(let-values(((x_642)"
"(unsafe-vector-ref"
" A_523"
" a1_639))"
"((y_643)"
"(unsafe-vector-ref"
" A_523"
" b1_640)))"
"(if(unsafe-fx> x_642 y_643)"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_641"
" x_642)"
"(let-values(((a1_644)"
"(unsafe-fx+ a1_639 1))"
"((c1_645)"
"(unsafe-fx+ c1_641 1)))"
"(if(unsafe-fx< c1_645 b1_640)"
"(let-values()"
"(loop_638 a1_644 b1_640 c1_645))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_641"
" y_643)"
"(let-values(((b1_646)"
"(unsafe-fx+ b1_640 1))"
"((c1_647)"
"(unsafe-fx+ c1_641 1)))"
"(if(unsafe-fx<= b2_637 b1_646)"
"((letrec-values(((loop_648)"
"(lambda(a1_649"
" c1_650)"
"(if(unsafe-fx<"
" c1_650"
" b1_646)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_650"
"(unsafe-vector-ref"
" A_523"
" a1_649))"
"(loop_648"
"(unsafe-fx+"
" a1_649"
" 1)"
"(unsafe-fx+"
" c1_650"
" 1))))"
"(void)))))"
" loop_648)"
" a1_639"
" c1_647)"
"(loop_638"
" a1_639"
" b1_646"
" c1_647)))))))))"
" loop_638)"
" B1lo_636"
" Amid2_634"
" Alo_632))))))))))))"
"(begin"
"(hash-set! sorts_119 unsafe-fx> sort-proc_522)"
"(hash-set! sorts_119 unsafe-fx>= sort-proc_522)))"
"(let-values(((sort-proc_651)"
"(lambda(A_652 n_653)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_693)(unsafe-fxrshift n_653 1)))"
"(let-values(((n/2+_694)(unsafe-fx- n_653 n/2-_693)))"
"(letrec-values(((copying-mergesort_730)"
"(lambda(Alo_731 Blo_732 n_733)"
"(if(unsafe-fx= n_733 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_652"
" Blo_732"
"(unsafe-vector-ref A_652 Alo_731)))"
"(if(unsafe-fx= n_733 2)"
"(let-values()"
"(let-values(((x_734)"
"(unsafe-vector-ref"
" A_652"
" Alo_731))"
"((y_735)"
"(unsafe-vector-ref"
" A_652"
"(unsafe-fx+ Alo_731 1))))"
"(if(< y_735 x_734)"
"(begin"
"(unsafe-vector-set! A_652 Blo_732 y_735)"
"(unsafe-vector-set!"
" A_652"
"(unsafe-fx+ Blo_732 1)"
" x_734))"
"(begin"
"(unsafe-vector-set! A_652 Blo_732 x_734)"
"(unsafe-vector-set!"
" A_652"
"(unsafe-fx+ Blo_732 1)"
" y_735)))))"
"(if(unsafe-fx< n_733 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_652"
" Blo_732"
"(unsafe-vector-ref A_652 Alo_731))"
"((letrec-values(((iloop_736)"
"(lambda(i_737)"
"(if(unsafe-fx<"
" i_737"
" n_733)"
"(let-values()"
"(let-values(((ref-i_738)"
"(unsafe-vector-ref"
" A_652"
"(unsafe-fx+"
" Alo_731"
" i_737))))"
"((letrec-values(((jloop_739)"
"(lambda(j_740)"
"(let-values(((ref-j-1_741)"
"(unsafe-vector-ref"
" A_652"
"(unsafe-fx-"
" j_740"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_732"
" j_740)"
"(<"
" ref-i_738"
" ref-j-1_741)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_652"
" j_740"
" ref-j-1_741)"
"(jloop_739"
"(unsafe-fx-"
" j_740"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_652"
" j_740"
" ref-i_738)"
"(iloop_736"
"(unsafe-fx+"
" i_737"
" 1))))))))"
" jloop_739)"
"(unsafe-fx+"
" Blo_732"
" i_737))))"
"(void)))))"
" iloop_736)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_742)"
"(unsafe-fxrshift n_733 1)))"
"(let-values(((n/2+_743)"
"(unsafe-fx- n_733 n/2-_742)))"
"(let-values(((Amid1_744)"
"(unsafe-fx+"
" Alo_731"
" n/2-_742))"
"((Amid2_745)"
"(unsafe-fx+"
" Alo_731"
" n/2+_743))"
"((Bmid1_746)"
"(unsafe-fx+"
" Blo_732"
" n/2-_742)))"
"(begin"
"(copying-mergesort_730"
" Amid1_744"
" Bmid1_746"
" n/2+_743)"
"(copying-mergesort_730"
" Alo_731"
" Amid2_745"
" n/2-_742)"
"(let-values(((b2_747)"
"(unsafe-fx+"
" Blo_732"
" n_733)))"
"((letrec-values(((loop_748)"
"(lambda(a1_749"
" b1_750"
" c1_751)"
"(let-values(((x_752)"
"(unsafe-vector-ref"
" A_652"
" a1_749))"
"((y_753)"
"(unsafe-vector-ref"
" A_652"
" b1_750)))"
"(if(not"
"(<"
" y_753"
" x_752))"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_751"
" x_752)"
"(let-values(((a1_754)"
"(unsafe-fx+"
" a1_749"
" 1))"
"((c1_755)"
"(unsafe-fx+"
" c1_751"
" 1)))"
"(if(unsafe-fx<"
" c1_755"
" b1_750)"
"(let-values()"
"(loop_748"
" a1_754"
" b1_750"
" c1_755))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_751"
" y_753)"
"(let-values(((b1_756)"
"(unsafe-fx+"
" b1_750"
" 1))"
"((c1_757)"
"(unsafe-fx+"
" c1_751"
" 1)))"
"(if(unsafe-fx<="
" b2_747"
" b1_756)"
"((letrec-values(((loop_758)"
"(lambda(a1_759"
" c1_760)"
"(if(unsafe-fx<"
" c1_760"
" b1_756)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_760"
"(unsafe-vector-ref"
" A_652"
" a1_759))"
"(loop_758"
"(unsafe-fx+"
" a1_759"
" 1)"
"(unsafe-fx+"
" c1_760"
" 1))))"
"(void)))))"
" loop_758)"
" a1_749"
" c1_757)"
"(loop_748"
" a1_749"
" b1_756"
" c1_757)))))))))"
" loop_748)"
" Amid2_745"
" Bmid1_746"
" Blo_732)))))))))))))"
"(let-values(((Alo_761) 0)"
"((Amid1_762) n/2-_693)"
"((Amid2_763) n/2+_694)"
"((Ahi_764) n_653)"
"((B1lo_765) n_653))"
"(begin"
"(copying-mergesort_730 Amid1_762 B1lo_765 n/2+_694)"
"(if(zero? n/2-_693)"
"(void)"
"(let-values()"
"(copying-mergesort_730 Alo_761 Amid2_763 n/2-_693)))"
"(let-values(((b2_766) Ahi_764))"
"((letrec-values(((loop_767)"
"(lambda(a1_768 b1_769 c1_770)"
"(let-values(((x_771)"
"(unsafe-vector-ref"
" A_652"
" a1_768))"
"((y_772)"
"(unsafe-vector-ref"
" A_652"
" b1_769)))"
"(if(< x_771 y_772)"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_770"
" x_771)"
"(let-values(((a1_773)"
"(unsafe-fx+ a1_768 1))"
"((c1_774)"
"(unsafe-fx+ c1_770 1)))"
"(if(unsafe-fx< c1_774 b1_769)"
"(let-values()"
"(loop_767 a1_773 b1_769 c1_774))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_770"
" y_772)"
"(let-values(((b1_775)"
"(unsafe-fx+ b1_769 1))"
"((c1_776)"
"(unsafe-fx+ c1_770 1)))"
"(if(unsafe-fx<= b2_766 b1_775)"
"((letrec-values(((loop_777)"
"(lambda(a1_778"
" c1_779)"
"(if(unsafe-fx<"
" c1_779"
" b1_775)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_779"
"(unsafe-vector-ref"
" A_652"
" a1_778))"
"(loop_777"
"(unsafe-fx+"
" a1_778"
" 1)"
"(unsafe-fx+"
" c1_779"
" 1))))"
"(void)))))"
" loop_777)"
" a1_768"
" c1_776)"
"(loop_767"
" a1_768"
" b1_775"
" c1_776)))))))))"
" loop_767)"
" B1lo_765"
" Amid2_763"
" Alo_761))))))))))))"
"(begin(hash-set! sorts_119 < sort-proc_651)(hash-set! sorts_119 <= sort-proc_651)))"
"(let-values(((sort-proc_780)"
"(lambda(A_781 n_782)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_822)(unsafe-fxrshift n_782 1)))"
"(let-values(((n/2+_823)(unsafe-fx- n_782 n/2-_822)))"
"(letrec-values(((copying-mergesort_859)"
"(lambda(Alo_860 Blo_861 n_862)"
"(if(unsafe-fx= n_862 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_781"
" Blo_861"
"(unsafe-vector-ref A_781 Alo_860)))"
"(if(unsafe-fx= n_862 2)"
"(let-values()"
"(let-values(((x_863)"
"(unsafe-vector-ref"
" A_781"
" Alo_860))"
"((y_864)"
"(unsafe-vector-ref"
" A_781"
"(unsafe-fx+ Alo_860 1))))"
"(if(> y_864 x_863)"
"(begin"
"(unsafe-vector-set! A_781 Blo_861 y_864)"
"(unsafe-vector-set!"
" A_781"
"(unsafe-fx+ Blo_861 1)"
" x_863))"
"(begin"
"(unsafe-vector-set! A_781 Blo_861 x_863)"
"(unsafe-vector-set!"
" A_781"
"(unsafe-fx+ Blo_861 1)"
" y_864)))))"
"(if(unsafe-fx< n_862 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_781"
" Blo_861"
"(unsafe-vector-ref A_781 Alo_860))"
"((letrec-values(((iloop_865)"
"(lambda(i_866)"
"(if(unsafe-fx<"
" i_866"
" n_862)"
"(let-values()"
"(let-values(((ref-i_867)"
"(unsafe-vector-ref"
" A_781"
"(unsafe-fx+"
" Alo_860"
" i_866))))"
"((letrec-values(((jloop_868)"
"(lambda(j_869)"
"(let-values(((ref-j-1_870)"
"(unsafe-vector-ref"
" A_781"
"(unsafe-fx-"
" j_869"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_861"
" j_869)"
"(>"
" ref-i_867"
" ref-j-1_870)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_781"
" j_869"
" ref-j-1_870)"
"(jloop_868"
"(unsafe-fx-"
" j_869"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_781"
" j_869"
" ref-i_867)"
"(iloop_865"
"(unsafe-fx+"
" i_866"
" 1))))))))"
" jloop_868)"
"(unsafe-fx+"
" Blo_861"
" i_866))))"
"(void)))))"
" iloop_865)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_871)"
"(unsafe-fxrshift n_862 1)))"
"(let-values(((n/2+_872)"
"(unsafe-fx- n_862 n/2-_871)))"
"(let-values(((Amid1_873)"
"(unsafe-fx+"
" Alo_860"
" n/2-_871))"
"((Amid2_874)"
"(unsafe-fx+"
" Alo_860"
" n/2+_872))"
"((Bmid1_875)"
"(unsafe-fx+"
" Blo_861"
" n/2-_871)))"
"(begin"
"(copying-mergesort_859"
" Amid1_873"
" Bmid1_875"
" n/2+_872)"
"(copying-mergesort_859"
" Alo_860"
" Amid2_874"
" n/2-_871)"
"(let-values(((b2_876)"
"(unsafe-fx+"
" Blo_861"
" n_862)))"
"((letrec-values(((loop_877)"
"(lambda(a1_878"
" b1_879"
" c1_880)"
"(let-values(((x_881)"
"(unsafe-vector-ref"
" A_781"
" a1_878))"
"((y_882)"
"(unsafe-vector-ref"
" A_781"
" b1_879)))"
"(if(not"
"(>"
" y_882"
" x_881))"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_880"
" x_881)"
"(let-values(((a1_883)"
"(unsafe-fx+"
" a1_878"
" 1))"
"((c1_884)"
"(unsafe-fx+"
" c1_880"
" 1)))"
"(if(unsafe-fx<"
" c1_884"
" b1_879)"
"(let-values()"
"(loop_877"
" a1_883"
" b1_879"
" c1_884))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_880"
" y_882)"
"(let-values(((b1_885)"
"(unsafe-fx+"
" b1_879"
" 1))"
"((c1_886)"
"(unsafe-fx+"
" c1_880"
" 1)))"
"(if(unsafe-fx<="
" b2_876"
" b1_885)"
"((letrec-values(((loop_887)"
"(lambda(a1_888"
" c1_889)"
"(if(unsafe-fx<"
" c1_889"
" b1_885)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_889"
"(unsafe-vector-ref"
" A_781"
" a1_888))"
"(loop_887"
"(unsafe-fx+"
" a1_888"
" 1)"
"(unsafe-fx+"
" c1_889"
" 1))))"
"(void)))))"
" loop_887)"
" a1_878"
" c1_886)"
"(loop_877"
" a1_878"
" b1_885"
" c1_886)))))))))"
" loop_877)"
" Amid2_874"
" Bmid1_875"
" Blo_861)))))))))))))"
"(let-values(((Alo_890) 0)"
"((Amid1_891) n/2-_822)"
"((Amid2_892) n/2+_823)"
"((Ahi_893) n_782)"
"((B1lo_894) n_782))"
"(begin"
"(copying-mergesort_859 Amid1_891 B1lo_894 n/2+_823)"
"(if(zero? n/2-_822)"
"(void)"
"(let-values()"
"(copying-mergesort_859 Alo_890 Amid2_892 n/2-_822)))"
"(let-values(((b2_895) Ahi_893))"
"((letrec-values(((loop_896)"
"(lambda(a1_897 b1_898 c1_899)"
"(let-values(((x_900)"
"(unsafe-vector-ref"
" A_781"
" a1_897))"
"((y_901)"
"(unsafe-vector-ref"
" A_781"
" b1_898)))"
"(if(> x_900 y_901)"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_899"
" x_900)"
"(let-values(((a1_902)"
"(unsafe-fx+ a1_897 1))"
"((c1_903)"
"(unsafe-fx+ c1_899 1)))"
"(if(unsafe-fx< c1_903 b1_898)"
"(let-values()"
"(loop_896 a1_902 b1_898 c1_903))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_899"
" y_901)"
"(let-values(((b1_904)"
"(unsafe-fx+ b1_898 1))"
"((c1_905)"
"(unsafe-fx+ c1_899 1)))"
"(if(unsafe-fx<= b2_895 b1_904)"
"((letrec-values(((loop_906)"
"(lambda(a1_907"
" c1_908)"
"(if(unsafe-fx<"
" c1_908"
" b1_904)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_908"
"(unsafe-vector-ref"
" A_781"
" a1_907))"
"(loop_906"
"(unsafe-fx+"
" a1_907"
" 1)"
"(unsafe-fx+"
" c1_908"
" 1))))"
"(void)))))"
" loop_906)"
" a1_897"
" c1_905)"
"(loop_896"
" a1_897"
" b1_904"
" c1_905)))))))))"
" loop_896)"
" B1lo_894"
" Amid2_892"
" Alo_890))))))))))))"
"(begin(hash-set! sorts_119 > sort-proc_780)(hash-set! sorts_119 >= sort-proc_780)))"
"(let-values(((sort-proc_909)"
"(lambda(A_910 n_911)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_951)(unsafe-fxrshift n_911 1)))"
"(let-values(((n/2+_952)(unsafe-fx- n_911 n/2-_951)))"
"(letrec-values(((copying-mergesort_988)"
"(lambda(Alo_989 Blo_990 n_991)"
"(if(unsafe-fx= n_991 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_910"
" Blo_990"
"(unsafe-vector-ref A_910 Alo_989)))"
"(if(unsafe-fx= n_991 2)"
"(let-values()"
"(let-values(((x_992)"
"(unsafe-vector-ref"
" A_910"
" Alo_989))"
"((y_993)"
"(unsafe-vector-ref"
" A_910"
"(unsafe-fx+ Alo_989 1))))"
"(if(string<? y_993 x_992)"
"(begin"
"(unsafe-vector-set! A_910 Blo_990 y_993)"
"(unsafe-vector-set!"
" A_910"
"(unsafe-fx+ Blo_990 1)"
" x_992))"
"(begin"
"(unsafe-vector-set! A_910 Blo_990 x_992)"
"(unsafe-vector-set!"
" A_910"
"(unsafe-fx+ Blo_990 1)"
" y_993)))))"
"(if(unsafe-fx< n_991 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_910"
" Blo_990"
"(unsafe-vector-ref A_910 Alo_989))"
"((letrec-values(((iloop_994)"
"(lambda(i_995)"
"(if(unsafe-fx<"
" i_995"
" n_991)"
"(let-values()"
"(let-values(((ref-i_996)"
"(unsafe-vector-ref"
" A_910"
"(unsafe-fx+"
" Alo_989"
" i_995))))"
"((letrec-values(((jloop_997)"
"(lambda(j_998)"
"(let-values(((ref-j-1_999)"
"(unsafe-vector-ref"
" A_910"
"(unsafe-fx-"
" j_998"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_990"
" j_998)"
"(string<?"
" ref-i_996"
" ref-j-1_999)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_910"
" j_998"
" ref-j-1_999)"
"(jloop_997"
"(unsafe-fx-"
" j_998"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_910"
" j_998"
" ref-i_996)"
"(iloop_994"
"(unsafe-fx+"
" i_995"
" 1))))))))"
" jloop_997)"
"(unsafe-fx+"
" Blo_990"
" i_995))))"
"(void)))))"
" iloop_994)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1000)"
"(unsafe-fxrshift n_991 1)))"
"(let-values(((n/2+_1001)"
"(unsafe-fx-"
" n_991"
" n/2-_1000)))"
"(let-values(((Amid1_1002)"
"(unsafe-fx+"
" Alo_989"
" n/2-_1000))"
"((Amid2_1003)"
"(unsafe-fx+"
" Alo_989"
" n/2+_1001))"
"((Bmid1_1004)"
"(unsafe-fx+"
" Blo_990"
" n/2-_1000)))"
"(begin"
"(copying-mergesort_988"
" Amid1_1002"
" Bmid1_1004"
" n/2+_1001)"
"(copying-mergesort_988"
" Alo_989"
" Amid2_1003"
" n/2-_1000)"
"(let-values(((b2_1005)"
"(unsafe-fx+"
" Blo_990"
" n_991)))"
"((letrec-values(((loop_1006)"
"(lambda(a1_1007"
" b1_1008"
" c1_1009)"
"(let-values(((x_1010)"
"(unsafe-vector-ref"
" A_910"
" a1_1007))"
"((y_1011)"
"(unsafe-vector-ref"
" A_910"
" b1_1008)))"
"(if(not"
"(string<?"
" y_1011"
" x_1010))"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1009"
" x_1010)"
"(let-values(((a1_1012)"
"(unsafe-fx+"
" a1_1007"
" 1))"
"((c1_1013)"
"(unsafe-fx+"
" c1_1009"
" 1)))"
"(if(unsafe-fx<"
" c1_1013"
" b1_1008)"
"(let-values()"
"(loop_1006"
" a1_1012"
" b1_1008"
" c1_1013))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1009"
" y_1011)"
"(let-values(((b1_1014)"
"(unsafe-fx+"
" b1_1008"
" 1))"
"((c1_1015)"
"(unsafe-fx+"
" c1_1009"
" 1)))"
"(if(unsafe-fx<="
" b2_1005"
" b1_1014)"
"((letrec-values(((loop_1016)"
"(lambda(a1_1017"
" c1_1018)"
"(if(unsafe-fx<"
" c1_1018"
" b1_1014)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1018"
"(unsafe-vector-ref"
" A_910"
" a1_1017))"
"(loop_1016"
"(unsafe-fx+"
" a1_1017"
" 1)"
"(unsafe-fx+"
" c1_1018"
" 1))))"
"(void)))))"
" loop_1016)"
" a1_1007"
" c1_1015)"
"(loop_1006"
" a1_1007"
" b1_1014"
" c1_1015)))))))))"
" loop_1006)"
" Amid2_1003"
" Bmid1_1004"
" Blo_990)))))))))))))"
"(let-values(((Alo_1019) 0)"
"((Amid1_1020) n/2-_951)"
"((Amid2_1021) n/2+_952)"
"((Ahi_1022) n_911)"
"((B1lo_1023) n_911))"
"(begin"
"(copying-mergesort_988 Amid1_1020 B1lo_1023 n/2+_952)"
"(if(zero? n/2-_951)"
"(void)"
"(let-values()"
"(copying-mergesort_988 Alo_1019 Amid2_1021 n/2-_951)))"
"(let-values(((b2_1024) Ahi_1022))"
"((letrec-values(((loop_1025)"
"(lambda(a1_1026 b1_1027 c1_1028)"
"(let-values(((x_1029)"
"(unsafe-vector-ref"
" A_910"
" a1_1026))"
"((y_1030)"
"(unsafe-vector-ref"
" A_910"
" b1_1027)))"
"(if(string<? x_1029 y_1030)"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1028"
" x_1029)"
"(let-values(((a1_1031)"
"(unsafe-fx+ a1_1026 1))"
"((c1_1032)"
"(unsafe-fx+ c1_1028 1)))"
"(if(unsafe-fx< c1_1032 b1_1027)"
"(let-values()"
"(loop_1025"
" a1_1031"
" b1_1027"
" c1_1032))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1028"
" y_1030)"
"(let-values(((b1_1033)"
"(unsafe-fx+ b1_1027 1))"
"((c1_1034)"
"(unsafe-fx+ c1_1028 1)))"
"(if(unsafe-fx<= b2_1024 b1_1033)"
"((letrec-values(((loop_1035)"
"(lambda(a1_1036"
" c1_1037)"
"(if(unsafe-fx<"
" c1_1037"
" b1_1033)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1037"
"(unsafe-vector-ref"
" A_910"
" a1_1036))"
"(loop_1035"
"(unsafe-fx+"
" a1_1036"
" 1)"
"(unsafe-fx+"
" c1_1037"
" 1))))"
"(void)))))"
" loop_1035)"
" a1_1026"
" c1_1034)"
"(loop_1025"
" a1_1026"
" b1_1033"
" c1_1034)))))))))"
" loop_1025)"
" B1lo_1023"
" Amid2_1021"
" Alo_1019))))))))))))"
"(begin"
"(hash-set! sorts_119 string<? sort-proc_909)"
"(hash-set! sorts_119 string<=? sort-proc_909)))"
"(let-values(((sort-proc_1038)"
"(lambda(A_1039 n_1040)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1080)(unsafe-fxrshift n_1040 1)))"
"(let-values(((n/2+_1081)(unsafe-fx- n_1040 n/2-_1080)))"
"(letrec-values(((copying-mergesort_1117)"
"(lambda(Alo_1118 Blo_1119 n_1120)"
"(if(unsafe-fx= n_1120 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1039"
" Blo_1119"
"(unsafe-vector-ref A_1039 Alo_1118)))"
"(if(unsafe-fx= n_1120 2)"
"(let-values()"
"(let-values(((x_1121)"
"(unsafe-vector-ref"
" A_1039"
" Alo_1118))"
"((y_1122)"
"(unsafe-vector-ref"
" A_1039"
"(unsafe-fx+ Alo_1118 1))))"
"(if(string>? y_1122 x_1121)"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" Blo_1119"
" y_1122)"
"(unsafe-vector-set!"
" A_1039"
"(unsafe-fx+ Blo_1119 1)"
" x_1121))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" Blo_1119"
" x_1121)"
"(unsafe-vector-set!"
" A_1039"
"(unsafe-fx+ Blo_1119 1)"
" y_1122)))))"
"(if(unsafe-fx< n_1120 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" Blo_1119"
"(unsafe-vector-ref A_1039 Alo_1118))"
"((letrec-values(((iloop_1123)"
"(lambda(i_1124)"
"(if(unsafe-fx<"
" i_1124"
" n_1120)"
"(let-values()"
"(let-values(((ref-i_1125)"
"(unsafe-vector-ref"
" A_1039"
"(unsafe-fx+"
" Alo_1118"
" i_1124))))"
"((letrec-values(((jloop_1126)"
"(lambda(j_1127)"
"(let-values(((ref-j-1_1128)"
"(unsafe-vector-ref"
" A_1039"
"(unsafe-fx-"
" j_1127"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1119"
" j_1127)"
"(string>?"
" ref-i_1125"
" ref-j-1_1128)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" j_1127"
" ref-j-1_1128)"
"(jloop_1126"
"(unsafe-fx-"
" j_1127"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" j_1127"
" ref-i_1125)"
"(iloop_1123"
"(unsafe-fx+"
" i_1124"
" 1))))))))"
" jloop_1126)"
"(unsafe-fx+"
" Blo_1119"
" i_1124))))"
"(void)))))"
" iloop_1123)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1129)"
"(unsafe-fxrshift n_1120 1)))"
"(let-values(((n/2+_1130)"
"(unsafe-fx-"
" n_1120"
" n/2-_1129)))"
"(let-values(((Amid1_1131)"
"(unsafe-fx+"
" Alo_1118"
" n/2-_1129))"
"((Amid2_1132)"
"(unsafe-fx+"
" Alo_1118"
" n/2+_1130))"
"((Bmid1_1133)"
"(unsafe-fx+"
" Blo_1119"
" n/2-_1129)))"
"(begin"
"(copying-mergesort_1117"
" Amid1_1131"
" Bmid1_1133"
" n/2+_1130)"
"(copying-mergesort_1117"
" Alo_1118"
" Amid2_1132"
" n/2-_1129)"
"(let-values(((b2_1134)"
"(unsafe-fx+"
" Blo_1119"
" n_1120)))"
"((letrec-values(((loop_1135)"
"(lambda(a1_1136"
" b1_1137"
" c1_1138)"
"(let-values(((x_1139)"
"(unsafe-vector-ref"
" A_1039"
" a1_1136))"
"((y_1140)"
"(unsafe-vector-ref"
" A_1039"
" b1_1137)))"
"(if(not"
"(string>?"
" y_1140"
" x_1139))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1138"
" x_1139)"
"(let-values(((a1_1141)"
"(unsafe-fx+"
" a1_1136"
" 1))"
"((c1_1142)"
"(unsafe-fx+"
" c1_1138"
" 1)))"
"(if(unsafe-fx<"
" c1_1142"
" b1_1137)"
"(let-values()"
"(loop_1135"
" a1_1141"
" b1_1137"
" c1_1142))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1138"
" y_1140)"
"(let-values(((b1_1143)"
"(unsafe-fx+"
" b1_1137"
" 1))"
"((c1_1144)"
"(unsafe-fx+"
" c1_1138"
" 1)))"
"(if(unsafe-fx<="
" b2_1134"
" b1_1143)"
"((letrec-values(((loop_1145)"
"(lambda(a1_1146"
" c1_1147)"
"(if(unsafe-fx<"
" c1_1147"
" b1_1143)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1147"
"(unsafe-vector-ref"
" A_1039"
" a1_1146))"
"(loop_1145"
"(unsafe-fx+"
" a1_1146"
" 1)"
"(unsafe-fx+"
" c1_1147"
" 1))))"
"(void)))))"
" loop_1145)"
" a1_1136"
" c1_1144)"
"(loop_1135"
" a1_1136"
" b1_1143"
" c1_1144)))))))))"
" loop_1135)"
" Amid2_1132"
" Bmid1_1133"
" Blo_1119)))))))))))))"
"(let-values(((Alo_1148) 0)"
"((Amid1_1149) n/2-_1080)"
"((Amid2_1150) n/2+_1081)"
"((Ahi_1151) n_1040)"
"((B1lo_1152) n_1040))"
"(begin"
"(copying-mergesort_1117 Amid1_1149 B1lo_1152 n/2+_1081)"
"(if(zero? n/2-_1080)"
"(void)"
"(let-values()"
"(copying-mergesort_1117 Alo_1148 Amid2_1150 n/2-_1080)))"
"(let-values(((b2_1153) Ahi_1151))"
"((letrec-values(((loop_1154)"
"(lambda(a1_1155 b1_1156 c1_1157)"
"(let-values(((x_1158)"
"(unsafe-vector-ref"
" A_1039"
" a1_1155))"
"((y_1159)"
"(unsafe-vector-ref"
" A_1039"
" b1_1156)))"
"(if(string>? x_1158 y_1159)"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1157"
" x_1158)"
"(let-values(((a1_1160)"
"(unsafe-fx+ a1_1155 1))"
"((c1_1161)"
"(unsafe-fx+ c1_1157 1)))"
"(if(unsafe-fx< c1_1161 b1_1156)"
"(let-values()"
"(loop_1154"
" a1_1160"
" b1_1156"
" c1_1161))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1157"
" y_1159)"
"(let-values(((b1_1162)"
"(unsafe-fx+ b1_1156 1))"
"((c1_1163)"
"(unsafe-fx+ c1_1157 1)))"
"(if(unsafe-fx<= b2_1153 b1_1162)"
"((letrec-values(((loop_1164)"
"(lambda(a1_1165"
" c1_1166)"
"(if(unsafe-fx<"
" c1_1166"
" b1_1162)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1166"
"(unsafe-vector-ref"
" A_1039"
" a1_1165))"
"(loop_1164"
"(unsafe-fx+"
" a1_1165"
" 1)"
"(unsafe-fx+"
" c1_1166"
" 1))))"
"(void)))))"
" loop_1164)"
" a1_1155"
" c1_1163)"
"(loop_1154"
" a1_1155"
" b1_1162"
" c1_1163)))))))))"
" loop_1154)"
" B1lo_1152"
" Amid2_1150"
" Alo_1148))))))))))))"
"(begin"
"(hash-set! sorts_119 string>? sort-proc_1038)"
"(hash-set! sorts_119 string>=? sort-proc_1038)))"
"(let-values(((sort-proc_1167)"
"(lambda(A_1168 n_1169)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1209)(unsafe-fxrshift n_1169 1)))"
"(let-values(((n/2+_1210)(unsafe-fx- n_1169 n/2-_1209)))"
"(letrec-values(((copying-mergesort_1246)"
"(lambda(Alo_1247 Blo_1248 n_1249)"
"(if(unsafe-fx= n_1249 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1168"
" Blo_1248"
"(unsafe-vector-ref A_1168 Alo_1247)))"
"(if(unsafe-fx= n_1249 2)"
"(let-values()"
"(let-values(((x_1250)"
"(unsafe-vector-ref"
" A_1168"
" Alo_1247))"
"((y_1251)"
"(unsafe-vector-ref"
" A_1168"
"(unsafe-fx+ Alo_1247 1))))"
"(if(string-ci<? y_1251 x_1250)"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" Blo_1248"
" y_1251)"
"(unsafe-vector-set!"
" A_1168"
"(unsafe-fx+ Blo_1248 1)"
" x_1250))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" Blo_1248"
" x_1250)"
"(unsafe-vector-set!"
" A_1168"
"(unsafe-fx+ Blo_1248 1)"
" y_1251)))))"
"(if(unsafe-fx< n_1249 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" Blo_1248"
"(unsafe-vector-ref A_1168 Alo_1247))"
"((letrec-values(((iloop_1252)"
"(lambda(i_1253)"
"(if(unsafe-fx<"
" i_1253"
" n_1249)"
"(let-values()"
"(let-values(((ref-i_1254)"
"(unsafe-vector-ref"
" A_1168"
"(unsafe-fx+"
" Alo_1247"
" i_1253))))"
"((letrec-values(((jloop_1255)"
"(lambda(j_1256)"
"(let-values(((ref-j-1_1257)"
"(unsafe-vector-ref"
" A_1168"
"(unsafe-fx-"
" j_1256"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1248"
" j_1256)"
"(string-ci<?"
" ref-i_1254"
" ref-j-1_1257)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" j_1256"
" ref-j-1_1257)"
"(jloop_1255"
"(unsafe-fx-"
" j_1256"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" j_1256"
" ref-i_1254)"
"(iloop_1252"
"(unsafe-fx+"
" i_1253"
" 1))))))))"
" jloop_1255)"
"(unsafe-fx+"
" Blo_1248"
" i_1253))))"
"(void)))))"
" iloop_1252)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1258)"
"(unsafe-fxrshift n_1249 1)))"
"(let-values(((n/2+_1259)"
"(unsafe-fx-"
" n_1249"
" n/2-_1258)))"
"(let-values(((Amid1_1260)"
"(unsafe-fx+"
" Alo_1247"
" n/2-_1258))"
"((Amid2_1261)"
"(unsafe-fx+"
" Alo_1247"
" n/2+_1259))"
"((Bmid1_1262)"
"(unsafe-fx+"
" Blo_1248"
" n/2-_1258)))"
"(begin"
"(copying-mergesort_1246"
" Amid1_1260"
" Bmid1_1262"
" n/2+_1259)"
"(copying-mergesort_1246"
" Alo_1247"
" Amid2_1261"
" n/2-_1258)"
"(let-values(((b2_1263)"
"(unsafe-fx+"
" Blo_1248"
" n_1249)))"
"((letrec-values(((loop_1264)"
"(lambda(a1_1265"
" b1_1266"
" c1_1267)"
"(let-values(((x_1268)"
"(unsafe-vector-ref"
" A_1168"
" a1_1265))"
"((y_1269)"
"(unsafe-vector-ref"
" A_1168"
" b1_1266)))"
"(if(not"
"(string-ci<?"
" y_1269"
" x_1268))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1267"
" x_1268)"
"(let-values(((a1_1270)"
"(unsafe-fx+"
" a1_1265"
" 1))"
"((c1_1271)"
"(unsafe-fx+"
" c1_1267"
" 1)))"
"(if(unsafe-fx<"
" c1_1271"
" b1_1266)"
"(let-values()"
"(loop_1264"
" a1_1270"
" b1_1266"
" c1_1271))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1267"
" y_1269)"
"(let-values(((b1_1272)"
"(unsafe-fx+"
" b1_1266"
" 1))"
"((c1_1273)"
"(unsafe-fx+"
" c1_1267"
" 1)))"
"(if(unsafe-fx<="
" b2_1263"
" b1_1272)"
"((letrec-values(((loop_1274)"
"(lambda(a1_1275"
" c1_1276)"
"(if(unsafe-fx<"
" c1_1276"
" b1_1272)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1276"
"(unsafe-vector-ref"
" A_1168"
" a1_1275))"
"(loop_1274"
"(unsafe-fx+"
" a1_1275"
" 1)"
"(unsafe-fx+"
" c1_1276"
" 1))))"
"(void)))))"
" loop_1274)"
" a1_1265"
" c1_1273)"
"(loop_1264"
" a1_1265"
" b1_1272"
" c1_1273)))))))))"
" loop_1264)"
" Amid2_1261"
" Bmid1_1262"
" Blo_1248)))))))))))))"
"(let-values(((Alo_1277) 0)"
"((Amid1_1278) n/2-_1209)"
"((Amid2_1279) n/2+_1210)"
"((Ahi_1280) n_1169)"
"((B1lo_1281) n_1169))"
"(begin"
"(copying-mergesort_1246 Amid1_1278 B1lo_1281 n/2+_1210)"
"(if(zero? n/2-_1209)"
"(void)"
"(let-values()"
"(copying-mergesort_1246 Alo_1277 Amid2_1279 n/2-_1209)))"
"(let-values(((b2_1282) Ahi_1280))"
"((letrec-values(((loop_1283)"
"(lambda(a1_1284 b1_1285 c1_1286)"
"(let-values(((x_1287)"
"(unsafe-vector-ref"
" A_1168"
" a1_1284))"
"((y_1288)"
"(unsafe-vector-ref"
" A_1168"
" b1_1285)))"
"(if(string-ci<? x_1287 y_1288)"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1286"
" x_1287)"
"(let-values(((a1_1289)"
"(unsafe-fx+ a1_1284 1))"
"((c1_1290)"
"(unsafe-fx+ c1_1286 1)))"
"(if(unsafe-fx< c1_1290 b1_1285)"
"(let-values()"
"(loop_1283"
" a1_1289"
" b1_1285"
" c1_1290))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1286"
" y_1288)"
"(let-values(((b1_1291)"
"(unsafe-fx+ b1_1285 1))"
"((c1_1292)"
"(unsafe-fx+ c1_1286 1)))"
"(if(unsafe-fx<= b2_1282 b1_1291)"
"((letrec-values(((loop_1293)"
"(lambda(a1_1294"
" c1_1295)"
"(if(unsafe-fx<"
" c1_1295"
" b1_1291)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1295"
"(unsafe-vector-ref"
" A_1168"
" a1_1294))"
"(loop_1293"
"(unsafe-fx+"
" a1_1294"
" 1)"
"(unsafe-fx+"
" c1_1295"
" 1))))"
"(void)))))"
" loop_1293)"
" a1_1284"
" c1_1292)"
"(loop_1283"
" a1_1284"
" b1_1291"
" c1_1292)))))))))"
" loop_1283)"
" B1lo_1281"
" Amid2_1279"
" Alo_1277))))))))))))"
"(begin"
"(hash-set! sorts_119 string-ci<? sort-proc_1167)"
"(hash-set! sorts_119 string-ci<=? sort-proc_1167)))"
"(let-values(((sort-proc_1296)"
"(lambda(A_1297 n_1298)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1338)(unsafe-fxrshift n_1298 1)))"
"(let-values(((n/2+_1339)(unsafe-fx- n_1298 n/2-_1338)))"
"(letrec-values(((copying-mergesort_1375)"
"(lambda(Alo_1376 Blo_1377 n_1378)"
"(if(unsafe-fx= n_1378 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1297"
" Blo_1377"
"(unsafe-vector-ref A_1297 Alo_1376)))"
"(if(unsafe-fx= n_1378 2)"
"(let-values()"
"(let-values(((x_1379)"
"(unsafe-vector-ref"
" A_1297"
" Alo_1376))"
"((y_1380)"
"(unsafe-vector-ref"
" A_1297"
"(unsafe-fx+ Alo_1376 1))))"
"(if(string-ci>? y_1380 x_1379)"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" Blo_1377"
" y_1380)"
"(unsafe-vector-set!"
" A_1297"
"(unsafe-fx+ Blo_1377 1)"
" x_1379))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" Blo_1377"
" x_1379)"
"(unsafe-vector-set!"
" A_1297"
"(unsafe-fx+ Blo_1377 1)"
" y_1380)))))"
"(if(unsafe-fx< n_1378 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" Blo_1377"
"(unsafe-vector-ref A_1297 Alo_1376))"
"((letrec-values(((iloop_1381)"
"(lambda(i_1382)"
"(if(unsafe-fx<"
" i_1382"
" n_1378)"
"(let-values()"
"(let-values(((ref-i_1383)"
"(unsafe-vector-ref"
" A_1297"
"(unsafe-fx+"
" Alo_1376"
" i_1382))))"
"((letrec-values(((jloop_1384)"
"(lambda(j_1385)"
"(let-values(((ref-j-1_1386)"
"(unsafe-vector-ref"
" A_1297"
"(unsafe-fx-"
" j_1385"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1377"
" j_1385)"
"(string-ci>?"
" ref-i_1383"
" ref-j-1_1386)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" j_1385"
" ref-j-1_1386)"
"(jloop_1384"
"(unsafe-fx-"
" j_1385"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" j_1385"
" ref-i_1383)"
"(iloop_1381"
"(unsafe-fx+"
" i_1382"
" 1))))))))"
" jloop_1384)"
"(unsafe-fx+"
" Blo_1377"
" i_1382))))"
"(void)))))"
" iloop_1381)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1387)"
"(unsafe-fxrshift n_1378 1)))"
"(let-values(((n/2+_1388)"
"(unsafe-fx-"
" n_1378"
" n/2-_1387)))"
"(let-values(((Amid1_1389)"
"(unsafe-fx+"
" Alo_1376"
" n/2-_1387))"
"((Amid2_1390)"
"(unsafe-fx+"
" Alo_1376"
" n/2+_1388))"
"((Bmid1_1391)"
"(unsafe-fx+"
" Blo_1377"
" n/2-_1387)))"
"(begin"
"(copying-mergesort_1375"
" Amid1_1389"
" Bmid1_1391"
" n/2+_1388)"
"(copying-mergesort_1375"
" Alo_1376"
" Amid2_1390"
" n/2-_1387)"
"(let-values(((b2_1392)"
"(unsafe-fx+"
" Blo_1377"
" n_1378)))"
"((letrec-values(((loop_1393)"
"(lambda(a1_1394"
" b1_1395"
" c1_1396)"
"(let-values(((x_1397)"
"(unsafe-vector-ref"
" A_1297"
" a1_1394))"
"((y_1398)"
"(unsafe-vector-ref"
" A_1297"
" b1_1395)))"
"(if(not"
"(string-ci>?"
" y_1398"
" x_1397))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1396"
" x_1397)"
"(let-values(((a1_1399)"
"(unsafe-fx+"
" a1_1394"
" 1))"
"((c1_1400)"
"(unsafe-fx+"
" c1_1396"
" 1)))"
"(if(unsafe-fx<"
" c1_1400"
" b1_1395)"
"(let-values()"
"(loop_1393"
" a1_1399"
" b1_1395"
" c1_1400))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1396"
" y_1398)"
"(let-values(((b1_1401)"
"(unsafe-fx+"
" b1_1395"
" 1))"
"((c1_1402)"
"(unsafe-fx+"
" c1_1396"
" 1)))"
"(if(unsafe-fx<="
" b2_1392"
" b1_1401)"
"((letrec-values(((loop_1403)"
"(lambda(a1_1404"
" c1_1405)"
"(if(unsafe-fx<"
" c1_1405"
" b1_1401)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1405"
"(unsafe-vector-ref"
" A_1297"
" a1_1404))"
"(loop_1403"
"(unsafe-fx+"
" a1_1404"
" 1)"
"(unsafe-fx+"
" c1_1405"
" 1))))"
"(void)))))"
" loop_1403)"
" a1_1394"
" c1_1402)"
"(loop_1393"
" a1_1394"
" b1_1401"
" c1_1402)))))))))"
" loop_1393)"
" Amid2_1390"
" Bmid1_1391"
" Blo_1377)))))))))))))"
"(let-values(((Alo_1406) 0)"
"((Amid1_1407) n/2-_1338)"
"((Amid2_1408) n/2+_1339)"
"((Ahi_1409) n_1298)"
"((B1lo_1410) n_1298))"
"(begin"
"(copying-mergesort_1375 Amid1_1407 B1lo_1410 n/2+_1339)"
"(if(zero? n/2-_1338)"
"(void)"
"(let-values()"
"(copying-mergesort_1375 Alo_1406 Amid2_1408 n/2-_1338)))"
"(let-values(((b2_1411) Ahi_1409))"
"((letrec-values(((loop_1412)"
"(lambda(a1_1413 b1_1414 c1_1415)"
"(let-values(((x_1416)"
"(unsafe-vector-ref"
" A_1297"
" a1_1413))"
"((y_1417)"
"(unsafe-vector-ref"
" A_1297"
" b1_1414)))"
"(if(string-ci>? x_1416 y_1417)"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1415"
" x_1416)"
"(let-values(((a1_1418)"
"(unsafe-fx+ a1_1413 1))"
"((c1_1419)"
"(unsafe-fx+ c1_1415 1)))"
"(if(unsafe-fx< c1_1419 b1_1414)"
"(let-values()"
"(loop_1412"
" a1_1418"
" b1_1414"
" c1_1419))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1415"
" y_1417)"
"(let-values(((b1_1420)"
"(unsafe-fx+ b1_1414 1))"
"((c1_1421)"
"(unsafe-fx+ c1_1415 1)))"
"(if(unsafe-fx<= b2_1411 b1_1420)"
"((letrec-values(((loop_1422)"
"(lambda(a1_1423"
" c1_1424)"
"(if(unsafe-fx<"
" c1_1424"
" b1_1420)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1424"
"(unsafe-vector-ref"
" A_1297"
" a1_1423))"
"(loop_1422"
"(unsafe-fx+"
" a1_1423"
" 1)"
"(unsafe-fx+"
" c1_1424"
" 1))))"
"(void)))))"
" loop_1422)"
" a1_1413"
" c1_1421)"
"(loop_1412"
" a1_1413"
" b1_1420"
" c1_1421)))))))))"
" loop_1412)"
" B1lo_1410"
" Amid2_1408"
" Alo_1406))))))))))))"
"(begin"
"(hash-set! sorts_119 string-ci>? sort-proc_1296)"
"(hash-set! sorts_119 string-ci>=? sort-proc_1296)))"
"(let-values(((sort-proc_1425)"
"(lambda(A_1426 n_1427)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1467)(unsafe-fxrshift n_1427 1)))"
"(let-values(((n/2+_1468)(unsafe-fx- n_1427 n/2-_1467)))"
"(letrec-values(((copying-mergesort_1504)"
"(lambda(Alo_1505 Blo_1506 n_1507)"
"(if(unsafe-fx= n_1507 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1426"
" Blo_1506"
"(unsafe-vector-ref A_1426 Alo_1505)))"
"(if(unsafe-fx= n_1507 2)"
"(let-values()"
"(let-values(((x_1508)"
"(unsafe-vector-ref"
" A_1426"
" Alo_1505))"
"((y_1509)"
"(unsafe-vector-ref"
" A_1426"
"(unsafe-fx+ Alo_1505 1))))"
"(if(char<? y_1509 x_1508)"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" Blo_1506"
" y_1509)"
"(unsafe-vector-set!"
" A_1426"
"(unsafe-fx+ Blo_1506 1)"
" x_1508))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" Blo_1506"
" x_1508)"
"(unsafe-vector-set!"
" A_1426"
"(unsafe-fx+ Blo_1506 1)"
" y_1509)))))"
"(if(unsafe-fx< n_1507 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" Blo_1506"
"(unsafe-vector-ref A_1426 Alo_1505))"
"((letrec-values(((iloop_1510)"
"(lambda(i_1511)"
"(if(unsafe-fx<"
" i_1511"
" n_1507)"
"(let-values()"
"(let-values(((ref-i_1512)"
"(unsafe-vector-ref"
" A_1426"
"(unsafe-fx+"
" Alo_1505"
" i_1511))))"
"((letrec-values(((jloop_1513)"
"(lambda(j_1514)"
"(let-values(((ref-j-1_1515)"
"(unsafe-vector-ref"
" A_1426"
"(unsafe-fx-"
" j_1514"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1506"
" j_1514)"
"(char<?"
" ref-i_1512"
" ref-j-1_1515)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" j_1514"
" ref-j-1_1515)"
"(jloop_1513"
"(unsafe-fx-"
" j_1514"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" j_1514"
" ref-i_1512)"
"(iloop_1510"
"(unsafe-fx+"
" i_1511"
" 1))))))))"
" jloop_1513)"
"(unsafe-fx+"
" Blo_1506"
" i_1511))))"
"(void)))))"
" iloop_1510)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1516)"
"(unsafe-fxrshift n_1507 1)))"
"(let-values(((n/2+_1517)"
"(unsafe-fx-"
" n_1507"
" n/2-_1516)))"
"(let-values(((Amid1_1518)"
"(unsafe-fx+"
" Alo_1505"
" n/2-_1516))"
"((Amid2_1519)"
"(unsafe-fx+"
" Alo_1505"
" n/2+_1517))"
"((Bmid1_1520)"
"(unsafe-fx+"
" Blo_1506"
" n/2-_1516)))"
"(begin"
"(copying-mergesort_1504"
" Amid1_1518"
" Bmid1_1520"
" n/2+_1517)"
"(copying-mergesort_1504"
" Alo_1505"
" Amid2_1519"
" n/2-_1516)"
"(let-values(((b2_1521)"
"(unsafe-fx+"
" Blo_1506"
" n_1507)))"
"((letrec-values(((loop_1522)"
"(lambda(a1_1523"
" b1_1524"
" c1_1525)"
"(let-values(((x_1526)"
"(unsafe-vector-ref"
" A_1426"
" a1_1523))"
"((y_1527)"
"(unsafe-vector-ref"
" A_1426"
" b1_1524)))"
"(if(not"
"(char<?"
" y_1527"
" x_1526))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1525"
" x_1526)"
"(let-values(((a1_1528)"
"(unsafe-fx+"
" a1_1523"
" 1))"
"((c1_1529)"
"(unsafe-fx+"
" c1_1525"
" 1)))"
"(if(unsafe-fx<"
" c1_1529"
" b1_1524)"
"(let-values()"
"(loop_1522"
" a1_1528"
" b1_1524"
" c1_1529))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1525"
" y_1527)"
"(let-values(((b1_1530)"
"(unsafe-fx+"
" b1_1524"
" 1))"
"((c1_1531)"
"(unsafe-fx+"
" c1_1525"
" 1)))"
"(if(unsafe-fx<="
" b2_1521"
" b1_1530)"
"((letrec-values(((loop_1532)"
"(lambda(a1_1533"
" c1_1534)"
"(if(unsafe-fx<"
" c1_1534"
" b1_1530)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1534"
"(unsafe-vector-ref"
" A_1426"
" a1_1533))"
"(loop_1532"
"(unsafe-fx+"
" a1_1533"
" 1)"
"(unsafe-fx+"
" c1_1534"
" 1))))"
"(void)))))"
" loop_1532)"
" a1_1523"
" c1_1531)"
"(loop_1522"
" a1_1523"
" b1_1530"
" c1_1531)))))))))"
" loop_1522)"
" Amid2_1519"
" Bmid1_1520"
" Blo_1506)))))))))))))"
"(let-values(((Alo_1535) 0)"
"((Amid1_1536) n/2-_1467)"
"((Amid2_1537) n/2+_1468)"
"((Ahi_1538) n_1427)"
"((B1lo_1539) n_1427))"
"(begin"
"(copying-mergesort_1504 Amid1_1536 B1lo_1539 n/2+_1468)"
"(if(zero? n/2-_1467)"
"(void)"
"(let-values()"
"(copying-mergesort_1504 Alo_1535 Amid2_1537 n/2-_1467)))"
"(let-values(((b2_1540) Ahi_1538))"
"((letrec-values(((loop_1541)"
"(lambda(a1_1542 b1_1543 c1_1544)"
"(let-values(((x_1545)"
"(unsafe-vector-ref"
" A_1426"
" a1_1542))"
"((y_1546)"
"(unsafe-vector-ref"
" A_1426"
" b1_1543)))"
"(if(char<? x_1545 y_1546)"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1544"
" x_1545)"
"(let-values(((a1_1547)"
"(unsafe-fx+ a1_1542 1))"
"((c1_1548)"
"(unsafe-fx+ c1_1544 1)))"
"(if(unsafe-fx< c1_1548 b1_1543)"
"(let-values()"
"(loop_1541"
" a1_1547"
" b1_1543"
" c1_1548))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1544"
" y_1546)"
"(let-values(((b1_1549)"
"(unsafe-fx+ b1_1543 1))"
"((c1_1550)"
"(unsafe-fx+ c1_1544 1)))"
"(if(unsafe-fx<= b2_1540 b1_1549)"
"((letrec-values(((loop_1551)"
"(lambda(a1_1552"
" c1_1553)"
"(if(unsafe-fx<"
" c1_1553"
" b1_1549)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1553"
"(unsafe-vector-ref"
" A_1426"
" a1_1552))"
"(loop_1551"
"(unsafe-fx+"
" a1_1552"
" 1)"
"(unsafe-fx+"
" c1_1553"
" 1))))"
"(void)))))"
" loop_1551)"
" a1_1542"
" c1_1550)"
"(loop_1541"
" a1_1542"
" b1_1549"
" c1_1550)))))))))"
" loop_1541)"
" B1lo_1539"
" Amid2_1537"
" Alo_1535))))))))))))"
"(begin"
"(hash-set! sorts_119 char<? sort-proc_1425)"
"(hash-set! sorts_119 char<=? sort-proc_1425)))"
"(let-values(((sort-proc_1554)"
"(lambda(A_1555 n_1556)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1596)(unsafe-fxrshift n_1556 1)))"
"(let-values(((n/2+_1597)(unsafe-fx- n_1556 n/2-_1596)))"
"(letrec-values(((copying-mergesort_1633)"
"(lambda(Alo_1634 Blo_1635 n_1636)"
"(if(unsafe-fx= n_1636 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1555"
" Blo_1635"
"(unsafe-vector-ref A_1555 Alo_1634)))"
"(if(unsafe-fx= n_1636 2)"
"(let-values()"
"(let-values(((x_1637)"
"(unsafe-vector-ref"
" A_1555"
" Alo_1634))"
"((y_1638)"
"(unsafe-vector-ref"
" A_1555"
"(unsafe-fx+ Alo_1634 1))))"
"(if(char>? y_1638 x_1637)"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" Blo_1635"
" y_1638)"
"(unsafe-vector-set!"
" A_1555"
"(unsafe-fx+ Blo_1635 1)"
" x_1637))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" Blo_1635"
" x_1637)"
"(unsafe-vector-set!"
" A_1555"
"(unsafe-fx+ Blo_1635 1)"
" y_1638)))))"
"(if(unsafe-fx< n_1636 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" Blo_1635"
"(unsafe-vector-ref A_1555 Alo_1634))"
"((letrec-values(((iloop_1639)"
"(lambda(i_1640)"
"(if(unsafe-fx<"
" i_1640"
" n_1636)"
"(let-values()"
"(let-values(((ref-i_1641)"
"(unsafe-vector-ref"
" A_1555"
"(unsafe-fx+"
" Alo_1634"
" i_1640))))"
"((letrec-values(((jloop_1642)"
"(lambda(j_1643)"
"(let-values(((ref-j-1_1644)"
"(unsafe-vector-ref"
" A_1555"
"(unsafe-fx-"
" j_1643"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1635"
" j_1643)"
"(char>?"
" ref-i_1641"
" ref-j-1_1644)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" j_1643"
" ref-j-1_1644)"
"(jloop_1642"
"(unsafe-fx-"
" j_1643"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" j_1643"
" ref-i_1641)"
"(iloop_1639"
"(unsafe-fx+"
" i_1640"
" 1))))))))"
" jloop_1642)"
"(unsafe-fx+"
" Blo_1635"
" i_1640))))"
"(void)))))"
" iloop_1639)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1645)"
"(unsafe-fxrshift n_1636 1)))"
"(let-values(((n/2+_1646)"
"(unsafe-fx-"
" n_1636"
" n/2-_1645)))"
"(let-values(((Amid1_1647)"
"(unsafe-fx+"
" Alo_1634"
" n/2-_1645))"
"((Amid2_1648)"
"(unsafe-fx+"
" Alo_1634"
" n/2+_1646))"
"((Bmid1_1649)"
"(unsafe-fx+"
" Blo_1635"
" n/2-_1645)))"
"(begin"
"(copying-mergesort_1633"
" Amid1_1647"
" Bmid1_1649"
" n/2+_1646)"
"(copying-mergesort_1633"
" Alo_1634"
" Amid2_1648"
" n/2-_1645)"
"(let-values(((b2_1650)"
"(unsafe-fx+"
" Blo_1635"
" n_1636)))"
"((letrec-values(((loop_1651)"
"(lambda(a1_1652"
" b1_1653"
" c1_1654)"
"(let-values(((x_1655)"
"(unsafe-vector-ref"
" A_1555"
" a1_1652))"
"((y_1656)"
"(unsafe-vector-ref"
" A_1555"
" b1_1653)))"
"(if(not"
"(char>?"
" y_1656"
" x_1655))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1654"
" x_1655)"
"(let-values(((a1_1657)"
"(unsafe-fx+"
" a1_1652"
" 1))"
"((c1_1658)"
"(unsafe-fx+"
" c1_1654"
" 1)))"
"(if(unsafe-fx<"
" c1_1658"
" b1_1653)"
"(let-values()"
"(loop_1651"
" a1_1657"
" b1_1653"
" c1_1658))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1654"
" y_1656)"
"(let-values(((b1_1659)"
"(unsafe-fx+"
" b1_1653"
" 1))"
"((c1_1660)"
"(unsafe-fx+"
" c1_1654"
" 1)))"
"(if(unsafe-fx<="
" b2_1650"
" b1_1659)"
"((letrec-values(((loop_1661)"
"(lambda(a1_1662"
" c1_1663)"
"(if(unsafe-fx<"
" c1_1663"
" b1_1659)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1663"
"(unsafe-vector-ref"
" A_1555"
" a1_1662))"
"(loop_1661"
"(unsafe-fx+"
" a1_1662"
" 1)"
"(unsafe-fx+"
" c1_1663"
" 1))))"
"(void)))))"
" loop_1661)"
" a1_1652"
" c1_1660)"
"(loop_1651"
" a1_1652"
" b1_1659"
" c1_1660)))))))))"
" loop_1651)"
" Amid2_1648"
" Bmid1_1649"
" Blo_1635)))))))))))))"
"(let-values(((Alo_1664) 0)"
"((Amid1_1665) n/2-_1596)"
"((Amid2_1666) n/2+_1597)"
"((Ahi_1667) n_1556)"
"((B1lo_1668) n_1556))"
"(begin"
"(copying-mergesort_1633 Amid1_1665 B1lo_1668 n/2+_1597)"
"(if(zero? n/2-_1596)"
"(void)"
"(let-values()"
"(copying-mergesort_1633 Alo_1664 Amid2_1666 n/2-_1596)))"
"(let-values(((b2_1669) Ahi_1667))"
"((letrec-values(((loop_1670)"
"(lambda(a1_1671 b1_1672 c1_1673)"
"(let-values(((x_1674)"
"(unsafe-vector-ref"
" A_1555"
" a1_1671))"
"((y_1675)"
"(unsafe-vector-ref"
" A_1555"
" b1_1672)))"
"(if(char>? x_1674 y_1675)"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1673"
" x_1674)"
"(let-values(((a1_1676)"
"(unsafe-fx+ a1_1671 1))"
"((c1_1677)"
"(unsafe-fx+ c1_1673 1)))"
"(if(unsafe-fx< c1_1677 b1_1672)"
"(let-values()"
"(loop_1670"
" a1_1676"
" b1_1672"
" c1_1677))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1673"
" y_1675)"
"(let-values(((b1_1678)"
"(unsafe-fx+ b1_1672 1))"
"((c1_1679)"
"(unsafe-fx+ c1_1673 1)))"
"(if(unsafe-fx<= b2_1669 b1_1678)"
"((letrec-values(((loop_1680)"
"(lambda(a1_1681"
" c1_1682)"
"(if(unsafe-fx<"
" c1_1682"
" b1_1678)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1682"
"(unsafe-vector-ref"
" A_1555"
" a1_1681))"
"(loop_1680"
"(unsafe-fx+"
" a1_1681"
" 1)"
"(unsafe-fx+"
" c1_1682"
" 1))))"
"(void)))))"
" loop_1680)"
" a1_1671"
" c1_1679)"
"(loop_1670"
" a1_1671"
" b1_1678"
" c1_1679)))))))))"
" loop_1670)"
" B1lo_1668"
" Amid2_1666"
" Alo_1664))))))))))))"
"(begin"
"(hash-set! sorts_119 char>? sort-proc_1554)"
"(hash-set! sorts_119 char>=? sort-proc_1554)))"
"(let-values(((sort-proc_1683)"
"(lambda(A_1684 n_1685)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1725)(unsafe-fxrshift n_1685 1)))"
"(let-values(((n/2+_1726)(unsafe-fx- n_1685 n/2-_1725)))"
"(letrec-values(((copying-mergesort_1762)"
"(lambda(Alo_1763 Blo_1764 n_1765)"
"(if(unsafe-fx= n_1765 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1684"
" Blo_1764"
"(unsafe-vector-ref A_1684 Alo_1763)))"
"(if(unsafe-fx= n_1765 2)"
"(let-values()"
"(let-values(((x_1766)"
"(unsafe-vector-ref"
" A_1684"
" Alo_1763))"
"((y_1767)"
"(unsafe-vector-ref"
" A_1684"
"(unsafe-fx+ Alo_1763 1))))"
"(if(keyword<? y_1767 x_1766)"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" Blo_1764"
" y_1767)"
"(unsafe-vector-set!"
" A_1684"
"(unsafe-fx+ Blo_1764 1)"
" x_1766))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" Blo_1764"
" x_1766)"
"(unsafe-vector-set!"
" A_1684"
"(unsafe-fx+ Blo_1764 1)"
" y_1767)))))"
"(if(unsafe-fx< n_1765 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" Blo_1764"
"(unsafe-vector-ref A_1684 Alo_1763))"
"((letrec-values(((iloop_1768)"
"(lambda(i_1769)"
"(if(unsafe-fx<"
" i_1769"
" n_1765)"
"(let-values()"
"(let-values(((ref-i_1770)"
"(unsafe-vector-ref"
" A_1684"
"(unsafe-fx+"
" Alo_1763"
" i_1769))))"
"((letrec-values(((jloop_1771)"
"(lambda(j_1772)"
"(let-values(((ref-j-1_1773)"
"(unsafe-vector-ref"
" A_1684"
"(unsafe-fx-"
" j_1772"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1764"
" j_1772)"
"(keyword<?"
" ref-i_1770"
" ref-j-1_1773)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" j_1772"
" ref-j-1_1773)"
"(jloop_1771"
"(unsafe-fx-"
" j_1772"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" j_1772"
" ref-i_1770)"
"(iloop_1768"
"(unsafe-fx+"
" i_1769"
" 1))))))))"
" jloop_1771)"
"(unsafe-fx+"
" Blo_1764"
" i_1769))))"
"(void)))))"
" iloop_1768)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1774)"
"(unsafe-fxrshift n_1765 1)))"
"(let-values(((n/2+_1775)"
"(unsafe-fx-"
" n_1765"
" n/2-_1774)))"
"(let-values(((Amid1_1776)"
"(unsafe-fx+"
" Alo_1763"
" n/2-_1774))"
"((Amid2_1777)"
"(unsafe-fx+"
" Alo_1763"
" n/2+_1775))"
"((Bmid1_1778)"
"(unsafe-fx+"
" Blo_1764"
" n/2-_1774)))"
"(begin"
"(copying-mergesort_1762"
" Amid1_1776"
" Bmid1_1778"
" n/2+_1775)"
"(copying-mergesort_1762"
" Alo_1763"
" Amid2_1777"
" n/2-_1774)"
"(let-values(((b2_1779)"
"(unsafe-fx+"
" Blo_1764"
" n_1765)))"
"((letrec-values(((loop_1780)"
"(lambda(a1_1781"
" b1_1782"
" c1_1783)"
"(let-values(((x_1784)"
"(unsafe-vector-ref"
" A_1684"
" a1_1781))"
"((y_1785)"
"(unsafe-vector-ref"
" A_1684"
" b1_1782)))"
"(if(not"
"(keyword<?"
" y_1785"
" x_1784))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1783"
" x_1784)"
"(let-values(((a1_1786)"
"(unsafe-fx+"
" a1_1781"
" 1))"
"((c1_1787)"
"(unsafe-fx+"
" c1_1783"
" 1)))"
"(if(unsafe-fx<"
" c1_1787"
" b1_1782)"
"(let-values()"
"(loop_1780"
" a1_1786"
" b1_1782"
" c1_1787))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1783"
" y_1785)"
"(let-values(((b1_1788)"
"(unsafe-fx+"
" b1_1782"
" 1))"
"((c1_1789)"
"(unsafe-fx+"
" c1_1783"
" 1)))"
"(if(unsafe-fx<="
" b2_1779"
" b1_1788)"
"((letrec-values(((loop_1790)"
"(lambda(a1_1791"
" c1_1792)"
"(if(unsafe-fx<"
" c1_1792"
" b1_1788)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1792"
"(unsafe-vector-ref"
" A_1684"
" a1_1791))"
"(loop_1790"
"(unsafe-fx+"
" a1_1791"
" 1)"
"(unsafe-fx+"
" c1_1792"
" 1))))"
"(void)))))"
" loop_1790)"
" a1_1781"
" c1_1789)"
"(loop_1780"
" a1_1781"
" b1_1788"
" c1_1789)))))))))"
" loop_1780)"
" Amid2_1777"
" Bmid1_1778"
" Blo_1764)))))))))))))"
"(let-values(((Alo_1793) 0)"
"((Amid1_1794) n/2-_1725)"
"((Amid2_1795) n/2+_1726)"
"((Ahi_1796) n_1685)"
"((B1lo_1797) n_1685))"
"(begin"
"(copying-mergesort_1762 Amid1_1794 B1lo_1797 n/2+_1726)"
"(if(zero? n/2-_1725)"
"(void)"
"(let-values()"
"(copying-mergesort_1762 Alo_1793 Amid2_1795 n/2-_1725)))"
"(let-values(((b2_1798) Ahi_1796))"
"((letrec-values(((loop_1799)"
"(lambda(a1_1800 b1_1801 c1_1802)"
"(let-values(((x_1803)"
"(unsafe-vector-ref"
" A_1684"
" a1_1800))"
"((y_1804)"
"(unsafe-vector-ref"
" A_1684"
" b1_1801)))"
"(if(keyword<? x_1803 y_1804)"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1802"
" x_1803)"
"(let-values(((a1_1805)"
"(unsafe-fx+ a1_1800 1))"
"((c1_1806)"
"(unsafe-fx+ c1_1802 1)))"
"(if(unsafe-fx< c1_1806 b1_1801)"
"(let-values()"
"(loop_1799"
" a1_1805"
" b1_1801"
" c1_1806))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1802"
" y_1804)"
"(let-values(((b1_1807)"
"(unsafe-fx+ b1_1801 1))"
"((c1_1808)"
"(unsafe-fx+ c1_1802 1)))"
"(if(unsafe-fx<= b2_1798 b1_1807)"
"((letrec-values(((loop_1809)"
"(lambda(a1_1810"
" c1_1811)"
"(if(unsafe-fx<"
" c1_1811"
" b1_1807)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1811"
"(unsafe-vector-ref"
" A_1684"
" a1_1810))"
"(loop_1809"
"(unsafe-fx+"
" a1_1810"
" 1)"
"(unsafe-fx+"
" c1_1811"
" 1))))"
"(void)))))"
" loop_1809)"
" a1_1800"
" c1_1808)"
"(loop_1799"
" a1_1800"
" b1_1807"
" c1_1808)))))))))"
" loop_1799)"
" B1lo_1797"
" Amid2_1795"
" Alo_1793))))))))))))"
"(hash-set! sorts_119 keyword<? sort-proc_1683))"
"(make-immutable-hasheq(hash-map sorts_119 cons)))))))"
"(let-values(((generic-sort_50)"
"(lambda(A_1812 less-than?_1813 n_1814)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1854)(unsafe-fxrshift n_1814 1)))"
"(let-values(((n/2+_1855)(unsafe-fx- n_1814 n/2-_1854)))"
"(letrec-values(((copying-mergesort_1891)"
"(lambda(Alo_1892 Blo_1893 n_1894)"
"(if(unsafe-fx= n_1894 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1812"
" Blo_1893"
"(unsafe-vector-ref A_1812 Alo_1892)))"
"(if(unsafe-fx= n_1894 2)"
"(let-values()"
"(let-values(((x_1895)(unsafe-vector-ref A_1812 Alo_1892))"
"((y_1896)"
"(unsafe-vector-ref"
" A_1812"
"(unsafe-fx+ Alo_1892 1))))"
"(if(less-than?_1813 y_1896 x_1895)"
"(begin"
"(unsafe-vector-set! A_1812 Blo_1893 y_1896)"
"(unsafe-vector-set! A_1812(unsafe-fx+ Blo_1893 1) x_1895))"
"(begin"
"(unsafe-vector-set! A_1812 Blo_1893 x_1895)"
"(unsafe-vector-set!"
" A_1812"
"(unsafe-fx+ Blo_1893 1)"
" y_1896)))))"
"(if(unsafe-fx< n_1894 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" Blo_1893"
"(unsafe-vector-ref A_1812 Alo_1892))"
"((letrec-values(((iloop_1897)"
"(lambda(i_1898)"
"(if(unsafe-fx< i_1898 n_1894)"
"(let-values()"
"(let-values(((ref-i_1899)"
"(unsafe-vector-ref"
" A_1812"
"(unsafe-fx+"
" Alo_1892"
" i_1898))))"
"((letrec-values(((jloop_1900)"
"(lambda(j_1901)"
"(let-values(((ref-j-1_1902)"
"(unsafe-vector-ref"
" A_1812"
"(unsafe-fx-"
" j_1901"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1893"
" j_1901)"
"(less-than?_1813"
" ref-i_1899"
" ref-j-1_1902)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" j_1901"
" ref-j-1_1902)"
"(jloop_1900"
"(unsafe-fx-"
" j_1901"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" j_1901"
" ref-i_1899)"
"(iloop_1897"
"(unsafe-fx+"
" i_1898"
" 1))))))))"
" jloop_1900)"
"(unsafe-fx+ Blo_1893 i_1898))))"
"(void)))))"
" iloop_1897)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1903)(unsafe-fxrshift n_1894 1)))"
"(let-values(((n/2+_1904)(unsafe-fx- n_1894 n/2-_1903)))"
"(let-values(((Amid1_1905)(unsafe-fx+ Alo_1892 n/2-_1903))"
"((Amid2_1906)(unsafe-fx+ Alo_1892 n/2+_1904))"
"((Bmid1_1907)"
"(unsafe-fx+ Blo_1893 n/2-_1903)))"
"(begin"
"(copying-mergesort_1891"
" Amid1_1905"
" Bmid1_1907"
" n/2+_1904)"
"(copying-mergesort_1891 Alo_1892 Amid2_1906 n/2-_1903)"
"(let-values(((b2_1908)(unsafe-fx+ Blo_1893 n_1894)))"
"((letrec-values(((loop_1909)"
"(lambda(a1_1910 b1_1911 c1_1912)"
"(let-values(((x_1913)"
"(unsafe-vector-ref"
" A_1812"
" a1_1910))"
"((y_1914)"
"(unsafe-vector-ref"
" A_1812"
" b1_1911)))"
"(if(not"
"(less-than?_1813"
" y_1914"
" x_1913))"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" c1_1912"
" x_1913)"
"(let-values(((a1_1915)"
"(unsafe-fx+"
" a1_1910"
" 1))"
"((c1_1916)"
"(unsafe-fx+"
" c1_1912"
" 1)))"
"(if(unsafe-fx<"
" c1_1916"
" b1_1911)"
"(let-values()"
"(loop_1909"
" a1_1915"
" b1_1911"
" c1_1916))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" c1_1912"
" y_1914)"
"(let-values(((b1_1917)"
"(unsafe-fx+"
" b1_1911"
" 1))"
"((c1_1918)"
"(unsafe-fx+"
" c1_1912"
" 1)))"
"(if(unsafe-fx<="
" b2_1908"
" b1_1917)"
"((letrec-values(((loop_1919)"
"(lambda(a1_1920"
" c1_1921)"
"(if(unsafe-fx<"
" c1_1921"
" b1_1917)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" c1_1921"
"(unsafe-vector-ref"
" A_1812"
" a1_1920))"
"(loop_1919"
"(unsafe-fx+"
" a1_1920"
" 1)"
"(unsafe-fx+"
" c1_1921"
" 1))))"
"(void)))))"
" loop_1919)"
" a1_1910"
" c1_1918)"
"(loop_1909"
" a1_1910"
" b1_1917"
" c1_1918)))))))))"
" loop_1909)"
" Amid2_1906"
" Bmid1_1907"
" Blo_1893)))))))))))))"
"(let-values(((Alo_1922) 0)"
"((Amid1_1923) n/2-_1854)"
"((Amid2_1924) n/2+_1855)"
"((Ahi_1925) n_1814)"
"((B1lo_1926) n_1814))"
"(begin"
"(copying-mergesort_1891 Amid1_1923 B1lo_1926 n/2+_1855)"
"(if(zero? n/2-_1854)"
"(void)"
"(let-values()(copying-mergesort_1891 Alo_1922 Amid2_1924 n/2-_1854)))"
"(let-values(((b2_1927) Ahi_1925))"
"((letrec-values(((loop_1928)"
"(lambda(a1_1929 b1_1930 c1_1931)"
"(let-values(((x_1932)(unsafe-vector-ref A_1812 a1_1929))"
"((y_1933)(unsafe-vector-ref A_1812 b1_1930)))"
"(if(less-than?_1813 x_1932 y_1933)"
"(begin"
"(unsafe-vector-set! A_1812 c1_1931 x_1932)"
"(let-values(((a1_1934)(unsafe-fx+ a1_1929 1))"
"((c1_1935)(unsafe-fx+ c1_1931 1)))"
"(if(unsafe-fx< c1_1935 b1_1930)"
"(let-values()(loop_1928 a1_1934 b1_1930 c1_1935))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_1812 c1_1931 y_1933)"
"(let-values(((b1_1936)(unsafe-fx+ b1_1930 1))"
"((c1_1937)(unsafe-fx+ c1_1931 1)))"
"(if(unsafe-fx<= b2_1927 b1_1936)"
"((letrec-values(((loop_1938)"
"(lambda(a1_1939 c1_1940)"
"(if(unsafe-fx< c1_1940 b1_1936)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" c1_1940"
"(unsafe-vector-ref"
" A_1812"
" a1_1939))"
"(loop_1938"
"(unsafe-fx+ a1_1939 1)"
"(unsafe-fx+ c1_1940 1))))"
"(void)))))"
" loop_1938)"
" a1_1929"
" c1_1937)"
"(loop_1928 a1_1929 b1_1936 c1_1937)))))))))"
" loop_1928)"
" B1lo_1926"
" Amid2_1924"
" Alo_1922))))))))))))"
"(let-values(((generic-sort/key_51)"
"(lambda(A_1941 less-than?_1942 n_1943 key_1944)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1984)(unsafe-fxrshift n_1943 1)))"
"(let-values(((n/2+_1985)(unsafe-fx- n_1943 n/2-_1984)))"
"(letrec-values(((copying-mergesort_2021)"
"(lambda(Alo_2022 Blo_2023 n_2024)"
"(if(unsafe-fx= n_2024 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1941"
" Blo_2023"
"(unsafe-vector-ref A_1941 Alo_2022)))"
"(if(unsafe-fx= n_2024 2)"
"(let-values()"
"(let-values(((x_2025)(unsafe-vector-ref A_1941 Alo_2022))"
"((y_2026)"
"(unsafe-vector-ref"
" A_1941"
"(unsafe-fx+ Alo_2022 1))))"
"(if(if key_1944"
"(less-than?_1942(key_1944 y_2026)(key_1944 x_2025))"
"(less-than?_1942 y_2026 x_2025))"
"(begin"
"(unsafe-vector-set! A_1941 Blo_2023 y_2026)"
"(unsafe-vector-set!"
" A_1941"
"(unsafe-fx+ Blo_2023 1)"
" x_2025))"
"(begin"
"(unsafe-vector-set! A_1941 Blo_2023 x_2025)"
"(unsafe-vector-set!"
" A_1941"
"(unsafe-fx+ Blo_2023 1)"
" y_2026)))))"
"(if(unsafe-fx< n_2024 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" Blo_2023"
"(unsafe-vector-ref A_1941 Alo_2022))"
"((letrec-values(((iloop_2027)"
"(lambda(i_2028)"
"(if(unsafe-fx< i_2028 n_2024)"
"(let-values()"
"(let-values(((ref-i_2029)"
"(unsafe-vector-ref"
" A_1941"
"(unsafe-fx+"
" Alo_2022"
" i_2028))))"
"((letrec-values(((jloop_2030)"
"(lambda(j_2031)"
"(let-values(((ref-j-1_2032)"
"(unsafe-vector-ref"
" A_1941"
"(unsafe-fx-"
" j_2031"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_2023"
" j_2031)"
"(if key_1944"
"(less-than?_1942"
"(key_1944"
" ref-i_2029)"
"(key_1944"
" ref-j-1_2032))"
"(less-than?_1942"
" ref-i_2029"
" ref-j-1_2032))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" j_2031"
" ref-j-1_2032)"
"(jloop_2030"
"(unsafe-fx-"
" j_2031"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" j_2031"
" ref-i_2029)"
"(iloop_2027"
"(unsafe-fx+"
" i_2028"
" 1))))))))"
" jloop_2030)"
"(unsafe-fx+ Blo_2023 i_2028))))"
"(void)))))"
" iloop_2027)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_2033)(unsafe-fxrshift n_2024 1)))"
"(let-values(((n/2+_2034)(unsafe-fx- n_2024 n/2-_2033)))"
"(let-values(((Amid1_2035)"
"(unsafe-fx+ Alo_2022 n/2-_2033))"
"((Amid2_2036)"
"(unsafe-fx+ Alo_2022 n/2+_2034))"
"((Bmid1_2037)"
"(unsafe-fx+ Blo_2023 n/2-_2033)))"
"(begin"
"(copying-mergesort_2021"
" Amid1_2035"
" Bmid1_2037"
" n/2+_2034)"
"(copying-mergesort_2021"
" Alo_2022"
" Amid2_2036"
" n/2-_2033)"
"(let-values(((b2_2038)"
"(unsafe-fx+ Blo_2023 n_2024)))"
"((letrec-values(((loop_2039)"
"(lambda(a1_2040 b1_2041 c1_2042)"
"(let-values(((x_2043)"
"(unsafe-vector-ref"
" A_1941"
" a1_2040))"
"((y_2044)"
"(unsafe-vector-ref"
" A_1941"
" b1_2041)))"
"(if(not"
"(if key_1944"
"(less-than?_1942"
"(key_1944 y_2044)"
"(key_1944 x_2043))"
"(less-than?_1942"
" y_2044"
" x_2043)))"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" c1_2042"
" x_2043)"
"(let-values(((a1_2045)"
"(unsafe-fx+"
" a1_2040"
" 1))"
"((c1_2046)"
"(unsafe-fx+"
" c1_2042"
" 1)))"
"(if(unsafe-fx<"
" c1_2046"
" b1_2041)"
"(let-values()"
"(loop_2039"
" a1_2045"
" b1_2041"
" c1_2046))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" c1_2042"
" y_2044)"
"(let-values(((b1_2047)"
"(unsafe-fx+"
" b1_2041"
" 1))"
"((c1_2048)"
"(unsafe-fx+"
" c1_2042"
" 1)))"
"(if(unsafe-fx<="
" b2_2038"
" b1_2047)"
"((letrec-values(((loop_2049)"
"(lambda(a1_2050"
" c1_2051)"
"(if(unsafe-fx<"
" c1_2051"
" b1_2047)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" c1_2051"
"(unsafe-vector-ref"
" A_1941"
" a1_2050))"
"(loop_2049"
"(unsafe-fx+"
" a1_2050"
" 1)"
"(unsafe-fx+"
" c1_2051"
" 1))))"
"(void)))))"
" loop_2049)"
" a1_2040"
" c1_2048)"
"(loop_2039"
" a1_2040"
" b1_2047"
" c1_2048)))))))))"
" loop_2039)"
" Amid2_2036"
" Bmid1_2037"
" Blo_2023)))))))))))))"
"(let-values(((Alo_2052) 0)"
"((Amid1_2053) n/2-_1984)"
"((Amid2_2054) n/2+_1985)"
"((Ahi_2055) n_1943)"
"((B1lo_2056) n_1943))"
"(begin"
"(copying-mergesort_2021 Amid1_2053 B1lo_2056 n/2+_1985)"
"(if(zero? n/2-_1984)"
"(void)"
"(let-values()(copying-mergesort_2021 Alo_2052 Amid2_2054 n/2-_1984)))"
"(let-values(((b2_2057) Ahi_2055))"
"((letrec-values(((loop_2058)"
"(lambda(a1_2059 b1_2060 c1_2061)"
"(let-values(((x_2062)(unsafe-vector-ref A_1941 a1_2059))"
"((y_2063)(unsafe-vector-ref A_1941 b1_2060)))"
"(if(if key_1944"
"(less-than?_1942"
"(key_1944 x_2062)"
"(key_1944 y_2063))"
"(less-than?_1942 x_2062 y_2063))"
"(begin"
"(unsafe-vector-set! A_1941 c1_2061 x_2062)"
"(let-values(((a1_2064)(unsafe-fx+ a1_2059 1))"
"((c1_2065)(unsafe-fx+ c1_2061 1)))"
"(if(unsafe-fx< c1_2065 b1_2060)"
"(let-values()"
"(loop_2058 a1_2064 b1_2060 c1_2065))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_1941 c1_2061 y_2063)"
"(let-values(((b1_2066)(unsafe-fx+ b1_2060 1))"
"((c1_2067)(unsafe-fx+ c1_2061 1)))"
"(if(unsafe-fx<= b2_2057 b1_2066)"
"((letrec-values(((loop_2068)"
"(lambda(a1_2069 c1_2070)"
"(if(unsafe-fx<"
" c1_2070"
" b1_2066)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" c1_2070"
"(unsafe-vector-ref"
" A_1941"
" a1_2069))"
"(loop_2068"
"(unsafe-fx+ a1_2069 1)"
"(unsafe-fx+"
" c1_2070"
" 1))))"
"(void)))))"
" loop_2068)"
" a1_2059"
" c1_2067)"
"(loop_2058 a1_2059 b1_2066 c1_2067)))))))))"
" loop_2058)"
" B1lo_2056"
" Amid2_2054"
" Alo_2052))))))))))))"
"(values"
"(case-lambda"
"((lst_2071 less-than?_2072)"
"(let-values(((n_2073)(length lst_2071)))"
"(let-values()"
"(if(unsafe-fx= n_2073 0)"
"(let-values() lst_2071)"
"(if((letrec-values(((loop_2097)"
"(lambda(last_2098 next_2099)"
"(let-values(((or-part_2100)(null? next_2099)))"
"(if or-part_2100"
" or-part_2100"
"(if(not(less-than?_2072(unsafe-car next_2099) last_2098))"
"(loop_2097(unsafe-car next_2099)(unsafe-cdr next_2099))"
" #f))))))"
" loop_2097)"
"(car lst_2071)"
"(cdr lst_2071))"
"(let-values() lst_2071)"
"(if(unsafe-fx<= n_2073 3)"
"(let-values()"
"(if(unsafe-fx= n_2073 1)"
"(let-values() lst_2071)"
"(if(unsafe-fx= n_2073 2)"
"(let-values()(list(cadr lst_2071)(car lst_2071)))"
"(let-values()"
"(let-values(((a_2101)(car lst_2071))"
"((b_2102)(cadr lst_2071))"
"((c_2103)(caddr lst_2071)))"
"(if(less-than?_2072 b_2102 a_2101)"
"(if(less-than?_2072 c_2103 b_2102)"
"(list c_2103 b_2102 a_2101)"
"(if(less-than?_2072 c_2103 a_2101)"
"(list b_2102 c_2103 a_2101)"
"(list b_2102 a_2101 c_2103)))"
"(if(less-than?_2072 c_2103 a_2101)"
"(list c_2103 a_2101 b_2102)"
"(list a_2101 c_2103 b_2102))))))))"
"(let-values()"
"(let-values(((vec_2104)(make-vector(+ n_2073(ceiling(/ n_2073 2))))))"
"(begin"
"((letrec-values(((loop_2105)"
"(lambda(i_2106 lst_2107)"
"(if(pair? lst_2107)"
"(let-values()"
"(begin"
"(vector-set! vec_2104 i_2106(car lst_2107))"
"(loop_2105(add1 i_2106)(cdr lst_2107))))"
"(void)))))"
" loop_2105)"
" 0"
" lst_2071)"
"(let-values(((precomp_2108)(hash-ref precompiled-sorts_49 less-than?_2072 #f)))"
"(if precomp_2108"
"(precomp_2108 vec_2104 n_2073)"
"(generic-sort_50 vec_2104 less-than?_2072 n_2073)))"
"((letrec-values(((loop_2109)"
"(lambda(i_2110 r_2111)"
"(let-values(((i_2112)(sub1 i_2110)))"
"(if(< i_2112 0)"
" r_2111"
"(loop_2109 i_2112(cons(vector-ref vec_2104 i_2112) r_2111)))))))"
" loop_2109)"
" n_2073"
" '()))))))))))"
"((lst_2113 less-than?_2114 getkey_2115)"
"(if(if getkey_2115(not(eq? values getkey_2115)) #f)"
"(sort lst_2113 less-than?_2114 getkey_2115 #f)"
"(sort lst_2113 less-than?_2114)))"
"((lst_2116 less-than?_2117 getkey_2118 cache-keys?_2119)"
"(if(if getkey_2118(not(eq? values getkey_2118)) #f)"
"(let-values(((n_2120)(length lst_2116)))"
"(let-values()"
"(if(unsafe-fx= n_2120 0)"
"(let-values() lst_2116)"
"(if cache-keys?_2119"
"(let-values()"
"(let-values(((vec_2135)(make-vector(+ n_2120(ceiling(/ n_2120 2))))))"
"(begin"
"((letrec-values(((loop_2136)"
"(lambda(i_2137 lst_2138)"
"(if(pair? lst_2138)"
"(let-values()"
"(let-values(((x_2139)(car lst_2138)))"
"(begin"
"(unsafe-vector-set!"
" vec_2135"
" i_2137"
"(cons(getkey_2118 x_2139) x_2139))"
"(loop_2136(unsafe-fx+ i_2137 1)(cdr lst_2138)))))"
"(void)))))"
" loop_2136)"
" 0"
" lst_2116)"
"(generic-sort/key_51 vec_2135 less-than?_2117 n_2120 unsafe-car)"
"((letrec-values(((loop_2140)"
"(lambda(i_2141 r_2142)"
"(let-values(((i_2143)(unsafe-fx- i_2141 1)))"
"(if(unsafe-fx< i_2143 0)"
" r_2142"
"(loop_2140"
" i_2143"
"(cons"
"(unsafe-cdr(unsafe-vector-ref vec_2135 i_2143))"
" r_2142)))))))"
" loop_2140)"
" n_2120"
" '()))))"
"(if((letrec-values(((loop_2144)"
"(lambda(last_2145 next_2146)"
"(let-values(((or-part_2147)(null? next_2146)))"
"(if or-part_2147"
" or-part_2147"
"(if(not"
"(if getkey_2118"
"(less-than?_2117"
"(getkey_2118(unsafe-car next_2146))"
"(getkey_2118 last_2145))"
"(less-than?_2117(unsafe-car next_2146) last_2145)))"
"(loop_2144(unsafe-car next_2146)(unsafe-cdr next_2146))"
" #f))))))"
" loop_2144)"
"(car lst_2116)"
"(cdr lst_2116))"
"(let-values() lst_2116)"
"(if(unsafe-fx<= n_2120 3)"
"(let-values()"
"(if(unsafe-fx= n_2120 1)"
"(let-values() lst_2116)"
"(if(unsafe-fx= n_2120 2)"
"(let-values()(list(cadr lst_2116)(car lst_2116)))"
"(let-values()"
"(let-values(((a_2148)(car lst_2116))"
"((b_2149)(cadr lst_2116))"
"((c_2150)(caddr lst_2116)))"
"(if(if getkey_2118"
"(less-than?_2117(getkey_2118 b_2149)(getkey_2118 a_2148))"
"(less-than?_2117 b_2149 a_2148))"
"(if(if getkey_2118"
"(less-than?_2117(getkey_2118 c_2150)(getkey_2118 b_2149))"
"(less-than?_2117 c_2150 b_2149))"
"(list c_2150 b_2149 a_2148)"
"(if(if getkey_2118"
"(less-than?_2117(getkey_2118 c_2150)(getkey_2118 a_2148))"
"(less-than?_2117 c_2150 a_2148))"
"(list b_2149 c_2150 a_2148)"
"(list b_2149 a_2148 c_2150)))"
"(if(if getkey_2118"
"(less-than?_2117(getkey_2118 c_2150)(getkey_2118 a_2148))"
"(less-than?_2117 c_2150 a_2148))"
"(list c_2150 a_2148 b_2149)"
"(list a_2148 c_2150 b_2149))))))))"
"(let-values()"
"(let-values(((vec_2151)(make-vector(+ n_2120(ceiling(/ n_2120 2))))))"
"(begin"
"((letrec-values(((loop_2152)"
"(lambda(i_2153 lst_2154)"
"(if(pair? lst_2154)"
"(let-values()"
"(begin"
"(vector-set! vec_2151 i_2153(car lst_2154))"
"(loop_2152(add1 i_2153)(cdr lst_2154))))"
"(void)))))"
" loop_2152)"
" 0"
" lst_2116)"
"(generic-sort/key_51 vec_2151 less-than?_2117 n_2120 getkey_2118)"
"((letrec-values(((loop_2155)"
"(lambda(i_2156 r_2157)"
"(let-values(((i_2158)(sub1 i_2156)))"
"(if(< i_2158 0)"
" r_2157"
"(loop_2155"
" i_2158"
"(cons(vector-ref vec_2151 i_2158) r_2157)))))))"
" loop_2155)"
" n_2120"
" '()))))))))))"
"(sort lst_2116 less-than?_2117))))"
"(case-lambda"
"((vec_2159 less-than?_2160 start_2161 end_2162)"
"(let-values(((n_2163)(- end_2162 start_2161)))"
"(let-values(((dst-vec_2195)(make-vector n_2163)))"
"(let-values(((dst-start_2196) 0))"
"(begin"
"(if(unsafe-fx= n_2163 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_2203)"
"(lambda(prev-val_2204 next-index_2205)"
"(let-values(((or-part_2206)(unsafe-fx= next-index_2205 end_2162)))"
"(if or-part_2206"
" or-part_2206"
"(let-values(((next-val_2207)"
"(unsafe-vector-ref vec_2159 next-index_2205)))"
"(if(not(less-than?_2160 next-val_2207 prev-val_2204))"
"(loop_2203 next-val_2207(unsafe-fx+ next-index_2205 1))"
" #f)))))))"
" loop_2203)"
"(unsafe-vector-ref vec_2159 start_2161)"
"(unsafe-fx+ start_2161 1))"
"(let-values()"
"(let-values()(vector-copy! dst-vec_2195 dst-start_2196 vec_2159 start_2161 end_2162)))"
"(if(unsafe-fx<= n_2163 3)"
"(let-values()"
"(begin"
"(let-values()(vector-copy! dst-vec_2195 dst-start_2196 vec_2159 start_2161 end_2162))"
"(if(unsafe-fx= n_2163 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_2163 2)"
"(let-values()"
"(let-values(((tmp_2208)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 0)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 1)))"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 1) tmp_2208))))"
"(let-values()"
"(let-values(((a_2209)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 0)))"
"((b_2210)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 1)))"
"((c_2211)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 2))))"
"(if(less-than?_2160 b_2210 a_2209)"
"(let-values()"
"(if(less-than?_2160 c_2211 b_2210)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 0) c_2211)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 2)"
" a_2209)))"
"(if(less-than?_2160 c_2211 a_2209)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 0)"
" b_2210)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 1)"
" c_2211)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 2)"
" a_2209)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 0)"
" b_2210)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 1)"
" a_2209))))))"
"(if(less-than?_2160 c_2211 a_2209)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 0) c_2211)"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 1) a_2209)"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 2) b_2210)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 1) c_2211)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 2)"
" b_2210)))))))))))"
"(let-values()"
"(let-values(((work-vec_2212)(make-vector(+ n_2163(ceiling(/ n_2163 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2212 0 vec_2159 start_2161 end_2162)"
"(let-values(((precomp_2213)(hash-ref precompiled-sorts_49 less-than?_2160 #f)))"
"(if precomp_2213"
"(precomp_2213 work-vec_2212 n_2163)"
"(generic-sort_50 work-vec_2212 less-than?_2160 n_2163)))"
"(vector-copy! dst-vec_2195 dst-start_2196 work-vec_2212 0 n_2163)))))))"
" dst-vec_2195)))))"
"((vec_2214 less-than?_2215 start_2216 end_2217 getkey_2218 cache-keys?_2219)"
"(if(if getkey_2218(not(eq? values getkey_2218)) #f)"
"(let-values(((n_2220)(- end_2217 start_2216)))"
"(let-values(((dst-vec_2252)(make-vector n_2220)))"
"(let-values(((dst-start_2253) 0))"
"(begin"
"(if(unsafe-fx= n_2220 0)"
"(let-values()(void))"
"(if cache-keys?_2219"
"(let-values()"
"(let-values(((work-vec_2254)(make-vector(+ n_2220(ceiling(/ n_2220 2))) #t)))"
"(begin"
"((letrec-values(((loop_2255)"
"(lambda(i_2256)"
"(if(unsafe-fx< i_2256 n_2220)"
"(let-values()"
"(begin"
"(let-values(((x_2257)"
"(unsafe-vector-ref"
" vec_2214"
"(unsafe-fx+ i_2256 start_2216))))"
"(unsafe-vector-set!"
" work-vec_2254"
" i_2256"
"(cons(getkey_2218 x_2257) x_2257)))"
"(loop_2255(unsafe-fx+ i_2256 1))))"
"(void)))))"
" loop_2255)"
" 0)"
"(generic-sort/key_51 work-vec_2254 less-than?_2215 n_2220 unsafe-car)"
"((letrec-values(((loop_2258)"
"(lambda(i_2259)"
"(if(unsafe-fx< i_2259 n_2220)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ i_2259 dst-start_2253)"
"(unsafe-cdr(unsafe-vector-ref work-vec_2254 i_2259)))"
"(loop_2258(unsafe-fx+ i_2259 1))))"
"(void)))))"
" loop_2258)"
" 0))))"
"(if((letrec-values(((loop_2260)"
"(lambda(prev-val_2261 next-index_2262)"
"(let-values(((or-part_2263)(unsafe-fx= next-index_2262 end_2217)))"
"(if or-part_2263"
" or-part_2263"
"(let-values(((next-val_2264)"
"(unsafe-vector-ref vec_2214 next-index_2262)))"
"(if(not"
"(if getkey_2218"
"(less-than?_2215"
"(getkey_2218 next-val_2264)"
"(getkey_2218 prev-val_2261))"
"(less-than?_2215 next-val_2264 prev-val_2261)))"
"(loop_2260 next-val_2264(unsafe-fx+ next-index_2262 1))"
" #f)))))))"
" loop_2260)"
"(unsafe-vector-ref vec_2214 start_2216)"
"(unsafe-fx+ start_2216 1))"
"(let-values()"
"(let-values()(vector-copy! dst-vec_2252 dst-start_2253 vec_2214 start_2216 end_2217)))"
"(if(unsafe-fx<= n_2220 3)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-copy! dst-vec_2252 dst-start_2253 vec_2214 start_2216 end_2217))"
"(if(unsafe-fx= n_2220 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_2220 2)"
"(let-values()"
"(let-values(((tmp_2265)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 1)))"
"(unsafe-vector-set! dst-vec_2252(unsafe-fx+ dst-start_2253 1) tmp_2265))))"
"(let-values()"
"(let-values(((a_2266)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 0)))"
"((b_2267)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 1)))"
"((c_2268)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 2))))"
"(if(if getkey_2218"
"(less-than?_2215(getkey_2218 b_2267)(getkey_2218 a_2266))"
"(less-than?_2215 b_2267 a_2266))"
"(let-values()"
"(if(if getkey_2218"
"(less-than?_2215(getkey_2218 c_2268)(getkey_2218 b_2267))"
"(less-than?_2215 c_2268 b_2267))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
" c_2268)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 2)"
" a_2266)))"
"(if(if getkey_2218"
"(less-than?_2215(getkey_2218 c_2268)(getkey_2218 a_2266))"
"(less-than?_2215 c_2268 a_2266))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
" b_2267)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 1)"
" c_2268)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 2)"
" a_2266)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
" b_2267)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 1)"
" a_2266))))))"
"(if(if getkey_2218"
"(less-than?_2215(getkey_2218 c_2268)(getkey_2218 a_2266))"
"(less-than?_2215 c_2268 a_2266))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
" c_2268)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 1)"
" a_2266)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 2)"
" b_2267)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 1)"
" c_2268)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 2)"
" b_2267)))))))))))"
"(let-values()"
"(let-values(((work-vec_2269)(make-vector(+ n_2220(ceiling(/ n_2220 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2269 0 vec_2214 start_2216 end_2217)"
"(generic-sort/key_51 work-vec_2269 less-than?_2215 n_2220 getkey_2218)"
"(vector-copy! dst-vec_2252 dst-start_2253 work-vec_2269 0 n_2220))))))))"
" dst-vec_2252))))"
"(vector-sort vec_2214 less-than?_2215 start_2216 end_2217))))"
"(case-lambda"
"((vec_2270 less-than?_2271 start_2272 end_2273)"
"(let-values(((n_2274)(- end_2273 start_2272)))"
"(let-values(((dst-vec_2306) vec_2270))"
"(let-values(((dst-start_2307) start_2272))"
"(begin"
"(if(unsafe-fx= n_2274 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_2314)"
"(lambda(prev-val_2315 next-index_2316)"
"(let-values(((or-part_2317)(unsafe-fx= next-index_2316 end_2273)))"
"(if or-part_2317"
" or-part_2317"
"(let-values(((next-val_2318)"
"(unsafe-vector-ref vec_2270 next-index_2316)))"
"(if(not(less-than?_2271 next-val_2318 prev-val_2315))"
"(loop_2314 next-val_2318(unsafe-fx+ next-index_2316 1))"
" #f)))))))"
" loop_2314)"
"(unsafe-vector-ref vec_2270 start_2272)"
"(unsafe-fx+ start_2272 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_2274 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_2274 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_2274 2)"
"(let-values()"
"(let-values(((tmp_2319)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 0)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 1)))"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 1) tmp_2319))))"
"(let-values()"
"(let-values(((a_2320)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 0)))"
"((b_2321)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 1)))"
"((c_2322)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 2))))"
"(if(less-than?_2271 b_2321 a_2320)"
"(let-values()"
"(if(less-than?_2271 c_2322 b_2321)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 0) c_2322)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 2)"
" a_2320)))"
"(if(less-than?_2271 c_2322 a_2320)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 0)"
" b_2321)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 1)"
" c_2322)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 2)"
" a_2320)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 0)"
" b_2321)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 1)"
" a_2320))))))"
"(if(less-than?_2271 c_2322 a_2320)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 0) c_2322)"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 1) a_2320)"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 2) b_2321)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 1) c_2322)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 2)"
" b_2321)))))))))))"
"(let-values()"
"(let-values(((work-vec_2323)(make-vector(+ n_2274(ceiling(/ n_2274 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2323 0 vec_2270 start_2272 end_2273)"
"(let-values(((precomp_2324)(hash-ref precompiled-sorts_49 less-than?_2271 #f)))"
"(if precomp_2324"
"(precomp_2324 work-vec_2323 n_2274)"
"(generic-sort_50 work-vec_2323 less-than?_2271 n_2274)))"
"(vector-copy! dst-vec_2306 dst-start_2307 work-vec_2323 0 n_2274)))))))"
"(void))))))"
"((vec_2325 less-than?_2326 start_2327 end_2328 getkey_2329 cache-keys?_2330)"
"(if(if getkey_2329(not(eq? values getkey_2329)) #f)"
"(let-values(((n_2331)(- end_2328 start_2327)))"
"(let-values(((dst-vec_2363) vec_2325))"
"(let-values(((dst-start_2364) start_2327))"
"(begin"
"(if(unsafe-fx= n_2331 0)"
"(let-values()(void))"
"(if cache-keys?_2330"
"(let-values()"
"(let-values(((work-vec_2365)(make-vector(+ n_2331(ceiling(/ n_2331 2))) #t)))"
"(begin"
"((letrec-values(((loop_2366)"
"(lambda(i_2367)"
"(if(unsafe-fx< i_2367 n_2331)"
"(let-values()"
"(begin"
"(let-values(((x_2368)"
"(unsafe-vector-ref"
" vec_2325"
"(unsafe-fx+ i_2367 start_2327))))"
"(unsafe-vector-set!"
" work-vec_2365"
" i_2367"
"(cons(getkey_2329 x_2368) x_2368)))"
"(loop_2366(unsafe-fx+ i_2367 1))))"
"(void)))))"
" loop_2366)"
" 0)"
"(generic-sort/key_51 work-vec_2365 less-than?_2326 n_2331 unsafe-car)"
"((letrec-values(((loop_2369)"
"(lambda(i_2370)"
"(if(unsafe-fx< i_2370 n_2331)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ i_2370 dst-start_2364)"
"(unsafe-cdr(unsafe-vector-ref work-vec_2365 i_2370)))"
"(loop_2369(unsafe-fx+ i_2370 1))))"
"(void)))))"
" loop_2369)"
" 0))))"
"(if((letrec-values(((loop_2371)"
"(lambda(prev-val_2372 next-index_2373)"
"(let-values(((or-part_2374)(unsafe-fx= next-index_2373 end_2328)))"
"(if or-part_2374"
" or-part_2374"
"(let-values(((next-val_2375)"
"(unsafe-vector-ref vec_2325 next-index_2373)))"
"(if(not"
"(if getkey_2329"
"(less-than?_2326"
"(getkey_2329 next-val_2375)"
"(getkey_2329 prev-val_2372))"
"(less-than?_2326 next-val_2375 prev-val_2372)))"
"(loop_2371 next-val_2375(unsafe-fx+ next-index_2373 1))"
" #f)))))))"
" loop_2371)"
"(unsafe-vector-ref vec_2325 start_2327)"
"(unsafe-fx+ start_2327 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_2331 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_2331 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_2331 2)"
"(let-values()"
"(let-values(((tmp_2376)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 1)))"
"(unsafe-vector-set! dst-vec_2363(unsafe-fx+ dst-start_2364 1) tmp_2376))))"
"(let-values()"
"(let-values(((a_2377)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 0)))"
"((b_2378)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 1)))"
"((c_2379)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 2))))"
"(if(if getkey_2329"
"(less-than?_2326(getkey_2329 b_2378)(getkey_2329 a_2377))"
"(less-than?_2326 b_2378 a_2377))"
"(let-values()"
"(if(if getkey_2329"
"(less-than?_2326(getkey_2329 c_2379)(getkey_2329 b_2378))"
"(less-than?_2326 c_2379 b_2378))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
" c_2379)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 2)"
" a_2377)))"
"(if(if getkey_2329"
"(less-than?_2326(getkey_2329 c_2379)(getkey_2329 a_2377))"
"(less-than?_2326 c_2379 a_2377))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
" b_2378)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 1)"
" c_2379)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 2)"
" a_2377)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
" b_2378)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 1)"
" a_2377))))))"
"(if(if getkey_2329"
"(less-than?_2326(getkey_2329 c_2379)(getkey_2329 a_2377))"
"(less-than?_2326 c_2379 a_2377))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
" c_2379)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 1)"
" a_2377)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 2)"
" b_2378)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 1)"
" c_2379)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 2)"
" b_2378)))))))))))"
"(let-values()"
"(let-values(((work-vec_2380)(make-vector(+ n_2331(ceiling(/ n_2331 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2380 0 vec_2325 start_2327 end_2328)"
"(generic-sort/key_51 work-vec_2380 less-than?_2326 n_2331 getkey_2329)"
"(vector-copy! dst-vec_2363 dst-start_2364 work-vec_2380 0 n_2331))))))))"
"(void)))))"
"(vector-sort! vec_2325 less-than?_2326 start_2327 end_2328))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:do-sequence make-do-sequence do-sequence? do-sequence-ref do-sequence-set!)"
"(make-struct-type 'sequence #f 1 0 #f))"
"(define-values"
"(prop:stream stream-via-prop? stream-ref)"
"(make-struct-type-property"
" 'stream"
"(lambda(v_2558 si_2559)"
"(begin"
"(if(if(vector? v_2558)"
"(if(= 3(vector-length v_2558))"
"(if(procedure?(vector-ref v_2558 0))"
"(if(procedure-arity-includes?(vector-ref v_2558 0) 1)"
"(if(procedure?(vector-ref v_2558 1))"
"(if(procedure-arity-includes?(vector-ref v_2558 1) 1)"
"(if(procedure?(vector-ref v_2558 2))(procedure-arity-includes?(vector-ref v_2558 2) 1) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:stream"
"(string-append"
"             \"(vector/c (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1))\")"
" v_2558)))"
"(vector->immutable-vector v_2558)))))"
"(define-values"
"(prop:gen-sequence sequence-via-prop? sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2560 si_2561)"
"(begin"
"(if(if(procedure? v_2560)(procedure-arity-includes? v_2560 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:sequence \"(procedure-arity-includes/c 1)\" v_2560)))"
" v_2560))))"
"(define-values"
"(prop:sequence :sequence? :sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2562 sinfo_2563)"
"(begin"
"(if(if(procedure? v_2562)(procedure-arity-includes? v_2562 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'sequence-property-guard \"(procedure-arity-includes/c 1)\" v_2562)))"
"(lambda(self_2564)"
"(let-values(((s_2565)(v_2562 self_2564)))"
"(begin"
"(if(sequence? s_2565)"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'sequence-generate"
"                  \"procedure (value of prop:sequence) produced a non-sequence: \""
" s_2565)))"
" s_2565)))))))"
"(define-values"
"(stream?)"
"(lambda(v_2566)"
"(let-values(((or-part_2567)(list? v_2566)))(if or-part_2567 or-part_2567(stream-via-prop? v_2566)))))"
"(define-values"
"(unsafe-stream-not-empty?)"
"(lambda(v_2568)"
"(if(null? v_2568)"
" #f"
"(let-values(((or-part_2569)(pair? v_2568)))"
"(if or-part_2569 or-part_2569(not((unsafe-vector-ref(stream-ref v_2568) 0) v_2568)))))))"
"(define-values"
"(unsafe-stream-first)"
"(lambda(v_2572)"
"(if(pair? v_2572)"
"(let-values()(car v_2572))"
"(let-values()((unsafe-vector-ref(stream-ref v_2572) 1) v_2572)))))"
"(define-values"
"(unsafe-stream-rest)"
"(lambda(v_2574)"
"(if(pair? v_2574)"
"(let-values()(cdr v_2574))"
"(let-values()"
"(let-values(((r_2575)((unsafe-vector-ref(stream-ref v_2574) 2) v_2574)))"
"(begin"
"(if(stream? r_2575)"
"(void)"
"              (let-values () (raise-mismatch-error 'stream-rest-guard \"result is not a stream: \" r_2575)))"
" r_2575))))))"
"(define-values"
"(sequence?)"
"(lambda(v_2577)"
"(let-values(((or-part_2578)(exact-nonnegative-integer? v_2577)))"
"(if or-part_2578"
" or-part_2578"
"(let-values(((or-part_2579)(do-sequence? v_2577)))"
"(if or-part_2579"
" or-part_2579"
"(let-values(((or-part_2580)(sequence-via-prop? v_2577)))"
"(if or-part_2580"
" or-part_2580"
"(let-values(((or-part_2581)(stream? v_2577)))"
"(if or-part_2581"
" or-part_2581"
"(let-values(((or-part_2582)(mpair? v_2577)))"
"(if or-part_2582"
" or-part_2582"
"(let-values(((or-part_2583)(vector? v_2577)))"
"(if or-part_2583"
" or-part_2583"
"(let-values(((or-part_2584)(flvector? v_2577)))"
"(if or-part_2584"
" or-part_2584"
"(let-values(((or-part_2585)(fxvector? v_2577)))"
"(if or-part_2585"
" or-part_2585"
"(let-values(((or-part_2586)(string? v_2577)))"
"(if or-part_2586"
" or-part_2586"
"(let-values(((or-part_2587)(bytes? v_2577)))"
"(if or-part_2587"
" or-part_2587"
"(let-values(((or-part_2588)(input-port? v_2577)))"
"(if or-part_2588"
" or-part_2588"
"(let-values(((or-part_2589)(hash? v_2577)))"
"(if or-part_2589"
" or-part_2589"
"(if(:sequence? v_2577)"
"(not(struct-type? v_2577))"
" #f)))))))))))))))))))))))))))"
"(define-values"
"(make-sequence)"
"(lambda(who_2590 v_2591)"
"(if(exact-nonnegative-integer? v_2591)"
"(let-values()(:integer-gen v_2591))"
"(if(do-sequence? v_2591)"
"(let-values()((do-sequence-ref v_2591 0)))"
"(if(mpair? v_2591)"
"(let-values()(:mlist-gen v_2591))"
"(if(list? v_2591)"
"(let-values()(:list-gen v_2591))"
"(if(vector? v_2591)"
"(let-values()(:vector-gen v_2591 0(vector-length v_2591) 1))"
"(if(flvector? v_2591)"
"(let-values()(:flvector-gen v_2591 0(flvector-length v_2591) 1))"
"(if(fxvector? v_2591)"
"(let-values()(:fxvector-gen v_2591 0(fxvector-length v_2591) 1))"
"(if(string? v_2591)"
"(let-values()(:string-gen v_2591 0(string-length v_2591) 1))"
"(if(bytes? v_2591)"
"(let-values()(:bytes-gen v_2591 0(bytes-length v_2591) 1))"
"(if(input-port? v_2591)"
"(let-values()(:input-port-gen v_2591))"
"(if(hash? v_2591)"
"(let-values()(:hash-gen v_2591 hash-iterate-key+value hash-iterate-first hash-iterate-next))"
"(if(sequence-via-prop? v_2591)"
"(let-values()((sequence-ref v_2591) v_2591))"
"(if(:sequence? v_2591)"
"(let-values()(make-sequence who_2590((:sequence-ref v_2591) v_2591)))"
"(if(stream? v_2591)"
"(let-values()(:stream-gen v_2591))"
"(let-values()"
"(raise"
"(exn:fail:contract"
"(format"
"                                     \"for: expected a sequence for ~a, got something else: ~v\""
"(if(= 1(length who_2590))(car who_2590) who_2590)"
" v_2591)"
"(current-continuation-marks))))))))))))))))))))"
"(define-values"
"(struct:range make-range range? range-ref range-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2592)"
"(let-values(((cont?_2593)(range-ref v_2592 2)))(if cont?_2593(not(cont?_2593(range-ref v_2592 0))) #f)))"
"(lambda(v_2594)(range-ref v_2594 0))"
"(lambda(v_2595)"
"(make-range((range-ref v_2595 1)(range-ref v_2595 0))(range-ref v_2595 1)(range-ref v_2595 2)))))"
"(cons"
" prop:gen-sequence"
"(lambda(v_2596)(values values(range-ref v_2596 1)(range-ref v_2596 0)(range-ref v_2596 2) #f #f))))))"
"(define-values"
"(in-range)"
"(case-lambda"
"((b_2597)(in-range 0 b_2597 1))"
"((a_2598 b_2599)(in-range a_2598 b_2599 1))"
"((a_2600 b_2601 step_2602)"
"(begin"
"      (if (real? a_2600) (void) (let-values () (raise-argument-error 'in-range \"real?\" a_2600)))"
"      (if (real? b_2601) (void) (let-values () (raise-argument-error 'in-range \"real?\" b_2601)))"
"      (if (real? step_2602) (void) (let-values () (raise-argument-error 'in-range \"real?\" step_2602)))"
"(let-values(((cont?_2603)"
"(if(>= step_2602 0)(lambda(x_2604)(< x_2604 b_2601))(lambda(x_2605)(> x_2605 b_2601)))))"
"(let-values(((inc_2606)(lambda(x_2607)(+ x_2607 step_2602))))(make-range a_2600 inc_2606 cont?_2603)))))))"
"(define-values(:integer-gen)(lambda(v_2608)(values values add1 0(lambda(i_2609)(< i_2609 v_2608)) #f #f)))"
"(define-values"
"(in-naturals)"
"(case-lambda"
"(()(in-naturals 0))"
"((n_2610)"
"(begin"
"(if(if(integer? n_2610)(if(exact? n_2610)(>= n_2610 0) #f) #f)"
"(void)"
"        (let-values () (raise-argument-error 'in-naturals \"exact-nonnegative-integer?\" n_2610)))"
"(make-range n_2610 add1 #f)))))"
"(define-values"
"(struct:list-stream make-list-stream list-stream? list-stream-ref list-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2611)(not(pair?(list-stream-ref v_2611 0))))"
"(lambda(v_2612)(car(list-stream-ref v_2612 0)))"
"(lambda(v_2613)(make-list-stream(cdr(list-stream-ref v_2613 0))))))"
"(cons prop:gen-sequence(lambda(v_2614)(values car cdr(list-stream-ref v_2614 0) pair? #f #f))))))"
"(define-values"
"(in-list)"
"(lambda(l_2615)"
"(begin"
"      (if (list? l_2615) (void) (let-values () (raise-argument-error 'in-list \"list?\" l_2615)))"
"(make-list-stream l_2615))))"
"(define-values(:list-gen)(lambda(l_2616)(values car cdr l_2616 pair? #f #f)))"
"(define-values(:mlist-gen)(lambda(l_2618)(values mcar mcdr l_2618 mpair? #f #f)))"
"(define-values"
"(:input-port-gen)"
"(lambda(p_2620)(values read-byte values p_2620 #f(lambda(x_2621)(not(eof-object? x_2621))) #f)))"
"(define-values"
"(:stream-gen)"
"(lambda(l_2639)(values unsafe-stream-first unsafe-stream-rest l_2639 unsafe-stream-not-empty? #f #f)))"
"(define-values"
"(:hash-gen)"
"(lambda(ht_2640 -get_2641 -first_2642 -next_2643)"
"(values"
"(lambda(pos_2644)(-get_2641 ht_2640 pos_2644))"
"(lambda(pos_2645)(-next_2643 ht_2640 pos_2645))"
"(-first_2642 ht_2640)"
"(lambda(pos_2646) pos_2646)"
" #f"
" #f)))"
"(define-values"
"(default-in-hash)"
"(lambda(ht_2649)"
"(begin"
"(if((lambda(ht_2650)(hash? ht_2650)) ht_2649)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash \"hash?\" ht_2649)))"
"(make-do-sequence(lambda()(:hash-gen ht_2649 hash-iterate-key+value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash)"
"(lambda(ht_2653)"
"(begin"
"(if((lambda(ht_2654)(if(hash? ht_2654)(immutable? ht_2654) #f)) ht_2653)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash \"(and/c hash? immutable?)\" ht_2653)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2653"
" unsafe-immutable-hash-iterate-key+value"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-keys)"
"(lambda(ht_2657)"
"(begin"
"(if((lambda(ht_2658)(hash? ht_2658)) ht_2657)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-keys \"hash?\" ht_2657)))"
"(make-do-sequence(lambda()(:hash-gen ht_2657 hash-iterate-key hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash-keys)"
"(lambda(ht_2661)"
"(begin"
"(if((lambda(ht_2662)(if(hash? ht_2662)(immutable? ht_2662) #f)) ht_2661)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash-keys \"(and/c hash? immutable?)\" ht_2661)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2661"
" unsafe-immutable-hash-iterate-key"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-values)"
"(lambda(ht_2665)"
"(begin"
"(if((lambda(ht_2666)(hash? ht_2666)) ht_2665)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-values \"hash?\" ht_2665)))"
"(make-do-sequence(lambda()(:hash-gen ht_2665 hash-iterate-value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(check-ranges)"
"(lambda(who_2681 vec_2682 start_2683 stop_2684 step_2685 len_2686)"
"(begin"
"(if(if(exact-nonnegative-integer? start_2683)"
"(let-values(((or-part_2687)(< start_2683 len_2686)))"
"(if or-part_2687 or-part_2687(= len_2686 start_2683 stop_2684)))"
" #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"starting \" start_2683 vec_2682 0 (sub1 len_2686))))"
"(if(if(exact-integer? stop_2684)(if(<= -1 stop_2684)(<= stop_2684 len_2686) #f) #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"stopping \" stop_2684 vec_2682 -1 len_2686)))"
"(if(if(exact-integer? step_2685)(not(zero? step_2685)) #f)"
"(void)"
"        (let-values () (raise-argument-error who_2681 \"(and/c exact-integer? (not/c zero?))\" step_2685)))"
"(if(if(< start_2683 stop_2684)(< step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index less than stopping index, but given a negative step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void))"
"(if(if(< stop_2684 start_2683)(> step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index more than stopping index, but given a positive step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void)))))"
"(define-values"
"(normalise-inputs)"
"(lambda(who_2688 type-name_2689 vector?_2690 unsafe-vector-length_2691 vec_2692 start_2693 stop_2694 step_2695)"
"(begin"
"(if(vector?_2690 vec_2692)(void)(let-values()(raise-argument-error who_2688 type-name_2689 vec_2692)))"
"(let-values(((len_2696)(unsafe-vector-length_2691 vec_2692)))"
"(let-values(((stop*_2697)(if stop_2694 stop_2694 len_2696)))"
"(begin"
"(check-ranges who_2688 vec_2692 start_2693 stop*_2697 step_2695 len_2696)"
"(values vec_2692 start_2693 stop*_2697 step_2695)))))))"
"(define-values"
"(:vector-gen)"
"(lambda(v_2698 start_2699 stop_2700 step_2701)"
"(values"
"(lambda(i_2702)(unsafe-vector-ref v_2698 i_2702))"
"(if(= step_2701 1) add1(lambda(i_2703)(+ i_2703 step_2701)))"
" start_2699"
"(if(> step_2701 0)(lambda(i_2704)(< i_2704 stop_2700))(lambda(i_2705)(> i_2705 stop_2700)))"
" #f"
" #f)))"
"(define-values"
"(in-vector)"
"(case-lambda"
"((v_2706)(in-vector v_2706 0 #f 1))"
"((v_2707 start_2708)(in-vector v_2707 start_2708 #f 1))"
"((v_2709 start_2710 stop_2711)(in-vector v_2709 start_2710 stop_2711 1))"
"((v_2712 start_2713 stop_2714 step_2715)"
"(let-values(((v_2716 start_2717 stop_2718 step_2719)"
"                  (normalise-inputs 'in-vector \"vector\" vector? vector-length v_2712 start_2713 stop_2714 step_2715)))"
"(make-do-sequence(lambda()(:vector-gen v_2716 start_2717 stop_2718 step_2719)))))))"
"(define-values"
"(:string-gen)"
"(lambda(v_2720 start_2721 stop_2722 step_2723)"
"(values"
"(lambda(i_2724)(string-ref v_2720 i_2724))"
"(if(= step_2723 1) add1(lambda(i_2725)(+ i_2725 step_2723)))"
" start_2721"
"(if(> step_2723 0)(lambda(i_2726)(< i_2726 stop_2722))(lambda(i_2727)(> i_2727 stop_2722)))"
" #f"
" #f)))"
"(define-values"
"(in-string)"
"(case-lambda"
"((v_2728)(in-string v_2728 0 #f 1))"
"((v_2729 start_2730)(in-string v_2729 start_2730 #f 1))"
"((v_2731 start_2732 stop_2733)(in-string v_2731 start_2732 stop_2733 1))"
"((v_2734 start_2735 stop_2736 step_2737)"
"(let-values(((v_2738 start_2739 stop_2740 step_2741)"
"                  (normalise-inputs 'in-string \"string\" string? string-length v_2734 start_2735 stop_2736 step_2737)))"
"(make-do-sequence(lambda()(:string-gen v_2738 start_2739 stop_2740 step_2741)))))))"
"(define-values"
"(:bytes-gen)"
"(lambda(v_2742 start_2743 stop_2744 step_2745)"
"(values"
"(lambda(i_2746)(unsafe-bytes-ref v_2742 i_2746))"
"(if(= step_2745 1) add1(lambda(i_2747)(+ i_2747 step_2745)))"
" start_2743"
"(if(> step_2745 0)(lambda(i_2748)(< i_2748 stop_2744))(lambda(i_2749)(> i_2749 stop_2744)))"
" #f"
" #f)))"
"(define-values"
"(in-bytes)"
"(case-lambda"
"((v_2750)(in-bytes v_2750 0 #f 1))"
"((v_2751 start_2752)(in-bytes v_2751 start_2752 #f 1))"
"((v_2753 start_2754 stop_2755)(in-bytes v_2753 start_2754 stop_2755 1))"
"((v_2756 start_2757 stop_2758 step_2759)"
"(let-values(((v_2760 start_2761 stop_2762 step_2763)"
"                  (normalise-inputs 'in-bytes \"bytes\" bytes? bytes-length v_2756 start_2757 stop_2758 step_2759)))"
"(make-do-sequence(lambda()(:bytes-gen v_2760 start_2761 stop_2762 step_2763)))))))"
"(define-values"
"(:flvector-gen)"
"(lambda(v_2764 start_2765 stop_2766 step_2767)"
"(values"
"(lambda(i_2768)(unsafe-flvector-ref v_2764 i_2768))"
"(if(= step_2767 1) add1(lambda(i_2769)(+ i_2769 step_2767)))"
" start_2765"
"(if(> step_2767 0)(lambda(i_2770)(< i_2770 stop_2766))(lambda(i_2771)(> i_2771 stop_2766)))"
" #f"
" #f)))"
"(define-values"
"(:fxvector-gen)"
"(lambda(v_2772 start_2773 stop_2774 step_2775)"
"(values"
"(lambda(i_2776)(unsafe-fxvector-ref v_2772 i_2776))"
"(if(= step_2775 1) add1(lambda(i_2777)(+ i_2777 step_2775)))"
" start_2773"
"(if(> step_2775 0)(lambda(i_2778)(< i_2778 stop_2774))(lambda(i_2779)(> i_2779 stop_2774)))"
" #f"
" #f)))"
"(define-values"
"(in-value)"
"(lambda(v_2817)"
"(make-do-sequence"
"(lambda()(values(lambda(pos_2818) v_2817)(lambda(pos_2819) #f) #t(lambda(pos_2820) pos_2820) void void)))))"
"(define-values"
"(struct:do-stream make-do-stream do-stream? do-stream-ref do-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2940)((do-stream-ref v_2940 0)))"
"(lambda(v_2941)((do-stream-ref v_2941 1)))"
"(lambda(v_2942)((do-stream-ref v_2942 2))))))))"
"(define-values"
"(grow-vector)"
"(lambda(vec_2985)"
"(let-values(((n_2986)(vector-length vec_2985)))"
"(let-values(((new-vec_2987)(make-vector(* 2 n_2986))))"
"(begin(vector-copy! new-vec_2987 0 vec_2985 0 n_2986) new-vec_2987)))))"
"(define-values"
"(shrink-vector)"
"(lambda(vec_2988 i_2989)"
"(let-values(((new-vec_2990)(make-vector i_2989)))"
"(begin(vector-copy! new-vec_2990 0 vec_2988 0 i_2989) new-vec_2990))))"
"(void)"
"(void)"
"(define-values"
"(map2)"
"(let-values(((map_1)"
"(case-lambda"
"((f_2 l_3)"
"(if(if(procedure? f_2)(if(procedure-arity-includes? f_2 1)(list? l_3) #f) #f)"
"((letrec-values(((loop_4)"
"(lambda(l_5)"
"(if(null? l_5)"
"(let-values() null)"
"(let-values()(cons(f_2(car l_5))(loop_4(cdr l_5))))))))"
" loop_4)"
" l_3)"
"(map f_2 l_3)))"
"((f_6 l1_7 l2_8)"
"(if(if(procedure? f_6)"
"(if(procedure-arity-includes? f_6 2)"
"(if(list? l1_7)(if(list? l2_8)(=(length l1_7)(length l2_8)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_9)"
"(lambda(l1_10 l2_11)"
"(if(null? l1_10)"
"(let-values() null)"
"(let-values()"
"(cons(f_6(car l1_10)(car l2_11))(loop_9(cdr l1_10)(cdr l2_11))))))))"
" loop_9)"
" l1_7"
" l2_8)"
"(map f_6 l1_7 l2_8)))"
"((f_12 l_13 . args_14)(apply map f_12 l_13 args_14)))))"
" map_1))"
"(define-values"
"(for-each2)"
"(let-values(((for-each_15)"
"(case-lambda"
"((f_16 l_17)"
"(if(if(procedure? f_16)(if(procedure-arity-includes? f_16 1)(list? l_17) #f) #f)"
"((letrec-values(((loop_18)"
"(lambda(l_19)"
"(if(null? l_19)"
"(let-values()(void))"
"(let-values()(begin(f_16(car l_19))(loop_18(cdr l_19))))))))"
" loop_18)"
" l_17)"
"(for-each f_16 l_17)))"
"((f_20 l1_21 l2_22)"
"(if(if(procedure? f_20)"
"(if(procedure-arity-includes? f_20 2)"
"(if(list? l1_21)(if(list? l2_22)(=(length l1_21)(length l2_22)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_23)"
"(lambda(l1_24 l2_25)"
"(if(null? l1_24)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(f_20(car l1_24)(car l2_25))"
"(loop_23(cdr l1_24)(cdr l2_25))))))))"
" loop_23)"
" l1_21"
" l2_22)"
"(for-each f_20 l1_21 l2_22)))"
"((f_26 l_27 . args_28)(apply for-each f_26 l_27 args_28)))))"
" for-each_15))"
"(define-values"
"(andmap2)"
"(let-values(((andmap_29)"
"(case-lambda"
"((f_30 l_31)"
"(if(if(procedure? f_30)(if(procedure-arity-includes? f_30 1)(list? l_31) #f) #f)"
"(if(null? l_31)"
" #t"
"((letrec-values(((loop_32)"
"(lambda(l_33)"
"(if(null?(cdr l_33))"
"(let-values()(f_30(car l_33)))"
"(let-values()(if(f_30(car l_33))(loop_32(cdr l_33)) #f))))))"
" loop_32)"
" l_31))"
"(andmap f_30 l_31)))"
"((f_34 l1_35 l2_36)"
"(if(if(procedure? f_34)"
"(if(procedure-arity-includes? f_34 2)"
"(if(list? l1_35)(if(list? l2_36)(=(length l1_35)(length l2_36)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_35)"
" #t"
"((letrec-values(((loop_37)"
"(lambda(l1_38 l2_39)"
"(if(null?(cdr l1_38))"
"(let-values()(f_34(car l1_38)(car l2_39)))"
"(let-values()"
"(if(f_34(car l1_38)(car l2_39))"
"(loop_37(cdr l1_38)(cdr l2_39))"
" #f))))))"
" loop_37)"
" l1_35"
" l2_36))"
"(andmap f_34 l1_35 l2_36)))"
"((f_40 l_41 . args_42)(apply andmap f_40 l_41 args_42)))))"
" andmap_29))"
"(define-values"
"(ormap2)"
"(let-values(((ormap_43)"
"(case-lambda"
"((f_44 l_45)"
"(if(if(procedure? f_44)(if(procedure-arity-includes? f_44 1)(list? l_45) #f) #f)"
"(if(null? l_45)"
" #f"
"((letrec-values(((loop_46)"
"(lambda(l_47)"
"(if(null?(cdr l_47))"
"(let-values()(f_44(car l_47)))"
"(let-values()"
"(let-values(((or-part_48)(f_44(car l_47))))"
"(if or-part_48 or-part_48(loop_46(cdr l_47)))))))))"
" loop_46)"
" l_45))"
"(ormap f_44 l_45)))"
"((f_49 l1_50 l2_51)"
"(if(if(procedure? f_49)"
"(if(procedure-arity-includes? f_49 2)"
"(if(list? l1_50)(if(list? l2_51)(=(length l1_50)(length l2_51)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_50)"
" #f"
"((letrec-values(((loop_52)"
"(lambda(l1_53 l2_54)"
"(if(null?(cdr l1_53))"
"(let-values()(f_49(car l1_53)(car l2_54)))"
"(let-values()"
"(let-values(((or-part_55)(f_49(car l1_53)(car l2_54))))"
"(if or-part_55 or-part_55(loop_52(cdr l1_53)(cdr l2_54)))))))))"
" loop_52)"
" l1_50"
" l2_51))"
"(ormap f_49 l1_50 l2_51)))"
"((f_56 l_57 . args_58)(apply ormap f_56 l_57 args_58)))))"
" ormap_43))"
"(void)"
"(void)"
"(void)"
"(void)"
"(define-values"
"(new-apply-proc)"
"(make-keyword-procedure"
"(lambda(kws_21 kw-args_22 proc_23 args_24 . rest_25)"
"(keyword-apply proc_23 kws_21 kw-args_22(apply list* args_24 rest_25)))"
" apply))"
"(define-values"
"(new-keyword-apply)"
"(make-keyword-procedure"
"(lambda(kws_26 kw-args_27 proc_28 orig-kws_29 orig-kw-args_30 args_31 . rest_32)"
"(let-values(((kws_33 kw-args_34)"
"((letrec-values(((loop_35)"
"(lambda(kws_36 kw-args_37 kws2_38 kw-args2_39 swapped?_40)"
"(if(null? kws_36)"
"(let-values()(values kws2_38 kw-args2_39))"
"(if(null? kws2_38)"
"(let-values()(values kws_36 kw-args_37))"
"(if(keyword<?(car kws_36)(car kws2_38))"
"(let-values()"
"(let-values(((res-kws_41 res-kw-args_42)"
"(loop_35"
"(cdr kws_36)"
"(cdr kw-args_37)"
" kws2_38"
" kw-args2_39"
" #f)))"
"(values"
"(cons(car kws_36) res-kws_41)"
"(cons(car kw-args_37) res-kw-args_42))))"
"(if swapped?_40"
"(let-values()"
"(raise-mismatch-error"
" 'keyword-apply"
"                                                  \"keyword duplicated in list and direct keyword arguments: \""
"(car kws_36)))"
"(let-values()(loop_35 kws2_38 kw-args2_39 kws_36 kw-args_37 #t)))))))))"
" loop_35)"
" kws_26"
" kw-args_27"
" orig-kws_29"
" orig-kw-args_30"
" #f)))"
"(keyword-apply proc_28 kws_33 kw-args_34(apply list* args_31 rest_32))))"
" keyword-apply))"
"(void)"
"(void)"
"(define-values"
"(hash-keys)"
"(lambda(h_1)"
"((letrec-values(((loop_2)"
"(lambda(pos_3)"
"(if pos_3(cons(hash-iterate-key h_1 pos_3)(loop_2(hash-iterate-next h_1 pos_3))) null))))"
" loop_2)"
"(hash-iterate-first h_1))))"
"(void)"
"(void)"
"(define-values"
"(sort7.1)"
"(lambda(cache-keys?2_1 cache-keys?4_2 key1_3 key3_4 lst5_5 less?6_6)"
"(let-values(((lst_7) lst5_5))"
"(let-values(((less?_8) less?6_6))"
"(let-values(((getkey_9)(if key3_4 key1_3 #f)))"
"(let-values(((cache-keys?_10)(if cache-keys?4_2 cache-keys?2_1 #f)))"
"(let-values()"
"(begin"
"                (if (list? lst_7) (void) (let-values () (raise-argument-error 'sort \"list?\" lst_7)))"
"(if(if(procedure? less?_8)(procedure-arity-includes? less?_8 2) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'sort \"(any/c any/c . -> . any/c)\" less?_8)))"
"(if(if getkey_9(not(if(procedure? getkey_9)(procedure-arity-includes? getkey_9 1) #f)) #f)"
"                  (let-values () (raise-argument-error 'sort \"(any/c . -> . any/c)\" getkey_9))"
"(void))"
"(if getkey_9(sort lst_7 less?_8 getkey_9 cache-keys?_10)(sort lst_7 less?_8))))))))))"
" (define-values (bad-list) (lambda (who_76 orig-l_77) (raise-mismatch-error who_76 \"not a proper list: \" orig-l_77)))"
"(define-values"
"(bad-item)"
"  (lambda (who_78 a_79 orig-l_80) (raise-mismatch-error who_78 \"non-pair found in list: \" a_79 \" in \" orig-l_80)))"
"(define-values"
"(1/assq 1/assv 1/assoc assf)"
"(let-values()"
"(let-values()"
"(let-values(((assq_97)"
"(lambda(x_101 l_102)"
"((letrec-values(((loop_103)"
"(lambda(l_104 t_105)"
"(if(pair? l_104)"
"(let-values()"
"(let-values(((a_106)(unsafe-car l_104)))"
"(if(pair? a_106)"
"(if(eq? x_101(unsafe-car a_106))"
" a_106"
"(let-values(((l_107)(unsafe-cdr l_104)))"
"(if(pair? l_107)"
"(let-values()"
"(let-values(((a_108)(unsafe-car l_107)))"
"(if(pair? a_108)"
"(if(eq? x_101(unsafe-car a_108))"
" a_108"
"(let-values(((t_109)(unsafe-cdr t_105))"
"((l_110)(unsafe-cdr l_107)))"
"(if(eq? l_110 t_109)"
"(bad-list 'assq l_102)"
"(loop_103 l_110 t_109))))"
"(bad-item 'assq a_108 l_102))))"
"(if(null? l_107)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102))))))"
"(bad-item 'assq a_106 l_102))))"
"(if(null? l_104)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102)))))))"
" loop_103)"
" l_102"
" l_102)))"
"((assv_98)"
"(lambda(x_111 l_112)"
"((letrec-values(((loop_113)"
"(lambda(l_114 t_115)"
"(if(pair? l_114)"
"(let-values()"
"(let-values(((a_116)(unsafe-car l_114)))"
"(if(pair? a_116)"
"(if(eqv? x_111(unsafe-car a_116))"
" a_116"
"(let-values(((l_117)(unsafe-cdr l_114)))"
"(if(pair? l_117)"
"(let-values()"
"(let-values(((a_118)(unsafe-car l_117)))"
"(if(pair? a_118)"
"(if(eqv? x_111(unsafe-car a_118))"
" a_118"
"(let-values(((t_119)(unsafe-cdr t_115))"
"((l_120)(unsafe-cdr l_117)))"
"(if(eq? l_120 t_119)"
"(bad-list 'assv l_112)"
"(loop_113 l_120 t_119))))"
"(bad-item 'assv a_118 l_112))))"
"(if(null? l_117)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112))))))"
"(bad-item 'assv a_116 l_112))))"
"(if(null? l_114)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112)))))))"
" loop_113)"
" l_112"
" l_112)))"
"((assoc_99)"
"(case-lambda"
"((x_121 l_122)"
"((letrec-values(((loop_123)"
"(lambda(l_124 t_125)"
"(if(pair? l_124)"
"(let-values()"
"(let-values(((a_126)(unsafe-car l_124)))"
"(if(pair? a_126)"
"(if(equal? x_121(unsafe-car a_126))"
" a_126"
"(let-values(((l_127)(unsafe-cdr l_124)))"
"(if(pair? l_127)"
"(let-values()"
"(let-values(((a_128)(unsafe-car l_127)))"
"(if(pair? a_128)"
"(if(equal? x_121(unsafe-car a_128))"
" a_128"
"(let-values(((t_129)(unsafe-cdr t_125))"
"((l_130)(unsafe-cdr l_127)))"
"(if(eq? l_130 t_129)"
"(bad-list 'assoc l_122)"
"(loop_123 l_130 t_129))))"
"(bad-item 'assoc a_128 l_122))))"
"(if(null? l_127)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122))))))"
"(bad-item 'assoc a_126 l_122))))"
"(if(null? l_124)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122)))))))"
" loop_123)"
" l_122"
" l_122))"
"((x_131 l_132 is-equal?_133)"
"(begin"
"(if(if(procedure? is-equal?_133)(procedure-arity-includes? is-equal?_133 2) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assoc \"(any/c any/c . -> . any/c)\" is-equal?_133)))"
"((letrec-values(((loop_134)"
"(lambda(l_135 t_136)"
"(if(pair? l_135)"
"(let-values()"
"(let-values(((a_137)(unsafe-car l_135)))"
"(if(pair? a_137)"
"(if(is-equal?_133 x_131(unsafe-car a_137))"
" a_137"
"(let-values(((l_138)(unsafe-cdr l_135)))"
"(if(pair? l_138)"
"(let-values()"
"(let-values(((a_139)(unsafe-car l_138)))"
"(if(pair? a_139)"
"(if(is-equal?_133 x_131(unsafe-car a_139))"
" a_139"
"(let-values(((t_140)(unsafe-cdr t_136))"
"((l_141)(unsafe-cdr l_138)))"
"(if(eq? l_141 t_140)"
"(bad-list 'assoc l_132)"
"(loop_134 l_141 t_140))))"
"(bad-item 'assoc a_139 l_132))))"
"(if(null? l_138)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132))))))"
"(bad-item 'assoc a_137 l_132))))"
"(if(null? l_135)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132)))))))"
" loop_134)"
" l_132"
" l_132)))))"
"((assf_100)"
"(lambda(f_142 l_143)"
"(begin"
"(if(if(procedure? f_142)(procedure-arity-includes? f_142 1) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assf \"(any/c any/c . -> . any/c)\" f_142)))"
"((letrec-values(((loop_144)"
"(lambda(l_145 t_146)"
"(if(pair? l_145)"
"(let-values()"
"(let-values(((a_147)(unsafe-car l_145)))"
"(if(pair? a_147)"
"(if((lambda(__148 a_149)(f_142 a_149)) #f(unsafe-car a_147))"
" a_147"
"(let-values(((l_150)(unsafe-cdr l_145)))"
"(if(pair? l_150)"
"(let-values()"
"(let-values(((a_151)(unsafe-car l_150)))"
"(if(pair? a_151)"
"(if((lambda(__152 a_153)(f_142 a_153))"
" #f"
"(unsafe-car a_151))"
" a_151"
"(let-values(((t_154)(unsafe-cdr t_146))"
"((l_155)(unsafe-cdr l_150)))"
"(if(eq? l_155 t_154)"
"(bad-list 'assf l_143)"
"(loop_144 l_155 t_154))))"
"(bad-item 'assf a_151 l_143))))"
"(if(null? l_150)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143))))))"
"(bad-item 'assf a_147 l_143))))"
"(if(null? l_145)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143)))))))"
" loop_144)"
" l_143"
" l_143)))))"
"(values assq_97 assv_98 assoc_99 assf_100)))))"
"(define-values"
"(filter)"
"(lambda(f_195 list_196)"
"(begin"
"(if(if(procedure? f_195)(procedure-arity-includes? f_195 1) #f)"
"(void)"
"        (let-values () (raise-argument-error 'filter \"(any/c . -> . any/c)\" f_195)))"
"      (if (list? list_196) (void) (let-values () (raise-argument-error 'filter \"list?\" list_196)))"
"((letrec-values(((loop_197)"
"(lambda(l_198 result_199)"
"(if(null? l_198)"
"(alt-reverse result_199)"
"(loop_197(cdr l_198)(if(f_195(car l_198))(cons(car l_198) result_199) result_199))))))"
" loop_197)"
" list_196"
" null))))"
"(void)"
"(void)"
"(define-values"
"(make-regexp-tweaker)"
"(lambda(tweaker_61)"
"(let-values(((t_62)(make-hash)))"
"(lambda(rx_63 n_64)"
"(let-values(((run-tweak_110)"
"(lambda()"
"(if(pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_111)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_112)(regexp? tweaked_111)))"
"(if or-part_112 or-part_112(byte-regexp? tweaked_111)))"
" tweaked_111"
"(pregexp(if(bytes? tweaked_111)(bytes->string/utf-8 tweaked_111) tweaked_111)))))"
"(if(regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_113)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_114)(regexp? tweaked_113)))"
"(if or-part_114 or-part_114(byte-regexp? tweaked_113)))"
" tweaked_113"
"(regexp(if(bytes? tweaked_113)(bytes->string/utf-8 tweaked_113) tweaked_113)))))"
"(if(byte-pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_115)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_116)(regexp? tweaked_115)))"
"(if or-part_116 or-part_116(byte-regexp? tweaked_115)))"
" tweaked_115"
"(byte-pregexp"
"(if(bytes? tweaked_115) tweaked_115(string->bytes/utf-8 tweaked_115))))))"
"(if(byte-regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_117)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_118)(regexp? tweaked_117)))"
"(if or-part_118 or-part_118(byte-regexp? tweaked_117)))"
" tweaked_117"
"(byte-regexp"
"(if(bytes? tweaked_117) tweaked_117(string->bytes/utf-8 tweaked_117))))))"
"(if(string? rx_63)"
"(let-values()"
"(let-values(((tweaked_119)(tweaker_61((lambda(x_120) x_120) rx_63) n_64)))"
"(if(let-values(((or-part_121)(regexp? tweaked_119)))"
"(if or-part_121 or-part_121(byte-regexp? tweaked_119)))"
" tweaked_119"
"(regexp"
"(if(bytes? tweaked_119)(bytes->string/utf-8 tweaked_119) tweaked_119)))))"
"(if(bytes? rx_63)"
"(let-values()"
"(let-values(((tweaked_122)(tweaker_61((lambda(x_123) x_123) rx_63) n_64)))"
"(if(let-values(((or-part_124)(regexp? tweaked_122)))"
"(if or-part_124 or-part_124(byte-regexp? tweaked_122)))"
" tweaked_122"
"(byte-regexp"
"(if(bytes? tweaked_122) tweaked_122(string->bytes/utf-8 tweaked_122))))))"
"(let-values()"
"(raise-argument-error"
" 'regexp-tweaker"
"                                       \"(or/c regexp? byte-regexp? string? bytes?)\""
" rx_63)))))))))))"
"(let-values(((key_125)(cons n_64 rx_63)))"
"(let-values(((or-part_126)(hash-ref t_62 key_125 #f)))"
"(if or-part_126"
" or-part_126"
"(let-values(((rx*_127)(run-tweak_110)))(begin(hash-set! t_62 key_125 rx*_127) rx*_127))))))))))"
"(define-values"
"(no-empty-edge-matches)"
"(make-regexp-tweaker"
"(lambda(rx_172 n_173)"
"(if(bytes? rx_172)"
"       (bytes-append #\"(?:\" rx_172 #\")(?<=\" (make-bytes n_173 (char->integer '#\\.)) #\")\")"
"       (format \"(?:~a)(?<=~a)\" rx_172 (make-bytes n_173 (char->integer '#\\.)))))))"
"(void)"
"(void)"
" (define-values (binary-or-text-desc) \"(or/c 'binary 'text)\")"
"(define-values"
"(open-input-file6.1)"
"(lambda(for-module?2_1 for-module?4_2 mode1_3 mode3_4 path5_5)"
"(let-values(((path_6) path5_5))"
"(let-values(((mode_7)(if mode3_4 mode1_3 'binary)))"
"(let-values(((for-module?_8)(if for-module?4_2 for-module?2_1 #f)))"
"(let-values()"
"(begin"
"(if(path-string? path_6)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-file \"path-string?\" path_6)))"
"(if(memq mode_7 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-file binary-or-text-desc mode_7)))"
"(open-input-file path_6 mode_7(if for-module?_8 'module 'none)))))))))"
"(define-values"
"(call-with-input-file*61.1)"
"(lambda(mode57_199 mode58_200 path59_201 proc60_202)"
"(let-values(((path_203) path59_201))"
"(let-values(((proc_204) proc60_202))"
"(let-values(((mode_205)(if mode58_200 mode57_199 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_203)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"path-string?\" path_203)))"
"(if(if(procedure? proc_204)(procedure-arity-includes? proc_204 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"(input-port? . -> . any)\" proc_204)))"
"(if(memq mode_205 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file* binary-or-text-desc mode_205)))"
"(let-values(((p_206)(open-input-file path_203 mode_205)))"
"(dynamic-wind void(lambda()(proc_204 p_206))(lambda()(close-input-port p_206)))))))))))"
"(void)"
"(void)"
"(define-values(the-empty-hash) '#hash())"
"(define-values(the-empty-hasheq) '#hasheq())"
"(define-values(the-empty-hasheqv) '#hasheqv())"
"(define-values"
"(set)"
"(case-lambda"
"(() the-empty-hash)"
"(l_71"
"(let-values(((lst_72) l_71))"
"(begin"
"(if(list? lst_72)(void)(let-values()(in-list lst_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(s_74 lst_75)"
"(if(pair? lst_75)"
"(let-values(((e_76)(unsafe-car lst_75)))"
"(let-values(((s_77)"
"(let-values(((s_78) s_74))"
"(let-values(((s_79)(let-values()(hash-set s_78 e_76 #t))))"
"(values s_79)))))"
"(for-loop_73 s_77(unsafe-cdr lst_75))))"
" s_74))))"
" for-loop_73)"
" the-empty-hash"
" lst_72))))))"
"(define-values"
"(seteq)"
"(case-lambda"
"(() the-empty-hasheq)"
"(l_80"
"(let-values(((lst_81) l_80))"
"(begin"
"(if(list? lst_81)(void)(let-values()(in-list lst_81)))"
"((letrec-values(((for-loop_82)"
"(lambda(s_83 lst_84)"
"(if(pair? lst_84)"
"(let-values(((e_85)(unsafe-car lst_84)))"
"(let-values(((s_86)"
"(let-values(((s_87) s_83))"
"(let-values(((s_88)(let-values()(hash-set s_87 e_85 #t))))"
"(values s_88)))))"
"(for-loop_82 s_86(unsafe-cdr lst_84))))"
" s_83))))"
" for-loop_82)"
" the-empty-hasheq"
" lst_81))))))"
"(define-values(seteqv)(lambda() the-empty-hasheqv))"
"(define-values(set?)(lambda(s_89)(hash? s_89)))"
"(define-values(set-empty?)(lambda(s_90)(zero?(hash-count s_90))))"
"(define-values(set-member?)(lambda(s_91 e_92)(hash-ref s_91 e_92 #f)))"
"(define-values(set-count)(lambda(s_93)(hash-count s_93)))"
"(define-values(set-add)(lambda(s_94 e_95)(hash-set s_94 e_95 #t)))"
"(define-values(set-remove)(lambda(s_96 e_97)(hash-remove s_96 e_97)))"
"(define-values(set-first)(lambda(s_98)(hash-iterate-key s_98(hash-iterate-first s_98))))"
"(define-values(subset?)(lambda(s1_99 s2_100)(hash-keys-subset? s1_99 s2_100)))"
"(define-values"
"(set=?)"
"(lambda(s1_101 s2_102)"
"(let-values(((or-part_103)(eq? s1_101 s2_102)))"
"(if or-part_103"
" or-part_103"
"(if(=(hash-count s1_101)(hash-count s2_102))(hash-keys-subset? s1_101 s2_102) #f)))))"
"(define-values"
"(set-subtract)"
"(lambda(s1_104 s2_105)"
"(let-values(((ht_106) s2_105))"
"(begin"
"(if((lambda(ht_107)(if(hash? ht_107)(immutable? ht_107) #f)) ht_106)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_106)))"
"((letrec-values(((for-loop_108)"
"(lambda(s1_109 i_110)"
"(if i_110"
"(let-values(((k_111)(unsafe-immutable-hash-iterate-key ht_106 i_110)))"
"(let-values(((s1_112)"
"(let-values(((s1_113) s1_109))"
"(let-values(((s1_114)(let-values()(hash-remove s1_113 k_111))))"
"(values s1_114)))))"
"(for-loop_108 s1_112(unsafe-immutable-hash-iterate-next ht_106 i_110))))"
" s1_109))))"
" for-loop_108)"
" s1_104"
"(unsafe-immutable-hash-iterate-first ht_106))))))"
"(define-values"
"(set-union)"
"(lambda(s1_115 s2_116)"
"(if(<(set-count s1_115)(set-count s2_116))"
"(set-union s2_116 s1_115)"
"(let-values(((ht_117) s2_116))"
"(begin"
"(if((lambda(ht_118)(if(hash? ht_118)(immutable? ht_118) #f)) ht_117)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_117)))"
"((letrec-values(((for-loop_119)"
"(lambda(s1_120 i_121)"
"(if i_121"
"(let-values(((k_122)(unsafe-immutable-hash-iterate-key ht_117 i_121)))"
"(let-values(((s1_123)"
"(let-values(((s1_124) s1_120))"
"(let-values(((s1_125)(let-values()(hash-set s1_124 k_122 #t))))"
"(values s1_125)))))"
"(for-loop_119 s1_123(unsafe-immutable-hash-iterate-next ht_117 i_121))))"
" s1_120))))"
" for-loop_119)"
" s1_115"
"(unsafe-immutable-hash-iterate-first ht_117)))))))"
"(define-values"
"(set-intersect)"
"(lambda(s1_126 s2_127)"
"(if(<(set-count s1_126)(set-count s2_127))"
"(set-intersect s2_127 s1_126)"
"(let-values(((ht_128) s2_127))"
"(begin"
"(if((lambda(ht_129)(if(hash? ht_129)(immutable? ht_129) #f)) ht_128)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_128)))"
"((letrec-values(((for-loop_130)"
"(lambda(s_131 i_132)"
"(if i_132"
"(let-values(((k_133)(unsafe-immutable-hash-iterate-key ht_128 i_132)))"
"(let-values(((s_134)"
"(let-values(((s_135) s_131))"
"(let-values(((s_136)"
"(let-values()"
"(if(hash-ref s1_126 k_133 #f)"
" s_135"
"(hash-remove s_135 k_133)))))"
"(values s_136)))))"
"(for-loop_130 s_134(unsafe-immutable-hash-iterate-next ht_128 i_132))))"
" s_131))))"
" for-loop_130)"
" s2_127"
"(unsafe-immutable-hash-iterate-first ht_128)))))))"
"(define-values"
"(set-partition)"
"(lambda(s_137 pred_138 empty-y-set_139 empty-n-set_140)"
"(let-values(((ht_141) s_137))"
"(begin"
"(if((lambda(ht_142)(if(hash? ht_142)(immutable? ht_142) #f)) ht_141)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_141)))"
"((letrec-values(((for-loop_143)"
"(lambda(y_144 n_145 i_146)"
"(if i_146"
"(let-values(((v_147)(unsafe-immutable-hash-iterate-key ht_141 i_146)))"
"(let-values(((y_148 n_149)"
"(let-values(((y_150) y_144)((n_151) n_145))"
"(let-values(((y_152 n_153)"
"(let-values()"
"(if(pred_138 v_147)"
"(values(set-add y_150 v_147) n_151)"
"(values y_150(set-add n_151 v_147))))))"
"(values y_152 n_153)))))"
"(for-loop_143 y_148 n_149(unsafe-immutable-hash-iterate-next ht_141 i_146))))"
"(values y_144 n_145)))))"
" for-loop_143)"
" empty-y-set_139"
" empty-n-set_140"
"(unsafe-immutable-hash-iterate-first ht_141))))))"
"(define-values"
"(set->list)"
"(lambda(s_154)"
"(alt-reverse"
"(let-values(((ht_155) s_154))"
"(begin"
"(if((lambda(ht_156)(if(hash? ht_156)(immutable? ht_156) #f)) ht_155)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_155)))"
"((letrec-values(((for-loop_157)"
"(lambda(fold-var_158 i_159)"
"(if i_159"
"(let-values(((k_160)(unsafe-immutable-hash-iterate-key ht_155 i_159)))"
"(let-values(((fold-var_161)"
"(let-values(((fold-var_162) fold-var_158))"
"(let-values(((fold-var_163)"
"(let-values()"
"(cons(let-values() k_160) fold-var_162))))"
"(values fold-var_163)))))"
"(for-loop_157 fold-var_161(unsafe-immutable-hash-iterate-next ht_155 i_159))))"
" fold-var_158))))"
" for-loop_157)"
" null"
"(unsafe-immutable-hash-iterate-first ht_155)))))))"
"(define-values"
"(list->set)"
"(lambda(l_164)"
"(let-values(((lst_165) l_164))"
"(begin"
"(if(list? lst_165)(void)(let-values()(in-list lst_165)))"
"((letrec-values(((for-loop_166)"
"(lambda(table_167 lst_168)"
"(if(pair? lst_168)"
"(let-values(((k_169)(unsafe-car lst_168)))"
"(let-values(((table_170)"
"(let-values(((table_171) table_167))"
"(let-values(((table_172)"
"(let-values()"
"(let-values(((key_173 val_174)"
"(let-values()"
"(values(let-values() k_169) #t))))"
"(hash-set table_171 key_173 val_174)))))"
"(values table_172)))))"
"(for-loop_166 table_170(unsafe-cdr lst_168))))"
" table_167))))"
" for-loop_166)"
" '#hash()"
" lst_165)))))"
"(define-values"
"(list->seteq)"
"(lambda(l_175)"
"(let-values(((lst_176) l_175))"
"(begin"
"(if(list? lst_176)(void)(let-values()(in-list lst_176)))"
"((letrec-values(((for-loop_177)"
"(lambda(table_178 lst_179)"
"(if(pair? lst_179)"
"(let-values(((k_180)(unsafe-car lst_179)))"
"(let-values(((table_181)"
"(let-values(((table_182) table_178))"
"(let-values(((table_183)"
"(let-values()"
"(let-values(((key_184 val_185)"
"(let-values()"
"(values(let-values() k_180) #t))))"
"(hash-set table_182 key_184 val_185)))))"
"(values table_183)))))"
"(for-loop_177 table_181(unsafe-cdr lst_179))))"
" table_178))))"
" for-loop_177)"
" '#hasheq()"
" lst_176)))))"
"(void)"
"(void)"
"(define-values(prop:serialize serialize? serialize-ref)(make-struct-type-property 'serialize))"
"(define-values"
"(prop:serialize-fill! serialize-fill!? serialize-fill!-ref)"
"(make-struct-type-property 'serialize-fill!))"
"(define-values(prop:reach-scopes reach-scopes? reach-scopes-ref)(make-struct-type-property 'reach-scopes))"
"(define-values"
"(prop:scope-with-bindings scope-with-bindings? scope-with-bindings-ref)"
"(make-struct-type-property 'scope-with-bindings))"
"(define-values"
"(prop:binding-reach-scopes binding-reach-scopes? binding-reach-scopes-ref)"
"(make-struct-type-property 'binding-reach-scopes))"
"(void)"
"(void)"
"(define-values"
"(1/module-path?)"
"(lambda(v_1)"
"(let-values(((or-part_2)(if(pair? v_1)(if(eq?(car v_1) 'submod)(submodule-module-path? v_1) #f) #f)))"
"(if or-part_2 or-part_2(root-module-path? v_1)))))"
"(define-values"
"(root-module-path?)"
"(lambda(v_3)"
"(let-values(((or-part_4)(path? v_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(if(string? v_3)(string-module-path? v_3) #f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(if(symbol? v_3)(symbol-module-path? v_3) #f)))"
"(if or-part_6"
" or-part_6"
"(if(pair? v_3)"
"(let-values(((tmp_7)(car v_3)))"
"(if(equal? tmp_7 'quote)"
"(let-values()(if(pair?(cdr v_3))(if(symbol?(cadr v_3))(null?(cddr v_3)) #f) #f))"
"(if(equal? tmp_7 'lib)"
"(let-values()(lib-module-path? v_3))"
"(if(equal? tmp_7 'file)"
"(let-values()"
"(if(pair?(cdr v_3))"
"(if(string?(cadr v_3))(if(path-string?(cadr v_3))(null?(cddr v_3)) #f) #f)"
" #f))"
"(if(equal? tmp_7 'planet)(let-values()(planet-module-path? v_3))(let-values() #f))))))"
" #f)))))))))"
"(define-values"
"(submodule-module-path?)"
"(lambda(v_8)"
"(if(pair?(cdr v_8))"
"(if(list? v_8)"
"        (if (let-values (((or-part_9) (equal? (cadr v_8) \"..\")))"
"(if or-part_9"
" or-part_9"
"                (let-values (((or-part_10) (equal? (cadr v_8) \".\")))"
"(if or-part_10 or-part_10(root-module-path?(cadr v_8))))))"
"(let-values(((lst_11)(cddr v_8)))"
"(begin"
"(if(list? lst_11)(void)(let-values()(in-list lst_11)))"
"((letrec-values(((for-loop_12)"
"(lambda(result_13 lst_14)"
"(if(pair? lst_14)"
"(let-values(((e_15)(unsafe-car lst_14)))"
"(let-values(((result_16)"
"(let-values()"
"(let-values(((result_18)"
"(let-values()"
"(let-values()"
"                                                                        (let-values (((or-part_19) (equal? e_15 \"..\")))"
"(if or-part_19 or-part_19(symbol? e_15)))))))"
"(values result_18)))))"
"(if(not((lambda x_20(not result_16)) e_15))"
"(for-loop_12 result_16(unsafe-cdr lst_14))"
" result_16)))"
" result_13))))"
" for-loop_12)"
" #t"
" lst_11)))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(string-module-path?)"
"(lambda(v_21)"
"(let-values(((v13_23) v_21)((temp14_24) #t)((temp15_25) #t)((temp16_26) #t))"
"(module-path-string?10.1 temp14_24 #t temp16_26 #t #f #f temp15_25 #t v13_23))))"
"(define-values"
"(symbol-module-path?)"
"(lambda(v_27)"
"(let-values(((temp17_28)(symbol->string v_27)))(module-path-string?10.1 #f #f #f #f #f #f #f #f temp17_28))))"
"(define-values"
"(lib-module-path?)"
"(lambda(v_29)"
"(if(list? v_29)"
"(if(pair?(cdr v_29))"
"((letrec-values(((loop_30)"
"(lambda(v_31 first?_32)"
"(let-values(((or-part_33)(null? v_31)))"
"(if or-part_33"
" or-part_33"
"(if(string?(car v_31))"
"(if(let-values(((temp18_35)(car v_31))"
"((first?19_36) first?_32)"
"((first?20_37) first?_32))"
"(module-path-string?10.1 #f #f first?20_37 #t #f #f first?19_36 #t temp18_35))"
"(loop_30(cdr v_31) #f)"
" #f)"
" #f))))))"
" loop_30)"
"(cdr v_29)"
" #t)"
" #f)"
" #f)))"
"(define-values"
"(planet-module-path?)"
"(lambda(v_38)"
"(if(list? v_38)"
"(let-values(((tmp_39)(length v_38)))"
"(if(equal? tmp_39 1)"
"(let-values() #f)"
"(if(equal? tmp_39 2)"
"(let-values()"
"(let-values(((e_40)(cadr v_38)))"
"(if(string? e_40)"
"(let-values()"
"(let-values(((e21_42) e_40)((temp22_43) #t)((temp23_44) #t))"
"(module-path-string?10.1 #f #f temp23_44 #t temp22_43 #t #f #f e21_42)))"
"(if(symbol? e_40)"
"(let-values()"
"(let-values(((temp24_46)(symbol->string e_40))((temp25_47) #t))"
"(module-path-string?10.1 #f #f #f #f temp25_47 #t #f #f temp24_46)))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((file_48)(cadr v_38)))"
"(let-values(((pkg_49)(caddr v_38)))"
"(let-values(((subs_50)(cdddr v_38)))"
"(if file_48"
"(if(let-values(((file26_52) file_48)((temp27_53) #t)((temp28_54) #t))"
"(module-path-string?10.1 #f #f temp28_54 #t #f #f temp27_53 #t file26_52))"
"(if(if(list? pkg_49)"
"(if(<= 2(length pkg_49) 4)"
"(if(planet-user/pkg-string?(car pkg_49))"
"(if(planet-user/pkg-string?(cadr pkg_49))"
"(let-values(((or-part_55)(null?(cddr pkg_49))))"
"(if or-part_55"
" or-part_55"
"(let-values(((or-part_56)(planet-version-number?(caddr pkg_49))))"
"(if or-part_56"
" or-part_56"
"(let-values(((or-part_57)(null?(cddr pkg_49))))"
"(if or-part_57"
" or-part_57"
"(planet-version-minor-spec?(cadddr pkg_49))))))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values(((lst_58) subs_50))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((sub_62)(unsafe-car lst_61)))"
"(let-values(((result_63)"
"(let-values()"
"(let-values(((result_65)"
"(let-values()"
"(let-values()"
"(let-values(((sub29_66)"
" sub_62))"
"(module-path-string?10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sub29_66))))))"
"(values result_65)))))"
"(if(not((lambda x_67(not result_63)) sub_62))"
"(for-loop_59 result_63(unsafe-cdr lst_61))"
" result_63)))"
" result_60))))"
" for-loop_59)"
" #t"
" lst_58)))"
" #f)"
" #f)"
" #f))))))))"
" #f)))"
"(define-values(planet-version-number?)(lambda(v_68)(exact-nonnegative-integer? v_68)))"
"(define-values"
"(planet-version-minor-spec?)"
"(lambda(v_69)"
"(let-values(((or-part_70)(planet-version-number? v_69)))"
"(if or-part_70"
" or-part_70"
"(if(pair? v_69)"
"(if(list? v_69)"
"(if(= 2(length v_69))"
"(let-values(((tmp_71)(car v_69)))"
"(if(if(equal? tmp_71 '=) #t(if(equal? tmp_71 '+) #t(equal? tmp_71 '-)))"
"(let-values()(planet-version-number?(cadr v_69)))"
"(let-values()(if(planet-version-number?(car v_69))(planet-version-number?(cadr v_69)) #f))))"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(module-path-string?10.1)"
"(lambda(dots-dir-ok?2_72"
" dots-dir-ok?6_73"
" file-end-ok?4_74"
" file-end-ok?8_75"
" for-planet?1_76"
" for-planet?5_77"
" just-file-ok?3_78"
" just-file-ok?7_79"
" v9_80)"
"(let-values(((v_81) v9_80))"
"(let-values(((for-planet?_82)(if for-planet?5_77 for-planet?1_76 #f)))"
"(let-values(((dots-dir-ok?_83)(if dots-dir-ok?6_73 dots-dir-ok?2_72 #f)))"
"(let-values(((just-file-ok?_84)(if just-file-ok?7_79 just-file-ok?3_78 #f)))"
"(let-values(((file-end-ok?_85)(if file-end-ok?8_75 file-end-ok?4_74 #f)))"
"(let-values()"
"(let-values(((len_86)(string-length v_81)))"
"(if(positive? len_86)"
"(if(not(char=? '#\\/(string-ref v_81 0)))"
"(if(not(char=? '#\\/(string-ref v_81(sub1 len_86))))"
"(let-values(((start-package-version-pos_87 end-package-version-pos_88)"
"(if for-planet?_82(check-planet-part v_81 len_86)(values 0 0))))"
"(if start-package-version-pos_87"
"((letrec-values(((loop_89)"
"(lambda(i_90 prev-was-slash?_91 saw-slash?_92 saw-dot?_93)"
"(if(not(zero? i_90))"
"(let-values()"
"(let-values(((c_94)(string-ref v_81 i_90)))"
"(if(char=? c_94 '#\\/)"
"(let-values()"
"(if(not prev-was-slash?_91)"
"(loop_89(sub1 i_90) #t #t saw-dot?_93)"
" #f))"
"(if(char=? c_94 '#\\.)"
"(let-values()"
"(if(if(<(add1 i_90) len_86)"
"(if(not(char=?(string-ref v_81(add1 i_90)) '#\\/))"
"(not(char=?(string-ref v_81(add1 i_90)) '#\\.))"
" #f)"
" #f)"
"(if(not saw-slash?_92)"
"(loop_89(sub1 i_90) #f saw-slash?_92 #t)"
" #f)"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93)))"
"(if(let-values(((or-part_95)(plain-char? c_94)))"
"(if or-part_95"
" or-part_95"
"(if(char=? c_94 '#\\%)"
"(if(<(+ i_90 2) len_86)"
"(hex-sequence? v_81(add1 i_90))"
" #f)"
" #f)))"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(if(if(>= i_90 start-package-version-pos_87)"
"(< i_90 end-package-version-pos_88)"
" #f)"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(let-values() #f)))))))"
"(let-values()"
"(if(not"
"(if(not just-file-ok?_84)"
"(if saw-dot?_93(not saw-slash?_92) #f)"
" #f))"
"(let-values(((or-part_96) dots-dir-ok?_83))"
"(if or-part_96"
" or-part_96"
"((letrec-values(((loop_97)"
"(lambda(i_98)"
"(if(= i_98 len_86)"
"(let-values() #t)"
"(if(char=?(string-ref v_81 i_98) '#\\.)"
"(let-values()"
"(if(not"
"(let-values(((or-part_99)"
"(="
" len_86"
"(add1 i_98))))"
"(if or-part_99"
" or-part_99"
"(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\/))))"
"(if(not"
"(if(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\.)"
"(let-values(((or-part_100)"
"(="
" len_86"
"(+"
" i_98"
" 2))))"
"(if or-part_100"
" or-part_100"
"(char=?"
"(string-ref"
" v_81"
"(+ i_98 2))"
" '#\\/)))"
" #f))"
"(loop_97"
"((letrec-values(((loop_101)"
"(lambda(i_102)"
"(if(char=?"
" '#\\."
"(string-ref"
" v_81"
" i_102))"
"(loop_101"
"(add1"
" i_102))"
" i_102))))"
" loop_101)"
" i_98))"
" #f)"
" #f))"
"(let-values()"
"(loop_97(add1 i_98))))))))"
" loop_97)"
" 0)))"
" #f))))))"
" loop_89)"
"(sub1 len_86)"
" #f"
"(not file-end-ok?_85)"
" #f)"
" #f))"
" #f)"
" #f)"
" #f))))))))))"
"(define-values"
"(planet-user/pkg-string?)"
"(lambda(v_135)"
"(if(string? v_135)"
"(let-values(((len_136)(string-length v_135)))"
"(if(positive? len_136)"
"(let-values(((vec_137 len_138)"
"(let-values(((vec_140) v_135))"
"(begin"
"(if(string? vec_140)(void)(let-values()(in-string vec_140)))"
"(values vec_140(string-length vec_140)))))"
"((start_139) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_139)(void)(let-values()(in-naturals start_139)))"
"((letrec-values(((for-loop_141)"
"(lambda(result_142 pos_143 pos_144)"
"(if(if(unsafe-fx< pos_143 len_138) #t #f)"
"(let-values(((c_145)(string-ref vec_137 pos_143))((i_146) pos_144))"
"(let-values(((result_147)"
"(let-values()"
"(let-values(((result_149)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_150)"
"(plain-char? c_145)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_151)"
"(char=? '#\\. c_145)))"
"(if or-part_151"
" or-part_151"
"(if(char=? '#\\% c_145)"
"(if(< i_146(- len_136 2))"
"(hex-sequence? v_135(add1 i_146))"
" #f)"
" #f)))))))))"
"(values result_149)))))"
"(if(if(not((lambda x_152(not result_147)) c_145))"
"(not((lambda x_153(not result_147)) i_146))"
" #f)"
"(for-loop_141 result_147(unsafe-fx+ 1 pos_143)(+ pos_144 1))"
" result_147)))"
" result_142))))"
" for-loop_141)"
" #t"
" 0"
" start_139)))"
" #f))"
" #f)))"
"(define-values"
"(plain-char?)"
"(lambda(c_154)"
"(let-values(((or-part_155)(char<=? '#\\a c_154 '#\\z)))"
"(if or-part_155"
" or-part_155"
"(let-values(((or-part_156)(char<=? '#\\A c_154 '#\\Z)))"
"(if or-part_156"
" or-part_156"
"(let-values(((or-part_157)(char<=? '#\\0 c_154 '#\\9)))"
"(if or-part_157"
" or-part_157"
"(let-values(((or-part_158)(char=? '#\\- c_154)))"
"(if or-part_158"
" or-part_158"
"(let-values(((or-part_159)(char=? '#\\_ c_154)))"
"(if or-part_159 or-part_159(char=? '#\\+ c_154)))))))))))))"
"(define-values"
"(hex-sequence?)"
"(lambda(s_160 i_161)"
"(let-values(((c1_162)(string-ref s_160 i_161)))"
"(let-values(((c2_163)(string-ref s_160(add1 i_161))))"
"(if(hex-char? c1_162)"
"(if(hex-char? c2_163)"
"(let-values(((c_164)(integer->char(+(*(hex-char->integer c1_162) 16)(hex-char->integer c2_163)))))"
"(not(plain-char? c_164)))"
" #f)"
" #f)))))"
"(define-values"
"(hex-char?)"
"(lambda(c_165)"
"(let-values(((or-part_166)(char<=? '#\\a c_165 '#\\f)))(if or-part_166 or-part_166(char<=? '#\\0 c_165 '#\\9)))))"
"(define-values"
"(hex-char->integer)"
"(lambda(c_167)"
"(if(char<=? '#\\a c_167 '#\\f)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\a))))"
"(if(char<=? '#\\A c_167 '#\\F)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\A))))"
"(let-values()(-(char->integer c_167)(char->integer '#\\0)))))))"
"(define-values"
"(check-planet-part)"
"(lambda(v_168 len_169)"
"(let-values(((start-package-version-pos_170 end-package-version-pos_171 colon1-pos_172 colon2-pos_173)"
"((letrec-values(((loop_174)"
"(lambda(j_175"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179)"
"(if(= j_175 len_169)"
"(let-values()"
"(values"
" start-package-version-pos_176"
"(let-values(((or-part_180) end-package-version-pos_177))"
"(if or-part_180 or-part_180 j_175))"
" colon1-pos_178"
" colon2-pos_179))"
"(let-values()"
"(let-values(((tmp_181)(string-ref v_168 j_175)))"
"(if(equal? tmp_181 '#\\/)"
"(let-values()"
"(loop_174"
"(add1 j_175)"
"(let-values(((or-part_182) start-package-version-pos_176))"
"(if or-part_182 or-part_182(add1 j_175)))"
"(if start-package-version-pos_176"
"(let-values(((or-part_183) end-package-version-pos_177))"
"(if or-part_183 or-part_183 j_175))"
" #f)"
" colon1-pos_178"
" colon2-pos_179))"
"(if(equal? tmp_181 '#\\:)"
"(let-values()"
"(if colon2-pos_179"
"(let-values()(values #f #f #f #f))"
"(if colon1-pos_178"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" j_175))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" j_175"
" #f)))))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179))))))))))"
" loop_174)"
" 0"
" #f"
" #f"
" #f"
" #f)))"
"(if(if start-package-version-pos_170"
"(if(> end-package-version-pos_171 start-package-version-pos_170)"
"(let-values(((or-part_184)(not colon2-pos_173)))"
"(if or-part_184 or-part_184(<(add1 colon2-pos_173) end-package-version-pos_171)))"
" #f)"
" #f)"
"(let-values()"
"(if colon1-pos_172"
"(let-values()"
"(let-values(((colon1-end_185)"
"(let-values(((or-part_186) colon2-pos_173))"
"(if or-part_186 or-part_186 end-package-version-pos_171))))"
"(if(if(integer-sequence? v_168(add1 colon1-pos_172) colon1-end_185)"
"(let-values(((or-part_187)(not colon2-pos_173)))"
"(if or-part_187"
" or-part_187"
"(let-values(((tmp_188)(string-ref v_168(add1 colon2-pos_173))))"
"(if(equal? tmp_188 '#\\=)"
"(let-values()(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))"
"(if(if(equal? tmp_188 '#\\>) #t(equal? tmp_188 '#\\<))"
"(let-values()"
"(if(if(<(+ 2 colon2-pos_173) end-package-version-pos_171)"
"(char=? '#\\=(string-ref v_168(+ colon2-pos_173 2)))"
" #f)"
"(let-values()"
"(integer-sequence? v_168(+ 3 colon2-pos_173) end-package-version-pos_171))"
"(let-values()"
"(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))))"
"(let-values()"
"(integer-range-sequence?"
" v_168"
"(add1 colon2-pos_173)"
" end-package-version-pos_171)))))))"
" #f)"
"(let-values()(values colon1-pos_172 end-package-version-pos_171))"
"(let-values()(values #f #f)))))"
"(let-values()(values 0 0))))"
"(let-values()(values #f #f))))))"
"(define-values"
"(integer-sequence?)"
"(lambda(s_189 start_190 end_191)"
"(if(< start_190 end_191)"
"(let-values(((start_192) start_190)((end_193) end_191)((inc_194) 1))"
"(begin"
"(if(if(real? start_192)(if(real? end_193)(real? inc_194) #f) #f)"
"(void)"
"(let-values()(in-range start_192 end_193 inc_194)))"
"((letrec-values(((for-loop_195)"
"(lambda(result_196 pos_197)"
"(if(< pos_197 end_193)"
"(let-values(((i_198) pos_197))"
"(let-values(((result_199)"
"(let-values()"
"(let-values(((result_201)"
"(let-values()"
"(let-values()"
"(char<=? '#\\0(string-ref s_189 i_198) '#\\9)))))"
"(values result_201)))))"
"(if(not((lambda x_202(not result_199)) i_198))"
"(for-loop_195 result_199(+ pos_197 inc_194))"
" result_199)))"
" result_196))))"
" for-loop_195)"
" #t"
" start_192)))"
" #f)))"
"(define-values"
"(integer-range-sequence?)"
"(lambda(s_203 start_204 end_205)"
"(if(< start_204 end_205)"
"(if(let-values(((start_206) start_204)((end_207) end_205)((inc_208) 1))"
"(begin"
"(if(if(real? start_206)(if(real? end_207)(real? inc_208) #f) #f)"
"(void)"
"(let-values()(in-range start_206 end_207 inc_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(result_210 pos_211)"
"(if(< pos_211 end_207)"
"(let-values(((i_212) pos_211))"
"(let-values(((result_213)"
"(let-values()"
"(let-values(((result_215)"
"(let-values()"
"(let-values()"
"(let-values(((c_216)(string-ref s_203 i_212)))"
"(let-values(((or-part_217)"
"(char=? c_216 '#\\-)))"
"(if or-part_217"
" or-part_217"
"(char<=? '#\\0 c_216 '#\\9))))))))"
"(values result_215)))))"
"(if(not((lambda x_218(not result_213)) i_212))"
"(for-loop_209 result_213(+ pos_211 inc_208))"
" result_213)))"
" result_210))))"
" for-loop_209)"
" #t"
" start_206)))"
"(>="
" 1"
"(let-values(((start_219) start_204)((end_220) end_205)((inc_221) 1))"
"(begin"
"(if(if(real? start_219)(if(real? end_220)(real? inc_221) #f) #f)"
"(void)"
"(let-values()(in-range start_219 end_220 inc_221)))"
"((letrec-values(((for-loop_222)"
"(lambda(result_223 pos_224)"
"(if(< pos_224 end_220)"
"(let-values(((i_225) pos_224))"
"(let-values(((result_226)"
"(let-values(((result_227) result_223))"
"(let-values(((result_228)"
"(let-values()"
"(+"
" result_227"
"(let-values()"
"(if(char=?(string-ref s_203 i_225) '#\\-)"
" 1"
" 0))))))"
"(values result_228)))))"
"(for-loop_222 result_226(+ pos_224 inc_221))))"
" result_223))))"
" for-loop_222)"
" 0"
" start_219))))"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:weak-intern-table weak-intern-table1.1 weak-intern-table? weak-intern-table-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'weak-intern-table"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'weak-intern-table)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'box))))"
"(define-values"
"(struct:table table2.1 table? table-ht table-count table-prune-at)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()(make-struct-type 'table #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'table)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'ht)"
"(make-struct-field-accessor -ref_24 1 'count)"
"(make-struct-field-accessor -ref_24 2 'prune-at))))"
"(define-values(make-weak-intern-table)(lambda()(weak-intern-table1.1(box(table2.1(hasheqv) 0 128)))))"
"(define-values"
"(weak-intern!)"
"(lambda(tt_51 v_52)"
"(let-values(((b_53)(weak-intern-table-box tt_51)))"
"(let-values(((t_54)(unbox b_53)))"
"(let-values(((code_55)(equal-hash-code v_52)))"
"(let-values(((vals_56)(hash-ref(table-ht t_54) code_55 null)))"
"(let-values(((or-part_57)"
"(let-values(((lst_58) vals_56))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((b_62)(unsafe-car lst_61)))"
"(let-values(((result_63)"
"(let-values()"
"(let-values(((result_65)"
"(let-values()"
"(let-values()"
"(let-values(((bv_66)"
"(weak-box-value"
" b_62)))"
"(if(equal? bv_66 v_52)"
" bv_66"
" #f))))))"
"(values result_65)))))"
"(if(not((lambda x_67 result_63) b_62))"
"(for-loop_59 result_63(unsafe-cdr lst_61))"
" result_63)))"
" result_60))))"
" for-loop_59)"
" #f"
" lst_58)))))"
"(if or-part_57"
" or-part_57"
"(let-values(((pruned-t_68)(if(=(table-count t_54)(table-prune-at t_54))(prune-table t_54) t_54)))"
"(let-values(((ht_69)(table-ht pruned-t_68)))"
"(let-values(((new-t_70)"
"(table2.1"
"(hash-set ht_69 code_55(cons(make-weak-box v_52)(hash-ref ht_69 code_55 null)))"
"(add1(table-count pruned-t_68))"
"(table-prune-at pruned-t_68))))"
"(let-values(((or-part_71)(if(box-cas! b_53 t_54 new-t_70) v_52 #f)))"
"(if or-part_71 or-part_71(weak-intern! tt_51 v_52))))))))))))))"
"(define-values"
"(prune-table)"
"(lambda(t_72)"
"(let-values(((new-ht_73)"
"(let-values(((ht_75)(table-ht t_72)))"
"(begin"
"(if((lambda(ht_76)(hash? ht_76)) ht_75)(void)(let-values()(default-in-hash ht_75)))"
"((letrec-values(((for-loop_77)"
"(lambda(table_78 i_79)"
"(if i_79"
"(let-values(((k_80 vals_81)(hash-iterate-key+value ht_75 i_79)))"
"(let-values(((table_82)"
"(let-values(((new-vals_83)"
"(alt-reverse"
"(let-values(((lst_84) vals_81))"
"(begin"
"(if(list? lst_84)"
"(void)"
"(let-values()(in-list lst_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(fold-var_86"
" lst_87)"
"(if(pair? lst_87)"
"(let-values(((b_88)"
"(unsafe-car"
" lst_87)))"
"(let-values(((fold-var_89)"
"(let-values(((fold-var_90)"
" fold-var_86))"
"(if(weak-box-value"
" b_88)"
"(let-values(((fold-var_91)"
" fold-var_90))"
"(let-values(((fold-var_92)"
"(let-values()"
"(cons"
"(let-values()"
" b_88)"
" fold-var_91))))"
"(values"
" fold-var_92)))"
" fold-var_90))))"
"(for-loop_85"
" fold-var_89"
"(unsafe-cdr"
" lst_87))))"
" fold-var_86))))"
" for-loop_85)"
" null"
" lst_84))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_93)"
"(lambda(table_94)"
"(let-values()"
"(let-values(((table_95)"
"(let-values(((table_96)"
" table_94))"
"(if(pair?"
" new-vals_83)"
"(let-values(((table_97)"
" table_96))"
"(let-values(((table_98)"
"(let-values()"
"(let-values(((key_99"
" val_100)"
"(let-values()"
"(values"
" k_80"
" new-vals_83))))"
"(hash-set"
" table_97"
" key_99"
" val_100)))))"
"(values"
" table_98)))"
" table_96))))"
" table_95)))))"
" for-loop_93)"
" table_78)))))"
"(for-loop_77 table_82(hash-iterate-next ht_75 i_79))))"
" table_78))))"
" for-loop_77)"
" '#hash()"
"(hash-iterate-first ht_75))))))"
"(let-values(((count_74)"
"(let-values(((ht_101) new-ht_73))"
"(begin"
"(if((lambda(ht_102)(hash? ht_102)) ht_101)(void)(let-values()(default-in-hash ht_101)))"
"((letrec-values(((for-loop_103)"
"(lambda(result_104 i_105)"
"(if i_105"
"(let-values(((k_106 vals_107)(hash-iterate-key+value ht_101 i_105)))"
"(let-values(((result_108)"
"(let-values(((result_109) result_104))"
"(let-values(((result_110)"
"(let-values()"
"(+"
" result_109"
"(let-values()(length vals_107))))))"
"(values result_110)))))"
"(for-loop_103 result_108(hash-iterate-next ht_101 i_105))))"
" result_104))))"
" for-loop_103)"
" 0"
"(hash-iterate-first ht_101))))))"
"(table2.1 new-ht_73 count_74(max 128(* 2 count_74)))))))"
"(void)"
"(void)"
"(define-values"
"(struct:resolved-module-path resolved-module-path1.1 1/resolved-module-path? 1/resolved-module-path-name)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'resolved-module-path"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(r_34 ser-push!_35 state_36)"
"(begin"
"(ser-push!_35 'tag '#:resolved-module-path)"
"(ser-push!_35(1/resolved-module-path-name r_34)))))"
"(cons"
" prop:custom-write"
"(lambda(r_37 port_38 mode_39)"
"(begin"
"                           (if mode_39 (let-values () (write-string \"#<resolved-module-path:\" port_38)) (void))"
"                           (fprintf port_38 \"~a\" (format-resolved-module-path-name (1/resolved-module-path-name r_37)))"
"                           (if mode_39 (let-values () (write-string \">\" port_38)) (void)))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_40 b_41 eql?_42)"
"(eql?_42(1/resolved-module-path-name a_40)(1/resolved-module-path-name b_41)))"
"(lambda(a_43 hash-code_44)(hash-code_44(1/resolved-module-path-name a_43)))"
"(lambda(a_45 hash-code_46)(hash-code_46(1/resolved-module-path-name a_45))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'resolved-module-path)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'name))))"
"(define-values"
"(format-resolved-module-path-name)"
"(lambda(p_48)"
"(if(path? p_48)"
"      (let-values () (string-append \"\\\"\" (path->string p_48) \"\\\"\"))"
"(if(symbol? p_48)"
"        (let-values () (format \"'~s\" p_48))"
"(let-values()"
"(format"
"           \"(submod ~a~a)\""
"(format-resolved-module-path-name(car p_48))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_49)(cdr p_48)))"
"(begin"
"(if(list? lst_49)(void)(let-values()(in-list lst_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(fold-var_51 lst_52)"
"(if(pair? lst_52)"
"(let-values(((i_53)(unsafe-car lst_52)))"
"(let-values(((fold-var_54)"
"(let-values(((fold-var_55) fold-var_51))"
"(let-values(((fold-var_56)"
"(let-values()"
"(cons"
"                                                                          (let-values () (format \" ~s\" i_53))"
" fold-var_55))))"
"(values fold-var_56)))))"
"(for-loop_50 fold-var_54(unsafe-cdr lst_52))))"
" fold-var_51))))"
" for-loop_50)"
" null"
" lst_49)))))))))))"
"(define-values"
"(resolved-module-path-root-name)"
"(lambda(r_57)"
"(let-values(((name_58)(1/resolved-module-path-name r_57)))(if(pair? name_58)(car name_58) name_58))))"
"(define-values(resolved-module-paths)(make-weak-intern-table))"
"(define-values"
"(1/make-resolved-module-path)"
"(lambda(p_59)"
"(begin"
"(if(let-values(((or-part_60)(symbol? p_59)))"
"(if or-part_60"
" or-part_60"
"(let-values(((or-part_61)(if(path? p_59)(complete-path? p_59) #f)))"
"(if or-part_61"
" or-part_61"
"(if(pair? p_59)"
"(if(pair?(cdr p_59))"
"(if(list? p_59)"
"(if(let-values(((or-part_62)(symbol?(car p_59))))"
"(if or-part_62 or-part_62(if(path?(car p_59))(complete-path?(car p_59)) #f)))"
"(let-values(((lst_63)(cdr p_59)))"
"(begin"
"(if(list? lst_63)(void)(let-values()(in-list lst_63)))"
"((letrec-values(((for-loop_64)"
"(lambda(result_65 lst_66)"
"(if(pair? lst_66)"
"(let-values(((s_67)(unsafe-car lst_66)))"
"(let-values(((result_68)"
"(let-values()"
"(let-values(((result_70)"
"(let-values()"
"(let-values()(symbol? s_67)))))"
"(values result_70)))))"
"(if(not((lambda x_71(not result_68)) s_67))"
"(for-loop_64 result_68(unsafe-cdr lst_66))"
" result_68)))"
" result_65))))"
" for-loop_64)"
" #t"
" lst_63)))"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-resolved-module-path"
"(string-append"
"            \"(or/c symbol?\\n\""
"            \"      (and/c path? complete-path?)\\n\""
"            \"      (cons/c (or/c symbol?\\n\""
"            \"                    (and/c path? complete-path?))\\n\""
"            \"              (non-empty-listof symbol?)))\")"
" p_59)))"
"(weak-intern! resolved-module-paths(resolved-module-path1.1 p_59)))))"
"(define-values"
"(resolved-module-path->module-path)"
"(lambda(r_72)"
"(let-values(((name_73)(1/resolved-module-path-name r_72)))"
"(let-values(((root-name_74)(if(pair? name_73)(car name_73) name_73)))"
"(let-values(((root-mod-path_75)(if(path? root-name_74) root-name_74(list 'quote root-name_74))))"
"(if(pair? name_73)(list* 'submod root-mod-path_75(cdr name_73)) root-mod-path_75))))))"
"(define-values"
"(struct:module-path-index"
" module-path-index2.1"
" 1/module-path-index?"
" module-path-index-path"
" module-path-index-base"
" module-path-index-resolved"
" module-path-index-shift-cache"
" set-module-path-index-resolved!"
" set-module-path-index-shift-cache!)"
"(let-values(((struct:_76 make-_77 ?_78 -ref_79 -set!_80)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(r_132 port_133 mode_134)"
"(begin"
"                           (write-string \"#<module-path-index\" port_133)"
"(if(top-level-module-path-index? r_132)"
"                             (let-values () (fprintf port_133 \":top-level\"))"
"(if(module-path-index-path r_132)"
"(let-values()"
"(let-values(((l_135)"
"((letrec-values(((loop_136)"
"(lambda(r_137)"
"(if(not r_137)"
"(let-values() null)"
"(if(1/resolved-module-path? r_137)"
"                                                                       (let-values () (list \"+\" (format \"~a\" r_137)))"
"(if(module-path-index-path r_137)"
"(let-values()"
"(cons"
"(format"
"                                                                             \"~.s\""
"(module-path-index-path r_137))"
"(loop_136(module-path-index-base r_137))))"
"(if(module-path-index-resolved r_137)"
"(let-values()"
"(list"
"                                                                              \"+\""
"(format"
"                                                                               \"~a\""
"(module-path-index-resolved r_137))))"
"(let-values() null))))))))"
" loop_136)"
" r_132)))"
"(fprintf"
" port_133"
"                                    \":~.a\""
"(apply"
" string-append"
"(car l_135)"
"(alt-reverse"
"(let-values(((lst_138)(cdr l_135)))"
"(begin"
"(if(list? lst_138)(void)(let-values()(in-list lst_138)))"
"((letrec-values(((for-loop_139)"
"(lambda(fold-var_140 lst_141)"
"(if(pair? lst_141)"
"(let-values(((i_142)(unsafe-car lst_141)))"
"(let-values(((fold-var_143)"
"(let-values(((fold-var_144)"
" fold-var_140))"
"(let-values(((fold-var_145)"
"(let-values()"
"(cons"
"(let-values()"
"(format"
"                                                                                                      \" ~a\""
" i_142))"
" fold-var_144))))"
"(values fold-var_145)))))"
"(for-loop_139 fold-var_143(unsafe-cdr lst_141))))"
" fold-var_140))))"
" for-loop_139)"
" null"
" lst_138))))))))"
"(if(module-path-index-resolved r_132)"
"                                 (let-values () (fprintf port_133 \"=~a\" (module-path-index-resolved r_132)))"
"(void))))"
"                           (write-string \">\" port_133))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_146 b_147 eql?_148)"
"(if(eql?_148(module-path-index-path a_146)(module-path-index-path b_147))"
"(eql?_148(module-path-index-base a_146)(module-path-index-base b_147))"
" #f))"
"(lambda(a_149 hash-code_150)"
"(+"
"(hash-code_150(module-path-index-path a_149))"
"(hash-code_150(module-path-index-base a_149))))"
"(lambda(a_151 hash-code_152)"
"(+"
"(hash-code_152(module-path-index-path a_151))"
"(hash-code_152(module-path-index-base a_151)))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index)))))"
"(values"
" struct:_76"
" make-_77"
" ?_78"
"(make-struct-field-accessor -ref_79 0 'path)"
"(make-struct-field-accessor -ref_79 1 'base)"
"(make-struct-field-accessor -ref_79 2 'resolved)"
"(make-struct-field-accessor -ref_79 3 'shift-cache)"
"(make-struct-field-mutator -set!_80 2 'resolved)"
"(make-struct-field-mutator -set!_80 3 'shift-cache))))"
"(define-values"
"(deserialize-module-path-index)"
"(case-lambda"
"((path_153 base_154)(1/module-path-index-join path_153 base_154))"
"((name_155)(make-self-module-path-index(1/make-resolved-module-path name_155)))"
"(() top-level-module-path-index)))"
"(define-values"
"(1/module-path-index-resolve)"
"(let-values(((module-path-index-resolve6_156)"
"(lambda(mpi5_157 load?3_158 load?4_159)"
"(let-values(((mpi_160) mpi5_157))"
"(let-values(((load?_161)(if load?4_159 load?3_158 #f)))"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_160)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-path-index-resolve \"module-path-index?\" mpi_160)))"
"(let-values(((or-part_162)(module-path-index-resolved mpi_160)))"
"(if or-part_162"
" or-part_162"
"(let-values(((mod-name_163)"
"((1/current-module-name-resolver)"
"(module-path-index-path mpi_160)"
"(module-path-index-resolve/maybe"
"(module-path-index-base mpi_160)"
" load?_161)"
" #f"
" load?_161)))"
"(begin"
"(if(1/resolved-module-path? mod-name_163)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-resolve"
"                                       \"current module name resolver's result is not a resolved module path\""
"                                       \"result\""
" mod-name_163)))"
"(set-module-path-index-resolved! mpi_160 mod-name_163)"
" mod-name_163)))))))))))"
"(case-lambda"
"((mpi_164)(module-path-index-resolve6_156 mpi_164 #f #f))"
"((mpi_165 load?3_166)(module-path-index-resolve6_156 mpi_165 load?3_166 #t)))))"
"(define-values"
"(module-path-index-unresolve)"
"(lambda(mpi_167)"
"(if(module-path-index-resolved mpi_167)"
"(let-values()"
"(let-values(((path_168 base_169)(1/module-path-index-split mpi_167)))"
"(1/module-path-index-join path_168 base_169)))"
"(let-values() mpi_167))))"
"(define-values"
"(1/module-path-index-join)"
"(let-values(((module-path-index-join12_170)"
"(lambda(mod-path10_171 base11_172 submod8_173 submod9_174)"
"(let-values(((mod-path_175) mod-path10_171))"
"(let-values(((base_176) base11_172))"
"(let-values(((submod_177)(if submod9_174 submod8_173 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_178)(not mod-path_175)))"
"(if or-part_178 or-part_178(1/module-path? mod-path_175)))"
"(void)"
"(let-values()"
"                                (raise-argument-error 'module-path-index-join \"(or/c #f module-path?)\" mod-path_175)))"
"(if(let-values(((or-part_179)(not base_176)))"
"(if or-part_179"
" or-part_179"
"(let-values(((or-part_180)(1/resolved-module-path? base_176)))"
"(if or-part_180 or-part_180(1/module-path-index? base_176)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f resolved-module-path? module-path-index?)\""
" base_176)))"
"(if(let-values(((or-part_181)(not submod_177)))"
"(if or-part_181"
" or-part_181"
"(if(pair? submod_177)(if(list? submod_177)(andmap2 symbol? submod_177) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f (non-empty-listof symbol?))\""
" submod_177)))"
"(if(if(not mod-path_175) base_176 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f path with non-#f base\""
"                                 \"given base\""
" base_176))"
"(void))"
"(if(if submod_177 mod-path_175 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f submodule list with non-#f module path\""
"                                 \"given module path\""
" mod-path_175"
"                                 \"given submodule list\""
" submod_177))"
"(void))"
"(if submod_177"
"(let-values()"
"(make-self-module-path-index"
"(1/make-resolved-module-path(cons generic-module-name submod_177))))"
"(let-values()"
"(let-values(((keep-base_182)"
"((letrec-values(((loop_183)"
"(lambda(mod-path_184)"
"(if(path? mod-path_184)"
"(let-values() #f)"
"(if(if(pair? mod-path_184)"
"(eq? 'quote(car mod-path_184))"
" #f)"
"(let-values() #f)"
"(if(symbol? mod-path_184)"
"(let-values() #f)"
"(if(if(pair? mod-path_184)"
"(eq? 'submod(car mod-path_184))"
" #f)"
"(let-values()(loop_183(cadr mod-path_184)))"
"(let-values() base_176))))))))"
" loop_183)"
" mod-path_175)))"
"(module-path-index2.1 mod-path_175 keep-base_182 #f #f))))))))))))"
"(case-lambda"
"((mod-path_185 base_186)(module-path-index-join12_170 mod-path_185 base_186 #f #f))"
"((mod-path_187 base_188 submod8_189)(module-path-index-join12_170 mod-path_187 base_188 submod8_189 #t)))))"
"(define-values"
"(module-path-index-resolve/maybe)"
"(lambda(base_190 load?_191)"
"(if(1/module-path-index? base_190)(1/module-path-index-resolve base_190 load?_191) base_190)))"
"(define-values"
"(1/module-path-index-split)"
"(lambda(mpi_192)"
"(begin"
"(if(1/module-path-index? mpi_192)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-split \"module-path-index?\" mpi_192)))"
"(values(module-path-index-path mpi_192)(module-path-index-base mpi_192)))))"
"(define-values"
"(1/module-path-index-submodule)"
"(lambda(mpi_193)"
"(begin"
"(if(1/module-path-index? mpi_193)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-submodule \"module-path-index?\" mpi_193)))"
"(if(not(module-path-index-path mpi_193))"
"(let-values(((r_194)(module-path-index-resolved mpi_193)))"
"(if r_194(let-values(((p_195)(1/resolved-module-path-name r_194)))(if(pair? p_195)(cdr p_195) #f)) #f))"
" #f))))"
"(define-values"
"(make-self-module-path-index)"
"(case-lambda"
"((name_196)(module-path-index2.1 #f #f name_196 #f))"
"((name_197 enclosing_198)"
"(make-self-module-path-index"
"(let-values(((name23_199) name_197)"
"((temp24_200)(if enclosing_198(1/module-path-index-resolve enclosing_198) #f)))"
"(build-module-name18.1 #f #f name23_199 temp24_200))))))"
"(define-values(generic-self-mpis)(make-weak-hash))"
"(define-values(generic-module-name) '|expanded module|)"
"(define-values"
"(make-generic-self-module-path-index)"
"(lambda(self_201)"
"(let-values(((r_202)(resolved-module-path-to-generic-resolved-module-path(module-path-index-resolved self_201))))"
"(let-values(((or-part_203)"
"(let-values(((e_204)(hash-ref generic-self-mpis r_202 #f)))"
"(if e_204(ephemeron-value e_204) #f))))"
"(if or-part_203"
" or-part_203"
"(let-values(((mpi_205)(module-path-index2.1 #f #f r_202 #f)))"
"(begin(hash-set! generic-self-mpis r_202(make-ephemeron r_202 mpi_205)) mpi_205)))))))"
"(define-values"
"(resolved-module-path-to-generic-resolved-module-path)"
"(lambda(r_206)"
"(let-values(((name_207)(1/resolved-module-path-name r_206)))"
"(1/make-resolved-module-path"
"(if(symbol? name_207) generic-module-name(cons generic-module-name(cdr name_207)))))))"
"(define-values"
"(imitate-generic-module-path-index!)"
"(lambda(mpi_208)"
"(let-values(((r_209)(module-path-index-resolved mpi_208)))"
"(if r_209"
"(let-values()"
"(set-module-path-index-resolved! mpi_208(resolved-module-path-to-generic-resolved-module-path r_209)))"
"(void)))))"
"(define-values"
"(module-path-index-shift)"
"(lambda(mpi_210 from-mpi_211 to-mpi_212)"
"(if(eq? mpi_210 from-mpi_211)"
"(let-values() to-mpi_212)"
"(let-values()"
"(let-values(((base_213)(module-path-index-base mpi_210)))"
"(if(not base_213)"
"(let-values() mpi_210)"
"(let-values()"
"(let-values(((shifted-base_214)(module-path-index-shift base_213 from-mpi_211 to-mpi_212)))"
"(if(eq? shifted-base_214 base_213)"
"(let-values() mpi_210)"
"(let-values(((c1_215)(shift-cache-ref(module-path-index-shift-cache shifted-base_214) mpi_210)))"
"(if c1_215"
" c1_215"
"(let-values()"
"(let-values(((shifted-mpi_216)"
"(module-path-index2.1(module-path-index-path mpi_210) shifted-base_214 #f #f)))"
"(begin"
"(shift-cache-set!(module-path-index-shift-cache! shifted-base_214) mpi_210 shifted-mpi_216)"
" shifted-mpi_216))))))))))))))"
"(define-values"
"(module-path-index-shift-cache!)"
"(lambda(mpi_217)"
"(let-values(((or-part_218)"
"(let-values(((cache_219)(module-path-index-shift-cache mpi_217)))"
"(if cache_219(if(weak-box-value cache_219) cache_219 #f) #f))))"
"(if or-part_218"
" or-part_218"
"(let-values(((cache_220)(make-weak-box(box '#hasheq()))))"
"(begin(set-module-path-index-shift-cache! mpi_217 cache_220) cache_220))))))"
"(define-values"
"(shift-cache-ref)"
"(lambda(cache_221 v_222)"
"(if cache_221"
"(let-values(((b_223)(weak-box-value cache_221)))(if b_223(hash-ref(unbox b_223) v_222 #f) #f))"
" #f)))"
"(define-values"
"(shift-cache-set!)"
"(lambda(cache_224 v_225 r_226)"
"(let-values(((b_227)(weak-box-value cache_224)))"
"(if b_227(let-values()(set-box! b_227(hash-set(unbox b_227) v_225 r_226)))(void)))))"
"(define-values(top-level-module-path-index)(make-self-module-path-index(1/make-resolved-module-path 'top-level)))"
"(define-values(top-level-module-path-index?)(lambda(mpi_228)(eq? top-level-module-path-index mpi_228)))"
"(define-values"
"(core-module-name-resolver)"
"(case-lambda"
"((name_231 from-namespace_232)(void))"
"((p_233 enclosing_234 source-stx-stx_235 load?_236)"
"(begin"
"(if(1/module-path? p_233)"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"module-path?\" p_233)))"
"(if(let-values(((or-part_237)(not enclosing_234)))"
"(if or-part_237 or-part_237(1/resolved-module-path? enclosing_234)))"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"resolved-module-path?\" enclosing_234)))"
"(if(if(list? p_233)(if(=(length p_233) 2)(if(eq? 'quote(car p_233))(symbol?(cadr p_233)) #f) #f) #f)"
"(let-values()(1/make-resolved-module-path(cadr p_233)))"
"        (if (if (list? p_233) (if (eq? 'submod (car p_233)) (equal? \"..\" (cadr p_233)) #f) #f)"
"(let-values()"
"(let-values(((lst_238)(cdr p_233)))"
"(begin"
"(if(list? lst_238)(void)(let-values()(in-list lst_238)))"
"((letrec-values(((for-loop_239)"
"(lambda(enclosing_240 lst_241)"
"(if(pair? lst_241)"
"(let-values(((s_242)(unsafe-car lst_241)))"
"(let-values(((enclosing_243)"
"(let-values(((enclosing_244) enclosing_240))"
"(let-values(((enclosing_245)"
"(let-values()"
"(let-values(((s25_247) s_242)"
"((enclosing26_248) enclosing_244)"
"((p27_249) p_233))"
"(build-module-name18.1"
" p27_249"
" #t"
" s25_247"
" enclosing26_248)))))"
"(values enclosing_245)))))"
"(for-loop_239 enclosing_243(unsafe-cdr lst_241))))"
" enclosing_240))))"
" for-loop_239)"
" enclosing_234"
" lst_238))))"
"          (if (if (list? p_233) (if (eq? 'submod (car p_233)) (equal? \".\" (cadr p_233)) #f) #f)"
"(let-values()"
"(let-values(((lst_250)(cddr p_233)))"
"(begin"
"(if(list? lst_250)(void)(let-values()(in-list lst_250)))"
"((letrec-values(((for-loop_251)"
"(lambda(enclosing_252 lst_253)"
"(if(pair? lst_253)"
"(let-values(((s_254)(unsafe-car lst_253)))"
"(let-values(((enclosing_255)"
"(let-values(((enclosing_256) enclosing_252))"
"(let-values(((enclosing_257)"
"(let-values()"
"(let-values(((s28_259) s_254)"
"((enclosing29_260) enclosing_256)"
"((p30_261) p_233))"
"(build-module-name18.1"
" p30_261"
" #t"
" s28_259"
" enclosing29_260)))))"
"(values enclosing_257)))))"
"(for-loop_251 enclosing_255(unsafe-cdr lst_253))))"
" enclosing_252))))"
" for-loop_251)"
" enclosing_234"
" lst_250))))"
"(if(if(list? p_233)(eq? 'submod(car p_233)) #f)"
"(let-values()"
"(let-values(((base_262)((1/current-module-name-resolver)(cadr p_233) enclosing_234 #f #f)))"
"(let-values(((lst_263)(cddr p_233)))"
"(begin"
"(if(list? lst_263)(void)(let-values()(in-list lst_263)))"
"((letrec-values(((for-loop_264)"
"(lambda(enclosing_265 lst_266)"
"(if(pair? lst_266)"
"(let-values(((s_267)(unsafe-car lst_266)))"
"(let-values(((enclosing_268)"
"(let-values(((enclosing_269) enclosing_265))"
"(let-values(((enclosing_270)"
"(let-values()"
"(let-values(((s31_272) s_267)"
"((enclosing32_273)"
" enclosing_269)"
"((p33_274) p_233))"
"(build-module-name18.1"
" p33_274"
" #t"
" s31_272"
" enclosing32_273)))))"
"(values enclosing_270)))))"
"(for-loop_264 enclosing_268(unsafe-cdr lst_266))))"
" enclosing_265))))"
" for-loop_264)"
" base_262"
" lst_263)))))"
"              (let-values () (error 'core-module-name-resolver \"not a supported module path: ~v\" p_233))))))))))"
"(define-values"
"(build-module-name18.1)"
"(lambda(original14_275 original15_276 name16_277 enclosing17_278)"
"(let-values(((name_279) name16_277))"
"(let-values(((enclosing_280) enclosing17_278))"
"(let-values(((orig-name_281)(if original15_276 original14_275 name_279)))"
"(let-values()"
"(let-values(((enclosing-module-name_282)"
"(if enclosing_280(1/resolved-module-path-name enclosing_280) #f)))"
"(1/make-resolved-module-path"
"(if(not enclosing-module-name_282)"
"(let-values() name_279)"
"(if(symbol? enclosing-module-name_282)"
"(let-values()(list enclosing-module-name_282 name_279))"
"                   (if (equal? name_279 \"..\")"
"(let-values()"
"(if(symbol? enclosing-module-name_282)"
"                         (let-values () (error \"too many \\\"..\\\"s:\" orig-name_281))"
"(if(= 2(length enclosing-module-name_282))"
"(let-values()(car enclosing-module-name_282))"
"(let-values()(alt-reverse(cdr(alt-reverse enclosing-module-name_282)))))))"
"(let-values()(append enclosing-module-name_282(list name_279))))))))))))))"
"(define-values"
"(1/current-module-name-resolver)"
"(make-parameter"
" core-module-name-resolver"
"(lambda(v_300)"
"(begin"
"(if(if(procedure? v_300)(if(procedure-arity-includes? v_300 2)(procedure-arity-includes? v_300 4) #f) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-name-resolver"
"            \"(and/c (procedure-arity-includes/c 2) (procedure-arity-includes/c 4))\""
" v_300)))"
" v_300))))"
"(define-values"
"(1/current-module-declare-name)"
"(make-parameter"
" #f"
"(lambda(r_301)"
"(begin"
"(if(let-values(((or-part_302)(not r_301)))(if or-part_302 or-part_302(1/resolved-module-path? r_301)))"
"(void)"
"         (let-values () (raise-argument-error 'current-module-declare-name \"(or/c #f resolved-module-path?)\" r_301)))"
" r_301))))"
"(define-values"
"(1/current-module-declare-source)"
"(make-parameter"
" #f"
"(lambda(s_303)"
"(begin"
"(if(let-values(((or-part_304)(not s_303)))"
"(if or-part_304"
" or-part_304"
"(let-values(((or-part_305)(symbol? s_303)))"
"(if or-part_305 or-part_305(if(path? s_303)(complete-path? s_303) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-declare-source"
"            \"(or/c #f symbol? (and/c path? complete-path?))\""
" s_303)))"
" s_303))))"
"(define-values"
"(substitute-module-declare-name)"
"(lambda(default-name_306)"
"(let-values(((current-name_307)(1/current-module-declare-name)))"
"(let-values(((root-name_308)"
"(if current-name_307"
"(resolved-module-path-root-name current-name_307)"
"(if(pair? default-name_306)(car default-name_306) default-name_306))))"
"(1/make-resolved-module-path"
"(if(pair? default-name_306)(cons root-name_308(cdr default-name_306)) root-name_308))))))"
"(void)"
"(void)"
"(define-values"
"(force/composable)"
"(lambda(root_98)"
"(let-values(((v_99)(unsafe-struct-ref root_98 0)))"
"(if(procedure? v_99)"
"(let-values()"
"(begin"
"(unsafe-struct-set! root_98 0(make-running(object-name v_99)))"
"(call-with-exception-handler"
"(lambda(e_100)(begin(unsafe-struct-set! root_98 0(make-reraise e_100)) e_100))"
"(lambda()"
"((letrec-values(((loop_101)"
"(lambda(v_102)"
"(if(composable-promise? v_102)"
"(let-values()"
"(let-values(((v*_103)(unsafe-struct-ref v_102 0)))"
"(begin"
"(unsafe-struct-set! v_102 0 root_98)"
"(if(procedure? v*_103)"
"(let-values()(loop_101(v*_103)))"
"(if(pair? v*_103)"
"(let-values()"
"(begin(unsafe-struct-set! root_98 0 v*_103)(unsafe-car v*_103)))"
"(let-values()(loop_101 v*_103)))))))"
"(if(promise? v_102)"
"(let-values()(begin(unsafe-struct-set! root_98 0 v_102)(force v_102)))"
"(let-values()(begin(unsafe-struct-set! root_98 0(list v_102)) v_102)))))))"
" loop_101)"
"(v_99))))))"
"(if(pair? v_99)"
"(let-values()(if(null?(unsafe-cdr v_99))(unsafe-car v_99)(apply values v_99)))"
"(if(composable-promise? v_99)"
"(let-values()(force/composable v_99))"
"(if(null? v_99)"
"(let-values()(values))"
"(if(promise? v_99)"
"(let-values()(force v_99))"
"                (let-values () (error 'force \"composable promise with invalid contents: ~e\" v_99))))))))))"
"(define-values"
"(reify-result)"
"(lambda(v_104)"
"(if(pair? v_104)"
"(let-values()(if(null?(unsafe-cdr v_104))(unsafe-car v_104)(apply values v_104)))"
"(if(null? v_104)"
"(let-values()(values))"
"(if(reraise? v_104)"
"(let-values()(v_104))"
"          (let-values () (error 'force \"promise with invalid contents: ~e\" v_104)))))))"
"(define-values"
"(force/generic)"
"(lambda(promise_105)"
"(reify-result"
"(let-values(((v_106)(unsafe-struct-ref promise_105 0)))"
"(if(procedure? v_106)"
"(begin"
"(unsafe-struct-set! promise_105 0(make-running(object-name v_106)))"
"(call-with-exception-handler"
"(lambda(e_107)(begin(unsafe-struct-set! promise_105 0(make-reraise e_107)) e_107))"
"(lambda()"
"(let-values(((vs_108)(call-with-values v_106 list)))"
"(begin(unsafe-struct-set! promise_105 0 vs_108) vs_108)))))"
" v_106)))))"
"(define-values"
"(force)"
"(lambda(promise_109)(if(promise? promise_109)((promise-forcer promise_109) promise_109) promise_109)))"
"(define-values"
"(promise-printer)"
"(lambda(promise_110 port_111 write?_112)"
"((letrec-values(((loop_113)"
"(lambda(v_114)"
"(if(reraise? v_114)"
"(let-values()"
"(let-values(((r_115)(reraise-val v_114)))"
"(if(exn? r_115)"
"(fprintf"
" port_111"
"                                 (if write?_112 \"#<promise!exn!~s>\" \"#<promise!exn!~a>\")"
"(exn-message r_115))"
"                                (fprintf port_111 (if write?_112 \"#<promise!raise!~s>\" \"#<promise!raise!~a>\") r_115))))"
"(if(running? v_114)"
"(let-values()"
"(let-values(((r_116)(running-name v_114)))"
"(if r_116"
"                                  (fprintf port_111 \"#<promise:!running!~a>\" r_116)"
"                                  (fprintf port_111 \"#<promise:!running>\"))))"
"(if(procedure? v_114)"
"(let-values()"
"(let-values(((c1_117)(object-name v_114)))"
"(if c1_117"
"                                    ((lambda (n_118) (fprintf port_111 \"#<promise:~a>\" n_118)) c1_117)"
"                                    (let-values () (display \"#<promise>\" port_111)))))"
"(if(promise? v_114)"
"(let-values()(loop_113(unsafe-struct-ref v_114 0)))"
"(if(null? v_114)"
"                                  (let-values () (fprintf port_111 \"#<promise!(values)>\"))"
"(if(null?(cdr v_114))"
"(let-values()"
"                                      (fprintf port_111 (if write?_112 \"#<promise!~s>\" \"#<promise!~a>\") (car v_114)))"
"(let-values()"
"(begin"
"                                        (display \"#<promise!(values\" port_111)"
"                                        (let-values (((fmt_119) (if write?_112 \" ~s\" \" ~a\")))"
"(for-each(lambda(x_120)(fprintf port_111 fmt_119 x_120)) v_114))"
"                                        (display \")>\" port_111))))))))))))"
" loop_113)"
"(unsafe-struct-ref promise_110 0))))"
"(define-values"
"(prop:force promise-forcer)"
"(let-values(((prop_121 pred?_122 get_123)"
"(make-struct-type-property"
" 'forcer"
"(lambda(v_124 info_125)"
"(begin"
"(if(if(procedure? v_124)(procedure-arity-includes? v_124 1) #f)"
"(void)"
"                       (let-values () (raise-argument-error 'prop:force \"(any/c . -> . any)\" v_124)))"
" v_124))"
" null"
" #t)))"
"(values prop_121 get_123)))"
"(define-values"
"(struct:promise make-promise promise? promise-val set-promise-val!)"
"(let-values(((struct:_126 make-_127 ?_128 -ref_129 -set!_130)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:force force/generic)(cons prop:custom-write promise-printer))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise)))))"
"(values"
" struct:_126"
" make-_127"
" ?_128"
"(make-struct-field-accessor -ref_129 0 'val)"
"(make-struct-field-mutator -set!_130 0 'val))))"
"(define-values"
"(struct:composable-promise make-composable-promise composable-promise?)"
"(let-values(((struct:_146 make-_147 ?_148 -ref_149 -set!_150)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'composable-promise"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force force/composable))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'composable-promise)))))"
"(values struct:_146 make-_147 ?_148)))"
"(define-values(delay) make-promise)"
"(define-values"
"(struct:reraise make-reraise reraise? reraise-val)"
"(let-values(((struct:_161 make-_162 ?_163 -ref_164 -set!_165)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'reraise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:procedure(lambda(this_182)(raise(reraise-val this_182)))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'reraise)))))"
"(values struct:_161 make-_162 ?_163(make-struct-field-accessor -ref_164 0 'val))))"
"(define-values"
"(struct:running make-running running? running-name)"
"(let-values(((struct:_183 make-_184 ?_185 -ref_186 -set!_187)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(this_208 port_209 write?_210)"
"                         (fprintf port_209 (if write?_210 \"#<running:~s>\" \"#<running:~a>\") (running-name this_208))))"
"(cons"
" prop:procedure"
"(lambda(this_211)"
"(let-values(((name_212)(running-name this_211)))"
"(if name_212"
"                             (error 'force \"reentrant promise `~.s'\" name_212)"
"                             (error 'force \"reentrant promise\"))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running)))))"
"(values struct:_183 make-_184 ?_185(make-struct-field-accessor -ref_186 0 'name))))"
"(void)"
"(void)"
"(define-values"
"(struct:promise/name make-promise/name promise/name?)"
"(let-values(((struct:_8 make-_9 ?_10 -ref_11 -set!_12)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/name"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_24)((unsafe-struct-ref p_24 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/name)))))"
"(values struct:_8 make-_9 ?_10)))"
"(define-values"
"(struct:promise/strict make-promise/strict promise/strict?)"
"(let-values(((struct:_25 make-_26 ?_27 -ref_28 -set!_29)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/strict"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_41)(reify-result(unsafe-struct-ref p_41 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/strict)))))"
"(values struct:_25 make-_26 ?_27)))"
"(define-values"
"(struct:running-thread make-running-thread running-thread? running-thread-thread)"
"(let-values(((struct:_43 make-_44 ?_45 -ref_46 -set!_47)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running-thread"
" struct:running"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running-thread)))))"
"(values struct:_43 make-_44 ?_45(make-struct-field-accessor -ref_46 0 'thread))))"
"(define-values"
"(struct:syncinfo"
" make-syncinfo"
" syncinfo?"
" syncinfo-thunk"
" syncinfo-done-evt"
" syncinfo-done-sema"
" syncinfo-access-sema"
" set-syncinfo-thunk!)"
"(let-values(((struct:_63 make-_64 ?_65 -ref_66 -set!_67)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syncinfo #f 4 0 #f null(current-inspector) #f '(1 2 3) #f 'syncinfo)))))"
"(values"
" struct:_63"
" make-_64"
" ?_65"
"(make-struct-field-accessor -ref_66 0 'thunk)"
"(make-struct-field-accessor -ref_66 1 'done-evt)"
"(make-struct-field-accessor -ref_66 2 'done-sema)"
"(make-struct-field-accessor -ref_66 3 'access-sema)"
"(make-struct-field-mutator -set!_67 0 'thunk))))"
"(define-values"
"(struct:promise/sync make-promise/sync promise/sync?)"
"(let-values(((struct:_98 make-_99 ?_100 -ref_101 -set!_102)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/sync"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_127)"
"(let-values(((v_128)(unsafe-struct-ref p_127 0)))"
"(wrap-evt(if(syncinfo? v_128)(syncinfo-done-evt v_128) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_129)"
"(let-values(((v_130)(unsafe-struct-ref p_129 0)))"
"(reify-result"
"(if(not(syncinfo? v_130))"
"(let-values() v_130)"
"(if(running-thread?(syncinfo-thunk v_130))"
"(let-values()"
"(let-values(((r_131)(syncinfo-thunk v_130)))"
"(if(eq?(running-thread-thread r_131)(current-thread))"
"(r_131)"
"(begin(sync(syncinfo-done-evt v_130))(unsafe-struct-ref p_129 0)))))"
"(let-values()"
"(begin"
"(call-with-semaphore"
"(syncinfo-access-sema v_130)"
"(lambda(p_132 v_133)"
"(let-values(((thunk_134)(syncinfo-thunk v_133)))"
"(let-values(((done_135)(syncinfo-done-sema v_133)))"
"(if(running-thread? thunk_134)"
"(void)"
"(let-values()"
"(begin"
"(set-syncinfo-thunk!"
" v_133"
"(make-running-thread(object-name thunk_134)(current-thread)))"
"(call-with-exception-handler"
"(lambda(e_136)"
"(begin"
"(unsafe-struct-set! p_132 0(make-reraise e_136))"
"(semaphore-post done_135)"
" e_136))"
"(lambda()"
"(begin"
"(unsafe-struct-set! p_132 0(call-with-values thunk_134 list))"
"(semaphore-post done_135))))))))))"
" #f"
" p_129"
" v_130)"
"(unsafe-struct-ref p_129 0)))))))))"
"(cons"
" prop:custom-write"
"(lambda(p_137 port_138 write?_139)"
"(let-values(((v_140)(unsafe-struct-ref p_137 0)))"
"(promise-printer"
"(if(syncinfo? v_140)(make-promise(syncinfo-thunk v_140)) p_137)"
" port_138"
" write?_139)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/sync)))))"
"(values struct:_98 make-_99 ?_100)))"
"(define-values"
"(struct:promise/thread make-promise/thread promise/thread?)"
"(let-values(((struct:_143 make-_144 ?_145 -ref_146 -set!_147)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/thread"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_164)"
"(let-values(((v_165)(unsafe-struct-ref p_164 0)))"
"(wrap-evt(if(running? v_165)(running-thread-thread v_165) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_166)"
"(let-values(((v_167)(unsafe-struct-ref p_166 0)))"
"(reify-result"
"(if(running-thread? v_167)"
"(let-values(((t_168)(running-thread-thread v_167)))"
"(let-values((()(begin(thread-wait t_168)(values))))"
"(let-values(((v_169)(unsafe-struct-ref p_166 0)))"
"(if(running-thread? v_169)"
"(error"
" 'force"
"                                       \"promise's thread terminated ~a\\n  promise: ~e\""
"                                       \"without result or exception\""
" p_166)"
" v_169))))"
" v_167))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/thread)))))"
"(values struct:_143 make-_144 ?_145)))"
"(define-values"
"(struct:promise/idle make-promise/idle promise/idle?)"
"(let-values(((struct:_177 make-_178 ?_179 -ref_180 -set!_181)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/idle"
" struct:promise/thread"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:force"
"(lambda(p_195)"
"(let-values(((v_196)(unsafe-struct-ref p_195 0)))"
"(reify-result"
"(if(procedure? v_196)"
"(let-values(((controller_197)"
"(if(running-thread? v_196)(running-thread-thread v_196)(v_196))))"
"(begin"
"(thread-send controller_197 'force!)"
"(thread-wait controller_197)"
"(unsafe-struct-ref p_195 0)))"
" v_196))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/idle)))))"
"(values struct:_177 make-_178 ?_179)))"
"(void)"
"(void)"
"(define-values"
"(phase?)"
"(lambda(v_1)(let-values(((or-part_2)(not v_1)))(if or-part_2 or-part_2(exact-integer? v_1)))))"
"(define-values(phase+)(lambda(a_3 b_4)(if a_3(if b_4(+ a_3 b_4) #f) #f)))"
"(define-values(phase-)(lambda(a_5 b_6)(if a_5(if b_6(- a_5 b_6) #f) #f)))"
"(define-values"
"(phase<?)"
"(lambda(a_7 b_8)(if(not b_8)(let-values() #f)(if(not a_7)(let-values() #t)(let-values()(< a_7 b_8))))))"
"(define-values(zero-phase?)(lambda(a_9)(eq? a_9 0)))"
"(define-values(label-phase?)(lambda(a_10)(not a_10)))"
" (define-values (phase?-string) \"(or/c exact-integer? #f)\")"
"(void)"
"(void)"
"(define-values"
"(struct:serialize-state"
" serialize-state1.1"
" serialize-state?"
" serialize-state-reachable-scopes"
" serialize-state-bindings-intern"
" serialize-state-bulk-bindings-intern"
" serialize-state-scopes"
" serialize-state-shifted-multi-scopes"
" serialize-state-mpi-shifts"
" serialize-state-context-triples"
" serialize-state-props"
" serialize-state-interned-props"
" serialize-state-syntax-context"
" serialize-state-sharing-syntaxes)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'serialize-state"
" #f"
" 11"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10)"
" #f"
" 'serialize-state)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'reachable-scopes)"
"(make-struct-field-accessor -ref_4 1 'bindings-intern)"
"(make-struct-field-accessor -ref_4 2 'bulk-bindings-intern)"
"(make-struct-field-accessor -ref_4 3 'scopes)"
"(make-struct-field-accessor -ref_4 4 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 5 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 6 'context-triples)"
"(make-struct-field-accessor -ref_4 7 'props)"
"(make-struct-field-accessor -ref_4 8 'interned-props)"
"(make-struct-field-accessor -ref_4 9 'syntax-context)"
"(make-struct-field-accessor -ref_4 10 'sharing-syntaxes))))"
"(define-values"
"(make-serialize-state)"
"(lambda(reachable-scopes_71)"
"(serialize-state1.1"
" reachable-scopes_71"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(make-hash)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(box null)"
"(make-hasheq))))"
"(define-values"
"(intern-scopes)"
"(lambda(scs_72 state_73)"
"(let-values(((or-part_74)(hash-ref(serialize-state-scopes state_73) scs_72 #f)))"
"(if or-part_74 or-part_74(begin(hash-set!(serialize-state-scopes state_73) scs_72 scs_72) scs_72)))))"
"(define-values"
"(intern-shifted-multi-scopes)"
"(lambda(sms_75 state_76)"
"(let-values(((or-part_77)(hash-ref(serialize-state-shifted-multi-scopes state_76) sms_75 #f)))"
"(if or-part_77"
" or-part_77"
"(begin(hash-set!(serialize-state-shifted-multi-scopes state_76) sms_75 sms_75) sms_75)))))"
"(define-values"
"(intern-mpi-shifts)"
"(lambda(mpi-shifts_78 state_79)"
"(if(null? mpi-shifts_78)"
"(let-values() null)"
"(let-values()"
"(let-values(((tail_80)(intern-mpi-shifts(cdr mpi-shifts_78) state_79)))"
"(let-values(((tail-table_81)"
"(let-values(((or-part_82)(hash-ref(serialize-state-mpi-shifts state_79) tail_80 #f)))"
"(if or-part_82"
" or-part_82"
"(let-values(((ht_83)(make-hasheq)))"
"(begin(hash-set!(serialize-state-mpi-shifts state_79) tail_80 ht_83) ht_83))))))"
"(let-values(((or-part_84)(hash-ref tail-table_81(car mpi-shifts_78) #f)))"
"(if or-part_84"
" or-part_84"
"(let-values(((v_85)(cons(car mpi-shifts_78) tail_80)))"
"(begin(hash-set! tail-table_81(car mpi-shifts_78) v_85) v_85))))))))))"
"(define-values"
"(intern-context-triple)"
"(lambda(scs_86 sms_87 mpi-shifts_88 state_89)"
"(let-values(((scs-ht_90)"
"(let-values(((or-part_92)(hash-ref(serialize-state-context-triples state_89) scs_86 #f)))"
"(if or-part_92"
" or-part_92"
"(let-values(((ht_93)(make-hasheq)))"
"(begin(hash-set!(serialize-state-context-triples state_89) scs_86 ht_93) ht_93))))))"
"(let-values(((sms-ht_91)"
"(let-values(((or-part_94)(hash-ref scs-ht_90 sms_87 #f)))"
"(if or-part_94"
" or-part_94"
"(let-values(((ht_95)(make-hasheq)))(begin(hash-set! scs-ht_90 sms_87 ht_95) ht_95))))))"
"(let-values(((or-part_96)(hash-ref sms-ht_91 mpi-shifts_88 #f)))"
"(if or-part_96"
" or-part_96"
"(let-values(((vec_97)(vector-immutable scs_86 sms_87 mpi-shifts_88)))"
"(begin(hash-set! sms-ht_91 mpi-shifts_88 vec_97) vec_97))))))))"
"(define-values"
"(intern-properties)"
"(lambda(all-props_98 get-preserved-props_99 state_100)"
"(let-values(((v_101)(hash-ref(serialize-state-props state_100) all-props_98 'no)))"
"(if(eq? v_101 'no)"
"(let-values()"
"(let-values(((preserved-props_102)(get-preserved-props_99)))"
"(let-values(((p_103)"
"(if(zero?(hash-count preserved-props_102))"
"(let-values() #f)"
"(let-values(((c1_104)"
"(hash-ref(serialize-state-interned-props state_100) preserved-props_102 #f)))"
"(if c1_104"
"((lambda(p_105) p_105) c1_104)"
"(let-values()"
"(begin"
"(hash-set!"
"(serialize-state-interned-props state_100)"
" preserved-props_102"
" preserved-props_102)"
" preserved-props_102)))))))"
"(begin(hash-set!(serialize-state-props state_100) all-props_98 p_103) p_103))))"
"(let-values() v_101)))))"
"(define-values"
"(push-syntax-context!)"
"(lambda(state_106 v_107)"
"(let-values(((b_108)(serialize-state-syntax-context state_106)))(set-box! b_108(cons v_107(unbox b_108))))))"
"(define-values"
"(get-syntax-context)"
"(lambda(state_109)"
"(let-values(((b_110)(serialize-state-syntax-context state_109)))"
"(if(null?(unbox b_110)) #f(car(unbox b_110))))))"
"(define-values"
"(pop-syntax-context!)"
"(lambda(state_111)"
"(let-values(((b_112)(serialize-state-syntax-context state_111)))(set-box! b_112(cdr(unbox b_112))))))"
"(void)"
"(void)"
"(define-values"
"(immutable-prefab-struct-key)"
"(lambda(v_1)(let-values(((k_2)(prefab-struct-key v_1)))(if k_2(if(all-fields-immutable? k_2) k_2 #f) #f))))"
"(define-values"
"(all-fields-immutable?)"
"(lambda(k_3)"
"(let-values(((or-part_4)(symbol? k_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(null? k_3)))"
"(if or-part_5"
" or-part_5"
"(let-values(((rk_6)(cdr k_3)))"
"(let-values(((rk_7)(if(if(pair? rk_6)(exact-integer?(car rk_6)) #f)(cdr rk_6) rk_6)))"
"(let-values(((rk_8)"
"(if(if(pair? rk_7)(pair?(car rk_7)) #f)"
"(if(zero?(caar rk_7))(cdr rk_7)(cons '#(1)(cdr rk_7)))"
" rk_7)))"
"(if(if(pair? rk_8)(vector?(car rk_8)) #f)"
"(if(zero?(vector-length(car rk_8)))(all-fields-immutable?(cdr rk_8)) #f)"
"(all-fields-immutable? rk_8)))))))))))"
"(void)"
"(void)"
"(define-values"
"(datum-map-slow)"
"(lambda(tail?_28 s_29 f_30 seen_31)"
"((letrec-values(((loop_32)"
"(lambda(tail?_33 s_34 prev-seen_35)"
"(let-values(((seen_36)"
"(if(if prev-seen_35(datum-has-elements? s_34) #f)"
"(let-values()"
"(if(hash-ref prev-seen_35 s_34 #f)"
"(let-values()((hash-ref prev-seen_35 'cycle-fail) s_34))"
"(let-values()(hash-set prev-seen_35 s_34 #t))))"
"(let-values() prev-seen_35))))"
"(if(null? s_34)"
"(let-values()(f_30 tail?_33 s_34))"
"(if(pair? s_34)"
"(let-values()"
"(f_30 tail?_33(cons(loop_32 #f(car s_34) seen_36)(loop_32 #t(cdr s_34) seen_36))))"
"(if(let-values(((or-part_37)(symbol? s_34)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(boolean? s_34)))"
"(if or-part_38 or-part_38(number? s_34)))))"
"(let-values()(f_30 #f s_34))"
"(if(vector? s_34)"
"(let-values()"
"(f_30"
" #f"
"(vector->immutable-vector"
"(let-values(((len_39)(vector-length s_34)))"
"(begin"
"(if(exact-nonnegative-integer? len_39)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_39)))"
"(let-values(((v_40)(make-vector len_39 0)))"
"(begin"
"(if(zero? len_39)"
"(void)"
"(let-values()"
"(let-values(((vec_41 len_42)"
"(let-values(((vec_43) s_34))"
"(begin"
"(if(vector? vec_43)"
"(void)"
"(let-values()(in-vector vec_43)))"
"(values vec_43(unsafe-vector-length vec_43))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_44)"
"(lambda(i_45 pos_46)"
"(if(unsafe-fx< pos_46 len_42)"
"(let-values(((e_47)"
"(unsafe-vector-ref"
" vec_41"
" pos_46)))"
"(let-values(((i_48)"
"(let-values(((i_49) i_45))"
"(let-values(((i_50)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_40"
" i_49"
"(let-values()"
"(loop_32"
" #f"
" e_47"
" seen_36)))"
"(unsafe-fx+"
" 1"
" i_49)))))"
"(values i_50)))))"
"(if(not"
"((lambda x_51"
"(unsafe-fx= i_48 len_39))"
" e_47))"
"(for-loop_44"
" i_48"
"(unsafe-fx+ 1 pos_46))"
" i_48)))"
" i_45))))"
" for-loop_44)"
" 0"
" 0)))))"
" v_40)))))))"
"(if(box? s_34)"
"(let-values()(f_30 #f(box-immutable(loop_32 #f(unbox s_34) seen_36))))"
"(let-values(((c1_52)(immutable-prefab-struct-key s_34)))"
"(if c1_52"
"((lambda(key_53)"
"(f_30"
" #f"
"(apply"
" make-prefab-struct"
" key_53"
"(alt-reverse"
"(let-values(((v*_54 start*_55 stop*_56 step*_57)"
"(normalise-inputs"
" 'in-vector"
"                                                             \"vector\""
"(lambda(x_58)(vector? x_58))"
"(lambda(x_59)(unsafe-vector-length x_59))"
"(struct->vector s_34)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_60)"
"(lambda(fold-var_61 idx_62)"
"(if(unsafe-fx< idx_62 stop*_56)"
"(let-values(((e_63)"
"(unsafe-vector-ref v*_54 idx_62)))"
"(let-values(((fold-var_64)"
"(let-values(((fold-var_65)"
" fold-var_61))"
"(let-values(((fold-var_66)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_32"
" #f"
" e_63"
" seen_36))"
" fold-var_65))))"
"(values fold-var_66)))))"
"(for-loop_60"
" fold-var_64"
"(unsafe-fx+ idx_62 1))))"
" fold-var_61))))"
" for-loop_60)"
" null"
" start*_55)))))))"
" c1_52)"
"(if(if(hash? s_34)(immutable? s_34) #f)"
"(let-values()"
"(if(hash-eq? s_34)"
"(let-values()"
"(f_30"
" #f"
"(let-values(((ht_67) s_34))"
"(begin"
"(if((lambda(ht_68)(hash? ht_68)) ht_67)"
"(void)"
"(let-values()(default-in-hash ht_67)))"
"((letrec-values(((for-loop_69)"
"(lambda(table_70 i_71)"
"(if i_71"
"(let-values(((k_72 v_73)"
"(hash-iterate-key+value"
" ht_67"
" i_71)))"
"(let-values(((table_74)"
"(let-values(((table_75)"
" table_70))"
"(let-values(((table_76)"
"(let-values()"
"(let-values(((key_77"
" val_78)"
"(let-values()"
"(values"
" k_72"
"(loop_32"
" #f"
" v_73"
" seen_36)))))"
"(hash-set"
" table_75"
" key_77"
" val_78)))))"
"(values table_76)))))"
"(for-loop_69"
" table_74"
"(hash-iterate-next ht_67 i_71))))"
" table_70))))"
" for-loop_69)"
" '#hasheq()"
"(hash-iterate-first ht_67))))))"
"(if(hash-eqv? s_34)"
"(let-values()"
"(f_30"
" #f"
"(let-values(((ht_79) s_34))"
"(begin"
"(if((lambda(ht_80)(hash? ht_80)) ht_79)"
"(void)"
"(let-values()(default-in-hash ht_79)))"
"((letrec-values(((for-loop_81)"
"(lambda(table_82 i_83)"
"(if i_83"
"(let-values(((k_84 v_85)"
"(hash-iterate-key+value"
" ht_79"
" i_83)))"
"(let-values(((table_86)"
"(let-values(((table_87)"
" table_82))"
"(let-values(((table_88)"
"(let-values()"
"(let-values(((key_89"
" val_90)"
"(let-values()"
"(values"
" k_84"
"(loop_32"
" #f"
" v_85"
" seen_36)))))"
"(hash-set"
" table_87"
" key_89"
" val_90)))))"
"(values table_88)))))"
"(for-loop_81"
" table_86"
"(hash-iterate-next ht_79 i_83))))"
" table_82))))"
" for-loop_81)"
" '#hasheqv()"
"(hash-iterate-first ht_79))))))"
"(let-values()"
"(f_30"
" #f"
"(let-values(((ht_91) s_34))"
"(begin"
"(if((lambda(ht_92)(hash? ht_92)) ht_91)"
"(void)"
"(let-values()(default-in-hash ht_91)))"
"((letrec-values(((for-loop_93)"
"(lambda(table_94 i_95)"
"(if i_95"
"(let-values(((k_96 v_97)"
"(hash-iterate-key+value"
" ht_91"
" i_95)))"
"(let-values(((table_98)"
"(let-values(((table_99)"
" table_94))"
"(let-values(((table_100)"
"(let-values()"
"(let-values(((key_101"
" val_102)"
"(let-values()"
"(values"
" k_96"
"(loop_32"
" #f"
" v_97"
" seen_36)))))"
"(hash-set"
" table_99"
" key_101"
" val_102)))))"
"(values table_100)))))"
"(for-loop_93"
" table_98"
"(hash-iterate-next ht_91 i_95))))"
" table_94))))"
" for-loop_93)"
" '#hash()"
"(hash-iterate-first ht_91)))))))))"
"(let-values()(f_30 #f s_34))))))))))))))"
" loop_32)"
" tail?_28"
" s_29"
" seen_31)))"
"(define-values"
"(datum-has-elements?)"
"(lambda(d_103)"
"(let-values(((or-part_104)(pair? d_103)))"
"(if or-part_104"
" or-part_104"
"(let-values(((or-part_105)(vector? d_103)))"
"(if or-part_105"
" or-part_105"
"(let-values(((or-part_106)(box? d_103)))"
"(if or-part_106"
" or-part_106"
"(let-values(((or-part_107)(immutable-prefab-struct-key d_103)))"
"(if or-part_107"
" or-part_107"
"(if(hash? d_103)(if(immutable? d_103)(positive?(hash-count d_103)) #f) #f)))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:preserved-property-value"
" preserved-property-value1.1"
" preserved-property-value?"
" preserved-property-value-content)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'preserved-property-value"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'preserved-property-value)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'content))))"
"(define-values"
"(plain-property-value)"
"(lambda(v_21)(if(preserved-property-value? v_21)(preserved-property-value-content v_21) v_21)))"
"(define-values"
"(check-value-to-preserve)"
"(lambda(v_23 syntax?_24)"
"(let-values(((s_25) v_23)"
"((f_26)"
"(lambda(tail?_28 v_29)"
"(begin"
"(if(let-values(((or-part_30)(null? v_29)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(boolean? v_29)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)(symbol? v_29)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)(number? v_29)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_34)(char? v_29)))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35)(string? v_29)))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36)(bytes? v_29)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(regexp? v_29)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(syntax?_24 v_29)))"
"(if or-part_38"
" or-part_38"
"(let-values(((or-part_39)(pair? v_29)))"
"(if or-part_39"
" or-part_39"
"(let-values(((or-part_40)(vector? v_29)))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(box? v_29)))"
"(if or-part_41"
" or-part_41"
"(let-values(((or-part_42)(hash? v_29)))"
"(if or-part_42"
" or-part_42"
"(immutable-prefab-struct-key"
" v_29)))))))))))))))))))))))))))"
"(void)"
"(let-values()"
"                          (raise-arguments-error 'write \"disallowed value in preserved syntax property\" \"value\" v_29)))"
" v_29)))"
"((seen_27) disallow-cycles$1))"
"((letrec-values(((loop_43)"
"(lambda(tail?_44 s_45 prev-depth_46)"
"(let-values(((depth_47)(add1 prev-depth_46)))"
"(if(if seen_27(> depth_47 32) #f)"
"(let-values()"
"(datum-map-slow tail?_44 s_45(lambda(tail?_48 s_49)(f_26 tail?_48 s_49)) seen_27))"
"(if(null? s_45)"
"(let-values()(f_26 tail?_44 s_45))"
"(if(pair? s_45)"
"(let-values()"
"(f_26"
" tail?_44"
"(cons(loop_43 #f(car s_45) depth_47)(loop_43 #t(cdr s_45) depth_47))))"
"(if(let-values(((or-part_50)(symbol? s_45)))"
"(if or-part_50"
" or-part_50"
"(let-values(((or-part_51)(boolean? s_45)))"
"(if or-part_51 or-part_51(number? s_45)))))"
"(let-values()(f_26 #f s_45))"
"(if(let-values(((or-part_52)(vector? s_45)))"
"(if or-part_52"
" or-part_52"
"(let-values(((or-part_53)(box? s_45)))"
"(if or-part_53"
" or-part_53"
"(let-values(((or-part_54)(prefab-struct-key s_45)))"
"(if or-part_54 or-part_54(hash? s_45)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_44"
" s_45"
"(lambda(tail?_55 s_56)(f_26 tail?_55 s_56))"
" seen_27))"
"(let-values()(f_26 #f s_45)))))))))))"
" loop_43)"
" #f"
" s_25"
" 0))))"
"(define-values"
"(disallow-cycles$1)"
"(hash"
" 'cycle-fail"
"   (lambda (v_57) (raise-arguments-error 'write \"disallowed cycle in preserved syntax property\" \"at\" v_57))))"
"(void)"
"(void)"
"(define-values(tamper-tainted?)(lambda(v_1)(symbol? v_1)))"
"(define-values(tamper-armed?)(lambda(v_2)(set? v_2)))"
"(define-values(tamper-clean?)(lambda(v_3)(not v_3)))"
"(define-values"
"(tamper-tainted-for-content)"
"(lambda(v_4)(if(datum-has-elements? v_4) 'tainted/need-propagate 'tainted)))"
"(define-values(serialize-tamper)(lambda(t_5)(if(tamper-armed? t_5) 'armed t_5)))"
"(define-values(current-arm-inspectors)(make-parameter(seteq)))"
"(define-values(deserialize-tamper)(lambda(t_6)(if(eq? t_6 'armed)(current-arm-inspectors) t_6)))"
"(void)"
"(void)"
"(define-values"
"(struct:syntax"
" syntax1.1"
" syntax?$1"
" syntax-content"
" syntax-scopes"
" syntax-shifted-multi-scopes"
" syntax-scope-propagations"
" syntax-mpi-shifts"
" syntax-srcloc"
" syntax-props"
" syntax-inspector"
" syntax-tamper"
" set-syntax-content!"
" set-syntax-scope-propagations!"
" set-syntax-tamper!)"
"(let-values(((struct:_65 make-_66 ?_67 -ref_68 -set!_69)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax"
" #f"
" 9"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(s_170 reach_171)"
"(let-values(((prop_172)(syntax-scope-propagations s_170)))"
"(begin"
"(reach_171(if prop_172((propagation-ref prop_172) s_170)(syntax-content s_170)))"
"(reach_171(syntax-scopes s_170))"
"(reach_171(syntax-shifted-multi-scopes s_170))"
"(let-values(((ht_173)(syntax-props s_170)))"
"(begin"
"(if((lambda(ht_174)(if(hash? ht_174)(immutable? ht_174) #f)) ht_173)"
"(void)"
"(let-values()(default-in-immutable-hash ht_173)))"
"((letrec-values(((for-loop_175)"
"(lambda(fold-var_176 i_177)"
"(if i_177"
"(let-values(((k_178 v_179)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_173"
" i_177)))"
"(let-values(((fold-var_180)"
"(let-values(((fold-var_181) fold-var_176))"
"(if(preserved-property-value? v_179)"
"(let-values()"
"(let-values(((fold-var_183)"
"(let-values()"
"(begin"
"(let-values()"
"(reach_171"
"(plain-property-value"
" v_179)))"
"(void)))))"
"(values fold-var_183)))"
" fold-var_181))))"
"(for-loop_175"
" fold-var_180"
"(unsafe-immutable-hash-iterate-next ht_173 i_177))))"
" fold-var_176))))"
" for-loop_175)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_173))))))))"
"(cons"
" prop:serialize"
"(lambda(s_184 ser-push!_185 state_186)"
"(let-values(((prop_187)(syntax-scope-propagations s_184)))"
"(let-values(((content_188)"
"(if prop_187((propagation-ref prop_187) s_184)(syntax-content s_184))))"
"(let-values(((properties_189)"
"(intern-properties"
"(syntax-props s_184)"
"(lambda()"
"(let-values(((ht_190)(syntax-props s_184)))"
"(begin"
"(if((lambda(ht_191)(hash? ht_191)) ht_190)"
"(void)"
"(let-values()(default-in-hash ht_190)))"
"((letrec-values(((for-loop_192)"
"(lambda(table_193 i_194)"
"(if i_194"
"(let-values(((k_195 v_196)"
"(hash-iterate-key+value"
" ht_190"
" i_194)))"
"(let-values(((table_197)"
"(let-values(((table_198)"
" table_193))"
"(if(preserved-property-value?"
" v_196)"
"(let-values(((table_199)"
" table_198))"
"(let-values(((table_200)"
"(let-values()"
"(let-values(((key_201"
" val_202)"
"(let-values()"
"(values"
" k_195"
"(check-value-to-preserve"
"(plain-property-value"
" v_196)"
" syntax?$1)))))"
"(hash-set"
" table_199"
" key_201"
" val_202)))))"
"(values table_200)))"
" table_198))))"
"(for-loop_192"
" table_197"
"(hash-iterate-next ht_190 i_194))))"
" table_193))))"
" for-loop_192)"
" '#hasheq()"
"(hash-iterate-first ht_190)))))"
" state_186)))"
"(let-values(((tamper_203)(serialize-tamper(syntax-tamper s_184))))"
"(let-values(((context-triple_204)"
"(intern-context-triple"
"(intern-scopes(syntax-scopes s_184) state_186)"
"(intern-shifted-multi-scopes"
"(syntax-shifted-multi-scopes s_184)"
" state_186)"
"(intern-mpi-shifts(syntax-mpi-shifts s_184) state_186)"
" state_186)))"
"(let-values(((stx-state_205)(get-syntax-context state_186)))"
"(if(let-values(((or-part_206) properties_189))"
"(if or-part_206 or-part_206 tamper_203))"
"(let-values()"
"(begin"
"(ser-push!_185 'tag '#:syntax+props)"
"(push-syntax-context! state_186 #f)"
"(ser-push!_185 content_188)"
"(pop-syntax-context! state_186)"
"(ser-push!_185 'reference context-triple_204)"
"(ser-push!_185 'reference(syntax-srcloc s_184))"
"(ser-push!_185 properties_189)"
"(ser-push!_185 tamper_203)"
"(if stx-state_205"
"(let-values()(set-syntax-state-all-sharing?! stx-state_205 #f))"
"(void))))"
"(let-values()"
"(let-values(((sharing-mode_207)"
"(hash-ref"
"(serialize-state-sharing-syntaxes state_186)"
" s_184"
" 'unknown)))"
"(begin"
"(if(eq? sharing-mode_207 'share)"
"(let-values()"
"(begin"
"(ser-push!_185 'tag '#:datum->syntax)"
"(ser-push!_185(syntax->datum$1 s_184))))"
"(if(eq? sharing-mode_207 'unknown)"
"(let-values()"
"(let-values((()(begin(ser-push!_185 'tag '#:syntax)(values))))"
"(let-values(((this-state_208)"
"(if(no-pair-syntax-in-cdr? content_188)"
"(syntax-state19.1"
" #t"
" context-triple_204"
"(syntax-srcloc s_184))"
" #f)))"
"(let-values((()"
"(begin"
"(push-syntax-context! state_186 this-state_208)"
"(values))))"
"(let-values((()(begin(ser-push!_185 content_188)(values))))"
"(let-values((()"
"(begin"
"(pop-syntax-context! state_186)"
"(values))))"
"(let-values(((new-sharing-mode_209)"
"(if(if this-state_208"
"(syntax-state-all-sharing?"
" this-state_208)"
" #f)"
" 'share"
" 'none)))"
"(begin"
"(hash-set!"
"(serialize-state-sharing-syntaxes state_186)"
" s_184"
"(if(datum-has-elements? content_188)"
" new-sharing-mode_209"
" 'none))"
"(if(if stx-state_205"
"(eq? new-sharing-mode_209 'none)"
" #f)"
"(let-values()"
"(set-syntax-state-all-sharing?! stx-state_205 #f))"
"(void))))))))))"
"(let-values()"
"(begin"
"(ser-push!_185 'tag '#:syntax)"
"(push-syntax-context! state_186 #f)"
"(ser-push!_185 content_188)"
"(pop-syntax-context! state_186)))))"
"(ser-push!_185 'reference context-triple_204)"
"(ser-push!_185 'reference(syntax-srcloc s_184))"
"(if stx-state_205"
"(let-values()"
"(if(if(eq?"
" context-triple_204"
"(syntax-state-context-triple stx-state_205))"
"(equal?"
"(syntax-srcloc s_184)"
"(syntax-state-srcloc stx-state_205))"
" #f)"
"(void)"
"(let-values()(set-syntax-state-all-sharing?! stx-state_205 #f))))"
"(void))))))))))))))"
"(cons"
" prop:custom-write"
"(lambda(s_210 port_211 mode_212)"
"                         (let-values ((() (begin (write-string \"#<syntax\" port_211) (values))))"
"(let-values(((srcloc_213)(syntax-srcloc s_210)))"
"(begin"
"(if srcloc_213"
"(let-values()"
"(let-values(((srcloc-str_214)(srcloc->string srcloc_213)))"
"(if srcloc-str_214"
"                                       (let-values () (fprintf port_211 \":~a\" srcloc-str_214))"
"(void))))"
"(void))"
"                               (fprintf port_211 \" ~.s\" (syntax->datum$1 s_210))"
"                               (write-string \">\" port_211)))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'syntax)))))"
"(values"
" struct:_65"
" make-_66"
" ?_67"
"(make-struct-field-accessor -ref_68 0 'content)"
"(make-struct-field-accessor -ref_68 1 'scopes)"
"(make-struct-field-accessor -ref_68 2 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_68 3 'scope-propagations)"
"(make-struct-field-accessor -ref_68 4 'mpi-shifts)"
"(make-struct-field-accessor -ref_68 5 'srcloc)"
"(make-struct-field-accessor -ref_68 6 'props)"
"(make-struct-field-accessor -ref_68 7 'inspector)"
"(make-struct-field-accessor -ref_68 8 'tamper)"
"(make-struct-field-mutator -set!_69 0 'content)"
"(make-struct-field-mutator -set!_69 3 'scope-propagations)"
"(make-struct-field-mutator -set!_69 8 'tamper))))"
"(define-values(prop:propagation propagation?$1 propagation-ref)(make-struct-type-property 'propagation))"
"(define-values(empty-scopes)(seteq))"
"(define-values(empty-shifted-multi-scopes)(seteq))"
"(define-values(empty-mpi-shifts) null)"
"(define-values(empty-props) '#hasheq())"
"(define-values"
"(empty-syntax)"
"(syntax1.1 #f empty-scopes empty-shifted-multi-scopes #f empty-mpi-shifts #f empty-props #f #f))"
"(define-values(identifier?)(lambda(s_215)(if(syntax?$1 s_215)(symbol?(syntax-content s_215)) #f)))"
"(define-values"
"(syntax->datum$1)"
"(lambda(s_216)"
"(let-values(((s_217) s_216)"
"((f_218)(lambda(tail?_222 x_223) x_223))"
"((d->s_219)(lambda(s_224 d_225) d_225))"
"((s-e_220) syntax-content)"
"((seen_221) #f))"
"((letrec-values(((loop_226)"
"(lambda(s_227)"
"(let-values(((s_228) s_227)"
"((f_229)"
"(lambda(tail?_231 v_232)"
"(if(syntax?$1 v_232)"
"(let-values()(d->s_219 v_232(loop_226(s-e_220 v_232))))"
"(let-values()(f_218 tail?_231 v_232)))))"
"((seen_230) seen_221))"
"((letrec-values(((loop_233)"
"(lambda(tail?_234 s_235 prev-depth_236)"
"(let-values(((depth_237)(add1 prev-depth_236)))"
"(if(if seen_230(> depth_237 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_234"
" s_235"
"(lambda(tail?_238 s_239)(f_229 tail?_238 s_239))"
" seen_230))"
"(if(null? s_235)"
"(let-values()(f_229 tail?_234 s_235))"
"(if(pair? s_235)"
"(let-values()"
"(f_229"
" tail?_234"
"(cons"
"(loop_233 #f(car s_235) depth_237)"
"(loop_233 #t(cdr s_235) depth_237))))"
"(if(let-values(((or-part_240)(symbol? s_235)))"
"(if or-part_240"
" or-part_240"
"(let-values(((or-part_241)(boolean? s_235)))"
"(if or-part_241 or-part_241(number? s_235)))))"
"(let-values()(f_229 #f s_235))"
"(if(let-values(((or-part_242)(vector? s_235)))"
"(if or-part_242"
" or-part_242"
"(let-values(((or-part_243)(box? s_235)))"
"(if or-part_243"
" or-part_243"
"(let-values(((or-part_244)"
"(prefab-struct-key s_235)))"
"(if or-part_244 or-part_244(hash? s_235)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_234"
" s_235"
"(lambda(tail?_245 s_246)(f_229 tail?_245 s_246))"
" seen_230))"
"(let-values()(f_229 #f s_235)))))))))))"
" loop_233)"
" #f"
" s_228"
" 0)))))"
" loop_226)"
" s_217))))"
"(define-values"
"(datum->syntax$1)"
"(let-values(((datum->syntax8_247)"
"(lambda(stx-c6_248 s7_249 stx-l2_250 stx-p3_251 stx-l4_252 stx-p5_253)"
"(let-values(((stx-c_254) stx-c6_248))"
"(let-values(((s_255) s7_249))"
"(let-values(((stx-l_256)(if stx-l4_252 stx-l2_250 #f)))"
"(let-values(((stx-p_257)(if stx-p5_253 stx-p3_251 #f)))"
"(let-values()"
"(let-values(((wrap_258)"
"(lambda(content_259)"
"(syntax1.1"
" content_259"
"(if stx-c_254(syntax-scopes stx-c_254) empty-scopes)"
"(if stx-c_254"
"(syntax-shifted-multi-scopes stx-c_254)"
" empty-shifted-multi-scopes)"
" #f"
"(if stx-c_254(syntax-mpi-shifts stx-c_254) empty-mpi-shifts)"
"(if stx-l_256(syntax-srcloc stx-l_256) #f)"
"(if stx-p_257(syntax-props stx-p_257) empty-props)"
"(if stx-c_254(syntax-inspector stx-c_254) #f)"
"(if stx-c_254"
"(if(syntax-tamper stx-c_254)"
"(tamper-tainted-for-content content_259)"
" #f)"
" #f)))))"
"(let-values(((s_260) s_255)"
"((f_261)(lambda(tail?_264 x_265)(if tail?_264 x_265(wrap_258 x_265))))"
"((s->_262)(lambda(s_266) s_266))"
"((seen_263) disallow-cycles))"
"(let-values(((s_267) s_260)"
"((f_268)"
"(lambda(tail?_270 v_271)"
"(if(syntax?$1 v_271)"
"(let-values()(s->_262 v_271))"
"(let-values()(f_261 tail?_270 v_271)))))"
"((seen_269) seen_263))"
"((letrec-values(((loop_272)"
"(lambda(tail?_273 s_274 prev-depth_275)"
"(let-values(((depth_276)(add1 prev-depth_275)))"
"(if(if seen_269(> depth_276 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_273"
" s_274"
"(lambda(tail?_277 s_278)(f_268 tail?_277 s_278))"
" seen_269))"
"(if(null? s_274)"
"(let-values()(f_268 tail?_273 s_274))"
"(if(pair? s_274)"
"(let-values()"
"(f_268"
" tail?_273"
"(cons"
"(loop_272 #f(car s_274) depth_276)"
"(loop_272 #t(cdr s_274) depth_276))))"
"(if(let-values(((or-part_279)(symbol? s_274)))"
"(if or-part_279"
" or-part_279"
"(let-values(((or-part_280)(boolean? s_274)))"
"(if or-part_280 or-part_280(number? s_274)))))"
"(let-values()(f_268 #f s_274))"
"(if(let-values(((or-part_281)(vector? s_274)))"
"(if or-part_281"
" or-part_281"
"(let-values(((or-part_282)(box? s_274)))"
"(if or-part_282"
" or-part_282"
"(let-values(((or-part_283)"
"(prefab-struct-key s_274)))"
"(if or-part_283"
" or-part_283"
"(hash? s_274)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_273"
" s_274"
"(lambda(tail?_284 s_285)(f_268 tail?_284 s_285))"
" seen_269))"
"(let-values()(f_268 #f s_274)))))))))))"
" loop_272)"
" #f"
" s_267"
" 0))))))))))))"
"(case-lambda"
"((stx-c_286 s_287)(datum->syntax8_247 stx-c_286 s_287 #f #f #f #f))"
"((stx-c_288 s_289 stx-l_290 stx-p3_291)(datum->syntax8_247 stx-c_288 s_289 stx-l_290 stx-p3_291 #t #t))"
"((stx-c_292 s_293 stx-l2_294)(datum->syntax8_247 stx-c_292 s_293 stx-l2_294 #f #t #f)))))"
"(define-values"
"(disallow-cycles)"
"(hasheq"
" 'cycle-fail"
"   (lambda (s_295) (raise-arguments-error 'datum->syntax \"cannot create syntax from cyclic datum\" s_295))))"
"(define-values"
"(struct:syntax-state"
" syntax-state19.1"
" syntax-state?"
" syntax-state-all-sharing?"
" syntax-state-context-triple"
" syntax-state-srcloc"
" set-syntax-state-all-sharing?!)"
"(let-values(((struct:_296 make-_297 ?_298 -ref_299 -set!_300)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syntax-state #f 3 0 #f null(current-inspector) #f '(1 2) #f 'syntax-state)))))"
"(values"
" struct:_296"
" make-_297"
" ?_298"
"(make-struct-field-accessor -ref_299 0 'all-sharing?)"
"(make-struct-field-accessor -ref_299 1 'context-triple)"
"(make-struct-field-accessor -ref_299 2 'srcloc)"
"(make-struct-field-mutator -set!_300 0 'all-sharing?))))"
"(define-values"
"(no-pair-syntax-in-cdr?)"
"(lambda(content_326)"
"(if(pair? content_326)"
"(let-values()"
"((letrec-values(((loop_327)"
"(lambda(content_328)"
"(if(if(syntax?$1 content_328)(pair?(syntax-content content_328)) #f)"
"(let-values() #f)"
"(if(pair? content_328)"
"(let-values()(loop_327(cdr content_328)))"
"(let-values() #t))))))"
" loop_327)"
"(cdr content_326)))"
"(let-values() #t))))"
"(define-values"
"(deserialize-syntax)"
"(lambda(content_329 context-triple_330 srcloc_331 props_332 tamper_333 inspector_334)"
"(syntax1.1"
" content_329"
"(vector-ref context-triple_330 0)"
"(vector-ref context-triple_330 1)"
" #f"
"(vector-ref context-triple_330 2)"
" srcloc_331"
"(if props_332"
"(let-values(((ht_335) props_332))"
"(begin"
"(if((lambda(ht_336)(if(hash? ht_336)(immutable? ht_336) #f)) ht_335)"
"(void)"
"(let-values()(default-in-immutable-hash ht_335)))"
"((letrec-values(((for-loop_337)"
"(lambda(table_338 i_339)"
"(if i_339"
"(let-values(((k_340 v_341)(unsafe-immutable-hash-iterate-key+value ht_335 i_339)))"
"(let-values(((table_342)"
"(let-values(((table_343) table_338))"
"(let-values(((table_344)"
"(let-values()"
"(let-values(((key_345 val_346)"
"(let-values()"
"(values"
" k_340"
"(preserved-property-value1.1"
" v_341)))))"
"(hash-set table_343 key_345 val_346)))))"
"(values table_344)))))"
"(for-loop_337 table_342(unsafe-immutable-hash-iterate-next ht_335 i_339))))"
" table_338))))"
" for-loop_337)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_335))))"
" empty-props)"
" inspector_334"
"(deserialize-tamper tamper_333))))"
"(define-values"
"(deserialize-datum->syntax)"
"(lambda(content_347 context-triple_348 srcloc_349 inspector_350)"
"(let-values(((s_351)(deserialize-syntax #f context-triple_348 srcloc_349 #f #f inspector_350)))"
"(datum->syntax$1 s_351 content_347 s_351 s_351))))"
"(void)"
"(void)"
"(define-values(empty-binding-table) '#hasheq())"
"(define-values"
"(struct:table-with-bulk-bindings"
" table-with-bulk-bindings1.1"
" table-with-bulk-bindings?"
" table-with-bulk-bindings-syms"
" table-with-bulk-bindings-syms/serialize"
" table-with-bulk-bindings-bulk-bindings)"
"(let-values(((struct:_19 make-_20 ?_21 -ref_22 -set!_23)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'table-with-bulk-bindings"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(twbb_52 ser-push!_53 state_54)"
"(begin"
"(ser-push!_53 'tag '#:table-with-bulk-bindings)"
"(ser-push!_53(table-with-bulk-bindings-syms/serialize twbb_52))"
"(ser-push!_53(table-with-bulk-bindings-bulk-bindings twbb_52))))))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'table-with-bulk-bindings)))))"
"(values"
" struct:_19"
" make-_20"
" ?_21"
"(make-struct-field-accessor -ref_22 0 'syms)"
"(make-struct-field-accessor -ref_22 1 'syms/serialize)"
"(make-struct-field-accessor -ref_22 2 'bulk-bindings))))"
"(define-values"
"(deserialize-table-with-bulk-bindings)"
"(lambda(syms_55 bulk-bindings_56)(table-with-bulk-bindings1.1 syms_55 syms_55 bulk-bindings_56)))"
"(define-values"
"(struct:bulk-binding-at bulk-binding-at2.1 bulk-binding-at? bulk-binding-at-scopes bulk-binding-at-bulk)"
"(let-values(((struct:_57 make-_58 ?_59 -ref_60 -set!_61)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-at"
" #f"
" 2"
" 0"
" #f"
"(list"
"                      (cons prop:reach-scopes (lambda (sms_87 reach_88) (error \"shouldn't get here\")))"
"(cons"
" prop:serialize"
"(lambda(bba_89 ser-push!_90 state_91)"
"(begin"
"(ser-push!_90 'tag '#:bulk-binding-at)"
"(ser-push!_90(bulk-binding-at-scopes bba_89))"
"(ser-push!_90(bulk-binding-at-bulk bba_89))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-at)))))"
"(values"
" struct:_57"
" make-_58"
" ?_59"
"(make-struct-field-accessor -ref_60 0 'scopes)"
"(make-struct-field-accessor -ref_60 1 'bulk))))"
"(define-values(deserialize-bulk-binding-at)(lambda(scopes_92 bulk_93)(bulk-binding-at2.1 scopes_92 bulk_93)))"
"(define-values(prop:bulk-binding bulk-binding?$1 bulk-binding-ref)(make-struct-type-property 'bulk-binding))"
"(define-values"
"(struct:bulk-binding-class"
" bulk-binding-class3.1"
" bulk-binding-class?"
" bulk-binding-class-get-symbols"
" bulk-binding-class-create)"
"(let-values(((struct:_94 make-_95 ?_96 -ref_97 -set!_98)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-class"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-class)))))"
"(values"
" struct:_94"
" make-_95"
" ?_96"
"(make-struct-field-accessor -ref_97 0 'get-symbols)"
"(make-struct-field-accessor -ref_97 1 'create))))"
"(define-values"
"(bulk-binding-symbols)"
"(lambda(b_119 s_120 extra-shifts_121)"
"((bulk-binding-class-get-symbols(bulk-binding-ref b_119))"
" b_119"
"(append extra-shifts_121(if s_120(syntax-mpi-shifts s_120) null)))))"
"(define-values(bulk-binding-create)(lambda(b_122)(bulk-binding-class-create(bulk-binding-ref b_122))))"
"(define-values(binding-table-empty?)(lambda(bt_123)(if(hash? bt_123)(zero?(hash-count bt_123)) #f)))"
"(define-values"
"(binding-table-add)"
"(lambda(bt_124 scopes_125 sym_126 binding_127 just-for-nominal?_128)"
"(if(hash? bt_124)"
"(let-values()(hash-set bt_124 sym_126(hash-set(hash-ref bt_124 sym_126 '#hash()) scopes_125 binding_127)))"
"(let-values()"
"(let-values(((new-syms_129)"
"(binding-table-add"
"(table-with-bulk-bindings-syms bt_124)"
" scopes_125"
" sym_126"
" binding_127"
" just-for-nominal?_128)))"
"(let-values(((new-syms/serialize_130)"
"(if just-for-nominal?_128"
"(let-values()(table-with-bulk-bindings-syms/serialize bt_124))"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_124)"
"(table-with-bulk-bindings-syms/serialize bt_124))"
"(let-values() new-syms_129)"
"(let-values()"
"(binding-table-add"
"(table-with-bulk-bindings-syms/serialize bt_124)"
" scopes_125"
" sym_126"
" binding_127"
" #f))))))"
"(let-values(((the-struct_131) bt_124))"
"(if(table-with-bulk-bindings? the-struct_131)"
"(let-values(((syms7_132) new-syms_129)((syms/serialize8_133) new-syms/serialize_130))"
"(table-with-bulk-bindings1.1"
" syms7_132"
" syms/serialize8_133"
"(table-with-bulk-bindings-bulk-bindings the-struct_131)))"
"                (raise-argument-error 'struct-copy \"table-with-bulk-bindings?\" the-struct_131)))))))))"
"(define-values"
"(binding-table-add-bulk)"
"(lambda(bt_134 scopes_135 bulk_136)"
"(if(table-with-bulk-bindings? bt_134)"
"(let-values()"
"(let-values(((new-syms_137)"
"(remove-matching-bindings(table-with-bulk-bindings-syms bt_134) scopes_135 bulk_136)))"
"(let-values(((new-syms/serialize_138)"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_134)"
"(table-with-bulk-bindings-syms/serialize bt_134))"
" new-syms_137"
"(remove-matching-bindings"
"(table-with-bulk-bindings-syms/serialize bt_134)"
" scopes_135"
" bulk_136))))"
"(table-with-bulk-bindings1.1"
" new-syms_137"
" new-syms/serialize_138"
"(cons(bulk-binding-at2.1 scopes_135 bulk_136)(table-with-bulk-bindings-bulk-bindings bt_134))))))"
"(let-values()(binding-table-add-bulk(table-with-bulk-bindings1.1 bt_134 bt_134 null) scopes_135 bulk_136)))))"
"(define-values"
"(remove-matching-bindings)"
"(lambda(syms_139 scopes_140 bulk_141)"
"(let-values(((bulk-symbols_142)(bulk-binding-symbols bulk_141 #f null)))"
"(if(<(hash-count syms_139)(hash-count bulk-symbols_142))"
"(let-values()"
"(let-values(((ht_143) syms_139))"
"(begin"
"(if((lambda(ht_144)(if(hash? ht_144)(immutable? ht_144) #f)) ht_143)"
"(void)"
"(let-values()(default-in-immutable-hash ht_143)))"
"((letrec-values(((for-loop_145)"
"(lambda(syms_146 i_147)"
"(if i_147"
"(let-values(((sym_148 sym-bindings_149)"
"(unsafe-immutable-hash-iterate-key+value ht_143 i_147)))"
"(let-values(((syms_150)"
"(let-values(((syms_151) syms_146))"
"(let-values(((syms_152)"
"(let-values()"
"(if(hash-ref bulk-symbols_142 sym_148 #f)"
"(remove-matching-binding"
" syms_151"
" sym_148"
" sym-bindings_149"
" scopes_140)"
" syms_151))))"
"(values syms_152)))))"
"(for-loop_145 syms_150(unsafe-immutable-hash-iterate-next ht_143 i_147))))"
" syms_146))))"
" for-loop_145)"
" syms_139"
"(unsafe-immutable-hash-iterate-first ht_143)))))"
"(let-values()"
"(let-values(((ht_153) bulk-symbols_142))"
"(begin"
"(if((lambda(ht_154)(if(hash? ht_154)(immutable? ht_154) #f)) ht_153)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_153)))"
"((letrec-values(((for-loop_155)"
"(lambda(syms_156 i_157)"
"(if i_157"
"(let-values(((sym_158)(unsafe-immutable-hash-iterate-key ht_153 i_157)))"
"(let-values(((syms_159)"
"(let-values(((syms_160) syms_156))"
"(let-values(((syms_161)"
"(let-values()"
"(let-values(((sym-bindings_162)"
"(hash-ref syms_160 sym_158 #f)))"
"(if sym-bindings_162"
"(remove-matching-binding"
" syms_160"
" sym_158"
" sym-bindings_162"
" scopes_140)"
" syms_160)))))"
"(values syms_161)))))"
"(for-loop_155 syms_159(unsafe-immutable-hash-iterate-next ht_153 i_157))))"
" syms_156))))"
" for-loop_155)"
" syms_139"
"(unsafe-immutable-hash-iterate-first ht_153)))))))))"
"(define-values"
"(remove-matching-binding)"
"(lambda(syms_163 sym_164 sym-bindings_165 scopes_166)"
"(hash-set syms_163 sym_164(hash-remove sym-bindings_165 scopes_166))))"
"(define-values"
"(binding-table-symbols)"
"(lambda(table_167 scs_168 s_169 extra-shifts_170)"
"(let-values(((ht_171 bulk-bindings_172)"
"(if(hash? table_167)"
"(values table_167 null)"
"(values"
"(table-with-bulk-bindings-syms table_167)"
"(table-with-bulk-bindings-bulk-bindings table_167)))))"
"(set-union"
"(let-values(((ht_173) ht_171))"
"(begin"
"(if((lambda(ht_174)(hash? ht_174)) ht_173)(void)(let-values()(default-in-hash ht_173)))"
"((letrec-values(((for-loop_175)"
"(lambda(table_176 i_177)"
"(if i_177"
"(let-values(((sym_178 at-sym_179)(hash-iterate-key+value ht_173 i_177)))"
"(let-values(((table_180)"
"(let-values(((table_181) table_176))"
"(if(let-values(((ht_182) at-sym_179))"
"(begin"
"(if((lambda(ht_183)(hash? ht_183)) ht_182)"
"(void)"
"(let-values()(default-in-hash-keys ht_182)))"
"((letrec-values(((for-loop_184)"
"(lambda(result_185 i_186)"
"(if i_186"
"(let-values(((an-scs_187)"
"(hash-iterate-key"
" ht_182"
" i_186)))"
"(let-values(((result_188)"
"(let-values()"
"(let-values(((result_190)"
"(let-values()"
"(let-values()"
"(subset?"
" an-scs_187"
" scs_168)))))"
"(values"
" result_190)))))"
"(if(not"
"((lambda x_191 result_188)"
" an-scs_187))"
"(for-loop_184"
" result_188"
"(hash-iterate-next"
" ht_182"
" i_186))"
" result_188)))"
" result_185))))"
" for-loop_184)"
" #f"
"(hash-iterate-first ht_182))))"
"(let-values(((table_192) table_181))"
"(let-values(((table_193)"
"(let-values()"
"(let-values(((key_194 val_195)"
"(let-values()"
"(values"
"(let-values() sym_178)"
" #t))))"
"(hash-set table_192 key_194 val_195)))))"
"(values table_193)))"
" table_181))))"
"(for-loop_175 table_180(hash-iterate-next ht_173 i_177))))"
" table_176))))"
" for-loop_175)"
" '#hasheq()"
"(hash-iterate-first ht_173))))"
"(let-values(((lst_196) bulk-bindings_172))"
"(begin"
"(if(list? lst_196)(void)(let-values()(in-list lst_196)))"
"((letrec-values(((for-loop_197)"
"(lambda(table_198 lst_199)"
"(if(pair? lst_199)"
"(let-values(((bba_200)(unsafe-car lst_199)))"
"(let-values(((table_201)"
"(let-values(((table_202) table_198))"
"(if(subset?(bulk-binding-at-scopes bba_200) scs_168)"
"(let-values(((ht_203)"
"(bulk-binding-symbols"
"(bulk-binding-at-bulk bba_200)"
" s_169"
" extra-shifts_170)))"
"(begin"
"(if((lambda(ht_204)(hash? ht_204)) ht_203)"
"(void)"
"(let-values()(default-in-hash-keys ht_203)))"
"((letrec-values(((for-loop_205)"
"(lambda(table_206 i_207)"
"(if i_207"
"(let-values(((sym_208)"
"(hash-iterate-key"
" ht_203"
" i_207)))"
"(let-values(((table_209)"
"(let-values(((table_210)"
" table_206))"
"(let-values(((table_211)"
"(let-values()"
"(let-values(((key_212"
" val_213)"
"(let-values()"
"(values"
"(let-values()"
" sym_208)"
" #t))))"
"(hash-set"
" table_210"
" key_212"
" val_213)))))"
"(values"
" table_211)))))"
"(for-loop_205"
" table_209"
"(hash-iterate-next ht_203 i_207))))"
" table_206))))"
" for-loop_205)"
" table_202"
"(hash-iterate-first ht_203))))"
" table_202))))"
"(for-loop_197 table_201(unsafe-cdr lst_199))))"
" table_198))))"
" for-loop_197)"
" '#hasheq()"
" lst_196)))))))"
"(define-values"
"(binding-table-prune-to-reachable)"
"(lambda(bt_214 state_215)"
"(let-values(((or-part_216)(hash-ref(serialize-state-bindings-intern state_215) bt_214 #f)))"
"(if or-part_216"
" or-part_216"
"(let-values(((reachable-scopes_217)(serialize-state-reachable-scopes state_215)))"
"(let-values(((new-syms_218)"
"(let-values(((ht_221)"
"(if(hash? bt_214) bt_214(table-with-bulk-bindings-syms/serialize bt_214))))"
"(begin"
"(if((lambda(ht_222)(if(hash? ht_222)(immutable? ht_222) #f)) ht_221)"
"(void)"
"(let-values()(default-in-immutable-hash ht_221)))"
"((letrec-values(((for-loop_223)"
"(lambda(table_224 i_225)"
"(if i_225"
"(let-values(((sym_226 bindings-for-sym_227)"
"(unsafe-immutable-hash-iterate-key+value ht_221 i_225)))"
"(let-values(((table_228)"
"(let-values(((new-bindings-for-sym_229)"
"(let-values(((ht_230)"
" bindings-for-sym_227))"
"(begin"
"(if((lambda(ht_231)"
"(if(hash? ht_231)"
"(immutable? ht_231)"
" #f))"
" ht_230)"
"(void)"
"(let-values()"
"(default-in-immutable-hash"
" ht_230)))"
"((letrec-values(((for-loop_232)"
"(lambda(table_233"
" i_234)"
"(if i_234"
"(let-values(((scopes_235"
" binding_236)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_230"
" i_234)))"
"(let-values(((table_237)"
"(let-values(((table_238)"
" table_233))"
"(if(subset?"
" scopes_235"
" reachable-scopes_217)"
"(let-values(((table_239)"
" table_238))"
"(let-values(((table_240)"
"(let-values()"
"(let-values(((key_241"
" val_242)"
"(let-values()"
"(values"
"(intern-scopes"
" scopes_235"
" state_215)"
" binding_236))))"
"(hash-set"
" table_239"
" key_241"
" val_242)))))"
"(values"
" table_240)))"
" table_238))))"
"(for-loop_232"
" table_237"
"(unsafe-immutable-hash-iterate-next"
" ht_230"
" i_234))))"
" table_233))))"
" for-loop_232)"
" '#hash()"
"(unsafe-immutable-hash-iterate-first"
" ht_230))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_243)"
"(lambda(table_244)"
"(let-values()"
"(let-values(((table_245)"
"(let-values(((table_246)"
" table_244))"
"(if(positive?"
"(hash-count"
" new-bindings-for-sym_229))"
"(let-values(((table_247)"
" table_246))"
"(let-values(((table_248)"
"(let-values()"
"(let-values(((key_249"
" val_250)"
"(let-values()"
"(values"
" sym_226"
" new-bindings-for-sym_229))))"
"(hash-set"
" table_247"
" key_249"
" val_250)))))"
"(values"
" table_248)))"
" table_246))))"
" table_245)))))"
" for-loop_243)"
" table_224)))))"
"(for-loop_223"
" table_228"
"(unsafe-immutable-hash-iterate-next ht_221 i_225))))"
" table_224))))"
" for-loop_223)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_221))))))"
"(let-values(((new-bulk-bindings_219)"
"(if(hash? bt_214)"
" null"
"(alt-reverse"
"(let-values(((lst_251)(table-with-bulk-bindings-bulk-bindings bt_214)))"
"(begin"
"(if(list? lst_251)(void)(let-values()(in-list lst_251)))"
"((letrec-values(((for-loop_252)"
"(lambda(fold-var_253 lst_254)"
"(if(pair? lst_254)"
"(let-values(((bba_255)(unsafe-car lst_254)))"
"(let-values(((fold-var_256)"
"(let-values(((fold-var_257) fold-var_253))"
"(if(subset?"
"(bulk-binding-at-scopes bba_255)"
" reachable-scopes_217)"
"(let-values(((fold-var_258) fold-var_257))"
"(let-values(((fold-var_259)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((the-struct_260)"
" bba_255))"
"(if(bulk-binding-at?"
" the-struct_260)"
"(let-values(((scopes9_261)"
"(intern-scopes"
"(bulk-binding-at-scopes"
" bba_255)"
" state_215)))"
"(bulk-binding-at2.1"
" scopes9_261"
"(bulk-binding-at-bulk"
" the-struct_260)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                     \"bulk-binding-at?\""
" the-struct_260))))"
" fold-var_258))))"
"(values fold-var_259)))"
" fold-var_257))))"
"(for-loop_252 fold-var_256(unsafe-cdr lst_254))))"
" fold-var_253))))"
" for-loop_252)"
" null"
" lst_251)))))))"
"(let-values(((new-bt_220)"
"(if(pair? new-bulk-bindings_219)"
"(table-with-bulk-bindings1.1 new-syms_218 new-syms_218 new-bulk-bindings_219)"
" new-syms_218)))"
"(begin"
"(hash-set!(serialize-state-bulk-bindings-intern state_215) bt_214 new-bt_220)"
" new-bt_220)))))))))"
"(define-values"
"(binding-table-register-reachable)"
"(lambda(bt_262 reachable-scopes_263 reach_264 register-trigger_265)"
"(let-values(((ht_266)(if(hash? bt_262) bt_262(table-with-bulk-bindings-syms/serialize bt_262))))"
"(begin"
"(if((lambda(ht_267)(if(hash? ht_267)(immutable? ht_267) #f)) ht_266)"
"(void)"
"(let-values()(default-in-immutable-hash ht_266)))"
"((letrec-values(((for-loop_268)"
"(lambda(fold-var_269 i_270)"
"(if i_270"
"(let-values(((sym_271 bindings-for-sym_272)"
"(unsafe-immutable-hash-iterate-key+value ht_266 i_270)))"
"(let-values(((fold-var_273)"
"(let-values(((ht_274) bindings-for-sym_272))"
"(begin"
"(if((lambda(ht_275)(if(hash? ht_275)(immutable? ht_275) #f))"
" ht_274)"
"(void)"
"(let-values()(default-in-immutable-hash ht_274)))"
"((letrec-values(((for-loop_276)"
"(lambda(fold-var_277 i_278)"
"(if i_278"
"(let-values(((scopes_279 binding_280)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_274"
" i_278)))"
"(let-values(((fold-var_281)"
"(let-values()"
"(let-values(((fold-var_283)"
"(let-values()"
"(begin"
"(let-values()"
"(scopes-register-reachable"
" scopes_279"
" binding_280"
" reachable-scopes_263"
" reach_264"
" register-trigger_265))"
"(void)))))"
"(values fold-var_283)))))"
"(for-loop_276"
" fold-var_281"
"(unsafe-immutable-hash-iterate-next"
" ht_274"
" i_278))))"
" fold-var_277))))"
" for-loop_276)"
" fold-var_269"
"(unsafe-immutable-hash-iterate-first ht_274))))))"
"(for-loop_268 fold-var_273(unsafe-immutable-hash-iterate-next ht_266 i_270))))"
" fold-var_269))))"
" for-loop_268)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_266))))))"
"(define-values"
"(scopes-register-reachable)"
"(lambda(scopes_284 binding_285 reachable-scopes_286 reach_287 register-trigger_288)"
"(let-values(((v_289)"
"(if(binding-reach-scopes? binding_285)((binding-reach-scopes-ref binding_285) binding_285) #f)))"
"(if v_289"
"(let-values()"
"(if(subset? scopes_284 reachable-scopes_286)"
"(let-values()(reach_287 v_289))"
"(let-values()"
"(let-values(((ht_290) scopes_284))"
"(begin"
"(if((lambda(ht_291)(if(hash? ht_291)(immutable? ht_291) #f)) ht_290)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_290)))"
"((letrec-values(((for-loop_292)"
"(lambda(fold-var_293 i_294)"
"(if i_294"
"(let-values(((sc_295)(unsafe-immutable-hash-iterate-key ht_290 i_294)))"
"(let-values(((fold-var_296)"
"(let-values(((fold-var_297) fold-var_293))"
"(if(set-member? reachable-scopes_286 sc_295)"
" fold-var_297"
"(let-values()"
"(let-values(((fold-var_299)"
"(let-values()"
"(begin"
"(let-values()"
"(register-trigger_288 sc_295 v_289))"
"(void)))))"
"(values fold-var_299)))))))"
"(for-loop_292"
" fold-var_296"
"(unsafe-immutable-hash-iterate-next ht_290 i_294))))"
" fold-var_293))))"
" for-loop_292)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_290)))))))"
"(void)))))"
"(void)"
"(void)"
"(define-values"
"(propagate-taint!)"
"(lambda(s_1)"
"(if(eq?(syntax-tamper s_1) 'tainted/need-propagate)"
"(let-values()"
"(begin(set-syntax-content! s_1(taint-content(syntax-content s_1)))(set-syntax-tamper! s_1 'tainted)))"
"(void))))"
"(define-values"
"(taint-content)"
"(lambda(d_2)"
"(let-values(((s_3) d_2)"
"((f_4)(lambda(tail?_7 x_8) x_8))"
"((s->_5)"
"(lambda(sub-s_9)"
"(if(tamper-tainted?(syntax-tamper sub-s_9))"
"(let-values() sub-s_9)"
"(let-values()"
"(let-values(((the-struct_10) sub-s_9))"
"(if(syntax?$1 the-struct_10)"
"(let-values(((tamper6_11)(tamper-tainted-for-content(syntax-content sub-s_9))))"
"(syntax1.1"
"(syntax-content the-struct_10)"
"(syntax-scopes the-struct_10)"
"(syntax-shifted-multi-scopes the-struct_10)"
"(syntax-scope-propagations the-struct_10)"
"(syntax-mpi-shifts the-struct_10)"
"(syntax-srcloc the-struct_10)"
"(syntax-props the-struct_10)"
"(syntax-inspector the-struct_10)"
" tamper6_11))"
"                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_10)))))))"
"((seen_6) #f))"
"(let-values(((s_12) s_3)"
"((f_13)"
"(lambda(tail?_15 v_16)"
"(if(syntax?$1 v_16)(let-values()(s->_5 v_16))(let-values()(f_4 tail?_15 v_16)))))"
"((seen_14) seen_6))"
"((letrec-values(((loop_17)"
"(lambda(tail?_18 s_19 prev-depth_20)"
"(let-values(((depth_21)(add1 prev-depth_20)))"
"(if(if seen_14(> depth_21 32) #f)"
"(let-values()"
"(datum-map-slow tail?_18 s_19(lambda(tail?_22 s_23)(f_13 tail?_22 s_23)) seen_14))"
"(if(null? s_19)"
"(let-values()(f_13 tail?_18 s_19))"
"(if(pair? s_19)"
"(let-values()"
"(f_13"
" tail?_18"
"(cons(loop_17 #f(car s_19) depth_21)(loop_17 #t(cdr s_19) depth_21))))"
"(if(let-values(((or-part_24)(symbol? s_19)))"
"(if or-part_24"
" or-part_24"
"(let-values(((or-part_25)(boolean? s_19)))"
"(if or-part_25 or-part_25(number? s_19)))))"
"(let-values()(f_13 #f s_19))"
"(if(let-values(((or-part_26)(vector? s_19)))"
"(if or-part_26"
" or-part_26"
"(let-values(((or-part_27)(box? s_19)))"
"(if or-part_27"
" or-part_27"
"(let-values(((or-part_28)(prefab-struct-key s_19)))"
"(if or-part_28 or-part_28(hash? s_19)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_18"
" s_19"
"(lambda(tail?_29 s_30)(f_13 tail?_29 s_30))"
" seen_14))"
"(let-values()(f_13 #f s_19)))))))))))"
" loop_17)"
" #f"
" s_12"
" 0)))))"
"(define-values(syntax-tainted?$1)(lambda(s_31)(tamper-tainted?(syntax-tamper s_31))))"
"(define-values(syntax-clean?)(lambda(s_32)(tamper-clean?(syntax-tamper s_32))))"
"(define-values"
"(syntax-arm$1)"
"(lambda(s_33 insp_34)"
"(let-values(((t_35)(syntax-tamper s_33)))"
"(if(tamper-tainted? t_35)"
"(let-values() s_33)"
"(if(if t_35"
"(let-values(((or-part_36)(set-member? t_35 insp_34)))"
"(if or-part_36"
" or-part_36"
"(let-values(((ht_37) t_35))"
"(begin"
"(if((lambda(ht_38)(if(hash? ht_38)(immutable? ht_38) #f)) ht_37)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_37)))"
"((letrec-values(((for-loop_39)"
"(lambda(result_40 i_41)"
"(if i_41"
"(let-values(((already-insp_42)"
"(unsafe-immutable-hash-iterate-key ht_37 i_41)))"
"(let-values(((result_43)"
"(let-values()"
"(let-values(((result_45)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same?"
" already-insp_42"
" insp_34)))))"
"(values result_45)))))"
"(if(not((lambda x_46 result_43) already-insp_42))"
"(for-loop_39"
" result_43"
"(unsafe-immutable-hash-iterate-next ht_37 i_41))"
" result_43)))"
" result_40))))"
" for-loop_39)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_37))))))"
" #f)"
"(let-values() s_33)"
"(let-values()"
"(let-values(((the-struct_47) s_33))"
"(if(syntax?$1 the-struct_47)"
"(let-values(((tamper7_48)(set-add(if t_35(remove-inferior t_35 insp_34)(seteq)) insp_34)))"
"(syntax1.1"
"(syntax-content the-struct_47)"
"(syntax-scopes the-struct_47)"
"(syntax-shifted-multi-scopes the-struct_47)"
"(syntax-scope-propagations the-struct_47)"
"(syntax-mpi-shifts the-struct_47)"
"(syntax-srcloc the-struct_47)"
"(syntax-props the-struct_47)"
"(syntax-inspector the-struct_47)"
" tamper7_48))"
"                (raise-argument-error 'struct-copy \"syntax?\" the-struct_47)))))))))"
"(define-values"
"(remove-inferior)"
"(lambda(t_49 insp_50)"
"(let-values(((ht_51) t_49))"
"(begin"
"(if((lambda(ht_52)(if(hash? ht_52)(immutable? ht_52) #f)) ht_51)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_51)))"
"((letrec-values(((for-loop_53)"
"(lambda(table_54 i_55)"
"(if i_55"
"(let-values(((already-insp_56)(unsafe-immutable-hash-iterate-key ht_51 i_55)))"
"(let-values(((table_57)"
"(let-values(((table_58) table_54))"
"(if(inspector-superior-or-same? insp_50 already-insp_56)"
" table_58"
"(let-values(((table_59) table_58))"
"(let-values(((table_60)"
"(let-values()"
"(let-values(((key_61 val_62)"
"(let-values()"
"(values"
"(let-values() already-insp_56)"
" #t))))"
"(hash-set table_59 key_61 val_62)))))"
"(values table_60)))))))"
"(for-loop_53 table_57(unsafe-immutable-hash-iterate-next ht_51 i_55))))"
" table_54))))"
" for-loop_53)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_51))))))"
"(define-values"
"(syntax-disarm$1)"
"(let-values(((syntax-disarm4_63)"
"(lambda(s3_64 insp1_65 insp2_66)"
"(let-values(((s_67) s3_64))"
"(let-values(((insp_68)(if insp2_66 insp1_65 #f)))"
"(let-values()"
"(let-values(((t_69)(syntax-tamper s_67)))"
"(if(not(tamper-armed? t_69))"
"(let-values() s_67)"
"(if(not insp_68)"
"(let-values()"
"(let-values(((the-struct_70) s_67))"
"(if(syntax?$1 the-struct_70)"
"(let-values(((tamper8_71) #f))"
"(syntax1.1"
"(syntax-content the-struct_70)"
"(syntax-scopes the-struct_70)"
"(syntax-shifted-multi-scopes the-struct_70)"
"(syntax-scope-propagations the-struct_70)"
"(syntax-mpi-shifts the-struct_70)"
"(syntax-srcloc the-struct_70)"
"(syntax-props the-struct_70)"
"(syntax-inspector the-struct_70)"
" tamper8_71))"
"                                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_70))))"
"(let-values()"
"(let-values(((new-t_72)(remove-inferior t_69 insp_68)))"
"(let-values(((the-struct_73) s_67))"
"(if(syntax?$1 the-struct_73)"
"(let-values(((tamper9_74)(if(not(set-empty? new-t_72)) new-t_72 #f)))"
"(syntax1.1"
"(syntax-content the-struct_73)"
"(syntax-scopes the-struct_73)"
"(syntax-shifted-multi-scopes the-struct_73)"
"(syntax-scope-propagations the-struct_73)"
"(syntax-mpi-shifts the-struct_73)"
"(syntax-srcloc the-struct_73)"
"(syntax-props the-struct_73)"
"(syntax-inspector the-struct_73)"
" tamper9_74))"
"                                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_73))))))))))))))"
"(case-lambda((s_75)(syntax-disarm4_63 s_75 #f #f))((s_76 insp1_77)(syntax-disarm4_63 s_76 insp1_77 #t)))))"
"(define-values"
"(syntax-rearm$1)"
"(lambda(s_78 from-s_79)"
"(let-values(((t_80)(syntax-tamper s_78)))"
"(if(tamper-tainted? t_80)"
"(let-values() s_78)"
"(let-values()"
"(let-values(((from-t_81)(syntax-tamper from-s_79)))"
"(if(tamper-clean? from-t_81)"
"(let-values() s_78)"
"(if(tamper-tainted? from-t_81)"
"(let-values()"
"(let-values(((the-struct_82) s_78))"
"(if(syntax?$1 the-struct_82)"
"(let-values(((tamper10_83)(tamper-tainted-for-content(syntax-content s_78))))"
"(syntax1.1"
"(syntax-content the-struct_82)"
"(syntax-scopes the-struct_82)"
"(syntax-shifted-multi-scopes the-struct_82)"
"(syntax-scope-propagations the-struct_82)"
"(syntax-mpi-shifts the-struct_82)"
"(syntax-srcloc the-struct_82)"
"(syntax-props the-struct_82)"
"(syntax-inspector the-struct_82)"
" tamper10_83))"
"                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_82))))"
"(if(tamper-clean? t_80)"
"(let-values()"
"(let-values(((the-struct_84) s_78))"
"(if(syntax?$1 the-struct_84)"
"(let-values(((tamper11_85) from-t_81))"
"(syntax1.1"
"(syntax-content the-struct_84)"
"(syntax-scopes the-struct_84)"
"(syntax-shifted-multi-scopes the-struct_84)"
"(syntax-scope-propagations the-struct_84)"
"(syntax-mpi-shifts the-struct_84)"
"(syntax-srcloc the-struct_84)"
"(syntax-props the-struct_84)"
"(syntax-inspector the-struct_84)"
" tamper11_85))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_84))))"
"(let-values()"
"(let-values(((the-struct_86) s_78))"
"(if(syntax?$1 the-struct_86)"
"(let-values(((tamper12_87)"
"(let-values(((ht_88) from-t_81))"
"(begin"
"(if((lambda(ht_89)(if(hash? ht_89)(immutable? ht_89) #f)) ht_88)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_88)))"
"((letrec-values(((for-loop_90)"
"(lambda(t_91 i_92)"
"(if i_92"
"(let-values(((from-i_93)"
"(unsafe-immutable-hash-iterate-key"
" ht_88"
" i_92)))"
"(let-values(((t_94)"
"(let-values(((t_95) t_91))"
"(let-values(((t_96)"
"(let-values()"
"(if(set-member?"
" t_95"
" from-i_93)"
"(let-values() t_95)"
"(if(any-superior?"
" t_95"
" from-i_93)"
"(let-values()"
" t_95)"
"(let-values()"
"(set-add"
"(set-add"
"(remove-inferior"
" t_95"
" from-i_93)"
" from-i_93))))))))"
"(values t_96)))))"
"(for-loop_90"
" t_94"
"(unsafe-immutable-hash-iterate-next ht_88 i_92))))"
" t_91))))"
" for-loop_90)"
" t_80"
"(unsafe-immutable-hash-iterate-first ht_88))))))"
"(syntax1.1"
"(syntax-content the-struct_86)"
"(syntax-scopes the-struct_86)"
"(syntax-shifted-multi-scopes the-struct_86)"
"(syntax-scope-propagations the-struct_86)"
"(syntax-mpi-shifts the-struct_86)"
"(syntax-srcloc the-struct_86)"
"(syntax-props the-struct_86)"
"(syntax-inspector the-struct_86)"
" tamper12_87))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_86)))))))))))))"
"(define-values"
"(syntax-taint$1)"
"(lambda(s_97)"
"(if(tamper-tainted?(syntax-tamper s_97))"
" s_97"
"(let-values(((the-struct_98) s_97))"
"(if(syntax?$1 the-struct_98)"
"(let-values(((tamper13_99)(tamper-tainted-for-content(syntax-content s_97))))"
"(syntax1.1"
"(syntax-content the-struct_98)"
"(syntax-scopes the-struct_98)"
"(syntax-shifted-multi-scopes the-struct_98)"
"(syntax-scope-propagations the-struct_98)"
"(syntax-mpi-shifts the-struct_98)"
"(syntax-srcloc the-struct_98)"
"(syntax-props the-struct_98)"
"(syntax-inspector the-struct_98)"
" tamper13_99))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_98))))))"
"(define-values"
"(any-superior?)"
"(lambda(t_100 from-i_101)"
"(let-values(((ht_102) t_100))"
"(begin"
"(if((lambda(ht_103)(if(hash? ht_103)(immutable? ht_103) #f)) ht_102)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_102)))"
"((letrec-values(((for-loop_104)"
"(lambda(result_105 i_106)"
"(if i_106"
"(let-values(((i_107)(unsafe-immutable-hash-iterate-key ht_102 i_106)))"
"(let-values(((result_108)"
"(let-values()"
"(let-values(((result_110)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same? i_107 from-i_101)))))"
"(values result_110)))))"
"(if(not((lambda x_111 result_108) i_107))"
"(for-loop_104 result_108(unsafe-immutable-hash-iterate-next ht_102 i_106))"
" result_108)))"
" result_105))))"
" for-loop_104)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_102))))))"
"(define-values"
"(inspector-superior-or-same?)"
"(lambda(sup-i_112 i_113)"
"(let-values(((or-part_114)(eq? sup-i_112 i_113)))"
"(if or-part_114 or-part_114(inspector-superior? sup-i_112 i_113)))))"
"(void)"
"(void)"
"(define-values"
"(struct:fallback fallback1.1 fallback? fallback-search-list)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'fallback #f 1 0 #f null 'prefab #f '(0) #f 'fallback)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'search-list))))"
"(define-values"
"(fallback-first)"
"(lambda(smss_21)(if(fallback? smss_21)(car(fallback-search-list smss_21)) smss_21)))"
"(define-values"
"(fallback-rest)"
"(lambda(smss_22)"
"(let-values(((l_23)(cdr(fallback-search-list smss_22))))(if(null?(cdr l_23))(car l_23)(fallback1.1 l_23)))))"
"(define-values"
"(fallback-push)"
"(lambda(smss_24 smss/maybe-fallback_25)"
"(fallback1.1"
"(cons"
" smss_24"
"(if(fallback? smss/maybe-fallback_25)"
"(fallback-search-list smss/maybe-fallback_25)"
"(list smss/maybe-fallback_25))))))"
"(define-values"
"(fallback-update-first)"
"(lambda(smss_26 f_27)"
"(if(fallback? smss_26)"
"(let-values(((l_28)(fallback-search-list smss_26)))(fallback1.1(cons(f_27(car l_28))(cdr l_28))))"
"(f_27 smss_26))))"
"(define-values"
"(fallback-map)"
"(lambda(smss_29 f_30)"
"(if(fallback? smss_29)"
"(fallback1.1"
"(alt-reverse"
"(let-values(((lst_31)(fallback-search-list smss_29)))"
"(begin"
"(if(list? lst_31)(void)(let-values()(in-list lst_31)))"
"((letrec-values(((for-loop_32)"
"(lambda(fold-var_33 lst_34)"
"(if(pair? lst_34)"
"(let-values(((smss_35)(unsafe-car lst_34)))"
"(let-values(((fold-var_36)"
"(let-values(((fold-var_37) fold-var_33))"
"(let-values(((fold-var_38)"
"(let-values()"
"(cons(let-values()(f_30 smss_35)) fold-var_37))))"
"(values fold-var_38)))))"
"(for-loop_32 fold-var_36(unsafe-cdr lst_34))))"
" fold-var_33))))"
" for-loop_32)"
" null"
" lst_31)))))"
"(f_30 smss_29))))"
"(define-values"
"(fallback->list)"
"(lambda(smss_39)(if(fallback? smss_39)(fallback-search-list smss_39)(list smss_39))))"
"(void)"
"(void)"
"(define-values(cache)(box(make-weak-box #f)))"
"(define-values"
"(clear-resolve-cache!)"
"(case-lambda"
"((sym_16)"
"(let-values(((c_17)(weak-box-value(unbox cache))))(if c_17(let-values()(hash-remove! c_17 sym_16))(void))))"
"(()(let-values(((c_18)(weak-box-value(unbox cache))))(if c_18(let-values()(hash-clear! c_18))(void))))))"
"(define-values"
"(struct:entry entry1.1 entry? entry-scs entry-smss entry-phase entry-binding)"
"(let-values(((struct:_19 make-_20 ?_21 -ref_22 -set!_23)"
"(let-values()"
"(let-values()"
"(make-struct-type 'entry #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'entry)))))"
"(values"
" struct:_19"
" make-_20"
" ?_21"
"(make-struct-field-accessor -ref_22 0 'scs)"
"(make-struct-field-accessor -ref_22 1 'smss)"
"(make-struct-field-accessor -ref_22 2 'phase)"
"(make-struct-field-accessor -ref_22 3 'binding))))"
"(define-values"
"(resolve-cache-get)"
"(lambda(sym_54 phase_55 scs_56 smss_57)"
"(let-values(((c_58)(weak-box-value(unbox cache))))"
"(if c_58"
"(let-values(((v_59)(hash-ref c_58 sym_54 #f)))"
"(if v_59"
"(if(eqv? phase_55(entry-phase v_59))"
"(if(set=? scs_56(entry-scs v_59))(if(set=? smss_57(entry-smss v_59))(entry-binding v_59) #f) #f)"
" #f)"
" #f))"
" #f))))"
"(define-values"
"(resolve-cache-set!)"
"(lambda(sym_60 phase_61 scs_62 smss_63 b_64)"
"(let-values(((wb_65)(unbox cache)))"
"(let-values(((c_66)(weak-box-value wb_65)))"
"(if(not c_66)"
"(let-values()"
"(begin"
"(box-cas! cache wb_65(make-weak-box(make-hasheq)))"
"(resolve-cache-set! sym_60 phase_61 scs_62 smss_63 b_64)))"
"(let-values()(hash-set! c_66 sym_60(entry1.1 scs_62 smss_63 phase_61 b_64))))))))"
"(define-values(NUM-CACHE-SLOTS) 8)"
"(define-values(cached-sets)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-sets-pos) 0)"
"(define-values(cached-hashes)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-hashes-pos) 0)"
"(define-values"
"(cache-or-reuse-set)"
"(lambda(s_67)"
"(let-values(((vec_68)"
"(let-values(((or-part_69)(weak-box-value cached-sets)))"
"(if or-part_69"
" or-part_69"
"(let-values(((vec_70)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-sets(make-weak-box vec_70)) vec_70))))))"
"(let-values(((or-part_71)"
"(let-values(((vec_72 len_73)"
"(let-values(((vec_74) vec_68))"
"(begin"
"(if(vector? vec_74)(void)(let-values()(in-vector vec_74)))"
"(values vec_74(unsafe-vector-length vec_74))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_75)"
"(lambda(result_76 pos_77)"
"(if(unsafe-fx< pos_77 len_73)"
"(let-values(((s2_78)(unsafe-vector-ref vec_72 pos_77)))"
"(let-values(((result_79)"
"(let-values()"
"(let-values(((result_81)"
"(let-values()"
"(let-values()"
"(if s2_78"
"(if(set=? s_67 s2_78) s2_78 #f)"
" #f)))))"
"(values result_81)))))"
"(if(not((lambda x_82 result_79) s2_78))"
"(for-loop_75 result_79(unsafe-fx+ 1 pos_77))"
" result_79)))"
" result_76))))"
" for-loop_75)"
" #f"
" 0)))))"
"(if or-part_71"
" or-part_71"
"(begin"
"(vector-set! vec_68 cached-sets-pos s_67)"
"(set! cached-sets-pos(modulo(add1 cached-sets-pos) NUM-CACHE-SLOTS))"
" s_67))))))"
"(define-values"
"(cache-or-reuse-hash)"
"(lambda(s_83)"
"(let-values(((vec_84)"
"(let-values(((or-part_85)(weak-box-value cached-hashes)))"
"(if or-part_85"
" or-part_85"
"(let-values(((vec_86)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-hashes(make-weak-box vec_86)) vec_86))))))"
"(let-values(((or-part_87)"
"(let-values(((vec_88 len_89)"
"(let-values(((vec_90) vec_84))"
"(begin"
"(if(vector? vec_90)(void)(let-values()(in-vector vec_90)))"
"(values vec_90(unsafe-vector-length vec_90))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_91)"
"(lambda(result_92 pos_93)"
"(if(unsafe-fx< pos_93 len_89)"
"(let-values(((s2_94)(unsafe-vector-ref vec_88 pos_93)))"
"(let-values(((result_95)"
"(let-values()"
"(let-values(((result_97)"
"(let-values()"
"(let-values()"
"(if s2_94"
"(if(equal? s_83 s2_94) s2_94 #f)"
" #f)))))"
"(values result_97)))))"
"(if(not((lambda x_98 result_95) s2_94))"
"(for-loop_91 result_95(unsafe-fx+ 1 pos_93))"
" result_95)))"
" result_92))))"
" for-loop_91)"
" #f"
" 0)))))"
"(if or-part_87"
" or-part_87"
"(begin"
"(vector-set! vec_84 cached-hashes-pos s_83)"
"(set! cached-hashes-pos(modulo(add1 cached-hashes-pos) NUM-CACHE-SLOTS))"
" s_83))))))"
"(void)"
"(void)"
"(define-values"
"(struct:scope scope1.1 scope? scope-id scope-kind scope-binding-table set-scope-binding-table!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'scope"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:scope-with-bindings"
"(lambda(s_46 reachable-scopes_47 reach_48 register-trigger_49)"
"(binding-table-register-reachable"
"(scope-binding-table s_46)"
" reachable-scopes_47"
" reach_48"
" register-trigger_49)))"
"(cons prop:reach-scopes(lambda(s_50 reach_51)(void)))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_52 ser-push!_53 state_54)"
"(if(binding-table-empty?(scope-binding-table s_52))"
"(let-values()(ser-push!_53 'tag #f))"
"(let-values()"
"(begin"
"(ser-push!_53 'tag '#:scope-fill!)"
"(ser-push!_53"
"(binding-table-prune-to-reachable(scope-binding-table s_52) state_54)))))))"
"(cons"
" prop:serialize"
"(lambda(s_55 ser-push!_56 state_57)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_57) s_55)"
"(void)"
"                             (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(if(eq? s_55 top-level-common-scope)"
"(let-values()(ser-push!_56 'tag '#:scope))"
"(let-values()"
"(begin(ser-push!_56 'tag '#:scope+kind)(ser-push!_56(scope-kind s_55))))))))"
"(cons"
" prop:custom-write"
"(lambda(sc_58 port_59 mode_60)"
"(begin"
"                           (write-string \"#<scope:\" port_59)"
"(display(scope-id sc_58) port_59)"
"                           (write-string \":\" port_59)"
"(display(scope-kind sc_58) port_59)"
"                           (write-string \">\" port_59)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'scope)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'id)"
"(make-struct-field-accessor -ref_4 1 'kind)"
"(make-struct-field-accessor -ref_4 2 'binding-table)"
"(make-struct-field-mutator -set!_5 2 'binding-table))))"
"(define-values"
"(deserialize-scope)"
"(case-lambda"
"(() top-level-common-scope)"
"((kind_61)(scope1.1(new-deserialize-scope-id!) kind_61 empty-binding-table))))"
"(define-values(deserialize-scope-fill!)(lambda(s_62 bt_63)(set-scope-binding-table! s_62 bt_63)))"
"(define-values"
"(struct:multi-scope"
" multi-scope2.1"
" multi-scope?"
" multi-scope-id"
" multi-scope-name"
" multi-scope-scopes"
" multi-scope-shifted"
" multi-scope-label-shifted)"
"(let-values(((struct:_64 make-_65 ?_66 -ref_67 -set!_68)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'multi-scope"
" #f"
" 5"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(ms_109 reach_110)(reach_110(multi-scope-scopes ms_109))))"
"(cons"
" prop:serialize"
"(lambda(ms_111 ser-push!_112 state_113)"
"(begin"
"(ser-push!_112 'tag '#:multi-scope)"
"(ser-push!_112(multi-scope-name ms_111))"
"(ser-push!_112(multi-scope-scopes ms_111))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'multi-scope)))))"
"(values"
" struct:_64"
" make-_65"
" ?_66"
"(make-struct-field-accessor -ref_67 0 'id)"
"(make-struct-field-accessor -ref_67 1 'name)"
"(make-struct-field-accessor -ref_67 2 'scopes)"
"(make-struct-field-accessor -ref_67 3 'shifted)"
"(make-struct-field-accessor -ref_67 4 'label-shifted))))"
"(define-values"
"(deserialize-multi-scope)"
"(lambda(name_114 scopes_115)"
"(multi-scope2.1(new-deserialize-scope-id!) name_114 scopes_115(box(hasheqv))(box(hash)))))"
"(define-values"
"(struct:representative-scope"
" representative-scope3.1"
" representative-scope?"
" representative-scope-owner"
" representative-scope-phase"
" set-representative-scope-owner!"
" set-representative-scope-phase!)"
"(let-values(((struct:_116 make-_117 ?_118 -ref_119 -set!_120)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'representative-scope"
" struct:scope"
" 2"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(s_152 reach_153)(reach_153(representative-scope-owner s_152))))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_154 ser-push!_155 state_156)"
"(begin"
"(ser-push!_155 'tag '#:representative-scope-fill!)"
"(ser-push!_155(binding-table-prune-to-reachable(scope-binding-table s_154) state_156))"
"(ser-push!_155(representative-scope-owner s_154)))))"
"(cons"
" prop:serialize"
"(lambda(s_157 ser-push!_158 state_159)"
"(begin"
"(ser-push!_158 'tag '#:representative-scope)"
"(ser-push!_158(scope-kind s_157))"
"(ser-push!_158(representative-scope-phase s_157)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_160 port_161 mode_162)"
"(begin"
"                           (write-string \"#<scope:\" port_161)"
"(display(scope-id sc_160) port_161)"
"(if(representative-scope-owner sc_160)"
"(let-values()"
"(begin"
"                                 (write-string \"=\" port_161)"
"(display(multi-scope-id(representative-scope-owner sc_160)) port_161)))"
"(void))"
"                           (write-string \"@\" port_161)"
"(display(representative-scope-phase sc_160) port_161)"
"                           (write-string \">\" port_161)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'representative-scope)))))"
"(values"
" struct:_116"
" make-_117"
" ?_118"
"(make-struct-field-accessor -ref_119 0 'owner)"
"(make-struct-field-accessor -ref_119 1 'phase)"
"(make-struct-field-mutator -set!_120 0 'owner)"
"(make-struct-field-mutator -set!_120 1 'phase))))"
"(define-values"
"(deserialize-representative-scope)"
"(lambda(kind_163 phase_164)"
"(let-values(((v_165)(representative-scope3.1(new-deserialize-scope-id!) kind_163 #f #f phase_164))) v_165)))"
"(define-values"
"(deserialize-representative-scope-fill!)"
"(lambda(s_166 bt_167 owner_168)"
"(begin(deserialize-scope-fill! s_166 bt_167)(set-representative-scope-owner! s_166 owner_168))))"
"(define-values"
"(struct:shifted-multi-scope"
" shifted-multi-scope4.1"
" shifted-multi-scope?"
" shifted-multi-scope-phase"
" shifted-multi-scope-multi-scope)"
"(let-values(((struct:_169 make-_170 ?_171 -ref_172 -set!_173)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-multi-scope"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(sms_202 reach_203)(reach_203(shifted-multi-scope-multi-scope sms_202))))"
"(cons"
" prop:serialize"
"(lambda(sms_204 ser-push!_205 state_206)"
"(begin"
"(ser-push!_205 'tag '#:shifted-multi-scope)"
"(ser-push!_205(shifted-multi-scope-phase sms_204))"
"(ser-push!_205(shifted-multi-scope-multi-scope sms_204)))))"
"(cons"
" prop:custom-write"
"(lambda(sms_207 port_208 mode_209)"
"(begin"
"                           (write-string \"#<scope:\" port_208)"
"(display(multi-scope-id(shifted-multi-scope-multi-scope sms_207)) port_208)"
"                           (write-string \"@\" port_208)"
"(display(shifted-multi-scope-phase sms_207) port_208)"
"                           (write-string \">\" port_208)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'shifted-multi-scope)))))"
"(values"
" struct:_169"
" make-_170"
" ?_171"
"(make-struct-field-accessor -ref_172 0 'phase)"
"(make-struct-field-accessor -ref_172 1 'multi-scope))))"
"(define-values"
"(deserialize-shifted-multi-scope)"
"(lambda(phase_210 multi-scope_211)(intern-shifted-multi-scope phase_210 multi-scope_211)))"
"(define-values"
"(intern-shifted-multi-scope)"
"(lambda(phase_212 multi-scope_213)"
"(letrec-values(((transaction-loop_214)"
"(lambda(boxed-table_215 key_216 make_217)"
"(let-values(((or-part_218)(hash-ref(unbox boxed-table_215) phase_212 #f)))"
"(if or-part_218"
" or-part_218"
"(let-values(((val_219)(make_217)))"
"(let-values(((current_220)(unbox boxed-table_215)))"
"(let-values(((next_221)(hash-set current_220 key_216 val_219)))"
"(if(box-cas! boxed-table_215 current_220 next_221)"
" val_219"
"(transaction-loop_214 boxed-table_215 key_216 make_217))))))))))"
"(if(phase? phase_212)"
"(let-values()"
"(let-values(((or-part_222)(hash-ref(unbox(multi-scope-shifted multi-scope_213)) phase_212 #f)))"
"(if or-part_222"
" or-part_222"
"(transaction-loop_214"
"(multi-scope-shifted multi-scope_213)"
" phase_212"
"(lambda()(shifted-multi-scope4.1 phase_212 multi-scope_213))))))"
"(let-values()"
"(let-values(((or-part_223)(hash-ref(unbox(multi-scope-label-shifted multi-scope_213)) phase_212 #f)))"
"(if or-part_223"
" or-part_223"
"(transaction-loop_214"
"(multi-scope-label-shifted multi-scope_213)"
" phase_212"
"(lambda()(shifted-multi-scope4.1 phase_212 multi-scope_213))))))))))"
"(define-values"
"(struct:shifted-to-label-phase shifted-to-label-phase5.1 shifted-to-label-phase? shifted-to-label-phase-from)"
"(let-values(((struct:_224 make-_225 ?_226 -ref_227 -set!_228)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-to-label-phase"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'shifted-to-label-phase)))))"
"(values struct:_224 make-_225 ?_226(make-struct-field-accessor -ref_227 0 'from))))"
"(define-values(id-counter) 0)"
"(define-values(new-scope-id!)(lambda()(begin(set! id-counter(add1 id-counter)) id-counter)))"
"(define-values(new-deserialize-scope-id!)(lambda()(-(new-scope-id!))))"
"(define-values(top-level-common-scope)(scope1.1 0 'module empty-binding-table))"
"(define-values(new-scope)(lambda(kind_244)(scope1.1(new-scope-id!) kind_244 empty-binding-table)))"
"(define-values"
"(new-multi-scope)"
"(let-values(((new-multi-scope8_245)"
"(lambda(name6_246 name7_247)"
"(let-values(((name_248)(if name7_247 name6_246 #f)))"
"(let-values()"
"(intern-shifted-multi-scope"
" 0"
"(multi-scope2.1(new-scope-id!) name_248(make-hasheqv)(box(hasheqv))(box(hash)))))))))"
"(case-lambda(()(new-multi-scope8_245 #f #f))((name6_249)(new-multi-scope8_245 name6_249 #t)))))"
"(define-values"
"(multi-scope-to-scope-at-phase)"
"(lambda(ms_250 phase_251)"
"(let-values(((or-part_252)(hash-ref(multi-scope-scopes ms_250) phase_251 #f)))"
"(if or-part_252"
" or-part_252"
"(let-values(((s_253)(representative-scope3.1(new-scope-id!) 'module empty-binding-table ms_250 phase_251)))"
"(begin(hash-set!(multi-scope-scopes ms_250) phase_251 s_253) s_253))))))"
"(define-values(scope>?)(lambda(sc1_254 sc2_255)(>(scope-id sc1_254)(scope-id sc2_255))))"
"(define-values(scope<?)(lambda(sc1_256 sc2_257)(<(scope-id sc1_256)(scope-id sc2_257))))"
"(define-values"
"(shifted-multi-scope<?)"
"(lambda(sms1_258 sms2_259)"
"(let-values(((ms1_260)(shifted-multi-scope-multi-scope sms1_258)))"
"(let-values(((ms2_261)(shifted-multi-scope-multi-scope sms2_259)))"
"(if(eq? ms1_260 ms2_261)"
"(let-values(((p1_262)(shifted-multi-scope-phase sms1_258))((p2_263)(shifted-multi-scope-phase sms2_259)))"
"(if(shifted-to-label-phase? p1_262)"
"(let-values()"
"(if(shifted-to-label-phase? p2_263)"
"(let-values()(phase<?(shifted-to-label-phase-from p1_262)(shifted-to-label-phase-from p2_263)))"
"(let-values() #f)))"
"(if(shifted-to-label-phase? p2_263)(let-values() #t)(let-values()(phase<? p1_262 p2_263)))))"
"(<(multi-scope-id ms1_260)(multi-scope-id ms2_261)))))))"
"(define-values"
"(apply-scope)"
"(lambda(s_264 sc_265 op_266 prop-op_267)"
"(if(shifted-multi-scope? sc_265)"
"(let-values(((the-struct_268) s_264))"
"(if(syntax?$1 the-struct_268)"
"(let-values(((shifted-multi-scopes37_269)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_264)"
"(lambda(smss_271)(op_266(fallback-first smss_271) sc_265))))"
"((scope-propagations38_270)"
"(if(datum-has-elements?(syntax-content s_264))"
"(prop-op_267"
"(syntax-scope-propagations s_264)"
" sc_265"
"(syntax-scopes s_264)"
"(syntax-shifted-multi-scopes s_264)"
"(syntax-mpi-shifts s_264))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_268)"
"(syntax-scopes the-struct_268)"
" shifted-multi-scopes37_269"
" scope-propagations38_270"
"(syntax-mpi-shifts the-struct_268)"
"(syntax-srcloc the-struct_268)"
"(syntax-props the-struct_268)"
"(syntax-inspector the-struct_268)"
"(syntax-tamper the-struct_268)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_268)))"
"(let-values(((the-struct_272) s_264))"
"(if(syntax?$1 the-struct_272)"
"(let-values(((scopes39_273)(op_266(syntax-scopes s_264) sc_265))"
"((scope-propagations40_274)"
"(if(datum-has-elements?(syntax-content s_264))"
"(prop-op_267"
"(syntax-scope-propagations s_264)"
" sc_265"
"(syntax-scopes s_264)"
"(syntax-shifted-multi-scopes s_264)"
"(syntax-mpi-shifts s_264))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_272)"
" scopes39_273"
"(syntax-shifted-multi-scopes the-struct_272)"
" scope-propagations40_274"
"(syntax-mpi-shifts the-struct_272)"
"(syntax-srcloc the-struct_272)"
"(syntax-props the-struct_272)"
"(syntax-inspector the-struct_272)"
"(syntax-tamper the-struct_272)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_272))))))"
"(define-values"
"(syntax-e/no-taint)"
"(lambda(s_275)"
"(let-values((()(begin(propagate-taint! s_275)(values))))"
"(let-values(((prop_276)(syntax-scope-propagations s_275)))"
"(if prop_276"
"(let-values(((new-content_277)"
"(let-values(((s_278)(syntax-content s_275))"
"((f_279)(lambda(tail?_282 x_283) x_283))"
"((s->_280)"
"(lambda(sub-s_284)"
"(let-values(((the-struct_285) sub-s_284))"
"(if(syntax?$1 the-struct_285)"
"(let-values(((scopes41_286)"
"(propagation-apply prop_276(syntax-scopes sub-s_284) s_275))"
"((shifted-multi-scopes42_287)"
"(propagation-apply-shifted"
" prop_276"
"(syntax-shifted-multi-scopes sub-s_284)"
" s_275))"
"((mpi-shifts43_288)"
"(propagation-apply-mpi-shifts"
" prop_276"
"(syntax-mpi-shifts sub-s_284)"
" s_275))"
"((inspector44_289)"
"(propagation-apply-inspector"
" prop_276"
"(syntax-inspector sub-s_284)))"
"((scope-propagations45_290)"
"(propagation-merge"
" prop_276"
"(syntax-scope-propagations sub-s_284)"
"(syntax-scopes sub-s_284)"
"(syntax-shifted-multi-scopes sub-s_284)"
"(syntax-mpi-shifts sub-s_284))))"
"(syntax1.1"
"(syntax-content the-struct_285)"
" scopes41_286"
" shifted-multi-scopes42_287"
" scope-propagations45_290"
" mpi-shifts43_288"
"(syntax-srcloc the-struct_285)"
"(syntax-props the-struct_285)"
" inspector44_289"
"(syntax-tamper the-struct_285)))"
"                                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_285)))))"
"((seen_281) #f))"
"(let-values(((s_291) s_278)"
"((f_292)"
"(lambda(tail?_294 v_295)"
"(if(syntax?$1 v_295)"
"(let-values()(s->_280 v_295))"
"(let-values()(f_279 tail?_294 v_295)))))"
"((seen_293) seen_281))"
"((letrec-values(((loop_296)"
"(lambda(tail?_297 s_298 prev-depth_299)"
"(let-values(((depth_300)(add1 prev-depth_299)))"
"(if(if seen_293(> depth_300 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_297"
" s_298"
"(lambda(tail?_301 s_302)(f_292 tail?_301 s_302))"
" seen_293))"
"(if(null? s_298)"
"(let-values()(f_292 tail?_297 s_298))"
"(if(pair? s_298)"
"(let-values()"
"(f_292"
" tail?_297"
"(cons"
"(loop_296 #f(car s_298) depth_300)"
"(loop_296 #t(cdr s_298) depth_300))))"
"(if(let-values(((or-part_303)(symbol? s_298)))"
"(if or-part_303"
" or-part_303"
"(let-values(((or-part_304)(boolean? s_298)))"
"(if or-part_304 or-part_304(number? s_298)))))"
"(let-values()(f_292 #f s_298))"
"(if(let-values(((or-part_305)(vector? s_298)))"
"(if or-part_305"
" or-part_305"
"(let-values(((or-part_306)(box? s_298)))"
"(if or-part_306"
" or-part_306"
"(let-values(((or-part_307)"
"(prefab-struct-key s_298)))"
"(if or-part_307 or-part_307(hash? s_298)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_297"
" s_298"
"(lambda(tail?_308 s_309)(f_292 tail?_308 s_309))"
" seen_293))"
"(let-values()(f_292 #f s_298)))))))))))"
" loop_296)"
" #f"
" s_291"
" 0)))))"
"(begin"
"(set-syntax-content! s_275 new-content_277)"
"(set-syntax-scope-propagations! s_275 #f)"
" new-content_277))"
"(syntax-content s_275))))))"
"(define-values"
"(syntax-e$1)"
"(lambda(s_310)"
"(let-values(((content_311)(syntax-e/no-taint s_310)))"
"(if(not(tamper-armed?(syntax-tamper s_310)))"
"(let-values() content_311)"
"(if(datum-has-elements? content_311)"
"(let-values()(taint-content content_311))"
"(let-values() content_311))))))"
"(define-values"
"(generalize-scope)"
"(lambda(sc_312)"
"(if(representative-scope? sc_312)"
"(intern-shifted-multi-scope(representative-scope-phase sc_312)(representative-scope-owner sc_312))"
" sc_312)))"
"(define-values"
"(add-scope)"
"(lambda(s_313 sc_314)(apply-scope s_313(generalize-scope sc_314) set-add propagation-add)))"
"(define-values"
"(add-scopes)"
"(lambda(s_315 scs_316)"
"(let-values(((lst_317) scs_316))"
"(begin"
"(if(list? lst_317)(void)(let-values()(in-list lst_317)))"
"((letrec-values(((for-loop_318)"
"(lambda(s_319 lst_320)"
"(if(pair? lst_320)"
"(let-values(((sc_321)(unsafe-car lst_320)))"
"(let-values(((s_322)"
"(let-values(((s_323) s_319))"
"(let-values(((s_324)(let-values()(add-scope s_323 sc_321))))"
"(values s_324)))))"
"(for-loop_318 s_322(unsafe-cdr lst_320))))"
" s_319))))"
" for-loop_318)"
" s_315"
" lst_317)))))"
"(define-values"
"(remove-scope)"
"(lambda(s_325 sc_326)(apply-scope s_325(generalize-scope sc_326) set-remove propagation-remove)))"
"(define-values"
"(remove-scopes)"
"(lambda(s_327 scs_328)"
"(let-values(((lst_329) scs_328))"
"(begin"
"(if(list? lst_329)(void)(let-values()(in-list lst_329)))"
"((letrec-values(((for-loop_330)"
"(lambda(s_331 lst_332)"
"(if(pair? lst_332)"
"(let-values(((sc_333)(unsafe-car lst_332)))"
"(let-values(((s_334)"
"(let-values(((s_335) s_331))"
"(let-values(((s_336)(let-values()(remove-scope s_335 sc_333))))"
"(values s_336)))))"
"(for-loop_330 s_334(unsafe-cdr lst_332))))"
" s_331))))"
" for-loop_330)"
" s_327"
" lst_329)))))"
"(define-values"
"(set-flip)"
"(lambda(s_337 e_338)(if(set-member? s_337 e_338)(set-remove s_337 e_338)(set-add s_337 e_338))))"
"(define-values"
"(flip-scope)"
"(lambda(s_339 sc_340)(apply-scope s_339(generalize-scope sc_340) set-flip propagation-flip)))"
"(define-values"
"(flip-scopes)"
"(lambda(s_341 scs_342)"
"(let-values(((lst_343) scs_342))"
"(begin"
"(if(list? lst_343)(void)(let-values()(in-list lst_343)))"
"((letrec-values(((for-loop_344)"
"(lambda(s_345 lst_346)"
"(if(pair? lst_346)"
"(let-values(((sc_347)(unsafe-car lst_346)))"
"(let-values(((s_348)"
"(let-values(((s_349) s_345))"
"(let-values(((s_350)(let-values()(flip-scope s_349 sc_347))))"
"(values s_350)))))"
"(for-loop_344 s_348(unsafe-cdr lst_346))))"
" s_345))))"
" for-loop_344)"
" s_341"
" lst_343)))))"
"(define-values"
"(push-scope)"
"(lambda(s_351 sms_352)"
"(let-values(((smss/maybe-fallbacks46_353) #f))"
"(let-values(((prev-result_354) #f))"
"(let-values(((push_355)"
"(lambda(smss/maybe-fallbacks_356)"
"(if(eq? smss/maybe-fallbacks46_353 smss/maybe-fallbacks_356)"
"(let-values() prev-result_354)"
"(let-values()"
"(let-values(((r_357)"
"(let-values()"
"(let-values(((smss_358)(fallback-first smss/maybe-fallbacks_356)))"
"(if(set-empty? smss_358)"
"(let-values()(set-add smss_358 sms_352))"
"(if(set-member? smss_358 sms_352)"
"(let-values() smss/maybe-fallbacks_356)"
"(let-values()"
"(fallback-push"
"(set-add smss_358 sms_352)"
" smss/maybe-fallbacks_356))))))))"
"(begin"
"(set! smss/maybe-fallbacks46_353 smss/maybe-fallbacks_356)"
"(set! prev-result_354 r_357)"
" r_357)))))))"
"(let-values(((s_359) s_351)"
"((f_360)(lambda(tail?_364 x_365) x_365))"
"((d->s_361)"
"(lambda(s_366 d_367)"
"(let-values(((the-struct_368) s_366))"
"(if(syntax?$1 the-struct_368)"
"(let-values(((content47_369) d_367)"
"((shifted-multi-scopes48_370)"
"(push_355(syntax-shifted-multi-scopes s_366))))"
"(syntax1.1"
" content47_369"
"(syntax-scopes the-struct_368)"
" shifted-multi-scopes48_370"
"(syntax-scope-propagations the-struct_368)"
"(syntax-mpi-shifts the-struct_368)"
"(syntax-srcloc the-struct_368)"
"(syntax-props the-struct_368)"
"(syntax-inspector the-struct_368)"
"(syntax-tamper the-struct_368)))"
"                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_368)))))"
"((s-e_362) syntax-e/no-taint)"
"((seen_363) #f))"
"((letrec-values(((loop_371)"
"(lambda(s_372)"
"(let-values(((s_373) s_372)"
"((f_374)"
"(lambda(tail?_376 v_377)"
"(if(syntax?$1 v_377)"
"(let-values()(d->s_361 v_377(loop_371(s-e_362 v_377))))"
"(let-values()(f_360 tail?_376 v_377)))))"
"((seen_375) seen_363))"
"((letrec-values(((loop_378)"
"(lambda(tail?_379 s_380 prev-depth_381)"
"(let-values(((depth_382)(add1 prev-depth_381)))"
"(if(if seen_375(> depth_382 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_379"
" s_380"
"(lambda(tail?_383 s_384)(f_374 tail?_383 s_384))"
" seen_375))"
"(if(null? s_380)"
"(let-values()(f_374 tail?_379 s_380))"
"(if(pair? s_380)"
"(let-values()"
"(f_374"
" tail?_379"
"(cons"
"(loop_378 #f(car s_380) depth_382)"
"(loop_378 #t(cdr s_380) depth_382))))"
"(if(let-values(((or-part_385)(symbol? s_380)))"
"(if or-part_385"
" or-part_385"
"(let-values(((or-part_386)(boolean? s_380)))"
"(if or-part_386 or-part_386(number? s_380)))))"
"(let-values()(f_374 #f s_380))"
"(if(let-values(((or-part_387)(vector? s_380)))"
"(if or-part_387"
" or-part_387"
"(let-values(((or-part_388)(box? s_380)))"
"(if or-part_388"
" or-part_388"
"(let-values(((or-part_389)"
"(prefab-struct-key s_380)))"
"(if or-part_389"
" or-part_389"
"(hash? s_380)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_379"
" s_380"
"(lambda(tail?_390 s_391)(f_374 tail?_390 s_391))"
" seen_375))"
"(let-values()(f_374 #f s_380)))))))))))"
" loop_378)"
" #f"
" s_373"
" 0)))))"
" loop_371)"
" s_359)))))))"
"(define-values"
"(struct:propagation"
" propagation10.1"
" propagation?"
" propagation-prev-scs"
" propagation-prev-smss"
" propagation-scope-ops"
" propagation-prev-mss"
" propagation-add-mpi-shifts"
" propagation-inspector)"
"(let-values(((struct:_392 make-_393 ?_394 -ref_395 -set!_396)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'propagation"
" #f"
" 6"
" 0"
" #f"
"(list(cons prop:propagation syntax-e$1))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'propagation)))))"
"(values"
" struct:_392"
" make-_393"
" ?_394"
"(make-struct-field-accessor -ref_395 0 'prev-scs)"
"(make-struct-field-accessor -ref_395 1 'prev-smss)"
"(make-struct-field-accessor -ref_395 2 'scope-ops)"
"(make-struct-field-accessor -ref_395 3 'prev-mss)"
"(make-struct-field-accessor -ref_395 4 'add-mpi-shifts)"
"(make-struct-field-accessor -ref_395 5 'inspector))))"
"(define-values"
"(propagation-add)"
"(lambda(prop_437 sc_438 prev-scs_439 prev-smss_440 prev-mss_441)"
"(if prop_437"
"(let-values(((the-struct_442) prop_437))"
"(if(propagation? the-struct_442)"
"(let-values(((scope-ops50_443)(hash-set(propagation-scope-ops prop_437) sc_438 'add)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_442)"
"(propagation-prev-smss the-struct_442)"
" scope-ops50_443"
"(propagation-prev-mss the-struct_442)"
"(propagation-add-mpi-shifts the-struct_442)"
"(propagation-inspector the-struct_442)))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_442)))"
"(propagation10.1 prev-scs_439 prev-smss_440(hasheq sc_438 'add) prev-mss_441 #f #f))))"
"(define-values"
"(propagation-remove)"
"(lambda(prop_444 sc_445 prev-scs_446 prev-smss_447 prev-mss_448)"
"(if prop_444"
"(let-values(((the-struct_449) prop_444))"
"(if(propagation? the-struct_449)"
"(let-values(((scope-ops51_450)(hash-set(propagation-scope-ops prop_444) sc_445 'remove)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_449)"
"(propagation-prev-smss the-struct_449)"
" scope-ops51_450"
"(propagation-prev-mss the-struct_449)"
"(propagation-add-mpi-shifts the-struct_449)"
"(propagation-inspector the-struct_449)))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_449)))"
"(propagation10.1 prev-scs_446 prev-smss_447(hasheq sc_445 'remove) prev-mss_448 #f #f))))"
"(define-values"
"(propagation-flip)"
"(lambda(prop_451 sc_452 prev-scs_453 prev-smss_454 prev-mss_455)"
"(if prop_451"
"(let-values(((ops_456)(propagation-scope-ops prop_451)))"
"(let-values(((current-op_457)(hash-ref ops_456 sc_452 #f)))"
"(if(if(eq? current-op_457 'flip)"
"(if(= 1(hash-count ops_456))"
"(if(not(propagation-inspector prop_451))(not(propagation-add-mpi-shifts prop_451)) #f)"
" #f)"
" #f)"
"(let-values() #f)"
"(let-values()"
"(let-values(((the-struct_458) prop_451))"
"(if(propagation? the-struct_458)"
"(let-values(((scope-ops52_459)"
"(if(eq? current-op_457 'flip)"
"(hash-remove ops_456 sc_452)"
"(hash-set"
" ops_456"
" sc_452"
"(let-values(((tmp_460) current-op_457))"
"(if(equal? tmp_460 'add)"
"(let-values() 'remove)"
"(if(equal? tmp_460 'remove)(let-values() 'add)(let-values() 'flip))))))))"
"(propagation10.1"
"(propagation-prev-scs the-struct_458)"
"(propagation-prev-smss the-struct_458)"
" scope-ops52_459"
"(propagation-prev-mss the-struct_458)"
"(propagation-add-mpi-shifts the-struct_458)"
"(propagation-inspector the-struct_458)))"
"                  (raise-argument-error 'struct-copy \"propagation?\" the-struct_458)))))))"
"(propagation10.1 prev-scs_453 prev-smss_454(hasheq sc_452 'flip) prev-mss_455 #f #f))))"
"(define-values"
"(propagation-mpi-shift)"
"(lambda(prop_461 add_462 inspector_463 prev-scs_464 prev-smss_465 prev-mss_466)"
"(if prop_461"
"(let-values(((the-struct_467) prop_461))"
"(if(propagation? the-struct_467)"
"(let-values(((add-mpi-shifts53_468)"
"(let-values(((base-add_470)(propagation-add-mpi-shifts prop_461)))"
"(if(if add_462 base-add_470 #f)"
"(lambda(mss_471)(add_462(base-add_470 mss_471)))"
"(let-values(((or-part_472) add_462))(if or-part_472 or-part_472 base-add_470)))))"
"((inspector54_469)"
"(let-values(((or-part_473)(propagation-inspector prop_461)))"
"(if or-part_473 or-part_473 inspector_463))))"
"(propagation10.1"
"(propagation-prev-scs the-struct_467)"
"(propagation-prev-smss the-struct_467)"
"(propagation-scope-ops the-struct_467)"
"(propagation-prev-mss the-struct_467)"
" add-mpi-shifts53_468"
" inspector54_469))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_467)))"
"(propagation10.1 prev-scs_464 prev-smss_465 '#hasheq() prev-mss_466 add_462 inspector_463))))"
"(define-values"
"(propagation-apply)"
"(lambda(prop_474 scs_475 parent-s_476)"
"(if(eq?(propagation-prev-scs prop_474) scs_475)"
"(let-values()(syntax-scopes parent-s_476))"
"(let-values()"
"(let-values(((new-scs_477)"
"(let-values(((ht_478)(propagation-scope-ops prop_474)))"
"(begin"
"(if((lambda(ht_479)(if(hash? ht_479)(immutable? ht_479) #f)) ht_478)"
"(void)"
"(let-values()(default-in-immutable-hash ht_478)))"
"((letrec-values(((for-loop_480)"
"(lambda(scs_481 i_482)"
"(if i_482"
"(let-values(((sc_483 op_484)"
"(unsafe-immutable-hash-iterate-key+value ht_478 i_482)))"
"(let-values(((scs_485)"
"(let-values(((scs_486) scs_481))"
"(if(not(shifted-multi-scope? sc_483))"
"(let-values(((scs_487) scs_486))"
"(let-values(((scs_488)"
"(let-values()"
"(let-values(((tmp_489) op_484))"
"(if(equal? tmp_489 'add)"
"(let-values()"
"(set-add scs_487 sc_483))"
"(if(equal? tmp_489 'remove)"
"(let-values()"
"(set-remove"
" scs_487"
" sc_483))"
"(let-values()"
"(set-flip"
" scs_487"
" sc_483))))))))"
"(values scs_488)))"
" scs_486))))"
"(for-loop_480"
" scs_485"
"(unsafe-immutable-hash-iterate-next ht_478 i_482))))"
" scs_481))))"
" for-loop_480)"
" scs_475"
"(unsafe-immutable-hash-iterate-first ht_478))))))"
"(if(set=? new-scs_477(syntax-scopes parent-s_476))"
"(syntax-scopes parent-s_476)"
"(cache-or-reuse-set new-scs_477)))))))"
"(define-values"
"(propagation-apply-shifted)"
"(lambda(prop_490 smss_491 parent-s_492)"
"(if(eq?(propagation-prev-smss prop_490) smss_491)"
"(let-values()(syntax-shifted-multi-scopes parent-s_492))"
"(let-values()"
"(let-values(((new-smss_493)"
"(let-values(((ht_495)(propagation-scope-ops prop_490)))"
"(begin"
"(if((lambda(ht_496)(if(hash? ht_496)(immutable? ht_496) #f)) ht_495)"
"(void)"
"(let-values()(default-in-immutable-hash ht_495)))"
"((letrec-values(((for-loop_497)"
"(lambda(smss_498 i_499)"
"(if i_499"
"(let-values(((sms_500 op_501)"
"(unsafe-immutable-hash-iterate-key+value ht_495 i_499)))"
"(let-values(((smss_502)"
"(let-values(((smss_503) smss_498))"
"(if(shifted-multi-scope? sms_500)"
"(let-values(((smss_504) smss_503))"
"(let-values(((smss_505)"
"(let-values()"
"(fallback-update-first"
" smss_504"
"(lambda(smss_506)"
"(let-values(((tmp_507)"
" op_501))"
"(if(equal? tmp_507 'add)"
"(let-values()"
"(set-add"
" smss_506"
" sms_500))"
"(if(equal?"
" tmp_507"
" 'remove)"
"(let-values()"
"(set-remove"
" smss_506"
" sms_500))"
"(let-values()"
"(set-flip"
" smss_506"
" sms_500))))))))))"
"(values smss_505)))"
" smss_503))))"
"(for-loop_497"
" smss_502"
"(unsafe-immutable-hash-iterate-next ht_495 i_499))))"
" smss_498))))"
" for-loop_497)"
" smss_491"
"(unsafe-immutable-hash-iterate-first ht_495))))))"
"(let-values(((parent-smss_494)(syntax-shifted-multi-scopes parent-s_492)))"
"(if(if(set? new-smss_493)(if(set? parent-smss_494)(set=? new-smss_493 parent-smss_494) #f) #f)"
" parent-smss_494"
"(cache-or-reuse-hash new-smss_493))))))))"
"(define-values"
"(propagation-apply-mpi-shifts)"
"(lambda(prop_508 mss_509 parent-s_510)"
"(if(eq?(propagation-prev-mss prop_508) mss_509)"
"(let-values()(syntax-mpi-shifts parent-s_510))"
"(let-values()"
"(let-values(((add_511)(propagation-add-mpi-shifts prop_508)))(if add_511(add_511 mss_509) mss_509))))))"
"(define-values"
"(propagation-apply-inspector)"
"(lambda(prop_512 i_513)"
"(let-values(((or-part_514) i_513))(if or-part_514 or-part_514(propagation-inspector prop_512)))))"
"(define-values"
"(propagation-merge)"
"(lambda(prop_515 base-prop_516 prev-scs_517 prev-smss_518 prev-mss_519)"
"(if(not base-prop_516)"
"(let-values()"
"(if(if(eq?(propagation-prev-scs prop_515) prev-scs_517)"
"(if(eq?(propagation-prev-smss prop_515) prev-smss_518)"
"(eq?(propagation-prev-mss prop_515) prev-mss_519)"
" #f)"
" #f)"
"(let-values() prop_515)"
"(let-values()"
"(propagation10.1"
" prev-scs_517"
" prev-smss_518"
"(propagation-scope-ops prop_515)"
" prev-mss_519"
"(propagation-add-mpi-shifts prop_515)"
"(propagation-inspector prop_515)))))"
"(let-values()"
"(let-values(((new-ops_520)"
"(let-values(((ht_523)(propagation-scope-ops prop_515)))"
"(begin"
"(if((lambda(ht_524)(if(hash? ht_524)(immutable? ht_524) #f)) ht_523)"
"(void)"
"(let-values()(default-in-immutable-hash ht_523)))"
"((letrec-values(((for-loop_525)"
"(lambda(ops_526 i_527)"
"(if i_527"
"(let-values(((sc_528 op_529)"
"(unsafe-immutable-hash-iterate-key+value ht_523 i_527)))"
"(let-values(((ops_530)"
"(let-values(((ops_531) ops_526))"
"(let-values(((ops_532)"
"(let-values()"
"(let-values(((tmp_533) op_529))"
"(if(equal? tmp_533 'add)"
"(let-values()"
"(hash-set ops_531 sc_528 'add))"
"(if(equal? tmp_533 'remove)"
"(let-values()"
"(hash-set"
" ops_531"
" sc_528"
" 'remove))"
"(let-values()"
"(let-values(((current-op_534)"
"(hash-ref"
" ops_531"
" sc_528"
" #f)))"
"(let-values(((tmp_535)"
" current-op_534))"
"(if(equal? tmp_535 'add)"
"(let-values()"
"(hash-set"
" ops_531"
" sc_528"
" 'remove))"
"(if(equal?"
" tmp_535"
" 'remove)"
"(let-values()"
"(hash-set"
" ops_531"
" sc_528"
" 'add))"
"(if(equal?"
" tmp_535"
" 'flip)"
"(let-values()"
"(hash-remove"
" ops_531"
" sc_528))"
"(let-values()"
"(hash-set"
" ops_531"
" sc_528"
" 'flip))))))))))))))"
"(values ops_532)))))"
"(for-loop_525"
" ops_530"
"(unsafe-immutable-hash-iterate-next ht_523 i_527))))"
" ops_526))))"
" for-loop_525)"
"(propagation-scope-ops base-prop_516)"
"(unsafe-immutable-hash-iterate-first ht_523))))))"
"(let-values(((add_521)(propagation-add-mpi-shifts prop_515)))"
"(let-values(((base-add_522)(propagation-add-mpi-shifts base-prop_516)))"
"(if(if(zero?(hash-count new-ops_520))"
"(if(not add_521)"
"(if(not base-add_522)"
"(if(not(propagation-inspector prop_515))(not(propagation-inspector base-prop_516)) #f)"
" #f)"
" #f)"
" #f)"
" #f"
"(let-values(((the-struct_536) base-prop_516))"
"(if(propagation? the-struct_536)"
"(let-values(((scope-ops55_537) new-ops_520)"
"((add-mpi-shifts56_538)"
"(if(if add_521 base-add_522 #f)"
"(lambda(mss_540)(add_521(base-add_522 mss_540)))"
"(let-values(((or-part_541) add_521))(if or-part_541 or-part_541 base-add_522))))"
"((inspector57_539)"
"(let-values(((or-part_542)(propagation-inspector base-prop_516)))"
"(if or-part_542 or-part_542(propagation-inspector prop_515)))))"
"(propagation10.1"
"(propagation-prev-scs the-struct_536)"
"(propagation-prev-smss the-struct_536)"
" scope-ops55_537"
"(propagation-prev-mss the-struct_536)"
" add-mpi-shifts56_538"
" inspector57_539))"
"                    (raise-argument-error 'struct-copy \"propagation?\" the-struct_536)))))))))))"
"(define-values"
"(shift-multi-scope)"
"(lambda(sms_543 delta_544)"
"(if(zero-phase? delta_544)"
"(let-values() sms_543)"
"(if(label-phase? delta_544)"
"(let-values()"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_543))"
"(let-values() #f)"
"(let-values()"
"(intern-shifted-multi-scope"
"(shifted-to-label-phase5.1(phase- 0(shifted-multi-scope-phase sms_543)))"
"(shifted-multi-scope-multi-scope sms_543)))))"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_543))"
"(let-values() sms_543)"
"(let-values()"
"(intern-shifted-multi-scope"
"(phase+ delta_544(shifted-multi-scope-phase sms_543))"
"(shifted-multi-scope-multi-scope sms_543))))))))"
"(define-values"
"(syntax-shift-phase-level$1)"
"(lambda(s_545 phase_546)"
"(if(eqv? phase_546 0)"
" s_545"
"(let-values()"
"(let-values(((smss58_547) #f))"
"(let-values(((prev-result_548) #f))"
"(let-values(((shift-all_549)"
"(lambda(smss_550)"
"(if(eq? smss58_547 smss_550)"
"(let-values() prev-result_548)"
"(let-values()"
"(let-values(((r_551)"
"(let-values()"
"(fallback-map"
" smss_550"
"(lambda(smss_552)"
"(let-values(((ht_553) smss_552))"
"(begin"
"(if((lambda(ht_554)(if(hash? ht_554)(immutable? ht_554) #f))"
" ht_553)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_553)))"
"((letrec-values(((for-loop_555)"
"(lambda(table_556 i_557)"
"(if i_557"
"(let-values(((sms_558)"
"(unsafe-immutable-hash-iterate-key"
" ht_553"
" i_557)))"
"(let-values(((table_559)"
"(let-values(((new-sms_560)"
"(shift-multi-scope"
" sms_558"
" phase_546)))"
"(begin"
" #t"
"((letrec-values(((for-loop_561)"
"(lambda(table_562)"
"(let-values()"
"(let-values(((table_563)"
"(let-values(((table_564)"
" table_562))"
"(if new-sms_560"
"(let-values(((table_565)"
" table_564))"
"(let-values(((table_566)"
"(let-values()"
"(let-values(((key_567"
" val_568)"
"(let-values()"
"(values"
"(let-values()"
" new-sms_560)"
" #t))))"
"(hash-set"
" table_565"
" key_567"
" val_568)))))"
"(values"
" table_566)))"
" table_564))))"
" table_563)))))"
" for-loop_561)"
" table_556)))))"
"(for-loop_555"
" table_559"
"(unsafe-immutable-hash-iterate-next"
" ht_553"
" i_557))))"
" table_556))))"
" for-loop_555)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_553)))))))))"
"(begin(set! smss58_547 smss_550)(set! prev-result_548 r_551) r_551)))))))"
"(let-values(((s_569) s_545)"
"((f_570)(lambda(tail?_574 d_575) d_575))"
"((d->s_571)"
"(lambda(s_576 d_577)"
"(let-values(((the-struct_578) s_576))"
"(if(syntax?$1 the-struct_578)"
"(let-values(((content59_579) d_577)"
"((shifted-multi-scopes60_580)"
"(shift-all_549(syntax-shifted-multi-scopes s_576))))"
"(syntax1.1"
" content59_579"
"(syntax-scopes the-struct_578)"
" shifted-multi-scopes60_580"
"(syntax-scope-propagations the-struct_578)"
"(syntax-mpi-shifts the-struct_578)"
"(syntax-srcloc the-struct_578)"
"(syntax-props the-struct_578)"
"(syntax-inspector the-struct_578)"
"(syntax-tamper the-struct_578)))"
"                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_578)))))"
"((s-e_572) syntax-e/no-taint)"
"((seen_573) #f))"
"((letrec-values(((loop_581)"
"(lambda(s_582)"
"(let-values(((s_583) s_582)"
"((f_584)"
"(lambda(tail?_586 v_587)"
"(if(syntax?$1 v_587)"
"(let-values()(d->s_571 v_587(loop_581(s-e_572 v_587))))"
"(let-values()(f_570 tail?_586 v_587)))))"
"((seen_585) seen_573))"
"((letrec-values(((loop_588)"
"(lambda(tail?_589 s_590 prev-depth_591)"
"(let-values(((depth_592)(add1 prev-depth_591)))"
"(if(if seen_585(> depth_592 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_589"
" s_590"
"(lambda(tail?_593 s_594)(f_584 tail?_593 s_594))"
" seen_585))"
"(if(null? s_590)"
"(let-values()(f_584 tail?_589 s_590))"
"(if(pair? s_590)"
"(let-values()"
"(f_584"
" tail?_589"
"(cons"
"(loop_588 #f(car s_590) depth_592)"
"(loop_588 #t(cdr s_590) depth_592))))"
"(if(let-values(((or-part_595)(symbol? s_590)))"
"(if or-part_595"
" or-part_595"
"(let-values(((or-part_596)(boolean? s_590)))"
"(if or-part_596"
" or-part_596"
"(number? s_590)))))"
"(let-values()(f_584 #f s_590))"
"(if(let-values(((or-part_597)(vector? s_590)))"
"(if or-part_597"
" or-part_597"
"(let-values(((or-part_598)(box? s_590)))"
"(if or-part_598"
" or-part_598"
"(let-values(((or-part_599)"
"(prefab-struct-key"
" s_590)))"
"(if or-part_599"
" or-part_599"
"(hash? s_590)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_589"
" s_590"
"(lambda(tail?_600 s_601)"
"(f_584 tail?_600 s_601))"
" seen_585))"
"(let-values()(f_584 #f s_590)))))))))))"
" loop_588)"
" #f"
" s_583"
" 0)))))"
" loop_581)"
" s_569)))))))))"
"(define-values"
"(syntax-swap-scopes)"
"(lambda(s_602 src-scopes_603 dest-scopes_604)"
"(if(equal? src-scopes_603 dest-scopes_604)"
" s_602"
"(let-values(((src-smss_605 src-scs_606)"
"(set-partition"
"(let-values(((ht_609) src-scopes_603))"
"(begin"
"(if((lambda(ht_610)(if(hash? ht_610)(immutable? ht_610) #f)) ht_609)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_609)))"
"((letrec-values(((for-loop_611)"
"(lambda(table_612 i_613)"
"(if i_613"
"(let-values(((sc_614)(unsafe-immutable-hash-iterate-key ht_609 i_613)))"
"(let-values(((table_615)"
"(let-values(((table_616) table_612))"
"(let-values(((table_617)"
"(let-values()"
"(let-values(((key_618 val_619)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_614))"
" #t))))"
"(hash-set"
" table_616"
" key_618"
" val_619)))))"
"(values table_617)))))"
"(for-loop_611"
" table_615"
"(unsafe-immutable-hash-iterate-next ht_609 i_613))))"
" table_612))))"
" for-loop_611)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_609))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq)))"
"((dest-smss_607 dest-scs_608)"
"(set-partition"
"(let-values(((ht_620) dest-scopes_604))"
"(begin"
"(if((lambda(ht_621)(if(hash? ht_621)(immutable? ht_621) #f)) ht_620)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_620)))"
"((letrec-values(((for-loop_622)"
"(lambda(table_623 i_624)"
"(if i_624"
"(let-values(((sc_625)(unsafe-immutable-hash-iterate-key ht_620 i_624)))"
"(let-values(((table_626)"
"(let-values(((table_627) table_623))"
"(let-values(((table_628)"
"(let-values()"
"(let-values(((key_629 val_630)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_625))"
" #t))))"
"(hash-set"
" table_627"
" key_629"
" val_630)))))"
"(values table_628)))))"
"(for-loop_622"
" table_626"
"(unsafe-immutable-hash-iterate-next ht_620 i_624))))"
" table_623))))"
" for-loop_622)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_620))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq))))"
"(let-values(((scs61_631) #f))"
"(let-values(((prev-result_632) #f))"
"(let-values(((swap-scs_633)"
"(lambda(scs_637)"
"(if(eq? scs61_631 scs_637)"
"(let-values() prev-result_632)"
"(let-values()"
"(let-values(((r_638)"
"(let-values()"
"(if(subset? src-scs_606 scs_637)"
"(set-union(set-subtract scs_637 src-scs_606) dest-scs_608)"
" scs_637))))"
"(begin(set! scs61_631 scs_637)(set! prev-result_632 r_638) r_638)))))))"
"(let-values(((smss62_634) #f))"
"(let-values(((prev-result_635) #f))"
"(let-values(((swap-smss_636)"
"(lambda(smss_639)"
"(if(eq? smss62_634 smss_639)"
"(let-values() prev-result_635)"
"(let-values()"
"(let-values(((r_640)"
"(let-values()"
"(fallback-update-first"
" smss_639"
"(lambda(smss_641)"
"(if(subset? src-smss_605 smss_641)"
"(set-union"
"(set-subtract smss_641 src-smss_605)"
" dest-smss_607)"
" smss_641))))))"
"(begin(set! smss62_634 smss_639)(set! prev-result_635 r_640) r_640)))))))"
"(let-values(((s_642) s_602)"
"((f_643)(lambda(tail?_647 d_648) d_648))"
"((d->s_644)"
"(lambda(s_649 d_650)"
"(let-values(((the-struct_651) s_649))"
"(if(syntax?$1 the-struct_651)"
"(let-values(((content63_652) d_650)"
"((scopes64_653)(swap-scs_633(syntax-scopes s_649)))"
"((shifted-multi-scopes65_654)"
"(swap-smss_636(syntax-shifted-multi-scopes s_649))))"
"(syntax1.1"
" content63_652"
" scopes64_653"
" shifted-multi-scopes65_654"
"(syntax-scope-propagations the-struct_651)"
"(syntax-mpi-shifts the-struct_651)"
"(syntax-srcloc the-struct_651)"
"(syntax-props the-struct_651)"
"(syntax-inspector the-struct_651)"
"(syntax-tamper the-struct_651)))"
"                                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_651)))))"
"((s-e_645) syntax-e/no-taint)"
"((seen_646) #f))"
"((letrec-values(((loop_655)"
"(lambda(s_656)"
"(let-values(((s_657) s_656)"
"((f_658)"
"(lambda(tail?_660 v_661)"
"(if(syntax?$1 v_661)"
"(let-values()(d->s_644 v_661(loop_655(s-e_645 v_661))))"
"(let-values()(f_643 tail?_660 v_661)))))"
"((seen_659) seen_646))"
"((letrec-values(((loop_662)"
"(lambda(tail?_663 s_664 prev-depth_665)"
"(let-values(((depth_666)(add1 prev-depth_665)))"
"(if(if seen_659(> depth_666 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_663"
" s_664"
"(lambda(tail?_667 s_668)"
"(f_658 tail?_667 s_668))"
" seen_659))"
"(if(null? s_664)"
"(let-values()(f_658 tail?_663 s_664))"
"(if(pair? s_664)"
"(let-values()"
"(f_658"
" tail?_663"
"(cons"
"(loop_662 #f(car s_664) depth_666)"
"(loop_662 #t(cdr s_664) depth_666))))"
"(if(let-values(((or-part_669)"
"(symbol? s_664)))"
"(if or-part_669"
" or-part_669"
"(let-values(((or-part_670)"
"(boolean? s_664)))"
"(if or-part_670"
" or-part_670"
"(number? s_664)))))"
"(let-values()(f_658 #f s_664))"
"(if(let-values(((or-part_671)"
"(vector? s_664)))"
"(if or-part_671"
" or-part_671"
"(let-values(((or-part_672)"
"(box? s_664)))"
"(if or-part_672"
" or-part_672"
"(let-values(((or-part_673)"
"(prefab-struct-key"
" s_664)))"
"(if or-part_673"
" or-part_673"
"(hash? s_664)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_663"
" s_664"
"(lambda(tail?_674 s_675)"
"(f_658 tail?_674 s_675))"
" seen_659))"
"(let-values()(f_658 #f s_664)))))))))))"
" loop_662)"
" #f"
" s_657"
" 0)))))"
" loop_655)"
" s_642))))))))))))"
"(define-values"
"(syntax-scope-set)"
"(lambda(s_676 phase_677)"
"(scope-set-at-fallback s_676(fallback-first(syntax-shifted-multi-scopes s_676)) phase_677)))"
"(define-values"
"(scope-set-at-fallback)"
"(lambda(s_678 smss_679 phase_680)"
"(let-values(((ht_681) smss_679))"
"(begin"
"(if((lambda(ht_682)(if(hash? ht_682)(immutable? ht_682) #f)) ht_681)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_681)))"
"((letrec-values(((for-loop_683)"
"(lambda(scopes_684 i_685)"
"(if i_685"
"(let-values(((sms_686)(unsafe-immutable-hash-iterate-key ht_681 i_685)))"
"(let-values(((scopes_687)"
"(let-values(((scopes_688) scopes_684))"
"(if(let-values(((or-part_689)(label-phase? phase_680)))"
"(if or-part_689"
" or-part_689"
"(not"
"(shifted-to-label-phase?"
"(shifted-multi-scope-phase sms_686)))))"
"(let-values(((scopes_690) scopes_688))"
"(let-values(((scopes_691)"
"(let-values()"
"(set-add"
" scopes_690"
"(multi-scope-to-scope-at-phase"
"(shifted-multi-scope-multi-scope sms_686)"
"(let-values(((ph_692)"
"(shifted-multi-scope-phase"
" sms_686)))"
"(if(shifted-to-label-phase? ph_692)"
"(shifted-to-label-phase-from ph_692)"
"(phase- ph_692 phase_680))))))))"
"(values scopes_691)))"
" scopes_688))))"
"(for-loop_683 scopes_687(unsafe-immutable-hash-iterate-next ht_681 i_685))))"
" scopes_684))))"
" for-loop_683)"
"(syntax-scopes s_678)"
"(unsafe-immutable-hash-iterate-first ht_681))))))"
"(define-values"
"(find-max-scope)"
"(lambda(scopes_693)"
"(begin"
"      (if (set-empty? scopes_693) (let-values () (error \"cannot bind in empty scope set\")) (void))"
"(let-values(((ht_694) scopes_693))"
"(begin"
"(if((lambda(ht_695)(if(hash? ht_695)(immutable? ht_695) #f)) ht_694)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_694)))"
"((letrec-values(((for-loop_696)"
"(lambda(max-sc_697 i_698)"
"(if i_698"
"(let-values(((sc_699)(unsafe-immutable-hash-iterate-key ht_694 i_698)))"
"(let-values(((max-sc_700)"
"(let-values(((max-sc_701) max-sc_697))"
"(let-values(((max-sc_702)"
"(let-values()"
"(if(scope>? sc_699 max-sc_701) sc_699 max-sc_701))))"
"(values max-sc_702)))))"
"(for-loop_696 max-sc_700(unsafe-immutable-hash-iterate-next ht_694 i_698))))"
" max-sc_697))))"
" for-loop_696)"
"(set-first scopes_693)"
"(unsafe-immutable-hash-iterate-first ht_694)))))))"
"(define-values"
"(add-binding-in-scopes!16.1)"
"(lambda(just-for-nominal?11_703 just-for-nominal?12_704 scopes13_705 sym14_706 binding15_707)"
"(let-values(((scopes_708) scopes13_705))"
"(let-values(((sym_709) sym14_706))"
"(let-values(((binding_710) binding15_707))"
"(let-values(((just-for-nominal?_711)(if just-for-nominal?12_704 just-for-nominal?11_703 #f)))"
"(let-values()"
"(let-values(((max-sc_712)(find-max-scope scopes_708)))"
"(let-values(((bt_713)"
"(binding-table-add"
"(scope-binding-table max-sc_712)"
" scopes_708"
" sym_709"
" binding_710"
" just-for-nominal?_711)))"
"(begin(set-scope-binding-table! max-sc_712 bt_713)(clear-resolve-cache! sym_709)))))))))))"
"(define-values"
"(add-bulk-binding-in-scopes!)"
"(lambda(scopes_734 bulk-binding_735)"
"(let-values(((max-sc_736)(find-max-scope scopes_734)))"
"(let-values(((bt_737)(binding-table-add-bulk(scope-binding-table max-sc_736) scopes_734 bulk-binding_735)))"
"(begin(set-scope-binding-table! max-sc_736 bt_737)(clear-resolve-cache!))))))"
"(define-values"
"(syntax-any-macro-scopes?)"
"(lambda(s_739)"
"(let-values(((ht_740)(syntax-scopes s_739)))"
"(begin"
"(if((lambda(ht_741)(if(hash? ht_741)(immutable? ht_741) #f)) ht_740)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_740)))"
"((letrec-values(((for-loop_742)"
"(lambda(result_743 i_744)"
"(if i_744"
"(let-values(((sc_745)(unsafe-immutable-hash-iterate-key ht_740 i_744)))"
"(let-values(((result_746)"
"(let-values()"
"(let-values(((result_748)"
"(let-values()"
"(let-values()(eq?(scope-kind sc_745) 'macro)))))"
"(values result_748)))))"
"(if(not((lambda x_749 result_746) sc_745))"
"(for-loop_742 result_746(unsafe-immutable-hash-iterate-next ht_740 i_744))"
" result_746)))"
" result_743))))"
" for-loop_742)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_740))))))"
"(define-values"
"(resolve29.1)"
"(lambda(ambiguous-value19_750"
" ambiguous-value23_751"
" exactly?20_752"
" exactly?24_753"
" extra-shifts22_754"
" extra-shifts26_755"
" get-scopes?21_756"
" get-scopes?25_757"
" s27_758"
" phase28_759)"
"(let-values(((s_760) s27_758))"
"(let-values(((phase_761) phase28_759))"
"(let-values(((ambiguous-value_762)(if ambiguous-value23_751 ambiguous-value19_750 #f)))"
"(let-values(((exactly?_763)(if exactly?24_753 exactly?20_752 #f)))"
"(let-values(((get-scopes?_764)(if get-scopes?25_757 get-scopes?21_756 #f)))"
"(let-values(((extra-shifts_765)(if extra-shifts26_755 extra-shifts22_754 null)))"
"(let-values()"
"(let-values(((sym_766)(syntax-content s_760)))"
"((letrec-values(((fallback-loop_767)"
"(lambda(smss_768)"
"(let-values(((c1_769)"
"(if(not exactly?_763)"
"(if(not get-scopes?_764)"
"(resolve-cache-get"
" sym_766"
" phase_761"
"(syntax-scopes s_760)"
"(fallback-first smss_768))"
" #f)"
" #f)))"
"(if c1_769"
"((lambda(b_770) b_770) c1_769)"
"(let-values()"
"(let-values(((scopes_771)"
"(scope-set-at-fallback"
" s_760"
"(fallback-first smss_768)"
" phase_761)))"
"(let-values(((best-scopes_772 best-binding_773)"
"(let-values(((ht_774) scopes_771))"
"(begin"
"(if((lambda(ht_775)"
"(if(hash? ht_775)(immutable? ht_775) #f))"
" ht_774)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys ht_774)))"
"((letrec-values(((for-loop_776)"
"(lambda(best-scopes_777"
" best-binding_778"
" i_779)"
"(if i_779"
"(let-values(((sc_780)"
"(unsafe-immutable-hash-iterate-key"
" ht_774"
" i_779)))"
"(let-values(((best-scopes_781"
" best-binding_782)"
"(let-values(((ht_783"
" bulk-bindings_784)"
"(let-values(((table_787)"
"(scope-binding-table"
" sc_780)))"
"(if(hash?"
" table_787)"
"(values"
"(hash-ref"
" table_787"
" sym_766"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_787)"
" sym_766"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_787)))))"
"((s_785)"
" s_760)"
"((extra-shifts_786)"
" extra-shifts_765))"
"(begin"
" #t"
"((letrec-values(((for-loop_788)"
"(lambda(best-scopes_789"
" best-binding_790"
" i_791)"
"(if(not"
"(null?"
" i_791))"
"(let-values(((b-scopes_792)"
"(if(pair?"
" i_791)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_791)))"
"(let-values()"
"(hash-iterate-key"
" ht_783"
" i_791))))"
"((binding_793)"
"(if(pair?"
" i_791)"
"(let-values()"
"(let-values(((bulk_794)"
"(bulk-binding-at-bulk"
"(car"
" i_791))))"
"(let-values(((b-info_795)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_794"
" s_785"
" extra-shifts_786)"
" sym_766"
" #f)))"
"(if b-info_795"
"((bulk-binding-create"
" bulk_794)"
" bulk_794"
" b-info_795"
" sym_766)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_783"
" i_791)))))"
"(let-values(((best-scopes_796"
" best-binding_797)"
"(let-values(((best-scopes_798)"
" best-scopes_789)"
"((best-binding_799)"
" best-binding_790))"
"(if(if b-scopes_792"
"(if binding_793"
"(subset?"
" b-scopes_792"
" scopes_771)"
" #f)"
" #f)"
"(let-values(((best-scopes_800)"
" best-scopes_798)"
"((best-binding_801)"
" best-binding_799))"
"(let-values(((best-scopes_802"
" best-binding_803)"
"(let-values()"
"(if(pair?"
" best-scopes_800)"
"(let-values()"
"(if(let-values(((lst_804)"
" best-scopes_800))"
"(begin"
"(if(list?"
" lst_804)"
"(void)"
"(let-values()"
"(in-list"
" lst_804)))"
"((letrec-values(((for-loop_805)"
"(lambda(result_806"
" lst_807)"
"(if(pair?"
" lst_807)"
"(let-values(((amb-scopes_808)"
"(unsafe-car"
" lst_807)))"
"(let-values(((result_809)"
"(let-values()"
"(let-values(((result_811)"
"(let-values()"
"(let-values()"
"(subset?"
" amb-scopes_808"
" b-scopes_792)))))"
"(values"
" result_811)))))"
"(if(not"
"((lambda x_812"
"(not"
" result_809))"
" amb-scopes_808))"
"(for-loop_805"
" result_809"
"(unsafe-cdr"
" lst_807))"
" result_809)))"
" result_806))))"
" for-loop_805)"
" #t"
" lst_804)))"
"(let-values()"
"(values"
" b-scopes_792"
" binding_793))"
"(let-values()"
"(values"
"(cons"
" b-scopes_792"
" best-scopes_800)"
" #f))))"
"(if(not"
" best-scopes_800)"
"(let-values()"
"(values"
" b-scopes_792"
" binding_793))"
"(if(subset?"
" b-scopes_792"
" best-scopes_800)"
"(let-values()"
"(values"
" best-scopes_800"
" best-binding_801))"
"(if(subset?"
" best-scopes_800"
" b-scopes_792)"
"(let-values()"
"(values"
" b-scopes_792"
" binding_793))"
"(let-values()"
"(values"
"(list"
" best-scopes_800"
" b-scopes_792)"
" #f)))))))))"
"(values"
" best-scopes_802"
" best-binding_803)))"
"(values"
" best-scopes_798"
" best-binding_799)))))"
"(for-loop_788"
" best-scopes_796"
" best-binding_797"
"(if(pair?"
" i_791)"
"(let-values()"
"(cdr"
" i_791))"
"(let-values()"
"(let-values(((or-part_813)"
"(hash-iterate-next"
" ht_783"
" i_791)))"
"(if or-part_813"
" or-part_813"
" bulk-bindings_784)))))))"
"(values"
" best-scopes_789"
" best-binding_790)))))"
" for-loop_788)"
" best-scopes_777"
" best-binding_778"
"(let-values(((or-part_814)"
"(hash-iterate-first"
" ht_783)))"
"(if or-part_814"
" or-part_814"
" bulk-bindings_784)))))))"
"(for-loop_776"
" best-scopes_781"
" best-binding_782"
"(unsafe-immutable-hash-iterate-next"
" ht_774"
" i_779))))"
"(values"
" best-scopes_777"
" best-binding_778)))))"
" for-loop_776)"
" #f"
" #f"
"(unsafe-immutable-hash-iterate-first ht_774))))))"
"(if(pair? best-scopes_772)"
"(let-values()"
"(if(fallback? smss_768)"
"(fallback-loop_767(fallback-rest smss_768))"
" ambiguous-value_762))"
"(if best-scopes_772"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_766"
" phase_761"
"(syntax-scopes s_760)"
"(fallback-first smss_768)"
" best-binding_773)"
"(if(let-values(((or-part_815)(not exactly?_763)))"
"(if or-part_815"
" or-part_815"
"(eqv?"
"(set-count scopes_771)"
"(set-count best-scopes_772))))"
"(if get-scopes?_764 best-scopes_772 best-binding_773)"
" #f)))"
"(let-values()"
"(if(fallback? smss_768)"
"(fallback-loop_767(fallback-rest smss_768))"
" #f))))))))))))"
" fallback-loop_767)"
"(syntax-shifted-multi-scopes s_760))))))))))))"
"(define-values"
"(bound-identifier=?$1)"
"(lambda(a_851 b_852 phase_853)"
"(if(eq?(syntax-e$1 a_851)(syntax-e$1 b_852))"
"(equal?(syntax-scope-set a_851 phase_853)(syntax-scope-set b_852 phase_853))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(syntax-property$1)"
"(case-lambda"
"((s_1 key_2)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_1)))"
"(values))))"
"(let-values(((v_3)(hash-ref(syntax-props s_1) key_2 #f)))(plain-property-value v_3))))"
"((s_4 key_5 val_6)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_4)))"
"(values))))"
"(let-values(((pval_7)(if(eq? key_5 'paren-shape)(preserved-property-value1.1 val_6) val_6)))"
"(let-values(((the-struct_8) s_4))"
"(if(syntax?$1 the-struct_8)"
"(let-values(((props1_9)(hash-set(syntax-props s_4) key_5 pval_7)))"
"(syntax1.1"
"(syntax-content the-struct_8)"
"(syntax-scopes the-struct_8)"
"(syntax-shifted-multi-scopes the-struct_8)"
"(syntax-scope-propagations the-struct_8)"
"(syntax-mpi-shifts the-struct_8)"
"(syntax-srcloc the-struct_8)"
" props1_9"
"(syntax-inspector the-struct_8)"
"(syntax-tamper the-struct_8)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_8))))))"
"((s_10 key_11 val_12 preserved?_13)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_10)))"
"(values))))"
"(let-values((()"
"(begin"
"(if preserved?_13"
"(let-values()"
"(if(if(symbol? key_11)(symbol-interned? key_11) #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-property"
"                               \"key for a perserved property must be an interned symbol\""
"                               \"given key\""
" key_11"
"                               \"given value\""
" val_12))))"
"(void))"
"(values))))"
"(let-values(((pval_14)(if preserved?_13(preserved-property-value1.1 val_12) val_12)))"
"(let-values(((the-struct_15) s_10))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((props2_16)(hash-set(syntax-props s_10) key_11 pval_14)))"
"(syntax1.1"
"(syntax-content the-struct_15)"
"(syntax-scopes the-struct_15)"
"(syntax-shifted-multi-scopes the-struct_15)"
"(syntax-scope-propagations the-struct_15)"
"(syntax-mpi-shifts the-struct_15)"
"(syntax-srcloc the-struct_15)"
" props2_16"
"(syntax-inspector the-struct_15)"
"(syntax-tamper the-struct_15)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_15)))))))))"
"(define-values"
"(1/syntax-property-preserved?)"
"(lambda(s_17 key_18)"
"(begin"
"      (if (syntax?$1 s_17) (void) (let-values () (raise-argument-error 'syntax-property-preserved \"syntax?\" s_17)))"
"(if(if(symbol? key_18)(symbol-interned? key_18) #f)"
"(void)"
"        (let-values () (raise-argument-error 'syntax-property \"(and/c symbol? symbol-interned?)\" key_18)))"
"(preserved-property-value?(hash-ref(syntax-props s_17) key_18 #f)))))"
"(define-values"
"(1/syntax-property-symbol-keys)"
"(lambda(s_19)"
"(begin"
"      (if (syntax?$1 s_19) (void) (let-values () (raise-argument-error 'syntax-property-symbol-keys \"syntax\" s_19)))"
"(alt-reverse"
"(let-values(((ht_20)(syntax-props s_19)))"
"(begin"
"(if((lambda(ht_21)(if(hash? ht_21)(immutable? ht_21) #f)) ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)(unsafe-immutable-hash-iterate-key+value ht_20 i_24)))"
"(let-values(((fold-var_27)"
"(let-values(((fold-var_28) fold-var_23))"
"(if(if(symbol? k_25)(symbol-interned? k_25) #f)"
"(let-values(((fold-var_29) fold-var_28))"
"(let-values(((fold-var_30)"
"(let-values()"
"(cons(let-values() k_25) fold-var_29))))"
"(values fold-var_30)))"
" fold-var_28))))"
"(for-loop_22 fold-var_27(unsafe-immutable-hash-iterate-next ht_20 i_24))))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(unsafe-immutable-hash-iterate-first ht_20))))))))"
"(define-values"
"(syntax-property-remove)"
"(lambda(s_31 key_32)"
"(if(hash-ref(syntax-props s_31) key_32 #f)"
"(let-values(((the-struct_33) s_31))"
"(if(syntax?$1 the-struct_33)"
"(let-values(((props3_34)(hash-remove(syntax-props s_31) key_32)))"
"(syntax1.1"
"(syntax-content the-struct_33)"
"(syntax-scopes the-struct_33)"
"(syntax-shifted-multi-scopes the-struct_33)"
"(syntax-scope-propagations the-struct_33)"
"(syntax-mpi-shifts the-struct_33)"
"(syntax-srcloc the-struct_33)"
" props3_34"
"(syntax-inspector the-struct_33)"
"(syntax-tamper the-struct_33)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_33)))"
" s_31)))"
"(void)"
"(void)"
"(define-values"
"(struct:full-binding full-binding1.1 full-binding? full-binding-frame-id full-binding-free=id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-binding"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:binding-reach-scopes(lambda(b_27)(binding-free=id b_27))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'full-binding)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'frame-id)"
"(make-struct-field-accessor -ref_4 1 'free=id))))"
"(define-values(binding-frame-id)(lambda(b_28)(if(full-binding? b_28)(full-binding-frame-id b_28) #f)))"
"(define-values(binding-free=id)(lambda(b_29)(if(full-binding? b_29)(full-binding-free=id b_29) #f)))"
"(void)"
"(void)"
"(define-values"
"(make-module-binding20.1)"
"(lambda(extra-inspector7_1"
" extra-inspector15_2"
" extra-nominal-bindings8_3"
" extra-nominal-bindings16_4"
" frame-id5_5"
" frame-id13_6"
" free=id6_7"
" free=id14_8"
" nominal-module1_9"
" nominal-module9_10"
" nominal-phase2_11"
" nominal-phase10_12"
" nominal-require-phase4_13"
" nominal-require-phase12_14"
" nominal-sym3_15"
" nominal-sym11_16"
" module17_17"
" phase18_18"
" sym19_19)"
"(let-values(((module_20) module17_17))"
"(let-values(((phase_21) phase18_18))"
"(let-values(((sym_22) sym19_19))"
"(let-values(((nominal-module_23)(if nominal-module9_10 nominal-module1_9 module_20)))"
"(let-values(((nominal-phase_24)(if nominal-phase10_12 nominal-phase2_11 phase_21)))"
"(let-values(((nominal-sym_25)(if nominal-sym11_16 nominal-sym3_15 sym_22)))"
"(let-values(((nominal-require-phase_26)(if nominal-require-phase12_14 nominal-require-phase4_13 0)))"
"(let-values(((frame-id_27)(if frame-id13_6 frame-id5_5 #f)))"
"(let-values(((free=id_28)(if free=id14_8 free=id6_7 #f)))"
"(let-values(((extra-inspector_29)(if extra-inspector15_2 extra-inspector7_1 #f)))"
"(let-values(((extra-nominal-bindings_30)"
"(if extra-nominal-bindings16_4 extra-nominal-bindings8_3 null)))"
"(let-values()"
"(if(let-values(((or-part_31) frame-id_27))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32) free=id_28))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33) extra-inspector_29))"
"(if or-part_33"
" or-part_33"
"(not"
"(if(eqv? nominal-phase_24 phase_21)"
"(if(eq? nominal-sym_25 sym_22)"
"(if(eqv? nominal-require-phase_26 0)"
"(null? extra-nominal-bindings_30)"
" #f)"
" #f)"
" #f))))))))"
"(let-values()"
"(full-module-binding49.1"
" frame-id_27"
" free=id_28"
" module_20"
" phase_21"
" sym_22"
" nominal-module_23"
" nominal-phase_24"
" nominal-sym_25"
" nominal-require-phase_26"
" extra-inspector_29"
" extra-nominal-bindings_30))"
"(if(if(eq? module_20 nominal-module_23)(eqv? phase_21 0) #f)"
"(let-values()(very-simple-module-binding51.1 module_20 sym_22))"
"(let-values()"
"(simple-module-binding50.1"
" module_20"
" phase_21"
" sym_22"
" nominal-module_23))))))))))))))))))"
"(define-values"
"(module-binding-update46.1)"
"(lambda(extra-inspector32_96"
" extra-inspector43_97"
" extra-nominal-bindings33_98"
" extra-nominal-bindings44_99"
" frame-id30_100"
" frame-id41_101"
" free=id31_102"
" free=id42_103"
" module23_104"
" module34_105"
" nominal-module26_106"
" nominal-module37_107"
" nominal-phase27_108"
" nominal-phase38_109"
" nominal-require-phase29_110"
" nominal-require-phase40_111"
" nominal-sym28_112"
" nominal-sym39_113"
" phase24_114"
" phase35_115"
" sym25_116"
" sym36_117"
" b45_118)"
"(let-values(((b_119) b45_118))"
"(let-values(((module_120)(if module34_105 module23_104(module-binding-module b_119))))"
"(let-values(((phase_121)(if phase35_115 phase24_114(module-binding-phase b_119))))"
"(let-values(((sym_122)(if sym36_117 sym25_116(module-binding-sym b_119))))"
"(let-values(((nominal-module_123)"
"(if nominal-module37_107 nominal-module26_106(module-binding-nominal-module b_119))))"
"(let-values(((nominal-phase_124)"
"(if nominal-phase38_109 nominal-phase27_108(module-binding-nominal-phase b_119))))"
"(let-values(((nominal-sym_125)"
"(if nominal-sym39_113 nominal-sym28_112(module-binding-nominal-sym b_119))))"
"(let-values(((nominal-require-phase_126)"
"(if nominal-require-phase40_111"
" nominal-require-phase29_110"
"(module-binding-nominal-require-phase b_119))))"
"(let-values(((frame-id_127)(if frame-id41_101 frame-id30_100(binding-frame-id b_119))))"
"(let-values(((free=id_128)(if free=id42_103 free=id31_102(binding-free=id b_119))))"
"(let-values(((extra-inspector_129)"
"(if extra-inspector43_97"
" extra-inspector32_96"
"(module-binding-extra-inspector b_119))))"
"(let-values(((extra-nominal-bindings_130)"
"(if extra-nominal-bindings44_99"
" extra-nominal-bindings33_98"
"(module-binding-extra-nominal-bindings b_119))))"
"(let-values()"
"(let-values(((module52_132) module_120)"
"((phase53_133) phase_121)"
"((sym54_134) sym_122)"
"((nominal-module55_135) nominal-module_123)"
"((nominal-phase56_136) nominal-phase_124)"
"((nominal-sym57_137) nominal-sym_125)"
"((nominal-require-phase58_138) nominal-require-phase_126)"
"((frame-id59_139) frame-id_127)"
"((free=id60_140) free=id_128)"
"((extra-inspector61_141) extra-inspector_129)"
"((extra-nominal-bindings62_142) extra-nominal-bindings_130))"
"(make-module-binding20.1"
" extra-inspector61_141"
" #t"
" extra-nominal-bindings62_142"
" #t"
" frame-id59_139"
" #t"
" free=id60_140"
" #t"
" nominal-module55_135"
" #t"
" nominal-phase56_136"
" #t"
" nominal-require-phase58_138"
" #t"
" nominal-sym57_137"
" #t"
" module52_132"
" phase53_133"
" sym54_134)))))))))))))))))"
"(define-values"
"(module-binding?)"
"(lambda(b_217)"
"(let-values(((or-part_218)(very-simple-module-binding? b_217)))"
"(if or-part_218"
" or-part_218"
"(let-values(((or-part_219)(simple-module-binding? b_217)))"
"(if or-part_219 or-part_219(full-module-binding? b_217)))))))"
"(define-values"
"(struct:full-module-binding"
" full-module-binding49.1"
" full-module-binding?"
" full-module-binding-module"
" full-module-binding-phase"
" full-module-binding-sym"
" full-module-binding-nominal-module"
" full-module-binding-nominal-phase"
" full-module-binding-nominal-sym"
" full-module-binding-nominal-require-phase"
" full-module-binding-extra-inspector"
" full-module-binding-extra-nominal-bindings)"
"(let-values(((struct:_220 make-_221 ?_222 -ref_223 -set!_224)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-module-binding"
" struct:full-binding"
" 9"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_287 ser-push!_288 state_289)"
"(let-values(((simplified-b_290)"
"(if(full-binding-frame-id b_287)"
"(let-values(((b64_292) b_287)((temp65_293) #f))"
"(module-binding-update46.1"
" #f"
" #f"
" #f"
" #f"
" temp65_293"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b64_292))"
" b_287)))"
"(if(full-module-binding? simplified-b_290)"
"(let-values()"
"(begin"
"(ser-push!_288 'tag '#:module-binding)"
"(ser-push!_288(full-module-binding-module b_287))"
"(ser-push!_288(full-module-binding-sym b_287))"
"(ser-push!_288(full-module-binding-phase b_287))"
"(ser-push!_288(full-module-binding-nominal-module b_287))"
"(ser-push!_288(full-module-binding-nominal-phase b_287))"
"(ser-push!_288(full-module-binding-nominal-sym b_287))"
"(ser-push!_288(full-module-binding-nominal-require-phase b_287))"
"(ser-push!_288(full-binding-free=id b_287))"
"(if(full-module-binding-extra-inspector b_287)"
"(ser-push!_288 'tag '#:inspector)"
"(ser-push!_288 #f))"
"(ser-push!_288(full-module-binding-extra-nominal-bindings b_287))))"
"(let-values()(ser-push!_288 simplified-b_290)))))))"
" #f"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'full-module-binding)))))"
"(values"
" struct:_220"
" make-_221"
" ?_222"
"(make-struct-field-accessor -ref_223 0 'module)"
"(make-struct-field-accessor -ref_223 1 'phase)"
"(make-struct-field-accessor -ref_223 2 'sym)"
"(make-struct-field-accessor -ref_223 3 'nominal-module)"
"(make-struct-field-accessor -ref_223 4 'nominal-phase)"
"(make-struct-field-accessor -ref_223 5 'nominal-sym)"
"(make-struct-field-accessor -ref_223 6 'nominal-require-phase)"
"(make-struct-field-accessor -ref_223 7 'extra-inspector)"
"(make-struct-field-accessor -ref_223 8 'extra-nominal-bindings))))"
"(define-values"
"(struct:simple-module-binding"
" simple-module-binding50.1"
" simple-module-binding?"
" simple-module-binding-module"
" simple-module-binding-phase"
" simple-module-binding-sym"
" simple-module-binding-nominal-module)"
"(let-values(((struct:_294 make-_295 ?_296 -ref_297 -set!_298)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'simple-module-binding"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_332 ser-push!_333 state_334)"
"(begin"
"(ser-push!_333 'tag '#:simple-module-binding)"
"(ser-push!_333(simple-module-binding-module b_332))"
"(ser-push!_333(simple-module-binding-sym b_332))"
"(ser-push!_333(simple-module-binding-phase b_332))"
"(ser-push!_333(simple-module-binding-nominal-module b_332))))))"
" #f"
" #f"
" '(0 1 2 3)"
" #f"
" 'simple-module-binding)))))"
"(values"
" struct:_294"
" make-_295"
" ?_296"
"(make-struct-field-accessor -ref_297 0 'module)"
"(make-struct-field-accessor -ref_297 1 'phase)"
"(make-struct-field-accessor -ref_297 2 'sym)"
"(make-struct-field-accessor -ref_297 3 'nominal-module))))"
"(define-values"
"(struct:very-simple-module-binding"
" very-simple-module-binding51.1"
" very-simple-module-binding?"
" very-simple-module-binding-module"
" very-simple-module-binding-sym)"
"(let-values(((struct:_335 make-_336 ?_337 -ref_338 -set!_339)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'very-simple-module-binding"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_363 ser-push!_364 state_365)"
"(begin"
"(ser-push!_364 'tag '#:very-simple-module-binding)"
"(ser-push!_364(very-simple-module-binding-module b_363))"
"(ser-push!_364(very-simple-module-binding-sym b_363))))))"
" #f"
" #f"
" '(0 1)"
" #f"
" 'very-simple-module-binding)))))"
"(values"
" struct:_335"
" make-_336"
" ?_337"
"(make-struct-field-accessor -ref_338 0 'module)"
"(make-struct-field-accessor -ref_338 1 'sym))))"
"(define-values"
"(deserialize-full-module-binding)"
"(lambda(module_366"
" sym_367"
" phase_368"
" nominal-module_369"
" nominal-phase_370"
" nominal-sym_371"
" nominal-require-phase_372"
" free=id_373"
" extra-inspector_374"
" extra-nominal-bindings_375)"
"(let-values(((module68_377) module_366)"
"((phase69_378) phase_368)"
"((sym70_379) sym_367)"
"((nominal-module71_380) nominal-module_369)"
"((nominal-phase72_381) nominal-phase_370)"
"((nominal-sym73_382) nominal-sym_371)"
"((nominal-require-phase74_383) nominal-require-phase_372)"
"((free=id75_384) free=id_373)"
"((extra-inspector76_385) extra-inspector_374)"
"((extra-nominal-bindings77_386) extra-nominal-bindings_375))"
"(make-module-binding20.1"
" extra-inspector76_385"
" #t"
" extra-nominal-bindings77_386"
" #t"
" #f"
" #f"
" free=id75_384"
" #t"
" nominal-module71_380"
" #t"
" nominal-phase72_381"
" #t"
" nominal-require-phase74_383"
" #t"
" nominal-sym73_382"
" #t"
" module68_377"
" phase69_378"
" sym70_379))))"
"(define-values"
"(deserialize-simple-module-binding)"
"(lambda(module_387 sym_388 phase_389 nominal-module_390)"
"(simple-module-binding50.1 module_387 phase_389 sym_388 nominal-module_390)))"
"(define-values"
"(deserialize-very-simple-module-binding)"
"(lambda(module_391 sym_392)(very-simple-module-binding51.1 module_391 sym_392)))"
"(define-values"
"(module-binding-module)"
"(lambda(b_393)"
"(if(very-simple-module-binding? b_393)"
"(very-simple-module-binding-module b_393)"
"(if(simple-module-binding? b_393)(simple-module-binding-module b_393)(full-module-binding-module b_393)))))"
"(define-values"
"(module-binding-phase)"
"(lambda(b_394)"
"(if(very-simple-module-binding? b_394)"
" 0"
"(if(simple-module-binding? b_394)(simple-module-binding-phase b_394)(full-module-binding-phase b_394)))))"
"(define-values"
"(module-binding-sym)"
"(lambda(b_395)"
"(if(very-simple-module-binding? b_395)"
"(very-simple-module-binding-sym b_395)"
"(if(simple-module-binding? b_395)(simple-module-binding-sym b_395)(full-module-binding-sym b_395)))))"
"(define-values"
"(module-binding-nominal-module)"
"(lambda(b_396)"
"(if(very-simple-module-binding? b_396)"
"(very-simple-module-binding-module b_396)"
"(if(simple-module-binding? b_396)"
"(simple-module-binding-nominal-module b_396)"
"(full-module-binding-nominal-module b_396)))))"
"(define-values"
"(module-binding-nominal-phase)"
"(lambda(b_397)"
"(if(very-simple-module-binding? b_397)"
" 0"
"(if(simple-module-binding? b_397)"
"(simple-module-binding-phase b_397)"
"(full-module-binding-nominal-phase b_397)))))"
"(define-values"
"(module-binding-nominal-sym)"
"(lambda(b_398)"
"(if(very-simple-module-binding? b_398)"
"(very-simple-module-binding-sym b_398)"
"(if(simple-module-binding? b_398)(simple-module-binding-sym b_398)(full-module-binding-nominal-sym b_398)))))"
"(define-values"
"(module-binding-nominal-require-phase)"
"(lambda(b_399)"
"(if(let-values(((or-part_400)(very-simple-module-binding? b_399)))"
"(if or-part_400 or-part_400(simple-module-binding? b_399)))"
" 0"
"(full-module-binding-nominal-require-phase b_399))))"
"(define-values"
"(module-binding-extra-inspector)"
"(lambda(b_401)"
"(if(let-values(((or-part_402)(very-simple-module-binding? b_401)))"
"(if or-part_402 or-part_402(simple-module-binding? b_401)))"
" #f"
"(full-module-binding-extra-inspector b_401))))"
"(define-values"
"(module-binding-extra-nominal-bindings)"
"(lambda(b_403)"
"(if(let-values(((or-part_404)(very-simple-module-binding? b_403)))"
"(if or-part_404 or-part_404(simple-module-binding? b_403)))"
" null"
"(full-module-binding-extra-nominal-bindings b_403))))"
"(void)"
"(void)"
"(define-values"
"(local-binding?)"
"(lambda(b_1)(let-values(((or-part_2)(full-local-binding? b_1)))(if or-part_2 or-part_2(symbol? b_1)))))"
"(define-values"
"(struct:full-local-binding full-local-binding1.1 full-local-binding? full-local-binding-key)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-local-binding"
" struct:full-binding"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_26 ser-push!_27 state_28)"
"(begin"
"(ser-push!_27 'tag '#:local-binding)"
"(ser-push!_27(full-local-binding-key b_26))"
"(ser-push!_27(full-binding-free=id b_26))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'full-local-binding)))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'key))))"
"(define-values"
"(deserialize-full-local-binding)"
"(lambda(key_29 free=id_30)(full-local-binding1.1 #f free=id_30 key_29)))"
"(define-values"
"(make-local-binding7.1)"
"(lambda(frame-id2_31 frame-id4_32 free=id3_33 free=id5_34 key6_35)"
"(let-values(((key_36) key6_35))"
"(let-values(((frame-id_37)(if frame-id4_32 frame-id2_31 #f)))"
"(let-values(((free=id_38)(if free=id5_34 free=id3_33 #f)))"
"(let-values()"
"(if(if(not frame-id_37)(not free=id_38) #f)"
"(let-values() key_36)"
"(let-values()(full-local-binding1.1 frame-id_37 free=id_38 key_36)))))))))"
"(define-values"
"(local-binding-update17.1)"
"(lambda(frame-id11_59 frame-id14_60 free=id12_61 free=id15_62 key10_63 key13_64 b16_65)"
"(let-values(((b_66) b16_65))"
"(let-values(((key_67)(if key13_64 key10_63(local-binding-key b_66))))"
"(let-values(((frame-id_68)(if frame-id14_60 frame-id11_59(binding-frame-id b_66))))"
"(let-values(((free=id_69)(if free=id15_62 free=id12_61(binding-free=id b_66))))"
"(let-values()"
"(let-values(((key21_71) key_67)((frame-id22_72) frame-id_68)((free=id23_73) free=id_69))"
"(make-local-binding7.1 frame-id22_72 #t free=id23_73 #t key21_71)))))))))"
"(define-values"
"(local-binding-key)"
"(lambda(b_100)(if(full-local-binding? b_100)(full-local-binding-key b_100) b_100)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:rename-transformer 1/rename-transformer? rename-transformer-value)"
"(make-struct-type-property"
" 'rename-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)(exact-nonnegative-integer? v_1)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(identifier? v_1)))"
"(if or-part_5 or-part_5(if(procedure? v_1)(procedure-arity-includes? v_1 1) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:rename-transformer"
"(string-append"
"                           \"(or/c exact-nonnegative-integer?\\n\""
"                           \"      identifier?\\n\""
"                           \"      (procedure-arity-includes? proc 1))\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(identifier? v_1)"
"(let-values()(lambda(t_6) v_1))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_7)"
"(let-values(((val_8)(ref_3 t_7 v_1)))(if(identifier? val_8) val_8(datum->syntax$1 #f '?)))))"
"(let-values()"
"(lambda(t_9)"
"(let-values(((id_10)(v_1 t_9)))"
"(begin"
"(if(identifier? id_10)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'prop:rename-transformer"
"                            \"contract violation for given value; expected an identifier\""
"                            \"given\""
" id_10)))"
" id_10))))))))))))"
"(define-values"
"(1/make-rename-transformer)"
"(let-values()"
"(let-values(((struct:rename-transformer_11 rename-transformer1_12 rename-transformer?_13 rename-transformer-id_14)"
"(let-values(((struct:_16 make-_17 ?_18 -ref_19 -set!_20)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'rename-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:rename-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'rename-transformer)))))"
"(values struct:_16 make-_17 ?_18(make-struct-field-accessor -ref_19 0 'id)))))"
"(lambda(id_36)"
"(begin"
"(if(identifier? id_36)"
"(void)"
"            (let-values () (raise-argument-error 'make-rename-transformer \"identifier?\" id_36)))"
"(rename-transformer1_12 id_36))))))"
"(define-values(1/rename-transformer-target)(lambda(t_37)((rename-transformer-value t_37) t_37)))"
"(void)"
"(void)"
"(define-values"
"(free-identifier=?$1)"
"(lambda(a_1 b_2 a-phase_3 b-phase_4)"
"(let-values(((ab_5)"
"(let-values(((a47_8) a_1)((a-phase48_9) a-phase_3)((temp49_10) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp49_10 #t a47_8 a-phase48_9))))"
"(let-values(((bb_6)"
"(let-values(((b50_12) b_2)((b-phase51_13) b-phase_4)((temp52_14) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp52_14 #t b50_12 b-phase51_13))))"
"(if(let-values(((or-part_15)(symbol? ab_5)))(if or-part_15 or-part_15(symbol? bb_6)))"
"(let-values()(eq? ab_5 bb_6))"
"(let-values()(same-binding? ab_5 bb_6)))))))"
"(define-values"
"(same-binding?)"
"(lambda(ab_16 bb_17)"
"(if(module-binding? ab_16)"
"(let-values()"
"(if(module-binding? bb_17)"
"(if(eq?(module-binding-sym ab_16)(module-binding-sym bb_17))"
"(if(eqv?(module-binding-phase ab_16)(module-binding-phase bb_17))"
"(eq?"
"(1/module-path-index-resolve(module-binding-module ab_16))"
"(1/module-path-index-resolve(module-binding-module bb_17)))"
" #f)"
" #f)"
" #f))"
"(if(local-binding? ab_16)"
"(let-values()(if(local-binding? bb_17)(eq?(local-binding-key ab_16)(local-binding-key bb_17)) #f))"
"        (let-values () (error \"bad binding\" ab_16))))))"
"(define-values"
"(same-binding-nominals?)"
"(lambda(ab_18 bb_19)"
"(if(eq?"
"(1/module-path-index-resolve(module-binding-nominal-module ab_18))"
"(1/module-path-index-resolve(module-binding-nominal-module bb_19)))"
"(if(eqv?(module-binding-nominal-require-phase ab_18)(module-binding-nominal-require-phase bb_19))"
"(eqv?(module-binding-nominal-sym ab_18)(module-binding-nominal-sym bb_19))"
" #f)"
" #f)))"
"(define-values"
"(identifier-binding-symbol$1)"
"(lambda(id_20 phase_21)"
"(let-values(((b_22)"
"(let-values(((id53_24) id_20)((phase54_25) phase_21)((temp55_26) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp55_26 #t id53_24 phase54_25))))"
"(if(symbol? b_22)"
"(let-values() b_22)"
"(if(module-binding? b_22)"
"(let-values()(module-binding-sym b_22))"
"(if(local-binding? b_22)(let-values()(local-binding-key b_22))(let-values()(syntax-e$1 id_20))))))))"
"(define-values"
"(identifier-binding$1)"
"(let-values(((identifier-binding5_27)"
"(lambda(id3_28 phase4_29 top-level-symbol?1_30 top-level-symbol?2_31)"
"(let-values(((id_32) id3_28))"
"(let-values(((phase_33) phase4_29))"
"(let-values(((top-level-symbol?_34)(if top-level-symbol?2_31 top-level-symbol?1_30 #f)))"
"(let-values()"
"(let-values(((b_35)"
"(let-values(((id56_36) id_32)((phase57_37) phase_33))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f #f #f id56_36 phase57_37))))"
"(if(module-binding? b_35)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_35))"
"(if top-level-symbol?_34(list(module-binding-nominal-sym b_35)) #f)"
"(list"
"(module-binding-module b_35)"
"(module-binding-sym b_35)"
"(module-binding-nominal-module b_35)"
"(module-binding-nominal-sym b_35)"
"(module-binding-phase b_35)"
"(module-binding-nominal-require-phase b_35)"
"(module-binding-nominal-phase b_35))))"
"(if(local-binding? b_35)(let-values() 'lexical)(let-values() #f)))))))))))"
"(case-lambda"
"((id_38 phase_39)(identifier-binding5_27 id_38 phase_39 #f #f))"
"((id_40 phase_41 top-level-symbol?1_42)(identifier-binding5_27 id_40 phase_41 top-level-symbol?1_42 #t)))))"
"(define-values"
"(maybe-install-free=id!)"
"(lambda(val_43 id_44 phase_45)"
"(if(1/rename-transformer? val_43)"
"(let-values()"
"(let-values(((free=id_46)(1/rename-transformer-target val_43)))"
"(if(syntax-property$1 free=id_46 'not-free-identifier=?)"
"(void)"
"(let-values()"
"(let-values(((b_47)"
"(let-values(((id61_49) id_44)((phase62_50) phase_45)((temp63_51) #t)((temp64_52) #t))"
"(resolve+shift30.1 #f #f temp63_51 #t #f #f temp64_52 #t #f #f id61_49 phase62_50))))"
"(let-values(((temp58_53)(syntax-scope-set id_44 phase_45))"
"((temp59_54)(syntax-e$1 id_44))"
"((temp60_55)(binding-set-free=id b_47 free=id_46)))"
"(add-binding-in-scopes!16.1 #f #f temp58_53 temp59_54 temp60_55)))))))"
"(void))))"
"(define-values"
"(binding-set-free=id)"
"(lambda(b_56 free=id_57)"
"(if(module-binding? b_56)"
"(let-values()"
"(let-values(((b65_59) b_56)((free=id66_60) free=id_57))"
"(module-binding-update46.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" free=id66_60"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b65_59)))"
"(if(local-binding? b_56)"
"(let-values()"
"(let-values(((b67_62) b_56)((free=id68_63) free=id_57))"
"(local-binding-update17.1 #f #f free=id68_63 #t #f #f b67_62)))"
"        (let-values () (error \"bad binding for free=id:\" b_56))))))"
"(define-values"
"(struct:non-source-shift non-source-shift7.1 non-source-shift? non-source-shift-from non-source-shift-to)"
"(let-values(((struct:_64 make-_65 ?_66 -ref_67 -set!_68)"
"(let-values()"
"(let-values()"
"(make-struct-type 'non-source-shift #f 2 0 #f null 'prefab #f '(0 1) #f 'non-source-shift)))))"
"(values"
" struct:_64"
" make-_65"
" ?_66"
"(make-struct-field-accessor -ref_67 0 'from)"
"(make-struct-field-accessor -ref_67 1 'to))))"
"(define-values(shift-from)(lambda(s_89)(if(pair? s_89)(car s_89)(non-source-shift-from s_89))))"
"(define-values(shift-to)(lambda(s_90)(if(pair? s_90)(cdr s_90)(non-source-shift-to s_90))))"
"(define-values"
"(syntax-module-path-index-shift15.1)"
"(lambda(non-source?8_91 non-source?9_92 s12_93 from-mpi13_94 to-mpi14_95 inspector10_96 inspector11_97)"
"(let-values(((s_98) s12_93))"
"(let-values(((from-mpi_99) from-mpi13_94))"
"(let-values(((to-mpi_100) to-mpi14_95))"
"(let-values(((inspector_101)(if inspector11_97 inspector10_96 #f)))"
"(let-values(((non-source?_102)(if non-source?9_92 non-source?8_91 #f)))"
"(let-values()"
"(if(eq? from-mpi_99 to-mpi_100)"
"(let-values()(if inspector_101(syntax-set-inspector s_98 inspector_101) s_98))"
"(let-values()"
"(let-values(((shift_103)"
"(if non-source?_102"
"(non-source-shift7.1 from-mpi_99 to-mpi_100)"
"(cons from-mpi_99 to-mpi_100))))"
"(let-values(((the-struct_104) s_98))"
"(if(syntax?$1 the-struct_104)"
"(let-values(((mpi-shifts70_105)(cons shift_103(syntax-mpi-shifts s_98)))"
"((inspector71_106)"
"(let-values(((or-part_108)(syntax-inspector s_98)))"
"(if or-part_108 or-part_108 inspector_101)))"
"((scope-propagations72_107)"
"(if(datum-has-elements?(syntax-content s_98))"
"(propagation-mpi-shift"
"(syntax-scope-propagations s_98)"
"(lambda(s_109)(cons shift_103 s_109))"
" inspector_101"
"(syntax-scopes s_98)"
"(syntax-shifted-multi-scopes s_98)"
"(syntax-mpi-shifts s_98))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_104)"
"(syntax-scopes the-struct_104)"
"(syntax-shifted-multi-scopes the-struct_104)"
" scope-propagations72_107"
" mpi-shifts70_105"
"(syntax-srcloc the-struct_104)"
"(syntax-props the-struct_104)"
" inspector71_106"
"(syntax-tamper the-struct_104)))"
"                          (raise-argument-error 'struct-copy \"syntax?\" the-struct_104))))))))))))))"
"(define-values"
"(unpack16.1$5)"
"(lambda(given-kws_110 given-args_111 s12_112 from-mpi13_113 to-mpi14_114 inspector10_115 inspector11_116)"
"(let-values(((non-source?9_117)(pair? given-kws_110)))"
"(let-values(((non-source?8_118)(if non-source?9_117(car given-args_111)(void))))"
"(syntax-module-path-index-shift15.1"
" non-source?8_118"
" non-source?9_117"
" s12_112"
" from-mpi13_113"
" to-mpi14_114"
" inspector10_115"
" inspector11_116)))))"
"(define-values"
"(syntax-module-path-index-shift17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_119 given-argc_120)"
"(if(if(>= given-argc_120 5)(<= given-argc_120 6) #f)"
"(let-values(((l1_121) given-kws_119))"
"(let-values(((l1_122)(if(null? l1_121) l1_121(if(eq?(car l1_121) '#:non-source?)(cdr l1_121) l1_121))))"
"(null? l1_122)))"
" #f))"
"(case-lambda"
"((given-kws_123 given-args_124 s_125 from-mpi_126 to-mpi_127)"
"(unpack16.1$5 given-kws_123 given-args_124 s_125 from-mpi_126 to-mpi_127 #f #f))"
"((given-kws_128 given-args_129 s_130 from-mpi_131 to-mpi_132 inspector10_133)"
"(unpack16.1$5 given-kws_128 given-args_129 s_130 from-mpi_131 to-mpi_132 inspector10_133 #t)))"
" null"
" '(#:non-source?)"
"(let-values(((syntax-module-path-index-shift_134)"
"(case-lambda"
"((s_135 from-mpi_136 to-mpi_137)(unpack16.1$5 null null s_135 from-mpi_136 to-mpi_137 #f #f))"
"((s_138 from-mpi_139 to-mpi_140 inspector10_141)"
"(unpack16.1$5 null null s_138 from-mpi_139 to-mpi_140 inspector10_141 #t)))))"
" syntax-module-path-index-shift_134)))"
"(define-values"
"(resolve+shift30.1)"
"(lambda(ambiguous-value18_142"
" ambiguous-value23_143"
" exactly?19_144"
" exactly?24_145"
" extra-shifts22_146"
" extra-shifts27_147"
" immediate?20_148"
" immediate?25_149"
" unbound-sym?21_150"
" unbound-sym?26_151"
" s28_152"
" phase29_153)"
"(let-values(((s_154) s28_152))"
"(let-values(((phase_155) phase29_153))"
"(let-values(((ambiguous-value_156)(if ambiguous-value23_143 ambiguous-value18_142 #f)))"
"(let-values(((exactly?_157)(if exactly?24_145 exactly?19_144 #f)))"
"(let-values(((immediate?_158)(if immediate?25_149 immediate?20_148 exactly?_157)))"
"(let-values(((unbound-sym?_159)(if unbound-sym?26_151 unbound-sym?21_150 #f)))"
"(let-values(((extra-shifts_160)(if extra-shifts27_147 extra-shifts22_146 null)))"
"(let-values()"
"(let-values(((immediate-b_161)"
"(let-values(((s73_164) s_154)"
"((phase74_165) phase_155)"
"((ambiguous-value75_166) ambiguous-value_156)"
"((exactly?76_167) exactly?_157)"
"((extra-shifts77_168) extra-shifts_160))"
"(resolve29.1"
" ambiguous-value75_166"
" #t"
" exactly?76_167"
" #t"
" extra-shifts77_168"
" #t"
" #f"
" #f"
" s73_164"
" phase74_165))))"
"(let-values(((b_162)"
"(if(if immediate-b_161"
"(if(not immediate?_158)(binding-free=id immediate-b_161) #f)"
" #f)"
"(let-values(((temp78_170)(binding-free=id immediate-b_161))"
"((phase79_171) phase_155)"
"((temp80_172)(append extra-shifts_160(syntax-mpi-shifts s_154)))"
"((ambiguous-value81_173) ambiguous-value_156)"
"((exactly?82_174) exactly?_157)"
"((unbound-sym?83_175) unbound-sym?_159))"
"(resolve+shift30.1"
" ambiguous-value81_173"
" #t"
" exactly?82_174"
" #t"
" temp80_172"
" #t"
" #f"
" #f"
" unbound-sym?83_175"
" #t"
" temp78_170"
" phase79_171))"
" immediate-b_161)))"
"(if(module-binding? b_162)"
"(let-values()"
"(let-values(((mpi-shifts_176)(syntax-mpi-shifts s_154)))"
"(if(null? mpi-shifts_176)"
"(let-values() b_162)"
"(let-values()"
"(let-values(((mod_177)(module-binding-module b_162)))"
"(let-values(((shifted-mod_178)(apply-syntax-shifts mod_177 mpi-shifts_176)))"
"(let-values(((nominal-mod_179)(module-binding-nominal-module b_162)))"
"(let-values(((shifted-nominal-mod_180)"
"(if(eq? mod_177 nominal-mod_179)"
" shifted-mod_178"
"(apply-syntax-shifts nominal-mod_179 mpi-shifts_176))))"
"(if(if(eq? mod_177 shifted-mod_178)"
"(if(eq? nominal-mod_179 shifted-nominal-mod_180)"
"(if(not(binding-free=id b_162))"
"(null?(module-binding-extra-nominal-bindings b_162))"
" #f)"
" #f)"
" #f)"
" b_162"
"(let-values(((b84_182) b_162)"
"((shifted-mod85_183) shifted-mod_178)"
"((shifted-nominal-mod86_184) shifted-nominal-mod_180)"
"((temp87_185)"
"(if(binding-free=id b_162)"
"(let-values(((temp89_187)(binding-free=id b_162))"
"((s90_188) s_154))"
"(syntax-transfer-shifts39.1"
" #f"
" #f"
" temp89_187"
" s90_188"
" #f"
" #f))"
" #f))"
"((temp88_186)"
"(alt-reverse"
"(let-values(((lst_189)"
"(module-binding-extra-nominal-bindings b_162)))"
"(begin"
"(if(list? lst_189)"
"(void)"
"(let-values()(in-list lst_189)))"
"((letrec-values(((for-loop_190)"
"(lambda(fold-var_191 lst_192)"
"(if(pair? lst_192)"
"(let-values(((b_193)"
"(unsafe-car"
" lst_192)))"
"(let-values(((fold-var_194)"
"(let-values(((fold-var_195)"
" fold-var_191))"
"(let-values(((fold-var_196)"
"(let-values()"
"(cons"
"(let-values()"
"(apply-syntax-shifts-to-binding"
" b_193"
" mpi-shifts_176))"
" fold-var_195))))"
"(values"
" fold-var_196)))))"
"(for-loop_190"
" fold-var_194"
"(unsafe-cdr lst_192))))"
" fold-var_191))))"
" for-loop_190)"
" null"
" lst_189))))))"
"(module-binding-update46.1"
" #f"
" #f"
" temp88_186"
" #t"
" #f"
" #f"
" temp87_185"
" #t"
" shifted-mod85_183"
" #t"
" shifted-nominal-mod86_184"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b84_182)))))))))))"
"(if(if(not b_162) unbound-sym?_159 #f)"
"(let-values()(syntax-e$1 s_154))"
"(let-values() b_162)))))))))))))))"
"(define-values"
"(apply-syntax-shifts)"
"(lambda(mpi_238 shifts_239)"
"(if(null? shifts_239)"
"(let-values() mpi_238)"
"(let-values()"
"(let-values(((shifted-mpi_240)(apply-syntax-shifts mpi_238(cdr shifts_239))))"
"(let-values(((shift_241)(car shifts_239)))"
"(module-path-index-shift shifted-mpi_240(shift-from shift_241)(shift-to shift_241))))))))"
"(define-values"
"(apply-syntax-shifts-to-binding)"
"(lambda(b_242 shifts_243)"
"(if(null? shifts_243)"
"(let-values() b_242)"
"(let-values()"
"(let-values(((shifted-b_244)(apply-syntax-shifts-to-binding b_242(cdr shifts_243))))"
"(let-values(((shift_245)(car shifts_243)))"
"(binding-module-path-index-shift shifted-b_244(shift-from shift_245)(shift-to shift_245))))))))"
"(define-values"
"(binding-module-path-index-shift)"
"(lambda(b_248 from-mpi_249 to-mpi_250)"
"(if(module-binding? b_248)"
"(let-values()"
"(let-values(((b91_252) b_248)"
"((temp92_253)(module-path-index-shift(module-binding-module b_248) from-mpi_249 to-mpi_250))"
"((temp93_254)"
"(module-path-index-shift(module-binding-nominal-module b_248) from-mpi_249 to-mpi_250))"
"((temp94_255)"
"(alt-reverse"
"(let-values(((lst_256)(module-binding-extra-nominal-bindings b_248)))"
"(begin"
"(if(list? lst_256)(void)(let-values()(in-list lst_256)))"
"((letrec-values(((for-loop_257)"
"(lambda(fold-var_258 lst_259)"
"(if(pair? lst_259)"
"(let-values(((b_260)(unsafe-car lst_259)))"
"(let-values(((fold-var_261)"
"(let-values(((fold-var_262) fold-var_258))"
"(let-values(((fold-var_263)"
"(let-values()"
"(cons"
"(let-values()"
"(binding-module-path-index-shift"
" b_260"
" from-mpi_249"
" to-mpi_250))"
" fold-var_262))))"
"(values fold-var_263)))))"
"(for-loop_257 fold-var_261(unsafe-cdr lst_259))))"
" fold-var_258))))"
" for-loop_257)"
" null"
" lst_256))))))"
"(module-binding-update46.1"
" #f"
" #f"
" temp94_255"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp92_253"
" #t"
" temp93_254"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b91_252)))"
"(let-values() b_248))))"
"(define-values"
"(syntax-transfer-shifts39.1)"
"(lambda(non-source?33_264 non-source?34_265 to-s37_266 from-s38_267 inspector35_268 inspector36_269)"
"(let-values(((to-s_270) to-s37_266))"
"(let-values(((from-s_271) from-s38_267))"
"(let-values(((inspector_272)(if inspector36_269 inspector35_268 #f)))"
"(let-values(((non-source?_273)(if non-source?34_265 non-source?33_264 #f)))"
"(let-values()"
"(let-values(((shifts_274)(syntax-mpi-shifts from-s_271)))"
"(if(if(null? shifts_274) inspector_272 #f)"
"(let-values()(syntax-set-inspector to-s_270 inspector_272))"
"(let-values()"
"(let-values(((lst_275)(alt-reverse shifts_274))((start_276) 0))"
"(begin"
"(if(list? lst_275)(void)(let-values()(in-list lst_275)))"
"(if(exact-nonnegative-integer? start_276)(void)(let-values()(in-naturals start_276)))"
"((letrec-values(((for-loop_277)"
"(lambda(s_278 lst_279 pos_280)"
"(if(if(pair? lst_279) #t #f)"
"(let-values(((shift_281)(unsafe-car lst_279))((i_282) pos_280))"
"(let-values(((s_283)"
"(let-values(((s_284) s_278))"
"(let-values(((s_285)"
"(let-values()"
"(let-values(((s95_287) s_284)"
"((temp96_288)"
"(shift-from shift_281))"
"((temp97_289)"
"(shift-to shift_281))"
"((temp98_290)"
"(if(zero? i_282)"
" inspector_272"
" #f))"
"((non-source?99_291)"
" non-source?_273))"
"(syntax-module-path-index-shift15.1"
" non-source?99_291"
" #t"
" s95_287"
" temp96_288"
" temp97_289"
" temp98_290"
" #t)))))"
"(values s_285)))))"
"(for-loop_277 s_283(unsafe-cdr lst_279)(+ pos_280 1))))"
" s_278))))"
" for-loop_277)"
" to-s_270"
" lst_275"
" start_276)))))))))))))"
"(define-values"
"(syntax-set-inspector)"
"(lambda(s_319 insp_320)"
"(let-values(((the-struct_321) s_319))"
"(if(syntax?$1 the-struct_321)"
"(let-values(((inspector100_322)"
"(let-values(((or-part_324)(syntax-inspector s_319)))(if or-part_324 or-part_324 insp_320)))"
"((scope-propagations101_323)"
"(if(datum-has-elements?(syntax-content s_319))"
"(propagation-mpi-shift"
"(syntax-scope-propagations s_319)"
" #f"
" insp_320"
"(syntax-scopes s_319)"
"(syntax-shifted-multi-scopes s_319)"
"(syntax-mpi-shifts s_319))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_321)"
"(syntax-scopes the-struct_321)"
"(syntax-shifted-multi-scopes the-struct_321)"
" scope-propagations101_323"
"(syntax-mpi-shifts the-struct_321)"
"(syntax-srcloc the-struct_321)"
"(syntax-props the-struct_321)"
" inspector100_322"
"(syntax-tamper the-struct_321)))"
"        (raise-argument-error 'struct-copy \"syntax?\" the-struct_321)))))"
"(define-values"
"(1/syntax-source-module)"
"(let-values(((syntax-source-module45_325)"
"(lambda(s44_326 source?42_327 source?43_328)"
"(let-values(((s_329) s44_326))"
"(let-values(((source?_330)(if source?43_328 source?42_327 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_329)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" s_329)))"
"(let-values(((lst_331)(alt-reverse(syntax-mpi-shifts s_329))))"
"(begin"
"(if(list? lst_331)(void)(let-values()(in-list lst_331)))"
"((letrec-values(((for-loop_332)"
"(lambda(result_333 lst_334)"
"(if(pair? lst_334)"
"(let-values(((shift_335)(unsafe-car lst_334)))"
"(let-values(((result_336)"
"(let-values(((result_337) result_333))"
"(if(non-source-shift? shift_335)"
" result_337"
"(let-values()"
"(let-values(((result_339)"
"(let-values()"
"(let-values()"
"(let-values(((from-mpi_340)"
"(car"
" shift_335)))"
"(let-values(((path_341"
" base_342)"
"(1/module-path-index-split"
" from-mpi_340)))"
"(if(not path_341)"
"(if(module-path-index-resolved"
" from-mpi_340)"
"(apply-syntax-shifts"
" from-mpi_340"
"(syntax-mpi-shifts"
" s_329))"
" #f)"
" #f)))))))"
"(values result_339)))))))"
"(if(not((lambda x_343 result_336) shift_335))"
"(for-loop_332 result_336(unsafe-cdr lst_334))"
" result_336)))"
" result_333))))"
" for-loop_332)"
" #f"
" lst_331))))))))))"
"(case-lambda"
"((s_344)(syntax-source-module45_325 s_344 #f #f))"
"((s_345 source?42_346)(syntax-source-module45_325 s_345 source?42_346 #t)))))"
"(define-values"
"(1/identifier-prune-to-source-module)"
"(lambda(id_347)"
"(begin"
"(if(identifier? id_347)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-prune-to-source-module \"identifier?\" id_347)))"
"(let-values(((the-struct_348)(datum->syntax$1 #f(syntax-e$1 id_347) id_347 id_347)))"
"(if(syntax?$1 the-struct_348)"
"(let-values(((mpi-shifts102_349)(syntax-mpi-shifts id_347)))"
"(syntax1.1"
"(syntax-content the-struct_348)"
"(syntax-scopes the-struct_348)"
"(syntax-shifted-multi-scopes the-struct_348)"
"(syntax-scope-propagations the-struct_348)"
" mpi-shifts102_349"
"(syntax-srcloc the-struct_348)"
"(syntax-props the-struct_348)"
"(syntax-inspector the-struct_348)"
"(syntax-tamper the-struct_348)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_348))))))"
"(void)"
"(void)"
"(define-values(built-in-symbols)(make-hasheq))"
"(define-values(register-built-in-symbol!)(lambda(s_1)(hash-set! built-in-symbols s_1 #t)))"
"(define-values(built-in-symbol?)(lambda(s_2)(hash-ref built-in-symbols s_2 #f)))"
"(define-values"
"(make-built-in-symbol!)"
"(lambda(s_3)"
"    (let-values (((built-in-s_4) (string->symbol (format \".~s\" s_3))))"
"(begin(register-built-in-symbol! built-in-s_4) built-in-s_4))))"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(lambda case-lambda"
" if"
" begin"
" begin0"
" let-values"
" letrec-values"
" set!"
" quote"
" with-continuation-mark"
" #%variable-reference)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(check-not-undefined"
" instance-variable-box"
" variable-reference"
" variable-reference?"
" variable-reference->instance"
" variable-reference-constant?)))"
" print-values)"
"(void)"
"(void)"
"(define-values(phase-shift-id)(make-built-in-symbol! 'phase))"
"(define-values(dest-phase-id)(make-built-in-symbol! 'dest-phase))"
"(define-values(ns-id)(make-built-in-symbol! 'namespace))"
"(define-values(self-id)(make-built-in-symbol! 'self))"
"(define-values(syntax-literals-id)(make-built-in-symbol! 'syntax-literals))"
"(define-values(get-syntax-literal!-id)(make-built-in-symbol! 'get-syntax-literal!))"
"(define-values(bulk-binding-registry-id)(make-built-in-symbol! 'bulk-binding-registry))"
"(define-values(inspector-id)(make-built-in-symbol! 'inspector))"
"(define-values(deserialize-syntax-id)(make-built-in-symbol! 'deserialize-syntax))"
"(define-values(deserialized-syntax-vector-id)(make-built-in-symbol! 'deserialized-syntax-vector))"
"(define-values(set-transformer!-id)(make-built-in-symbol! 'set-transformer!))"
"(define-values(top-level-bind!-id)(make-built-in-symbol! 'top-level-bind!))"
"(define-values(top-level-require!-id)(make-built-in-symbol! 'top-level-require!))"
"(void)"
"(void)"
"(define-values"
"(struct:provided provided1.1 provided? provided-binding provided-protected? provided-syntax?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'provided"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(p_34 ser-push!_35 state_36)"
"(begin"
"(ser-push!_35 'tag '#:provided)"
"(ser-push!_35(provided-binding p_34))"
"(ser-push!_35(provided-protected? p_34))"
"(ser-push!_35(provided-syntax? p_34))))))"
" #f"
" #f"
" '(0 1 2)"
" #f"
" 'provided)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'binding)"
"(make-struct-field-accessor -ref_4 1 'protected?)"
"(make-struct-field-accessor -ref_4 2 'syntax?))))"
"(define-values(provided-as-binding)(lambda(v_37)(if(provided? v_37)(provided-binding v_37) v_37)))"
"(define-values(provided-as-protected?)(lambda(v_38)(if(provided? v_38)(provided-protected? v_38) #f)))"
"(define-values(provided-as-transformer?)(lambda(v_39)(if(provided? v_39)(provided-syntax? v_39) #f)))"
"(define-values"
"(deserialize-provided)"
"(lambda(binding_40 protected?_41 syntax?_42)(provided1.1 binding_40 protected?_41 syntax?_42)))"
"(void)"
"(void)"
"(define-values"
"(provide-binding-to-require-binding11.1)"
"(lambda(mpi2_12 phase-shift4_13 provide-phase-level3_14 self1_15 binding/p9_16 sym10_17)"
"(let-values(((binding/p_18) binding/p9_16))"
"(let-values(((sym_19) sym10_17))"
"(let-values(((self_20) self1_15))"
"(let-values(((mpi_21) mpi2_12))"
"(let-values(((provide-phase-level_22) provide-phase-level3_14))"
"(let-values(((phase-shift_23) phase-shift4_13))"
"(let-values()"
"(let-values(((binding_24)(provided-as-binding binding/p_18)))"
"(let-values(((from-mod_25)(module-binding-module binding_24)))"
"(let-values(((binding17_27) binding_24)"
"((temp18_28)(module-path-index-shift from-mod_25 self_20 mpi_21))"
"((mpi19_29) mpi_21)"
"((provide-phase-level20_30) provide-phase-level_22)"
"((sym21_31) sym_19)"
"((phase-shift22_32) phase-shift_23)"
"((temp23_33) #f)"
"((temp24_34)"
"(if(not(provided-as-protected? binding/p_18))"
"(module-binding-extra-inspector binding_24)"
" #f))"
"((null25_35) null))"
"(module-binding-update46.1"
" temp24_34"
" #t"
" null25_35"
" #t"
" temp23_33"
" #t"
" #f"
" #f"
" temp18_28"
" #t"
" mpi19_29"
" #t"
" provide-phase-level20_30"
" #t"
" phase-shift22_32"
" #t"
" sym21_31"
" #t"
" #f"
" #f"
" #f"
" #f"
" binding17_27)))))))))))))"
"(define-values"
"(struct:bulk-binding"
" bulk-binding14.1"
" bulk-binding?"
" bulk-binding-provides"
" bulk-binding-prefix"
" bulk-binding-excepts"
" bulk-binding-self"
" bulk-binding-mpi"
" bulk-binding-provide-phase-level"
" bulk-binding-phase-shift"
" bulk-binding-bulk-binding-registry"
" set-bulk-binding-provides!"
" set-bulk-binding-self!)"
"(let-values(((struct:_60 make-_61 ?_62 -ref_63 -set!_64)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding"
" #f"
" 8"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_152 ser-push!_153 reachable-scopes_154)"
"(begin"
"(ser-push!_153 'tag '#:bulk-binding)"
"(ser-push!_153(bulk-binding-prefix b_152))"
"(ser-push!_153(bulk-binding-excepts b_152))"
"(ser-push!_153(bulk-binding-mpi b_152))"
"(ser-push!_153(bulk-binding-provide-phase-level b_152))"
"(ser-push!_153(bulk-binding-phase-shift b_152))"
"(ser-push!_153 'tag '#:bulk-binding-registry))))"
"(cons"
" prop:bulk-binding"
"(bulk-binding-class3.1"
"(lambda(b_155 mpi-shifts_156)"
"(let-values(((or-part_157)(bulk-binding-provides b_155)))"
"(if or-part_157"
" or-part_157"
"(let-values(((mod-name_158)"
"(1/module-path-index-resolve"
"(apply-syntax-shifts(bulk-binding-mpi b_155) mpi-shifts_156))))"
"(let-values((()"
"(begin"
"(if(bulk-binding-bulk-binding-registry b_155)"
"(void)"
"(let-values()"
"(error"
"                                                     \"namespace mismatch: no bulk-binding registry available:\""
" mod-name_158)))"
"(values))))"
"(let-values(((table_159)"
"(bulk-binding-registry-table"
"(bulk-binding-bulk-binding-registry b_155))))"
"(let-values(((bulk-provide_160)(hash-ref table_159 mod-name_158 #f)))"
"(let-values((()"
"(begin"
"(if bulk-provide_160"
"(void)"
"(let-values()"
"(error"
"                                                           \"namespace mismatch: bulk bindings not found in registry for module:\""
" mod-name_158)))"
"(values))))"
"(let-values((()"
"(begin"
"(set-bulk-binding-self!"
" b_155"
"(bulk-provide-self bulk-provide_160))"
"(values))))"
"(let-values(((provides_161)"
"(hash-ref"
"(bulk-provide-provides bulk-provide_160)"
"(bulk-binding-provide-phase-level b_155))))"
"(let-values(((excepts_162)(bulk-binding-excepts b_155)))"
"(let-values(((prefix_163)(bulk-binding-prefix b_155)))"
"(let-values(((adjusted-provides_164)"
"(if(let-values(((or-part_165) prefix_163))"
"(if or-part_165"
" or-part_165"
"(positive?(hash-count excepts_162))))"
"(let-values()"
"(let-values(((ht_166) provides_161))"
"(begin"
"(if((lambda(ht_167)(hash? ht_167)) ht_166)"
"(void)"
"(let-values()(default-in-hash ht_166)))"
"((letrec-values(((for-loop_168)"
"(lambda(table_169 i_170)"
"(if i_170"
"(let-values(((sym_171"
" val_172)"
"(hash-iterate-key+value"
" ht_166"
" i_170)))"
"(let-values(((table_173)"
"(let-values(((table_174)"
" table_169))"
"(if(hash-ref"
" excepts_162"
" sym_171"
" #f)"
" table_174"
"(let-values(((table_175)"
" table_174))"
"(let-values(((table_176)"
"(let-values()"
"(let-values(((key_177"
" val_178)"
"(let-values()"
"(values"
"(if prefix_163"
"(string->symbol"
"(format"
"                                                                                                                                                       \"~a~a\""
" prefix_163"
" sym_171))"
" sym_171)"
" val_172))))"
"(hash-set"
" table_175"
" key_177"
" val_178)))))"
"(values"
" table_176)))))))"
"(for-loop_168"
" table_173"
"(hash-iterate-next"
" ht_166"
" i_170))))"
" table_169))))"
" for-loop_168)"
" '#hash()"
"(hash-iterate-first ht_166)))))"
"(let-values() provides_161))))"
"(begin"
"(set-bulk-binding-provides! b_155 adjusted-provides_164)"
" adjusted-provides_164))))))))))))))"
"(lambda(b_179 binding_180 sym_181)"
"(let-values(((binding27_183) binding_180)"
"((temp28_184)"
"(if(bulk-binding-prefix b_179)"
"(string->symbol"
"(substring"
"(symbol->string sym_181)"
"(string-length(symbol->string(bulk-binding-prefix b_179)))))"
" sym_181))"
"((temp29_185)(bulk-binding-self b_179))"
"((temp30_186)(bulk-binding-mpi b_179))"
"((temp31_187)(bulk-binding-provide-phase-level b_179))"
"((temp32_188)(bulk-binding-phase-shift b_179)))"
"(provide-binding-to-require-binding11.1"
" temp30_186"
" temp32_188"
" temp31_187"
" temp29_185"
" binding27_183"
" temp28_184))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'bulk-binding)))))"
"(values"
" struct:_60"
" make-_61"
" ?_62"
"(make-struct-field-accessor -ref_63 0 'provides)"
"(make-struct-field-accessor -ref_63 1 'prefix)"
"(make-struct-field-accessor -ref_63 2 'excepts)"
"(make-struct-field-accessor -ref_63 3 'self)"
"(make-struct-field-accessor -ref_63 4 'mpi)"
"(make-struct-field-accessor -ref_63 5 'provide-phase-level)"
"(make-struct-field-accessor -ref_63 6 'phase-shift)"
"(make-struct-field-accessor -ref_63 7 'bulk-binding-registry)"
"(make-struct-field-mutator -set!_64 0 'provides)"
"(make-struct-field-mutator -set!_64 3 'self))))"
"(define-values"
"(deserialize-bulk-binding)"
"(lambda(prefix_189 excepts_190 mpi_191 provide-phase-level_192 phase-shift_193 bulk-binding-registry_194)"
"(bulk-binding14.1"
" #f"
" prefix_189"
" excepts_190"
" #f"
" mpi_191"
" provide-phase-level_192"
" phase-shift_193"
" bulk-binding-registry_194)))"
"(define-values"
"(struct:bulk-provide bulk-provide15.1 bulk-provide? bulk-provide-self bulk-provide-provides)"
"(let-values(((struct:_195 make-_196 ?_197 -ref_198 -set!_199)"
"(let-values()"
"(let-values()"
"(make-struct-type 'bulk-provide #f 2 0 #f null(current-inspector) #f '(0 1) #f 'bulk-provide)))))"
"(values"
" struct:_195"
" make-_196"
" ?_197"
"(make-struct-field-accessor -ref_198 0 'self)"
"(make-struct-field-accessor -ref_198 1 'provides))))"
"(define-values"
"(struct:bulk-binding-registry bulk-binding-registry16.1 bulk-binding-registry? bulk-binding-registry-table)"
"(let-values(((struct:_220 make-_221 ?_222 -ref_223 -set!_224)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-registry"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'bulk-binding-registry)))))"
"(values struct:_220 make-_221 ?_222(make-struct-field-accessor -ref_223 0 'table))))"
"(define-values(make-bulk-binding-registry)(lambda()(bulk-binding-registry16.1(make-hasheq))))"
"(define-values"
"(register-bulk-provide!)"
"(lambda(bulk-binding-registry_240 mod-name_241 self_242 provides_243)"
"(hash-set!"
"(bulk-binding-registry-table bulk-binding-registry_240)"
" mod-name_241"
"(bulk-provide15.1 self_242 provides_243))))"
"(void)"
"(void)"
"(define-values(generate-lift-key)(lambda()(gensym 'lift)))"
"(void)"
"(void)"
"(define-values"
"(struct:root-expand-context/outer"
" root-expand-context/outer1.1"
" root-expand-context/outer?"
" root-expand-context/outer-inner"
" root-expand-context/outer-post-expansion-scope"
" root-expand-context/outer-use-site-scopes"
" root-expand-context/outer-frame-id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context/outer"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'root-expand-context/outer)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'inner)"
"(make-struct-field-accessor -ref_4 1 'post-expansion-scope)"
"(make-struct-field-accessor -ref_4 2 'use-site-scopes)"
"(make-struct-field-accessor -ref_4 3 'frame-id))))"
"(define-values"
"(struct:root-expand-context/inner"
" root-expand-context/inner2.1"
" root-expand-context/inner?"
" root-expand-context/inner-module-scopes"
" root-expand-context/inner-top-level-bind-scope"
" root-expand-context/inner-all-scopes-stx"
" root-expand-context/inner-defined-syms"
" root-expand-context/inner-counter"
" root-expand-context/inner-lift-key)"
"(let-values(((struct:_36 make-_37 ?_38 -ref_39 -set!_40)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context/inner"
" #f"
" 6"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'root-expand-context/inner)))))"
"(values"
" struct:_36"
" make-_37"
" ?_38"
"(make-struct-field-accessor -ref_39 0 'module-scopes)"
"(make-struct-field-accessor -ref_39 1 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_39 2 'all-scopes-stx)"
"(make-struct-field-accessor -ref_39 3 'defined-syms)"
"(make-struct-field-accessor -ref_39 4 'counter)"
"(make-struct-field-accessor -ref_39 5 'lift-key))))"
"(define-values"
"(root-expand-context/make)"
"(lambda(module-scopes_82"
" post-expansion-scope_83"
" top-level-bind-scope_84"
" all-scopes-stx_85"
" use-site-scopes_86"
" defined-syms_87"
" frame-id_88"
" counter_89"
" lift-key_90)"
"(root-expand-context/outer1.1"
"(root-expand-context/inner2.1"
" module-scopes_82"
" top-level-bind-scope_84"
" all-scopes-stx_85"
" defined-syms_87"
" counter_89"
" lift-key_90)"
" post-expansion-scope_83"
" use-site-scopes_86"
" frame-id_88)))"
"(define-values"
"(root-expand-context-post-expansion-scope)"
"(lambda(v_91)(root-expand-context/outer-post-expansion-scope v_91)))"
"(define-values(root-expand-context-use-site-scopes)(lambda(v_92)(root-expand-context/outer-use-site-scopes v_92)))"
"(define-values(root-expand-context-frame-id)(lambda(v_93)(root-expand-context/outer-frame-id v_93)))"
"(define-values"
"(root-expand-context-module-scopes)"
"(lambda(v_94)(root-expand-context/inner-module-scopes(root-expand-context/outer-inner v_94))))"
"(define-values"
"(root-expand-context-top-level-bind-scope)"
"(lambda(v_95)(root-expand-context/inner-top-level-bind-scope(root-expand-context/outer-inner v_95))))"
"(define-values"
"(root-expand-context-all-scopes-stx)"
"(lambda(v_96)(root-expand-context/inner-all-scopes-stx(root-expand-context/outer-inner v_96))))"
"(define-values"
"(root-expand-context-defined-syms)"
"(lambda(v_97)(root-expand-context/inner-defined-syms(root-expand-context/outer-inner v_97))))"
"(define-values"
"(root-expand-context-counter)"
"(lambda(v_98)(root-expand-context/inner-counter(root-expand-context/outer-inner v_98))))"
"(define-values"
"(root-expand-context-lift-key)"
"(lambda(v_99)(root-expand-context/inner-lift-key(root-expand-context/outer-inner v_99))))"
"(define-values"
"(make-root-expand-context11.1)"
"(lambda(all-scopes-stx6_100"
" all-scopes-stx10_101"
" initial-scopes3_102"
" initial-scopes7_103"
" outside-scope4_104"
" outside-scope8_105"
" post-expansion-scope5_106"
" post-expansion-scope9_107)"
"(let-values(((initial-scopes_108)(if initial-scopes7_103 initial-scopes3_102 null)))"
"(let-values(((outside-scope_109)(if outside-scope8_105 outside-scope4_104 top-level-common-scope)))"
"(let-values(((post-expansion-scope_110)"
"(if post-expansion-scope9_107 post-expansion-scope5_106(new-multi-scope 'top-level))))"
"(let-values(((all-scopes-stx_111)(if all-scopes-stx10_101 all-scopes-stx6_100 #f)))"
"(let-values()"
"(let-values(((module-scopes_112)(list* post-expansion-scope_110 outside-scope_109 initial-scopes_108)))"
"(root-expand-context/make"
" module-scopes_112"
" post-expansion-scope_110"
"(new-scope 'module)"
"(let-values(((or-part_113) all-scopes-stx_111))"
"(if or-part_113 or-part_113(add-scopes empty-syntax module-scopes_112)))"
"(box null)"
"(make-hasheqv)"
"                 (string->uninterned-symbol \"root-frame\")"
"(box 0)"
"(generate-lift-key))))))))))"
"(define-values"
"(root-expand-context-encode-for-module)"
"(lambda(ctx_143 orig-self_144 new-self_145)"
"(datum->syntax$1"
" #f"
"(vector"
"(add-scopes empty-syntax(root-expand-context-module-scopes ctx_143))"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope ctx_143))"
"(let-values(((temp16_146)(root-expand-context-all-scopes-stx ctx_143))"
"((orig-self17_147) orig-self_144)"
"((new-self18_148) new-self_145))"
"(syntax-module-path-index-shift15.1 #f #f temp16_146 orig-self17_147 new-self18_148 #f #f))"
"(add-scopes empty-syntax(unbox(root-expand-context-use-site-scopes ctx_143)))"
"(let-values(((ht_149)(root-expand-context-defined-syms ctx_143)))"
"(begin"
"(if((lambda(ht_150)(hash? ht_150)) ht_149)(void)(let-values()(default-in-hash ht_149)))"
"((letrec-values(((for-loop_151)"
"(lambda(table_152 i_153)"
"(if i_153"
"(let-values(((phase_154 ht_155)(hash-iterate-key+value ht_149 i_153)))"
"(let-values(((table_156)"
"(let-values(((table_157) table_152))"
"(let-values(((table_158)"
"(let-values()"
"(let-values(((key_159 val_160)"
"(let-values()"
"(values phase_154 ht_155))))"
"(hash-set table_157 key_159 val_160)))))"
"(values table_158)))))"
"(for-loop_151 table_156(hash-iterate-next ht_149 i_153))))"
" table_152))))"
" for-loop_151)"
" '#hasheqv()"
"(hash-iterate-first ht_149))))"
"(root-expand-context-frame-id ctx_143)"
"(unbox(root-expand-context-counter ctx_143))))))"
"(define-values"
"(root-expand-context-decode-for-module)"
"(lambda(vec-s_161)"
"(let-values(((vec_162)(if(syntax?$1 vec-s_161)(syntax-e$1 vec-s_161) #f)))"
"(begin"
"(if(if(vector? vec_162)"
"(if(=(vector-length vec_162) 7)"
"(if(syntax?$1(vector-ref vec_162 0))"
"(if(syntax-with-one-scope?(vector-ref vec_162 1))"
"(if(syntax?$1(vector-ref vec_162 2))"
"(if(syntax?$1(vector-ref vec_162 3))"
"(if(defined-syms-hash?(syntax-e$1(vector-ref vec_162 4)))"
"(if(symbol?(syntax-e$1(vector-ref vec_162 5)))"
"(exact-nonnegative-integer?(syntax-e$1(vector-ref vec_162 6)))"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"          (let-values () (error 'root-expand-context-decode-for-module \"bad encoding: ~s\" vec-s_161)))"
"(root-expand-context/make"
"(extract-scope-list(vector-ref vec_162 0))"
"(extract-scope(vector-ref vec_162 1))"
"(new-scope 'module)"
"(vector-ref vec_162 2)"
"(box(extract-scope-list(vector-ref vec_162 3)))"
"(unpack-defined-syms(vector-ref vec_162 4))"
"(syntax-e$1(vector-ref vec_162 5))"
"(box(syntax-e$1(vector-ref vec_162 6)))"
"(generate-lift-key))))))"
"(define-values"
"(defined-syms-hash?)"
"(lambda(v_163)"
"(let-values(((ht_164) v_163))"
"(begin"
"(if((lambda(ht_165)(hash? ht_165)) ht_164)(void)(let-values()(default-in-hash ht_164)))"
"((letrec-values(((for-loop_166)"
"(lambda(result_167 i_168)"
"(if i_168"
"(let-values(((phase_169 ht-s_170)(hash-iterate-key+value ht_164 i_168)))"
"(let-values(((result_171)"
"(let-values()"
"(let-values(((result_173)"
"(let-values()"
"(let-values()"
"(if(phase? phase_169)"
"(if(hash?(syntax-e$1 ht-s_170))"
"(let-values(((ht_174)(syntax-e$1 ht-s_170)))"
"(begin"
"(if((lambda(ht_175)(hash? ht_175)) ht_174)"
"(void)"
"(let-values()(default-in-hash ht_174)))"
"((letrec-values(((for-loop_176)"
"(lambda(result_177 i_178)"
"(if i_178"
"(let-values(((sym_179"
" id_180)"
"(hash-iterate-key+value"
" ht_174"
" i_178)))"
"(let-values(((result_181)"
"(let-values()"
"(let-values(((result_183)"
"(let-values()"
"(let-values()"
"(if(symbol?"
" sym_179)"
"(identifier?"
" id_180)"
" #f)))))"
"(values"
" result_183)))))"
"(if(not"
"((lambda x_184"
"(not"
" result_181))"
" sym_179"
" id_180))"
"(for-loop_176"
" result_181"
"(hash-iterate-next"
" ht_174"
" i_178))"
" result_181)))"
" result_177))))"
" for-loop_176)"
" #t"
"(hash-iterate-first ht_174))))"
" #f)"
" #f)))))"
"(values result_173)))))"
"(if(not((lambda x_185(not result_171)) phase_169 ht-s_170))"
"(for-loop_166 result_171(hash-iterate-next ht_164 i_168))"
" result_171)))"
" result_167))))"
" for-loop_166)"
" #t"
"(hash-iterate-first ht_164))))))"
"(define-values"
"(extract-scope-list)"
"(lambda(stx_186)(map2 generalize-scope(set->list(syntax-scope-set stx_186 0)))))"
"(define-values"
"(syntax-with-one-scope?)"
"(lambda(stx_187)(if(syntax?$1 stx_187)(= 1(set-count(syntax-scope-set stx_187 0))) #f)))"
"(define-values"
"(extract-scope)"
"(lambda(stx_188)(let-values(((s_189)(syntax-scope-set stx_188 0)))(generalize-scope(set-first s_189)))))"
"(define-values"
"(unpack-defined-syms)"
"(lambda(v_190)"
"(hash-copy"
"(let-values(((ht_191)(syntax-e$1 v_190)))"
"(begin"
"(if((lambda(ht_192)(hash? ht_192)) ht_191)(void)(let-values()(default-in-hash ht_191)))"
"((letrec-values(((for-loop_193)"
"(lambda(table_194 i_195)"
"(if i_195"
"(let-values(((phase_196 ht-s_197)(hash-iterate-key+value ht_191 i_195)))"
"(let-values(((table_198)"
"(let-values(((table_199) table_194))"
"(let-values(((table_200)"
"(let-values()"
"(let-values(((key_201 val_202)"
"(let-values()"
"(values"
" phase_196"
"(hash-copy"
"(let-values(((ht_203)"
"(syntax-e$1 ht-s_197)))"
"(begin"
"(if((lambda(ht_204)"
"(hash? ht_204))"
" ht_203)"
"(void)"
"(let-values()"
"(default-in-hash ht_203)))"
"((letrec-values(((for-loop_205)"
"(lambda(table_206"
" i_207)"
"(if i_207"
"(let-values(((sym_208"
" id_209)"
"(hash-iterate-key+value"
" ht_203"
" i_207)))"
"(let-values(((table_210)"
"(let-values(((table_211)"
" table_206))"
"(let-values(((table_212)"
"(let-values()"
"(let-values(((key_213"
" val_214)"
"(let-values()"
"(values"
" sym_208"
" id_209))))"
"(hash-set"
" table_211"
" key_213"
" val_214)))))"
"(values"
" table_212)))))"
"(for-loop_205"
" table_210"
"(hash-iterate-next"
" ht_203"
" i_207))))"
" table_206))))"
" for-loop_205)"
" '#hash()"
"(hash-iterate-first"
" ht_203)))))))))"
"(hash-set table_199 key_201 val_202)))))"
"(values table_200)))))"
"(for-loop_193 table_198(hash-iterate-next ht_191 i_195))))"
" table_194))))"
" for-loop_193)"
" '#hasheqv()"
"(hash-iterate-first ht_191)))))))"
"(void)"
"(void)"
"(define-values"
"(linklet-primitive-table)"
"(let-values(((or-part_14)(primitive-table '#%bootstrap-linklet)))"
"(if or-part_14 or-part_14(primitive-table '#%linklet))))"
"(define-values(1/primitive-table)(hash-ref linklet-primitive-table 'primitive-table #f))"
"(define-values(1/primitive->compiled-position)(hash-ref linklet-primitive-table 'primitive->compiled-position #f))"
"(define-values(1/compiled-position->primitive)(hash-ref linklet-primitive-table 'compiled-position->primitive #f))"
"(define-values(1/linklet?)(hash-ref linklet-primitive-table 'linklet? #f))"
"(define-values(1/compile-linklet)(hash-ref linklet-primitive-table 'compile-linklet #f))"
"(define-values(1/recompile-linklet)(hash-ref linklet-primitive-table 'recompile-linklet #f))"
"(define-values(1/eval-linklet)(hash-ref linklet-primitive-table 'eval-linklet #f))"
"(define-values(1/instantiate-linklet)(hash-ref linklet-primitive-table 'instantiate-linklet #f))"
"(define-values(1/linklet-import-variables)(hash-ref linklet-primitive-table 'linklet-import-variables #f))"
"(define-values(1/linklet-export-variables)(hash-ref linklet-primitive-table 'linklet-export-variables #f))"
"(define-values(1/instance?)(hash-ref linklet-primitive-table 'instance? #f))"
"(define-values(1/make-instance)(hash-ref linklet-primitive-table 'make-instance #f))"
"(define-values(1/instance-name)(hash-ref linklet-primitive-table 'instance-name #f))"
"(define-values(1/instance-data)(hash-ref linklet-primitive-table 'instance-data #f))"
"(define-values(1/instance-variable-names)(hash-ref linklet-primitive-table 'instance-variable-names #f))"
"(define-values(1/instance-variable-value)(hash-ref linklet-primitive-table 'instance-variable-value #f))"
"(define-values(1/instance-set-variable-value!)(hash-ref linklet-primitive-table 'instance-set-variable-value! #f))"
"(define-values(1/instance-unset-variable!)(hash-ref linklet-primitive-table 'instance-unset-variable! #f))"
"(define-values(1/linklet-directory?)(hash-ref linklet-primitive-table 'linklet-directory? #f))"
"(define-values(1/hash->linklet-directory)(hash-ref linklet-primitive-table 'hash->linklet-directory #f))"
"(define-values(1/linklet-directory->hash)(hash-ref linklet-primitive-table 'linklet-directory->hash #f))"
"(define-values(1/linklet-bundle?)(hash-ref linklet-primitive-table 'linklet-bundle? #f))"
"(define-values(1/hash->linklet-bundle)(hash-ref linklet-primitive-table 'hash->linklet-bundle #f))"
"(define-values(1/linklet-bundle->hash)(hash-ref linklet-primitive-table 'linklet-bundle->hash #f))"
"(define-values(1/variable-reference?)(hash-ref linklet-primitive-table 'variable-reference? #f))"
"(define-values(1/variable-reference->instance)(hash-ref linklet-primitive-table 'variable-reference->instance #f))"
"(define-values(1/variable-reference-constant?)(hash-ref linklet-primitive-table 'variable-reference-constant? #f))"
"(call-with-values"
"(lambda()"
"(if 1/variable-reference-constant?"
"(void)"
"      (let-values () (error \"broken '#%linklet primitive table; maybe you need to use \\\"bootstrap-run.rkt\\\"\"))))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(struct:module-registry module-registry1.1 module-registry? module-registry-declarations module-registry-lock-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-registry"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-registry)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'declarations)"
"(make-struct-field-accessor -ref_4 1 'lock-box))))"
"(define-values(make-module-registry)(lambda()(module-registry1.1(make-hasheq)(box #f))))"
"(define-values"
"(registry-call-with-lock)"
"(lambda(r_26 proc_27)"
"(let-values(((lock-box_28)(module-registry-lock-box r_26)))"
"((letrec-values(((loop_29)"
"(lambda()"
"(let-values(((v_30)(unbox lock-box_28)))"
"(if(let-values(((or-part_31)(not v_30)))"
"(if or-part_31 or-part_31(sync/timeout 0(car v_30)(cdr v_30))))"
"(let-values()"
"(let-values(((sema_32)(make-semaphore)))"
"(let-values(((lock_33)(cons(semaphore-peek-evt sema_32)(current-thread))))"
"((dynamic-wind"
" void"
"(lambda()"
"(if(box-cas! lock-box_28 v_30 lock_33)"
"(let-values()(begin(proc_27) void))"
"(let-values() loop_29)))"
"(lambda()(semaphore-post sema_32)))))))"
"(if(eq?(current-thread)(cdr v_30))"
"(let-values()(proc_27))"
"(let-values()(begin(sync(car v_30)(cdr v_30))(loop_29)))))))))"
" loop_29)))))"
"(void)"
"(void)"
"(define-values"
"(struct:namespace"
" namespace1.1"
" 1/namespace?"
" namespace-mpi"
" namespace-source-name"
" namespace-root-expand-ctx"
" namespace-phase"
" namespace-0-phase"
" namespace-phase-to-namespace"
" namespace-phase-level-to-definitions"
" 1/namespace-module-registry"
" namespace-bulk-binding-registry"
" namespace-submodule-declarations"
" namespace-root-namespace"
" namespace-declaration-inspector"
" namespace-inspector"
" namespace-available-module-instances"
" namespace-module-instances"
" set-namespace-inspector!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'namespace"
" #f"
" 15"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(ns_97 port_98 mode_99)"
"                         (let-values ((() (begin (write-string \"#<namespace\" port_98) (values))))"
"(let-values(((n_100)(namespace-source-name ns_97)))"
"(let-values((()"
"(begin"
"(if n_100"
"                                               (let-values () (fprintf port_98 \":~a\" (namespace->name ns_97)))"
"(void))"
"(values))))"
"(let-values(((0-phase_101)(namespace-0-phase ns_97)))"
"(let-values(((phase-level_102)(phase-(namespace-phase ns_97) 0-phase_101)))"
"(begin"
"(if(zero-phase? phase-level_102)"
"(void)"
"                                       (let-values () (fprintf port_98 \":~s\" phase-level_102)))"
"(if(zero-phase? 0-phase_101)"
"(void)"
"(let-values()"
"                                         (fprintf port_98 \"~a~s\" (if (positive? 0-phase_101) \"+\" \"\") 0-phase_101)))"
"                                     (write-string \">\" port_98))))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 13 14)"
" #f"
" 'namespace)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'mpi)"
"(make-struct-field-accessor -ref_4 1 'source-name)"
"(make-struct-field-accessor -ref_4 2 'root-expand-ctx)"
"(make-struct-field-accessor -ref_4 3 'phase)"
"(make-struct-field-accessor -ref_4 4 '0-phase)"
"(make-struct-field-accessor -ref_4 5 'phase-to-namespace)"
"(make-struct-field-accessor -ref_4 6 'phase-level-to-definitions)"
"(make-struct-field-accessor -ref_4 7 'module-registry)"
"(make-struct-field-accessor -ref_4 8 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 9 'submodule-declarations)"
"(make-struct-field-accessor -ref_4 10 'root-namespace)"
"(make-struct-field-accessor -ref_4 11 'declaration-inspector)"
"(make-struct-field-accessor -ref_4 12 'inspector)"
"(make-struct-field-accessor -ref_4 13 'available-module-instances)"
"(make-struct-field-accessor -ref_4 14 'module-instances)"
"(make-struct-field-mutator -set!_5 12 'inspector))))"
"(define-values"
"(struct:definitions definitions2.1 definitions? definitions-variables definitions-transformers)"
"(let-values(((struct:_103 make-_104 ?_105 -ref_106 -set!_107)"
"(let-values()"
"(let-values()"
"(make-struct-type 'definitions #f 2 0 #f null(current-inspector) #f '(0 1) #f 'definitions)))))"
"(values"
" struct:_103"
" make-_104"
" ?_105"
"(make-struct-field-accessor -ref_106 0 'variables)"
"(make-struct-field-accessor -ref_106 1 'transformers))))"
"(define-values(make-namespace)(lambda()(let-values()(new-namespace9.1 #f #f #f #f #f #f))))"
"(define-values"
"(new-namespace9.1)"
"(lambda(register?4_128"
" register?6_129"
" root-expand-ctx3_130"
" root-expand-ctx5_131"
" share-from-ns7_132"
" share-from-ns8_133)"
"(let-values(((share-from-ns_134)(if share-from-ns8_133 share-from-ns7_132 #f)))"
"(let-values(((root-expand-ctx_135)"
"(if root-expand-ctx5_131"
" root-expand-ctx3_130"
"(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f)))))"
"(let-values(((register?_136)(if register?6_129 register?4_128 #t)))"
"(let-values()"
"(let-values(((phase_137)(if share-from-ns_134(namespace-phase share-from-ns_134) 0)))"
"(let-values(((ns_138)"
"(namespace1.1"
" top-level-module-path-index"
" #f"
"(box root-expand-ctx_135)"
" phase_137"
" phase_137"
"(make-hasheqv)"
"(make-hasheqv)"
"(if share-from-ns_134"
"(1/namespace-module-registry share-from-ns_134)"
"(make-module-registry))"
"(if share-from-ns_134"
"(namespace-bulk-binding-registry share-from-ns_134)"
"(make-bulk-binding-registry))"
"(make-hasheq)"
"(if share-from-ns_134"
"(let-values(((or-part_139)(namespace-root-namespace share-from-ns_134)))"
"(if or-part_139 or-part_139 share-from-ns_134))"
" #f)"
" #f"
"(make-inspector(current-code-inspector))"
"(if share-from-ns_134"
"(namespace-available-module-instances share-from-ns_134)"
"(make-hasheqv))"
"(if share-from-ns_134(namespace-module-instances share-from-ns_134)(make-hasheqv)))))"
"(begin"
"(if register?_136"
"(let-values()(hash-set!(namespace-phase-to-namespace ns_138) phase_137 ns_138))"
"(void))"
" ns_138)))))))))"
"(define-values"
"(1/current-namespace)"
"(make-parameter"
"(make-namespace)"
"(lambda(v_163)"
"(begin"
"       (if (1/namespace? v_163) (void) (let-values () (raise-argument-error 'current-namespace \"namespace?\" v_163)))"
" v_163))))"
"(define-values(namespace-get-root-expand-ctx)(lambda(ns_164)(force(unbox(namespace-root-expand-ctx ns_164)))))"
"(define-values"
"(namespace-set-root-expand-ctx!)"
"(lambda(ns_165 root-ctx_166)(set-box!(namespace-root-expand-ctx ns_165) root-ctx_166)))"
"(define-values"
"(namespace->module)"
"(lambda(ns_167 name_168)"
"(let-values(((or-part_169)(hash-ref(namespace-submodule-declarations ns_167) name_168 #f)))"
"(if or-part_169"
" or-part_169"
"(hash-ref(module-registry-declarations(1/namespace-module-registry ns_167)) name_168 #f)))))"
"(define-values"
"(namespace->namespace-at-phase)"
"(lambda(ns_170 phase_171)"
"(let-values(((or-part_172)(hash-ref(namespace-phase-to-namespace ns_170) phase_171 #f)))"
"(if or-part_172"
" or-part_172"
"(let-values(((p-ns_173)"
"(let-values(((the-struct_174) ns_170))"
"(if(1/namespace? the-struct_174)"
"(let-values(((phase22_175) phase_171))"
"(namespace1.1"
"(namespace-mpi the-struct_174)"
"(namespace-source-name the-struct_174)"
"(namespace-root-expand-ctx the-struct_174)"
" phase22_175"
"(namespace-0-phase the-struct_174)"
"(namespace-phase-to-namespace the-struct_174)"
"(namespace-phase-level-to-definitions the-struct_174)"
"(1/namespace-module-registry the-struct_174)"
"(namespace-bulk-binding-registry the-struct_174)"
"(namespace-submodule-declarations the-struct_174)"
"(namespace-root-namespace the-struct_174)"
"(namespace-declaration-inspector the-struct_174)"
"(namespace-inspector the-struct_174)"
"(namespace-available-module-instances the-struct_174)"
"(namespace-module-instances the-struct_174)))"
"                          (raise-argument-error 'struct-copy \"namespace?\" the-struct_174)))))"
"(begin(hash-set!(namespace-phase-to-namespace ns_170) phase_171 p-ns_173) p-ns_173))))))"
"(define-values"
"(namespace->name)"
"(lambda(ns_176)"
"(let-values(((n_177)(namespace-source-name ns_176)))"
"(let-values(((s_178)"
"(if(not n_177)"
"(let-values() 'top-level)"
"(if(symbol? n_177)"
"                        (let-values () (format \"'~s\" n_177))"
"                        (let-values () (string-append \"\\\"\" (path->string n_177) \"\\\"\"))))))"
"(let-values(((r_179)(1/resolved-module-path-name(1/module-path-index-resolve(namespace-mpi ns_176)))))"
"          (if (pair? r_179) (string-append \"(submod \" s_178 \" \" (substring (format \"~s\" (cdr r_179)) 1)) s_178))))))"
"(define-values"
"(namespace->definitions)"
"(lambda(ns_180 phase-level_181)"
"(let-values(((d_182)(hash-ref(namespace-phase-level-to-definitions ns_180) phase-level_181 #f)))"
"(let-values(((or-part_183) d_182))"
"(if or-part_183"
" or-part_183"
"(let-values()"
"(let-values(((p-ns_184)"
"(namespace->namespace-at-phase ns_180(phase+(namespace-0-phase ns_180) phase-level_181))))"
"(let-values(((d_185)"
"(definitions2.1(1/make-instance(namespace->name p-ns_184) p-ns_184)(make-hasheq))))"
"(begin(hash-set!(namespace-phase-level-to-definitions ns_180) phase-level_181 d_185) d_185)))))))))"
"(define-values"
"(namespace-set-variable!)"
"(let-values(((namespace-set-variable!18_186)"
"(lambda(ns14_187 phase-level15_188 name16_189 val17_190 as-constant?12_191 as-constant?13_192)"
"(let-values(((ns_193) ns14_187))"
"(let-values(((phase-level_194) phase-level15_188))"
"(let-values(((name_195) name16_189))"
"(let-values(((val_196) val17_190))"
"(let-values(((as-constant?_197)(if as-constant?13_192 as-constant?12_191 #f)))"
"(let-values()"
"(let-values(((d_198)(namespace->definitions ns_193 phase-level_194)))"
"(1/instance-set-variable-value!"
"(definitions-variables d_198)"
" name_195"
" val_196"
"(if as-constant?_197 'constant #f))))))))))))"
"(case-lambda"
"((ns_199 phase-level_200 name_201 val_202)"
"(namespace-set-variable!18_186 ns_199 phase-level_200 name_201 val_202 #f #f))"
"((ns_203 phase-level_204 name_205 val_206 as-constant?12_207)"
"(namespace-set-variable!18_186 ns_203 phase-level_204 name_205 val_206 as-constant?12_207 #t)))))"
"(define-values"
"(namespace-set-consistent!)"
"(lambda(ns_208 phase-level_209 name_210 val_211)"
"(let-values(((d_212)(namespace->definitions ns_208 phase-level_209)))"
"(1/instance-set-variable-value!(definitions-variables d_212) name_210 val_211 'consistent))))"
"(define-values"
"(namespace-unset-variable!)"
"(lambda(ns_213 phase-level_214 name_215)"
"(let-values(((d_216)(namespace->definitions ns_213 phase-level_214)))"
"(1/instance-unset-variable!(definitions-variables d_216) name_215))))"
"(define-values"
"(namespace-set-transformer!)"
"(lambda(ns_217 phase-level_218 name_219 val_220)"
"(let-values(((d_221)(namespace->definitions ns_217(add1 phase-level_218))))"
"(hash-set!(definitions-transformers d_221) name_219 val_220))))"
"(define-values"
"(namespace-unset-transformer!)"
"(lambda(ns_222 phase-level_223 name_224)"
"(let-values(((d_225)(namespace->definitions ns_222(add1 phase-level_223))))"
"(hash-remove!(definitions-transformers d_225) name_224))))"
"(define-values"
"(namespace-get-variable)"
"(lambda(ns_226 phase-level_227 name_228 fail-k_229)"
"(let-values(((d_230)(namespace->definitions ns_226 phase-level_227)))"
"(1/instance-variable-value(definitions-variables d_230) name_228 fail-k_229))))"
"(define-values"
"(namespace-get-transformer)"
"(lambda(ns_231 phase-level_232 name_233 fail-k_234)"
"(let-values(((d_235)(namespace->definitions ns_231(add1 phase-level_232))))"
"(hash-ref(definitions-transformers d_235) name_233 fail-k_234))))"
"(define-values"
"(namespace->instance)"
"(lambda(ns_236 phase-shift_237)(definitions-variables(namespace->definitions ns_236 phase-shift_237))))"
"(define-values"
"(namespace-same-instance?)"
"(lambda(a-ns_238 b-ns_239)"
"(eq?"
"(hash-ref(namespace-phase-level-to-definitions a-ns_238) 0 'no-a)"
"(hash-ref(namespace-phase-level-to-definitions b-ns_239) 0 'no-b))))"
"(void)"
"(void)"
"(define-values(original-property-sym)(gensym 'original))"
"(void)"
"(void)"
"(define-values"
"(syntax->list$1)"
"(lambda(s_1)"
"(let-values(((l_2)"
"((letrec-values(((loop_3)"
"(lambda(s_4)"
"(if(pair? s_4)"
"(let-values()(cons(car s_4)(loop_3(cdr s_4))))"
"(if(syntax?$1 s_4)"
"(let-values()(loop_3(syntax-e$1 s_4)))"
"(let-values() s_4))))))"
" loop_3)"
" s_1)))"
"(if(list? l_2) l_2 #f))))"
"(void)"
"(void)"
"(define-values(missing$1)(gensym))"
"(define-values"
"(syntax-track-origin$1)"
"(let-values(((syntax-track-origin5_1)"
"(lambda(new-stx3_2 old-stx4_3 id1_4 id2_5)"
"(let-values(((new-stx_6) new-stx3_2))"
"(let-values(((old-stx_7) old-stx4_3))"
"(let-values(((id_8)"
"(if id2_5"
" id1_4"
"(if(identifier? old-stx_7)"
" old-stx_7"
"(let-values(((v_9)(syntax-e/no-taint old-stx_7)))"
"(if(pair? v_9)(car v_9) #f))))))"
"(let-values()"
"(let-values(((old-props_10)(syntax-props old-stx_7)))"
"(if(zero?(hash-count old-props_10))"
"(let-values()"
"(if id_8"
"(syntax-property$1"
" new-stx_6"
" 'origin"
"(cons id_8(hash-ref(syntax-props new-stx_6) 'origin null)))"
" new-stx_6))"
"(let-values()"
"(let-values(((new-props_11)(syntax-props new-stx_6)))"
"(if(zero?(hash-count new-props_11))"
"(let-values()"
"(if id_8"
"(let-values()"
"(let-values(((old-origin_12)"
"(plain-property-value"
"(hash-ref old-props_10 'origin missing$1))))"
"(let-values(((origin_13)"
"(if(eq? old-origin_12 missing$1)"
"(list id_8)"
"(cons id_8 old-origin_12))))"
"(let-values(((the-struct_14) new-stx_6))"
"(if(syntax?$1 the-struct_14)"
"(let-values(((props7_15)(hash-set old-props_10 'origin origin_13)))"
"(syntax1.1"
"(syntax-content the-struct_14)"
"(syntax-scopes the-struct_14)"
"(syntax-shifted-multi-scopes the-struct_14)"
"(syntax-scope-propagations the-struct_14)"
"(syntax-mpi-shifts the-struct_14)"
"(syntax-srcloc the-struct_14)"
" props7_15"
"(syntax-inspector the-struct_14)"
"(syntax-tamper the-struct_14)))"
"                                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_14))))))"
"(let-values()"
"(let-values(((the-struct_16) new-stx_6))"
"(if(syntax?$1 the-struct_16)"
"(let-values(((props8_17) old-props_10))"
"(syntax1.1"
"(syntax-content the-struct_16)"
"(syntax-scopes the-struct_16)"
"(syntax-shifted-multi-scopes the-struct_16)"
"(syntax-scope-propagations the-struct_16)"
"(syntax-mpi-shifts the-struct_16)"
"(syntax-srcloc the-struct_16)"
" props8_17"
"(syntax-inspector the-struct_16)"
"(syntax-tamper the-struct_16)))"
"                                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_16))))))"
"(let-values()"
"(let-values(((old-props-with-origin_18)"
"(if id_8"
"(hash-set"
" old-props_10"
" 'origin"
"(cons id_8(hash-ref old-props_10 'origin null)))"
" old-props_10)))"
"(let-values(((updated-props_19)"
"(if(<"
"(hash-count old-props-with-origin_18)"
"(hash-count new-props_11))"
"(let-values()"
"(let-values(((ht_20) old-props-with-origin_18))"
"(begin"
"(if((lambda(ht_21)"
"(if(hash? ht_21)(immutable? ht_21) #f))"
" ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(new-props_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_20"
" i_24)))"
"(let-values(((new-props_27)"
"(let-values(((new-props_28)"
" new-props_23))"
"(let-values(((new-props_29)"
"(let-values()"
"(let-values(((new-v_30)"
"(hash-ref"
" new-props_28"
" k_25"
" missing$1)))"
"(hash-set"
" new-props_28"
" k_25"
"(if(eq?"
" new-v_30"
" missing$1)"
" v_26"
"(cons/preserve"
" new-v_30"
" v_26)))))))"
"(values"
" new-props_29)))))"
"(for-loop_22"
" new-props_27"
"(unsafe-immutable-hash-iterate-next"
" ht_20"
" i_24))))"
" new-props_23))))"
" for-loop_22)"
" new-props_11"
"(unsafe-immutable-hash-iterate-first ht_20)))))"
"(let-values()"
"(let-values(((ht_31) new-props_11))"
"(begin"
"(if((lambda(ht_32)"
"(if(hash? ht_32)(immutable? ht_32) #f))"
" ht_31)"
"(void)"
"(let-values()(default-in-immutable-hash ht_31)))"
"((letrec-values(((for-loop_33)"
"(lambda(old-props_34 i_35)"
"(if i_35"
"(let-values(((k_36 v_37)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_31"
" i_35)))"
"(let-values(((old-props_38)"
"(let-values(((old-props_39)"
" old-props_34))"
"(let-values(((old-props_40)"
"(let-values()"
"(let-values(((old-v_41)"
"(hash-ref"
" old-props_39"
" k_36"
" missing$1)))"
"(hash-set"
" old-props_39"
" k_36"
"(if(eq?"
" old-v_41"
" missing$1)"
" v_37"
"(cons/preserve"
" v_37"
" old-v_41)))))))"
"(values"
" old-props_40)))))"
"(for-loop_33"
" old-props_38"
"(unsafe-immutable-hash-iterate-next"
" ht_31"
" i_35))))"
" old-props_34))))"
" for-loop_33)"
" old-props-with-origin_18"
"(unsafe-immutable-hash-iterate-first ht_31))))))))"
"(let-values(((the-struct_42) new-stx_6))"
"(if(syntax?$1 the-struct_42)"
"(let-values(((props9_43) updated-props_19))"
"(syntax1.1"
"(syntax-content the-struct_42)"
"(syntax-scopes the-struct_42)"
"(syntax-shifted-multi-scopes the-struct_42)"
"(syntax-scope-propagations the-struct_42)"
"(syntax-mpi-shifts the-struct_42)"
"(syntax-srcloc the-struct_42)"
" props9_43"
"(syntax-inspector the-struct_42)"
"(syntax-tamper the-struct_42)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"syntax?\""
" the-struct_42))))))))))))))))))"
"(case-lambda"
"((new-stx_44 old-stx_45)(syntax-track-origin5_1 new-stx_44 old-stx_45 #f #f))"
"((new-stx_46 old-stx_47 id1_48)(syntax-track-origin5_1 new-stx_46 old-stx_47 id1_48 #t)))))"
"(define-values"
"(cons/preserve)"
"(lambda(a_49 b_50)"
"(if(let-values(((or-part_51)(preserved-property-value? a_49)))"
"(if or-part_51 or-part_51(preserved-property-value? b_50)))"
"(preserved-property-value1.1(cons(plain-property-value a_49)(plain-property-value b_50)))"
"(cons a_49 b_50))))"
"(define-values"
"(syntax-track-origin*)"
"(lambda(old-stxes_52 new-stx_53)"
"(let-values(((lst_54) old-stxes_52))"
"(begin"
"(if(list? lst_54)(void)(let-values()(in-list lst_54)))"
"((letrec-values(((for-loop_55)"
"(lambda(new-stx_56 lst_57)"
"(if(pair? lst_57)"
"(let-values(((old-stx_58)(unsafe-car lst_57)))"
"(let-values(((new-stx_59)"
"(let-values(((new-stx_60) new-stx_56))"
"(let-values(((new-stx_61)"
"(let-values()"
"(syntax-track-origin$1 new-stx_60 old-stx_58))))"
"(values new-stx_61)))))"
"(for-loop_55 new-stx_59(unsafe-cdr lst_57))))"
" new-stx_56))))"
" for-loop_55)"
" new-stx_53"
" lst_54)))))"
"(void)"
"(void)"
"(define-values"
"(1/struct:exn:fail:syntax make-exn:fail:syntax$1 1/exn:fail:syntax? 1/exn:fail:syntax-exprs)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax"
" struct:exn:fail"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:exn:srclocs"
"(lambda(e_28)(filter values(map2 syntax-srcloc(1/exn:fail:syntax-exprs e_28))))))"
" #f"
" #f"
" '(0)"
"(lambda(str_29 cm_30 exprs_31 info_32)"
"(begin"
"(if(if(list? exprs_31)(andmap2 syntax?$1 exprs_31) #f)"
"(void)"
"                           (let-values () (raise-argument-error 'exn:fail:syntax \"(listof syntax?)\" exprs_31)))"
"(values str_29 cm_30 exprs_31)))"
" 'exn:fail:syntax)))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'exprs))))"
"(define-values"
"(1/struct:exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1 1/exn:fail:syntax:unbound?)"
"(let-values(((struct:_33 make-_34 ?_35 -ref_36 -set!_37)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:unbound"
" 1/struct:exn:fail:syntax"
" 0"
" 0"
" #f"
" null"
" #f"
" #f"
" '()"
" #f"
" 'exn:fail:syntax:unbound)))))"
"(values struct:_33 make-_34 ?_35)))"
"(define-values"
"(raise-syntax-error$1)"
"(let-values(((raise-syntax-error11_48)"
"(lambda(given-name9_49"
" message10_50"
" expr1_51"
" sub-expr2_52"
" extra-sources3_53"
" message-suffix4_54"
" expr5_55"
" sub-expr6_56"
" extra-sources7_57"
" message-suffix8_58)"
"(let-values(((given-name_59) given-name9_49))"
"(let-values(((message_60) message10_50))"
"(let-values(((expr_61)(if expr5_55 expr1_51 #f)))"
"(let-values(((sub-expr_62)(if sub-expr6_56 sub-expr2_52 #f)))"
"(let-values(((extra-sources_63)(if extra-sources7_57 extra-sources3_53 null)))"
"                            (let-values (((message-suffix_64) (if message-suffix8_58 message-suffix4_54 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax$1"
" given-name_59"
" message_60"
" expr_61"
" sub-expr_62"
" extra-sources_63"
" message-suffix_64)))))))))))"
"(case-lambda"
"((given-name_65 message_66)(raise-syntax-error11_48 given-name_65 message_66 #f #f #f #f #f #f #f #f))"
"((given-name_67 message_68 expr_69 sub-expr_70 extra-sources_71 message-suffix4_72)"
"(raise-syntax-error11_48"
" given-name_67"
" message_68"
" expr_69"
" sub-expr_70"
" extra-sources_71"
" message-suffix4_72"
" #t"
" #t"
" #t"
" #t))"
"((given-name_73 message_74 expr_75 sub-expr_76 extra-sources3_77)"
"(raise-syntax-error11_48 given-name_73 message_74 expr_75 sub-expr_76 extra-sources3_77 #f #t #t #t #f))"
"((given-name_78 message_79 expr_80 sub-expr2_81)"
"(raise-syntax-error11_48 given-name_78 message_79 expr_80 sub-expr2_81 #f #f #t #t #f #f))"
"((given-name_82 message_83 expr1_84)"
"(raise-syntax-error11_48 given-name_82 message_83 expr1_84 #f #f #f #t #f #f #f)))))"
"(define-values"
"(raise-unbound-syntax-error)"
"(let-values(((raise-unbound-syntax-error23_85)"
"(lambda(given-name21_86"
" message22_87"
" expr13_88"
" sub-expr14_89"
" extra-sources15_90"
" message-suffix16_91"
" expr17_92"
" sub-expr18_93"
" extra-sources19_94"
" message-suffix20_95)"
"(let-values(((given-name_96) given-name21_86))"
"(let-values(((message_97) message22_87))"
"(let-values(((expr_98)(if expr17_92 expr13_88 #f)))"
"(let-values(((sub-expr_99)(if sub-expr18_93 sub-expr14_89 #f)))"
"(let-values(((extra-sources_100)(if extra-sources19_94 extra-sources15_90 null)))"
"                            (let-values (((message-suffix_101) (if message-suffix20_95 message-suffix16_91 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax:unbound$1"
" given-name_96"
" message_97"
" expr_98"
" sub-expr_99"
" extra-sources_100"
" message-suffix_101)))))))))))"
"(case-lambda"
"((given-name_102 message_103)(raise-unbound-syntax-error23_85 given-name_102 message_103 #f #f #f #f #f #f #f #f))"
"((given-name_104 message_105 expr_106 sub-expr_107 extra-sources_108 message-suffix16_109)"
"(raise-unbound-syntax-error23_85"
" given-name_104"
" message_105"
" expr_106"
" sub-expr_107"
" extra-sources_108"
" message-suffix16_109"
" #t"
" #t"
" #t"
" #t))"
"((given-name_110 message_111 expr_112 sub-expr_113 extra-sources15_114)"
"(raise-unbound-syntax-error23_85"
" given-name_110"
" message_111"
" expr_112"
" sub-expr_113"
" extra-sources15_114"
" #f"
" #t"
" #t"
" #t"
" #f))"
"((given-name_115 message_116 expr_117 sub-expr14_118)"
"(raise-unbound-syntax-error23_85 given-name_115 message_116 expr_117 sub-expr14_118 #f #f #t #t #f #f))"
"((given-name_119 message_120 expr13_121)"
"(raise-unbound-syntax-error23_85 given-name_119 message_120 expr13_121 #f #f #f #t #f #f #f)))))"
"(define-values"
"(do-raise-syntax-error)"
"(lambda(exn:fail:syntax_122 given-name_123 message_124 expr_125 sub-expr_126 extra-sources_127 message-suffix_128)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_133)(not given-name_123)))"
"(if or-part_133 or-part_133(symbol? given-name_123)))"
"(void)"
"                      (let-values () (raise-argument-error 'raise-syntax-error \"(or/c symbol? #f)\" given-name_123)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message_124)"
"(void)"
"                        (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message_124)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(list? extra-sources_127)(andmap2 syntax?$1 extra-sources_127) #f)"
"(void)"
"(let-values()"
"                            (raise-argument-error 'raise-syntax-error \"(listof syntax?)\" extra-sources_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message-suffix_128)"
"(void)"
"                            (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message-suffix_128)))"
"(values))))"
"(let-values(((name_129)"
"(format"
"                           \"~a\""
"(let-values(((or-part_134) given-name_123))"
"(if or-part_134"
" or-part_134"
"(let-values(((or-part_135)(extract-form-name expr_125)))"
"(if or-part_135 or-part_135 '?)))))))"
"(let-values(((at-message_130)"
"(let-values(((or-part_136)"
"(if sub-expr_126"
"(if(error-print-source-location)"
"                                              (format \"\\n  at: ~.s\" (syntax->datum$1 (datum->syntax$1 #f sub-expr_126)))"
" #f)"
" #f)))"
"                              (if or-part_136 or-part_136 \"\"))))"
"(let-values(((in-message_131)"
"(let-values(((or-part_137)"
"(if expr_125"
"(if(error-print-source-location)"
"                                                (format \"\\n  in: ~.s\" (syntax->datum$1 (datum->syntax$1 #f expr_125)))"
" #f)"
" #f)))"
"                                (if or-part_137 or-part_137 \"\"))))"
"(let-values(((src-loc-str_132)"
"(let-values(((or-part_138)(extract-source-location sub-expr_126)))"
"(if or-part_138"
" or-part_138"
"(let-values(((or-part_139)(extract-source-location expr_125)))"
"                                      (if or-part_139 or-part_139 \"\"))))))"
"(raise"
"(exn:fail:syntax_122"
"(string-append"
" src-loc-str_132"
" name_129"
"                       \": \""
" message_124"
" at-message_130"
" in-message_131"
" message-suffix_128)"
"(current-continuation-marks)"
"(map2"
" syntax-taint$1"
"(if(let-values(((or-part_140) sub-expr_126))(if or-part_140 or-part_140 expr_125))"
"(cons"
"(datum->syntax$1"
" #f"
"(let-values(((or-part_141) sub-expr_126))(if or-part_141 or-part_141 expr_125)))"
" extra-sources_127)"
" extra-sources_127))))))))))))))"
"(define-values"
"(extract-form-name)"
"(lambda(s_142)"
"(if(syntax?$1 s_142)"
"(let-values()"
"(let-values(((e_143)(syntax-e$1 s_142)))"
"(if(symbol? e_143)"
"(let-values() e_143)"
"(if(if(pair? e_143)(identifier?(car e_143)) #f)"
"(let-values()(syntax-e$1(car e_143)))"
"(let-values() #f)))))"
"(let-values() #f))))"
"(define-values"
"(extract-source-location)"
"(lambda(s_144)"
"(if(syntax?$1 s_144)"
"(if(syntax-srcloc s_144)"
"        (let-values (((str_145) (srcloc->string (syntax-srcloc s_144)))) (if str_145 (string-append str_145 \": \") #f))"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:module-use module-use1.1 module-use? module-use-module module-use-phase)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'module-use #f 2 0 #f null #f #f '(0 1) #f 'module-use)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module)"
"(make-struct-field-accessor -ref_4 1 'phase))))"
"(void)"
"(void)"
"(define-values"
"(struct:module"
" module1.1"
" module?"
" module-source-name"
" module-self"
" module-requires"
" module-provides"
" module-access"
" module-language-info"
" module-min-phase-level"
" module-max-phase-level"
" module-phase-level-linklet-info-callback"
" module-prepare-instance"
" module-instantiate-phase"
" module-primitive?"
" module-predefined?$1"
" module-cross-phase-persistent?"
" module-no-protected?"
" module-inspector"
" module-submodule-names"
" module-supermodule-name"
" module-get-all-variables"
" set-module-access!)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module"
" #f"
" 19"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18)"
" #f"
" 'module)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'source-name)"
"(make-struct-field-accessor -ref_24 1 'self)"
"(make-struct-field-accessor -ref_24 2 'requires)"
"(make-struct-field-accessor -ref_24 3 'provides)"
"(make-struct-field-accessor -ref_24 4 'access)"
"(make-struct-field-accessor -ref_24 5 'language-info)"
"(make-struct-field-accessor -ref_24 6 'min-phase-level)"
"(make-struct-field-accessor -ref_24 7 'max-phase-level)"
"(make-struct-field-accessor -ref_24 8 'phase-level-linklet-info-callback)"
"(make-struct-field-accessor -ref_24 9 'prepare-instance)"
"(make-struct-field-accessor -ref_24 10 'instantiate-phase)"
"(make-struct-field-accessor -ref_24 11 'primitive?)"
"(make-struct-field-accessor -ref_24 12 'predefined?)"
"(make-struct-field-accessor -ref_24 13 'cross-phase-persistent?)"
"(make-struct-field-accessor -ref_24 14 'no-protected?)"
"(make-struct-field-accessor -ref_24 15 'inspector)"
"(make-struct-field-accessor -ref_24 16 'submodule-names)"
"(make-struct-field-accessor -ref_24 17 'supermodule-name)"
"(make-struct-field-accessor -ref_24 18 'get-all-variables)"
"(make-struct-field-mutator -set!_25 4 'access))))"
"(define-values"
"(struct:module-linklet-info"
" module-linklet-info2.1"
" module-linklet-info?"
" module-linklet-info-linklet-or-instance"
" module-linklet-info-module-uses"
" module-linklet-info-self)"
"(let-values(((struct:_131 make-_132 ?_133 -ref_134 -set!_135)"
"(let-values()"
"(let-values()"
"(make-struct-type 'module-linklet-info #f 3 0 #f null #f #f '(0 1 2) #f 'module-linklet-info)))))"
"(values"
" struct:_131"
" make-_132"
" ?_133"
"(make-struct-field-accessor -ref_134 0 'linklet-or-instance)"
"(make-struct-field-accessor -ref_134 1 'module-uses)"
"(make-struct-field-accessor -ref_134 2 'self))))"
"(define-values"
"(make-module37.1)"
"(lambda(cross-phase-persistent?15_163"
" cross-phase-persistent?32_164"
" get-all-variables19_165"
" get-all-variables36_166"
" instantiate-phase-callback9_167"
" language-info12_168"
" language-info29_169"
" max-phase-level8_170"
" max-phase-level25_171"
" min-phase-level7_172"
" min-phase-level24_173"
" no-protected?16_174"
" no-protected?33_175"
" phase-level-linklet-info-callback11_176"
" phase-level-linklet-info-callback28_177"
" predefined?14_178"
" predefined?31_179"
" prepare-instance-callback10_180"
" prepare-instance-callback27_181"
" primitive?13_182"
" primitive?30_183"
" provides6_184"
" requires5_185"
" requires22_186"
" self4_187"
" source-name3_188"
" source-name20_189"
" submodule-names17_190"
" submodule-names34_191"
" supermodule-name18_192"
" supermodule-name35_193)"
"(let-values(((source-name_194)(if source-name20_189 source-name3_188 #f)))"
"(let-values(((self_195) self4_187))"
"(let-values(((requires_196)(if requires22_186 requires5_185 null)))"
"(let-values(((provides_197) provides6_184))"
"(let-values(((min-phase-level_198)(if min-phase-level24_173 min-phase-level7_172 0)))"
"(let-values(((max-phase-level_199)(if max-phase-level25_171 max-phase-level8_170 0)))"
"(let-values(((instantiate-phase_200) instantiate-phase-callback9_167))"
"(let-values(((prepare-instance_201)"
"(if prepare-instance-callback27_181 prepare-instance-callback10_180 void)))"
"(let-values(((phase-level-linklet-info-callback_202)"
"(if phase-level-linklet-info-callback28_177"
" phase-level-linklet-info-callback11_176"
"(lambda(phase-level_203 ns_204) #f))))"
"(let-values(((language-info_205)(if language-info29_169 language-info12_168 #f)))"
"(let-values(((primitive?_206)(if primitive?30_183 primitive?13_182 #f)))"
"(let-values(((predefined?_207)(if predefined?31_179 predefined?14_178 #f)))"
"(let-values(((cross-phase-persistent?_208)"
"(if cross-phase-persistent?32_164"
" cross-phase-persistent?15_163"
" primitive?_206)))"
"(let-values(((no-protected?_209)(if no-protected?33_175 no-protected?16_174 #f)))"
"(let-values(((submodule-names_210)"
"(if submodule-names34_191 submodule-names17_190 null)))"
"(let-values(((supermodule-name_211)"
"(if supermodule-name35_193 supermodule-name18_192 #f)))"
"(let-values(((get-all-variables_212)"
"(if get-all-variables36_166"
" get-all-variables19_165"
"(lambda() null))))"
"(let-values()"
"(module1.1"
" source-name_194"
" self_195"
" requires_196"
" provides_197"
" #f"
" language-info_205"
" min-phase-level_198"
" max-phase-level_199"
" phase-level-linklet-info-callback_202"
" prepare-instance_201"
" instantiate-phase_200"
" primitive?_206"
" predefined?_207"
" cross-phase-persistent?_208"
" no-protected?_209"
"(current-code-inspector)"
" submodule-names_210"
" supermodule-name_211"
" get-all-variables_212)))))))))))))))))))))"
"(define-values"
"(struct:module-instance"
" module-instance40.1"
" module-instance?"
" module-instance-namespace"
" module-instance-module"
" module-instance-shifted-requires"
" module-instance-phase-level-to-state"
" module-instance-made-available?"
" module-instance-attached?"
" module-instance-data-box"
" set-module-instance-shifted-requires!"
" set-module-instance-made-available?!"
" set-module-instance-attached?!)"
"(let-values(((struct:_282 make-_283 ?_284 -ref_285 -set!_286)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-instance"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 3 6)"
" #f"
" 'module-instance)))))"
"(values"
" struct:_282"
" make-_283"
" ?_284"
"(make-struct-field-accessor -ref_285 0 'namespace)"
"(make-struct-field-accessor -ref_285 1 'module)"
"(make-struct-field-accessor -ref_285 2 'shifted-requires)"
"(make-struct-field-accessor -ref_285 3 'phase-level-to-state)"
"(make-struct-field-accessor -ref_285 4 'made-available?)"
"(make-struct-field-accessor -ref_285 5 'attached?)"
"(make-struct-field-accessor -ref_285 6 'data-box)"
"(make-struct-field-mutator -set!_286 2 'shifted-requires)"
"(make-struct-field-mutator -set!_286 4 'made-available?)"
"(make-struct-field-mutator -set!_286 5 'attached?))))"
"(define-values"
"(make-module-instance)"
"(lambda(m-ns_332 m_333)(module-instance40.1 m-ns_332 m_333 #f(make-hasheqv) #f #f(box #f))))"
"(define-values"
"(make-module-namespace48.1)"
"(lambda(for-submodule?43_338 mpi41_339 root-expand-context42_340 ns47_341)"
"(let-values(((ns_342) ns47_341))"
"(let-values(((name-mpi_343) mpi41_339))"
"(let-values(((root-expand-ctx_344) root-expand-context42_340))"
"(let-values(((for-submodule?_345) for-submodule?43_338))"
"(let-values()"
"(let-values(((phase_346) 0))"
"(let-values(((name_347)(1/module-path-index-resolve name-mpi_343)))"
"(let-values(((m-ns_348)"
"(let-values(((the-struct_350)"
"(let-values(((ns158_352) ns_342)"
"((root-expand-ctx159_353) root-expand-ctx_344)"
"((temp160_354) #f))"
"(new-namespace9.1"
" temp160_354"
" #t"
" root-expand-ctx159_353"
" #t"
" ns158_352"
" #t))))"
"(if(1/namespace? the-struct_350)"
"(let-values(((mpi150_355) name-mpi_343)"
"((source-name151_356)(resolved-module-path-root-name name_347))"
"((phase152_357) phase_346)"
"((0-phase153_358) phase_346)"
"((submodule-declarations154_359)"
"(if for-submodule?_345"
"(namespace-submodule-declarations ns_342)"
"(make-hash)))"
"((available-module-instances155_360)(make-hasheqv))"
"((module-instances156_361)(make-hasheqv))"
"((declaration-inspector157_362)(current-code-inspector)))"
"(namespace1.1"
" mpi150_355"
" source-name151_356"
"(namespace-root-expand-ctx the-struct_350)"
" phase152_357"
" 0-phase153_358"
"(namespace-phase-to-namespace the-struct_350)"
"(namespace-phase-level-to-definitions the-struct_350)"
"(1/namespace-module-registry the-struct_350)"
"(namespace-bulk-binding-registry the-struct_350)"
" submodule-declarations154_359"
"(namespace-root-namespace the-struct_350)"
" declaration-inspector157_362"
"(namespace-inspector the-struct_350)"
" available-module-instances155_360"
" module-instances156_361))"
"                                    (raise-argument-error 'struct-copy \"namespace?\" the-struct_350)))))"
"(let-values((()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_348) phase_346 m-ns_348)"
"(values))))"
"(let-values(((at-phase_349)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances m-ns_348) phase_346 at-phase_349)"
"(hash-set! at-phase_349 name_347(make-module-instance m-ns_348 #f))"
" m-ns_348)))))))))))))"
"(define-values"
"(declare-module!56.1)"
"(lambda(with-submodules?51_381 with-submodules?52_382 ns53_383 m54_384 mod-name55_385)"
"(let-values(((ns_386) ns53_383))"
"(let-values(((m_387) m54_384))"
"(let-values(((mod-name_388) mod-name55_385))"
"(let-values(((with-submodules?_389)(if with-submodules?52_382 with-submodules?51_381 #t)))"
"(let-values()"
"(let-values(((prior-m_390)"
"(if with-submodules?_389"
"(hash-ref"
"(module-registry-declarations(1/namespace-module-registry ns_386))"
" mod-name_388"
" #f)"
" #f)))"
"(let-values(((prior-mi_391)"
"(if prior-m_390"
"(if(not(eq? m_387 prior-m_390))"
"(let-values(((ns161_392) ns_386)"
"((mod-name162_393) mod-name_388)"
"((temp163_394)(namespace-phase ns_386)))"
"(namespace->module-instance68.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns161_392"
" mod-name162_393"
" temp163_394))"
" #f)"
" #f)))"
"(begin"
"(if(if prior-m_390(not(eq? m_387 prior-m_390)) #f)"
"(let-values()(check-redeclaration-ok prior-m_390 prior-mi_391 mod-name_388))"
"(void))"
"(hash-set!"
"(if with-submodules?_389"
"(module-registry-declarations(1/namespace-module-registry ns_386))"
"(namespace-submodule-declarations ns_386))"
" mod-name_388"
" m_387)"
"(if with-submodules?_389"
"(let-values()"
"(register-bulk-provide!"
"(namespace-bulk-binding-registry ns_386)"
" mod-name_388"
"(module-self m_387)"
"(module-provides m_387)))"
"(void))"
"((1/current-module-name-resolver) mod-name_388 #f)"
"(if prior-mi_391"
"(let-values()"
"(let-values(((m-ns_395)(module-instance-namespace prior-mi_391)))"
"(let-values(((states_396)(module-instance-phase-level-to-state prior-mi_391)))"
"(let-values(((phase_397)(namespace-phase ns_386)))"
"(let-values(((visit?_398)(eq? 'started(hash-ref states_396(add1 phase_397) #f))))"
"(let-values(((run?_399)(eq? 'started(hash-ref states_396 phase_397 #f))))"
"(let-values(((at-phase_400)"
"(hash-ref(namespace-module-instances ns_386) phase_397)))"
"(begin"
"(hash-set! at-phase_400 mod-name_388(make-module-instance m-ns_395 m_387))"
"(if visit?_398"
"(let-values()"
"(let-values(((ns164_401) ns_386)"
"((temp165_402)(namespace-mpi m-ns_395))"
"((phase166_403) phase_397))"
"(namespace-module-visit!102.1 #f #f ns164_401 temp165_402 phase166_403)))"
"(void))"
"(if run?_399"
"(let-values()"
"(let-values(((ns167_404) ns_386)"
"((temp168_405)(namespace-mpi m-ns_395))"
"((phase169_406) phase_397))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns167_404"
" temp168_405"
" phase169_406)))"
"(void))))))))))"
"(void))))))))))))"
"(define-values"
"(check-redeclaration-ok)"
"(lambda(prior-m_427 prior-mi_428 mod-name_429)"
"(begin"
"(if(module-cross-phase-persistent? prior-m_427)"
"(let-values()"
"          (raise-arguments-error 'module \"cannot redeclare cross-phase persistent module\" \"module name\" mod-name_429))"
"(void))"
"(if(if prior-mi_428"
"(let-values(((or-part_430)(module-instance-attached? prior-mi_428)))"
"(if or-part_430"
" or-part_430"
"(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector(module-instance-namespace prior-mi_428))))))"
" #f)"
"(let-values()"
"          (raise-arguments-error 'module \"current code inspector cannot redeclare module\" \"module name\" mod-name_429))"
"(void)))))"
"(define-values"
"(raise-unknown-module-error)"
"  (lambda (who_431 mod-name_432) (raise-arguments-error who_431 \"unknown module\" \"module name\" mod-name_432)))"
"(define-values"
"(namespace->module-linklet-info)"
"(lambda(ns_433 name_434 phase-level_435)"
"(let-values(((m_436)(namespace->module ns_433 name_434)))"
"(if m_436((module-phase-level-linklet-info-callback m_436) phase-level_435 ns_433) #f))))"
"(define-values"
"(namespace->module-instance68.1)"
"(lambda(check-available-at-phase-level60_437"
" check-available-at-phase-level63_438"
" complain-on-failure?59_439"
" complain-on-failure?62_440"
" unavailable-callback61_441"
" unavailable-callback64_442"
" ns65_443"
" name66_444"
" 0-phase67_445)"
"(let-values(((ns_446) ns65_443))"
"(let-values(((name_447) name66_444))"
"(let-values(((0-phase_448) 0-phase67_445))"
"(let-values(((complain-on-failure?_449)(if complain-on-failure?62_440 complain-on-failure?59_439 #f)))"
"(let-values(((check-available-at-phase-level_450)"
"(if check-available-at-phase-level63_438 check-available-at-phase-level60_437 #f)))"
"(let-values(((unavailable-callback_451)(if unavailable-callback64_442 unavailable-callback61_441 void)))"
"(let-values()"
"(let-values(((mi_452)"
"(let-values(((or-part_453)"
"(hash-ref"
"(hash-ref(namespace-module-instances ns_446) 0-phase_448 '#hasheq())"
" name_447"
" #f)))"
"(if or-part_453"
" or-part_453"
"(let-values(((or-part_454)"
"(let-values(((c-ns_455)"
"(let-values(((or-part_456)"
"(namespace-root-namespace ns_446)))"
"(if or-part_456 or-part_456 ns_446))))"
"(hash-ref(namespace-module-instances c-ns_455) name_447 #f))))"
"(if or-part_454"
" or-part_454"
"(if complain-on-failure?_449"
"                                          (error \"no module instance found:\" name_447 0-phase_448)"
" #f)))))))"
"(if(if mi_452 check-available-at-phase-level_450 #f)"
"(check-availablilty mi_452 check-available-at-phase-level_450 unavailable-callback_451)"
" mi_452)))))))))))"
"(define-values"
"(namespace-install-module-namespace!)"
"(lambda(ns_489 name_490 0-phase_491 m_492 existing-m-ns_493)"
"(let-values(((m-ns_494)"
"(let-values(((the-struct_496) ns_489))"
"(if(1/namespace? the-struct_496)"
"(let-values(((mpi170_497)(namespace-mpi existing-m-ns_493))"
"((source-name171_498)(namespace-source-name existing-m-ns_493))"
"((root-expand-ctx172_499)(namespace-root-expand-ctx existing-m-ns_493))"
"((phase173_500)(namespace-phase existing-m-ns_493))"
"((0-phase174_501)(namespace-0-phase existing-m-ns_493))"
"((phase-to-namespace175_502)(make-hasheqv))"
"((phase-level-to-definitions176_503)"
"(if(module-cross-phase-persistent? m_492)"
"(namespace-phase-level-to-definitions existing-m-ns_493)"
"(make-hasheqv)))"
"((declaration-inspector177_504)(module-inspector m_492))"
"((inspector178_505)(namespace-inspector existing-m-ns_493)))"
"(namespace1.1"
" mpi170_497"
" source-name171_498"
" root-expand-ctx172_499"
" phase173_500"
" 0-phase174_501"
" phase-to-namespace175_502"
" phase-level-to-definitions176_503"
"(1/namespace-module-registry the-struct_496)"
"(namespace-bulk-binding-registry the-struct_496)"
"(namespace-submodule-declarations the-struct_496)"
"(namespace-root-namespace the-struct_496)"
" declaration-inspector177_504"
" inspector178_505"
"(namespace-available-module-instances the-struct_496)"
"(namespace-module-instances the-struct_496)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_496)))))"
"(let-values(((mi_495)(make-module-instance m-ns_494 m_492)))"
"(if(module-cross-phase-persistent? m_492)"
"(let-values()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_494) 0 m-ns_494)"
"(hash-set!(namespace-phase-level-to-definitions m-ns_494) 0(namespace->definitions existing-m-ns_493 0))"
"(hash-set!(namespace-phase-to-namespace m-ns_494) 1(namespace->namespace-at-phase m-ns_494 1))"
"(hash-set!(namespace-phase-level-to-definitions m-ns_494) 1(namespace->definitions existing-m-ns_493 1))"
"(hash-set!"
"(namespace-module-instances"
"(let-values(((or-part_506)(namespace-root-namespace ns_489)))(if or-part_506 or-part_506 ns_489)))"
" name_490"
" mi_495)"
"(hash-set!(module-instance-phase-level-to-state mi_495) 0 'started)))"
"(let-values()"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_494) 0-phase_491 m-ns_494)(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
"(namespace-phase-level-to-definitions m-ns_494)"
" 0"
"(namespace->definitions existing-m-ns_493 0))"
"(values))))"
"(let-values((()(begin(hash-set!(module-instance-phase-level-to-state mi_495) 0 'started)(values))))"
"(let-values(((at-phase_507)"
"(let-values(((or-part_508)"
"(hash-ref(namespace-module-instances ns_489) 0-phase_491 #f)))"
"(if or-part_508"
" or-part_508"
"(let-values(((at-phase_509)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_489) 0-phase_491 at-phase_509)"
" at-phase_509))))))"
"(hash-set! at-phase_507 name_490 mi_495)))))))))))"
"(define-values"
"(namespace-create-module-instance!)"
"(lambda(ns_510 name_511 0-phase_512 m_513 mpi_514)"
"(let-values(((m-ns_515)"
"(let-values(((the-struct_517) ns_510))"
"(if(1/namespace? the-struct_517)"
"(let-values(((mpi179_518) mpi_514)"
"((source-name180_519)"
"(let-values(((or-part_527)(module-source-name m_513)))"
"(if or-part_527"
" or-part_527"
"(resolved-module-path-root-name(1/module-path-index-resolve mpi_514)))))"
"((root-expand-ctx181_520)(box #f))"
"((phase182_521) 0-phase_512)"
"((0-phase183_522) 0-phase_512)"
"((phase-to-namespace184_523)(make-hasheqv))"
"((phase-level-to-definitions185_524)(make-hasheqv))"
"((declaration-inspector186_525)(module-inspector m_513))"
"((inspector187_526)(make-inspector(module-inspector m_513))))"
"(namespace1.1"
" mpi179_518"
" source-name180_519"
" root-expand-ctx181_520"
" phase182_521"
" 0-phase183_522"
" phase-to-namespace184_523"
" phase-level-to-definitions185_524"
"(1/namespace-module-registry the-struct_517)"
"(namespace-bulk-binding-registry the-struct_517)"
"(namespace-submodule-declarations the-struct_517)"
"(namespace-root-namespace the-struct_517)"
" declaration-inspector186_525"
" inspector187_526"
"(namespace-available-module-instances the-struct_517)"
"(namespace-module-instances the-struct_517)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_517)))))"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_515) 0-phase_512 m-ns_515)(values))))"
"(let-values(((mi_516)(make-module-instance m-ns_515 m_513)))"
"(begin"
"(if(module-cross-phase-persistent? m_513)"
"(hash-set!(namespace-module-instances ns_510) name_511 mi_516)"
"(let-values(((at-phase_528)"
"(let-values(((or-part_529)(hash-ref(namespace-module-instances ns_510) 0-phase_512 #f)))"
"(if or-part_529"
" or-part_529"
"(let-values(((at-phase_530)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_510) 0-phase_512 at-phase_530)"
" at-phase_530))))))"
"(hash-set! at-phase_528 name_511 mi_516)))"
" mi_516))))))"
"(define-values"
"(check-availablilty)"
"(lambda(mi_531 check-available-at-phase-level_532 unavailable-callback_533)"
"(let-values(((m_534)(module-instance-module mi_531)))"
"(if(if m_534"
"(if(<="
"(module-min-phase-level m_534)"
"(add1 check-available-at-phase-level_532)"
"(module-max-phase-level m_534))"
"(not"
"(hash-ref(module-instance-phase-level-to-state mi_531)(add1 check-available-at-phase-level_532) #f))"
" #f)"
" #f)"
"(unavailable-callback_533 mi_531)"
" mi_531))))"
"(define-values"
"(namespace->module-namespace80.1)"
"(lambda(check-available-at-phase-level72_535"
" check-available-at-phase-level75_536"
" complain-on-failure?71_537"
" complain-on-failure?74_538"
" unavailable-callback73_539"
" unavailable-callback76_540"
" ns77_541"
" name78_542"
" 0-phase79_543)"
"(let-values(((ns_544) ns77_541))"
"(let-values(((name_545) name78_542))"
"(let-values(((0-phase_546) 0-phase79_543))"
"(let-values(((complain-on-failure?_547)(if complain-on-failure?74_538 complain-on-failure?71_537 #f)))"
"(let-values(((check-available-at-phase-level_548)"
"(if check-available-at-phase-level75_536 check-available-at-phase-level72_535 #f)))"
"(let-values(((unavailable-callback_549)(if unavailable-callback76_540 unavailable-callback73_539 void)))"
"(let-values()"
"(let-values(((mi_550)"
"(let-values(((ns188_552) ns_544)"
"((name189_553) name_545)"
"((0-phase190_554) 0-phase_546)"
"((complain-on-failure?191_555) complain-on-failure?_547)"
"((check-available-at-phase-level192_556)"
" check-available-at-phase-level_548)"
"((unavailable-callback193_557) unavailable-callback_549))"
"(namespace->module-instance68.1"
" check-available-at-phase-level192_556"
" #t"
" complain-on-failure?191_555"
" #t"
" unavailable-callback193_557"
" #t"
" ns188_552"
" name189_553"
" 0-phase190_554))))"
"(if mi_550(module-instance-namespace mi_550) #f)))))))))))"
"(define-values"
"(namespace-record-module-instance-attached!)"
"(lambda(ns_590 mod-name_591 phase_592)"
"(let-values(((mi_593)"
"(let-values(((ns194_594) ns_590)((mod-name195_595) mod-name_591)((phase196_596) phase_592))"
"(namespace->module-instance68.1 #f #f #f #f #f #f ns194_594 mod-name195_595 phase196_596))))"
"(set-module-instance-attached?! mi_593 #t))))"
"(define-values"
"(namespace-module-instantiate!94.1)"
"(lambda(otherwise-available?85_597"
" otherwise-available?89_598"
" run-phase83_599"
" run-phase87_600"
" seen86_601"
" seen90_602"
" skip-run?84_603"
" skip-run?88_604"
" ns91_605"
" mpi92_606"
" instance-phase93_607)"
"(let-values(((ns_608) ns91_605))"
"(let-values(((mpi_609) mpi92_606))"
"(let-values(((instance-phase_610) instance-phase93_607))"
"(let-values(((run-phase_611)(if run-phase87_600 run-phase83_599(namespace-phase ns_608))))"
"(let-values(((skip-run?_612)(if skip-run?88_604 skip-run?84_603 #f)))"
"(let-values(((otherwise-available?_613)(if otherwise-available?89_598 otherwise-available?85_597 #t)))"
"(let-values(((seen_614)(if seen90_602 seen86_601 '#hasheq())))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/module-path-index? mpi_609)"
"(void)"
"                                      (let-values () (error \"not a module path index:\" mpi_609)))"
"(values))))"
"(let-values(((name_615)(1/module-path-index-resolve mpi_609 #t)))"
"(let-values(((m_616)(namespace->module ns_608 name_615)))"
"(let-values((()"
"(begin"
"(if m_616"
"(void)"
"(let-values()(raise-unknown-module-error 'instantiate name_615)))"
"(values))))"
"(let-values(((instantiate!_617)"
"(lambda(instance-phase_618 run-phase_619 ns_620)"
"(let-values(((mi_621)"
"(let-values(((or-part_622)"
"(let-values(((ns203_623) ns_620)"
"((name204_624) name_615)"
"((instance-phase205_625)"
" instance-phase_618))"
"(namespace->module-instance68.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns203_623"
" name204_624"
" instance-phase205_625))))"
"(if or-part_622"
" or-part_622"
"(namespace-create-module-instance!"
" ns_620"
" name_615"
" instance-phase_618"
" m_616"
" mpi_609)))))"
"(let-values(((...namespace/module.rkt:356:4_626)"
" run-module-instance!125.1)"
"((mi197_627) mi_621)"
"((ns198_628) ns_620)"
"((run-phase199_629) run-phase_619)"
"((skip-run?200_630) skip-run?_612)"
"((otherwise-available?201_631) otherwise-available?_613)"
"((seen202_632) seen_614))"
"(run-module-instance!123.1"
" otherwise-available?201_631"
" run-phase199_629"
" seen202_632"
" #t"
" skip-run?200_630"
" mi197_627"
" ns198_628))))))"
"(if(module-cross-phase-persistent? m_616)"
"(let-values()"
"(instantiate!_617"
" 0"
" 0"
"(let-values(((or-part_633)(namespace-root-namespace ns_608)))"
"(if or-part_633 or-part_633 ns_608))))"
"(let-values()"
"(instantiate!_617 instance-phase_610 run-phase_611 ns_608))))))))))))))))))"
"(define-values"
"(namespace-module-visit!102.1)"
"(lambda(visit-phase97_672 visit-phase98_673 ns99_674 mpi100_675 instance-phase101_676)"
"(let-values(((ns_677) ns99_674))"
"(let-values(((mpi_678) mpi100_675))"
"(let-values(((instance-phase_679) instance-phase101_676))"
"(let-values(((visit-phase_680)(if visit-phase98_673 visit-phase97_672(namespace-phase ns_677))))"
"(let-values()"
"(let-values(((ns206_682) ns_677)"
"((mpi207_683) mpi_678)"
"((instance-phase208_684) instance-phase_679)"
"((temp209_685)(add1 visit-phase_680)))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" temp209_685"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns206_682"
" mpi207_683"
" instance-phase208_684)))))))))"
"(define-values"
"(namespace-module-make-available!110.1)"
"(lambda(visit-phase105_706 visit-phase106_707 ns107_708 mpi108_709 instance-phase109_710)"
"(let-values(((ns_711) ns107_708))"
"(let-values(((mpi_712) mpi108_709))"
"(let-values(((instance-phase_713) instance-phase109_710))"
"(let-values(((visit-phase_714)(if visit-phase106_707 visit-phase105_706(namespace-phase ns_711))))"
"(let-values()"
"(let-values(((ns210_716) ns_711)"
"((mpi211_717) mpi_712)"
"((instance-phase212_718) instance-phase_713)"
"((temp213_719)(add1 visit-phase_714))"
"((temp214_720) #t))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" temp213_719"
" #t"
" #f"
" #f"
" temp214_720"
" #t"
" ns210_716"
" mpi211_717"
" instance-phase212_718)))))))))"
"(define-values"
"(lifted/11.1$5 lifted/12.1$5 lifted/13.1$5 lifted/14.1$5 lifted/15.1$5)"
"(make-struct-type"
" 'run-module-instance!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'run-module-instance!"
"(case-lambda((self_741 mi_742 ns_743)(apply missing-kw self_741 mi_742 ns_743 null))))))"
"(current-inspector)"
"(case-lambda((self_744 mi_745 ns_746)(apply missing-kw self_744 mi_745 ns_746 null)))))"
"(define-values"
"(run-module-instance!123.1)"
"(lambda(otherwise-available?115_747 run-phase113_748 seen116_749 seen120_750 skip-run?114_751 mi121_752 ns122_753)"
"(let-values(((mi_754) mi121_752))"
"(let-values(((ns_755) ns122_753))"
"(let-values(((run-phase_756) run-phase113_748))"
"(let-values(((skip-run?_757) skip-run?114_751))"
"(let-values(((otherwise-available?_758) otherwise-available?115_747))"
"(let-values(((seen_759)(if seen120_750 seen116_749 '#hasheq())))"
"(let-values()"
"(let-values()"
"(let-values(((m-ns_760)(module-instance-namespace mi_754)))"
"(let-values(((instance-phase_761)(namespace-0-phase m-ns_760)))"
"(let-values(((run-phase-level_762)(phase- run-phase_756 instance-phase_761)))"
"(if(if(let-values(((or-part_763) skip-run?_757))"
"(if or-part_763"
" or-part_763"
"(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state mi_754)"
" run-phase-level_762"
" #f))))"
"(let-values(((or-part_764)(not otherwise-available?_758)))"
"(if or-part_764 or-part_764(module-instance-made-available? mi_754)))"
" #f)"
"(void)"
"(let-values()"
"(let-values(((m_765)(module-instance-module mi_754)))"
"(let-values(((mpi_766)(namespace-mpi m-ns_760)))"
"(let-values(((phase-shift_767) instance-phase_761))"
"(let-values(((bulk-binding-registry_768)"
"(namespace-bulk-binding-registry m-ns_760)))"
"(begin"
"(if(hash-ref seen_759 mi_754 #f)"
"(let-values()"
"                                            (error 'require \"import cycle detected during module instantiation\"))"
"(void))"
"(if(module-instance-shifted-requires mi_754)"
"(void)"
"(let-values()"
"(set-module-instance-shifted-requires!"
" mi_754"
"(alt-reverse"
"(let-values(((lst_769)(module-requires m_765)))"
"(begin"
"(if(list? lst_769)(void)(let-values()(in-list lst_769)))"
"((letrec-values(((for-loop_770)"
"(lambda(fold-var_771 lst_772)"
"(if(pair? lst_772)"
"(let-values(((phase+mpis_773)"
"(unsafe-car lst_772)))"
"(let-values(((fold-var_774)"
"(let-values(((fold-var_775)"
" fold-var_771))"
"(let-values(((fold-var_776)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car"
" phase+mpis_773)"
"(alt-reverse"
"(let-values(((lst_777)"
"(cdr"
" phase+mpis_773)))"
"(begin"
"(if(list?"
" lst_777)"
"(void)"
"(let-values()"
"(in-list"
" lst_777)))"
"((letrec-values(((for-loop_778)"
"(lambda(fold-var_779"
" lst_780)"
"(if(pair?"
" lst_780)"
"(let-values(((req-mpi_781)"
"(unsafe-car"
" lst_780)))"
"(let-values(((fold-var_782)"
"(let-values(((fold-var_783)"
" fold-var_779))"
"(let-values(((fold-var_784)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-unresolve"
"(module-path-index-shift"
" req-mpi_781"
"(module-self"
" m_765)"
" mpi_766)))"
" fold-var_783))))"
"(values"
" fold-var_784)))))"
"(for-loop_778"
" fold-var_782"
"(unsafe-cdr"
" lst_780))))"
" fold-var_779))))"
" for-loop_778)"
" null"
" lst_777))))))"
" fold-var_775))))"
"(values fold-var_776)))))"
"(for-loop_770"
" fold-var_774"
"(unsafe-cdr lst_772))))"
" fold-var_771))))"
" for-loop_770)"
" null"
" lst_769)))))))"
"(let-values(((lst_785)(module-instance-shifted-requires mi_754)))"
"(begin"
"(if(list? lst_785)(void)(let-values()(in-list lst_785)))"
"((letrec-values(((for-loop_786)"
"(lambda(fold-var_787 lst_788)"
"(if(pair? lst_788)"
"(let-values(((phase+mpis_789)(unsafe-car lst_788)))"
"(let-values(((fold-var_790)"
"(let-values()"
"(let-values(((fold-var_792)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((req-phase_793)"
"(car"
" phase+mpis_789)))"
"(let-values(((lst_794)"
"(cdr"
" phase+mpis_789)))"
"(begin"
"(if(list?"
" lst_794)"
"(void)"
"(let-values()"
"(in-list"
" lst_794)))"
"((letrec-values(((for-loop_795)"
"(lambda(fold-var_796"
" lst_797)"
"(if(pair?"
" lst_797)"
"(let-values(((req-mpi_798)"
"(unsafe-car"
" lst_797)))"
"(let-values(((fold-var_799)"
"(let-values()"
"(let-values(((fold-var_801)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ns215_803)"
" ns_755)"
"((req-mpi216_804)"
" req-mpi_798)"
"((temp217_805)"
"(phase+"
" instance-phase_761"
" req-phase_793))"
"((run-phase218_806)"
" run-phase_756)"
"((skip-run?219_807)"
" skip-run?_757)"
"((otherwise-available?220_808)"
" otherwise-available?_758)"
"((temp221_809)"
"(hash-set"
" seen_759"
" mi_754"
" #t)))"
"(namespace-module-instantiate!94.1"
" otherwise-available?220_808"
" #t"
" run-phase218_806"
" #t"
" temp221_809"
" #t"
" skip-run?219_807"
" #t"
" ns215_803"
" req-mpi216_804"
" temp217_805)))"
"(void)))))"
"(values"
" fold-var_801)))))"
"(for-loop_795"
" fold-var_799"
"(unsafe-cdr"
" lst_797))))"
" fold-var_796))))"
" for-loop_795)"
"(void)"
" lst_794)))))"
"(void)))))"
"(values fold-var_792)))))"
"(for-loop_786 fold-var_790(unsafe-cdr lst_788))))"
" fold-var_787))))"
" for-loop_786)"
"(void)"
" lst_785)))"
"(if(label-phase? instance-phase_761)"
"(void)"
"(let-values()"
"(let-values(((start_810)(module-max-phase-level m_765))"
"((end_811)(sub1(module-min-phase-level m_765)))"
"((inc_812) -1))"
"(begin"
"(if(if(real? start_810)(if(real? end_811)(real? inc_812) #f) #f)"
"(void)"
"(let-values()(in-range start_810 end_811 inc_812)))"
"((letrec-values(((for-loop_813)"
"(lambda(fold-var_814 pos_815)"
"(if(> pos_815 end_811)"
"(let-values(((phase-level_816) pos_815))"
"(let-values(((fold-var_817)"
"(let-values()"
"(let-values(((fold-var_819)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_820)"
"(phase+"
" phase-level_816"
" phase-shift_767)))"
"(if(if(not"
" skip-run?_757)"
"(eqv?"
" phase_820"
" run-phase_756)"
" #f)"
"(let-values()"
"(if(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_754)"
" phase-level_816"
" #f))"
"(void)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_754)"
" phase-level_816"
" 'started)"
"(values))))"
"(let-values((()"
"(begin"
"(void"
"(namespace->definitions"
" m-ns_760"
" phase-level_816))"
"(values))))"
"(let-values(((p-ns_821)"
"(namespace->namespace-at-phase"
" m-ns_760"
" phase_820)))"
"(let-values(((insp_822)"
"(module-inspector"
" m_765)))"
"(let-values(((data-box_823)"
"(module-instance-data-box"
" mi_754)))"
"(let-values(((prep_824)"
"(module-prepare-instance"
" m_765)))"
"(let-values(((go_825)"
"(module-instantiate-phase"
" m_765)))"
"(begin"
"(prep_824"
" data-box_823"
" p-ns_821"
" phase-shift_767"
" mpi_766"
" bulk-binding-registry_768"
" insp_822)"
"(go_825"
" data-box_823"
" p-ns_821"
" phase-shift_767"
" phase-level_816"
" mpi_766"
" bulk-binding-registry_768"
" insp_822))))))))))))"
"(if(if otherwise-available?_758"
"(if(not"
"(negative?"
" run-phase_756))"
"(not"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_754)"
" phase-level_816"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(namespace-available-module-instances"
" ns_755)"
" phase_820"
"(lambda(l_826)"
"(cons"
" mi_754"
" l_826))"
" null)"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_754)"
" phase-level_816"
" 'available)))"
"(void)))))"
"(void)))))"
"(values fold-var_819)))))"
"(for-loop_813"
" fold-var_817"
"(+ pos_815 inc_812))))"
" fold-var_814))))"
" for-loop_813)"
"(void)"
" start_810)))))"
"(if otherwise-available?_758"
"(let-values()(set-module-instance-made-available?! mi_754 #t))"
"(void))"
"(if skip-run?_757"
"(void)"
"(let-values()"
"(hash-set!"
"(module-instance-phase-level-to-state mi_754)"
" run-phase-level_762"
" 'started)))))))))))))))))))))))"
"(define-values"
"(unpack124.1)"
"(lambda(given-kws_827 given-args_828 mi121_829 ns122_830)"
"(let-values(((otherwise-available?115_831)(car given-args_828))"
"((given-kws_832)(cdr given-kws_827))"
"((given-args_833)(cdr given-args_828)))"
"(let-values(((run-phase113_834)(car given-args_833))"
"((given-kws_835)(cdr given-kws_832))"
"((given-args_836)(cdr given-args_833)))"
"(let-values(((seen120_837)(if(pair? given-kws_835)(eq? '#:seen(car given-kws_835)) #f)))"
"(let-values(((seen116_838)(if seen120_837(car given-args_836)(void)))"
"((given-kws_839)(if seen120_837(cdr given-kws_835) given-kws_835))"
"((given-args_840)(if seen120_837(cdr given-args_836) given-args_836)))"
"(let-values(((skip-run?114_841)(car given-args_840)))"
"(run-module-instance!123.1"
" otherwise-available?115_831"
" run-phase113_834"
" seen116_838"
" seen120_837"
" skip-run?114_841"
" mi121_829"
" ns122_830))))))))"
"(define-values"
"(run-module-instance!125.1)"
"(lifted/12.1$5"
"(lambda(given-kws_842 given-argc_843)"
"(if(= given-argc_843 4)"
"(subsets?"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" given-kws_842"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?))"
" #f))"
"(case-lambda((given-kws_844 given-args_845 mi_846 ns_847)(unpack124.1 given-kws_844 given-args_845 mi_846 ns_847)))"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)))"
"(define-values"
"(namespace-visit-available-modules!)"
"(let-values(((namespace-visit-available-modules!129_848)"
"(lambda(ns128_849 run-phase126_850 run-phase127_851)"
"(let-values(((ns_852) ns128_849))"
"(let-values(((run-phase_853)(if run-phase127_851 run-phase126_850(namespace-phase ns_852))))"
"(let-values()(namespace-run-available-modules! ns_852(add1 run-phase_853))))))))"
"(case-lambda"
"((ns_854)(namespace-visit-available-modules!129_848 ns_854 #f #f))"
"((ns_855 run-phase126_856)(namespace-visit-available-modules!129_848 ns_855 run-phase126_856 #t)))))"
"(define-values"
"(namespace-run-available-modules!)"
"(let-values(((namespace-run-available-modules!134_857)"
"(lambda(ns133_858 run-phase131_859 run-phase132_860)"
"(let-values(((ns_861) ns133_858))"
"(let-values(((run-phase_862)(if run-phase132_860 run-phase131_859(namespace-phase ns_861))))"
"(let-values()"
"(if(null?(hash-ref(namespace-available-module-instances ns_861) run-phase_862 null))"
"(void)"
"(let-values()"
"(registry-call-with-lock"
"(1/namespace-module-registry ns_861)"
"(lambda()"
"((letrec-values(((loop_863)"
"(lambda()"
"(let-values(((mis_864)"
"(hash-ref"
"(namespace-available-module-instances ns_861)"
" run-phase_862"
" null)))"
"(if(null? mis_864)"
"(void)"
"(let-values()"
"(begin"
"(hash-set!"
"(namespace-available-module-instances ns_861)"
" run-phase_862"
" null)"
"(let-values(((lst_865)(alt-reverse mis_864)))"
"(begin"
"(if(list? lst_865)"
"(void)"
"(let-values()(in-list lst_865)))"
"((letrec-values(((for-loop_866)"
"(lambda(fold-var_867 lst_868)"
"(if(pair? lst_868)"
"(let-values(((mi_869)"
"(unsafe-car"
" lst_868)))"
"(let-values(((fold-var_870)"
"(let-values()"
"(let-values(((fold-var_872)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mi222_874)"
" mi_869)"
"((ns223_875)"
" ns_861)"
"((run-phase224_876)"
" run-phase_862)"
"((temp225_877)"
" #f)"
"((temp226_878)"
" #f))"
"(run-module-instance!123.1"
" temp226_878"
" run-phase224_876"
" #f"
" #f"
" temp225_877"
" mi222_874"
" ns223_875)))"
"(void)))))"
"(values"
" fold-var_872)))))"
"(for-loop_866"
" fold-var_870"
"(unsafe-cdr lst_868))))"
" fold-var_867))))"
" for-loop_866)"
"(void)"
" lst_865)))"
"(loop_863))))))))"
" loop_863))))))))))))"
"(case-lambda"
"((ns_879)(namespace-run-available-modules!134_857 ns_879 #f #f))"
"((ns_880 run-phase131_881)(namespace-run-available-modules!134_857 ns_880 run-phase131_881 #t)))))"
"(define-values"
"(namespace-primitive-module-visit!)"
"(lambda(ns_882 name_883)"
"(let-values(((mi_884)(hash-ref(namespace-module-instances ns_882)(1/make-resolved-module-path name_883))))"
"(let-values(((mi227_886) mi_884)((ns228_887) ns_882)((temp229_888) 1)((temp230_889) #f)((temp231_890) #t))"
"(run-module-instance!123.1 temp231_890 temp229_888 #f #f temp230_889 mi227_886 ns228_887)))))"
"(define-values"
"(namespace-module-use->module+linklet-instances144.1)"
"(lambda(phase-shift138_897 shift-from136_898 shift-from139_899 shift-to137_900 shift-to140_901 ns142_902 mu143_903)"
"(let-values(((ns_904) ns142_902))"
"(let-values(((mu_905) mu143_903))"
"(let-values(((shift-from_906)(if shift-from139_899 shift-from136_898 #f)))"
"(let-values(((shift-to_907)(if shift-to140_901 shift-to137_900 #f)))"
"(let-values(((phase-shift_908) phase-shift138_897))"
"(let-values()"
"(let-values(((mod_909)(module-use-module mu_905)))"
"(let-values(((mi_910)"
"(let-values(((ns232_914) ns_904)"
"((temp233_915)"
"(1/module-path-index-resolve"
"(if shift-from_906"
"(module-path-index-shift mod_909 shift-from_906 shift-to_907)"
" mod_909)))"
"((phase-shift234_916) phase-shift_908)"
"((temp235_917) #t))"
"(namespace->module-instance68.1"
" #f"
" #f"
" temp235_917"
" #t"
" #f"
" #f"
" ns232_914"
" temp233_915"
" phase-shift234_916))))"
"(let-values(((m-ns_911)(module-instance-namespace mi_910)))"
"(let-values(((d_912)"
"(hash-ref"
"(namespace-phase-level-to-definitions m-ns_911)"
"(module-use-phase mu_905)"
" #f)))"
"(if d_912"
"(values mi_910(definitions-variables d_912))"
"                          (error \"namespace mismatch: phase level not found\" mu_905))))))))))))))"
"(define-values"
"(module-compute-access!)"
"(lambda(m_937)"
"(let-values(((access_938)"
"(let-values(((ht_939)(module-provides m_937)))"
"(begin"
"(if((lambda(ht_940)(hash? ht_940)) ht_939)(void)(let-values()(default-in-hash ht_939)))"
"((letrec-values(((for-loop_941)"
"(lambda(table_942 i_943)"
"(if i_943"
"(let-values(((phase_944 at-phase_945)"
"(hash-iterate-key+value ht_939 i_943)))"
"(let-values(((table_946)"
"(let-values(((table_947) table_942))"
"(let-values(((table_948)"
"(let-values()"
"(let-values(((key_949 val_950)"
"(let-values()"
"(values"
" phase_944"
"(let-values(((ht_951)"
" at-phase_945))"
"(begin"
"(if((lambda(ht_952)"
"(hash?"
" ht_952))"
" ht_951)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_951)))"
"((letrec-values(((for-loop_953)"
"(lambda(table_954"
" i_955)"
"(if i_955"
"(let-values(((sym_956"
" binding/p_957)"
"(hash-iterate-key+value"
" ht_951"
" i_955)))"
"(let-values(((table_958)"
"(let-values(((table_959)"
" table_954))"
"(let-values(((table_960)"
"(let-values()"
"(let-values(((key_961"
" val_962)"
"(let-values()"
"(values"
"(module-binding-sym"
"(provided-as-binding"
" binding/p_957))"
"(if(provided-as-protected?"
" binding/p_957)"
" 'protected"
" 'provided)))))"
"(hash-set"
" table_959"
" key_961"
" val_962)))))"
"(values"
" table_960)))))"
"(for-loop_953"
" table_958"
"(hash-iterate-next"
" ht_951"
" i_955))))"
" table_954))))"
" for-loop_953)"
" '#hash()"
"(hash-iterate-first"
" ht_951))))))))"
"(hash-set table_947 key_949 val_950)))))"
"(values table_948)))))"
"(for-loop_941 table_946(hash-iterate-next ht_939 i_943))))"
" table_942))))"
" for-loop_941)"
" '#hasheqv()"
"(hash-iterate-first ht_939))))))"
"(begin(set-module-access! m_937 access_938) access_938))))"
"(void)"
"(void)"
"(define-values"
"(binding->module-instance)"
"(lambda(b_1 ns_2 phase_3 id_4)"
"(let-values(((at-phase_5)(phase- phase_3(module-binding-phase b_1))))"
"(let-values(((mi_6)"
"(let-values(((ns1_8) ns_2)"
"((temp2_9)(1/module-path-index-resolve(module-binding-module b_1)))"
"((at-phase3_10) at-phase_5)"
"((temp4_11)(module-binding-phase b_1))"
"((temp5_12)(lambda(mi_13) 'unavailable)))"
"(namespace->module-instance68.1 temp4_11 #t #f #f temp5_12 #t ns1_8 temp2_9 at-phase3_10))))"
"(begin"
"(if(eq? mi_6 'unavailable)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(format"
"(string-append"
"                 \"module mismatch;\\n\""
"                 \" attempted to use a module that is not available\\n\""
"                 \"  possible cause:\\n\""
"                 \"   using (dynamic-require .... #f)\\n\""
"                 \"   but need (dynamic-require .... 0)\\n\""
"                 \"  module: ~s\\n\""
"                 \"  phase: ~s\")"
"(module-binding-module b_1)"
"(phase+ at-phase_5(module-binding-phase b_1)))"
" id_4))"
"(void))"
"(if mi_6"
"(void)"
"(let-values()"
"(error"
" 'expand"
"(string-append"
"                \"namespace mismatch; cannot locate module instance\\n\""
"                \"  module: ~s\\n\""
"                \"  use phase: ~a\\n\""
"                \"  definition phase: ~a\\n\""
"                \"  for identifier: ~s\")"
"(module-binding-module b_1)"
" phase_3"
"(module-binding-phase b_1)"
" id_4)))"
" mi_6)))))"
"(void)"
"(void)"
"(define-values"
"(check-access)"
"(lambda(b_1 mi_2 id_3 in-s_4 what_5)"
"(let-values(((m_6)(module-instance-module mi_2)))"
"(if(if m_6(not(module-no-protected? m_6)) #f)"
"(let-values()"
"(let-values(((access_7)"
"(let-values(((or-part_9)(module-access m_6)))"
"(if or-part_9 or-part_9(module-compute-access! m_6)))))"
"(let-values(((a_8)"
"(hash-ref"
"(hash-ref access_7(module-binding-phase b_1) '#hasheq())"
"(module-binding-sym b_1)"
" 'unexported)))"
"(if(let-values(((or-part_10)(eq? a_8 'unexported)))(if or-part_10 or-part_10(eq? a_8 'protected)))"
"(let-values()"
"(if(let-values(((or-part_11)"
"(inspector-superior?"
"(let-values(((or-part_12)(syntax-inspector id_3)))"
"(if or-part_12 or-part_12(current-code-inspector)))"
"(namespace-inspector(module-instance-namespace mi_2)))))"
"(if or-part_11"
" or-part_11"
"(if(module-binding-extra-inspector b_1)"
"(inspector-superior?"
"(module-binding-extra-inspector b_1)"
"(namespace-inspector(module-instance-namespace mi_2)))"
" #f)))"
"(void)"
"(let-values()"
"(let-values(((complain-id_13)"
"(let-values(((c-id_14)"
"(let-values(((or-part_15) in-s_4))"
"(if or-part_15 or-part_15(module-binding-sym b_1)))))"
"(if(not"
"(eq?"
"(if(syntax?$1 c-id_14)(syntax-content c-id_14) c-id_14)"
"(syntax-content id_3)))"
" c-id_14"
" #f))))"
"(raise-syntax-error$1"
" #f"
"(format"
"                          \"access disallowed by code inspector to ~a ~a\\n  from module: ~a\""
" a_8"
" what_5"
"(1/module-path-index-resolve(namespace-mpi(module-instance-namespace mi_2))))"
" complain-id_13"
" id_3"
" null)))))"
"(void)))))"
"(void)))))"
"(define-values"
"(resolve+shift/extra-inspector)"
"(lambda(id_16 phase_17 ns_18)"
"((letrec-values(((loop_19)"
"(lambda(id_20 in-s_21)"
"(let-values(((b_22)"
"(let-values(((id1_24) id_20)((phase2_25) phase_17)((temp3_26) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f temp3_26 #t #f #f id1_24 phase2_25))))"
"(let-values(((c1_27)(binding-free=id b_22)))"
"(if c1_27"
"((lambda(next-id_28)"
"(let-values((()"
"(begin"
"(if(if(module-binding? b_22)"
"(not(top-level-module-path-index?(module-binding-module b_22)))"
" #f)"
"(let-values()"
"(let-values(((mi_30)"
"(binding->module-instance"
" b_22"
" ns_18"
" phase_17"
" id_20)))"
"                                                       (check-access b_22 mi_30 id_20 in-s_21 \"provided binding\")))"
"(void))"
"(values))))"
"(let-values(((next-b_29)"
"(loop_19"
" next-id_28"
"(let-values(((or-part_31) in-s_21))"
"(if or-part_31 or-part_31 id_20)))))"
"(if(if(module-binding? next-b_29)"
"(if(not(module-binding-extra-inspector next-b_29))"
"(syntax-inspector id_20)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((next-b4_33) next-b_29)((temp5_34)(syntax-inspector id_20)))"
"(module-binding-update46.1"
" temp5_34"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" next-b4_33)))"
"(let-values() next-b_29)))))"
" c1_27)"
"(let-values() b_22)))))))"
" loop_19)"
" id_16"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:set!-transformer 1/set!-transformer? set!-transformer-value)"
"(make-struct-type-property"
" 'set!-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)"
"(if(procedure? v_1)"
"(let-values(((or-part_5)(procedure-arity-includes? v_1 1)))"
"(if or-part_5 or-part_5(procedure-arity-includes? v_1 2)))"
" #f)))"
"(if or-part_4 or-part_4(exact-nonnegative-integer? v_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:set!-transformer"
"(string-append"
"                           \"(or/c (procedure-arity-includes? proc 1)\\n\""
"                           \"      (procedure-arity-includes? proc 2)\\n\""
"                           \"      exact-nonnegative-integer?)\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_6)"
"(let-values(((p_7)(ref_3 t_6 v_1)))"
"(if(if(procedure? p_7)(procedure-arity-includes? p_7 1) #f)"
" p_7"
"                     (lambda (s_8) (error \"bad syntax:\" s_8))))))"
"(let-values()(lambda(t_9) v_1)))))))))"
"(define-values"
"(1/make-set!-transformer)"
"(let-values()"
"(let-values(((struct:set!-transformer_10 set!-transformer1_11 set!-transformer?_12 set!-transformer-proc_13)"
"(let-values(((struct:_15 make-_16 ?_17 -ref_18 -set!_19)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'set!-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:set!-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'set!-transformer)))))"
"(values struct:_15 make-_16 ?_17(make-struct-field-accessor -ref_18 0 'proc)))))"
"(lambda(proc_35)"
"(begin"
"(if(if(procedure? proc_35)(procedure-arity-includes? proc_35 1) #f)"
"(void)"
"            (let-values () (raise-argument-error 'make-set!-transformer \"(procedure-arity-includes/c 1)\" proc_35)))"
"(set!-transformer1_11 proc_35))))))"
"(define-values"
"(1/set!-transformer-procedure)"
"(lambda(t_36)"
"(let-values(((v_37)((set!-transformer-value t_36) t_36)))"
"(if(procedure-arity-includes? v_37 1) v_37(lambda(s_38)(v_37 t_36 s_38))))))"
"(void)"
"(void)"
"(define-values(empty-env) '#hasheq())"
"(define-values(env-extend)(lambda(env_6 key_7 val_8)(hash-set env_6 key_7 val_8)))"
"(define-values(variable)(gensym 'variable))"
"(define-values"
"(variable?)"
"(lambda(t_9)(let-values(((or-part_10)(eq? t_9 variable)))(if or-part_10 or-part_10(local-variable? t_9)))))"
"(define-values"
"(struct:local-variable local-variable1.1 local-variable? local-variable-id)"
"(let-values(((struct:_11 make-_12 ?_13 -ref_14 -set!_15)"
"(let-values()"
"(let-values()"
"(make-struct-type 'local-variable #f 1 0 #f null(current-inspector) #f '(0) #f 'local-variable)))))"
"(values struct:_11 make-_12 ?_13(make-struct-field-accessor -ref_14 0 'id))))"
"(define-values"
"(substitute-variable6.1)"
"(lambda(no-stops?2_37 id4_38 t5_39)"
"(let-values(((id_40) id4_38))"
"(let-values(((t_41) t5_39))"
"(let-values(((no-stops?_42) no-stops?2_37))"
"(let-values()"
"(if(if no-stops?_42(local-variable? t_41) #f)"
"(let-values(((bind-id_43)(local-variable-id t_41)))"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 bind-id_43)(syntax-e$1 bind-id_43) id_40 id_40)"
" id_40))"
" id_40)))))))"
"(define-values(missing)(gensym 'missing))"
"(define-values"
"(transformer?)"
"(lambda(t_57)"
"(let-values(((or-part_58)(procedure? t_57)))"
"(if or-part_58"
" or-part_58"
"(let-values(((or-part_59)(1/set!-transformer? t_57)))"
"(if or-part_59 or-part_59(1/rename-transformer? t_57)))))))"
"(define-values"
"(transformer->procedure)"
"(lambda(t_60)"
"(if(1/set!-transformer? t_60)"
"(let-values()(1/set!-transformer-procedure t_60))"
"(if(1/rename-transformer? t_60)(let-values()(lambda(s_61) s_61))(let-values() t_60)))))"
"(define-values"
"(struct:core-form core-form9.1 core-form? core-form-expander core-form-name)"
"(let-values(((struct:_62 make-_63 ?_64 -ref_65 -set!_66)"
"(let-values()"
"(let-values()(make-struct-type 'core-form #f 2 0 #f null #f #f '(0 1) #f 'core-form)))))"
"(values"
" struct:_62"
" make-_63"
" ?_64"
"(make-struct-field-accessor -ref_65 0 'expander)"
"(make-struct-field-accessor -ref_65 1 'name))))"
"(define-values"
"(add-binding!17.1)"
"(lambda(in10_87 in12_88 just-for-nominal?11_89 just-for-nominal?13_90 id14_91 binding15_92 phase16_93)"
"(let-values(((id_94) id14_91))"
"(let-values(((binding_95) binding15_92))"
"(let-values(((phase_96) phase16_93))"
"(let-values(((in-s_97)(if in12_88 in10_87 #f)))"
"(let-values(((just-for-nominal?_98)(if just-for-nominal?13_90 just-for-nominal?11_89 #f)))"
"(let-values()"
"(begin"
"(check-id-taint id_94 in-s_97)"
"(let-values(((temp53_100)(syntax-scope-set id_94 phase_96))"
"((temp54_101)(syntax-e$1 id_94))"
"((binding55_102) binding_95)"
"((just-for-nominal?56_103) just-for-nominal?_98))"
"(add-binding-in-scopes!16.1"
" just-for-nominal?56_103"
" #t"
" temp53_100"
" temp54_101"
" binding55_102)))))))))))"
"(define-values"
"(add-bulk-binding!25.1)"
"(lambda(in20_130 in21_131 s22_132 binding23_133 phase24_134)"
"(let-values(((s_135) s22_132))"
"(let-values(((binding_136) binding23_133))"
"(let-values(((phase_137) phase24_134))"
"(let-values(((in-s_138)(if in21_131 in20_130 #f)))"
"(let-values()"
"(begin"
"(if(syntax-tainted?$1 s_135)"
"                  (let-values () (raise-syntax-error$1 #f \"cannot bind from tainted syntax\" in-s_138 s_135))"
"(void))"
"(add-bulk-binding-in-scopes!(syntax-scope-set s_135 phase_137) binding_136)))))))))"
"(define-values"
"(add-local-binding!35.1)"
"(lambda(frame-id28_159 frame-id30_160 in29_161 in31_162 id32_163 phase33_164 counter34_165)"
"(let-values(((id_166) id32_163))"
"(let-values(((phase_167) phase33_164))"
"(let-values(((counter_168) counter34_165))"
"(let-values(((frame-id_169)(if frame-id30_160 frame-id28_159 #f)))"
"(let-values(((in-s_170)(if in31_162 in29_161 #f)))"
"(let-values()"
"(let-values((()(begin(check-id-taint id_166 in-s_170)(values))))"
"(let-values((()(begin(set-box! counter_168(add1(unbox counter_168)))(values))))"
"(let-values(((key_171)"
"                                  (string->uninterned-symbol (format \"~a_~a\" (syntax-e$1 id_166) (unbox counter_168)))))"
"(begin"
"(let-values(((temp57_172)(syntax-scope-set id_166 phase_167))"
"((temp58_173)(syntax-e$1 id_166))"
"((temp59_174)"
"(let-values(((key60_176) key_171)((frame-id61_177) frame-id_169))"
"(make-local-binding7.1 frame-id61_177 #t #f #f key60_176))))"
"(add-binding-in-scopes!16.1 #f #f temp57_172 temp58_173 temp59_174))"
" key_171))))))))))))"
"(define-values"
"(check-id-taint)"
"(lambda(id_204 in-s_205)"
"(if(syntax-tainted?$1 id_204)"
"      (let-values () (raise-syntax-error$1 #f \"cannot bind tainted identifier\" in-s_205 id_204))"
"(void))))"
"(define-values"
"(binding-lookup48.1)"
"(lambda(in38_206"
" in40_207"
" out-of-context-as-variable?39_208"
" out-of-context-as-variable?41_209"
" b42_210"
" env43_211"
" lift-envs44_212"
" ns45_213"
" phase46_214"
" id47_215)"
"(let-values(((b_216) b42_210))"
"(let-values(((env_217) env43_211))"
"(let-values(((lift-envs_218) lift-envs44_212))"
"(let-values(((ns_219) ns45_213))"
"(let-values(((phase_220) phase46_214))"
"(let-values(((id_221) id47_215))"
"(let-values(((in-s_222)(if in40_207 in38_206 #f)))"
"(let-values(((out-of-context-as-variable?_223)"
"(if out-of-context-as-variable?41_209 out-of-context-as-variable?39_208 #f)))"
"(let-values()"
"(if(module-binding? b_216)"
"(let-values()"
"(let-values(((top-level?_224)(top-level-module-path-index?(module-binding-module b_216))))"
"(let-values(((mi_225)"
"(if(not top-level?_224)"
"(binding->module-instance b_216 ns_219 phase_220 id_221)"
" #f)))"
"(let-values(((m_226)(if mi_225(module-instance-module mi_225) #f)))"
"(let-values(((primitive?_227)(if m_226(module-primitive? m_226) #f)))"
"(let-values(((m-ns_228)"
"(if top-level?_224"
" ns_219"
"(if mi_225(module-instance-namespace mi_225) #f))))"
"(let-values((()(begin(check-taint id_221)(values))))"
"(let-values(((t_229)"
"(namespace-get-transformer"
" m-ns_228"
"(module-binding-phase b_216)"
"(module-binding-sym b_216)"
" variable)))"
"(let-values((()"
"(begin"
"(if mi_225"
"(let-values()"
"(check-access"
" b_216"
" mi_225"
" id_221"
" in-s_222"
"                                                             (if t_229 \"transformer\" \"variable\")))"
"(void))"
"(values))))"
"(let-values(((insp_230)"
"(if mi_225"
"(if(module-instance-module mi_225)"
"(module-inspector(module-instance-module mi_225))"
" #f)"
" #f)))"
"(values t_229 primitive?_227 insp_230)))))))))))"
"(if(local-binding? b_216)"
"(let-values()"
"(let-values(((t_231)(hash-ref env_217(local-binding-key b_216) missing)))"
"(if(eq? t_231 missing)"
"(let-values()"
"(values"
"(let-values(((or-part_232)"
"(let-values(((lst_233) lift-envs_218))"
"(begin"
"(if(list? lst_233)(void)(let-values()(in-list lst_233)))"
"((letrec-values(((for-loop_234)"
"(lambda(result_235 lst_236)"
"(if(pair? lst_236)"
"(let-values(((lift-env_237)"
"(unsafe-car lst_236)))"
"(let-values(((result_238)"
"(let-values()"
"(let-values(((result_240)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(unbox"
" lift-env_237)"
"(local-binding-key"
" b_216)"
" #f)))))"
"(values result_240)))))"
"(if(not"
"((lambda x_241 result_238)"
" lift-env_237))"
"(for-loop_234"
" result_238"
"(unsafe-cdr lst_236))"
" result_238)))"
" result_235))))"
" for-loop_234)"
" #f"
" lst_233)))))"
"(if or-part_232"
" or-part_232"
"(if out-of-context-as-variable?_223"
" variable"
"                                         (error \"identifier used out of context:\" id_221))))"
" #f"
" #f))"
"(let-values()(begin(check-taint id_221)(values t_231 #f #f))))))"
"                          (let-values () (error \"internal error: unknown binding for lookup:\" b_216)))))))))))))))"
"(define-values"
"(check-taint)"
"(lambda(id_277)"
"(if(syntax-tainted?$1 id_277)"
"      (let-values () (raise-syntax-error$1 #f \"cannot use identifier tainted by macro transformation\" id_277))"
"(void))))"
"(void)"
"(void)"
"(define-values"
"(free-id-set)"
"(lambda(phase_1 ids_2)"
"(let-values(((lst_3) ids_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(ht_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((id_7)(unsafe-car lst_6)))"
"(let-values(((ht_8)"
"(let-values(((ht_9) ht_5))"
"(let-values(((ht_10)"
"(let-values()"
"(hash-update"
" ht_9"
"(identifier-binding-symbol$1 id_7 phase_1)"
"(lambda(l_11)(cons id_7 l_11))"
" null))))"
"(values ht_10)))))"
"(for-loop_4 ht_8(unsafe-cdr lst_6))))"
" ht_5))))"
" for-loop_4)"
" '#hasheq()"
" lst_3)))))"
"(define-values(empty-free-id-set)(free-id-set 0 null))"
"(define-values"
"(free-id-set-member?)"
"(lambda(fs_12 phase_13 given-id_14)"
"(if(zero?(hash-count fs_12))"
" #f"
"(let-values(((lst_15)(hash-ref fs_12(identifier-binding-symbol$1 given-id_14 phase_13) null)))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(result_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((id_19)(unsafe-car lst_18)))"
"(let-values(((result_20)"
"(let-values()"
"(let-values(((result_22)"
"(let-values()"
"(let-values()"
"(free-identifier=?$1"
" id_19"
" given-id_14"
" phase_13"
" phase_13)))))"
"(values result_22)))))"
"(if(not((lambda x_23 result_20) id_19))"
"(for-loop_16 result_20(unsafe-cdr lst_18))"
" result_20)))"
" result_17))))"
" for-loop_16)"
" #f"
" lst_15))))))"
"(define-values"
"(free-id-set-empty-or-just-module*?)"
"(lambda(fs_24)(let-values(((c_25)(hash-count fs_24)))(<= c_25 1))))"
"(void)"
"(void)"
"(define-values"
"(struct:expand-context/outer"
" expand-context/outer1.1"
" expand-context/outer?"
" expand-context/outer-context"
" expand-context/outer-env"
" expand-context/outer-post-expansion-scope-action"
" expand-context/outer-scopes"
" expand-context/outer-def-ctx-scopes"
" expand-context/outer-binding-layer"
" expand-context/outer-reference-records"
" expand-context/outer-only-immediate?"
" expand-context/outer-need-eventually-defined"
" expand-context/outer-current-introduction-scopes"
" expand-context/outer-name)"
"(let-values(((struct:_6 make-_7 ?_8 -ref_9 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context/outer"
" struct:root-expand-context/outer"
" 11"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10)"
" #f"
" 'expand-context/outer)))))"
"(values"
" struct:_6"
" make-_7"
" ?_8"
"(make-struct-field-accessor -ref_9 0 'context)"
"(make-struct-field-accessor -ref_9 1 'env)"
"(make-struct-field-accessor -ref_9 2 'post-expansion-scope-action)"
"(make-struct-field-accessor -ref_9 3 'scopes)"
"(make-struct-field-accessor -ref_9 4 'def-ctx-scopes)"
"(make-struct-field-accessor -ref_9 5 'binding-layer)"
"(make-struct-field-accessor -ref_9 6 'reference-records)"
"(make-struct-field-accessor -ref_9 7 'only-immediate?)"
"(make-struct-field-accessor -ref_9 8 'need-eventually-defined)"
"(make-struct-field-accessor -ref_9 9 'current-introduction-scopes)"
"(make-struct-field-accessor -ref_9 10 'name))))"
"(define-values"
"(struct:expand-context/inner"
" expand-context/inner2.1"
" expand-context/inner?"
" expand-context/inner-to-parsed?"
" expand-context/inner-phase"
" expand-context/inner-namespace"
" expand-context/inner-user-env"
" expand-context/inner-just-once?"
" expand-context/inner-module-begin-k"
" expand-context/inner-allow-unbound?"
" expand-context/inner-in-local-expand?"
" expand-context/inner-stops"
" expand-context/inner-declared-submodule-names"
" expand-context/inner-lifts"
" expand-context/inner-lift-envs"
" expand-context/inner-module-lifts"
" expand-context/inner-require-lifts"
" expand-context/inner-to-module-lifts"
" expand-context/inner-requires+provides"
" expand-context/inner-observer"
" expand-context/inner-for-serializable?)"
"(let-values(((struct:_76 make-_77 ?_78 -ref_79 -set!_80)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context/inner"
" struct:root-expand-context/inner"
" 18"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)"
" #f"
" 'expand-context/inner)))))"
"(values"
" struct:_76"
" make-_77"
" ?_78"
"(make-struct-field-accessor -ref_79 0 'to-parsed?)"
"(make-struct-field-accessor -ref_79 1 'phase)"
"(make-struct-field-accessor -ref_79 2 'namespace)"
"(make-struct-field-accessor -ref_79 3 'user-env)"
"(make-struct-field-accessor -ref_79 4 'just-once?)"
"(make-struct-field-accessor -ref_79 5 'module-begin-k)"
"(make-struct-field-accessor -ref_79 6 'allow-unbound?)"
"(make-struct-field-accessor -ref_79 7 'in-local-expand?)"
"(make-struct-field-accessor -ref_79 8 'stops)"
"(make-struct-field-accessor -ref_79 9 'declared-submodule-names)"
"(make-struct-field-accessor -ref_79 10 'lifts)"
"(make-struct-field-accessor -ref_79 11 'lift-envs)"
"(make-struct-field-accessor -ref_79 12 'module-lifts)"
"(make-struct-field-accessor -ref_79 13 'require-lifts)"
"(make-struct-field-accessor -ref_79 14 'to-module-lifts)"
"(make-struct-field-accessor -ref_79 15 'requires+provides)"
"(make-struct-field-accessor -ref_79 16 'observer)"
"(make-struct-field-accessor -ref_79 17 'for-serializable?))))"
"(define-values"
"(expand-context/make)"
"(lambda(module-scopes_182"
" post-expansion-scope_183"
" top-level-bind-scope_184"
" all-scopes-stx_185"
" use-site-scopes_186"
" defined-syms_187"
" frame-id_188"
" counter_189"
" lift-key_190"
" to-parsed?_191"
" context_192"
" phase_193"
" namespace_194"
" env_195"
" user-env_196"
" post-expansion-scope-action_197"
" scopes_198"
" def-ctx-scopes_199"
" binding-layer_200"
" reference-records_201"
" only-immediate?_202"
" just-once?_203"
" module-begin-k_204"
" need-eventually-defined_205"
" allow-unbound?_206"
" in-local-expand?_207"
" stops_208"
" current-introduction-scopes_209"
" declared-submodule-names_210"
" lifts_211"
" lift-envs_212"
" module-lifts_213"
" require-lifts_214"
" to-module-lifts_215"
" requires+provides_216"
" name_217"
" observer_218"
" for-serializable?_219)"
"(expand-context/outer1.1"
"(expand-context/inner2.1"
" module-scopes_182"
" top-level-bind-scope_184"
" all-scopes-stx_185"
" defined-syms_187"
" counter_189"
" lift-key_190"
" to-parsed?_191"
" phase_193"
" namespace_194"
" user-env_196"
" just-once?_203"
" module-begin-k_204"
" allow-unbound?_206"
" in-local-expand?_207"
" stops_208"
" declared-submodule-names_210"
" lifts_211"
" lift-envs_212"
" module-lifts_213"
" require-lifts_214"
" to-module-lifts_215"
" requires+provides_216"
" observer_218"
" for-serializable?_219)"
" post-expansion-scope_183"
" use-site-scopes_186"
" frame-id_188"
" context_192"
" env_195"
" post-expansion-scope-action_197"
" scopes_198"
" def-ctx-scopes_199"
" binding-layer_200"
" reference-records_201"
" only-immediate?_202"
" need-eventually-defined_205"
" current-introduction-scopes_209"
" name_217)))"
"(define-values(expand-context-context)(lambda(v_220)(expand-context/outer-context v_220)))"
"(define-values(expand-context-env)(lambda(v_221)(expand-context/outer-env v_221)))"
"(define-values"
"(expand-context-post-expansion-scope-action)"
"(lambda(v_222)(expand-context/outer-post-expansion-scope-action v_222)))"
"(define-values(expand-context-scopes)(lambda(v_223)(expand-context/outer-scopes v_223)))"
"(define-values(expand-context-def-ctx-scopes)(lambda(v_224)(expand-context/outer-def-ctx-scopes v_224)))"
"(define-values(expand-context-binding-layer)(lambda(v_225)(expand-context/outer-binding-layer v_225)))"
"(define-values(expand-context-reference-records)(lambda(v_226)(expand-context/outer-reference-records v_226)))"
"(define-values(expand-context-only-immediate?)(lambda(v_227)(expand-context/outer-only-immediate? v_227)))"
"(define-values"
"(expand-context-need-eventually-defined)"
"(lambda(v_228)(expand-context/outer-need-eventually-defined v_228)))"
"(define-values"
"(expand-context-current-introduction-scopes)"
"(lambda(v_229)(expand-context/outer-current-introduction-scopes v_229)))"
"(define-values(expand-context-name)(lambda(v_230)(expand-context/outer-name v_230)))"
"(define-values"
"(expand-context-to-parsed?)"
"(lambda(v_231)(expand-context/inner-to-parsed?(root-expand-context/outer-inner v_231))))"
"(define-values"
"(expand-context-phase)"
"(lambda(v_232)(expand-context/inner-phase(root-expand-context/outer-inner v_232))))"
"(define-values"
"(expand-context-namespace)"
"(lambda(v_233)(expand-context/inner-namespace(root-expand-context/outer-inner v_233))))"
"(define-values"
"(expand-context-user-env)"
"(lambda(v_234)(expand-context/inner-user-env(root-expand-context/outer-inner v_234))))"
"(define-values"
"(expand-context-just-once?)"
"(lambda(v_235)(expand-context/inner-just-once?(root-expand-context/outer-inner v_235))))"
"(define-values"
"(expand-context-module-begin-k)"
"(lambda(v_236)(expand-context/inner-module-begin-k(root-expand-context/outer-inner v_236))))"
"(define-values"
"(expand-context-allow-unbound?)"
"(lambda(v_237)(expand-context/inner-allow-unbound?(root-expand-context/outer-inner v_237))))"
"(define-values"
"(expand-context-in-local-expand?)"
"(lambda(v_238)(expand-context/inner-in-local-expand?(root-expand-context/outer-inner v_238))))"
"(define-values"
"(expand-context-stops)"
"(lambda(v_239)(expand-context/inner-stops(root-expand-context/outer-inner v_239))))"
"(define-values"
"(expand-context-declared-submodule-names)"
"(lambda(v_240)(expand-context/inner-declared-submodule-names(root-expand-context/outer-inner v_240))))"
"(define-values"
"(expand-context-lifts)"
"(lambda(v_241)(expand-context/inner-lifts(root-expand-context/outer-inner v_241))))"
"(define-values"
"(expand-context-lift-envs)"
"(lambda(v_242)(expand-context/inner-lift-envs(root-expand-context/outer-inner v_242))))"
"(define-values"
"(expand-context-module-lifts)"
"(lambda(v_243)(expand-context/inner-module-lifts(root-expand-context/outer-inner v_243))))"
"(define-values"
"(expand-context-require-lifts)"
"(lambda(v_244)(expand-context/inner-require-lifts(root-expand-context/outer-inner v_244))))"
"(define-values"
"(expand-context-to-module-lifts)"
"(lambda(v_245)(expand-context/inner-to-module-lifts(root-expand-context/outer-inner v_245))))"
"(define-values"
"(expand-context-requires+provides)"
"(lambda(v_246)(expand-context/inner-requires+provides(root-expand-context/outer-inner v_246))))"
"(define-values"
"(expand-context-observer)"
"(lambda(v_247)(expand-context/inner-observer(root-expand-context/outer-inner v_247))))"
"(define-values"
"(expand-context-for-serializable?)"
"(lambda(v_248)(expand-context/inner-for-serializable?(root-expand-context/outer-inner v_248))))"
"(define-values"
"(make-expand-context8.1)"
"(lambda(for-serializable?4_249 for-serializable?6_250 to-parsed?3_251 to-parsed?5_252 ns7_253)"
"(let-values(((ns_254) ns7_253))"
"(let-values(((to-parsed?_255)(if to-parsed?5_252 to-parsed?3_251 #f)))"
"(let-values(((for-serializable?_256)(if for-serializable?6_250 for-serializable?4_249 #f)))"
"(let-values()"
"(let-values(((root-ctx_257)(namespace-get-root-expand-ctx ns_254)))"
"(expand-context/make"
"(root-expand-context-module-scopes root-ctx_257)"
"(root-expand-context-post-expansion-scope root-ctx_257)"
"(root-expand-context-top-level-bind-scope root-ctx_257)"
"(root-expand-context-all-scopes-stx root-ctx_257)"
"(root-expand-context-use-site-scopes root-ctx_257)"
"(root-expand-context-defined-syms root-ctx_257)"
"(root-expand-context-frame-id root-ctx_257)"
"(root-expand-context-counter root-ctx_257)"
"(root-expand-context-lift-key root-ctx_257)"
" to-parsed?_255"
" 'top-level"
"(namespace-phase ns_254)"
" ns_254"
" empty-env"
" '#hasheq()"
" push-scope"
" null"
" #f"
"(root-expand-context-frame-id root-ctx_257)"
" null"
" #f"
" #f"
" #f"
" #f"
" #t"
" #f"
" empty-free-id-set"
" null"
" '#hasheq()"
" #f"
" '()"
" #f"
" #f"
" #f"
" #f"
" #f"
"(current-expand-observe)"
" for-serializable?_256))))))))"
"(define-values"
"(copy-root-expand-context)"
"(lambda(ctx_278 root-ctx_279)"
"(let-values(((v_280) ctx_278))"
"(let-values(((the-struct_281) v_280))"
"(if(expand-context/outer? the-struct_281)"
"(let-values(((post-expansion-scope26_282)(root-expand-context-post-expansion-scope root-ctx_279))"
"((use-site-scopes27_283)(root-expand-context-use-site-scopes root-ctx_279))"
"((frame-id28_284)(root-expand-context-frame-id root-ctx_279))"
"((binding-layer29_285)(root-expand-context-frame-id root-ctx_279))"
"((inner30_286)"
"(let-values(((the-struct_287)(root-expand-context/outer-inner v_280)))"
"(if(expand-context/inner? the-struct_287)"
"(let-values(((module-scopes31_288)(root-expand-context-module-scopes root-ctx_279))"
"((top-level-bind-scope32_289)"
"(root-expand-context-top-level-bind-scope root-ctx_279))"
"((all-scopes-stx33_290)(root-expand-context-all-scopes-stx root-ctx_279))"
"((defined-syms34_291)(root-expand-context-defined-syms root-ctx_279))"
"((counter35_292)(root-expand-context-counter root-ctx_279))"
"((lift-key36_293)(root-expand-context-lift-key root-ctx_279)))"
"(expand-context/inner2.1"
" module-scopes31_288"
" top-level-bind-scope32_289"
" all-scopes-stx33_290"
" defined-syms34_291"
" counter35_292"
" lift-key36_293"
"(expand-context/inner-to-parsed? the-struct_287)"
"(expand-context/inner-phase the-struct_287)"
"(expand-context/inner-namespace the-struct_287)"
"(expand-context/inner-user-env the-struct_287)"
"(expand-context/inner-just-once? the-struct_287)"
"(expand-context/inner-module-begin-k the-struct_287)"
"(expand-context/inner-allow-unbound? the-struct_287)"
"(expand-context/inner-in-local-expand? the-struct_287)"
"(expand-context/inner-stops the-struct_287)"
"(expand-context/inner-declared-submodule-names the-struct_287)"
"(expand-context/inner-lifts the-struct_287)"
"(expand-context/inner-lift-envs the-struct_287)"
"(expand-context/inner-module-lifts the-struct_287)"
"(expand-context/inner-require-lifts the-struct_287)"
"(expand-context/inner-to-module-lifts the-struct_287)"
"(expand-context/inner-requires+provides the-struct_287)"
"(expand-context/inner-observer the-struct_287)"
"(expand-context/inner-for-serializable? the-struct_287)))"
"                            (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_287)))))"
"(expand-context/outer1.1"
" inner30_286"
" post-expansion-scope26_282"
" use-site-scopes27_283"
" frame-id28_284"
"(expand-context/outer-context the-struct_281)"
"(expand-context/outer-env the-struct_281)"
"(expand-context/outer-post-expansion-scope-action the-struct_281)"
"(expand-context/outer-scopes the-struct_281)"
"(expand-context/outer-def-ctx-scopes the-struct_281)"
" binding-layer29_285"
"(expand-context/outer-reference-records the-struct_281)"
"(expand-context/outer-only-immediate? the-struct_281)"
"(expand-context/outer-need-eventually-defined the-struct_281)"
"(expand-context/outer-current-introduction-scopes the-struct_281)"
"(expand-context/outer-name the-struct_281)))"
"          (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_281))))))"
"(define-values(current-expand-context)(make-parameter #f))"
"(define-values"
"(get-current-expand-context15.1)"
"(lambda(fail-ok?11_294 fail-ok?12_295 who13_296 who14_297)"
"(let-values(((who_298)(if who14_297 who13_296 'unexpected)))"
"(let-values(((fail-ok?_299)(if fail-ok?12_295 fail-ok?11_294 #f)))"
"(let-values()"
"(let-values(((or-part_300)(force(current-expand-context))))"
"(if or-part_300"
" or-part_300"
"              (if fail-ok?_299 #f (raise-arguments-error who_298 \"not currently expanding\")))))))))"
"(define-values"
"(current-expand-observe)"
"(make-parameter"
" #f"
"(lambda(v_318)"
"(begin"
"(if(let-values(((or-part_319)(not v_318)))"
"(if or-part_319 or-part_319(if(procedure? v_318)(procedure-arity-includes? v_318 2) #f)))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-expand-observe \"(or/c (procedure-arity-includes/c 2) #f)\" v_318)))"
" v_318))))"
"(define-values"
"(as-expression-context)"
"(lambda(ctx_320)"
"(if(if(eq? 'expression(expand-context-context ctx_320))(not(expand-context-name ctx_320)) #f)"
"(let-values() ctx_320)"
"(let-values()"
"(let-values(((v_321) ctx_320))"
"(let-values(((the-struct_322) v_321))"
"(if(expand-context/outer? the-struct_322)"
"(let-values(((context37_323) 'expression)"
"((name38_324) #f)"
"((post-expansion-scope39_325) #f)"
"((inner40_326)(root-expand-context/outer-inner v_321)))"
"(expand-context/outer1.1"
" inner40_326"
" post-expansion-scope39_325"
"(root-expand-context/outer-use-site-scopes the-struct_322)"
"(root-expand-context/outer-frame-id the-struct_322)"
" context37_323"
"(expand-context/outer-env the-struct_322)"
"(expand-context/outer-post-expansion-scope-action the-struct_322)"
"(expand-context/outer-scopes the-struct_322)"
"(expand-context/outer-def-ctx-scopes the-struct_322)"
"(expand-context/outer-binding-layer the-struct_322)"
"(expand-context/outer-reference-records the-struct_322)"
"(expand-context/outer-only-immediate? the-struct_322)"
"(expand-context/outer-need-eventually-defined the-struct_322)"
"(expand-context/outer-current-introduction-scopes the-struct_322)"
" name38_324))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_322))))))))"
"(define-values"
"(as-begin-expression-context)"
"(lambda(ctx_327)"
"(if(not(expand-context-name ctx_327))"
"(let-values() ctx_327)"
"(let-values()"
"(let-values(((v_328) ctx_327))"
"(let-values(((the-struct_329) v_328))"
"(if(expand-context/outer? the-struct_329)"
"(let-values(((name41_330) #f)((inner42_331)(root-expand-context/outer-inner v_328)))"
"(expand-context/outer1.1"
" inner42_331"
"(root-expand-context/outer-post-expansion-scope the-struct_329)"
"(root-expand-context/outer-use-site-scopes the-struct_329)"
"(root-expand-context/outer-frame-id the-struct_329)"
"(expand-context/outer-context the-struct_329)"
"(expand-context/outer-env the-struct_329)"
"(expand-context/outer-post-expansion-scope-action the-struct_329)"
"(expand-context/outer-scopes the-struct_329)"
"(expand-context/outer-def-ctx-scopes the-struct_329)"
"(expand-context/outer-binding-layer the-struct_329)"
"(expand-context/outer-reference-records the-struct_329)"
"(expand-context/outer-only-immediate? the-struct_329)"
"(expand-context/outer-need-eventually-defined the-struct_329)"
"(expand-context/outer-current-introduction-scopes the-struct_329)"
" name41_330))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_329))))))))"
"(define-values"
"(as-tail-context21.1)"
"(lambda(wrt18_336 ctx20_337)"
"(let-values(((ctx_338) ctx20_337))"
"(let-values(((wrt-ctx_339) wrt18_336))"
"(let-values()"
"(if(expand-context-name wrt-ctx_339)"
"(let-values()"
"(let-values(((v_340) ctx_338))"
"(let-values(((the-struct_341) v_340))"
"(if(expand-context/outer? the-struct_341)"
"(let-values(((name43_342)(expand-context-name wrt-ctx_339))"
"((inner44_343)(root-expand-context/outer-inner v_340)))"
"(expand-context/outer1.1"
" inner44_343"
"(root-expand-context/outer-post-expansion-scope the-struct_341)"
"(root-expand-context/outer-use-site-scopes the-struct_341)"
"(root-expand-context/outer-frame-id the-struct_341)"
"(expand-context/outer-context the-struct_341)"
"(expand-context/outer-env the-struct_341)"
"(expand-context/outer-post-expansion-scope-action the-struct_341)"
"(expand-context/outer-scopes the-struct_341)"
"(expand-context/outer-def-ctx-scopes the-struct_341)"
"(expand-context/outer-binding-layer the-struct_341)"
"(expand-context/outer-reference-records the-struct_341)"
"(expand-context/outer-only-immediate? the-struct_341)"
"(expand-context/outer-need-eventually-defined the-struct_341)"
"(expand-context/outer-current-introduction-scopes the-struct_341)"
" name43_342))"
"                    (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_341)))))"
"(let-values() ctx_338)))))))"
"(define-values"
"(as-named-context)"
"(lambda(ctx_354 ids_355)"
"(if(if(pair? ids_355)(null?(cdr ids_355)) #f)"
"(let-values()"
"(let-values(((v_356) ctx_354))"
"(let-values(((the-struct_357) v_356))"
"(if(expand-context/outer? the-struct_357)"
"(let-values(((name45_358)(car ids_355))((inner46_359)(root-expand-context/outer-inner v_356)))"
"(expand-context/outer1.1"
" inner46_359"
"(root-expand-context/outer-post-expansion-scope the-struct_357)"
"(root-expand-context/outer-use-site-scopes the-struct_357)"
"(root-expand-context/outer-frame-id the-struct_357)"
"(expand-context/outer-context the-struct_357)"
"(expand-context/outer-env the-struct_357)"
"(expand-context/outer-post-expansion-scope-action the-struct_357)"
"(expand-context/outer-scopes the-struct_357)"
"(expand-context/outer-def-ctx-scopes the-struct_357)"
"(expand-context/outer-binding-layer the-struct_357)"
"(expand-context/outer-reference-records the-struct_357)"
"(expand-context/outer-only-immediate? the-struct_357)"
"(expand-context/outer-need-eventually-defined the-struct_357)"
"(expand-context/outer-current-introduction-scopes the-struct_357)"
" name45_358))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_357)))))"
"(let-values() ctx_354))))"
"(define-values"
"(as-to-parsed-context)"
"(lambda(ctx_360)"
"(let-values(((v_361) ctx_360))"
"(let-values(((the-struct_362) v_361))"
"(if(expand-context/outer? the-struct_362)"
"(let-values(((inner47_363)"
"(let-values(((the-struct_364)(root-expand-context/outer-inner v_361)))"
"(if(expand-context/inner? the-struct_364)"
"(let-values(((to-parsed?48_365) #t))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_364)"
"(root-expand-context/inner-top-level-bind-scope the-struct_364)"
"(root-expand-context/inner-all-scopes-stx the-struct_364)"
"(root-expand-context/inner-defined-syms the-struct_364)"
"(root-expand-context/inner-counter the-struct_364)"
"(root-expand-context/inner-lift-key the-struct_364)"
" to-parsed?48_365"
"(expand-context/inner-phase the-struct_364)"
"(expand-context/inner-namespace the-struct_364)"
"(expand-context/inner-user-env the-struct_364)"
"(expand-context/inner-just-once? the-struct_364)"
"(expand-context/inner-module-begin-k the-struct_364)"
"(expand-context/inner-allow-unbound? the-struct_364)"
"(expand-context/inner-in-local-expand? the-struct_364)"
"(expand-context/inner-stops the-struct_364)"
"(expand-context/inner-declared-submodule-names the-struct_364)"
"(expand-context/inner-lifts the-struct_364)"
"(expand-context/inner-lift-envs the-struct_364)"
"(expand-context/inner-module-lifts the-struct_364)"
"(expand-context/inner-require-lifts the-struct_364)"
"(expand-context/inner-to-module-lifts the-struct_364)"
"(expand-context/inner-requires+provides the-struct_364)"
"(expand-context/inner-observer the-struct_364)"
"(expand-context/inner-for-serializable? the-struct_364)))"
"                            (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_364)))))"
"(expand-context/outer1.1"
" inner47_363"
"(root-expand-context/outer-post-expansion-scope the-struct_362)"
"(root-expand-context/outer-use-site-scopes the-struct_362)"
"(root-expand-context/outer-frame-id the-struct_362)"
"(expand-context/outer-context the-struct_362)"
"(expand-context/outer-env the-struct_362)"
"(expand-context/outer-post-expansion-scope-action the-struct_362)"
"(expand-context/outer-scopes the-struct_362)"
"(expand-context/outer-def-ctx-scopes the-struct_362)"
"(expand-context/outer-binding-layer the-struct_362)"
"(expand-context/outer-reference-records the-struct_362)"
"(expand-context/outer-only-immediate? the-struct_362)"
"(expand-context/outer-need-eventually-defined the-struct_362)"
"(expand-context/outer-current-introduction-scopes the-struct_362)"
"(expand-context/outer-name the-struct_362)))"
"          (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_362))))))"
"(void)"
"(void)"
"(define-values"
"(to-syntax-list.1)"
"(lambda(s_290)"
"(if(list? s_290)"
"(let-values() s_290)"
"(if(pair? s_290)"
"(let-values()(let-values(((r_291)(to-syntax-list.1(cdr s_290))))(if r_291(cons(car s_290) r_291) #f)))"
"(if(syntax?$1 s_290)(let-values()(to-syntax-list.1(syntax-e$1 s_290)))(let-values() #f))))))"
"(void)"
"(void)"
"(define-values(core-scope)(new-multi-scope))"
"(define-values(core-stx)(add-scope empty-syntax core-scope))"
"(define-values(core-module-name)(1/make-resolved-module-path '#%core))"
"(define-values(core-mpi)(1/module-path-index-join ''#%core #f))"
"(define-values(id-cache-0)(make-hasheq))"
"(define-values(id-cache-1)(make-hasheq))"
"(define-values"
"(core-id)"
"(lambda(sym_1 phase_2)"
"(if(eqv? phase_2 0)"
"(let-values()"
"(let-values(((or-part_3)(hash-ref id-cache-0 sym_1 #f)))"
"(if or-part_3"
" or-part_3"
"(let-values(((s_4)(datum->syntax$1 core-stx sym_1)))(begin(hash-set! id-cache-0 sym_1 s_4) s_4)))))"
"(if(eq? phase_2 1)"
"(let-values()"
"(let-values(((or-part_5)(hash-ref id-cache-1 sym_1 #f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((s_6)(datum->syntax$1(syntax-shift-phase-level$1 core-stx 1) sym_1)))"
"(begin(hash-set! id-cache-1 sym_1 s_6) s_6)))))"
"(let-values()(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_2) sym_1))))))"
"(define-values(core-forms) '#hasheq())"
"(define-values(core-primitives) '#hasheq())"
"(define-values"
"(add-core-form!)"
"(lambda(sym_7 proc_8)(begin(add-core-binding! sym_7)(set! core-forms(hash-set core-forms sym_7 proc_8)))))"
"(define-values"
"(add-core-primitive!)"
"(lambda(sym_9 val_10)"
"(begin(add-core-binding! sym_9)(set! core-primitives(hash-set core-primitives sym_9 val_10)))))"
"(define-values"
"(add-core-binding!)"
"(lambda(sym_11)"
"(let-values(((temp1_12)(datum->syntax$1 core-stx sym_11))"
"((temp2_13)"
"(let-values(((core-mpi4_15) core-mpi)((temp5_16) 0)((sym6_17) sym_11))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi4_15"
" temp5_16"
" sym6_17)))"
"((temp3_14) 0))"
"(add-binding!17.1 #f #f #f #f temp1_12 temp2_13 temp3_14))))"
"(define-values"
"(declare-core-module!)"
"(lambda(ns_18)"
"(let-values(((ns7_19) ns_18)"
"((temp8_20)"
"(let-values(((temp10_23) #t)"
"((temp11_24) #t)"
"((temp12_25) #t)"
"((core-mpi13_26) core-mpi)"
"((temp14_27)"
"(hasheqv"
" 0"
"(let-values(((lst_30)(list core-primitives core-forms))((lst_31) '(#f #t)))"
"(begin"
"(if(list? lst_30)(void)(let-values()(in-list lst_30)))"
"(if(list? lst_31)(void)(let-values()(in-list lst_31)))"
"((letrec-values(((for-loop_32)"
"(lambda(table_33 lst_34 lst_35)"
"(if(if(pair? lst_34)(pair? lst_35) #f)"
"(let-values(((syms_36)(unsafe-car lst_34))"
"((syntax?_37)(unsafe-car lst_35)))"
"(let-values(((table_38)"
"(let-values(((table_39) table_33))"
"(let-values(((ht_40) syms_36))"
"(begin"
"(if((lambda(ht_41)(hash? ht_41))"
" ht_40)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_40)))"
"((letrec-values(((for-loop_42)"
"(lambda(table_43"
" i_44)"
"(if i_44"
"(let-values(((sym_45)"
"(hash-iterate-key"
" ht_40"
" i_44)))"
"(let-values(((table_46)"
"(let-values(((table_47)"
" table_43))"
"(let-values(((table_48)"
"(let-values()"
"(let-values(((key_49"
" val_50)"
"(let-values()"
"(let-values(((b_51)"
"(let-values(((core-mpi17_52)"
" core-mpi)"
"((temp18_53)"
" 0)"
"((sym19_54)"
" sym_45))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi17_52"
" temp18_53"
" sym19_54))))"
"(values"
" sym_45"
"(if syntax?_37"
"(provided1.1"
" b_51"
" #f"
" #t)"
" b_51))))))"
"(hash-set"
" table_47"
" key_49"
" val_50)))))"
"(values"
" table_48)))))"
"(for-loop_42"
" table_46"
"(hash-iterate-next"
" ht_40"
" i_44))))"
" table_43))))"
" for-loop_42)"
" table_39"
"(hash-iterate-first ht_40)))))))"
"(for-loop_32"
" table_38"
"(unsafe-cdr lst_34)"
"(unsafe-cdr lst_35))))"
" table_33))))"
" for-loop_32)"
" '#hasheq()"
" lst_30"
" lst_31)))))"
"((temp15_28)"
"(lambda(phase-level_55 ns_56)"
"(if(zero? phase-level_55)"
"(let-values(((ns_57)"
"(let-values(((ns20_58) ns_56)"
"((core-module-name21_59) core-module-name)"
"((temp22_60) 0))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns20_58"
" core-module-name21_59"
" temp22_60))))"
"(if ns_57(module-linklet-info2.1(namespace->instance ns_57 0) #f core-mpi) #f))"
" #f)))"
"((temp16_29)"
"(lambda(data-box_61"
" ns_62"
" phase_63"
" phase-level_64"
" self_65"
" bulk-binding-registry_66"
" insp_67)"
"(let-values(((tmp_68) phase-level_64))"
"(if(equal? tmp_68 0)"
"(let-values()"
"(begin"
"(let-values(((ht_69) core-primitives))"
"(begin"
"(if((lambda(ht_70)(hash? ht_70)) ht_69)"
"(void)"
"(let-values()(default-in-hash ht_69)))"
"((letrec-values(((for-loop_71)"
"(lambda(fold-var_72 i_73)"
"(if i_73"
"(let-values(((sym_74 val_75)"
"(hash-iterate-key+value ht_69 i_73)))"
"(let-values(((fold-var_76)"
"(let-values()"
"(let-values(((fold-var_78)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-consistent!"
" ns_62"
" 0"
" sym_74"
" val_75))"
"(void)))))"
"(values fold-var_78)))))"
"(for-loop_71"
" fold-var_76"
"(hash-iterate-next ht_69 i_73))))"
" fold-var_72))))"
" for-loop_71)"
"(void)"
"(hash-iterate-first ht_69))))"
"(let-values(((ht_79) core-forms))"
"(begin"
"(if((lambda(ht_80)(hash? ht_80)) ht_79)"
"(void)"
"(let-values()(default-in-hash ht_79)))"
"((letrec-values(((for-loop_81)"
"(lambda(fold-var_82 i_83)"
"(if i_83"
"(let-values(((sym_84 proc_85)"
"(hash-iterate-key+value ht_79 i_83)))"
"(let-values(((fold-var_86)"
"(let-values()"
"(let-values(((fold-var_88)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-transformer!"
" ns_62"
" 0"
" sym_84"
"(core-form9.1"
" proc_85"
" sym_84)))"
"(void)))))"
"(values fold-var_88)))))"
"(for-loop_81"
" fold-var_86"
"(hash-iterate-next ht_79 i_83))))"
" fold-var_82))))"
" for-loop_81)"
"(void)"
"(hash-iterate-first ht_79))))))"
"(let-values()(void)))))))"
"(make-module37.1"
" temp10_23"
" #t"
" #f"
" #f"
" temp16_29"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp11_24"
" #t"
" temp15_28"
" #t"
" temp12_25"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp14_27"
" #f"
" #f"
" core-mpi13_26"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((core-module-name9_21) core-module-name))"
"(declare-module!56.1 #f #f ns7_19 temp8_20 core-module-name9_21))))"
"(define-values"
"(core-form-sym)"
"(lambda(s_89 phase_90)"
"(let-values(((ok?_91 id23_92 _24_93)"
"(let-values(((s_104) s_89))"
"(if(let-values(((s_105)(if(syntax?$1 s_104)(syntax-e$1 s_104) s_104)))"
"(if(pair? s_105)"
"(if(let-values(((s_106)(car s_105)))"
"(if(syntax?$1 s_106)(symbol?(syntax-e$1 s_106)) #f))"
"(let-values(((s_107)(cdr s_105))) #t)"
" #f)"
" #f))"
"(let-values()"
"(let-values(((id23_109 _24_110)"
"(let-values(((s_111)(if(syntax?$1 s_104)(syntax-e$1 s_104) s_104)))"
"(let-values(((id25_112)(let-values(((s_114)(car s_111))) s_114))"
"((_26_113)(let-values(((s_115)(cdr s_111))) s_115)))"
"(values id25_112 _26_113)))))"
"(values #t id23_109 _24_110)))"
"(values #f #f #f)))))"
"(if ok?_91"
"(let-values(((b_116)"
"(let-values(((temp27_117) id23_92)((phase28_118) phase_90))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f #f #f temp27_117 phase28_118))))"
"(if(module-binding? b_116)"
"(if(eq? core-module-name(1/module-path-index-resolve(module-binding-module b_116)))"
"(module-binding-sym b_116)"
" #f)"
" #f))"
" #f))))"
"(void)"
"(void)"
"(define-values"
"(taint-dispatch)"
"(lambda(s_1 proc_2 phase_3)"
"((letrec-values(((loop_4)"
"(lambda(s_5 mode_6)"
"(let-values(((tmp_7) mode_6))"
"(if(equal? tmp_7 'none)"
"(let-values() s_5)"
"(if(equal? tmp_7 'opaque)"
"(let-values()(proc_2 s_5))"
"(if(equal? tmp_7 'transparent)"
"(let-values()"
"(let-values(((c_8)"
"(let-values(((s_9)"
"(let-values(((or-part_13)(syntax->list$1 s_5)))"
"(if or-part_13 or-part_13(syntax-e$1 s_5))))"
"((f_10)(lambda(tail?_14 d_15) d_15))"
"((s->_11)"
"(lambda(s_16)"
"(loop_4 s_16(syntax-taint-mode-property s_16))))"
"((seen_12) #f))"
"(let-values(((s_17) s_9)"
"((f_18)"
"(lambda(tail?_20 v_21)"
"(if(syntax?$1 v_21)"
"(let-values()(s->_11 v_21))"
"(let-values()(f_10 tail?_20 v_21)))))"
"((seen_19) seen_12))"
"((letrec-values(((loop_22)"
"(lambda(tail?_23 s_24 prev-depth_25)"
"(let-values(((depth_26)(add1 prev-depth_25)))"
"(if(if seen_19(> depth_26 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_23"
" s_24"
"(lambda(tail?_27 s_28)"
"(f_18 tail?_27 s_28))"
" seen_19))"
"(if(null? s_24)"
"(let-values()(f_18 tail?_23 s_24))"
"(if(pair? s_24)"
"(let-values()"
"(f_18"
" tail?_23"
"(cons"
"(loop_22 #f(car s_24) depth_26)"
"(loop_22 #t(cdr s_24) depth_26))))"
"(if(let-values(((or-part_29)"
"(symbol? s_24)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)"
"(boolean? s_24)))"
"(if or-part_30"
" or-part_30"
"(number? s_24)))))"
"(let-values()(f_18 #f s_24))"
"(if(let-values(((or-part_31)"
"(vector? s_24)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)"
"(box? s_24)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)"
"(prefab-struct-key"
" s_24)))"
"(if or-part_33"
" or-part_33"
"(hash? s_24)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_23"
" s_24"
"(lambda(tail?_34 s_35)"
"(f_18 tail?_34 s_35))"
" seen_19))"
"(let-values()"
"(f_18 #f s_24)))))))))))"
" loop_22)"
" #f"
" s_17"
" 0)))))"
"(datum->syntax$1"
" #f"
" c_8"
" s_5"
"(if(syntax-any-macro-scopes? s_5)"
"(syntax-property-remove s_5 original-property-sym)"
" s_5))))"
"(if(equal? tmp_7 'transparent-binding)"
"(let-values()"
"(let-values(((c_36)(syntax-e$1 s_5)))"
"(if(pair? c_36)"
"(let-values()"
"(let-values(((cd_37)(cdr c_36)))"
"(if(let-values(((or-part_38)(pair? cd_37)))"
"(if or-part_38"
" or-part_38"
"(if(syntax?$1 cd_37)(pair?(syntax-e$1 cd_37)) #f)))"
"(let-values()"
"(let-values(((d_39)(if(syntax?$1 cd_37)(syntax-e$1 cd_37) cd_37)))"
"(datum->syntax$1"
" #f"
"(cons"
"(loop_4(car c_36)(syntax-taint-mode-property(car c_36)))"
"(cons"
"(loop_4(car d_39) 'transparent)"
"(let-values(((s_40)"
"(let-values(((or-part_44)"
"(syntax->list$1(cdr d_39))))"
"(if or-part_44 or-part_44(cdr d_39))))"
"((f_41)(lambda(tail?_45 d_46) d_46))"
"((s->_42)"
"(lambda(s_47)"
"(loop_4 s_47(syntax-taint-mode-property s_47))))"
"((seen_43) #f))"
"(let-values(((s_48) s_40)"
"((f_49)"
"(lambda(tail?_51 v_52)"
"(if(syntax?$1 v_52)"
"(let-values()(s->_42 v_52))"
"(let-values()(f_41 tail?_51 v_52)))))"
"((seen_50) seen_43))"
"((letrec-values(((loop_53)"
"(lambda(tail?_54 s_55 prev-depth_56)"
"(let-values(((depth_57)"
"(add1 prev-depth_56)))"
"(if(if seen_50(> depth_57 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_54"
" s_55"
"(lambda(tail?_58 s_59)"
"(f_49 tail?_58 s_59))"
" seen_50))"
"(if(null? s_55)"
"(let-values()(f_49 tail?_54 s_55))"
"(if(pair? s_55)"
"(let-values()"
"(f_49"
" tail?_54"
"(cons"
"(loop_53"
" #f"
"(car s_55)"
" depth_57)"
"(loop_53"
" #t"
"(cdr s_55)"
" depth_57))))"
"(if(let-values(((or-part_60)"
"(symbol? s_55)))"
"(if or-part_60"
" or-part_60"
"(let-values(((or-part_61)"
"(boolean?"
" s_55)))"
"(if or-part_61"
" or-part_61"
"(number? s_55)))))"
"(let-values()(f_49 #f s_55))"
"(if(let-values(((or-part_62)"
"(vector?"
" s_55)))"
"(if or-part_62"
" or-part_62"
"(let-values(((or-part_63)"
"(box?"
" s_55)))"
"(if or-part_63"
" or-part_63"
"(let-values(((or-part_64)"
"(prefab-struct-key"
" s_55)))"
"(if or-part_64"
" or-part_64"
"(hash?"
" s_55)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_54"
" s_55"
"(lambda(tail?_65 s_66)"
"(f_49 tail?_65 s_66))"
" seen_50))"
"(let-values()"
"(f_49 #f s_55)))))))))))"
" loop_53)"
" #f"
" s_48"
" 0)))))"
" s_5"
"(if(syntax-any-macro-scopes? s_5)"
"(syntax-property-remove s_5 original-property-sym)"
" s_5))))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()"
"(let-values(((c_67)(syntax-e$1 s_5)))"
"(let-values(((tmp_68)(core-form-sym c_67 phase_3)))"
"(if(if(equal? tmp_68 'begin)"
" #t"
"(if(equal? tmp_68 'begin-for-syntax) #t(equal? tmp_68 '#%module-begin)))"
"(let-values()(loop_4 s_5 'transparent))"
"(if(if(equal? tmp_68 'define-values) #t(equal? tmp_68 'define-syntaxes))"
"(let-values()(loop_4 s_5 'transparent-binding))"
"(let-values()(loop_4 s_5 'opaque)))))))))))))))"
" loop_4)"
" s_1"
"(syntax-taint-mode-property s_1))))"
"(define-values"
"(syntax-taint-mode-property)"
"(lambda(s_69)"
"(let-values(((or-part_70)(syntax-property$1 s_69 'taint-mode)))"
"(if or-part_70 or-part_70(syntax-property$1 s_69 'certify-mode)))))"
"(define-values"
"(syntax-remove-taint-dispatch-properties)"
"(lambda(s_71)(syntax-property-remove(syntax-property-remove s_71 'taint-mode) 'certify-mode)))"
"(void)"
"(void)"
"(define-values(current-module-code-inspector)(make-parameter #f))"
"(void)"
"(void)"
"(define-values"
"(syntax-debug-info$1)"
"(lambda(s_1 phase_2 all-bindings?_3)"
"(let-values(((hts_4)"
"(alt-reverse"
"(let-values(((lst_6)(fallback->list(syntax-shifted-multi-scopes s_1))))"
"(begin"
"(if(list? lst_6)(void)(let-values()(in-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_8 lst_9)"
"(if(pair? lst_9)"
"(let-values(((smss_10)(unsafe-car lst_9)))"
"(let-values(((fold-var_11)"
"(let-values(((fold-var_12) fold-var_8))"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((init-ht_14)"
"(if(identifier? s_1)"
"(hasheq"
" 'name"
"(syntax-e$1 s_1))"
" '#hasheq())))"
"(let-values(((s-scs_15)"
"(scope-set-at-fallback"
" s_1"
" smss_10"
" phase_2)))"
"(let-values(((context_16)"
"(scope-set->context"
" s-scs_15)))"
"(let-values(((context-ht_17)"
"(hash-set"
" init-ht_14"
" 'context"
" context_16)))"
"(let-values(((sym_18)"
"(syntax-e$1"
" s_1)))"
"(let-values(((bindings_19)"
"(if(identifier?"
" s_1)"
"(let-values()"
"(let-values(((bindings_20"
" covered-scopess_21)"
"(let-values(((ht_22)"
" s-scs_15))"
"(begin"
"(if((lambda(ht_23)"
"(if(hash?"
" ht_23)"
"(immutable?"
" ht_23)"
" #f))"
" ht_22)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_22)))"
"((letrec-values(((for-loop_24)"
"(lambda(bindings_25"
" covered-scope-sets_26"
" i_27)"
"(if i_27"
"(let-values(((sc_28)"
"(unsafe-immutable-hash-iterate-key"
" ht_22"
" i_27)))"
"(let-values(((bindings_29"
" covered-scope-sets_30)"
"(let-values(((ht_31"
" bulk-bindings_32)"
"(let-values(((table_35)"
"(scope-binding-table"
" sc_28)))"
"(if(hash?"
" table_35)"
"(values"
"(hash-ref"
" table_35"
" sym_18"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_35)"
" sym_18"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_35)))))"
"((s_33)"
" s_1)"
"((extra-shifts_34)"
" null))"
"(begin"
" #t"
"((letrec-values(((for-loop_36)"
"(lambda(bindings_37"
" covered-scope-sets_38"
" i_39)"
"(if(not"
"(null?"
" i_39))"
"(let-values(((scs_40)"
"(if(pair?"
" i_39)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_39)))"
"(let-values()"
"(hash-iterate-key"
" ht_31"
" i_39))))"
"((b_41)"
"(if(pair?"
" i_39)"
"(let-values()"
"(let-values(((bulk_42)"
"(bulk-binding-at-bulk"
"(car"
" i_39))))"
"(let-values(((b-info_43)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_42"
" s_33"
" extra-shifts_34)"
" sym_18"
" #f)))"
"(if b-info_43"
"((bulk-binding-create"
" bulk_42)"
" bulk_42"
" b-info_43"
" sym_18)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_31"
" i_39)))))"
"(let-values(((bindings_44"
" covered-scope-sets_45)"
"(let-values(((bindings_46)"
" bindings_37)"
"((covered-scope-sets_47)"
" covered-scope-sets_38))"
"(if(if scs_40"
"(if b_41"
"(if(let-values(((or-part_48)"
" all-bindings?_3))"
"(if or-part_48"
" or-part_48"
"(subset?"
" scs_40"
" s-scs_15)))"
"(not"
"(set-member?"
" covered-scope-sets_47"
" scs_40))"
" #f)"
" #f)"
" #f)"
"(let-values(((bindings_49)"
" bindings_46)"
"((covered-scope-sets_50)"
" covered-scope-sets_47))"
"(let-values(((bindings_51"
" covered-scope-sets_52)"
"(let-values()"
"(values"
"(cons"
"(hash"
" 'name"
"(syntax-e$1"
" s_1)"
" 'context"
"(scope-set->context"
" scs_40)"
" 'match?"
"(subset?"
" scs_40"
" s-scs_15)"
"(if(local-binding?"
" b_41)"
" 'local"
" 'module)"
"(if(local-binding?"
" b_41)"
"(local-binding-key"
" b_41)"
"(vector"
"(module-binding-sym"
" b_41)"
"(module-binding-module"
" b_41)"
"(module-binding-phase"
" b_41))))"
" bindings_49)"
"(set-add"
" covered-scope-sets_50"
" scs_40)))))"
"(values"
" bindings_51"
" covered-scope-sets_52)))"
"(values"
" bindings_46"
" covered-scope-sets_47)))))"
"(for-loop_36"
" bindings_44"
" covered-scope-sets_45"
"(if(pair?"
" i_39)"
"(let-values()"
"(cdr"
" i_39))"
"(let-values()"
"(let-values(((or-part_53)"
"(hash-iterate-next"
" ht_31"
" i_39)))"
"(if or-part_53"
" or-part_53"
" bulk-bindings_32)))))))"
"(values"
" bindings_37"
" covered-scope-sets_38)))))"
" for-loop_36)"
" bindings_25"
" covered-scope-sets_26"
"(let-values(((or-part_54)"
"(hash-iterate-first"
" ht_31)))"
"(if or-part_54"
" or-part_54"
" bulk-bindings_32)))))))"
"(for-loop_24"
" bindings_29"
" covered-scope-sets_30"
"(unsafe-immutable-hash-iterate-next"
" ht_22"
" i_27))))"
"(values"
" bindings_25"
" covered-scope-sets_26)))))"
" for-loop_24)"
" null"
"(set)"
"(unsafe-immutable-hash-iterate-first"
" ht_22))))))"
" bindings_20))"
"(let-values()"
" null))))"
"(if(null? bindings_19)"
" context-ht_17"
"(hash-set"
" context-ht_17"
" 'bindings"
" bindings_19)))))))))"
" fold-var_12))))"
"(values fold-var_13)))))"
"(for-loop_7 fold-var_11(unsafe-cdr lst_9))))"
" fold-var_8))))"
" for-loop_7)"
" null"
" lst_6))))))"
"(let-values(((ht_5)(car hts_4)))(if(null?(cdr hts_4)) ht_5(hash-set ht_5 'fallbacks(cdr hts_4)))))))"
"(define-values"
"(scope-set->context)"
"(lambda(scs_55)"
"(let-values(((temp1_57)"
"(alt-reverse"
"(let-values(((ht_60) scs_55))"
"(begin"
"(if((lambda(ht_61)(if(hash? ht_61)(immutable? ht_61) #f)) ht_60)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_60)))"
"((letrec-values(((for-loop_62)"
"(lambda(fold-var_63 i_64)"
"(if i_64"
"(let-values(((sc_65)(unsafe-immutable-hash-iterate-key ht_60 i_64)))"
"(let-values(((fold-var_66)"
"(let-values(((fold-var_67) fold-var_63))"
"(let-values(((fold-var_68)"
"(let-values()"
"(cons"
"(let-values()"
"(if(representative-scope? sc_65)"
"(vector"
"(scope-id sc_65)"
"(scope-kind sc_65)"
"(multi-scope-name"
"(representative-scope-owner"
" sc_65)))"
"(vector"
"(scope-id sc_65)"
"(scope-kind sc_65))))"
" fold-var_67))))"
"(values fold-var_68)))))"
"(for-loop_62"
" fold-var_66"
"(unsafe-immutable-hash-iterate-next ht_60 i_64))))"
" fold-var_63))))"
" for-loop_62)"
" null"
"(unsafe-immutable-hash-iterate-first ht_60))))))"
"((<2_58) <)"
"((temp3_59)(lambda(v_69)(vector-ref v_69 0))))"
"(sort7.1 #f #f temp3_59 #t temp1_57 <2_58))))"
"(void)"
"(void)"
"(define-values"
"(raise-ambiguous-error)"
"(lambda(id_1 ctx_2)"
"    (raise-syntax-error$1 #f \"identifier's binding is ambiguous\" id_1 #f null (syntax-debug-info-string id_1 ctx_2))))"
"(define-values"
"(syntax-debug-info-string)"
"(lambda(s_3 ctx_4)"
"(let-values(((info_5)(syntax-debug-info$1 s_3(expand-context-phase ctx_4) #t)))"
"(if(not"
"(let-values(((or-part_6)(pair?(hash-ref info_5 'bindings null))))"
"(if or-part_6"
" or-part_6"
"(let-values(((lst_7)(hash-ref info_5 'fallbacks null)))"
"(begin"
"(if(list? lst_7)(void)(let-values()(in-list lst_7)))"
"((letrec-values(((for-loop_8)"
"(lambda(result_9 lst_10)"
"(if(pair? lst_10)"
"(let-values(((fb-info_11)(unsafe-car lst_10)))"
"(let-values(((result_12)"
"(let-values()"
"(let-values(((result_14)"
"(let-values()"
"(let-values()"
"(pair?"
"(hash-ref fb-info_11 'bindings null))))))"
"(values result_14)))))"
"(if(not((lambda x_15 result_12) fb-info_11))"
"(for-loop_8 result_12(unsafe-cdr lst_10))"
" result_12)))"
" result_9))))"
" for-loop_8)"
" #f"
" lst_7))))))"
"        (let-values () \"\")"
"(let-values()"
"(let-values(((relevant-scope-sets_16)"
"((letrec-values(((loop_18)"
"(lambda(info_19 layer_20)"
"(apply"
" append"
"(cons"
"(hash-ref info_19 'context)"
"(alt-reverse"
"(let-values(((lst_21)(hash-ref info_19 'bindings null)))"
"(begin"
"(if(list? lst_21)(void)(let-values()(in-list lst_21)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 lst_24)"
"(if(pair? lst_24)"
"(let-values(((b_25)(unsafe-car lst_24)))"
"(let-values(((fold-var_26)"
"(let-values(((fold-var_27)"
" fold-var_23))"
"(let-values(((fold-var_28)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" b_25"
" 'context))"
" fold-var_27))))"
"(values fold-var_28)))))"
"(for-loop_22"
" fold-var_26"
"(unsafe-cdr lst_24))))"
" fold-var_23))))"
" for-loop_22)"
" null"
" lst_21)))))"
"(let-values(((fallbacks_29)(hash-ref info_19 'fallbacks null)))"
"(alt-reverse"
"(let-values(((lst_30) fallbacks_29)((start_31)(add1 layer_20)))"
"(begin"
"(if(list? lst_30)(void)(let-values()(in-list lst_30)))"
"(if(exact-nonnegative-integer? start_31)"
"(void)"
"(let-values()(in-naturals start_31)))"
"((letrec-values(((for-loop_32)"
"(lambda(fold-var_33 lst_34 pos_35)"
"(if(if(pair? lst_34) #t #f)"
"(let-values(((fallback_36)"
"(unsafe-car lst_34))"
"((layer_37) pos_35))"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39)"
" fold-var_33))"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_18"
" fallback_36"
" layer_37))"
" fold-var_39))))"
"(values fold-var_40)))))"
"(for-loop_32"
" fold-var_38"
"(unsafe-cdr lst_34)"
"(+ pos_35 1))))"
" fold-var_33))))"
" for-loop_32)"
" null"
" lst_30"
" start_31)))))))))"
" loop_18)"
" info_5"
" 0)))"
"(let-values(((common-scopes_17)"
"(if(null? relevant-scope-sets_16)"
"(set)"
"(let-values(((lst_41) relevant-scope-sets_16))"
"(begin"
"(if(list? lst_41)(void)(let-values()(in-list lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(s_43 lst_44)"
"(if(pair? lst_44)"
"(let-values(((l_45)(unsafe-car lst_44)))"
"(let-values(((s_46)"
"(let-values(((s_47) s_43))"
"(let-values(((s_48)"
"(let-values()"
"(set-intersect"
" s_47"
"(list->set l_45)))))"
"(values s_48)))))"
"(for-loop_42 s_46(unsafe-cdr lst_44))))"
" s_43))))"
" for-loop_42)"
"(list->set(car relevant-scope-sets_16))"
" lst_41))))))"
"(string-append"
"((letrec-values(((loop_49)"
"(lambda(info_50 layer_51)"
"(string-append"
"                                    \"\\n  context\""
"(layer->string layer_51)"
"                                    \"...:\""
"(describe-context(hash-ref info_50 'context) common-scopes_17)"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_52)"
"(let-values(((temp1_53)(hash-ref info_50 'bindings null))"
"((temp2_54)"
"(lambda(a_55 b_56)"
"(if(hash-ref a_55 'match? #f)"
"(not(hash-ref b_56 'match? #f))"
" #f))))"
"(sort7.1 #f #f #f #f temp1_53 temp2_54))))"
"(begin"
"(if(list? lst_52)(void)(let-values()(in-list lst_52)))"
"((letrec-values(((for-loop_57)"
"(lambda(fold-var_58 lst_59)"
"(if(pair? lst_59)"
"(let-values(((b_60)(unsafe-car lst_59)))"
"(let-values(((fold-var_61)"
"(let-values(((fold-var_62)"
" fold-var_58))"
"(let-values(((fold-var_63)"
"(let-values()"
"(cons"
"(let-values()"
"(string-append"
"                                                                                                      \"\\n  \""
"(if(hash-ref"
" b_60"
" 'match?"
" #f)"
"                                                                                                        \"matching\""
"                                                                                                        \"other\")"
"                                                                                                      \" binding\""
"(layer->string"
" layer_51)"
"                                                                                                      \"...:\""
"                                                                                                      \"\\n   \""
"(if(hash-ref"
" b_60"
" 'local"
" #f)"
"                                                                                                        \"local\""
"(format"
"                                                                                                         \"~a\""
"(hash-ref"
" b_60"
" 'module"
" #f)))"
"(describe-context"
"(hash-ref"
" b_60"
" 'context)"
" common-scopes_17)))"
" fold-var_62))))"
"(values fold-var_63)))))"
"(for-loop_57 fold-var_61(unsafe-cdr lst_59))))"
" fold-var_58))))"
" for-loop_57)"
" null"
" lst_52)))))"
"(let-values(((fallbacks_64)(hash-ref info_50 'fallbacks null)))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_65) fallbacks_64)((start_66)(add1 layer_51)))"
"(begin"
"(if(list? lst_65)(void)(let-values()(in-list lst_65)))"
"(if(exact-nonnegative-integer? start_66)"
"(void)"
"(let-values()(in-naturals start_66)))"
"((letrec-values(((for-loop_67)"
"(lambda(fold-var_68 lst_69 pos_70)"
"(if(if(pair? lst_69) #t #f)"
"(let-values(((fallback_71)(unsafe-car lst_69))"
"((layer_72) pos_70))"
"(let-values(((fold-var_73)"
"(let-values(((fold-var_74)"
" fold-var_68))"
"(let-values(((fold-var_75)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_49"
" fallback_71"
" layer_72))"
" fold-var_74))))"
"(values fold-var_75)))))"
"(for-loop_67"
" fold-var_73"
"(unsafe-cdr lst_69)"
"(+ pos_70 1))))"
" fold-var_68))))"
" for-loop_67)"
" null"
" lst_65"
" start_66))))))))))"
" loop_49)"
" info_5"
" 0)"
"(if(set-empty? common-scopes_17)"
"                 \"\""
"(string-append"
"                  \"\\n  common scopes...:\""
"(describe-context"
"(alt-reverse"
"(let-values(((lst_76)(hash-ref info_5 'context)))"
"(begin"
"(if(list? lst_76)(void)(let-values()(in-list lst_76)))"
"((letrec-values(((for-loop_77)"
"(lambda(fold-var_78 lst_79)"
"(if(pair? lst_79)"
"(let-values(((s_80)(unsafe-car lst_79)))"
"(let-values(((fold-var_81)"
"(let-values(((fold-var_82) fold-var_78))"
"(if(set-member? common-scopes_17 s_80)"
"(let-values(((fold-var_83) fold-var_82))"
"(let-values(((fold-var_84)"
"(let-values()"
"(cons"
"(let-values() s_80)"
" fold-var_83))))"
"(values fold-var_84)))"
" fold-var_82))))"
"(for-loop_77 fold-var_81(unsafe-cdr lst_79))))"
" fold-var_78))))"
" for-loop_77)"
" null"
" lst_76))))"
"(set))))))))))))"
"(define-values"
"(describe-context)"
"(lambda(scopes_85 common-scopes_86)"
"(let-values(((strs_87)"
"((letrec-values(((loop_88)"
"(lambda(strs_89 scopes_90)"
"(if(null? scopes_90)"
"(let-values()(alt-reverse strs_89))"
"(let-values()"
"                                          (let-values (((str_91) (format \" ~a\" (car scopes_90))))"
"(if(if(pair? strs_89)"
"(<(+(string-length str_91)(string-length(car strs_89))) 72)"
" #f)"
"(loop_88"
"(cons(string-append(car strs_89) str_91)(cdr strs_89))"
"(cdr scopes_90))"
"(loop_88(cons str_91 strs_89)(cdr scopes_90)))))))))"
" loop_88)"
" null"
"(if(set-empty? common-scopes_86)"
" scopes_85"
"(append"
"(alt-reverse"
"(let-values(((lst_92) scopes_85))"
"(begin"
"(if(list? lst_92)(void)(let-values()(in-list lst_92)))"
"((letrec-values(((for-loop_93)"
"(lambda(fold-var_94 lst_95)"
"(if(pair? lst_95)"
"(let-values(((s_96)(unsafe-car lst_95)))"
"(let-values(((fold-var_97)"
"(let-values(((fold-var_98) fold-var_94))"
"(if(not(set-member? common-scopes_86 s_96))"
"(let-values(((fold-var_99) fold-var_98))"
"(let-values(((fold-var_100)"
"(let-values()"
"(cons"
"(let-values() s_96)"
" fold-var_99))))"
"(values fold-var_100)))"
" fold-var_98))))"
"(for-loop_93 fold-var_97(unsafe-cdr lst_95))))"
" fold-var_94))))"
" for-loop_93)"
" null"
" lst_92))))"
"                      (list \"[common scopes]\"))))))"
"(if(null? strs_87)"
"        (let-values () \"\\n   [empty]\")"
"(let-values()"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_101) strs_87))"
"(begin"
"(if(list? lst_101)(void)(let-values()(in-list lst_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(fold-var_103 lst_104)"
"(if(pair? lst_104)"
"(let-values(((str_105)(unsafe-car lst_104)))"
"(let-values(((fold-var_106)"
"(let-values(((fold-var_107) fold-var_103))"
"(let-values(((fold-var_108)"
"(let-values()"
"(cons"
"                                                                         (let-values () (string-append \"\\n  \" str_105))"
" fold-var_107))))"
"(values fold-var_108)))))"
"(for-loop_102 fold-var_106(unsafe-cdr lst_104))))"
" fold-var_103))))"
" for-loop_102)"
" null"
" lst_101))))))))))"
" (define-values (layer->string) (lambda (layer_109) (if (zero? layer_109) \"\" (format \" at layer ~a\" layer_109))))"
"(void)"
"(void)"
"(define-values"
"(raise-syntax-implicit-error)"
"(lambda(s_1 sym_2 trigger-id_3 ctx_4)"
"(let-values(((phase_5)(expand-context-phase ctx_4)))"
"(let-values(((what_6)"
"(let-values(((tmp_8) sym_2))"
"(if(equal? tmp_8 '#%app)"
"                        (let-values () \"function application\")"
"(if(equal? tmp_8 '#%datum)"
"                          (let-values () \"literal data\")"
"(if(equal? tmp_8 '#%top)"
"(let-values()"
"(if(expand-context-allow-unbound? ctx_4)"
"                                \"reference to a top-level identifier\""
"                                \"reference to an unbound identifier\"))"
"(let-values()(void))))))))"
"(let-values(((unbound?_7)"
"(if trigger-id_3"
"(not"
"(let-values(((trigger-id1_9) trigger-id_3)((phase2_10) phase_5))"
"(resolve29.1 #f #f #f #f #f #f #f #f trigger-id1_9 phase2_10)))"
" #f)))"
"(raise-syntax-error$1"
" #f"
"(format"
"(if unbound?_7"
"              \"unbound identifier;\\n also, no ~a transformer is bound~a\""
"              (string-append what_6 \" is not allowed;\\n no ~a syntax transformer is bound~a\"))"
" sym_2"
"(let-values(((tmp_11) phase_5))"
"(if(equal? tmp_11 0)"
"                (let-values () \"\")"
"(if(equal? tmp_11 1)"
"                  (let-values () \" in the transformer phase\")"
"                  (let-values () (format \" at phase ~a\" phase_5))))))"
"(if unbound?_7 trigger-id_3 #f)"
"(if unbound?_7(if(not(eq?(syntax-e$1 s_1)(syntax-e$1 trigger-id_3))) s_1 #f) #f)"
" null"
"           (if unbound?_7 (syntax-debug-info-string trigger-id_3 ctx_4) \"\")))))))"
"(void)"
"(void)"
"(define-values(make-check-no-duplicate-table)(lambda() '#hasheq()))"
"(define-values"
"(check-no-duplicate-ids8.1)"
"(lambda(what1_1 what2_2 ids5_3 phase6_4 s7_5 ht3_6 ht4_7)"
"(let-values(((ids_8) ids5_3))"
"(let-values(((phase_9) phase6_4))"
"(let-values(((s_10) s7_5))"
"(let-values(((ht_11)(if ht4_7 ht3_6(make-check-no-duplicate-table))))"
"            (let-values (((what_12) (if what2_2 what1_1 \"binding name\")))"
"(let-values()"
"((letrec-values(((loop_13)"
"(lambda(v_14 ht_15)"
"(if(identifier? v_14)"
"(let-values()"
"(let-values(((l_16)(hash-ref ht_15(syntax-e$1 v_14) null)))"
"(begin"
"(let-values(((lst_17) l_16))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(fold-var_19 lst_20)"
"(if(pair? lst_20)"
"(let-values(((id_21)(unsafe-car lst_20)))"
"(let-values(((fold-var_22)"
"(let-values()"
"(let-values(((fold-var_24)"
"(let-values()"
"(begin"
"(let-values()"
"(if(bound-identifier=?$1"
" id_21"
" v_14"
" phase_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                  \"duplicate \""
" what_12)"
" s_10"
" v_14))"
"(void)))"
"(void)))))"
"(values fold-var_24)))))"
"(for-loop_18"
" fold-var_22"
"(unsafe-cdr lst_20))))"
" fold-var_19))))"
" for-loop_18)"
"(void)"
" lst_17)))"
"(hash-set ht_15(syntax-e$1 v_14)(cons v_14 l_16)))))"
"(if(pair? v_14)"
"(let-values()(loop_13(cdr v_14)(loop_13(car v_14) ht_15)))"
"(let-values() ht_15))))))"
" loop_13)"
" ids_8"
" ht_11)))))))))"
"(void)"
"(void)"
"(define-values"
"(remove-use-site-scopes)"
"(lambda(s_1 ctx_2)"
"(let-values(((use-sites_3)(root-expand-context-use-site-scopes ctx_2)))"
"(if(if use-sites_3(pair?(unbox use-sites_3)) #f)"
"(if(syntax?$1 s_1)"
"(remove-scopes s_1(unbox use-sites_3))"
"(alt-reverse"
"(let-values(((lst_4) s_1))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((id_8)(unsafe-car lst_7)))"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-scopes id_8(unbox use-sites_3)))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(for-loop_5 fold-var_9(unsafe-cdr lst_7))))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4)))))"
" s_1))))"
"(void)"
"(void)"
"(define-values"
"(struct:compile-context"
" compile-context1.1"
" compile-context?"
" compile-context-namespace"
" compile-context-phase"
" compile-context-self"
" compile-context-module-self"
" compile-context-full-module-name"
" compile-context-lazy-syntax-literals?"
" compile-context-header)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compile-context"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'compile-context)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'namespace)"
"(make-struct-field-accessor -ref_4 1 'phase)"
"(make-struct-field-accessor -ref_4 2 'self)"
"(make-struct-field-accessor -ref_4 3 'module-self)"
"(make-struct-field-accessor -ref_4 4 'full-module-name)"
"(make-struct-field-accessor -ref_4 5 'lazy-syntax-literals?)"
"(make-struct-field-accessor -ref_4 6 'header))))"
"(define-values"
"(make-compile-context14.1)"
"(lambda(full-module-name6_51"
" full-module-name12_52"
" lazy-syntax-literals?7_53"
" lazy-syntax-literals?13_54"
" module-self5_55"
" module-self11_56"
" namespace2_57"
" namespace8_58"
" phase3_59"
" phase9_60"
" self4_61"
" self10_62)"
"(let-values(((namespace_63)(if namespace8_58 namespace2_57(1/current-namespace))))"
"(let-values(((phase_64)(if phase9_60 phase3_59(namespace-phase namespace_63))))"
"(let-values(((self_65)(if self10_62 self4_61(namespace-mpi namespace_63))))"
"(let-values(((module-self_66)(if module-self11_56 module-self5_55 #f)))"
"(let-values(((full-module-name_67)(if full-module-name12_52 full-module-name6_51 #f)))"
"(let-values(((lazy-syntax-literals?_68)"
"(if lazy-syntax-literals?13_54 lazy-syntax-literals?7_53(if module-self_66 #t #f))))"
"(let-values()"
"(begin"
"(if(if module-self_66(not full-module-name_67) #f)"
"                      (let-values () (error \"internal error: module-self provided without full name\"))"
"(void))"
"(compile-context1.1"
" namespace_63"
" phase_64"
" self_65"
" module-self_66"
" full-module-name_67"
" lazy-syntax-literals?_68"
" #f)))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:mpi-intern-table mpi-intern-table1.1 mpi-intern-table? mpi-intern-table-normal mpi-intern-table-fast)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'mpi-intern-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'mpi-intern-table)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'normal)"
"(make-struct-field-accessor -ref_4 1 'fast))))"
"(define-values(make-module-path-index-intern-table)(lambda()(mpi-intern-table1.1(make-hash)(make-hasheq))))"
"(define-values"
"(intern-module-path-index!)"
"(lambda(t_26 mpi_27)"
"(let-values(((or-part_28)(hash-ref(mpi-intern-table-fast t_26) mpi_27 #f)))"
"(if or-part_28"
" or-part_28"
"(let-values(((name_29 base_30)(1/module-path-index-split mpi_27)))"
"(if(not name_29)"
"(let-values()(begin(hash-set!(mpi-intern-table-fast t_26) mpi_27 mpi_27) mpi_27))"
"(let-values()"
"(let-values(((interned-base_31)(if base_30(intern-module-path-index! t_26 base_30) #f)))"
"(let-values(((at-name_32)"
"(let-values(((or-part_34)(hash-ref(mpi-intern-table-normal t_26) name_29 #f)))"
"(if or-part_34"
" or-part_34"
"(let-values(((at-name_35)(make-hasheq)))"
"(begin"
"(hash-set!(mpi-intern-table-normal t_26) name_29 at-name_35)"
" at-name_35))))))"
"(let-values(((i-mpi_33)"
"(let-values(((or-part_36)(hash-ref at-name_32 interned-base_31 #f)))"
"(if or-part_36"
" or-part_36"
"(let-values(((mpi_37)"
"(if(eq? base_30 interned-base_31)"
" mpi_27"
"(let-values(((the-struct_38) mpi_27))"
"(if(1/module-path-index? the-struct_38)"
"(let-values(((base3_39) interned-base_31))"
"(module-path-index2.1"
"(module-path-index-path the-struct_38)"
" base3_39"
"(module-path-index-resolved the-struct_38)"
"(module-path-index-shift-cache the-struct_38)))"
"(raise-argument-error"
" 'struct-copy"
"                                                         \"module-path-index?\""
" the-struct_38))))))"
"(begin(hash-set! at-name_32 interned-base_31 mpi_37) mpi_37))))))"
"(begin(hash-set!(mpi-intern-table-fast t_26) mpi_27 i-mpi_33) i-mpi_33)))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:module-path-index-table"
" module-path-index-table1.1"
" module-path-index-table?"
" module-path-index-table-positions"
" module-path-index-table-intern)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index-table)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'positions)"
"(make-struct-field-accessor -ref_4 1 'intern))))"
"(define-values(mpi-vector-id)(make-built-in-symbol! 'mpi-vector))"
"(define-values"
"(make-module-path-index-table)"
"(lambda()(module-path-index-table1.1(make-hasheq)(make-module-path-index-intern-table))))"
"(define-values"
"(add-module-path-index!)"
"(lambda(mpis_26 mpi_27)"
"(let-values(((pos_28)(add-module-path-index!/pos mpis_26 mpi_27)))"
"(if pos_28(list 'vector-ref mpi-vector-id pos_28) #f))))"
"(define-values"
"(add-module-path-index!/pos)"
"(lambda(mpis_29 mpi_30)"
"(if(not mpi_30)"
"(let-values() #f)"
"(if mpi_30"
"(let-values()"
"(let-values(((mpi_31)(intern-module-path-index!(module-path-index-table-intern mpis_29) mpi_30))"
"((positions_32)(module-path-index-table-positions mpis_29)))"
"(let-values(((or-part_33)(hash-ref positions_32 mpi_31 #f)))"
"(if or-part_33"
" or-part_33"
"(let-values(((pos_34)(hash-count positions_32)))"
"(begin(hash-set! positions_32 mpi_31 pos_34) pos_34))))))"
"(void)))))"
"(define-values"
"(generate-module-path-index-deserialize)"
"(lambda(mpis_35)"
"(let-values(((positions_36)(module-path-index-table-positions mpis_35)))"
"(let-values(((gen-order_37)(make-hasheqv)))"
"(let-values(((rev-positions_38)"
"(let-values(((ht_41) positions_36))"
"(begin"
"(if((lambda(ht_42)(hash? ht_42)) ht_41)(void)(let-values()(default-in-hash ht_41)))"
"((letrec-values(((for-loop_43)"
"(lambda(table_44 i_45)"
"(if i_45"
"(let-values(((k_46 v_47)(hash-iterate-key+value ht_41 i_45)))"
"(let-values(((table_48)"
"(let-values(((table_49) table_44))"
"(let-values(((table_50)"
"(let-values()"
"(let-values(((key_51 val_52)"
"(let-values()"
"(values v_47 k_46))))"
"(hash-set"
" table_49"
" key_51"
" val_52)))))"
"(values table_50)))))"
"(for-loop_43 table_48(hash-iterate-next ht_41 i_45))))"
" table_44))))"
" for-loop_43)"
" '#hasheqv()"
"(hash-iterate-first ht_41))))))"
"(let-values((()"
"(begin"
"(let-values(((start_53) 0)((end_54)(hash-count rev-positions_38))((inc_55) 1))"
"(begin"
"(if(if(real? start_53)(if(real? end_54)(real? inc_55) #f) #f)"
"(void)"
"(let-values()(in-range start_53 end_54 inc_55)))"
"((letrec-values(((for-loop_56)"
"(lambda(fold-var_57 pos_58)"
"(if(< pos_58 end_54)"
"(let-values(((i_59) pos_58))"
"(let-values(((fold-var_60)"
"(let-values()"
"(let-values(((fold-var_62)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_63)"
"(hash-ref"
" rev-positions_38"
" i_59)))"
"((letrec-values(((loop_64)"
"(lambda(mpi_65)"
"(if(hash-ref"
" gen-order_37"
" mpi_65"
" #f)"
"(void)"
"(let-values()"
"(let-values(((name_66"
" base_67)"
"(1/module-path-index-split"
" mpi_65)))"
"(begin"
"(if base_67"
"(let-values()"
"(loop_64"
" base_67))"
"(void))"
"(hash-set!"
" gen-order_37"
" mpi_65"
"(hash-count"
" gen-order_37)))))))))"
" loop_64)"
" mpi_63)))"
"(void)))))"
"(values fold-var_62)))))"
"(for-loop_56 fold-var_60(+ pos_58 inc_55))))"
" fold-var_57))))"
" for-loop_56)"
"(void)"
" start_53)))"
"(values))))"
"(let-values(((rev-gen-order_39)"
"(let-values(((ht_68) gen-order_37))"
"(begin"
"(if((lambda(ht_69)(hash? ht_69)) ht_68)(void)(let-values()(default-in-hash ht_68)))"
"((letrec-values(((for-loop_70)"
"(lambda(table_71 i_72)"
"(if i_72"
"(let-values(((k_73 v_74)(hash-iterate-key+value ht_68 i_72)))"
"(let-values(((table_75)"
"(let-values(((table_76) table_71))"
"(let-values(((table_77)"
"(let-values()"
"(let-values(((key_78 val_79)"
"(let-values()"
"(values"
" v_74"
" k_73))))"
"(hash-set"
" table_76"
" key_78"
" val_79)))))"
"(values table_77)))))"
"(for-loop_70 table_75(hash-iterate-next ht_68 i_72))))"
" table_71))))"
" for-loop_70)"
" '#hasheqv()"
"(hash-iterate-first ht_68))))))"
"(let-values(((gens_40)"
"(let-values(((len_80)(hash-count gen-order_37)))"
"(begin"
"(if(exact-nonnegative-integer? len_80)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_80)))"
"(let-values(((v_81)(make-vector len_80 0)))"
"(begin"
"(if(zero? len_80)"
"(void)"
"(let-values()"
"(let-values(((start_82) 0)((end_83)(hash-count gen-order_37))((inc_84) 1))"
"(begin"
"(if(if(real? start_82)(if(real? end_83)(real? inc_84) #f) #f)"
"(void)"
"(let-values()(in-range start_82 end_83 inc_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(i_86 pos_87)"
"(if(< pos_87 end_83)"
"(let-values(((i_88) pos_87))"
"(let-values(((i_89)"
"(let-values(((i_90) i_86))"
"(let-values(((i_91)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_81"
" i_90"
"(let-values()"
"(let-values(((mpi_92)"
"(hash-ref"
" rev-gen-order_39"
" i_88)))"
"(let-values(((path_93"
" base_94)"
"(1/module-path-index-split"
" mpi_92)))"
"(if(top-level-module-path-index?"
" mpi_92)"
"(let-values()"
" 'top)"
"(if(not"
" path_93)"
"(let-values()"
"(box"
"(let-values(((or-part_95)"
"(1/resolved-module-path-name"
"(module-path-index-resolved"
" mpi_92))))"
"(if or-part_95"
" or-part_95"
" 'self))))"
"(if(not"
" base_94)"
"(let-values()"
"(vector"
" path_93))"
"(if base_94"
"(let-values()"
"(vector"
" path_93"
"(hash-ref"
" gen-order_37"
" base_94)))"
"(void)))))))))"
"(unsafe-fx+"
" 1"
" i_90)))))"
"(values i_91)))))"
"(if(not"
"((lambda x_96(unsafe-fx= i_89 len_80))"
" i_88))"
"(for-loop_85 i_89(+ pos_87 inc_84))"
" i_89)))"
" i_86))))"
" for-loop_85)"
" 0"
" start_82)))))"
" v_81))))))"
"(list"
" 'deserialize-module-path-indexes"
"(list 'quote gens_40)"
"(list"
" 'quote"
"(let-values(((vec_97 i_98)"
"(let-values(((start_99) 0)((end_100)(hash-count rev-positions_38))((inc_101) 1))"
"(begin"
"(if(if(real? start_99)(if(real? end_100)(real? inc_101) #f) #f)"
"(void)"
"(let-values()(in-range start_99 end_100 inc_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(vec_103 i_104 pos_105)"
"(if(< pos_105 end_100)"
"(let-values(((i_106) pos_105))"
"(let-values(((vec_107 i_108)"
"(let-values(((vec_109) vec_103)"
"((i_110) i_104))"
"(let-values(((vec_111 i_112)"
"(let-values()"
"(let-values(((new-vec_113)"
"(if(eq?"
" i_110"
"(unsafe-vector*-length"
" vec_109))"
"(grow-vector"
" vec_109)"
" vec_109)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_113"
" i_110"
"(let-values()"
"(hash-ref"
" gen-order_37"
"(hash-ref"
" rev-positions_38"
" i_106))))"
"(values"
" new-vec_113"
"(unsafe-fx+"
" i_110"
" 1)))))))"
"(values vec_111 i_112)))))"
"(for-loop_102 vec_107 i_108(+ pos_105 inc_101))))"
"(values vec_103 i_104)))))"
" for-loop_102)"
"(make-vector 16)"
" 0"
" start_99)))))"
"(shrink-vector vec_97 i_98))))))))))))"
"(define-values"
"(deserialize-module-path-indexes)"
"(lambda(gen-vec_114 order-vec_115)"
"(let-values(((gen_116)(make-vector(vector-length gen-vec_114) #f)))"
"(begin"
"(let-values(((vec_117 len_118)"
"(let-values(((vec_120) gen-vec_114))"
"(begin"
"(if(vector? vec_120)(void)(let-values()(in-vector vec_120)))"
"(values vec_120(unsafe-vector-length vec_120)))))"
"((start_119) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_119)(void)(let-values()(in-naturals start_119)))"
"((letrec-values(((for-loop_121)"
"(lambda(fold-var_122 pos_123 pos_124)"
"(if(if(unsafe-fx< pos_123 len_118) #t #f)"
"(let-values(((d_125)(unsafe-vector-ref vec_117 pos_123))((i_126) pos_124))"
"(let-values(((fold-var_127)"
"(let-values()"
"(let-values(((fold-var_129)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" gen_116"
" i_126"
"(if(eq? d_125 'top)"
"(let-values()"
"(deserialize-module-path-index))"
"(if(box? d_125)"
"(let-values()"
"(deserialize-module-path-index"
"(unbox d_125)))"
"(let-values()"
"(deserialize-module-path-index"
"(vector-ref d_125 0)"
"(if(>(vector-length d_125) 1)"
"(vector-ref"
" gen_116"
"(vector-ref d_125 1))"
" #f)))))))"
"(void)))))"
"(values fold-var_129)))))"
"(for-loop_121 fold-var_127(unsafe-fx+ 1 pos_123)(+ pos_124 1))))"
" fold-var_122))))"
" for-loop_121)"
"(void)"
" 0"
" start_119)))"
"(let-values(((len_130)(vector-length order-vec_115)))"
"(begin"
"(if(exact-nonnegative-integer? len_130)"
"(void)"
"              (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_130)))"
"(let-values(((v_131)(make-vector len_130 0)))"
"(begin"
"(if(zero? len_130)"
"(void)"
"(let-values()"
"(let-values(((vec_132 len_133)"
"(let-values(((vec_134) order-vec_115))"
"(begin"
"(if(vector? vec_134)(void)(let-values()(in-vector vec_134)))"
"(values vec_134(unsafe-vector-length vec_134))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_135)"
"(lambda(i_136 pos_137)"
"(if(unsafe-fx< pos_137 len_133)"
"(let-values(((p_138)(unsafe-vector-ref vec_132 pos_137)))"
"(let-values(((i_139)"
"(let-values(((i_140) i_136))"
"(let-values(((i_141)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_131"
" i_140"
"(let-values()"
"(vector-ref gen_116 p_138)))"
"(unsafe-fx+ 1 i_140)))))"
"(values i_141)))))"
"(if(not((lambda x_142(unsafe-fx= i_139 len_130)) p_138))"
"(for-loop_135 i_139(unsafe-fx+ 1 pos_137))"
" i_139)))"
" i_136))))"
" for-loop_135)"
" 0"
" 0)))))"
" v_131))))))))"
"(define-values"
"(mpis-as-vector)"
"(lambda(mpis_143)"
"(let-values(((positions_144)(module-path-index-table-positions mpis_143)))"
"(let-values(((vec_145)(make-vector(hash-count positions_144) #f)))"
"(begin"
"(let-values(((ht_146) positions_144))"
"(begin"
"(if((lambda(ht_147)(hash? ht_147)) ht_146)(void)(let-values()(default-in-hash ht_146)))"
"((letrec-values(((for-loop_148)"
"(lambda(fold-var_149 i_150)"
"(if i_150"
"(let-values(((mpi_151 pos_152)(hash-iterate-key+value ht_146 i_150)))"
"(let-values(((fold-var_153)"
"(let-values()"
"(let-values(((fold-var_155)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set! vec_145 pos_152 mpi_151))"
"(void)))))"
"(values fold-var_155)))))"
"(for-loop_148 fold-var_153(hash-iterate-next ht_146 i_150))))"
" fold-var_149))))"
" for-loop_148)"
"(void)"
"(hash-iterate-first ht_146))))"
" vec_145)))))"
"(define-values"
"(serialize-module-uses)"
"(lambda(mus_166 mpis_167)"
"(alt-reverse"
"(let-values(((lst_168) mus_166))"
"(begin"
"(if(list? lst_168)(void)(let-values()(in-list lst_168)))"
"((letrec-values(((for-loop_169)"
"(lambda(fold-var_170 lst_171)"
"(if(pair? lst_171)"
"(let-values(((mu_172)(unsafe-car lst_171)))"
"(let-values(((fold-var_173)"
"(let-values(((fold-var_174) fold-var_170))"
"(let-values(((fold-var_175)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'module-use"
"(add-module-path-index!"
" mpis_167"
"(module-use-module mu_172))"
"(module-use-phase mu_172)))"
" fold-var_174))))"
"(values fold-var_175)))))"
"(for-loop_169 fold-var_173(unsafe-cdr lst_171))))"
" fold-var_170))))"
" for-loop_169)"
" null"
" lst_168))))))"
"(define-values"
"(interned-literal?)"
"(lambda(v_176)"
"(let-values(((or-part_177)(null? v_176)))"
"(if or-part_177"
" or-part_177"
"(let-values(((or-part_178)(boolean? v_176)))"
"(if or-part_178"
" or-part_178"
"(let-values(((or-part_179)"
"(if(fixnum? v_176)(if(< v_176(sub1(expt 2 30)))(> v_176(-(expt 2 30))) #f) #f)))"
"(if or-part_179"
" or-part_179"
"(let-values(((or-part_180)(symbol? v_176)))"
"(if or-part_180"
" or-part_180"
"(let-values(((or-part_181)(char? v_176)))(if or-part_181 or-part_181(keyword? v_176)))))))))))))"
"(define-values"
"(serialize-phase-to-link-module-uses)"
"(lambda(phase-to-link-module-uses_182 mpis_183)"
"(let-values(((phases-in-order_184)"
"(let-values(((temp10_185)(hash-keys phase-to-link-module-uses_182))((<11_186) <))"
"(sort7.1 #f #f #f #f temp10_185 <11_186))))"
"(list*"
" 'hasheqv"
"(apply"
" append"
"(alt-reverse"
"(let-values(((lst_187) phases-in-order_184))"
"(begin"
"(if(list? lst_187)(void)(let-values()(in-list lst_187)))"
"((letrec-values(((for-loop_188)"
"(lambda(fold-var_189 lst_190)"
"(if(pair? lst_190)"
"(let-values(((phase_191)(unsafe-car lst_190)))"
"(let-values(((fold-var_192)"
"(let-values(((fold-var_193) fold-var_189))"
"(let-values(((fold-var_194)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" phase_191"
"(list*"
" 'list"
"(serialize-module-uses"
"(hash-ref"
" phase-to-link-module-uses_182"
" phase_191)"
" mpis_183))))"
" fold-var_193))))"
"(values fold-var_194)))))"
"(for-loop_188 fold-var_192(unsafe-cdr lst_190))))"
" fold-var_189))))"
" for-loop_188)"
" null"
" lst_187)))))))))"
"(define-values"
"(generate-deserialize6.1)"
"(lambda(syntax-support?2_195 syntax-support?3_196 v4_197 mpis5_198)"
"(let-values(((v_199) v4_197))"
"(let-values(((mpis_200) mpis5_198))"
"(let-values(((syntax-support?_201)(if syntax-support?3_196 syntax-support?2_195 #t)))"
"(let-values()"
"(let-values(((reachable-scopes_202)(find-reachable-scopes v_199)))"
"(let-values(((state_203)(make-serialize-state reachable-scopes_202)))"
"(let-values(((mutables_204)(make-hasheq)))"
"(let-values(((objs_205)(make-hasheq)))"
"(let-values(((shares_206)(make-hasheq)))"
"(let-values(((obj-step_207) 0))"
"(let-values(((frontier_208) null))"
"(letrec-values(((add-frontier!_209)"
"(case-lambda"
"((v_228)(set! frontier_208(cons v_228 frontier_208)))"
"((kind_229 v_230)(add-frontier!_209 v_230)))))"
"(let-values((()"
"(begin"
"((letrec-values(((frontier-loop_231)"
"(lambda(v_232)"
"(begin"
"((letrec-values(((loop_233)"
"(lambda(v_234)"
"(if(let-values(((or-part_235)"
"(interned-literal?"
" v_234)))"
"(if or-part_235"
" or-part_235"
"(1/module-path-index?"
" v_234)))"
"(let-values()(void))"
"(if(hash-ref objs_205 v_234 #f)"
"(let-values()"
"(if(hash-ref"
" mutables_204"
" v_234"
" #f)"
"(void)"
"(let-values()"
"(hash-set!"
" shares_206"
" v_234"
" #t))))"
"(let-values()"
"(begin"
"(if(serialize-fill!?"
" v_234)"
"(let-values()"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"((serialize-fill!-ref"
" v_234)"
" v_234"
" add-frontier!_209"
" state_203)))"
"(if(serialize? v_234)"
"(let-values()"
"((serialize-ref"
" v_234)"
" v_234"
"(case-lambda"
"((v_236)"
"(loop_233 v_236))"
"((kind_237 v_238)"
"(loop_233"
" v_238)))"
" state_203))"
"(if(pair? v_234)"
"(let-values()"
"(begin"
"(loop_233"
"(car v_234))"
"(loop_233"
"(cdr v_234))))"
"(if(vector? v_234)"
"(let-values()"
"(if(let-values(((or-part_239)"
"(immutable?"
" v_234)))"
"(if or-part_239"
" or-part_239"
"(zero?"
"(vector-length"
" v_234))))"
"(let-values(((vec_240"
" len_241)"
"(let-values(((vec_242)"
" v_234))"
"(begin"
"(if(vector?"
" vec_242)"
"(void)"
"(let-values()"
"(in-vector"
" vec_242)))"
"(values"
" vec_242"
"(unsafe-vector-length"
" vec_242))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_243)"
"(lambda(fold-var_244"
" pos_245)"
"(if(unsafe-fx<"
" pos_245"
" len_241)"
"(let-values(((e_246)"
"(unsafe-vector-ref"
" vec_240"
" pos_245)))"
"(let-values(((fold-var_247)"
"(let-values()"
"(let-values(((fold-var_249)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_233"
" e_246))"
"(void)))))"
"(values"
" fold-var_249)))))"
"(for-loop_243"
" fold-var_247"
"(unsafe-fx+"
" 1"
" pos_245))))"
" fold-var_244))))"
" for-loop_243)"
"(void)"
" 0)))"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"(let-values(((vec_250"
" len_251)"
"(let-values(((vec_252)"
" v_234))"
"(begin"
"(if(vector?"
" vec_252)"
"(void)"
"(let-values()"
"(in-vector"
" vec_252)))"
"(values"
" vec_252"
"(unsafe-vector-length"
" vec_252))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_253)"
"(lambda(fold-var_254"
" pos_255)"
"(if(unsafe-fx<"
" pos_255"
" len_251)"
"(let-values(((e_256)"
"(unsafe-vector-ref"
" vec_250"
" pos_255)))"
"(let-values(((fold-var_257)"
"(let-values()"
"(let-values(((fold-var_259)"
"(let-values()"
"(begin"
"(let-values()"
"(add-frontier!_209"
" e_256))"
"(void)))))"
"(values"
" fold-var_259)))))"
"(for-loop_253"
" fold-var_257"
"(unsafe-fx+"
" 1"
" pos_255))))"
" fold-var_254))))"
" for-loop_253)"
"(void)"
" 0))))))"
"(if(box? v_234)"
"(let-values()"
"(if(immutable?"
" v_234)"
"(loop_233"
"(unbox"
" v_234))"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"(add-frontier!_209"
"(unbox"
" v_234)))))"
"(if(hash?"
" v_234)"
"(let-values()"
"(if(immutable?"
" v_234)"
"(let-values(((lst_260)"
"(sorted-hash-keys"
" v_234)))"
"(begin"
"(if(list?"
" lst_260)"
"(void)"
"(let-values()"
"(in-list"
" lst_260)))"
"((letrec-values(((for-loop_261)"
"(lambda(fold-var_262"
" lst_263)"
"(if(pair?"
" lst_263)"
"(let-values(((k_264)"
"(unsafe-car"
" lst_263)))"
"(let-values(((fold-var_265)"
"(let-values()"
"(let-values(((fold-var_267)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_233"
" k_264)"
"(loop_233"
"(hash-ref"
" v_234"
" k_264))))"
"(void)))))"
"(values"
" fold-var_267)))))"
"(for-loop_261"
" fold-var_265"
"(unsafe-cdr"
" lst_263))))"
" fold-var_262))))"
" for-loop_261)"
"(void)"
" lst_260)))"
"(begin"
"(hash-set!"
" mutables_204"
" v_234"
"(hash-count"
" mutables_204))"
"(let-values(((lst_268)"
"(sorted-hash-keys"
" v_234)))"
"(begin"
"(if(list?"
" lst_268)"
"(void)"
"(let-values()"
"(in-list"
" lst_268)))"
"((letrec-values(((for-loop_269)"
"(lambda(fold-var_270"
" lst_271)"
"(if(pair?"
" lst_271)"
"(let-values(((k_272)"
"(unsafe-car"
" lst_271)))"
"(let-values(((fold-var_273)"
"(let-values()"
"(let-values(((fold-var_275)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(add-frontier!_209"
" k_272)"
"(add-frontier!_209"
"(hash-ref"
" v_234"
" k_272))))"
"(void)))))"
"(values"
" fold-var_275)))))"
"(for-loop_269"
" fold-var_273"
"(unsafe-cdr"
" lst_271))))"
" fold-var_270))))"
" for-loop_269)"
"(void)"
" lst_268))))))"
"(if(prefab-struct-key"
" v_234)"
"(let-values()"
"(let-values(((v*_276"
" start*_277"
" stop*_278"
" step*_279)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                             \"vector\""
"(lambda(x_280)"
"(vector?"
" x_280))"
"(lambda(x_281)"
"(unsafe-vector-length"
" x_281))"
"(struct->vector"
" v_234)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_282)"
"(lambda(fold-var_283"
" idx_284)"
"(if(unsafe-fx<"
" idx_284"
" stop*_278)"
"(let-values(((e_285)"
"(unsafe-vector-ref"
" v*_276"
" idx_284)))"
"(let-values(((fold-var_286)"
"(let-values()"
"(let-values(((fold-var_288)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_233"
" e_285))"
"(void)))))"
"(values"
" fold-var_288)))))"
"(for-loop_282"
" fold-var_286"
"(unsafe-fx+"
" idx_284"
" 1))))"
" fold-var_283))))"
" for-loop_282)"
"(void)"
" start*_277))))"
"(if(srcloc?"
" v_234)"
"(let-values()"
"(let-values(((v*_289"
" start*_290"
" stop*_291"
" step*_292)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_293)"
"(vector?"
" x_293))"
"(lambda(x_294)"
"(unsafe-vector-length"
" x_294))"
"(struct->vector"
" v_234)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_295)"
"(lambda(fold-var_296"
" idx_297)"
"(if(unsafe-fx<"
" idx_297"
" stop*_291)"
"(let-values(((e_298)"
"(unsafe-vector-ref"
" v*_289"
" idx_297)))"
"(let-values(((fold-var_299)"
"(let-values()"
"(let-values(((fold-var_301)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_233"
" e_298))"
"(void)))))"
"(values"
" fold-var_301)))))"
"(for-loop_295"
" fold-var_299"
"(unsafe-fx+"
" idx_297"
" 1))))"
" fold-var_296))))"
" for-loop_295)"
"(void)"
" start*_290))))"
"(let-values()"
"(void))))))))))"
"(hash-set!"
" objs_205"
" v_234"
" obj-step_207)"
"(set! obj-step_207"
"(add1"
" obj-step_207)))))))))"
" loop_233)"
" v_232)"
"(if(null? frontier_208)"
"(void)"
"(let-values()"
"(let-values(((l_302) frontier_208))"
"(begin"
"(set! frontier_208 null)"
"(let-values(((lst_303) l_302))"
"(begin"
"(if(list? lst_303)"
"(void)"
"(let-values()(in-list lst_303)))"
"((letrec-values(((for-loop_304)"
"(lambda(fold-var_305"
" lst_306)"
"(if(pair? lst_306)"
"(let-values(((v_307)"
"(unsafe-car"
" lst_306)))"
"(let-values(((fold-var_308)"
"(let-values()"
"(let-values(((fold-var_310)"
"(let-values()"
"(begin"
"(let-values()"
"(frontier-loop_231"
" v_307))"
"(void)))))"
"(values"
" fold-var_310)))))"
"(for-loop_304"
" fold-var_308"
"(unsafe-cdr"
" lst_306))))"
" fold-var_305))))"
" for-loop_304)"
"(void)"
" lst_303)))))))))))"
" frontier-loop_231)"
" v_199)"
"(values))))"
"(let-values(((num-mutables_210)(hash-count mutables_204)))"
"(let-values(((share-step-positions_211)"
"(let-values(((share-steps_311)"
"(alt-reverse"
"(let-values(((ht_312) shares_206))"
"(begin"
"(if((lambda(ht_313)(hash? ht_313)) ht_312)"
"(void)"
"(let-values()(default-in-hash-keys ht_312)))"
"((letrec-values(((for-loop_314)"
"(lambda(fold-var_315 i_316)"
"(if i_316"
"(let-values(((obj_317)"
"(hash-iterate-key"
" ht_312"
" i_316)))"
"(let-values(((fold-var_318)"
"(let-values(((fold-var_319)"
" fold-var_315))"
"(let-values(((fold-var_320)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" objs_205"
" obj_317))"
" fold-var_319))))"
"(values"
" fold-var_320)))))"
"(for-loop_314"
" fold-var_318"
"(hash-iterate-next"
" ht_312"
" i_316))))"
" fold-var_315))))"
" for-loop_314)"
" null"
"(hash-iterate-first ht_312)))))))"
"(let-values(((lst_321)"
"(let-values(((share-steps12_323) share-steps_311)"
"((<13_324) <))"
"(sort7.1 #f #f #f #f share-steps12_323 <13_324)))"
"((start_322) num-mutables_210))"
"(begin"
"(if(list? lst_321)(void)(let-values()(in-list lst_321)))"
"(if(exact-nonnegative-integer? start_322)"
"(void)"
"(let-values()(in-naturals start_322)))"
"((letrec-values(((for-loop_325)"
"(lambda(table_326 lst_327 pos_328)"
"(if(if(pair? lst_327) #t #f)"
"(let-values(((step_329)(unsafe-car lst_327))"
"((pos_330) pos_328))"
"(let-values(((table_331)"
"(let-values(((table_332)"
" table_326))"
"(let-values(((table_333)"
"(let-values()"
"(let-values(((key_334"
" val_335)"
"(let-values()"
"(values"
" step_329"
" pos_330))))"
"(hash-set"
" table_332"
" key_334"
" val_335)))))"
"(values table_333)))))"
"(for-loop_325"
" table_331"
"(unsafe-cdr lst_327)"
"(+ pos_328 1))))"
" table_326))))"
" for-loop_325)"
" '#hasheqv()"
" lst_321"
" start_322))))))"
"(let-values(((stream_212) null))"
"(let-values(((stream-size_213) 0))"
"(let-values(((next-push-position_214)(lambda() stream-size_213)))"
"(let-values(((quoted?_215)"
"(lambda(pos_336)"
"(let-values(((v_337)"
"(list-ref"
" stream_212"
"(- stream-size_213(add1 pos_336)))))"
"(let-values(((or-part_338)(not(keyword? v_337))))"
"(if or-part_338 or-part_338(eq? '#:quote v_337)))))))"
"(let-values(((ser-reset!_216)"
"(lambda(pos_339)"
"(begin"
"(set! stream_212"
"(list-tail stream_212(- stream-size_213 pos_339)))"
"(set! stream-size_213 pos_339)))))"
"(let-values(((reap-stream!_217)"
"(lambda()"
"(begin0"
"(list->vector(alt-reverse stream_212))"
"(set! stream_212 null)"
"(set! stream-size_213 0)))))"
"(letrec-values(((ser-push!_218)"
"(case-lambda"
"((v_340)"
"(if(hash-ref shares_206 v_340 #f)"
"(let-values()"
"(let-values(((n_341)"
"(hash-ref"
" share-step-positions_211"
"(hash-ref objs_205 v_340))))"
"(begin"
"(ser-push!_218 'tag '#:ref)"
"(ser-push!_218 'exact n_341))))"
"(let-values(((c1_342)"
"(hash-ref mutables_204 v_340 #f)))"
"(if c1_342"
"((lambda(n_343)"
"(begin"
"(ser-push!_218 'tag '#:ref)"
"(ser-push!_218 'exact n_343)))"
" c1_342)"
"(let-values()(ser-push-encoded!_219 v_340))))))"
"((kind_344 v_345)"
"(let-values(((tmp_346) kind_344))"
"(if(equal? tmp_346 'exact)"
"(let-values()"
"(begin"
"(set! stream_212(cons v_345 stream_212))"
"(set! stream-size_213(add1 stream-size_213))))"
"(if(equal? tmp_346 'tag)"
"(let-values()(ser-push!_218 'exact v_345))"
"(if(equal? tmp_346 'reference)"
"(let-values()"
"(if(hash-ref shares_206 v_345 #f)"
"(let-values()"
"(let-values(((n_347)"
"(hash-ref"
" share-step-positions_211"
"(hash-ref"
" objs_205"
" v_345))))"
"(ser-push!_218 'exact n_347)))"
"(let-values(((c2_348)"
"(hash-ref"
" mutables_204"
" v_345"
" #f)))"
"(if c2_348"
"((lambda(n_349)"
"(ser-push!_218 'exact n_349))"
" c2_348)"
"(let-values()"
"(ser-push!_218 v_345))))))"
"(let-values()(ser-push!_218 v_345)))))))))"
"((ser-push-encoded!_219)"
"(lambda(v_350)"
"(if(keyword? v_350)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:quote)"
"(ser-push!_218 'exact v_350)))"
"(if(1/module-path-index? v_350)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:mpi)"
"(ser-push!_218"
" 'exact"
"(add-module-path-index!/pos mpis_200 v_350))))"
"(if(serialize? v_350)"
"(let-values()"
"((serialize-ref v_350)"
" v_350"
" ser-push!_218"
" state_203))"
"(if(if(list? v_350)"
"(if(pair? v_350)(pair?(cdr v_350)) #f)"
" #f)"
"(let-values()"
"(let-values(((start-pos_351)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:list)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(length v_350))"
"(values))))"
"(let-values(((all-quoted?_352)"
"(let-values(((lst_353)"
" v_350))"
"(begin"
"(if(list? lst_353)"
"(void)"
"(let-values()"
"(in-list"
" lst_353)))"
"((letrec-values(((for-loop_354)"
"(lambda(all-quoted?_355"
" lst_356)"
"(if(pair?"
" lst_356)"
"(let-values(((i_357)"
"(unsafe-car"
" lst_356)))"
"(let-values(((all-quoted?_358)"
"(let-values(((all-quoted?_359)"
" all-quoted?_355))"
"(let-values(((all-quoted?_360)"
"(let-values()"
"(let-values(((i-pos_361)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218"
" i_357)"
"(if all-quoted?_359"
"(quoted?_215"
" i-pos_361)"
" #f))))))"
"(values"
" all-quoted?_360)))))"
"(for-loop_354"
" all-quoted?_358"
"(unsafe-cdr"
" lst_356))))"
" all-quoted?_355))))"
" for-loop_354)"
" #t"
" lst_353)))))"
"(if all-quoted?_352"
"(let-values()"
"(begin"
"(ser-reset!_216 start-pos_351)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218 'exact v_350)))"
"(void)))))))"
"(if(pair? v_350)"
"(let-values()"
"(let-values(((start-pos_362)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:cons)"
"(values))))"
"(let-values(((a-pos_363)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
"(car v_350))"
"(values))))"
"(let-values(((d-pos_364)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218(cdr v_350))"
"(if(if(quoted?_215 a-pos_363)"
"(quoted?_215 d-pos_364)"
" #f)"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_362)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))))"
"(if(box? v_350)"
"(let-values()"
"(let-values(((start-pos_365)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:box)"
"(values))))"
"(let-values(((v-pos_366)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218(unbox v_350))"
"(if(quoted?_215 v-pos_366)"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_365)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))"
"(if(vector? v_350)"
"(let-values()"
"(let-values(((start-pos_367)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:vector)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(vector-length"
" v_350))"
"(values))))"
"(let-values(((all-quoted?_368)"
"(let-values(((vec_369"
" len_370)"
"(let-values(((vec_371)"
" v_350))"
"(begin"
"(if(vector?"
" vec_371)"
"(void)"
"(let-values()"
"(in-vector"
" vec_371)))"
"(values"
" vec_371"
"(unsafe-vector-length"
" vec_371))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_372)"
"(lambda(all-quoted?_373"
" pos_374)"
"(if(unsafe-fx<"
" pos_374"
" len_370)"
"(let-values(((i_375)"
"(unsafe-vector-ref"
" vec_369"
" pos_374)))"
"(let-values(((all-quoted?_376)"
"(let-values(((all-quoted?_377)"
" all-quoted?_373))"
"(let-values(((all-quoted?_378)"
"(let-values()"
"(let-values(((i-pos_379)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218"
" i_375)"
"(if all-quoted?_377"
"(quoted?_215"
" i-pos_379)"
" #f))))))"
"(values"
" all-quoted?_378)))))"
"(for-loop_372"
" all-quoted?_376"
"(unsafe-fx+"
" 1"
" pos_374))))"
" all-quoted?_373))))"
" for-loop_372)"
" #t"
" 0)))))"
"(if all-quoted?_368"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_367)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))"
"(if(hash? v_350)"
"(let-values()"
"(let-values(((start-pos_380)"
"(next-push-position_214)))"
"(let-values(((as-set?_381)"
"(let-values(((ht_384)"
" v_350))"
"(begin"
"(if((lambda(ht_385)"
"(hash?"
" ht_385))"
" ht_384)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_384)))"
"((letrec-values(((for-loop_386)"
"(lambda(result_387"
" i_388)"
"(if i_388"
"(let-values(((val_389)"
"(hash-iterate-value"
" ht_384"
" i_388)))"
"(let-values(((result_390)"
"(let-values()"
"(let-values(((result_392)"
"(let-values()"
"(let-values()"
"(eq?"
" val_389"
" #t)))))"
"(values"
" result_392)))))"
"(if(not"
"((lambda x_393"
"(not"
" result_390))"
" val_389))"
"(for-loop_386"
" result_390"
"(hash-iterate-next"
" ht_384"
" i_388))"
" result_390)))"
" result_387))))"
" for-loop_386)"
" #t"
"(hash-iterate-first"
" ht_384))))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
"(if as-set?_381"
"(if(hash-eq?"
" v_350)"
"(let-values()"
" '#:seteq)"
"(if(hash-eqv?"
" v_350)"
"(let-values()"
" '#:seteqv)"
"(let-values()"
" '#:set)))"
"(if(hash-eq?"
" v_350)"
"(let-values()"
" '#:hasheq)"
"(if(hash-eqv?"
" v_350)"
"(let-values()"
" '#:hasheqv)"
"(let-values()"
" '#:hash)))))"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(hash-count"
" v_350))"
"(values))))"
"(let-values(((ks_382)"
"(sorted-hash-keys"
" v_350)))"
"(let-values(((all-quoted?_383)"
"(let-values(((lst_394)"
" ks_382))"
"(begin"
"(if(list?"
" lst_394)"
"(void)"
"(let-values()"
"(in-list"
" lst_394)))"
"((letrec-values(((for-loop_395)"
"(lambda(all-quoted?_396"
" lst_397)"
"(if(pair?"
" lst_397)"
"(let-values(((k_398)"
"(unsafe-car"
" lst_397)))"
"(let-values(((all-quoted?_399)"
"(let-values(((all-quoted?_400)"
" all-quoted?_396))"
"(let-values(((all-quoted?_401)"
"(let-values()"
"(let-values(((k-pos_402)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" k_398)"
"(values))))"
"(let-values(((v-pos_403)"
"(next-push-position_214)))"
"(begin"
"(if as-set?_381"
"(void)"
"(let-values()"
"(ser-push!_218"
"(hash-ref"
" v_350"
" k_398))))"
"(if all-quoted?_400"
"(if(quoted?_215"
" k-pos_402)"
"(let-values(((or-part_404)"
" as-set?_381))"
"(if or-part_404"
" or-part_404"
"(quoted?_215"
" v-pos_403)))"
" #f)"
" #f))))))))"
"(values"
" all-quoted?_401)))))"
"(for-loop_395"
" all-quoted?_399"
"(unsafe-cdr"
" lst_397))))"
" all-quoted?_396))))"
" for-loop_395)"
" #t"
" lst_394)))))"
"(if all-quoted?_383"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_380)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))))"
"(let-values(((c3_405)"
"(prefab-struct-key"
" v_350)))"
"(if c3_405"
"((lambda(k_406)"
"(let-values(((vec_407)"
"(struct->vector"
" v_350)))"
"(let-values(((start-pos_408)"
"(next-push-position_214)))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:prefab)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
" k_406)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(sub1"
"(vector-length"
" vec_407)))"
"(values))))"
"(let-values(((all-quoted?_409)"
"(let-values(((v*_410"
" start*_411"
" stop*_412"
" step*_413)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_414)"
"(vector?"
" x_414))"
"(lambda(x_415)"
"(unsafe-vector-length"
" x_415))"
" vec_407"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_416)"
"(lambda(all-quoted?_417"
" idx_418)"
"(if(unsafe-fx<"
" idx_418"
" stop*_412)"
"(let-values(((i_419)"
"(unsafe-vector-ref"
" v*_410"
" idx_418)))"
"(let-values(((all-quoted?_420)"
"(let-values(((all-quoted?_421)"
" all-quoted?_417))"
"(let-values(((all-quoted?_422)"
"(let-values()"
"(let-values(((i-pos_423)"
"(next-push-position_214)))"
"(begin"
"(ser-push!_218"
" i_419)"
"(if all-quoted?_421"
"(quoted?_215"
" i-pos_423)"
" #f))))))"
"(values"
" all-quoted?_422)))))"
"(for-loop_416"
" all-quoted?_420"
"(unsafe-fx+"
" idx_418"
" 1))))"
" all-quoted?_417))))"
" for-loop_416)"
" #t"
" start*_411)))))"
"(if all-quoted?_409"
"(let-values()"
"(begin"
"(ser-reset!_216"
" start-pos_408)"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350)))"
"(void)))))))))"
" c3_405)"
"(if(srcloc? v_350)"
"(let-values()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:srcloc)"
"(ser-push!_218"
"(srcloc-source v_350))"
"(ser-push!_218"
"(srcloc-line v_350))"
"(ser-push!_218"
"(srcloc-column v_350))"
"(ser-push!_218"
"(srcloc-position v_350))"
"(ser-push!_218"
"(srcloc-span v_350))))"
"(let-values()"
"(begin"
"(ser-push-optional-quote!_220)"
"(ser-push!_218"
" 'exact"
" v_350))))))))))))))))"
"((ser-push-optional-quote!_220)(lambda()(void))))"
"(let-values(((ser-shell!_221)"
"(lambda(v_424)"
"(if(serialize-fill!? v_424)"
"(let-values()"
"((serialize-ref v_424)"
" v_424"
" ser-push!_218"
" state_203))"
"(if(box? v_424)"
"(let-values()(ser-push!_218 'tag '#:box))"
"(if(vector? v_424)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:vector)"
"(ser-push!_218 'exact(vector-length v_424))))"
"(if(hash? v_424)"
"(let-values()"
"(ser-push!_218"
" 'tag"
"(if(hash-eq? v_424)"
"(let-values() '#:hasheq)"
"(if(hash-eqv? v_424)"
"(let-values() '#:hasheqv)"
"(let-values() '#:hash)))))"
"(let-values()"
"(error"
" 'ser-shell"
"                                                                           \"unknown mutable: ~e\""
" v_424)))))))))"
"(let-values(((ser-shell-fill!_222)"
"(lambda(v_425)"
"(if(serialize-fill!? v_425)"
"(let-values()"
"((serialize-fill!-ref v_425)"
" v_425"
" ser-push!_218"
" state_203))"
"(if(box? v_425)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:set-box!)"
"(ser-push!_218(unbox v_425))))"
"(if(vector? v_425)"
"(let-values()"
"(begin"
"(ser-push!_218 'tag '#:set-vector!)"
"(ser-push!_218 'exact(vector-length v_425))"
"(let-values(((vec_426 len_427)"
"(let-values(((vec_428)"
" v_425))"
"(begin"
"(if(vector? vec_428)"
"(void)"
"(let-values()"
"(in-vector vec_428)))"
"(values"
" vec_428"
"(unsafe-vector-length"
" vec_428))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_429)"
"(lambda(fold-var_430"
" pos_431)"
"(if(unsafe-fx<"
" pos_431"
" len_427)"
"(let-values(((v_432)"
"(unsafe-vector-ref"
" vec_426"
" pos_431)))"
"(let-values(((fold-var_433)"
"(let-values()"
"(let-values(((fold-var_435)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push!_218"
" v_432))"
"(void)))))"
"(values"
" fold-var_435)))))"
"(for-loop_429"
" fold-var_433"
"(unsafe-fx+"
" 1"
" pos_431))))"
" fold-var_430))))"
" for-loop_429)"
"(void)"
" 0)))))"
"(if(hash? v_425)"
"(let-values()"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'tag"
" '#:set-hash!)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_218"
" 'exact"
"(hash-count v_425))"
"(values))))"
"(let-values(((ks_436)"
"(sorted-hash-keys v_425)))"
"(let-values(((lst_437) ks_436))"
"(begin"
"(if(list? lst_437)"
"(void)"
"(let-values()"
"(in-list lst_437)))"
"((letrec-values(((for-loop_438)"
"(lambda(fold-var_439"
" lst_440)"
"(if(pair?"
" lst_440)"
"(let-values(((k_441)"
"(unsafe-car"
" lst_440)))"
"(let-values(((fold-var_442)"
"(let-values()"
"(let-values(((fold-var_444)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(ser-push!_218"
" k_441)"
"(ser-push!_218"
"(hash-ref"
" v_425"
" k_441))))"
"(void)))))"
"(values"
" fold-var_444)))))"
"(for-loop_438"
" fold-var_442"
"(unsafe-cdr"
" lst_440))))"
" fold-var_439))))"
" for-loop_438)"
"(void)"
" lst_437)))))))"
"(let-values()"
"(error"
" 'ser-shell-fill"
"                                                                             \"unknown mutable: ~e\""
" v_425)))))))))"
"(let-values(((rev-mutables_223)"
"(let-values(((ht_445) mutables_204))"
"(begin"
"(if((lambda(ht_446)(hash? ht_446)) ht_445)"
"(void)"
"(let-values()(default-in-hash ht_445)))"
"((letrec-values(((for-loop_447)"
"(lambda(table_448 i_449)"
"(if i_449"
"(let-values(((k_450 v_451)"
"(hash-iterate-key+value"
" ht_445"
" i_449)))"
"(let-values(((table_452)"
"(let-values(((table_453)"
" table_448))"
"(let-values(((table_454)"
"(let-values()"
"(let-values(((key_455"
" val_456)"
"(let-values()"
"(values"
" v_451"
" k_450))))"
"(hash-set"
" table_453"
" key_455"
" val_456)))))"
"(values"
" table_454)))))"
"(for-loop_447"
" table_452"
"(hash-iterate-next"
" ht_445"
" i_449))))"
" table_448))))"
" for-loop_447)"
" '#hasheqv()"
"(hash-iterate-first ht_445))))))"
"(let-values(((mutable-shell-bindings_224)"
"(begin"
"(let-values(((start_457) 0)"
"((end_458)(hash-count mutables_204))"
"((inc_459) 1))"
"(begin"
"(if(if(real? start_457)"
"(if(real? end_458)(real? inc_459) #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_457 end_458 inc_459)))"
"((letrec-values(((for-loop_460)"
"(lambda(fold-var_461"
" pos_462)"
"(if(< pos_462 end_458)"
"(let-values(((i_463)"
" pos_462))"
"(let-values(((fold-var_464)"
"(let-values()"
"(let-values(((fold-var_466)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell!_221"
"(hash-ref"
" rev-mutables_223"
" i_463)))"
"(void)))))"
"(values"
" fold-var_466)))))"
"(for-loop_460"
" fold-var_464"
"(+"
" pos_462"
" inc_459))))"
" fold-var_461))))"
" for-loop_460)"
"(void)"
" start_457)))"
"(reap-stream!_217))))"
"(let-values(((rev-shares_225)"
"(let-values(((ht_467) shares_206))"
"(begin"
"(if((lambda(ht_468)(hash? ht_468)) ht_467)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_467)))"
"((letrec-values(((for-loop_469)"
"(lambda(table_470 i_471)"
"(if i_471"
"(let-values(((obj_472)"
"(hash-iterate-key"
" ht_467"
" i_471)))"
"(let-values(((table_473)"
"(let-values(((table_474)"
" table_470))"
"(let-values(((table_475)"
"(let-values()"
"(let-values(((key_476"
" val_477)"
"(let-values()"
"(values"
"(hash-ref"
" share-step-positions_211"
"(hash-ref"
" objs_205"
" obj_472))"
" obj_472))))"
"(hash-set"
" table_474"
" key_476"
" val_477)))))"
"(values"
" table_475)))))"
"(for-loop_469"
" table_473"
"(hash-iterate-next"
" ht_467"
" i_471))))"
" table_470))))"
" for-loop_469)"
" '#hasheqv()"
"(hash-iterate-first ht_467))))))"
"(let-values(((shared-bindings_226)"
"(begin"
"(let-values(((start_478) num-mutables_210)"
"((end_479)"
"(+"
" num-mutables_210"
"(hash-count shares_206)))"
"((inc_480) 1))"
"(begin"
"(if(if(real? start_478)"
"(if(real? end_479)"
"(real? inc_480)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_478 end_479 inc_480)))"
"((letrec-values(((for-loop_481)"
"(lambda(fold-var_482"
" pos_483)"
"(if(<"
" pos_483"
" end_479)"
"(let-values(((i_484)"
" pos_483))"
"(let-values(((fold-var_485)"
"(let-values()"
"(let-values(((fold-var_487)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push-encoded!_219"
"(hash-ref"
" rev-shares_225"
" i_484)))"
"(void)))))"
"(values"
" fold-var_487)))))"
"(for-loop_481"
" fold-var_485"
"(+"
" pos_483"
" inc_480))))"
" fold-var_482))))"
" for-loop_481)"
"(void)"
" start_478)))"
"(reap-stream!_217))))"
"(let-values(((mutable-fills_227)"
"(begin"
"(let-values(((start_488) 0)"
"((end_489)"
"(hash-count mutables_204))"
"((inc_490) 1))"
"(begin"
"(if(if(real? start_488)"
"(if(real? end_489)"
"(real? inc_490)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range"
" start_488"
" end_489"
" inc_490)))"
"((letrec-values(((for-loop_491)"
"(lambda(fold-var_492"
" pos_493)"
"(if(<"
" pos_493"
" end_489)"
"(let-values(((i_494)"
" pos_493))"
"(let-values(((fold-var_495)"
"(let-values()"
"(let-values(((fold-var_497)"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell-fill!_222"
"(hash-ref"
" rev-mutables_223"
" i_494)))"
"(void)))))"
"(values"
" fold-var_497)))))"
"(for-loop_491"
" fold-var_495"
"(+"
" pos_493"
" inc_490))))"
" fold-var_492))))"
" for-loop_491)"
"(void)"
" start_488)))"
"(reap-stream!_217))))"
"(list"
" 'deserialize"
" mpi-vector-id"
"(if syntax-support?_201 inspector-id #f)"
"(if syntax-support?_201 bulk-binding-registry-id #f)"
"(list 'quote(hash-count mutables_204))"
"(list 'quote mutable-shell-bindings_224)"
"(list 'quote(hash-count shares_206))"
"(list 'quote shared-bindings_226)"
"(list 'quote mutable-fills_227)"
"(list"
" 'quote"
"(begin"
"(ser-push!_218 v_199)"
"(reap-stream!_217)))))))))))))))))))))))))))))))))))"
"(define-values"
"(sorted-hash-keys)"
"(lambda(ht_515)"
"(let-values(((ks_516)(hash-keys ht_515)))"
"(if(null? ks_516)"
"(let-values() ks_516)"
"(if(null?(cdr ks_516))"
"(let-values() ks_516)"
"(if(andmap2 symbol? ks_516)"
"(let-values()"
"(let-values(((ks14_517) ks_516)((symbol<?15_518) symbol<?))"
"(sort7.1 #f #f #f #f ks14_517 symbol<?15_518)))"
"(if(andmap2 scope? ks_516)"
"(let-values()"
"(let-values(((ks16_519) ks_516)((scope<?17_520) scope<?))"
"(sort7.1 #f #f #f #f ks16_519 scope<?17_520)))"
"(if(andmap2 shifted-multi-scope? ks_516)"
"(let-values()"
"(let-values(((ks18_521) ks_516)((shifted-multi-scope<?19_522) shifted-multi-scope<?))"
"(sort7.1 #f #f #f #f ks18_521 shifted-multi-scope<?19_522)))"
"(if(andmap2 real? ks_516)"
"(let-values()"
"(let-values(((ks20_523) ks_516)((<21_524) <))(sort7.1 #f #f #f #f ks20_523 <21_524)))"
"(let-values() ks_516))))))))))"
"(define-values"
"(deserialize)"
"(lambda(mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" num-mutables_528"
" mutable-vec_529"
" num-shared_530"
" shared-vec_531"
" mutable-fill-vec_532"
" result-vec_533)"
"(let-values(((shared_534)(make-vector(+ num-mutables_528 num-shared_530) 'uninit)))"
"(let-values((()"
"(begin"
"(let-values(((start_537) 0)((end_538) num-mutables_528)((inc_539) 1))"
"(begin"
"(if(if(real? start_537)(if(real? end_538)(real? inc_539) #f) #f)"
"(void)"
"(let-values()(in-range start_537 end_538 inc_539)))"
"((letrec-values(((for-loop_540)"
"(lambda(pos_541 pos_542)"
"(if(< pos_542 end_538)"
"(let-values(((i_543) pos_542))"
"(let-values(((pos_544)"
"(let-values(((pos_545) pos_541))"
"(let-values(((pos_546)"
"(let-values()"
"(let-values(((d_547 next-pos_548)"
"(decode-shell"
" mutable-vec_529"
" pos_545"
" mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" shared_534)))"
"(begin"
"(vector-set!"
" shared_534"
" i_543"
" d_547)"
" next-pos_548)))))"
"(values pos_546)))))"
"(for-loop_540 pos_544(+ pos_542 inc_539))))"
" pos_541))))"
" for-loop_540)"
" 0"
" start_537)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_549) num-mutables_528)"
"((end_550)(+ num-mutables_528 num-shared_530))"
"((inc_551) 1))"
"(begin"
"(if(if(real? start_549)(if(real? end_550)(real? inc_551) #f) #f)"
"(void)"
"(let-values()(in-range start_549 end_550 inc_551)))"
"((letrec-values(((for-loop_552)"
"(lambda(pos_553 pos_554)"
"(if(< pos_554 end_550)"
"(let-values(((i_555) pos_554))"
"(let-values(((pos_556)"
"(let-values(((pos_557) pos_553))"
"(let-values(((pos_558)"
"(let-values()"
"(let-values(((d_559 next-pos_560)"
"(decode"
" shared-vec_531"
" pos_557"
" mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" shared_534)))"
"(begin"
"(vector-set!"
" shared_534"
" i_555"
" d_559)"
" next-pos_560)))))"
"(values pos_558)))))"
"(for-loop_552 pos_556(+ pos_554 inc_551))))"
" pos_553))))"
" for-loop_552)"
" 0"
" start_549)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_561) 0)"
"((end_562) num-mutables_528)"
"((inc_563) 1)"
"((vec_564 len_565)"
"(let-values(((vec_566) shared_534))"
"(begin"
"(if(vector? vec_566)(void)(let-values()(in-vector vec_566)))"
"(values vec_566(unsafe-vector-length vec_566))))))"
"(begin"
"(if(if(real? start_561)(if(real? end_562)(real? inc_563) #f) #f)"
"(void)"
"(let-values()(in-range start_561 end_562 inc_563)))"
" #f"
"((letrec-values(((for-loop_567)"
"(lambda(pos_568 pos_569 pos_570)"
"(if(if(< pos_569 end_562)(unsafe-fx< pos_570 len_565) #f)"
"(let-values(((v_572)(unsafe-vector-ref vec_564 pos_570)))"
"(let-values(((pos_573)"
"(let-values(((pos_574) pos_568))"
"(let-values(((pos_575)"
"(let-values()"
"(decode-fill!"
" v_572"
" mutable-fill-vec_532"
" pos_574"
" mpis_525"
" inspector_526"
" bulk-binding-registry_527"
" shared_534))))"
"(values pos_575)))))"
"(for-loop_567"
" pos_573"
"(+ pos_569 inc_563)"
"(unsafe-fx+ 1 pos_570))))"
" pos_568))))"
" for-loop_567)"
" 0"
" start_561"
" 0)))"
"(values))))"
"(let-values(((result_535 done-pos_536)"
"(decode result-vec_533 0 mpis_525 inspector_526 bulk-binding-registry_527 shared_534)))"
" result_535)))))))"
"(define-values"
"(decode-shell)"
"(lambda(vec_576 pos_577 mpis_578 inspector_579 bulk-binding-registry_580 shared_581)"
"(let-values(((tmp_582)(vector-ref vec_576 pos_577)))"
"(if(equal? tmp_582 '#:box)"
"(let-values()(values(box #f)(add1 pos_577)))"
"(if(equal? tmp_582 '#:vector)"
"(let-values()(values(make-vector(vector-ref vec_576(add1 pos_577)))(+ pos_577 2)))"
"(if(equal? tmp_582 '#:hash)"
"(let-values()(values(make-hasheq)(add1 pos_577)))"
"(if(equal? tmp_582 '#:hasheq)"
"(let-values()(values(make-hasheq)(add1 pos_577)))"
"(if(equal? tmp_582 '#:hasheqv)"
"(let-values()(values(make-hasheqv)(add1 pos_577)))"
"(let-values()"
"(decode vec_576 pos_577 mpis_578 inspector_579 bulk-binding-registry_580 shared_581))))))))))"
"(define-values"
"(decode)"
"(lambda(vec_583 pos_584 mpis_585 inspector_586 bulk-binding-registry_587 shared_588)"
"(let-values()"
"(let-values(((tmp_650)(vector-ref vec_583 pos_584)))"
"(let-values(((index_651)"
"(if(keyword? tmp_650)"
"(hash-ref"
" '#hasheq((#:scope+kind . 17)"
"(#:seteqv . 14)"
"(#:ref . 1)"
"(#:list . 12)"
"(#:vector . 12)"
"(#:module-binding . 23)"
"(#:set . 14)"
"(#:srcloc . 7)"
"(#:very-simple-module-binding . 24)"
"(#:bulk-binding-at . 21)"
"(#:multi-scope . 18)"
"(#:hasheq . 13)"
"(#:simple-module-binding . 25)"
"(#:scope . 16)"
"(#:bulk-binding-registry . 3)"
"(#:hash . 13)"
"(#:shifted-multi-scope . 19)"
"(#:mpi . 9)"
"(#:quote . 8)"
"(#:prefab . 15)"
"(#:box . 10)"
"(#:local-binding . 26)"
"(#:bulk-binding . 27)"
"(#:inspector . 2)"
"(#:table-with-bulk-bindings . 20)"
"(#:seteq . 14)"
"(#:provided . 28)"
"(#:syntax . 4)"
"(#:cons . 11)"
"(#:hasheqv . 13)"
"(#:datum->syntax . 5)"
"(#:syntax+props . 6)"
"(#:representative-scope . 22))"
" tmp_650"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_651 14)"
"(if(unsafe-fx< index_651 6)"
"(if(unsafe-fx< index_651 2)"
"(if(unsafe-fx< index_651 1)"
"(let-values()(values(vector-ref vec_583 pos_584)(add1 pos_584)))"
"(let-values()(values(vector-ref shared_588(vector-ref vec_583(add1 pos_584)))(+ pos_584 2))))"
"(if(unsafe-fx< index_651 3)"
"(let-values()(values inspector_586(add1 pos_584)))"
"(if(unsafe-fx< index_651 4)"
"(let-values()(values bulk-binding-registry_587(add1 pos_584)))"
"(if(unsafe-fx< index_651 5)"
"(let-values()"
"(let-values(((content_652 next-pos_653)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((context_654 next-pos_655)"
"(let-values(((i_656)(vector-ref vec_583 next-pos_653)))"
"(if(exact-integer? i_656)"
"(values(vector-ref shared_588 i_656)(add1 next-pos_653))"
"(decode"
" vec_583"
" next-pos_653"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((srcloc_657 next-pos_658)"
"(let-values(((i_659)(vector-ref vec_583 next-pos_655)))"
"(if(exact-integer? i_659)"
"(values(vector-ref shared_588 i_659)(add1 next-pos_655))"
"(decode"
" vec_583"
" next-pos_655"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(values"
"(deserialize-syntax content_652 context_654 srcloc_657 #f #f inspector_586)"
" next-pos_658)))))"
"(let-values()"
"(let-values(((content_660 next-pos_661)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((context_662 next-pos_663)"
"(let-values(((i_664)(vector-ref vec_583 next-pos_661)))"
"(if(exact-integer? i_664)"
"(values(vector-ref shared_588 i_664)(add1 next-pos_661))"
"(decode"
" vec_583"
" next-pos_661"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((srcloc_665 next-pos_666)"
"(let-values(((i_667)(vector-ref vec_583 next-pos_663)))"
"(if(exact-integer? i_667)"
"(values(vector-ref shared_588 i_667)(add1 next-pos_663))"
"(decode"
" vec_583"
" next-pos_663"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(values"
"(deserialize-datum->syntax content_660 context_662 srcloc_665 inspector_586)"
" next-pos_666)))))))))"
"(if(unsafe-fx< index_651 9)"
"(if(unsafe-fx< index_651 7)"
"(let-values()"
"(let-values(((content_668 next-pos_669)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((context_670 next-pos_671)"
"(let-values(((i_672)(vector-ref vec_583 next-pos_669)))"
"(if(exact-integer? i_672)"
"(values(vector-ref shared_588 i_672)(add1 next-pos_669))"
"(decode"
" vec_583"
" next-pos_669"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((srcloc_673 next-pos_674)"
"(let-values(((i_675)(vector-ref vec_583 next-pos_671)))"
"(if(exact-integer? i_675)"
"(values(vector-ref shared_588 i_675)(add1 next-pos_671))"
"(decode"
" vec_583"
" next-pos_671"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))))"
"(let-values(((props_676 next-pos_677)"
"(decode"
" vec_583"
" next-pos_674"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((tamper_678 next-pos_679)"
"(decode"
" vec_583"
" next-pos_677"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-syntax"
" content_668"
" context_670"
" srcloc_673"
" props_676"
" tamper_678"
" inspector_586)"
" next-pos_679)))))))"
"(if(unsafe-fx< index_651 8)"
"(let-values()"
"(let-values(((source_680 next-pos_681)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((line_682 next-pos_683)"
"(decode"
" vec_583"
" next-pos_681"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((column_684 next-pos_685)"
"(decode"
" vec_583"
" next-pos_683"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((position_686 next-pos_687)"
"(decode"
" vec_583"
" next-pos_685"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((span_688 next-pos_689)"
"(decode"
" vec_583"
" next-pos_687"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(srcloc source_680 line_682 column_684 position_686 span_688)"
" next-pos_689)))))))"
"(let-values()(values(vector-ref vec_583(add1 pos_584))(+ pos_584 2)))))"
"(if(unsafe-fx< index_651 11)"
"(if(unsafe-fx< index_651 10)"
"(let-values()(values(vector-ref mpis_585(vector-ref vec_583(add1 pos_584)))(+ pos_584 2)))"
"(let-values()"
"(let-values(((v_690 next-pos_691)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(box-immutable v_690) next-pos_691))))"
"(if(unsafe-fx< index_651 12)"
"(let-values()"
"(let-values(((a_692 next-pos_693)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((d_694 next-pos_695)"
"(decode"
" vec_583"
" next-pos_693"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(cons a_692 d_694) next-pos_695))))"
"(if(unsafe-fx< index_651 13)"
"(let-values()"
"(let-values(((len_696)(vector-ref vec_583(add1 pos_584))))"
"(let-values(((r_697)(make-vector len_696)))"
"(let-values(((next-pos_698)"
"(let-values(((start_699) 0)((end_700) len_696)((inc_701) 1))"
"(begin"
"(if(if(real? start_699)(if(real? end_700)(real? inc_701) #f) #f)"
"(void)"
"(let-values()(in-range start_699 end_700 inc_701)))"
"((letrec-values(((for-loop_702)"
"(lambda(pos_703 pos_704)"
"(if(< pos_704 end_700)"
"(let-values(((i_705) pos_704))"
"(let-values(((pos_706)"
"(let-values(((pos_707) pos_703))"
"(let-values(((pos_708)"
"(let-values()"
"(let-values(((v_709"
" next-pos_710)"
"(let-values(((v_711"
" next-pos_712)"
"(decode"
" vec_583"
" pos_707"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
" v_711"
" next-pos_712))))"
"(begin"
"(vector-set!"
" r_697"
" i_705"
" v_709)"
" next-pos_710)))))"
"(values pos_708)))))"
"(for-loop_702 pos_706(+ pos_704 inc_701))))"
" pos_703))))"
" for-loop_702)"
"(+ pos_584 2)"
" start_699)))))"
"(values"
"(if(eq?(vector-ref vec_583 pos_584) '#:list)"
"(vector->list r_697)"
"(vector->immutable-vector r_697))"
" next-pos_698)))))"
"(let-values()"
"(let-values(((ht_713)"
"(let-values(((tmp_715)(vector-ref vec_583 pos_584)))"
"(if(equal? tmp_715 '#:hash)"
"(let-values()(hash))"
"(if(equal? tmp_715 '#:hasheq)"
"(let-values()(hasheq))"
"(if(equal? tmp_715 '#:hasheqv)"
"(let-values()(hasheqv))"
"(let-values()(void))))))))"
"(let-values(((len_714)(vector-ref vec_583(add1 pos_584))))"
"(let-values(((start_716) 0)((end_717) len_714)((inc_718) 1))"
"(begin"
"(if(if(real? start_716)(if(real? end_717)(real? inc_718) #f) #f)"
"(void)"
"(let-values()(in-range start_716 end_717 inc_718)))"
"((letrec-values(((for-loop_719)"
"(lambda(ht_720 pos_721 pos_722)"
"(if(< pos_722 end_717)"
"(let-values()"
"(let-values(((ht_724 pos_725)"
"(let-values(((ht_726) ht_720)"
"((pos_727) pos_721))"
"(let-values(((ht_728 pos_729)"
"(let-values()"
"(let-values(((k_730"
" next-pos_731)"
"(decode"
" vec_583"
" pos_727"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((v_732"
" next-pos_733)"
"(decode"
" vec_583"
" next-pos_731"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(hash-set"
" ht_726"
" k_730"
" v_732)"
" next-pos_733))))))"
"(values ht_728 pos_729)))))"
"(for-loop_719 ht_724 pos_725(+ pos_722 inc_718))))"
"(values ht_720 pos_721)))))"
" for-loop_719)"
" ht_713"
"(+ pos_584 2)"
" start_716)))))))))))"
"(if(unsafe-fx< index_651 21)"
"(if(unsafe-fx< index_651 17)"
"(if(unsafe-fx< index_651 15)"
"(let-values()"
"(let-values(((s_734)"
"(let-values(((tmp_736)(vector-ref vec_583 pos_584)))"
"(if(equal? tmp_736 '#:set)"
"(let-values()(set))"
"(if(equal? tmp_736 '#:seteq)"
"(let-values()(seteq))"
"(if(equal? tmp_736 '#:seteqv)"
"(let-values()(seteqv))"
"(let-values()(void))))))))"
"(let-values(((len_735)(vector-ref vec_583(add1 pos_584))))"
"(let-values(((start_737) 0)((end_738) len_735)((inc_739) 1))"
"(begin"
"(if(if(real? start_737)(if(real? end_738)(real? inc_739) #f) #f)"
"(void)"
"(let-values()(in-range start_737 end_738 inc_739)))"
"((letrec-values(((for-loop_740)"
"(lambda(s_741 pos_742 pos_743)"
"(if(< pos_743 end_738)"
"(let-values()"
"(let-values(((s_745 pos_746)"
"(let-values(((s_747) s_741)((pos_748) pos_742))"
"(let-values(((s_749 pos_750)"
"(let-values()"
"(let-values(((k_751 next-pos_752)"
"(decode"
" vec_583"
" pos_748"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(set-add s_747 k_751)"
" next-pos_752)))))"
"(values s_749 pos_750)))))"
"(for-loop_740 s_745 pos_746(+ pos_743 inc_739))))"
"(values s_741 pos_742)))))"
" for-loop_740)"
" s_734"
"(+ pos_584 2)"
" start_737))))))"
"(if(unsafe-fx< index_651 16)"
"(let-values()"
"(let-values(((key_753 next-pos_754)"
"(let-values(((k_758 next-pos_759)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values k_758 next-pos_759))))"
"(let-values(((len_755)(vector-ref vec_583 next-pos_754)))"
"(let-values(((r_756 done-pos_757)"
"(let-values(((start_760) 0)((end_761) len_755)((inc_762) 1))"
"(begin"
"(if(if(real? start_760)(if(real? end_761)(real? inc_762) #f) #f)"
"(void)"
"(let-values()(in-range start_760 end_761 inc_762)))"
"((letrec-values(((for-loop_763)"
"(lambda(r_764 pos_765 pos_766)"
"(if(< pos_766 end_761)"
"(let-values()"
"(let-values(((r_768 pos_769)"
"(let-values(((r_770) r_764)"
"((pos_771) pos_765))"
"(let-values(((r_772 pos_773)"
"(let-values()"
"(let-values(((v_774"
" next-pos_775)"
"(decode"
" vec_583"
" pos_771"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(cons"
" v_774"
" r_770)"
" next-pos_775)))))"
"(values r_772 pos_773)))))"
"(for-loop_763 r_768 pos_769(+ pos_766 inc_762))))"
"(values r_764 pos_765)))))"
" for-loop_763)"
" null"
"(add1 next-pos_754)"
" start_760)))))"
"(values(apply make-prefab-struct key_753(alt-reverse r_756)) done-pos_757)))))"
"(let-values()(values(deserialize-scope)(add1 pos_584)))))"
"(if(unsafe-fx< index_651 18)"
"(let-values()"
"(let-values(((kind_776 next-pos_777)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-scope kind_776) next-pos_777)))"
"(if(unsafe-fx< index_651 19)"
"(let-values()"
"(let-values(((name_778 next-pos_779)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((scopes_780 next-pos_781)"
"(decode"
" vec_583"
" next-pos_779"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-multi-scope name_778 scopes_780) next-pos_781))))"
"(if(unsafe-fx< index_651 20)"
"(let-values()"
"(let-values(((phase_782 next-pos_783)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((multi-scope_784 next-pos_785)"
"(decode"
" vec_583"
" next-pos_783"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-shifted-multi-scope phase_782 multi-scope_784) next-pos_785))))"
"(let-values()"
"(let-values(((syms_786 next-pos_787)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((bulk-bindings_788 next-pos_789)"
"(decode"
" vec_583"
" next-pos_787"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-table-with-bulk-bindings syms_786 bulk-bindings_788)"
" next-pos_789))))))))"
"(if(unsafe-fx< index_651 24)"
"(if(unsafe-fx< index_651 22)"
"(let-values()"
"(let-values(((scopes_790 next-pos_791)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((bulk_792 next-pos_793)"
"(decode"
" vec_583"
" next-pos_791"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-bulk-binding-at scopes_790 bulk_792) next-pos_793))))"
"(if(unsafe-fx< index_651 23)"
"(let-values()"
"(let-values(((kind_794 next-pos_795)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase_796 next-pos_797)"
"(decode"
" vec_583"
" next-pos_795"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-representative-scope kind_794 phase_796) next-pos_797))))"
"(let-values()"
"(let-values(((module_798 next-pos_799)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((sym_800 next-pos_801)"
"(decode"
" vec_583"
" next-pos_799"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase_802 next-pos_803)"
"(decode"
" vec_583"
" next-pos_801"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-module_804 next-pos_805)"
"(decode"
" vec_583"
" next-pos_803"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-phase_806 next-pos_807)"
"(decode"
" vec_583"
" next-pos_805"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-sym_808 next-pos_809)"
"(decode"
" vec_583"
" next-pos_807"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-require-phase_810 next-pos_811)"
"(decode"
" vec_583"
" next-pos_809"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((free=id_812 next-pos_813)"
"(decode"
" vec_583"
" next-pos_811"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((extra-inspector_814 next-pos_815)"
"(decode"
" vec_583"
" next-pos_813"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((extra-nominal-bindings_816 next-pos_817)"
"(decode"
" vec_583"
" next-pos_815"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-full-module-binding"
" module_798"
" sym_800"
" phase_802"
" nominal-module_804"
" nominal-phase_806"
" nominal-sym_808"
" nominal-require-phase_810"
" free=id_812"
" extra-inspector_814"
" extra-nominal-bindings_816)"
" next-pos_817))))))))))))))"
"(if(unsafe-fx< index_651 26)"
"(if(unsafe-fx< index_651 25)"
"(let-values()"
"(let-values(((module_818 next-pos_819)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((sym_820 next-pos_821)"
"(decode"
" vec_583"
" next-pos_819"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-very-simple-module-binding module_818 sym_820) next-pos_821))))"
"(let-values()"
"(let-values(((module_822 next-pos_823)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((sym_824 next-pos_825)"
"(decode"
" vec_583"
" next-pos_823"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase_826 next-pos_827)"
"(decode"
" vec_583"
" next-pos_825"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((nominal-module_828 next-pos_829)"
"(decode"
" vec_583"
" next-pos_827"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-simple-module-binding module_822 sym_824 phase_826 nominal-module_828)"
" next-pos_829)))))))"
"(if(unsafe-fx< index_651 27)"
"(let-values()"
"(let-values(((key_830 next-pos_831)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((free=id_832 next-pos_833)"
"(decode"
" vec_583"
" next-pos_831"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values(deserialize-full-local-binding key_830 free=id_832) next-pos_833))))"
"(if(unsafe-fx< index_651 28)"
"(let-values()"
"(let-values(((prefix_834 next-pos_835)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((excepts_836 next-pos_837)"
"(decode"
" vec_583"
" next-pos_835"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((mpi_838 next-pos_839)"
"(decode"
" vec_583"
" next-pos_837"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((provide-phase-level_840 next-pos_841)"
"(decode"
" vec_583"
" next-pos_839"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((phase-shift_842 next-pos_843)"
"(decode"
" vec_583"
" next-pos_841"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((bulk-binding-registry_844 next-pos_845)"
"(decode"
" vec_583"
" next-pos_843"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-bulk-binding"
" prefix_834"
" excepts_836"
" mpi_838"
" provide-phase-level_840"
" phase-shift_842"
" bulk-binding-registry_844)"
" next-pos_845))))))))"
"(let-values()"
"(let-values(((binding_846 next-pos_847)"
"(decode"
" vec_583"
"(add1 pos_584)"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((protected?_848 next-pos_849)"
"(decode"
" vec_583"
" next-pos_847"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(let-values(((syntax?_850 next-pos_851)"
"(decode"
" vec_583"
" next-pos_849"
" mpis_585"
" inspector_586"
" bulk-binding-registry_587"
" shared_588)))"
"(values"
"(deserialize-provided binding_846 protected?_848 syntax?_850)"
" next-pos_851))))))))))))))))"
"(define-values"
"(decode-fill!)"
"(lambda(v_852 vec_853 pos_854 mpis_855 inspector_856 bulk-binding-registry_857 shared_858)"
"(let-values(((tmp_859)(vector-ref vec_853 pos_854)))"
"(if(equal? tmp_859 #f)"
"(let-values()(add1 pos_854))"
"(if(equal? tmp_859 '#:set-box!)"
"(let-values()"
"(let-values(((c_860 next-pos_861)"
"(decode vec_853(add1 pos_854) mpis_855 inspector_856 bulk-binding-registry_857 shared_858)))"
"(begin(set-box! v_852 c_860) next-pos_861)))"
"(if(equal? tmp_859 '#:set-vector!)"
"(let-values()"
"(let-values(((len_862)(vector-ref vec_853(add1 pos_854))))"
"(let-values(((start_863) 0)((end_864) len_862)((inc_865) 1))"
"(begin"
"(if(if(real? start_863)(if(real? end_864)(real? inc_865) #f) #f)"
"(void)"
"(let-values()(in-range start_863 end_864 inc_865)))"
"((letrec-values(((for-loop_866)"
"(lambda(pos_867 pos_868)"
"(if(< pos_868 end_864)"
"(let-values(((i_869) pos_868))"
"(let-values(((pos_870)"
"(let-values(((pos_871) pos_867))"
"(let-values(((pos_872)"
"(let-values()"
"(let-values(((c_873 next-pos_874)"
"(decode"
" vec_853"
" pos_871"
" mpis_855"
" inspector_856"
" bulk-binding-registry_857"
" shared_858)))"
"(begin"
"(vector-set! v_852 i_869 c_873)"
" next-pos_874)))))"
"(values pos_872)))))"
"(for-loop_866 pos_870(+ pos_868 inc_865))))"
" pos_867))))"
" for-loop_866)"
"(+ pos_854 2)"
" start_863)))))"
"(if(equal? tmp_859 '#:set-hash!)"
"(let-values()"
"(let-values(((len_875)(vector-ref vec_853(add1 pos_854))))"
"(let-values(((start_876) 0)((end_877) len_875)((inc_878) 1))"
"(begin"
"(if(if(real? start_876)(if(real? end_877)(real? inc_878) #f) #f)"
"(void)"
"(let-values()(in-range start_876 end_877 inc_878)))"
"((letrec-values(((for-loop_879)"
"(lambda(pos_880 pos_881)"
"(if(< pos_881 end_877)"
"(let-values()"
"(let-values(((pos_883)"
"(let-values(((pos_884) pos_880))"
"(let-values(((pos_885)"
"(let-values()"
"(let-values(((key_886 next-pos_887)"
"(decode"
" vec_853"
" pos_884"
" mpis_855"
" inspector_856"
" bulk-binding-registry_857"
" shared_858)))"
"(let-values(((val_888 done-pos_889)"
"(decode"
" vec_853"
" next-pos_887"
" mpis_855"
" inspector_856"
" bulk-binding-registry_857"
" shared_858)))"
"(begin"
"(hash-set! v_852 key_886 val_888)"
" done-pos_889))))))"
"(values pos_885)))))"
"(for-loop_879 pos_883(+ pos_881 inc_878))))"
" pos_880))))"
" for-loop_879)"
"(+ pos_854 2)"
" start_876)))))"
"(if(equal? tmp_859 '#:scope-fill!)"
"(let-values()"
"(let-values(((c_890 next-pos_891)"
"(decode"
" vec_853"
"(add1 pos_854)"
" mpis_855"
" inspector_856"
" bulk-binding-registry_857"
" shared_858)))"
"(begin(deserialize-scope-fill! v_852 c_890) next-pos_891)))"
"(if(equal? tmp_859 '#:representative-scope-fill!)"
"(let-values()"
"(let-values(((a_892 next-pos_893)"
"(decode"
" vec_853"
"(add1 pos_854)"
" mpis_855"
" inspector_856"
" bulk-binding-registry_857"
" shared_858)))"
"(let-values(((d_894 done-pos_895)"
"(decode"
" vec_853"
" next-pos_893"
" mpis_855"
" inspector_856"
" bulk-binding-registry_857"
" shared_858)))"
"(begin(deserialize-representative-scope-fill! v_852 a_892 d_894) done-pos_895))))"
"                  (let-values () (error 'deserialize \"bad fill encoding: ~v\" (vector-ref vec_853 pos_854))))))))))))"
"(define-values"
"(find-reachable-scopes)"
"(lambda(v_896)"
"(let-values(((seen_897)(make-hasheq)))"
"(let-values(((reachable-scopes_898)(seteq)))"
"(let-values(((scope-triggers_899)(make-hasheq)))"
"(begin"
"((letrec-values(((loop_900)"
"(lambda(v_901)"
"(if(interned-literal? v_901)"
"(let-values()(void))"
"(if(hash-ref seen_897 v_901 #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(hash-set! seen_897 v_901 #t)"
"(if(scope-with-bindings? v_901)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! reachable-scopes_898"
"(set-add reachable-scopes_898 v_901))"
"(values))))"
"(let-values((()"
"(begin((reach-scopes-ref v_901) v_901 loop_900)(values))))"
"(let-values(((l_902)(hash-ref scope-triggers_899 v_901 null)))"
"(begin"
"(let-values(((lst_903) l_902))"
"(begin"
"(if(list? lst_903)(void)(let-values()(in-list lst_903)))"
"((letrec-values(((for-loop_904)"
"(lambda(fold-var_905 lst_906)"
"(if(pair? lst_906)"
"(let-values(((v_907)"
"(unsafe-car lst_906)))"
"(let-values(((fold-var_908)"
"(let-values()"
"(let-values(((fold-var_910)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_900"
" v_907))"
"(void)))))"
"(values"
" fold-var_910)))))"
"(for-loop_904"
" fold-var_908"
"(unsafe-cdr lst_906))))"
" fold-var_905))))"
" for-loop_904)"
"(void)"
" lst_903)))"
"((scope-with-bindings-ref v_901)"
" v_901"
" reachable-scopes_898"
" loop_900"
"(lambda(sc-unreachable_911 b_912)"
"(hash-update!"
" scope-triggers_899"
" sc-unreachable_911"
"(lambda(l_913)(cons b_912 l_913))"
" null))))))))"
"(if(reach-scopes? v_901)"
"(let-values()((reach-scopes-ref v_901) v_901 loop_900))"
"(if(pair? v_901)"
"(let-values()(begin(loop_900(car v_901))(loop_900(cdr v_901))))"
"(if(vector? v_901)"
"(let-values()"
"(let-values(((vec_914 len_915)"
"(let-values(((vec_916) v_901))"
"(begin"
"(if(vector? vec_916)"
"(void)"
"(let-values()(in-vector vec_916)))"
"(values vec_916(unsafe-vector-length vec_916))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_917)"
"(lambda(fold-var_918 pos_919)"
"(if(unsafe-fx< pos_919 len_915)"
"(let-values(((e_920)"
"(unsafe-vector-ref"
" vec_914"
" pos_919)))"
"(let-values(((fold-var_921)"
"(let-values()"
"(let-values(((fold-var_923)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_900"
" e_920))"
"(void)))))"
"(values"
" fold-var_923)))))"
"(for-loop_917"
" fold-var_921"
"(unsafe-fx+ 1 pos_919))))"
" fold-var_918))))"
" for-loop_917)"
"(void)"
" 0))))"
"(if(box? v_901)"
"(let-values()(loop_900(unbox v_901)))"
"(if(hash? v_901)"
"(let-values()"
"(let-values(((ht_924) v_901))"
"(begin"
"(if((lambda(ht_925)(hash? ht_925)) ht_924)"
"(void)"
"(let-values()(default-in-hash ht_924)))"
"((letrec-values(((for-loop_926)"
"(lambda(fold-var_927 i_928)"
"(if i_928"
"(let-values(((k_929 v_930)"
"(hash-iterate-key+value"
" ht_924"
" i_928)))"
"(let-values(((fold-var_931)"
"(let-values()"
"(let-values(((fold-var_933)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_900"
" k_929)"
"(loop_900"
" v_930)))"
"(void)))))"
"(values"
" fold-var_933)))))"
"(for-loop_926"
" fold-var_931"
"(hash-iterate-next ht_924 i_928))))"
" fold-var_927))))"
" for-loop_926)"
"(void)"
"(hash-iterate-first ht_924)))))"
"(if(prefab-struct-key v_901)"
"(let-values()"
"(let-values(((v*_934 start*_935 stop*_936 step*_937)"
"(normalise-inputs"
" 'in-vector"
"                                                                       \"vector\""
"(lambda(x_938)(vector? x_938))"
"(lambda(x_939)(unsafe-vector-length x_939))"
"(struct->vector v_901)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_940)"
"(lambda(fold-var_941 idx_942)"
"(if(unsafe-fx< idx_942 stop*_936)"
"(let-values(((e_943)"
"(unsafe-vector-ref"
" v*_934"
" idx_942)))"
"(let-values(((fold-var_944)"
"(let-values()"
"(let-values(((fold-var_946)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_900"
" e_943))"
"(void)))))"
"(values"
" fold-var_946)))))"
"(for-loop_940"
" fold-var_944"
"(unsafe-fx+ idx_942 1))))"
" fold-var_941))))"
" for-loop_940)"
"(void)"
" start*_935))))"
"(let-values()(void))))))))))))))))"
" loop_900)"
" v_896)"
" reachable-scopes_898))))))"
"(define-values"
"(deserialize-imports)"
" '(deserialize-module-path-indexes syntax-module-path-index-shift syntax-shift-phase-level module-use deserialize))"
"(define-values"
"(deserialize-instance)"
"(1/make-instance"
" 'deserialize"
" #f"
" 'deserialize-module-path-indexes"
" deserialize-module-path-indexes"
" 'syntax-module-path-index-shift"
" syntax-module-path-index-shift17.1"
" 'syntax-shift-phase-level"
" syntax-shift-phase-level$1"
" 'module-use"
" module-use1.1"
" 'deserialize"
" deserialize))"
"(void)"
"(void)"
"(define-values"
"(struct:parsed parsed1.1 parsed? parsed-s)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()(let-values()(make-struct-type 'parsed #f 1 0 #f null #f #f '(0) #f 'parsed)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 's))))"
"(define-values"
"(struct:parsed-id parsed-id2.1 parsed-id? parsed-id-binding parsed-id-inspector)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-id"
" struct:parsed"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-id)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'binding)"
"(make-struct-field-accessor -ref_24 1 'inspector))))"
"(define-values"
"(struct:parsed-primitive-id parsed-primitive-id3.1 parsed-primitive-id?)"
"(let-values(((struct:_46 make-_47 ?_48 -ref_49 -set!_50)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-primitive-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-primitive-id)))))"
"(values struct:_46 make-_47 ?_48)))"
"(define-values"
"(struct:parsed-top-id parsed-top-id4.1 parsed-top-id?)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-top-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-top-id)))))"
"(values struct:_61 make-_62 ?_63)))"
"(define-values"
"(struct:parsed-lambda parsed-lambda5.1 parsed-lambda? parsed-lambda-keys parsed-lambda-body)"
"(let-values(((struct:_76 make-_77 ?_78 -ref_79 -set!_80)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-lambda"
" struct:parsed"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-lambda)))))"
"(values"
" struct:_76"
" make-_77"
" ?_78"
"(make-struct-field-accessor -ref_79 0 'keys)"
"(make-struct-field-accessor -ref_79 1 'body))))"
"(define-values"
"(struct:parsed-case-lambda parsed-case-lambda6.1 parsed-case-lambda? parsed-case-lambda-clauses)"
"(let-values(((struct:_101 make-_102 ?_103 -ref_104 -set!_105)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-case-lambda"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-case-lambda)))))"
"(values struct:_101 make-_102 ?_103(make-struct-field-accessor -ref_104 0 'clauses))))"
"(define-values"
"(struct:parsed-app parsed-app7.1 parsed-app? parsed-app-rator+rands)"
"(let-values(((struct:_121 make-_122 ?_123 -ref_124 -set!_125)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-app"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-app)))))"
"(values struct:_121 make-_122 ?_123(make-struct-field-accessor -ref_124 0 'rator+rands))))"
"(define-values"
"(struct:parsed-if parsed-if8.1 parsed-if? parsed-if-tst parsed-if-thn parsed-if-els)"
"(let-values(((struct:_141 make-_142 ?_143 -ref_144 -set!_145)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-if"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-if)))))"
"(values"
" struct:_141"
" make-_142"
" ?_143"
"(make-struct-field-accessor -ref_144 0 'tst)"
"(make-struct-field-accessor -ref_144 1 'thn)"
"(make-struct-field-accessor -ref_144 2 'els))))"
"(define-values"
"(struct:parsed-set! parsed-set!9.1 parsed-set!? parsed-set!-id parsed-set!-rhs)"
"(let-values(((struct:_171 make-_172 ?_173 -ref_174 -set!_175)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-set!"
" struct:parsed"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-set!)))))"
"(values"
" struct:_171"
" make-_172"
" ?_173"
"(make-struct-field-accessor -ref_174 0 'id)"
"(make-struct-field-accessor -ref_174 1 'rhs))))"
"(define-values"
"(struct:parsed-with-continuation-mark"
" parsed-with-continuation-mark10.1"
" parsed-with-continuation-mark?"
" parsed-with-continuation-mark-key"
" parsed-with-continuation-mark-val"
" parsed-with-continuation-mark-body)"
"(let-values(((struct:_196 make-_197 ?_198 -ref_199 -set!_200)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-with-continuation-mark"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-with-continuation-mark)))))"
"(values"
" struct:_196"
" make-_197"
" ?_198"
"(make-struct-field-accessor -ref_199 0 'key)"
"(make-struct-field-accessor -ref_199 1 'val)"
"(make-struct-field-accessor -ref_199 2 'body))))"
"(define-values"
"(struct:parsed-#%variable-reference"
" parsed-#%variable-reference11.1"
" parsed-#%variable-reference?"
" parsed-#%variable-reference-id)"
"(let-values(((struct:_226 make-_227 ?_228 -ref_229 -set!_230)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%variable-reference"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%variable-reference)))))"
"(values struct:_226 make-_227 ?_228(make-struct-field-accessor -ref_229 0 'id))))"
"(define-values"
"(struct:parsed-begin parsed-begin12.1 parsed-begin? parsed-begin-body)"
"(let-values(((struct:_246 make-_247 ?_248 -ref_249 -set!_250)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin)))))"
"(values struct:_246 make-_247 ?_248(make-struct-field-accessor -ref_249 0 'body))))"
"(define-values"
"(struct:parsed-begin0 parsed-begin013.1 parsed-begin0? parsed-begin0-body)"
"(let-values(((struct:_266 make-_267 ?_268 -ref_269 -set!_270)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin0"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin0)))))"
"(values struct:_266 make-_267 ?_268(make-struct-field-accessor -ref_269 0 'body))))"
"(define-values"
"(struct:parsed-quote parsed-quote14.1 parsed-quote? parsed-quote-datum)"
"(let-values(((struct:_286 make-_287 ?_288 -ref_289 -set!_290)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote)))))"
"(values struct:_286 make-_287 ?_288(make-struct-field-accessor -ref_289 0 'datum))))"
"(define-values"
"(struct:parsed-quote-syntax parsed-quote-syntax15.1 parsed-quote-syntax? parsed-quote-syntax-datum)"
"(let-values(((struct:_306 make-_307 ?_308 -ref_309 -set!_310)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote-syntax)))))"
"(values struct:_306 make-_307 ?_308(make-struct-field-accessor -ref_309 0 'datum))))"
"(define-values"
"(struct:parsed-let_-values"
" parsed-let_-values16.1"
" parsed-let_-values?"
" parsed-let_-values-idss"
" parsed-let_-values-clauses"
" parsed-let_-values-body)"
"(let-values(((struct:_326 make-_327 ?_328 -ref_329 -set!_330)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let_-values"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-let_-values)))))"
"(values"
" struct:_326"
" make-_327"
" ?_328"
"(make-struct-field-accessor -ref_329 0 'idss)"
"(make-struct-field-accessor -ref_329 1 'clauses)"
"(make-struct-field-accessor -ref_329 2 'body))))"
"(define-values"
"(struct:parsed-let-values parsed-let-values17.1 parsed-let-values?)"
"(let-values(((struct:_356 make-_357 ?_358 -ref_359 -set!_360)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-let-values)))))"
"(values struct:_356 make-_357 ?_358)))"
"(define-values"
"(struct:parsed-letrec-values parsed-letrec-values18.1 parsed-letrec-values?)"
"(let-values(((struct:_371 make-_372 ?_373 -ref_374 -set!_375)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-letrec-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-letrec-values)))))"
"(values struct:_371 make-_372 ?_373)))"
"(define-values"
"(struct:parsed-define-values"
" parsed-define-values19.1"
" parsed-define-values?"
" parsed-define-values-ids"
" parsed-define-values-syms"
" parsed-define-values-rhs)"
"(let-values(((struct:_386 make-_387 ?_388 -ref_389 -set!_390)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-values"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-values)))))"
"(values"
" struct:_386"
" make-_387"
" ?_388"
"(make-struct-field-accessor -ref_389 0 'ids)"
"(make-struct-field-accessor -ref_389 1 'syms)"
"(make-struct-field-accessor -ref_389 2 'rhs))))"
"(define-values"
"(struct:parsed-define-syntaxes"
" parsed-define-syntaxes20.1"
" parsed-define-syntaxes?"
" parsed-define-syntaxes-ids"
" parsed-define-syntaxes-syms"
" parsed-define-syntaxes-rhs)"
"(let-values(((struct:_416 make-_417 ?_418 -ref_419 -set!_420)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-syntaxes"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-syntaxes)))))"
"(values"
" struct:_416"
" make-_417"
" ?_418"
"(make-struct-field-accessor -ref_419 0 'ids)"
"(make-struct-field-accessor -ref_419 1 'syms)"
"(make-struct-field-accessor -ref_419 2 'rhs))))"
"(define-values"
"(struct:parsed-begin-for-syntax parsed-begin-for-syntax21.1 parsed-begin-for-syntax? parsed-begin-for-syntax-body)"
"(let-values(((struct:_446 make-_447 ?_448 -ref_449 -set!_450)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin-for-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin-for-syntax)))))"
"(values struct:_446 make-_447 ?_448(make-struct-field-accessor -ref_449 0 'body))))"
"(define-values"
"(struct:parsed-#%declare parsed-#%declare22.1 parsed-#%declare?)"
"(let-values(((struct:_466 make-_467 ?_468 -ref_469 -set!_470)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%declare"
" struct:parsed"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-#%declare)))))"
"(values struct:_466 make-_467 ?_468)))"
"(define-values"
"(struct:parsed-require parsed-require23.1 parsed-require?)"
"(let-values(((struct:_481 make-_482 ?_483 -ref_484 -set!_485)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-require"
" struct:parsed"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-require)))))"
"(values struct:_481 make-_482 ?_483)))"
"(define-values"
"(struct:parsed-#%module-begin parsed-#%module-begin24.1 parsed-#%module-begin? parsed-#%module-begin-body)"
"(let-values(((struct:_496 make-_497 ?_498 -ref_499 -set!_500)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%module-begin"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%module-begin)))))"
"(values struct:_496 make-_497 ?_498(make-struct-field-accessor -ref_499 0 'body))))"
"(define-values"
"(struct:parsed-module"
" parsed-module25.1"
" parsed-module?"
" parsed-module-star?"
" parsed-module-name-id"
" parsed-module-self"
" parsed-module-requires"
" parsed-module-provides"
" parsed-module-root-ctx-simple?"
" parsed-module-encoded-root-ctx"
" parsed-module-body"
" parsed-module-compiled-module"
" parsed-module-compiled-submodules)"
"(let-values(((struct:_516 make-_517 ?_518 -ref_519 -set!_520)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-module"
" struct:parsed"
" 10"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9)"
" #f"
" 'parsed-module)))))"
"(values"
" struct:_516"
" make-_517"
" ?_518"
"(make-struct-field-accessor -ref_519 0 'star?)"
"(make-struct-field-accessor -ref_519 1 'name-id)"
"(make-struct-field-accessor -ref_519 2 'self)"
"(make-struct-field-accessor -ref_519 3 'requires)"
"(make-struct-field-accessor -ref_519 4 'provides)"
"(make-struct-field-accessor -ref_519 5 'root-ctx-simple?)"
"(make-struct-field-accessor -ref_519 6 'encoded-root-ctx)"
"(make-struct-field-accessor -ref_519 7 'body)"
"(make-struct-field-accessor -ref_519 8 'compiled-module)"
"(make-struct-field-accessor -ref_519 9 'compiled-submodules))))"
"(void)"
"(void)"
"(define-values"
"(struct:compiled-in-memory"
" compiled-in-memory1.1"
" compiled-in-memory?"
" compiled-in-memory-linklet-directory"
" compiled-in-memory-original-self"
" compiled-in-memory-requires"
" compiled-in-memory-provides"
" compiled-in-memory-phase-to-link-module-uses"
" compiled-in-memory-compile-time-inspector"
" compiled-in-memory-phase-to-link-extra-inspectorsss"
" compiled-in-memory-mpis"
" compiled-in-memory-syntax-literals"
" compiled-in-memory-pre-compiled-in-memorys"
" compiled-in-memory-post-compiled-in-memorys"
" compiled-in-memory-namespace-scopes"
" compiled-in-memory-purely-functional?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compiled-in-memory"
" #f"
" 13"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(cim_84 port_85 mode_86)(write(compiled-in-memory-linklet-directory cim_84) port_85))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12)"
" #f"
" 'compiled-in-memory)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'linklet-directory)"
"(make-struct-field-accessor -ref_4 1 'original-self)"
"(make-struct-field-accessor -ref_4 2 'requires)"
"(make-struct-field-accessor -ref_4 3 'provides)"
"(make-struct-field-accessor -ref_4 4 'phase-to-link-module-uses)"
"(make-struct-field-accessor -ref_4 5 'compile-time-inspector)"
"(make-struct-field-accessor -ref_4 6 'phase-to-link-extra-inspectorsss)"
"(make-struct-field-accessor -ref_4 7 'mpis)"
"(make-struct-field-accessor -ref_4 8 'syntax-literals)"
"(make-struct-field-accessor -ref_4 9 'pre-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 10 'post-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 11 'namespace-scopes)"
"(make-struct-field-accessor -ref_4 12 'purely-functional?))))"
"(void)"
"(void)"
"(define-values"
"(struct:namespace-scopes namespace-scopes1.1 namespace-scopes? namespace-scopes-post namespace-scopes-other)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type 'namespace-scopes #f 2 0 #f null 'prefab #f '(0 1) #f 'namespace-scopes)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'post)"
"(make-struct-field-accessor -ref_4 1 'other))))"
"(define-values"
"(swap-top-level-scopes)"
"(lambda(s_26 original-scopes-s_27 new-ns_28)"
"(let-values(((old-scs-post_29 old-scs-other_30)"
"(if(namespace-scopes? original-scopes-s_27)"
"(values(namespace-scopes-post original-scopes-s_27)(namespace-scopes-other original-scopes-s_27))"
"(decode-namespace-scopes original-scopes-s_27))))"
"(let-values(((new-scs-post_31 new-scs-other_32)(extract-namespace-scopes/values new-ns_28)))"
"(syntax-swap-scopes"
"(syntax-swap-scopes s_26 old-scs-post_29 new-scs-post_31)"
" old-scs-other_30"
" new-scs-other_32)))))"
"(define-values"
"(extract-namespace-scopes/values)"
"(lambda(ns_33)"
"(let-values(((root-ctx_34)(namespace-get-root-expand-ctx ns_33)))"
"(let-values(((post-expansion-sc_35)(root-expand-context-post-expansion-scope root-ctx_34)))"
"(values"
"(seteq post-expansion-sc_35)"
"(set-remove(list->seteq(root-expand-context-module-scopes root-ctx_34)) post-expansion-sc_35))))))"
"(define-values"
"(extract-namespace-scopes)"
"(lambda(ns_36)"
"(let-values(((scs-post_37 scs-other_38)(extract-namespace-scopes/values ns_36)))"
"(namespace-scopes1.1 scs-post_37 scs-other_38))))"
"(define-values"
"(encode-namespace-scopes)"
"(lambda(ns_39)"
"(let-values(((post-expansion-scs_40 other-scs_41)(extract-namespace-scopes/values ns_39)))"
"(let-values(((post-expansion-s_42)(add-scopes(datum->syntax$1 #f 'post)(set->list post-expansion-scs_40))))"
"(let-values(((other-s_43)(add-scopes(datum->syntax$1 #f 'other)(set->list other-scs_41))))"
"(datum->syntax$1 #f(vector post-expansion-s_42 other-s_43)))))))"
"(define-values"
"(decode-namespace-scopes)"
"(lambda(stx_44)"
"(let-values(((vec_45)(syntax-e$1 stx_44)))"
"(values(syntax-scope-set(vector-ref vec_45 0) 0)(syntax-scope-set(vector-ref vec_45 1) 0)))))"
"(define-values"
"(namespace-scopes=?)"
"(lambda(nss1_46 nss2_47)"
"(if(set=?(namespace-scopes-post nss1_46)(namespace-scopes-post nss2_47))"
"(set=?(namespace-scopes-other nss1_46)(namespace-scopes-other nss2_47))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:syntax-literals"
" syntax-literals1.1"
" syntax-literals?"
" syntax-literals-stxes"
" syntax-literals-count"
" set-syntax-literals-stxes!"
" set-syntax-literals-count!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax-literals"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'syntax-literals)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'stxes)"
"(make-struct-field-accessor -ref_4 1 'count)"
"(make-struct-field-mutator -set!_5 0 'stxes)"
"(make-struct-field-mutator -set!_5 1 'count))))"
"(define-values"
"(struct:header"
" header2.1"
" header?"
" header-module-path-indexes"
" header-binding-sym-to-define-sym"
" header-binding-syms-in-order"
" header-require-var-to-import-sym"
" header-import-sym-to-extra-inspectors"
" header-require-vars-in-order"
" header-define-and-import-syms"
" header-syntax-literals"
" set-header-binding-syms-in-order!"
" set-header-require-vars-in-order!)"
"(let-values(((struct:_26 make-_27 ?_28 -ref_29 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type 'header #f 8 0 #f null(current-inspector) #f '(0 1 3 4 6 7) #f 'header)))))"
"(values"
" struct:_26"
" make-_27"
" ?_28"
"(make-struct-field-accessor -ref_29 0 'module-path-indexes)"
"(make-struct-field-accessor -ref_29 1 'binding-sym-to-define-sym)"
"(make-struct-field-accessor -ref_29 2 'binding-syms-in-order)"
"(make-struct-field-accessor -ref_29 3 'require-var-to-import-sym)"
"(make-struct-field-accessor -ref_29 4 'import-sym-to-extra-inspectors)"
"(make-struct-field-accessor -ref_29 5 'require-vars-in-order)"
"(make-struct-field-accessor -ref_29 6 'define-and-import-syms)"
"(make-struct-field-accessor -ref_29 7 'syntax-literals)"
"(make-struct-field-mutator -set!_30 2 'binding-syms-in-order)"
"(make-struct-field-mutator -set!_30 5 'require-vars-in-order))))"
"(define-values"
"(struct:variable-use variable-use3.1 variable-use? variable-use-module-use variable-use-sym)"
"(let-values(((struct:_81 make-_82 ?_83 -ref_84 -set!_85)"
"(let-values()"
"(let-values()(make-struct-type 'variable-use #f 2 0 #f null #f #f '(0 1) #f 'variable-use)))))"
"(values"
" struct:_81"
" make-_82"
" ?_83"
"(make-struct-field-accessor -ref_84 0 'module-use)"
"(make-struct-field-accessor -ref_84 1 'sym))))"
"(define-values(make-syntax-literals)(lambda()(syntax-literals1.1 null 0)))"
"(define-values"
"(make-header)"
"(lambda(mpis_106 syntax-literals_107)"
"(header2.1 mpis_106(make-hasheq) null(make-variable-uses)(make-hasheq) null(make-hasheq) syntax-literals_107)))"
"(define-values(make-variable-uses)(lambda()(make-hash)))"
"(define-values"
"(add-syntax-literal!)"
"(lambda(header-or-literals_108 q_109)"
"(let-values(((sl_110)"
"(if(header? header-or-literals_108)"
"(header-syntax-literals header-or-literals_108)"
" header-or-literals_108)))"
"(let-values(((pos_111)(syntax-literals-count sl_110)))"
"(begin"
"(set-syntax-literals-count! sl_110(add1 pos_111))"
"(set-syntax-literals-stxes! sl_110(cons q_109(syntax-literals-stxes sl_110)))"
" pos_111)))))"
"(define-values"
"(add-syntax-literals!)"
"(lambda(sl_112 vec_113)"
"(let-values(((pos_114)(syntax-literals-count sl_112)))"
"(begin"
"(let-values(((vec_115 len_116)"
"(let-values(((vec_117) vec_113))"
"(begin"
"(if(vector? vec_117)(void)(let-values()(in-vector vec_117)))"
"(values vec_117(unsafe-vector-length vec_117))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_118)"
"(lambda(fold-var_119 pos_120)"
"(if(unsafe-fx< pos_120 len_116)"
"(let-values(((e_121)(unsafe-vector-ref vec_115 pos_120)))"
"(let-values(((fold-var_122)"
"(let-values()"
"(let-values(((fold-var_124)"
"(let-values()"
"(begin"
"(let-values()(add-syntax-literal! sl_112 e_121))"
"(void)))))"
"(values fold-var_124)))))"
"(for-loop_118 fold-var_122(unsafe-fx+ 1 pos_120))))"
" fold-var_119))))"
" for-loop_118)"
"(void)"
" 0)))"
"(cons pos_114(vector-length vec_113))))))"
"(define-values(syntax-literals-empty?)(lambda(sl_125)(null?(syntax-literals-stxes sl_125))))"
"(define-values"
"(generate-lazy-syntax-literals!9.1)"
"(lambda(skip-deserialize?4_126 skip-deserialize?5_127 sl6_128 mpis7_129 self8_130)"
"(let-values(((sl_131) sl6_128))"
"(let-values(((mpis_132) mpis7_129))"
"(let-values(((self_133) self8_130))"
"(let-values(((skip-deserialize?_134)(if skip-deserialize?5_127 skip-deserialize?4_126 #f)))"
"(let-values()"
"(list"
"(list 'define-values(list syntax-literals-id)(list* 'make-vector(syntax-literals-count sl_131) '(#f)))"
"(list"
" 'define-values"
"(list get-syntax-literal!-id)"
"(list"
" 'lambda"
" '(pos)"
"(list"
" 'let-values"
"(list(list '(ready-stx)(list* 'vector-ref syntax-literals-id '(pos))))"
"(list"
" 'if"
" 'ready-stx"
" 'ready-stx"
"(list*"
" 'begin"
"(qq-append"
"(if skip-deserialize?_134"
" null"
"(list"
"(list"
" 'if"
"(list* 'vector-ref deserialized-syntax-vector-id '(0))"
" '(void)"
"(list deserialize-syntax-id bulk-binding-registry-id))))"
"(list"
"(list"
" 'let-values"
"(list"
"(list"
" '(stx)"
"(list"
" 'syntax-module-path-index-shift"
"(list"
" 'syntax-shift-phase-level"
"(list* 'vector-ref deserialized-syntax-vector-id '(pos))"
" phase-shift-id)"
"(add-module-path-index! mpis_132 self_133)"
" self-id"
" inspector-id)))"
"(list* 'begin(list* 'vector-set! syntax-literals-id '(pos stx)) '(stx))))))))))))))))))"
"(define-values"
"(generate-lazy-syntax-literals-data!)"
"(lambda(sl_155 mpis_156)"
"(if(syntax-literals-empty? sl_155)"
"(let-values()(list(list* 'define-values(list deserialize-syntax-id) '(#f))))"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list deserialize-syntax-id)"
"(list"
" 'lambda"
"(list bulk-binding-registry-id)"
"(list"
" 'begin"
"(list"
" 'vector-copy!"
" deserialized-syntax-vector-id"
" ''0"
"(list"
" 'let-values"
"(list(list*(list inspector-id) '(#f)))"
"(let-values(((temp25_157)"
"(vector->immutable-vector(list->vector(alt-reverse(syntax-literals-stxes sl_155)))))"
"((mpis26_158) mpis_156))"
"(generate-deserialize6.1 #f #f temp25_157 mpis26_158))))"
"(list* 'set! deserialize-syntax-id '(#f))))))))))"
"(define-values(generate-lazy-syntax-literal-lookup)(lambda(pos_159)(list get-syntax-literal!-id pos_159)))"
"(define-values"
"(generate-eager-syntax-literals!)"
"(lambda(sl_160 mpis_161 base-phase_162 self_163 ns_164)"
"(if(syntax-literals-empty? sl_160)"
"(let-values() #f)"
"(let-values()"
"(list"
" 'let-values"
"(list"
"(list"
" '(ns+stxss)"
"(let-values(((temp27_165)"
"(cons(encode-namespace-scopes ns_164)(alt-reverse(syntax-literals-stxes sl_160))))"
"((mpis28_166) mpis_161))"
"(generate-deserialize6.1 #f #f temp27_165 mpis28_166))))"
"(list"
" 'let-values"
" '(((ns-scope-s)(car ns+stxss)))"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stx)"
"(list"
" 'swap-top-level-scopes"
"(list"
" 'syntax-module-path-index-shift"
"(list 'syntax-shift-phase-level 'stx(list '- base-phase_162 dest-phase-id))"
"(add-module-path-index! mpis_161 self_163)"
" self-id)"
" 'ns-scope-s"
" ns-id))"
" '((cdr ns+stxss))))))))))"
"(define-values(generate-eager-syntax-literal-lookup)(lambda(pos_167)(list 'vector-ref syntax-literals-id pos_167)))"
"(define-values"
"(syntax-literals-as-vector)"
"(lambda(sl_168)(list->vector(alt-reverse(syntax-literals-stxes sl_168)))))"
"(define-values"
"(select-fresh)"
"(lambda(sym_171 header_172)"
"(if(symbol-conflicts? sym_171 header_172)"
"((letrec-values(((loop_173)"
"(lambda(pos_174)"
"                          (let-values (((new-sym_175) (string->symbol (format \"~a/~a\" pos_174 sym_171))))"
"(if(symbol-conflicts? new-sym_175 header_172)(loop_173(add1 pos_174)) new-sym_175)))))"
" loop_173)"
" 1)"
" sym_171)))"
"(define-values"
"(symbol-conflicts?)"
"(lambda(sym_176 header_177)"
"(let-values(((or-part_178)(built-in-symbol? sym_176)))"
"(if or-part_178 or-part_178(hash-ref(header-define-and-import-syms header_177) sym_176 #f)))))"
"(define-values"
"(register-required-variable-use!19.1)"
"(lambda(defined?12_179 defined?13_180 header14_181 mpi15_182 phase16_183 sym17_184 extra-inspector18_185)"
"(let-values(((header_186) header14_181))"
"(let-values(((mpi_187) mpi15_182))"
"(let-values(((phase_188) phase16_183))"
"(let-values(((sym_189) sym17_184))"
"(let-values(((extra-inspector_190) extra-inspector18_185))"
"(let-values(((defined?_191)(if defined?13_180 defined?12_179 #f)))"
"(let-values()"
"(let-values(((key_192)(variable-use3.1(module-use1.1 mpi_187 phase_188) sym_189)))"
"(let-values(((variable-uses_193)(header-require-var-to-import-sym header_186)))"
"(let-values(((var-sym_194)"
"(let-values(((or-part_195)(hash-ref variable-uses_193 key_192 #f)))"
"(if or-part_195"
" or-part_195"
"(let-values(((sym_196)(select-fresh(variable-use-sym key_192) header_186)))"
"(begin"
"(hash-set! variable-uses_193 key_192 sym_196)"
"(set-header-require-vars-in-order!"
" header_186"
"(cons key_192(header-require-vars-in-order header_186)))"
"(hash-set!"
"(header-define-and-import-syms header_186)"
" sym_196"
"(if defined?_191 'defined 'required))"
" sym_196))))))"
"(begin"
"(if extra-inspector_190"
"(let-values()"
"(let-values(((extra-inspectors_197)(header-import-sym-to-extra-inspectors header_186)))"
"(hash-update!"
" extra-inspectors_197"
" var-sym_194"
"(lambda(s_198)(set-add s_198 extra-inspector_190))"
" '#hasheq())))"
"(void))"
" var-sym_194)))))))))))))"
"(define-values"
"(register-as-defined!)"
"(lambda(header_225 def-sym_226)(hash-set!(header-define-and-import-syms header_225) def-sym_226 'defined)))"
"(define-values"
"(registered-as-required?)"
"(lambda(header_227 var-sym_228)"
"(eq? 'required(hash-ref(header-define-and-import-syms header_227) var-sym_228 #f))))"
"(define-values"
"(generate-links+imports)"
"(lambda(header_229 phase_230 cctx_231)"
"(let-values(((mod-use-to-link-sym_232)"
"(let-values(((lst_234)(header-require-vars-in-order header_229)))"
"(begin"
"(if(list? lst_234)(void)(let-values()(in-list lst_234)))"
"((letrec-values(((for-loop_235)"
"(lambda(ht_236 lst_237)"
"(if(pair? lst_237)"
"(let-values(((vu_238)(unsafe-car lst_237)))"
"(let-values(((ht_239)"
"(let-values(((ht_240) ht_236))"
"(let-values(((ht_241)"
"(let-values()"
"(let-values(((mu_242)"
"(variable-use-module-use"
" vu_238)))"
"(if(let-values(((or-part_243)"
"(hash-ref"
" ht_240"
" mu_242"
" #f)))"
"(if or-part_243"
" or-part_243"
"(let-values(((or-part_244)"
"(eq?"
"(module-use-module"
" mu_242)"
"(compile-context-self"
" cctx_231))))"
"(if or-part_244"
" or-part_244"
"(top-level-module-path-index?"
"(module-use-module"
" mu_242))))))"
" ht_240"
"(hash-set"
" ht_240"
" mu_242"
"(string->symbol"
"(format"
"                                                                                     \"~a_~a_~a\""
"(extract-name"
"(module-use-module mu_242))"
"(module-use-phase mu_242)"
"(hash-count ht_240)))))))))"
"(values ht_241)))))"
"(for-loop_235 ht_239(unsafe-cdr lst_237))))"
" ht_236))))"
" for-loop_235)"
" '#hash()"
" lst_234)))))"
"(let-values(((link-mod-uses_233)(hash-keys mod-use-to-link-sym_232)))"
"(values"
" link-mod-uses_233"
"(alt-reverse"
"(let-values(((lst_245) link-mod-uses_233))"
"(begin"
"(if(list? lst_245)(void)(let-values()(in-list lst_245)))"
"((letrec-values(((for-loop_246)"
"(lambda(fold-var_247 lst_248)"
"(if(pair? lst_248)"
"(let-values(((mu_249)(unsafe-car lst_248)))"
"(let-values(((fold-var_250)"
"(let-values(((fold-var_251) fold-var_247))"
"(let-values(((fold-var_252)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_253)"
"(header-require-vars-in-order"
" header_229)))"
"(begin"
"(if(list? lst_253)"
"(void)"
"(let-values()(in-list lst_253)))"
"((letrec-values(((for-loop_254)"
"(lambda(fold-var_255"
" lst_256)"
"(if(pair? lst_256)"
"(let-values(((vu_257)"
"(unsafe-car"
" lst_256)))"
"(let-values(((fold-var_258)"
"(let-values(((fold-var_259)"
" fold-var_255))"
"(if(equal?"
" mu_249"
"(variable-use-module-use"
" vu_257))"
"(let-values(((fold-var_260)"
" fold-var_259))"
"(let-values(((fold-var_261)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_262)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_229)"
" vu_257)))"
"(let-values(((ex-sym_263)"
"(variable-use-sym"
" vu_257)))"
"(if(eq?"
" var-sym_262"
" ex-sym_263)"
" var-sym_262"
"(list"
" ex-sym_263"
" var-sym_262)))))"
" fold-var_260))))"
"(values"
" fold-var_261)))"
" fold-var_259))))"
"(for-loop_254"
" fold-var_258"
"(unsafe-cdr"
" lst_256))))"
" fold-var_255))))"
" for-loop_254)"
" null"
" lst_253)))))"
" fold-var_251))))"
"(values fold-var_252)))))"
"(for-loop_246 fold-var_250(unsafe-cdr lst_248))))"
" fold-var_247))))"
" for-loop_246)"
" null"
" lst_245))))"
"(alt-reverse"
"(let-values(((lst_264) link-mod-uses_233))"
"(begin"
"(if(list? lst_264)(void)(let-values()(in-list lst_264)))"
"((letrec-values(((for-loop_265)"
"(lambda(fold-var_266 lst_267)"
"(if(pair? lst_267)"
"(let-values(((mu_268)(unsafe-car lst_267)))"
"(let-values(((fold-var_269)"
"(let-values(((fold-var_270) fold-var_266))"
"(let-values(((fold-var_271)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_272)"
"(alt-reverse"
"(let-values(((lst_273)"
"(header-require-vars-in-order"
" header_229)))"
"(begin"
"(if(list? lst_273)"
"(void)"
"(let-values()"
"(in-list lst_273)))"
"((letrec-values(((for-loop_274)"
"(lambda(fold-var_275"
" lst_276)"
"(if(pair?"
" lst_276)"
"(let-values(((vu_277)"
"(unsafe-car"
" lst_276)))"
"(let-values(((fold-var_278)"
"(let-values(((fold-var_279)"
" fold-var_275))"
"(if(equal?"
" mu_268"
"(variable-use-module-use"
" vu_277))"
"(let-values(((fold-var_280)"
" fold-var_279))"
"(let-values(((fold-var_281)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_282)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_229)"
" vu_277)))"
"(hash-ref"
"(header-import-sym-to-extra-inspectors"
" header_229)"
" var-sym_282"
" #f)))"
" fold-var_280))))"
"(values"
" fold-var_281)))"
" fold-var_279))))"
"(for-loop_274"
" fold-var_278"
"(unsafe-cdr"
" lst_276))))"
" fold-var_275))))"
" for-loop_274)"
" null"
" lst_273))))))"
"(if(ormap2 values extra-inspectorss_272)"
" extra-inspectorss_272"
" #f)))"
" fold-var_270))))"
"(values fold-var_271)))))"
"(for-loop_265 fold-var_269(unsafe-cdr lst_267))))"
" fold-var_266))))"
" for-loop_265)"
" null"
" lst_264))))"
"(alt-reverse"
"(let-values(((lst_283)(header-require-vars-in-order header_229)))"
"(begin"
"(if(list? lst_283)(void)(let-values()(in-list lst_283)))"
"((letrec-values(((for-loop_284)"
"(lambda(fold-var_285 lst_286)"
"(if(pair? lst_286)"
"(let-values(((vu_287)(unsafe-car lst_286)))"
"(let-values(((fold-var_288)"
"(let-values(((fold-var_289) fold-var_285))"
"(if(let-values(((mod_290)"
"(module-use-module"
"(variable-use-module-use vu_287))))"
"(let-values(((or-part_291)"
"(eq?"
" mod_290"
"(compile-context-self cctx_231))))"
"(if or-part_291"
" or-part_291"
"(top-level-module-path-index? mod_290))))"
"(let-values(((fold-var_292) fold-var_289))"
"(let-values(((fold-var_293)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_294)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_229)"
" vu_287)))"
"(let-values(((ex-sym_295)"
"(variable-use-sym vu_287)))"
"(if(eq? var-sym_294 ex-sym_295)"
" var-sym_294"
"(list var-sym_294 ex-sym_295)))))"
" fold-var_292))))"
"(values fold-var_293)))"
" fold-var_289))))"
"(for-loop_284 fold-var_288(unsafe-cdr lst_286))))"
" fold-var_285))))"
" for-loop_284)"
" null"
" lst_283)))))))))"
"(define-values"
"(extract-name)"
"(lambda(mpi_296)"
"(let-values(((p_297 base_298)(1/module-path-index-split mpi_296)))"
"(if(symbol? p_297)"
"(let-values() p_297)"
"(if(path? p_297)"
"(let-values()"
"            (let-values (((base_299 name_300 dir?_301) (split-path p_297))) (path-replace-extension name_300 #\"\")))"
"(if(string? p_297)"
"            (let-values () (path-replace-extension p_297 #\"\"))"
"(if(if(pair? p_297)(eq?(car p_297) 'quote) #f)"
"(let-values()(cadr p_297))"
"(if(if(pair? p_297)(eq?(car p_297) 'file) #f)"
"(let-values()"
"(let-values(((base_302 name_303 dir?_304)(split-path(cadr p_297))))"
"                    (path-replace-extension name_303 #\"\")))"
"(if(if(pair? p_297)(eq?(car p_297) 'lib) #f)"
"                  (let-values () (path-replace-extension (cadr p_297) #\"\"))"
"(let-values() 'module))))))))))"
"(void)"
"(void)"
"(define-values"
"(instance-imports)"
"(list ns-id phase-shift-id self-id inspector-id bulk-binding-registry-id set-transformer!-id))"
"(define-values"
"(make-instance-instance13.1)"
"(lambda(bulk-binding-registry5_13 inspector4_14 namespace1_15 phase-shift2_16 self3_17 set-transformer!6_18)"
"(let-values(((ns_19) namespace1_15))"
"(let-values(((phase-shift_20) phase-shift2_16))"
"(let-values(((self_21) self3_17))"
"(let-values(((inspector_22) inspector4_14))"
"(let-values(((bulk-binding-registry_23) bulk-binding-registry5_13))"
"(let-values(((set-transformer!_24) set-transformer!6_18))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_19"
" phase-shift-id"
" phase-shift_20"
" self-id"
" self_21"
" inspector-id"
" inspector_22"
" bulk-binding-registry-id"
" bulk-binding-registry_23"
" set-transformer!-id"
" set-transformer!_24))))))))))"
"(define-values"
"(make-module-body-instance-instance18.1)"
"(lambda(set-transformer!16_55)"
"(let-values(((set-transformer!_56) set-transformer!16_55))"
"(let-values()(1/make-instance 'body-instance #f set-transformer!-id set-transformer!_56)))))"
"(void)"
"(void)"
"(define-values"
"(eager-instance-imports)"
"(list* ns-id dest-phase-id self-id bulk-binding-registry-id inspector-id '(swap-top-level-scopes)))"
"(define-values"
"(make-eager-instance-instance11.1)"
"(lambda(bulk-binding-registry4_8 dest-phase2_9 inspector5_10 namespace1_11 self3_12)"
"(let-values(((ns_13) namespace1_11))"
"(let-values(((dest-phase_14) dest-phase2_9))"
"(let-values(((self_15) self3_12))"
"(let-values(((bulk-binding-registry_16) bulk-binding-registry4_8))"
"(let-values(((inspector_17) inspector5_10))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_13"
" dest-phase-id"
" dest-phase_14"
" self-id"
" self_15"
" bulk-binding-registry-id"
" bulk-binding-registry_16"
" inspector-id"
" inspector_17"
" 'swap-top-level-scopes"
" swap-top-level-scopes)))))))))"
"(void)"
"(void)"
"(define-values"
"(self-quoting-in-linklet?)"
"(lambda(datum_1)"
"(let-values(((or-part_2)(number? datum_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(boolean? datum_1)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(string? datum_1)))(if or-part_4 or-part_4(bytes? datum_1)))))))))"
"(void)"
"(void)"
"(define-values(kernel-primitive-table$1)(primitive-table '#%kernel))"
"(define-values(datum->syntax$3)(hash-ref kernel-primitive-table$1 'datum->syntax))"
"(define-values(syntax->datum$3)(hash-ref kernel-primitive-table$1 'syntax->datum))"
"(define-values(syntax-property-symbol-keys$2)(hash-ref kernel-primitive-table$1 'syntax-property-symbol-keys))"
"(define-values(syntax-property$2)(hash-ref kernel-primitive-table$1 'syntax-property))"
"(define-values(syntax-span$2)(hash-ref kernel-primitive-table$1 'syntax-span))"
"(define-values(syntax-position$2)(hash-ref kernel-primitive-table$1 'syntax-position))"
"(define-values(syntax-column$2)(hash-ref kernel-primitive-table$1 'syntax-column))"
"(define-values(syntax-line$2)(hash-ref kernel-primitive-table$1 'syntax-line))"
"(define-values(syntax-source$2)(hash-ref kernel-primitive-table$1 'syntax-source))"
"(define-values(syntax-e$3)(hash-ref kernel-primitive-table$1 'syntax-e))"
"(define-values(syntax?$2)(hash-ref kernel-primitive-table$1 'syntax?))"
"(void)"
"(void)"
"(define-values"
"(datum->correlated)"
"(let-values(((datum->correlated4_295)"
"(lambda(d3_296 srcloc1_297 srcloc2_298)"
"(let-values(((d_299) d3_296))"
"(let-values(((srcloc_300)(if srcloc2_298 srcloc1_297 #f)))"
"(let-values()(datum->syntax$3 #f d_299 srcloc_300)))))))"
"(case-lambda"
"((d_301)(datum->correlated4_295 d_301 #f #f))"
"((d_302 srcloc1_303)(datum->correlated4_295 d_302 srcloc1_303 #t)))))"
"(define-values(correlated-e)(lambda(e_304)(if(syntax?$2 e_304)(syntax-e$3 e_304) e_304)))"
"(define-values(correlated-cadr)(lambda(e_305)(car(correlated-e(cdr(correlated-e e_305))))))"
"(define-values"
"(correlated-length)"
"(lambda(e_306)(let-values(((l_307)(correlated-e e_306)))(if(list? l_307)(length l_307) #f))))"
"(define-values"
"(correlated->list)"
"(lambda(e_308)"
"((letrec-values(((loop_309)"
"(lambda(e_310)"
"(if(list? e_310)"
"(let-values() e_310)"
"(if(pair? e_310)"
"(let-values()(cons(car e_310)(loop_309(cdr e_310))))"
"(if(null? e_310)"
"(let-values() null)"
"(if(syntax?$2 e_310)"
"(let-values()(loop_309(syntax-e$3 e_310)))"
"                                (let-values () (error 'correlate->list \"not a list\")))))))))"
" loop_309)"
" e_308)))"
"(define-values"
"(correlated-property)"
"(case-lambda"
"((e_332 k_333)(syntax-property$2 e_332 k_333))"
"((e_334 k_335 v_336)(syntax-property$2 e_334 k_335 v_336))))"
"(define-values"
"(to-syntax-list.1$1)"
"(lambda(s_337)"
"(if(list? s_337)"
"(let-values() s_337)"
"(if(pair? s_337)"
"(let-values()(let-values(((r_338)(to-syntax-list.1$1(cdr s_337))))(if r_338(cons(car s_337) r_338) #f)))"
"(if(syntax?$2 s_337)(let-values()(to-syntax-list.1$1(syntax-e$3 s_337)))(let-values() #f))))))"
"(void)"
"(void)"
"(define-values(kernel-primitive-table)(1/primitive-table '#%kernel))"
"(define-values(read-syntax$2)(hash-ref kernel-primitive-table 'read-syntax))"
"(define-values(read-syntax/recursive$2)(hash-ref kernel-primitive-table 'read-syntax/recursive))"
"(define-values(1/make-readtable)(hash-ref kernel-primitive-table 'make-readtable))"
"(define-values(datum->syntax$2)(hash-ref kernel-primitive-table 'datum->syntax))"
"(define-values(syntax->datum$2)(hash-ref kernel-primitive-table 'syntax->datum))"
"(define-values(syntax-property-symbol-keys$1)(hash-ref kernel-primitive-table 'syntax-property-symbol-keys))"
"(define-values(1/syntax-property)(hash-ref kernel-primitive-table 'syntax-property))"
"(define-values(syntax-span$1)(hash-ref kernel-primitive-table 'syntax-span))"
"(define-values(syntax-position$1)(hash-ref kernel-primitive-table 'syntax-position))"
"(define-values(syntax-column$1)(hash-ref kernel-primitive-table 'syntax-column))"
"(define-values(syntax-line$1)(hash-ref kernel-primitive-table 'syntax-line))"
"(define-values(syntax-source$1)(hash-ref kernel-primitive-table 'syntax-source))"
"(define-values(syntax-e$2)(hash-ref kernel-primitive-table 'syntax-e))"
"(define-values(1/syntax?)(hash-ref kernel-primitive-table 'syntax?))"
"(void)"
"(void)"
"(define-values"
"(srcloc->vector)"
"(lambda(s_42)"
"(if s_42"
"(vector(srcloc-source s_42)(srcloc-line s_42)(srcloc-column s_42)(srcloc-position s_42)(srcloc-span s_42))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(correlate*)"
"(lambda(stx_1 s-exp_2)"
"(if(syntax-srcloc stx_1)(datum->correlated s-exp_2(srcloc->vector(syntax-srcloc stx_1))) s-exp_2)))"
"(define-values(->correlated)(lambda(s_3)(datum->correlated s_3 #f)))"
"(void)"
"(void)"
"(define-values"
"(compile$2)"
"(let-values(((compile7_6)"
"(lambda(p5_7 cctx6_8 name1_9 result-used?2_10 name3_11 result-used?4_12)"
"(let-values(((p_13) p5_7))"
"(let-values(((cctx_14) cctx6_8))"
"(let-values(((name_15)(if name3_11 name1_9 #f)))"
"(let-values(((result-used?_16)(if result-used?4_12 result-used?2_10 #t)))"
"(let-values()"
"(let-values(((compile_17)"
"(lambda(p_18 name_19 result-used?_20)"
"(compile$2 p_18 cctx_14 name_19 result-used?_20))))"
"(let-values(((s_21)(parsed-s p_13)))"
"(if(parsed-id? p_13)"
"(let-values()"
"(let-values(((p27_22) p_13)((cctx28_23) cctx_14))"
"(compile-identifier24.1 #f #f #f #f p27_22 cctx28_23)))"
"(if(parsed-lambda? p_13)"
"(let-values()"
"(if result-used?_16"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_21"
"(list*"
" 'lambda"
"(compile-lambda"
"(parsed-lambda-keys p_13)"
"(parsed-lambda-body p_13)"
" cctx_14)))"
" name_15"
" s_21))"
"(let-values()(correlate* s_21 ''unused-lambda))))"
"(if(parsed-case-lambda? p_13)"
"(let-values()"
"(if result-used?_16"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_21"
"(list*"
" 'case-lambda"
"(alt-reverse"
"(let-values(((lst_24)(parsed-case-lambda-clauses p_13)))"
"(begin"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(fold-var_26 lst_27)"
"(if(pair? lst_27)"
"(let-values(((clause_28)"
"(unsafe-car lst_27)))"
"(let-values(((fold-var_29)"
"(let-values(((fold-var_30)"
" fold-var_26))"
"(let-values(((fold-var_31)"
"(let-values()"
"(cons"
"(let-values()"
"(compile-lambda"
"(car"
" clause_28)"
"(cadr"
" clause_28)"
" cctx_14))"
" fold-var_30))))"
"(values fold-var_31)))))"
"(for-loop_25"
" fold-var_29"
"(unsafe-cdr lst_27))))"
" fold-var_26))))"
" for-loop_25)"
" null"
" lst_24))))))"
" name_15"
" s_21))"
"(let-values()(correlate* s_21 ''unused-case-lambda))))"
"(if(parsed-app? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(alt-reverse"
"(let-values(((lst_32)(parsed-app-rator+rands p_13)))"
"(begin"
"(if(list? lst_32)(void)(let-values()(in-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(fold-var_34 lst_35)"
"(if(pair? lst_35)"
"(let-values(((r_36)(unsafe-car lst_35)))"
"(let-values(((fold-var_37)"
"(let-values(((fold-var_38)"
" fold-var_34))"
"(let-values(((fold-var_39)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_17"
" r_36"
" #f"
" #t))"
" fold-var_38))))"
"(values fold-var_39)))))"
"(for-loop_33"
" fold-var_37"
"(unsafe-cdr lst_35))))"
" fold-var_34))))"
" for-loop_33)"
" null"
" lst_32))))))"
"(if(parsed-if? p_13)"
"(let-values()"
"(let-values(((tst-e_40)(compile_17(parsed-if-tst p_13) #f #f)))"
"(if(eq?(correlated-e tst-e_40) #t)"
"(let-values()"
"(compile_17(parsed-if-thn p_13) name_15 result-used?_16))"
"(if(eq?(correlated-e tst-e_40) #f)"
"(let-values()"
"(compile_17(parsed-if-els p_13) name_15 result-used?_16))"
"(let-values()"
"(correlate*"
" s_21"
"(list"
" 'if"
" tst-e_40"
"(compile_17(parsed-if-thn p_13) name_15 result-used?_16)"
"(compile_17(parsed-if-els p_13) name_15 result-used?_16))))))))"
"(if(parsed-with-continuation-mark? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(list"
" 'with-continuation-mark"
"(compile_17(parsed-with-continuation-mark-key p_13) #f #t)"
"(compile_17(parsed-with-continuation-mark-val p_13) #f #t)"
"(compile_17"
"(parsed-with-continuation-mark-body p_13)"
" name_15"
" result-used?_16))))"
"(if(parsed-begin0? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(list*"
" 'begin0"
"(compile_17(car(parsed-begin0-body p_13)) name_15 result-used?_16)"
"(alt-reverse"
"(let-values(((lst_41)(cdr(parsed-begin0-body p_13))))"
"(begin"
"(if(list? lst_41)(void)(let-values()(in-list lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(fold-var_43 lst_44)"
"(if(pair? lst_44)"
"(let-values(((e_45)(unsafe-car lst_44)))"
"(let-values(((fold-var_46)"
"(let-values(((fold-var_47)"
" fold-var_43))"
"(let-values(((fold-var_48)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_17"
" e_45"
" #f"
" #f))"
" fold-var_47))))"
"(values"
" fold-var_48)))))"
"(for-loop_42"
" fold-var_46"
"(unsafe-cdr lst_44))))"
" fold-var_43))))"
" for-loop_42)"
" null"
" lst_41)))))))"
"(if(parsed-begin? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(compile-begin"
"(parsed-begin-body p_13)"
" cctx_14"
" name_15"
" result-used?_16)))"
"(if(parsed-set!? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(let-values(((...der/compile/expr.rkt:89:24_49)"
" compile-identifier26.1)"
"((temp29_50)(parsed-set!-id p_13))"
"((cctx30_51) cctx_14)"
"((temp31_52) #t)"
"((temp32_53)"
"(compile_17"
"(parsed-set!-rhs p_13)"
"(parsed-s(parsed-set!-id p_13))"
" #t)))"
"(compile-identifier24.1"
" temp32_53"
" #t"
" temp31_52"
" #t"
" temp29_50"
" cctx30_51))))"
"(if(parsed-let-values? p_13)"
"(let-values()"
"(let-values(((...der/compile/expr.rkt:93:6_54) compile-let17.1)"
"((p33_55) p_13)"
"((cctx34_56) cctx_14)"
"((name35_57) name_15)"
"((temp36_58) #f)"
"((result-used?37_59) result-used?_16))"
"(compile-let15.1"
" temp36_58"
" p33_55"
" cctx34_56"
" name35_57"
" result-used?37_59)))"
"(if(parsed-letrec-values? p_13)"
"(let-values()"
"(let-values(((...der/compile/expr.rkt:95:6_60) compile-let17.1)"
"((p38_61) p_13)"
"((cctx39_62) cctx_14)"
"((name40_63) name_15)"
"((temp41_64) #t)"
"((result-used?42_65) result-used?_16))"
"(compile-let15.1"
" temp41_64"
" p38_61"
" cctx39_62"
" name40_63"
" result-used?42_65)))"
"(if(parsed-quote? p_13)"
"(let-values()"
"(let-values(((datum_66)(parsed-quote-datum p_13)))"
"(if(self-quoting-in-linklet? datum_66)"
"(let-values()(correlate* s_21 datum_66))"
"(let-values()"
"(correlate* s_21(list 'quote datum_66))))))"
"(if(parsed-quote-syntax? p_13)"
"(let-values()"
"(if result-used?_16"
"(compile-quote-syntax"
"(parsed-quote-syntax-datum p_13)"
" cctx_14)"
"(correlate* s_21(list 'quote(syntax->datum$1 s_21)))))"
"(if(parsed-#%variable-reference? p_13)"
"(let-values()"
"(let-values(((id_67)"
"(parsed-#%variable-reference-id p_13)))"
"(correlate*"
" s_21"
"(if id_67"
"(list"
" '#%variable-reference"
"(let-values(((id43_68) id_67)"
"((cctx44_69) cctx_14))"
"(compile-identifier24.1"
" #f"
" #f"
" #f"
" #f"
" id43_68"
" cctx44_69)))"
" '(#%variable-reference)))))"
"(let-values()"
"(error"
"                                                               \"unrecognized parsed form:\""
" p_13))))))))))))))))))))))))))"
"(case-lambda"
"((p_70 cctx_71)(compile7_6 p_70 cctx_71 #f #f #f #f))"
"((p_72 cctx_73 name_74 result-used?2_75)(compile7_6 p_72 cctx_73 name_74 result-used?2_75 #t #t))"
"((p_76 cctx_77 name1_78)(compile7_6 p_76 cctx_77 name1_78 #f #t #f)))))"
"(define-values"
"(compile-lambda)"
"(lambda(formals_79 bodys_80 cctx_81)(list formals_79(compile-sequence bodys_80 cctx_81 #f #t))))"
"(define-values"
"(compile-sequence)"
"(lambda(bodys_82 cctx_83 name_84 result-used?_85)"
"(if(null?(cdr bodys_82))"
"(compile$2(car bodys_82) cctx_83 name_84 result-used?_85)"
"(compile-begin bodys_82 cctx_83 name_84 result-used?_85))))"
"(define-values"
"(compile-begin)"
"(lambda(es_86 cctx_87 name_88 result-used?_89)"
"(let-values(((used-pos_90)(sub1(length es_86))))"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_91) es_86)((start_92) 0))"
"(begin"
"(if(list? lst_91)(void)(let-values()(in-list lst_91)))"
"(if(exact-nonnegative-integer? start_92)(void)(let-values()(in-naturals start_92)))"
"((letrec-values(((for-loop_93)"
"(lambda(fold-var_94 lst_95 pos_96)"
"(if(if(pair? lst_95) #t #f)"
"(let-values(((e_97)(unsafe-car lst_95))((i_98) pos_96))"
"(let-values(((fold-var_99)"
"(let-values(((fold-var_100) fold-var_94))"
"(let-values(((fold-var_101)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((used?_102)(= i_98 used-pos_90)))"
"(compile$2"
" e_97"
" cctx_87"
"(if used?_102 name_88 #f)"
"(if used?_102 result-used?_89 #f))))"
" fold-var_100))))"
"(values fold-var_101)))))"
"(for-loop_93 fold-var_99(unsafe-cdr lst_95)(+ pos_96 1))))"
" fold-var_94))))"
" for-loop_93)"
" null"
" lst_91"
" start_92))))))))"
"(define-values"
"(add-lambda-properties)"
"(lambda(s_103 inferred-name_104 orig-s_105)"
"(letrec-values(((simplify-name_106)"
"(lambda(v_110)"
"(if(pair? v_110)"
"(let-values()"
"(let-values(((n1_111)(simplify-name_106(car v_110))))"
"(let-values(((n2_112)(simplify-name_106(cdr v_110))))"
"(if(eq? n1_111 n2_112) n1_111 v_110))))"
"(let-values() v_110)))))"
"(let-values(((name_107)"
"(let-values(((or-part_113)"
"(let-values(((v_114)"
"(simplify-name_106(syntax-property$1 orig-s_105 'inferred-name))))"
"(if(let-values(((or-part_115)(symbol? v_114)))"
"(if or-part_115"
" or-part_115"
"(let-values(((or-part_116)(syntax?$1 v_114)))"
"(if or-part_116 or-part_116(void? v_114)))))"
" v_114"
" #f))))"
"(if or-part_113 or-part_113 inferred-name_104))))"
"(let-values(((named-s_108)"
"(if name_107"
"(correlated-property"
"(->correlated s_103)"
" 'inferred-name"
"(if(syntax?$1 name_107)(syntax-e$1 name_107) name_107))"
" s_103)))"
"(let-values(((as-method_109)(syntax-property$1 orig-s_105 'method-arity-error)))"
"(if as-method_109"
"(correlated-property(->correlated named-s_108) 'method-arity-error as-method_109)"
" named-s_108)))))))"
"(define-values"
"(lifted/1.1$16 lifted/2.1$16 lifted/3.1$15 lifted/4.1$15 lifted/5.1$15)"
"(make-struct-type"
" 'compile-let"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'compile-let"
"(case-lambda"
"((self_117 p_118 cctx_119 name_120 result-used?_121)"
"(apply missing-kw self_117 p_118 cctx_119 name_120 result-used?_121 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_122 p_123 cctx_124 name_125 result-used?_126)"
"(apply missing-kw self_122 p_123 cctx_124 name_125 result-used?_126 null)))))"
"(define-values"
"(compile-let15.1)"
"(lambda(rec?9_127 p11_128 cctx12_129 name13_130 result-used?14_131)"
"(let-values(((p_132) p11_128))"
"(let-values(((cctx_133) cctx12_129))"
"(let-values(((name_134) name13_130))"
"(let-values(((rec?_135) rec?9_127))"
"(let-values(((result-used?_136) result-used?14_131))"
"(let-values()"
"(correlate*"
"(parsed-s p_132)"
"(list"
"(if rec?_135 'letrec-values 'let-values)"
"(alt-reverse"
"(let-values(((lst_137)(parsed-let_-values-clauses p_132))"
"((lst_138)(parsed-let_-values-idss p_132)))"
"(begin"
"(if(list? lst_137)(void)(let-values()(in-list lst_137)))"
"(if(list? lst_138)(void)(let-values()(in-list lst_138)))"
"((letrec-values(((for-loop_139)"
"(lambda(fold-var_140 lst_141 lst_142)"
"(if(if(pair? lst_141)(pair? lst_142) #f)"
"(let-values(((clause_143)(unsafe-car lst_141))"
"((ids_144)(unsafe-car lst_142)))"
"(let-values(((fold-var_145)"
"(let-values(((fold-var_146) fold-var_140))"
"(let-values(((fold-var_147)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(if rec?_135"
"(alt-reverse"
"(let-values(((lst_148)"
"(car clause_143))"
"((lst_149) ids_144))"
"(begin"
"(if(list? lst_148)"
"(void)"
"(let-values()"
"(in-list lst_148)))"
"(if(list? lst_149)"
"(void)"
"(let-values()"
"(in-list lst_149)))"
"((letrec-values(((for-loop_150)"
"(lambda(fold-var_151"
" lst_152"
" lst_153)"
"(if(if(pair?"
" lst_152)"
"(pair?"
" lst_153)"
" #f)"
"(let-values(((sym_154)"
"(unsafe-car"
" lst_152))"
"((id_155)"
"(unsafe-car"
" lst_153)))"
"(let-values(((fold-var_156)"
"(let-values(((fold-var_157)"
" fold-var_151))"
"(let-values(((fold-var_158)"
"(let-values()"
"(cons"
"(let-values()"
"(add-undefined-error-name-property"
" sym_154"
" id_155))"
" fold-var_157))))"
"(values"
" fold-var_158)))))"
"(for-loop_150"
" fold-var_156"
"(unsafe-cdr"
" lst_152)"
"(unsafe-cdr"
" lst_153))))"
" fold-var_151))))"
" for-loop_150)"
" null"
" lst_148"
" lst_149))))"
"(car clause_143))"
"(compile$2"
"(cadr clause_143)"
" cctx_133"
"(if(= 1(length ids_144))"
"(car ids_144)"
" #f))))"
" fold-var_146))))"
"(values fold-var_147)))))"
"(for-loop_139 fold-var_145(unsafe-cdr lst_141)(unsafe-cdr lst_142))))"
" fold-var_140))))"
" for-loop_139)"
" null"
" lst_137"
" lst_138))))"
"(compile-sequence(parsed-let_-values-body p_132) cctx_133 name_134 result-used?_136)))))))))))"
"(define-values"
"(unpack16.1$3)"
"(lambda(given-kws_159 given-args_160 p11_161 cctx12_162 name13_163 result-used?14_164)"
"(let-values(((rec?9_165)(car given-args_160)))"
"(compile-let15.1 rec?9_165 p11_161 cctx12_162 name13_163 result-used?14_164))))"
"(define-values"
"(compile-let17.1)"
"(lifted/2.1$16"
"(lambda(given-kws_166 given-argc_167)"
"(if(= given-argc_167 6)"
"(let-values(((l2_168) given-kws_166))"
"(if(pair? l2_168)(if(eq?(car l2_168) '#:rec?)(null?(cdr l2_168)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_169 given-args_170 p_171 cctx_172 name_173 result-used?_174)"
"(unpack16.1$3 given-kws_169 given-args_170 p_171 cctx_172 name_173 result-used?_174)))"
" '(#:rec?)"
" '(#:rec?)))"
"(define-values"
"(add-undefined-error-name-property)"
"(lambda(sym_175 orig-id_176)"
"(let-values(((id_177)(correlate* orig-id_176 sym_175)))"
"(correlated-property"
"(->correlated id_177)"
" 'undefined-error-name"
"(let-values(((or-part_178)(syntax-property$1 orig-id_176 'undefined-error-name)))"
"(if or-part_178 or-part_178(syntax-e$1 orig-id_176)))))))"
"(define-values"
"(compile-identifier24.1)"
"(lambda(set-to19_179 set-to21_180 set-to?18_181 set-to?20_182 p22_183 cctx23_184)"
"(let-values(((p_185) p22_183))"
"(let-values(((cctx_186) cctx23_184))"
"(let-values(((set-to?_187)(if set-to?20_182 set-to?18_181 #f)))"
"(let-values(((rhs_188)(if set-to21_180 set-to19_179 #f)))"
"(let-values()"
"(let-values(((normal-b_189)(parsed-id-binding p_185)))"
"(let-values(((b_190)"
"(let-values(((or-part_192) normal-b_189))"
"(if or-part_192"
" or-part_192"
"(let-values(((temp45_193)(compile-context-self cctx_186))"
"((temp46_194)(compile-context-phase cctx_186))"
"((temp47_195)(syntax-e$1(parsed-s p_185))))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp45_193"
" temp46_194"
" temp47_195))))))"
"(let-values(((sym_191)"
"(if(local-binding? b_190)"
"(let-values()(local-binding-key b_190))"
"(if(module-binding? b_190)"
"(let-values()"
"(let-values(((mpi_196)"
"(if(parsed-top-id? p_185)"
"(compile-context-self cctx_186)"
"(module-binding-module b_190))))"
"(if(parsed-primitive-id? p_185)"
"(let-values()"
"(begin"
"(if(zero?(module-binding-phase b_190))"
"(void)"
"(let-values()"
"                                                  (error \"internal error: non-zero phase for a primitive\")))"
"(if set-to?_187"
"(let-values()"
"(error"
"                                                   \"internal error: cannot assign to a primitive:\""
"(parsed-s p_185)))"
"(void))"
"(module-binding-sym b_190)))"
"(if(eq? mpi_196(compile-context-module-self cctx_186))"
"(let-values()"
"(let-values(((header_197)(compile-context-header cctx_186)))"
"(hash-ref"
"(header-binding-sym-to-define-sym header_197)"
"(module-binding-sym b_190))))"
"(let-values()"
"(let-values(((temp48_198)(compile-context-header cctx_186))"
"((mpi49_199) mpi_196)"
"((temp50_200)(module-binding-phase b_190))"
"((temp51_201)(module-binding-sym b_190))"
"((temp52_202)"
"(let-values(((or-part_203)"
"(module-binding-extra-inspector b_190)))"
"(if or-part_203"
" or-part_203"
"(let-values(((or-part_204)"
"(parsed-id-inspector p_185)))"
"(if or-part_204"
" or-part_204"
"(syntax-inspector(parsed-s p_185))))))))"
"(register-required-variable-use!19.1"
" #f"
" #f"
" temp48_198"
" mpi49_199"
" temp50_200"
" temp51_201"
" temp52_202)))))))"
"(let-values()"
"(error"
"                                       \"not a reference to a module or local binding:\""
" b_190"
"(parsed-s p_185)))))))"
"(correlate*(parsed-s p_185)(if set-to?_187(list 'set! sym_191 rhs_188) sym_191))))))))))))"
"(define-values"
"(unpack25.1$1)"
"(lambda(given-kws_205 given-args_206 p22_207 cctx23_208)"
"(let-values(((set-to21_209)(if(pair? given-kws_205)(eq? '#:set-to(car given-kws_205)) #f)))"
"(let-values(((set-to19_210)(if set-to21_209(car given-args_206)(void)))"
"((given-kws_211)(if set-to21_209(cdr given-kws_205) given-kws_205))"
"((given-args_212)(if set-to21_209(cdr given-args_206) given-args_206)))"
"(let-values(((set-to?20_213)(pair? given-kws_211)))"
"(let-values(((set-to?18_214)(if set-to?20_213(car given-args_212)(void))))"
"(compile-identifier24.1 set-to19_210 set-to21_209 set-to?18_214 set-to?20_213 p22_207 cctx23_208)))))))"
"(define-values"
"(compile-identifier26.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_215 given-argc_216)"
"(if(= given-argc_216 4)"
"(let-values(((l1_217) given-kws_215))"
"(let-values(((l1_218)(if(null? l1_217) l1_217(if(eq?(car l1_217) '#:set-to)(cdr l1_217) l1_217))))"
"(let-values(((l1_219) l1_218))"
"(let-values(((l1_220)(if(null? l1_219) l1_219(if(eq?(car l1_219) '#:set-to?)(cdr l1_219) l1_219))))"
"(null? l1_220)))))"
" #f))"
"(case-lambda"
"((given-kws_221 given-args_222 p_223 cctx_224)(unpack25.1$1 given-kws_221 given-args_222 p_223 cctx_224)))"
" null"
" '(#:set-to #:set-to?)"
"(let-values(((compile-identifier_225)(case-lambda((p_226 cctx_227)(unpack25.1$1 null null p_226 cctx_227)))))"
" compile-identifier_225)))"
"(define-values"
"(compile-quote-syntax)"
"(lambda(q_228 cctx_229)"
"(let-values(((pos_230)(add-syntax-literal!(compile-context-header cctx_229) q_228)))"
"(if(compile-context-lazy-syntax-literals? cctx_229)"
"(let-values()(generate-lazy-syntax-literal-lookup pos_230))"
"(let-values()(generate-eager-syntax-literal-lookup pos_230))))))"
"(void)"
"(void)"
"(define-values"
"(compile-forms26.1)"
"(lambda(body-imports1_14"
" body-suffix-forms2_15"
" body-suffix-forms13_16"
" compiled-expression-callback6_17"
" compiled-expression-callback17_18"
" cross-linklet-inlining?11_19"
" cross-linklet-inlining?22_20"
" definition-callback7_21"
" definition-callback18_22"
" encoded-root-expand-ctx-box4_23"
" encoded-root-expand-ctx-box15_24"
" force-phases3_25"
" force-phases14_26"
" get-module-linklet-info9_27"
" get-module-linklet-info20_28"
" other-form-callback8_29"
" other-form-callback19_30"
" root-ctx-only-if-syntax?5_31"
" root-ctx-only-if-syntax?16_32"
" to-source?10_33"
" to-source?21_34"
" bodys23_35"
" cctx24_36"
" mpis25_37)"
"(let-values(((bodys_38) bodys23_35))"
"(let-values(((cctx_39) cctx24_36))"
"(let-values(((mpis_40) mpis25_37))"
"(let-values(((body-imports_41) body-imports1_14))"
"(let-values(((body-suffix-forms_42)(if body-suffix-forms13_16 body-suffix-forms2_15 null)))"
"(let-values(((force-phases_43)(if force-phases14_26 force-phases3_25 null)))"
"(let-values(((encoded-root-expand-ctx-box_44)"
"(if encoded-root-expand-ctx-box15_24 encoded-root-expand-ctx-box4_23 #f)))"
"(let-values(((root-ctx-only-if-syntax?_45)"
"(if root-ctx-only-if-syntax?16_32 root-ctx-only-if-syntax?5_31 #f)))"
"(let-values(((compiled-expression-callback_46)"
"(if compiled-expression-callback17_18 compiled-expression-callback6_17 void)))"
"(let-values(((definition-callback_47)"
"(if definition-callback18_22 definition-callback7_21 void)))"
"(let-values(((other-form-callback_48)"
"(if other-form-callback19_30 other-form-callback8_29 void)))"
"(let-values(((get-module-linklet-info_49)"
"(if get-module-linklet-info20_28"
" get-module-linklet-info9_27"
"(lambda(mod-name_50 p_51) #f))))"
"(let-values(((to-source?_52)(if to-source?21_34 to-source?10_33 #f)))"
"(let-values(((cross-linklet-inlining?_53)"
"(if cross-linklet-inlining?22_20 cross-linklet-inlining?11_19 #t)))"
"(let-values()"
"(let-values(((phase_54)(compile-context-phase cctx_39)))"
"(let-values(((self_55)(compile-context-self cctx_39)))"
"(let-values(((syntax-literals_56)(make-syntax-literals)))"
"(let-values(((phase-to-body_57)(make-hasheqv)))"
"(let-values(((add-body!_58)"
"(lambda(phase_82 body_83)"
"(hash-update!"
" phase-to-body_57"
" phase_82"
"(lambda(l_84)(cons body_83 l_84))"
" null))))"
"(let-values(((phase-to-header_59)(make-hasheqv)))"
"(let-values(((find-or-create-header!_60)"
"(lambda(phase_85)"
"(let-values(((or-part_86)"
"(hash-ref phase-to-header_59 phase_85 #f)))"
"(if or-part_86"
" or-part_86"
"(let-values(((header_87)"
"(make-header"
" mpis_40"
" syntax-literals_56)))"
"(begin"
"(hash-set! phase-to-header_59 phase_85 header_87)"
" header_87)))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_88) force-phases_43))"
"(begin"
"(if(list? lst_88)"
"(void)"
"(let-values()(in-list lst_88)))"
"((letrec-values(((for-loop_89)"
"(lambda(fold-var_90 lst_91)"
"(if(pair? lst_91)"
"(let-values(((phase_92)"
"(unsafe-car"
" lst_91)))"
"(let-values(((fold-var_93)"
"(let-values()"
"(let-values(((fold-var_95)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(find-or-create-header!_60"
" phase_92)"
"(add-body!_58"
" phase_92"
" '(void))))"
"(void)))))"
"(values"
" fold-var_95)))))"
"(for-loop_89"
" fold-var_93"
"(unsafe-cdr lst_91))))"
" fold-var_90))))"
" for-loop_89)"
"(void)"
" lst_88)))"
"(values))))"
"(let-values(((saw-define-syntaxes?_61) #f))"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_39)"
"(let-values()"
"((letrec-values(((loop!_96)"
"(lambda(bodys_97"
" phase_98"
" header_99)"
"(let-values(((lst_100)"
" bodys_97))"
"(begin"
"(if(list? lst_100)"
"(void)"
"(let-values()"
"(in-list lst_100)))"
"((letrec-values(((for-loop_101)"
"(lambda(fold-var_102"
" lst_103)"
"(if(pair?"
" lst_103)"
"(let-values(((body_104)"
"(unsafe-car"
" lst_103)))"
"(let-values(((fold-var_105)"
"(let-values()"
"(let-values(((fold-var_107)"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_104)"
"(let-values()"
"(let-values(((lst_108)"
"(parsed-define-values-syms"
" body_104)))"
"(begin"
"(if(list?"
" lst_108)"
"(void)"
"(let-values()"
"(in-list"
" lst_108)))"
"((letrec-values(((for-loop_109)"
"(lambda(fold-var_110"
" lst_111)"
"(if(pair?"
" lst_111)"
"(let-values(((sym_112)"
"(unsafe-car"
" lst_111)))"
"(let-values(((fold-var_113)"
"(let-values()"
"(let-values(((fold-var_115)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((def-sym_116)"
"(select-fresh"
" sym_112"
" header_99)))"
"(begin"
"(hash-set!"
"(header-binding-sym-to-define-sym"
" header_99)"
" sym_112"
" def-sym_116)"
"(set-header-binding-syms-in-order!"
" header_99"
"(cons"
" sym_112"
"(header-binding-syms-in-order"
" header_99)))"
"(register-as-defined!"
" header_99"
" def-sym_116))))"
"(void)))))"
"(values"
" fold-var_115)))))"
"(for-loop_109"
" fold-var_113"
"(unsafe-cdr"
" lst_111))))"
" fold-var_110))))"
" for-loop_109)"
"(void)"
" lst_108))))"
"(if(parsed-begin-for-syntax?"
" body_104)"
"(let-values()"
"(loop!_96"
"(parsed-begin-for-syntax-body"
" body_104)"
"(add1"
" phase_98)"
"(find-or-create-header!_60"
"(add1"
" phase_98))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_107)))))"
"(for-loop_101"
" fold-var_105"
"(unsafe-cdr"
" lst_103))))"
" fold-var_102))))"
" for-loop_101)"
"(void)"
" lst_100))))))"
" loop!_96)"
" bodys_38"
" phase_54"
"(find-or-create-header!_60 phase_54)))"
"(void))"
"(values))))"
"(let-values(((as-required?_62)"
"(lambda(header_117)"
"(lambda(sym_118)"
"(registered-as-required? header_117 sym_118)))))"
"(let-values(((last-i_63)(sub1(length bodys_38))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop!_119)"
"(lambda(bodys_120"
" phase_121"
" header_122)"
"(let-values(((lst_123)"
" bodys_120)"
"((start_124)"
" 0))"
"(begin"
"(if(list? lst_123)"
"(void)"
"(let-values()"
"(in-list"
" lst_123)))"
"(if(exact-nonnegative-integer?"
" start_124)"
"(void)"
"(let-values()"
"(in-naturals"
" start_124)))"
"((letrec-values(((for-loop_125)"
"(lambda(fold-var_126"
" lst_127"
" pos_128)"
"(if(if(pair?"
" lst_127)"
" #t"
" #f)"
"(let-values(((body_129)"
"(unsafe-car"
" lst_127))"
"((i_130)"
" pos_128))"
"(let-values(((fold-var_131)"
"(let-values()"
"(let-values(((fold-var_133)"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_129)"
"(let-values()"
"(let-values(((ids_134)"
"(parsed-define-values-ids"
" body_129)))"
"(let-values(((binding-syms_135)"
"(parsed-define-values-syms"
" body_129)))"
"(let-values(((def-syms_136)"
"(if(compile-context-module-self"
" cctx_39)"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_138)"
" binding-syms_135))"
"(begin"
"(if(list?"
" lst_138)"
"(void)"
"(let-values()"
"(in-list"
" lst_138)))"
"((letrec-values(((for-loop_139)"
"(lambda(fold-var_140"
" lst_141)"
"(if(pair?"
" lst_141)"
"(let-values(((binding-sym_142)"
"(unsafe-car"
" lst_141)))"
"(let-values(((fold-var_143)"
"(let-values(((fold-var_144)"
" fold-var_140))"
"(let-values(((fold-var_145)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
"(header-binding-sym-to-define-sym"
" header_122)"
" binding-sym_142))"
" fold-var_144))))"
"(values"
" fold-var_145)))))"
"(for-loop_139"
" fold-var_143"
"(unsafe-cdr"
" lst_141))))"
" fold-var_140))))"
" for-loop_139)"
" null"
" lst_138)))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_146)"
" binding-syms_135))"
"(begin"
"(if(list?"
" lst_146)"
"(void)"
"(let-values()"
"(in-list"
" lst_146)))"
"((letrec-values(((for-loop_147)"
"(lambda(fold-var_148"
" lst_149)"
"(if(pair?"
" lst_149)"
"(let-values(((binding-sym_150)"
"(unsafe-car"
" lst_149)))"
"(let-values(((fold-var_151)"
"(let-values(((fold-var_152)"
" fold-var_148))"
"(let-values(((fold-var_153)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((header30_155)"
" header_122)"
"((temp31_156)"
"(compile-context-self"
" cctx_39))"
"((phase32_157)"
" phase_121)"
"((binding-sym33_158)"
" binding-sym_150)"
"((temp34_159)"
" #f)"
"((temp35_160)"
" #t))"
"(register-required-variable-use!19.1"
" temp35_160"
" #t"
" header30_155"
" temp31_156"
" phase32_157"
" binding-sym33_158"
" temp34_159)))"
" fold-var_152))))"
"(values"
" fold-var_153)))))"
"(for-loop_147"
" fold-var_151"
"(unsafe-cdr"
" lst_149))))"
" fold-var_148))))"
" for-loop_147)"
" null"
" lst_146))))))))"
"(let-values(((rhs_137)"
"(compile$2"
"(parsed-define-values-rhs"
" body_129)"
"(let-values(((the-struct_161)"
" cctx_39))"
"(if(compile-context?"
" the-struct_161)"
"(let-values(((phase36_162)"
" phase_121)"
"((header37_163)"
" header_122))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_161)"
" phase36_162"
"(compile-context-self"
" the-struct_161)"
"(compile-context-module-self"
" the-struct_161)"
"(compile-context-full-module-name"
" the-struct_161)"
"(compile-context-lazy-syntax-literals?"
" the-struct_161)"
" header37_163))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                            \"compile-context?\""
" the-struct_161)))"
"(if(="
"(length"
" ids_134)"
" 1)"
"(car"
" ids_134)"
" #f))))"
"(begin"
"(definition-callback_47)"
"(compiled-expression-callback_46"
" rhs_137"
"(length"
" def-syms_136)"
" phase_121"
"(as-required?_62"
" header_122))"
"(add-body!_58"
" phase_121"
"(propagate-inline-property"
"(correlate*"
"(parsed-s"
" body_129)"
"(list"
" 'define-values"
" def-syms_136"
" rhs_137))"
"(parsed-s"
" body_129)))"
"(if(let-values(((or-part_164)"
"(compile-context-module-self"
" cctx_39)))"
"(if or-part_164"
" or-part_164"
"(null?"
" ids_134)))"
"(void)"
"(let-values()"
"(begin"
"(add-body!_58"
" phase_121"
"(list*"
" 'if"
" #f"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_165)"
" def-syms_136))"
"(begin"
"(if(list?"
" lst_165)"
"(void)"
"(let-values()"
"(in-list"
" lst_165)))"
"((letrec-values(((for-loop_166)"
"(lambda(fold-var_167"
" lst_168)"
"(if(pair?"
" lst_168)"
"(let-values(((def-sym_169)"
"(unsafe-car"
" lst_168)))"
"(let-values(((fold-var_170)"
"(let-values(((fold-var_171)"
" fold-var_167))"
"(let-values(((fold-var_172)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'set!"
" def-sym_169"
" '(#f)))"
" fold-var_171))))"
"(values"
" fold-var_172)))))"
"(for-loop_166"
" fold-var_170"
"(unsafe-cdr"
" lst_168))))"
" fold-var_167))))"
" for-loop_166)"
" null"
" lst_165)))))"
" '((void))))"
"(add-body!_58"
" phase_121"
"(compile-top-level-bind"
" ids_134"
" binding-syms_135"
"(let-values(((the-struct_173)"
" cctx_39))"
"(if(compile-context?"
" the-struct_173)"
"(let-values(((phase38_174)"
" phase_121)"
"((header39_175)"
" header_122))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_173)"
" phase38_174"
"(compile-context-self"
" the-struct_173)"
"(compile-context-module-self"
" the-struct_173)"
"(compile-context-full-module-name"
" the-struct_173)"
"(compile-context-lazy-syntax-literals?"
" the-struct_173)"
" header39_175))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                         \"compile-context?\""
" the-struct_173)))"
" #f)))))))))))"
"(if(parsed-define-syntaxes?"
" body_129)"
"(let-values()"
"(let-values(((ids_176)"
"(parsed-define-syntaxes-ids"
" body_129)))"
"(let-values(((binding-syms_177)"
"(parsed-define-syntaxes-syms"
" body_129)))"
"(let-values(((next-header_178)"
"(find-or-create-header!_60"
"(add1"
" phase_121))))"
"(let-values(((gen-syms_179)"
"(alt-reverse"
"(let-values(((lst_182)"
" binding-syms_177))"
"(begin"
"(if(list?"
" lst_182)"
"(void)"
"(let-values()"
"(in-list"
" lst_182)))"
"((letrec-values(((for-loop_183)"
"(lambda(fold-var_184"
" lst_185)"
"(if(pair?"
" lst_185)"
"(let-values(((binding-sym_186)"
"(unsafe-car"
" lst_185)))"
"(let-values(((fold-var_187)"
"(let-values(((fold-var_188)"
" fold-var_184))"
"(let-values(((fold-var_189)"
"(let-values()"
"(cons"
"(let-values()"
"(select-fresh"
" binding-sym_186"
" next-header_178))"
" fold-var_188))))"
"(values"
" fold-var_189)))))"
"(for-loop_183"
" fold-var_187"
"(unsafe-cdr"
" lst_185))))"
" fold-var_184))))"
" for-loop_183)"
" null"
" lst_182))))))"
"(let-values(((rhs_180)"
"(compile$2"
"(parsed-define-syntaxes-rhs"
" body_129)"
"(let-values(((the-struct_190)"
" cctx_39))"
"(if(compile-context?"
" the-struct_190)"
"(let-values(((phase40_191)"
"(add1"
" phase_121))"
"((header41_192)"
" next-header_178))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_190)"
" phase40_191"
"(compile-context-self"
" the-struct_190)"
"(compile-context-module-self"
" the-struct_190)"
"(compile-context-full-module-name"
" the-struct_190)"
"(compile-context-lazy-syntax-literals?"
" the-struct_190)"
" header41_192))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                \"compile-context?\""
" the-struct_190))))))"
"(let-values((()"
"(begin"
"(definition-callback_47)"
"(values))))"
"(let-values((()"
"(begin"
"(compiled-expression-callback_46"
" rhs_180"
"(length"
" gen-syms_179)"
"(add1"
" phase_121)"
"(as-required?_62"
" header_122))"
"(values))))"
"(let-values(((transformer-set!s_181)"
"(alt-reverse"
"(let-values(((lst_193)"
" binding-syms_177)"
"((lst_194)"
" gen-syms_179))"
"(begin"
"(if(list?"
" lst_193)"
"(void)"
"(let-values()"
"(in-list"
" lst_193)))"
"(if(list?"
" lst_194)"
"(void)"
"(let-values()"
"(in-list"
" lst_194)))"
"((letrec-values(((for-loop_195)"
"(lambda(fold-var_196"
" lst_197"
" lst_198)"
"(if(if(pair?"
" lst_197)"
"(pair?"
" lst_198)"
" #f)"
"(let-values(((binding-sym_199)"
"(unsafe-car"
" lst_197))"
"((gen-sym_200)"
"(unsafe-car"
" lst_198)))"
"(let-values(((fold-var_201)"
"(let-values(((fold-var_202)"
" fold-var_196))"
"(let-values(((fold-var_203)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" set-transformer!-id"
"(list"
" 'quote"
" binding-sym_199)"
" gen-sym_200))"
" fold-var_202))))"
"(values"
" fold-var_203)))))"
"(for-loop_195"
" fold-var_201"
"(unsafe-cdr"
" lst_197)"
"(unsafe-cdr"
" lst_198))))"
" fold-var_196))))"
" for-loop_195)"
" null"
" lst_193"
" lst_194))))))"
"(begin"
"(if(compile-context-module-self"
" cctx_39)"
"(let-values()"
"(add-body!_58"
"(add1"
" phase_121)"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_179"
" rhs_180))"
"(list*"
" 'begin"
"(qq-append"
" transformer-set!s_181"
" '((void)))))))"
"(let-values()"
"(add-body!_58"
"(add1"
" phase_121)"
"(generate-top-level-define-syntaxes"
" gen-syms_179"
" rhs_180"
" transformer-set!s_181"
"(compile-top-level-bind"
" ids_176"
" binding-syms_177"
"(let-values(((the-struct_204)"
" cctx_39))"
"(if(compile-context?"
" the-struct_204)"
"(let-values(((phase42_205)"
" phase_121)"
"((header43_206)"
" header_122))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_204)"
" phase42_205"
"(compile-context-self"
" the-struct_204)"
"(compile-context-module-self"
" the-struct_204)"
"(compile-context-full-module-name"
" the-struct_204)"
"(compile-context-lazy-syntax-literals?"
" the-struct_204)"
" header43_206))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                  \"compile-context?\""
" the-struct_204)))"
" gen-syms_179)))))"
"(set! saw-define-syntaxes?_61"
" #t)))))))))))"
"(if(parsed-begin-for-syntax?"
" body_129)"
"(let-values()"
"(loop!_119"
"(parsed-begin-for-syntax-body"
" body_129)"
"(add1"
" phase_121)"
"(find-or-create-header!_60"
"(add1"
" phase_121))))"
"(if(let-values(((or-part_207)"
"(parsed-#%declare?"
" body_129)))"
"(if or-part_207"
" or-part_207"
"(let-values(((or-part_208)"
"(parsed-module?"
" body_129)))"
"(if or-part_208"
" or-part_208"
"(parsed-require?"
" body_129)))))"
"(let-values()"
"(let-values(((e_209)"
"(other-form-callback_48"
" body_129"
"(let-values(((the-struct_210)"
" cctx_39))"
"(if(compile-context?"
" the-struct_210)"
"(let-values(((phase44_211)"
" phase_121)"
"((header45_212)"
" header_122))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_210)"
" phase44_211"
"(compile-context-self"
" the-struct_210)"
"(compile-context-module-self"
" the-struct_210)"
"(compile-context-full-module-name"
" the-struct_210)"
"(compile-context-lazy-syntax-literals?"
" the-struct_210)"
" header45_212))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                            \"compile-context?\""
" the-struct_210))))))"
"(if e_209"
"(let-values()"
"(begin"
"(compiled-expression-callback_46"
" e_209"
" #f"
" phase_121"
"(as-required?_62"
" header_122))"
"(add-body!_58"
" phase_121"
" e_209)))"
"(void))))"
"(let-values()"
"(let-values(((e_213)"
"(compile$2"
" body_129"
"(let-values(((the-struct_214)"
" cctx_39))"
"(if(compile-context?"
" the-struct_214)"
"(let-values(((phase46_215)"
" phase_121)"
"((header47_216)"
" header_122))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_214)"
" phase46_215"
"(compile-context-self"
" the-struct_214)"
"(compile-context-module-self"
" the-struct_214)"
"(compile-context-full-module-name"
" the-struct_214)"
"(compile-context-lazy-syntax-literals?"
" the-struct_214)"
" header47_216))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                            \"compile-context?\""
" the-struct_214)))"
" #f"
"(="
" i_130"
" last-i_63))))"
"(begin"
"(compiled-expression-callback_46"
" e_213"
" #f"
" phase_121"
"(as-required?_62"
" header_122))"
"(add-body!_58"
" phase_121"
" e_213)))))))))"
"(void)))))"
"(values"
" fold-var_133)))))"
"(for-loop_125"
" fold-var_131"
"(unsafe-cdr"
" lst_127)"
"(+"
" pos_128"
" 1))))"
" fold-var_126))))"
" for-loop_125)"
"(void)"
" lst_123"
" start_124))))))"
" loop!_119)"
" bodys_38"
" phase_54"
"(find-or-create-header!_60 phase_54))"
"(values))))"
"(let-values(((encoded-root-expand-pos_64)"
"(if encoded-root-expand-ctx-box_44"
"(if(unbox encoded-root-expand-ctx-box_44)"
"(if(not"
"(if root-ctx-only-if-syntax?_45"
"(if(not saw-define-syntaxes?_61)"
"(syntax-literals-empty?"
" syntax-literals_56)"
" #f)"
" #f))"
"(add-syntax-literal!"
" syntax-literals_56"
"(unbox encoded-root-expand-ctx-box_44))"
" #f)"
" #f)"
" #f)))"
"(let-values(((phases-in-order_65)"
"(let-values(((temp48_217)"
"(hash-keys phase-to-body_57))"
"((<49_218) <))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp48_217"
" <49_218))))"
"(let-values(((min-phase_66)"
"(if(pair? phases-in-order_65)"
"(car phases-in-order_65)"
" phase_54)))"
"(let-values(((max-phase_67)"
"(if(pair? phases-in-order_65)"
"(car(alt-reverse phases-in-order_65))"
" phase_54)))"
"(let-values(((struct:link-info_68"
" link-info29_69"
" link-info?_70"
" link-info-link-module-uses_71"
" link-info-imports_72"
" link-info-extra-inspectorsss_73"
" link-info-def-decls_74)"
"(let-values(((struct:_219"
" make-_220"
" ?_221"
" -ref_222"
" -set!_223)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'link-info"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'link-info)))))"
"(values"
" struct:_219"
" make-_220"
" ?_221"
"(make-struct-field-accessor"
" -ref_222"
" 0"
" 'link-module-uses)"
"(make-struct-field-accessor"
" -ref_222"
" 1"
" 'imports)"
"(make-struct-field-accessor"
" -ref_222"
" 2"
" 'extra-inspectorsss)"
"(make-struct-field-accessor"
" -ref_222"
" 3"
" 'def-decls)))))"
"(let-values(((phase-to-link-info_76)"
"(let-values(((lst_254)"
" phases-in-order_65))"
"(begin"
"(if(list? lst_254)"
"(void)"
"(let-values()"
"(in-list lst_254)))"
"((letrec-values(((for-loop_255)"
"(lambda(table_256"
" lst_257)"
"(if(pair?"
" lst_257)"
"(let-values(((phase_258)"
"(unsafe-car"
" lst_257)))"
"(let-values(((table_259)"
"(let-values(((table_260)"
" table_256))"
"(let-values(((table_261)"
"(let-values()"
"(let-values(((key_262"
" val_263)"
"(let-values()"
"(let-values(((header_264)"
"(hash-ref"
" phase-to-header_59"
" phase_258"
" #f)))"
"(let-values(((link-module-uses_265"
" imports_266"
" extra-inspectorsss_267"
" def-decls_268)"
"(generate-links+imports"
" header_264"
" phase_258"
" cctx_39)))"
"(values"
" phase_258"
"(link-info29_69"
" link-module-uses_265"
" imports_266"
" extra-inspectorsss_267"
" def-decls_268)))))))"
"(hash-set"
" table_260"
" key_262"
" val_263)))))"
"(values"
" table_261)))))"
"(for-loop_255"
" table_259"
"(unsafe-cdr"
" lst_257))))"
" table_256))))"
" for-loop_255)"
" '#hash()"
" lst_254)))))"
"(let-values(((body-linklets+module-uses_77)"
"(let-values(((lst_269)"
" phases-in-order_65))"
"(begin"
"(if(list? lst_269)"
"(void)"
"(let-values()"
"(in-list lst_269)))"
"((letrec-values(((for-loop_270)"
"(lambda(table_271"
" lst_272)"
"(if(pair?"
" lst_272)"
"(let-values(((phase_273)"
"(unsafe-car"
" lst_272)))"
"(let-values(((table_274)"
"(let-values(((table_275)"
" table_271))"
"(let-values(((table_276)"
"(let-values()"
"(let-values(((key_277"
" val_278)"
"(let-values()"
"(let-values(((bodys_279)"
"(hash-ref"
" phase-to-body_57"
" phase_273)))"
"(let-values(((li_280)"
"(hash-ref"
" phase-to-link-info_76"
" phase_273)))"
"(let-values(((binding-sym-to-define-sym_281)"
"(header-binding-sym-to-define-sym"
"(hash-ref"
" phase-to-header_59"
" phase_273))))"
"(let-values(((module-uses_282)"
"(link-info-link-module-uses_71"
" li_280)))"
"(let-values(((linklet_283"
" new-module-uses_284)"
"(let-values()"
"((if to-source?_52"
"(lambda(l_285"
" name_286"
" keys_287"
" getter_288)"
"(values"
" l_285"
" keys_287))"
"(lambda(l_289"
" name_290"
" keys_291"
" getter_292)"
"(if cross-linklet-inlining?_53"
"(1/compile-linklet"
" l_289"
" name_290"
" keys_291"
" getter_292)"
"(values"
"(1/compile-linklet"
" l_289"
" name_290)"
" keys_291))))"
"(list*"
" 'linklet"
"(qq-append"
" body-imports_41"
"(link-info-imports_72"
" li_280))"
"(qq-append"
"(link-info-def-decls_74"
" li_280)"
"(alt-reverse"
"(let-values(((lst_293)"
"(header-binding-syms-in-order"
"(hash-ref"
" phase-to-header_59"
" phase_273))))"
"(begin"
"(if(list?"
" lst_293)"
"(void)"
"(let-values()"
"(in-list"
" lst_293)))"
"((letrec-values(((for-loop_294)"
"(lambda(fold-var_295"
" lst_296)"
"(if(pair?"
" lst_296)"
"(let-values(((binding-sym_297)"
"(unsafe-car"
" lst_296)))"
"(let-values(((fold-var_298)"
"(let-values(((fold-var_299)"
" fold-var_295))"
"(let-values(((fold-var_300)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((def-sym_301)"
"(hash-ref"
" binding-sym-to-define-sym_281"
" binding-sym_297)))"
"(list"
" def-sym_301"
" binding-sym_297)))"
" fold-var_299))))"
"(values"
" fold-var_300)))))"
"(for-loop_294"
" fold-var_298"
"(unsafe-cdr"
" lst_296))))"
" fold-var_295))))"
" for-loop_294)"
" null"
" lst_293)))))"
"(qq-append"
"(alt-reverse"
" bodys_279)"
" body-suffix-forms_42))"
" 'module"
"(list->vector"
"(append"
"(alt-reverse"
"(let-values(((lst_302)"
" body-imports_41))"
"(begin"
"(if(list?"
" lst_302)"
"(void)"
"(let-values()"
"(in-list"
" lst_302)))"
"((letrec-values(((for-loop_303)"
"(lambda(fold-var_304"
" lst_305)"
"(if(pair?"
" lst_305)"
"(let-values(((i_306)"
"(unsafe-car"
" lst_305)))"
"(let-values(((fold-var_307)"
"(let-values(((fold-var_308)"
" fold-var_304))"
"(let-values(((fold-var_309)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_308))))"
"(values"
" fold-var_309)))))"
"(for-loop_303"
" fold-var_307"
"(unsafe-cdr"
" lst_305))))"
" fold-var_304))))"
" for-loop_303)"
" null"
" lst_302))))"
"(link-info-link-module-uses_71"
" li_280)))"
"(if cross-linklet-inlining?_53"
"(make-module-use-to-linklet"
"(compile-context-namespace"
" cctx_39)"
" get-module-linklet-info_49"
"(link-info-link-module-uses_71"
" li_280))"
" #f)))))"
"(values"
" phase_273"
"(cons"
" linklet_283"
"(list-tail"
"(vector->list"
" new-module-uses_284)"
"(length"
" body-imports_41))))))))))))"
"(hash-set"
" table_275"
" key_277"
" val_278)))))"
"(values"
" table_276)))))"
"(for-loop_270"
" table_274"
"(unsafe-cdr"
" lst_272))))"
" table_271))))"
" for-loop_270)"
" '#hasheq()"
" lst_269)))))"
"(let-values(((body-linklets_78)"
"(let-values(((ht_310)"
" body-linklets+module-uses_77))"
"(begin"
"(if((lambda(ht_311)"
"(hash? ht_311))"
" ht_310)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_310)))"
"((letrec-values(((for-loop_312)"
"(lambda(table_313"
" i_314)"
"(if i_314"
"(let-values(((phase_315"
" l+mus_316)"
"(hash-iterate-key+value"
" ht_310"
" i_314)))"
"(let-values(((table_317)"
"(let-values(((table_318)"
" table_313))"
"(let-values(((table_319)"
"(let-values()"
"(let-values(((key_320"
" val_321)"
"(let-values()"
"(values"
" phase_315"
"(car"
" l+mus_316)))))"
"(hash-set"
" table_318"
" key_320"
" val_321)))))"
"(values"
" table_319)))))"
"(for-loop_312"
" table_317"
"(hash-iterate-next"
" ht_310"
" i_314))))"
" table_313))))"
" for-loop_312)"
" '#hasheq()"
"(hash-iterate-first"
" ht_310))))))"
"(let-values(((phase-to-link-module-uses_79)"
"(let-values(((ht_322)"
" body-linklets+module-uses_77))"
"(begin"
"(if((lambda(ht_323)"
"(hash? ht_323))"
" ht_322)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_322)))"
"((letrec-values(((for-loop_324)"
"(lambda(table_325"
" i_326)"
"(if i_326"
"(let-values(((phase_327"
" l+mus_328)"
"(hash-iterate-key+value"
" ht_322"
" i_326)))"
"(let-values(((table_329)"
"(let-values(((table_330)"
" table_325))"
"(let-values(((table_331)"
"(let-values()"
"(let-values(((key_332"
" val_333)"
"(let-values()"
"(values"
" phase_327"
"(cdr"
" l+mus_328)))))"
"(hash-set"
" table_330"
" key_332"
" val_333)))))"
"(values"
" table_331)))))"
"(for-loop_324"
" table_329"
"(hash-iterate-next"
" ht_322"
" i_326))))"
" table_325))))"
" for-loop_324)"
" '#hasheq()"
"(hash-iterate-first"
" ht_322))))))"
"(let-values(((phase-to-link-module-uses-expr_80)"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_79"
" mpis_40)))"
"(let-values(((phase-to-link-extra-inspectorsss_81)"
"(let-values(((ht_334)"
" phase-to-link-info_76))"
"(begin"
"(if((lambda(ht_335)"
"(hash? ht_335))"
" ht_334)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_334)))"
"((letrec-values(((for-loop_336)"
"(lambda(table_337"
" i_338)"
"(if i_338"
"(let-values(((phase_339"
" li_340)"
"(hash-iterate-key+value"
" ht_334"
" i_338)))"
"(let-values(((table_341)"
"(let-values(((table_342)"
" table_337))"
"(let-values(((table_343)"
"(let-values()"
"(let-values(((key_344"
" val_345)"
"(let-values()"
"(values"
" phase_339"
"(link-info-extra-inspectorsss_73"
" li_340)))))"
"(hash-set"
" table_342"
" key_344"
" val_345)))))"
"(values"
" table_343)))))"
"(for-loop_336"
" table_341"
"(hash-iterate-next"
" ht_334"
" i_338))))"
" table_337))))"
" for-loop_336)"
" '#hash()"
"(hash-iterate-first"
" ht_334))))))"
"(values"
" body-linklets_78"
" min-phase_66"
" max-phase_67"
" phase-to-link-module-uses_79"
" phase-to-link-module-uses-expr_80"
" phase-to-link-extra-inspectorsss_81"
" syntax-literals_56"
" encoded-root-expand-pos_64))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(compile-top-level-bind)"
"(lambda(ids_399 binding-syms_400 cctx_401 trans-exprs_402)"
"(let-values(((phase_403)(compile-context-phase cctx_401)))"
"(let-values(((self_404)(compile-context-self cctx_401)))"
"(let-values(((header_405)(compile-context-header cctx_401)))"
"(let-values(((mpis_406)(header-module-path-indexes header_405)))"
"(let-values(((top-level-bind-scope_407)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx(compile-context-namespace cctx_401)))))"
"(let-values(((self-expr_408)(add-module-path-index! mpis_406 self_404)))"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_409) ids_399)"
"((lst_410) binding-syms_400)"
"((lst_411)"
"(let-values(((or-part_412) trans-exprs_402))"
"(if or-part_412"
" or-part_412"
"(alt-reverse"
"(let-values(((lst_413) ids_399))"
"(begin"
"(if(list? lst_413)(void)(let-values()(in-list lst_413)))"
"((letrec-values(((for-loop_414)"
"(lambda(fold-var_415 lst_416)"
"(if(pair? lst_416)"
"(let-values(((id_417)(unsafe-car lst_416)))"
"(let-values(((fold-var_418)"
"(let-values(((fold-var_419)"
" fold-var_415))"
"(let-values(((fold-var_420)"
"(let-values()"
"(cons"
"(let-values() ''#f)"
" fold-var_419))))"
"(values fold-var_420)))))"
"(for-loop_414 fold-var_418(unsafe-cdr lst_416))))"
" fold-var_415))))"
" for-loop_414)"
" null"
" lst_413))))))))"
"(begin"
"(if(list? lst_409)(void)(let-values()(in-list lst_409)))"
"(if(list? lst_410)(void)(let-values()(in-list lst_410)))"
"(if(list? lst_411)(void)(let-values()(in-list lst_411)))"
"((letrec-values(((for-loop_421)"
"(lambda(fold-var_422 lst_423 lst_424 lst_425)"
"(if(if(pair? lst_423)(if(pair? lst_424)(pair? lst_425) #f) #f)"
"(let-values(((id_426)(unsafe-car lst_423))"
"((binding-sym_427)(unsafe-car lst_424))"
"((trans-expr_428)(unsafe-car lst_425)))"
"(let-values(((fold-var_429)"
"(let-values(((fold-var_430) fold-var_422))"
"(let-values(((fold-var_431)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id-stx_432)"
"(compile-quote-syntax"
"(remove-scope"
" id_426"
" top-level-bind-scope_407)"
" cctx_401)))"
"(list"
" top-level-bind!-id"
" id-stx_432"
" self-expr_408"
" phase_403"
" phase-shift-id"
" ns-id"
"(list 'quote binding-sym_427)"
"(if trans-exprs_402 #t #f)"
" trans-expr_428)))"
" fold-var_430))))"
"(values fold-var_431)))))"
"(for-loop_421"
" fold-var_429"
"(unsafe-cdr lst_423)"
"(unsafe-cdr lst_424)"
"(unsafe-cdr lst_425))))"
" fold-var_422))))"
" for-loop_421)"
" null"
" lst_409"
" lst_410"
" lst_411)))))))))))))"
"(define-values"
"(generate-top-level-define-syntaxes)"
"(lambda(gen-syms_435 rhs_436 transformer-set!s_437 finish_438)"
"(list"
" 'call-with-values"
"(list 'lambda '() rhs_436)"
"(list"
" 'case-lambda"
"(list gen-syms_435(list* 'begin(qq-append transformer-set!s_437(list* finish_438 '((void))))))"
"(list"
" '()"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_435"
"(list*"
" 'values"
"(alt-reverse"
"(let-values(((lst_439) gen-syms_435))"
"(begin"
"(if(list? lst_439)(void)(let-values()(in-list lst_439)))"
"((letrec-values(((for-loop_440)"
"(lambda(fold-var_441 lst_442)"
"(if(pair? lst_442)"
"(let-values(((s_443)(unsafe-car lst_442)))"
"(let-values(((fold-var_444)"
"(let-values(((fold-var_445) fold-var_441))"
"(let-values(((fold-var_446)"
"(let-values()"
"(cons(let-values() ''#f) fold-var_445))))"
"(values fold-var_446)))))"
"(for-loop_440 fold-var_444(unsafe-cdr lst_442))))"
" fold-var_441))))"
" for-loop_440)"
" null"
" lst_439)))))))"
"(list* 'begin finish_438 '((void)))))"
"(list 'args(list* 'let-values(list(list* gen-syms_435 '((apply values args)))) '((void))))))))"
"(define-values"
"(propagate-inline-property)"
"(lambda(e_447 orig-s_448)"
"(let-values(((v_449)(syntax-property$1 orig-s_448 'compiler-hint:cross-module-inline)))"
"(if v_449(correlated-property e_447 'compiler-hint:cross-module-inline v_449) e_447))))"
"(define-values"
"(make-module-use-to-linklet)"
"(lambda(ns_450 get-module-linklet-info_451 init-mus_452)"
"(let-values(((mu-intern-table_453)(make-hash)))"
"(let-values(((intern-module-use_454)"
"(lambda(mu_455)"
"(let-values(((mod-name_456)(1/module-path-index-resolve(module-use-module mu_455))))"
"(let-values(((or-part_457)"
"(hash-ref mu-intern-table_453(cons mod-name_456(module-use-phase mu_455)) #f)))"
"(if or-part_457"
" or-part_457"
"(begin"
"(hash-set! mu-intern-table_453(cons mod-name_456(module-use-phase mu_455)) mu_455)"
" mu_455)))))))"
"(begin"
"(for-each2 intern-module-use_454 init-mus_452)"
"(lambda(mu_458)"
"(if mu_458"
"(let-values()"
"(let-values(((mod-name_459)(1/module-path-index-resolve(module-use-module mu_458))))"
"(let-values(((mli_460)"
"(let-values(((or-part_461)"
"(get-module-linklet-info_451 mod-name_459(module-use-phase mu_458))))"
"(if or-part_461"
" or-part_461"
"(namespace->module-linklet-info ns_450 mod-name_459(module-use-phase mu_458))))))"
"(if mli_460"
"(values"
"(module-linklet-info-linklet-or-instance mli_460)"
"(if(module-linklet-info-module-uses mli_460)"
"(list->vector"
"(append"
" '(#f #f)"
"(alt-reverse"
"(let-values(((lst_462)(module-linklet-info-module-uses mli_460)))"
"(begin"
"(if(list? lst_462)(void)(let-values()(in-list lst_462)))"
"((letrec-values(((for-loop_463)"
"(lambda(fold-var_464 lst_465)"
"(if(pair? lst_465)"
"(let-values(((sub-mu_466)(unsafe-car lst_465)))"
"(let-values(((fold-var_467)"
"(let-values(((fold-var_468) fold-var_464))"
"(let-values(((fold-var_469)"
"(let-values()"
"(cons"
"(let-values()"
"(intern-module-use_454"
"(module-use1.1"
"(module-path-index-shift"
"(module-use-module"
" sub-mu_466)"
"(module-linklet-info-self"
" mli_460)"
"(module-use-module"
" mu_458))"
"(module-use-phase"
" sub-mu_466))))"
" fold-var_468))))"
"(values fold-var_469)))))"
"(for-loop_463 fold-var_467(unsafe-cdr lst_465))))"
" fold-var_464))))"
" for-loop_463)"
" null"
" lst_462))))))"
" #f))"
"(values #f #f)))))"
"(let-values()(values #f #f)))))))))"
"(void)"
"(void)"
"(define-values"
"(build-shared-data-linklet)"
"(lambda(cims_1 ns_2)"
"(let-values(((mpis_3)(make-module-path-index-table)))"
"(let-values(((mpi-trees_4)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_12)"
"(let-values(((vec_13 i_14)"
"(let-values(((vec_15 len_16)"
"(let-values(((vec_17)(compiled-in-memory-mpis cim_12)))"
"(begin"
"(if(vector? vec_17)(void)(let-values()(in-vector vec_17)))"
"(values vec_17(unsafe-vector-length vec_17))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_18)"
"(lambda(vec_19 i_20 pos_21)"
"(if(unsafe-fx< pos_21 len_16)"
"(let-values(((mpi_22)"
"(unsafe-vector-ref vec_15 pos_21)))"
"(let-values(((vec_23 i_24)"
"(let-values(((vec_25) vec_19)"
"((i_26) i_20))"
"(let-values(((vec_27 i_28)"
"(let-values()"
"(let-values(((new-vec_29)"
"(if(eq?"
" i_26"
"(unsafe-vector*-length"
" vec_25))"
"(grow-vector"
" vec_25)"
" vec_25)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_29"
" i_26"
"(let-values()"
"(add-module-path-index!/pos"
" mpis_3"
" mpi_22)))"
"(values"
" new-vec_29"
"(unsafe-fx+"
" i_26"
" 1)))))))"
"(values vec_27 i_28)))))"
"(for-loop_18 vec_23 i_24(unsafe-fx+ 1 pos_21))))"
"(values vec_19 i_20)))))"
" for-loop_18)"
"(make-vector 16)"
" 0"
" 0)))))"
"(shrink-vector vec_13 i_14))))))"
"(let-values(((syntax-literals_5)(make-syntax-literals)))"
"(let-values(((syntax-literals-trees_6)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_30)"
"(add-syntax-literals! syntax-literals_5(compiled-in-memory-syntax-literals cim_30))))))"
"(let-values(((module-uses-tables_7) null))"
"(let-values(((module-uses-tables-count_8) 0))"
"(let-values(((phase-to-link-module-uses-trees_9)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_31)"
"(let-values(((pos_32) module-uses-tables-count_8))"
"(begin"
"(set! module-uses-tables_7"
"(cons"
"(compiled-in-memory-phase-to-link-module-uses cim_31)"
" module-uses-tables_7))"
"(set! module-uses-tables-count_8(add1 pos_32))"
" pos_32))))))"
"(let-values(((syntax-literals-expr_10)"
"(generate-eager-syntax-literals! syntax-literals_5 mpis_3 0 #f ns_2)))"
"(let-values(((phase-to-link-module-uses-expr_11)"
"(list*"
" 'vector"
"(alt-reverse"
"(let-values(((lst_33)(alt-reverse module-uses-tables_7)))"
"(begin"
"(if(list? lst_33)(void)(let-values()(in-list lst_33)))"
"((letrec-values(((for-loop_34)"
"(lambda(fold-var_35 lst_36)"
"(if(pair? lst_36)"
"(let-values(((phase-to-link-module-uses_37)"
"(unsafe-car lst_36)))"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39) fold-var_35))"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_37"
" mpis_3))"
" fold-var_39))))"
"(values fold-var_40)))))"
"(for-loop_34 fold-var_38(unsafe-cdr lst_36))))"
" fold-var_35))))"
" for-loop_34)"
" null"
" lst_33)))))))"
"(1/compile-linklet"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list*"
" mpi-vector-id"
" '(mpi-vector-trees"
" phase-to-link-modules-vector"
" phase-to-link-modules-trees"
" syntax-literals"
" syntax-literals-trees))"
"(list 'define-values(list mpi-vector-id)(generate-module-path-index-deserialize mpis_3))"
"(list 'define-values '(mpi-vector-trees)(list 'quote mpi-trees_4))"
"(list 'define-values '(phase-to-link-modules-vector) phase-to-link-module-uses-expr_11)"
"(list"
" 'define-values"
" '(phase-to-link-modules-trees)"
"(list 'quote phase-to-link-module-uses-trees_9))"
"(list 'define-values '(syntax-literals) syntax-literals-expr_10)"
"(list"
" 'define-values"
" '(syntax-literals-trees)"
"(list 'quote syntax-literals-trees_6)))))))))))))))"
"(define-values"
"(map-cim-tree)"
"(lambda(cims_41 proc_42)"
"((letrec-values(((loop_43)"
"(lambda(cims_44)"
"(alt-reverse"
"(let-values(((lst_45) cims_44))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((cim_49)(unsafe-car lst_48)))"
"(let-values(((fold-var_50)"
"(let-values(((fold-var_51) fold-var_47))"
"(let-values(((fold-var_52)"
"(let-values()"
"(cons"
"(let-values()"
"(vector"
"(proc_42 cim_49)"
"(loop_43"
"(compiled-in-memory-pre-compiled-in-memorys"
" cim_49))"
"(loop_43"
"(compiled-in-memory-post-compiled-in-memorys"
" cim_49))))"
" fold-var_51))))"
"(values fold-var_52)))))"
"(for-loop_46 fold-var_50(unsafe-cdr lst_48))))"
" fold-var_47))))"
" for-loop_46)"
" null"
" lst_45)))))))"
" loop_43)"
" cims_41)))"
"(void)"
"(void)"
"(define-values"
"(compiled-tops->compiled-top8.1)"
"(lambda(merge-serialization?2_1"
" merge-serialization?5_2"
" namespace3_3"
" namespace6_4"
" to-source?1_5"
" to-source?4_6"
" all-cims7_7)"
"(let-values(((all-cims_8) all-cims7_7))"
"(let-values(((to-source?_9)(if to-source?4_6 to-source?1_5 #f)))"
"(let-values(((merge-serialization?_10)(if merge-serialization?5_2 merge-serialization?2_1 #f)))"
"(let-values(((ns_11)(if namespace6_4 namespace3_3 #f)))"
"(let-values()"
"(let-values(((cims_12)(remove-nontail-purely-functional all-cims_8)))"
"(if(= 1(length cims_12))"
"(let-values()(car cims_12))"
"(let-values()"
"(let-values(((sequence-ht_13)"
"(let-values(((lst_15) cims_12)((start_16) 0))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"(if(exact-nonnegative-integer? start_16)"
"(void)"
"(let-values()(in-naturals start_16)))"
"((letrec-values(((for-loop_17)"
"(lambda(table_18 lst_19 pos_20)"
"(if(if(pair? lst_19) #t #f)"
"(let-values(((cim_21)(unsafe-car lst_19))((i_22) pos_20))"
"(let-values(((table_23)"
"(let-values(((table_24) table_18))"
"(let-values(((table_25)"
"(let-values()"
"(let-values(((key_26"
" val_27)"
"(let-values()"
"(values"
"(string->symbol"
"(number->string"
" i_22))"
"((if to-source?_9"
" values"
" compiled-in-memory-linklet-directory)"
" cim_21)))))"
"(hash-set"
" table_24"
" key_26"
" val_27)))))"
"(values table_25)))))"
"(for-loop_17"
" table_23"
"(unsafe-cdr lst_19)"
"(+ pos_20 1))))"
" table_18))))"
" for-loop_17)"
" '#hasheq()"
" lst_15"
" start_16)))))"
"(let-values(((ht_14)"
"(if merge-serialization?_10"
"(hash-set"
" sequence-ht_13"
" 'data"
"(1/hash->linklet-directory"
"(hasheq"
" #f"
"(1/hash->linklet-bundle"
"(hasheq 0(build-shared-data-linklet cims_12 ns_11))))))"
" sequence-ht_13)))"
"(if to-source?_9"
"(let-values() ht_14)"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory ht_14)"
" #f"
" #f"
" #f"
" '#hasheqv()"
" #f"
" '#hasheqv()"
" '#()"
" '#()"
" cims_12"
" null"
" #f"
" #f)))))))))))))))"
"(define-values"
"(compiled-top->compiled-tops)"
"(lambda(ld_54)"
"(let-values(((ht_55)(1/linklet-directory->hash ld_54)))"
"(alt-reverse"
"(let-values(((start_56) 0)((end_57)(hash-count ht_55))((inc_58) 1))"
"(begin"
"(if(if(real? start_56)(if(real? end_57)(real? inc_58) #f) #f)"
"(void)"
"(let-values()(in-range start_56 end_57 inc_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(fold-var_60 pos_61)"
"(if(< pos_61 end_57)"
"(let-values(((i_62) pos_61))"
"(let-values(((fold-var_63)"
"(let-values(((top_64)"
"(hash-ref"
" ht_55"
"(string->symbol(number->string i_62))"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_65)"
"(lambda(fold-var_66)"
"(let-values()"
"(let-values(((fold-var_67)"
"(let-values(((fold-var_68)"
" fold-var_66))"
"(if top_64"
"(let-values(((fold-var_69)"
" fold-var_68))"
"(let-values(((fold-var_70)"
"(let-values()"
"(cons"
"(let-values()"
" top_64)"
" fold-var_69))))"
"(values fold-var_70)))"
" fold-var_68))))"
" fold-var_67)))))"
" for-loop_65)"
" fold-var_60)))))"
"(for-loop_59 fold-var_63(+ pos_61 inc_58))))"
" fold-var_60))))"
" for-loop_59)"
" null"
" start_56)))))))"
"(define-values"
"(remove-nontail-purely-functional)"
"(lambda(cims_71)"
"((letrec-values(((loop_72)"
"(lambda(cims_73)"
"(if(null? cims_73)"
"(let-values() null)"
"(if(null?(cdr cims_73))"
"(let-values() cims_73)"
"(if(if(compiled-in-memory?(car cims_73))"
"(compiled-in-memory-purely-functional?(car cims_73))"
" #f)"
"(let-values()(loop_72(cdr cims_73)))"
"(let-values()(cons(car cims_73)(cdr cims_73)))))))))"
" loop_72)"
" cims_71)))"
"(void)"
"(void)"
"(define-values"
"(struct:known-property known-property2.1 known-property?)"
"(let-values(((struct:_16 make-_17 ?_18 -ref_19 -set!_20)"
"(let-values()"
"(let-values()(make-struct-type 'known-property #f 0 0 #f null 'prefab #f '() #f 'known-property)))))"
"(values struct:_16 make-_17 ?_18)))"
"(define-values"
"(struct:known-function known-function3.1 known-function? known-function-arity known-function-pure?)"
"(let-values(((struct:_31 make-_32 ?_33 -ref_34 -set!_35)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-function #f 2 0 #f null 'prefab #f '(0 1) #f 'known-function)))))"
"(values"
" struct:_31"
" make-_32"
" ?_33"
"(make-struct-field-accessor -ref_34 0 'arity)"
"(make-struct-field-accessor -ref_34 1 'pure?))))"
"(define-values"
"(struct:known-struct-op known-struct-op4.1 known-struct-op? known-struct-op-type known-struct-op-field-count)"
"(let-values(((struct:_56 make-_57 ?_58 -ref_59 -set!_60)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-struct-op #f 2 0 #f null 'prefab #f '(0 1) #f 'known-struct-op)))))"
"(values"
" struct:_56"
" make-_57"
" ?_58"
"(make-struct-field-accessor -ref_59 0 'type)"
"(make-struct-field-accessor -ref_59 1 'field-count))))"
"(define-values"
"(any-side-effects?12.1)"
"(lambda(known-defns5_81 known-defns7_82 locals6_83 locals8_84 e9_85 expected-results10_86 required-reference?11_87)"
"(let-values(((e_88) e9_85))"
"(let-values(((expected-results_89) expected-results10_86))"
"(let-values(((required-reference?_90) required-reference?11_87))"
"(let-values(((defns_91)(if known-defns7_82 known-defns5_81 '#hasheq())))"
"(let-values(((locals_92)(if locals8_84 locals6_83 '#hasheq())))"
"(let-values()"
"(let-values(((actual-results_93)"
"((letrec-values(((loop_94)"
"(lambda(e_95 locals_96)"
"(let-values(((tmp_97)"
"(if(pair?(correlated-e e_95))"
"(correlated-e(car(correlated-e e_95)))"
" #f)))"
"(let-values(((index_98)"
"(if(symbol? tmp_97)"
"(hash-ref"
" '#hasheq((values . 3)"
"(begin . 5)"
"(void . 4)"
"(make-struct-type . 7)"
"(let-values . 2)"
"(quote . 1)"
"(letrec-values . 2)"
"(make-struct-field-mutator . 9)"
"(begin0 . 6)"
"(#%variable-reference . 1)"
"(lambda . 1)"
"(case-lambda . 1)"
"(make-struct-type-property . 10)"
"(make-struct-field-accessor . 8))"
" tmp_97"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_98 5)"
"(if(unsafe-fx< index_98 2)"
"(if(unsafe-fx< index_98 1)"
"(let-values()"
"(let-values(((v_99)(correlated-e e_95)))"
"(if(let-values(((or-part_100)(string? v_99)))"
"(if or-part_100"
" or-part_100"
"(let-values(((or-part_101)(number? v_99)))"
"(if or-part_101"
" or-part_101"
"(let-values(((or-part_102)"
"(boolean? v_99)))"
"(if or-part_102"
" or-part_102"
"(char? v_99)))))))"
"(let-values() 1)"
"(let-values(((c1_103)"
"(if(pair? v_99)"
"(hash-ref"
" defns_91"
"(correlated-e(car v_99))"
" #f)"
" #f)))"
"(if c1_103"
"((lambda(d_104)"
"(let-values(((ok?_105 _19_106 e20_107)"
"(let-values(((s_118) e_95))"
"(let-values(((orig-s_119)"
" s_118))"
"(let-values(((_19_120"
" e20_121)"
"(let-values(((s_122)"
"(if(syntax?$2"
" s_118)"
"(syntax-e$3"
" s_118)"
" s_118)))"
"(if(pair?"
" s_122)"
"(let-values(((_21_123)"
"(let-values(((s_125)"
"(car"
" s_122)))"
" s_125))"
"((e22_124)"
"(let-values(((s_126)"
"(cdr"
" s_122)))"
"(let-values(((s_127)"
"(if(syntax?$2"
" s_126)"
"(syntax-e$3"
" s_126)"
" s_126)))"
"(let-values(((flat-s_128)"
"(to-syntax-list.1$1"
" s_127)))"
"(if(not"
" flat-s_128)"
"(let-values()"
"((lambda(false_129"
" str_130"
" e_131)"
"(error"
" str_130))"
" #f"
"                                                                                                                                      \"bad syntax\""
" orig-s_119))"
"(let-values()"
" flat-s_128)))))))"
"(values"
" _21_123"
" e22_124))"
"((lambda(false_135"
" str_136"
" e_137)"
"(error"
" str_136))"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_119)))))"
"(values"
" #t"
" _19_120"
" e20_121))))))"
"(if(known-struct-op? d_104)"
"(if(eq?"
" 'constructor"
"(known-struct-op-type d_104))"
"(if(="
"(known-struct-op-field-count d_104)"
"(length e20_107))"
"(if(let-values(((lst_138) e20_107))"
"(begin"
"(if(list? lst_138)"
"(void)"
"(let-values()"
"(in-list lst_138)))"
"((letrec-values(((for-loop_139)"
"(lambda(result_140"
" lst_141)"
"(if(pair?"
" lst_141)"
"(let-values(((e_142)"
"(unsafe-car"
" lst_141)))"
"(let-values(((result_143)"
"(let-values()"
"(let-values(((result_145)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((e23_147)"
" e_142)"
"((temp24_148)"
" 1)"
"((required-reference?25_149)"
" required-reference?_90)"
"((locals26_150)"
" locals_96)"
"((defns27_151)"
" defns_91))"
"(any-side-effects?12.1"
" defns27_151"
" #t"
" locals26_150"
" #t"
" e23_147"
" temp24_148"
" required-reference?25_149)))))))"
"(values"
" result_145)))))"
"(if(not"
"((lambda x_152"
"(not"
" result_143))"
" e_142))"
"(for-loop_139"
" result_143"
"(unsafe-cdr"
" lst_141))"
" result_143)))"
" result_140))))"
" for-loop_139)"
" #t"
" lst_138)))"
" 1"
" #f)"
" #f)"
" #f)"
" #f)))"
" c1_103)"
"(let-values()"
"(if(let-values(((or-part_153)"
"(self-quoting-in-linklet?"
" v_99)))"
"(if or-part_153"
" or-part_153"
"(if(symbol? v_99)"
"(let-values(((or-part_154)"
"(hash-ref"
" locals_96"
" v_99"
" #f)))"
"(if or-part_154"
" or-part_154"
"(let-values(((or-part_155)"
"(built-in-symbol?"
" v_99)))"
"(if or-part_155"
" or-part_155"
"(required-reference?_90"
" v_99)))))"
" #f)))"
" 1"
" #f)))))))"
"(let-values() 1))"
"(if(unsafe-fx< index_98 3)"
"(let-values()"
"(let-values(((ok?_156"
" _28_157"
" ids29_158"
" rhs30_159"
" body31_160)"
"(let-values(((s_175) e_95))"
"(let-values(((orig-s_176) s_175))"
"(let-values(((_28_177"
" ids29_178"
" rhs30_179"
" body31_180)"
"(let-values(((s_181)"
"(if(syntax?$2"
" s_175)"
"(syntax-e$3"
" s_175)"
" s_175)))"
"(if(pair? s_181)"
"(let-values(((_32_182)"
"(let-values(((s_186)"
"(car"
" s_181)))"
" s_186))"
"((ids33_183"
" rhs34_184"
" body35_185)"
"(let-values(((s_187)"
"(cdr"
" s_181)))"
"(let-values(((s_188)"
"(if(syntax?$2"
" s_187)"
"(syntax-e$3"
" s_187)"
" s_187)))"
"(if(pair?"
" s_188)"
"(let-values(((ids36_189"
" rhs37_190)"
"(let-values(((s_192)"
"(car"
" s_188)))"
"(let-values(((s_193)"
"(if(syntax?$2"
" s_192)"
"(syntax-e$3"
" s_192)"
" s_192)))"
"(let-values(((flat-s_194)"
"(to-syntax-list.1$1"
" s_193)))"
"(if(not"
" flat-s_194)"
"(let-values()"
"((lambda(false_195"
" str_196"
" e_197)"
"(error"
" str_196))"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_176))"
"(let-values()"
"(let-values(((ids_201"
" rhs_202)"
"(let-values(((lst_203)"
" flat-s_194))"
"(begin"
"(if(list?"
" lst_203)"
"(void)"
"(let-values()"
"(in-list"
" lst_203)))"
"((letrec-values(((for-loop_204)"
"(lambda(ids_205"
" rhs_206"
" lst_207)"
"(if(pair?"
" lst_207)"
"(let-values(((s_208)"
"(unsafe-car"
" lst_207)))"
"(let-values(((ids_209"
" rhs_210)"
"(let-values(((ids_211)"
" ids_205)"
"((rhs_212)"
" rhs_206))"
"(let-values(((ids_213"
" rhs_214)"
"(let-values()"
"(let-values(((ids43_215"
" rhs44_216)"
"(let-values()"
"(let-values(((s_217)"
"(if(syntax?$2"
" s_208)"
"(syntax-e$3"
" s_208)"
" s_208)))"
"(if(pair?"
" s_217)"
"(let-values(((ids39_218)"
"(let-values(((s_220)"
"(car"
" s_217)))"
" s_220))"
"((rhs40_219)"
"(let-values(((s_221)"
"(cdr"
" s_217)))"
"(let-values(((s_222)"
"(if(syntax?$2"
" s_221)"
"(syntax-e$3"
" s_221)"
" s_221)))"
"(if(pair?"
" s_222)"
"(let-values(((rhs41_223)"
"(let-values(((s_224)"
"(car"
" s_222)))"
" s_224))"
"(()"
"(let-values(((s_225)"
"(cdr"
" s_222)))"
"(let-values(((s_226)"
"(if(syntax?$2"
" s_225)"
"(syntax-e$3"
" s_225)"
" s_225)))"
"(if(null?"
" s_226)"
"(values)"
"((lambda(false_227"
" str_228"
" e_229)"
"(error"
" str_228))"
" #f"
"                                                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_176))))))"
"(values"
" rhs41_223))"
"((lambda(false_230"
" str_231"
" e_232)"
"(error"
" str_231))"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_176))))))"
"(values"
" ids39_218"
" rhs40_219))"
"((lambda(false_233"
" str_234"
" e_235)"
"(error"
" str_234))"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_176))))))"
"(values"
"(cons"
" ids43_215"
" ids_211)"
"(cons"
" rhs44_216"
" rhs_212))))))"
"(values"
" ids_213"
" rhs_214)))))"
"(for-loop_204"
" ids_209"
" rhs_210"
"(unsafe-cdr"
" lst_207))))"
"(values"
" ids_205"
" rhs_206)))))"
" for-loop_204)"
" null"
" null"
" lst_203)))))"
"(values"
"(alt-reverse"
" ids_201)"
"(alt-reverse"
" rhs_202)))))))))"
"((body38_191)"
"(let-values(((s_236)"
"(cdr"
" s_188)))"
"(let-values(((s_237)"
"(if(syntax?$2"
" s_236)"
"(syntax-e$3"
" s_236)"
" s_236)))"
"(if(pair?"
" s_237)"
"(let-values(((body42_238)"
"(let-values(((s_239)"
"(car"
" s_237)))"
" s_239))"
"(()"
"(let-values(((s_240)"
"(cdr"
" s_237)))"
"(let-values(((s_241)"
"(if(syntax?$2"
" s_240)"
"(syntax-e$3"
" s_240)"
" s_240)))"
"(if(null?"
" s_241)"
"(values)"
"((lambda(false_242"
" str_243"
" e_244)"
"(error"
" str_243))"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_176))))))"
"(values"
" body42_238))"
"((lambda(false_245"
" str_246"
" e_247)"
"(error"
" str_246))"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_176))))))"
"(values"
" ids36_189"
" rhs37_190"
" body38_191))"
"((lambda(false_248"
" str_249"
" e_250)"
"(error"
" str_249))"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_176))))))"
"(values"
" _32_182"
" ids33_183"
" rhs34_184"
" body35_185))"
"((lambda(false_251"
" str_252"
" e_253)"
"(error str_252))"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_176)))))"
"(values"
" #t"
" _28_177"
" ids29_178"
" rhs30_179"
" body31_180))))))"
"(if(not"
"(let-values(((lst_254) ids29_158)"
"((lst_255) rhs30_159))"
"(begin"
"(if(list? lst_254)"
"(void)"
"(let-values()(in-list lst_254)))"
"(if(list? lst_255)"
"(void)"
"(let-values()(in-list lst_255)))"
"((letrec-values(((for-loop_256)"
"(lambda(result_257"
" lst_258"
" lst_259)"
"(if(if(pair? lst_258)"
"(pair? lst_259)"
" #f)"
"(let-values(((ids_260)"
"(unsafe-car"
" lst_258))"
"((rhs_261)"
"(unsafe-car"
" lst_259)))"
"(let-values(((result_262)"
"(let-values()"
"(let-values(((result_264)"
"(let-values()"
"(let-values()"
"(let-values(((rhs45_266)"
" rhs_261)"
"((temp46_267)"
"(correlated-length"
" ids_260))"
"((required-reference?47_268)"
" required-reference?_90)"
"((locals48_269)"
" locals_96)"
"((defns49_270)"
" defns_91))"
"(any-side-effects?12.1"
" defns49_270"
" #t"
" locals48_269"
" #t"
" rhs45_266"
" temp46_267"
" required-reference?47_268))))))"
"(values"
" result_264)))))"
"(if(if(not"
"((lambda x_271"
" result_262)"
" ids_260))"
"(not"
"((lambda x_272"
" result_262)"
" rhs_261))"
" #f)"
"(for-loop_256"
" result_262"
"(unsafe-cdr"
" lst_258)"
"(unsafe-cdr"
" lst_259))"
" result_262)))"
" result_257))))"
" for-loop_256)"
" #f"
" lst_254"
" lst_255))))"
"(loop_94"
" body31_160"
"(add-binding-info locals_96 ids29_158 rhs30_159))"
" #f)))"
"(if(unsafe-fx< index_98 4)"
"(let-values()"
"(let-values(((ok?_273 _50_274 e51_275)"
"(let-values(((s_286) e_95))"
"(let-values(((orig-s_287) s_286))"
"(let-values(((_50_288 e51_289)"
"(let-values(((s_290)"
"(if(syntax?$2"
" s_286)"
"(syntax-e$3"
" s_286)"
" s_286)))"
"(if(pair? s_290)"
"(let-values(((_52_291)"
"(let-values(((s_293)"
"(car"
" s_290)))"
" s_293))"
"((e53_292)"
"(let-values(((s_294)"
"(cdr"
" s_290)))"
"(let-values(((s_295)"
"(if(syntax?$2"
" s_294)"
"(syntax-e$3"
" s_294)"
" s_294)))"
"(let-values(((flat-s_296)"
"(to-syntax-list.1$1"
" s_295)))"
"(if(not"
" flat-s_296)"
"(let-values()"
"((lambda(false_297"
" str_298"
" e_299)"
"(error"
" str_298))"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_287))"
"(let-values()"
" flat-s_296)))))))"
"(values"
" _52_291"
" e53_292))"
"((lambda(false_303"
" str_304"
" e_305)"
"(error str_304))"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_287)))))"
"(values #t _50_288 e51_289))))))"
"(if(let-values(((lst_306) e51_275))"
"(begin"
"(if(list? lst_306)"
"(void)"
"(let-values()(in-list lst_306)))"
"((letrec-values(((for-loop_307)"
"(lambda(result_308 lst_309)"
"(if(pair? lst_309)"
"(let-values(((e_310)"
"(unsafe-car"
" lst_309)))"
"(let-values(((result_311)"
"(let-values()"
"(let-values(((result_313)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((e54_315)"
" e_310)"
"((temp55_316)"
" 1)"
"((required-reference?56_317)"
" required-reference?_90)"
"((locals57_318)"
" locals_96)"
"((defns58_319)"
" defns_91))"
"(any-side-effects?12.1"
" defns58_319"
" #t"
" locals57_318"
" #t"
" e54_315"
" temp55_316"
" required-reference?56_317)))))))"
"(values"
" result_313)))))"
"(if(not"
"((lambda x_320"
"(not"
" result_311))"
" e_310))"
"(for-loop_307"
" result_311"
"(unsafe-cdr"
" lst_309))"
" result_311)))"
" result_308))))"
" for-loop_307)"
" #t"
" lst_306)))"
"(length e51_275)"
" #f)))"
"(let-values()"
"(let-values(((ok?_321 _59_322 e60_323)"
"(let-values(((s_334) e_95))"
"(let-values(((orig-s_335) s_334))"
"(let-values(((_59_336 e60_337)"
"(let-values(((s_338)"
"(if(syntax?$2"
" s_334)"
"(syntax-e$3"
" s_334)"
" s_334)))"
"(if(pair? s_338)"
"(let-values(((_61_339)"
"(let-values(((s_341)"
"(car"
" s_338)))"
" s_341))"
"((e62_340)"
"(let-values(((s_342)"
"(cdr"
" s_338)))"
"(let-values(((s_343)"
"(if(syntax?$2"
" s_342)"
"(syntax-e$3"
" s_342)"
" s_342)))"
"(let-values(((flat-s_344)"
"(to-syntax-list.1$1"
" s_343)))"
"(if(not"
" flat-s_344)"
"(let-values()"
"((lambda(false_345"
" str_346"
" e_347)"
"(error"
" str_346))"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_335))"
"(let-values()"
" flat-s_344)))))))"
"(values"
" _61_339"
" e62_340))"
"((lambda(false_351"
" str_352"
" e_353)"
"(error str_352))"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_335)))))"
"(values #t _59_336 e60_337))))))"
"(if(let-values(((lst_354) e60_323))"
"(begin"
"(if(list? lst_354)"
"(void)"
"(let-values()(in-list lst_354)))"
"((letrec-values(((for-loop_355)"
"(lambda(result_356 lst_357)"
"(if(pair? lst_357)"
"(let-values(((e_358)"
"(unsafe-car"
" lst_357)))"
"(let-values(((result_359)"
"(let-values()"
"(let-values(((result_361)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((e63_363)"
" e_358)"
"((temp64_364)"
" 1)"
"((required-reference?65_365)"
" required-reference?_90)"
"((locals66_366)"
" locals_96)"
"((defns67_367)"
" defns_91))"
"(any-side-effects?12.1"
" defns67_367"
" #t"
" locals66_366"
" #t"
" e63_363"
" temp64_364"
" required-reference?65_365)))))))"
"(values"
" result_361)))))"
"(if(not"
"((lambda x_368"
"(not"
" result_359))"
" e_358))"
"(for-loop_355"
" result_359"
"(unsafe-cdr"
" lst_357))"
" result_359)))"
" result_356))))"
" for-loop_355)"
" #t"
" lst_354)))"
" 1"
" #f))))))"
"(if(unsafe-fx< index_98 7)"
"(if(unsafe-fx< index_98 6)"
"(let-values()"
"(let-values(((ok?_369 _68_370 e69_371)"
"(let-values(((s_382) e_95))"
"(let-values(((orig-s_383) s_382))"
"(let-values(((_68_384 e69_385)"
"(let-values(((s_386)"
"(if(syntax?$2"
" s_382)"
"(syntax-e$3"
" s_382)"
" s_382)))"
"(if(pair? s_386)"
"(let-values(((_70_387)"
"(let-values(((s_389)"
"(car"
" s_386)))"
" s_389))"
"((e71_388)"
"(let-values(((s_390)"
"(cdr"
" s_386)))"
"(let-values(((s_391)"
"(if(syntax?$2"
" s_390)"
"(syntax-e$3"
" s_390)"
" s_390)))"
"(let-values(((flat-s_392)"
"(to-syntax-list.1$1"
" s_391)))"
"(if(not"
" flat-s_392)"
"(let-values()"
"((lambda(false_393"
" str_394"
" e_395)"
"(error"
" str_394))"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_383))"
"(let-values()"
" flat-s_392)))))))"
"(values"
" _70_387"
" e71_388))"
"((lambda(false_399"
" str_400"
" e_401)"
"(error str_400))"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_383)))))"
"(values #t _68_384 e69_385))))))"
"((letrec-values(((bloop_402)"
"(lambda(es_403)"
"(if(null? es_403)"
"(let-values() #f)"
"(if(null?(cdr es_403))"
"(let-values()"
"(loop_94"
"(car es_403)"
" locals_96))"
"(let-values()"
"(if(not"
"(let-values(((temp72_405)"
"(car"
" es_403))"
"((temp73_406)"
" #f)"
"((required-reference?74_407)"
" required-reference?_90)"
"((locals75_408)"
" locals_96)"
"((defns76_409)"
" defns_91))"
"(any-side-effects?12.1"
" defns76_409"
" #t"
" locals75_408"
" #t"
" temp72_405"
" temp73_406"
" required-reference?74_407)))"
"(bloop_402(cdr es_403))"
" #f)))))))"
" bloop_402)"
" e69_371)))"
"(let-values()"
"(let-values(((ok?_410 _77_411 e078_412 e79_413)"
"(let-values(((s_426) e_95))"
"(let-values(((orig-s_427) s_426))"
"(let-values(((_77_428 e078_429 e79_430)"
"(let-values(((s_431)"
"(if(syntax?$2"
" s_426)"
"(syntax-e$3"
" s_426)"
" s_426)))"
"(if(pair? s_431)"
"(let-values(((_80_432)"
"(let-values(((s_435)"
"(car"
" s_431)))"
" s_435))"
"((e081_433"
" e82_434)"
"(let-values(((s_436)"
"(cdr"
" s_431)))"
"(let-values(((s_437)"
"(if(syntax?$2"
" s_436)"
"(syntax-e$3"
" s_436)"
" s_436)))"
"(if(pair?"
" s_437)"
"(let-values(((e083_438)"
"(let-values(((s_440)"
"(car"
" s_437)))"
" s_440))"
"((e84_439)"
"(let-values(((s_441)"
"(cdr"
" s_437)))"
"(let-values(((s_442)"
"(if(syntax?$2"
" s_441)"
"(syntax-e$3"
" s_441)"
" s_441)))"
"(let-values(((flat-s_443)"
"(to-syntax-list.1$1"
" s_442)))"
"(if(not"
" flat-s_443)"
"(let-values()"
"((lambda(false_444"
" str_445"
" e_446)"
"(error"
" str_445))"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_427))"
"(let-values()"
" flat-s_443)))))))"
"(values"
" e083_438"
" e84_439))"
"((lambda(false_450"
" str_451"
" e_452)"
"(error"
" str_451))"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_427))))))"
"(values"
" _80_432"
" e081_433"
" e82_434))"
"((lambda(false_453"
" str_454"
" e_455)"
"(error str_454))"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_427)))))"
"(values"
" #t"
" _77_428"
" e078_429"
" e79_430))))))"
"(if(let-values(((lst_456) e79_413))"
"(begin"
"(if(list? lst_456)"
"(void)"
"(let-values()(in-list lst_456)))"
"((letrec-values(((for-loop_457)"
"(lambda(result_458 lst_459)"
"(if(pair? lst_459)"
"(let-values(((e_460)"
"(unsafe-car"
" lst_459)))"
"(let-values(((result_461)"
"(let-values()"
"(let-values(((result_463)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((e85_465)"
" e_460)"
"((temp86_466)"
" #f)"
"((required-reference?87_467)"
" required-reference?_90)"
"((locals88_468)"
" locals_96)"
"((defns89_469)"
" defns_91))"
"(any-side-effects?12.1"
" defns89_469"
" #t"
" locals88_468"
" #t"
" e85_465"
" temp86_466"
" required-reference?87_467)))))))"
"(values"
" result_463)))))"
"(if(not"
"((lambda x_470"
"(not"
" result_461))"
" e_460))"
"(for-loop_457"
" result_461"
"(unsafe-cdr"
" lst_459))"
" result_461)))"
" result_458))))"
" for-loop_457)"
" #t"
" lst_456)))"
"(loop_94 e078_412 locals_96)"
" #f))))"
"(if(unsafe-fx< index_98 8)"
"(let-values()"
"(if(ok-make-struct-type?"
" e_95"
" required-reference?_90"
" defns_91)"
" 5"
" #f))"
"(if(unsafe-fx< index_98 9)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_95"
" locals_96"
" 'accessor"
" defns_91)"
" 1"
" #f))"
"(if(unsafe-fx< index_98 10)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_95"
" locals_96"
" 'mutator"
" defns_91)"
" 1"
" #f))"
"(let-values()"
"(if(ok-make-struct-type-property? e_95 defns_91)"
" 3"
" #f))))))))))))"
" loop_94)"
" e_88"
" locals_92)))"
"(not"
"(if actual-results_93"
"(let-values(((or-part_471)(not expected-results_89)))"
"(if or-part_471 or-part_471(= actual-results_93 expected-results_89)))"
" #f)))))))))))"
"(define-values"
"(add-binding-info)"
"(lambda(locals_498 idss_499 rhss_500)"
"(let-values(((lst_501) idss_499)((lst_502) rhss_500))"
"(begin"
"(if(list? lst_501)(void)(let-values()(in-list lst_501)))"
"(if(list? lst_502)(void)(let-values()(in-list lst_502)))"
"((letrec-values(((for-loop_503)"
"(lambda(locals_504 lst_505 lst_506)"
"(if(if(pair? lst_505)(pair? lst_506) #f)"
"(let-values(((ids_507)(unsafe-car lst_505))((rhs_508)(unsafe-car lst_506)))"
"(let-values(((locals_509)"
"(let-values(((locals_510) locals_504))"
"(let-values(((locals_511)"
"(let-values()"
"((letrec-values(((loop_512)"
"(lambda(rhs_513)"
"(let-values(((tmp_514)"
"(if(pair?"
"(correlated-e"
" rhs_513))"
"(correlated-e"
"(car"
"(correlated-e"
" rhs_513)))"
" #f)))"
"(if(equal?"
" tmp_514"
" 'make-struct-type)"
"(let-values()"
"(let-values(((field-count_515)"
"(extract-struct-field-count-lower-bound"
" rhs_513)))"
"(let-values(((lst_516)"
"(correlated->list"
" ids_507))"
"((lst_517)"
" '(struct-type"
" constructor"
" predicate"
" accessor"
" mutator)))"
"(begin"
"(if(list? lst_516)"
"(void)"
"(let-values()"
"(in-list lst_516)))"
"(if(list? lst_517)"
"(void)"
"(let-values()"
"(in-list lst_517)))"
"((letrec-values(((for-loop_518)"
"(lambda(locals_519"
" lst_520"
" lst_521)"
"(if(if(pair?"
" lst_520)"
"(pair?"
" lst_521)"
" #f)"
"(let-values(((id_522)"
"(unsafe-car"
" lst_520))"
"((type_523)"
"(unsafe-car"
" lst_521)))"
"(let-values(((locals_524)"
"(let-values(((locals_525)"
" locals_519))"
"(let-values(((locals_526)"
"(let-values()"
"(hash-set"
" locals_525"
"(correlated-e"
" id_522)"
"(known-struct-op4.1"
" type_523"
" field-count_515)))))"
"(values"
" locals_526)))))"
"(for-loop_518"
" locals_524"
"(unsafe-cdr"
" lst_520)"
"(unsafe-cdr"
" lst_521))))"
" locals_519))))"
" for-loop_518)"
" locals_510"
" lst_516"
" lst_517)))))"
"(if(equal? tmp_514 'let-values)"
"(let-values()"
"(if(null?"
"(correlated-e"
"(correlated-cadr"
" rhs_513)))"
"(loop_512"
"(caddr"
"(correlated->list"
" rhs_513)))"
"(loop_512 #f)))"
"(let-values()"
"(let-values(((lst_527)"
"(correlated->list"
" ids_507)))"
"(begin"
"(if(list? lst_527)"
"(void)"
"(let-values()"
"(in-list lst_527)))"
"((letrec-values(((for-loop_528)"
"(lambda(locals_529"
" lst_530)"
"(if(pair?"
" lst_530)"
"(let-values(((id_531)"
"(unsafe-car"
" lst_530)))"
"(let-values(((locals_532)"
"(let-values(((locals_533)"
" locals_529))"
"(let-values(((locals_534)"
"(let-values()"
"(hash-set"
" locals_533"
"(correlated-e"
" id_531)"
" #t))))"
"(values"
" locals_534)))))"
"(for-loop_528"
" locals_532"
"(unsafe-cdr"
" lst_530))))"
" locals_529))))"
" for-loop_528)"
" locals_510"
" lst_527))))))))))"
" loop_512)"
" rhs_508))))"
"(values locals_511)))))"
"(for-loop_503 locals_509(unsafe-cdr lst_505)(unsafe-cdr lst_506))))"
" locals_504))))"
" for-loop_503)"
" locals_498"
" lst_501"
" lst_502)))))"
"(define-values"
"(ok-make-struct-type-property?)"
"(lambda(e_535 defns_536)"
"(let-values(((l_537)(correlated->list e_535)))"
"(if(<= 2(length l_537) 5)"
"(let-values(((pos->vals_538 pos-next_539 init_540 pos-cont?_541 val-cont?_542 all-cont?_543)"
"(make-sequence '(arg)(cdr l_537)))"
"((pos->vals_544 pos-next_545 init_546 pos-cont?_547 val-cont?_548 all-cont?_549)"
"(make-sequence"
" '(pred)"
"(list"
"(lambda(v_550)(quoted? symbol? v_550))"
"(lambda(v_551)(is-lambda? v_551 2 defns_536))"
"(lambda(v_552)(ok-make-struct-type-property-super? v_552 defns_536))"
"(lambda(v_553)"
"(let-values(((v90_555) v_553)"
"((temp91_556) 1)"
"((temp92_557)(lambda(x_559) #f))"
"((defns93_558) defns_536))"
"(any-side-effects?12.1 defns93_558 #t #f #f v90_555 temp91_556 temp92_557)))))))"
"(begin"
"(void)"
"(void)"
"((letrec-values(((for-loop_560)"
"(lambda(result_561 pos_562 pos_563)"
"(if(if(if pos-cont?_541(pos-cont?_541 pos_562) #t)"
"(if pos-cont?_547(pos-cont?_547 pos_563) #t)"
" #f)"
"(let-values(((arg_564)(pos->vals_538 pos_562))((pred_565)(pos->vals_544 pos_563)))"
"(if(if(if val-cont?_542(val-cont?_542 arg_564) #t)"
"(if val-cont?_548(val-cont?_548 pred_565) #t)"
" #f)"
"(let-values(((result_566)"
"(let-values()"
"(let-values(((result_568)"
"(let-values()(let-values()(pred_565 arg_564)))))"
"(values result_568)))))"
"(if(if(if(if all-cont?_543(all-cont?_543 pos_562 arg_564) #t)"
"(not((lambda x_569(not result_566)) arg_564))"
" #f)"
"(if(if all-cont?_549(all-cont?_549 pos_563 pred_565) #t)"
"(not((lambda x_570(not result_566)) pred_565))"
" #f)"
" #f)"
"(for-loop_560 result_566(pos-next_539 pos_562)(pos-next_545 pos_563))"
" result_566))"
" result_561))"
" result_561))))"
" for-loop_560)"
" #t"
" init_540"
" init_546)))"
" #f))))"
"(define-values"
"(ok-make-struct-type-property-super?)"
"(lambda(v_571 defns_572)"
"(let-values(((or-part_573)(quoted? null? v_571)))"
"(if or-part_573"
" or-part_573"
"(let-values(((or-part_574)(eq? 'null(correlated-e v_571))))"
"(if or-part_574"
" or-part_574"
"(if(pair?(correlated-e v_571))"
"(if(eq?(correlated-e(car(correlated-e v_571))) 'list)"
"(if(let-values(((lst_575)(cdr(correlated->list v_571))))"
"(begin"
"(if(list? lst_575)(void)(let-values()(in-list lst_575)))"
"((letrec-values(((for-loop_576)"
"(lambda(result_577 lst_578)"
"(if(pair? lst_578)"
"(let-values(((prop+val_579)(unsafe-car lst_578)))"
"(let-values(((result_580)"
"(let-values()"
"(let-values(((result_582)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length prop+val_579)"
" 3)"
"(let-values(((prop+val_583)"
"(correlated->list"
" prop+val_579)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_583)))"
"(if(let-values(((or-part_584)"
"(memq"
"(correlated-e"
"(list-ref"
" prop+val_583"
" 1))"
" '(prop:procedure"
" prop:equal+hash"
" prop:custom-write))))"
"(if or-part_584"
" or-part_584"
"(known-property?"
"(hash-ref"
" defns_572"
"(correlated-e"
"(list-ref"
" prop+val_583"
" 1))"
" #f))))"
"(not"
"(let-values(((temp94_586)"
"(list-ref"
" prop+val_583"
" 2))"
"((temp95_587) 1)"
"((temp96_588)"
"(lambda(x_590)"
" #f))"
"((defns97_589)"
" defns_572))"
"(any-side-effects?12.1"
" defns97_589"
" #t"
" #f"
" #f"
" temp94_586"
" temp95_587"
" temp96_588)))"
" #f)"
" #f))"
" #f)))))"
"(values result_582)))))"
"(if(not((lambda x_591(not result_580)) prop+val_579))"
"(for-loop_576 result_580(unsafe-cdr lst_578))"
" result_580)))"
" result_577))))"
" for-loop_576)"
" #t"
" lst_575)))"
"(="
"(sub1(correlated-length v_571))"
"(set-count"
"(let-values(((lst_592)(cdr(correlated->list v_571))))"
"(begin"
"(if(list? lst_592)(void)(let-values()(in-list lst_592)))"
"((letrec-values(((for-loop_593)"
"(lambda(table_594 lst_595)"
"(if(pair? lst_595)"
"(let-values(((prop+val_596)(unsafe-car lst_595)))"
"(let-values(((table_597)"
"(let-values(((table_598) table_594))"
"(let-values(((table_599)"
"(let-values()"
"(let-values(((key_600 val_601)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_596)"
" 1)))"
" #t))))"
"(hash-set"
" table_598"
" key_600"
" val_601)))))"
"(values table_599)))))"
"(for-loop_593 table_597(unsafe-cdr lst_595))))"
" table_594))))"
" for-loop_593)"
" '#hash()"
" lst_592)))))"
" #f)"
" #f)"
" #f)))))))"
"(define-values"
"(ok-make-struct-type?)"
"(lambda(e_602 required-reference?_603 defns_604)"
"(let-values(((l_605)(correlated->list e_602)))"
"(let-values(((init-field-count-expr_606)(if(>(length l_605) 3)(list-ref l_605 3) #f)))"
"(let-values(((auto-field-count-expr_607)(if(>(length l_605) 4)(list-ref l_605 4) #f)))"
"(let-values(((num-fields_608)"
"(maybe+"
"(field-count-expr-to-field-count init-field-count-expr_606)"
"(field-count-expr-to-field-count auto-field-count-expr_607))))"
"(let-values(((immutables-expr_609)"
"(let-values(((or-part_611)(if(>(length l_605) 9)(list-ref l_605 9) #f)))"
"(if or-part_611 or-part_611 'null))))"
"(let-values(((super-expr_610)(if(>(length l_605) 2)(list-ref l_605 2) #f)))"
"(if(>=(length l_605) 5)"
"(if(<=(length l_605) 12)"
"(let-values(((pos->vals_612 pos-next_613 init_614 pos-cont?_615 val-cont?_616 all-cont?_617)"
"(make-sequence '(arg)(cdr l_605)))"
"((pos->vals_618 pos-next_619 init_620 pos-cont?_621 val-cont?_622 all-cont?_623)"
"(make-sequence"
" '(pred)"
"(list"
"(lambda(v_624)(quoted? symbol? v_624))"
"(lambda(v_625)(super-ok? v_625 defns_604))"
"(lambda(v_626)(field-count-expr-to-field-count v_626))"
"(lambda(v_627)(field-count-expr-to-field-count v_627))"
"(lambda(v_628)"
"(not"
"(let-values(((v98_630) v_628)"
"((temp99_631) 1)"
"((required-reference?100_632) required-reference?_603)"
"((defns101_633) defns_604))"
"(any-side-effects?12.1"
" defns101_633"
" #t"
" #f"
" #f"
" v98_630"
" temp99_631"
" required-reference?100_632))))"
"(lambda(v_634)"
"(known-good-struct-properties?"
" v_634"
" immutables-expr_609"
" super-expr_610"
" defns_604))"
"(lambda(v_635)(inspector-or-false? v_635))"
"(lambda(v_636)(procedure-spec? v_636 num-fields_608))"
"(lambda(v_637)(immutables-ok? v_637 init-field-count-expr_606))))))"
"(begin"
"(void)"
"(void)"
"((letrec-values(((for-loop_638)"
"(lambda(result_639 pos_640 pos_641)"
"(if(if(if pos-cont?_615(pos-cont?_615 pos_640) #t)"
"(if pos-cont?_621(pos-cont?_621 pos_641) #t)"
" #f)"
"(let-values(((arg_642)(pos->vals_612 pos_640))"
"((pred_643)(pos->vals_618 pos_641)))"
"(if(if(if val-cont?_616(val-cont?_616 arg_642) #t)"
"(if val-cont?_622(val-cont?_622 pred_643) #t)"
" #f)"
"(let-values(((result_644)"
"(let-values()"
"(let-values(((result_646)"
"(let-values()"
"(let-values()(pred_643 arg_642)))))"
"(values result_646)))))"
"(if(if(if(if all-cont?_617(all-cont?_617 pos_640 arg_642) #t)"
"(not((lambda x_647(not result_644)) arg_642))"
" #f)"
"(if(if all-cont?_623(all-cont?_623 pos_641 pred_643) #t)"
"(not((lambda x_648(not result_644)) pred_643))"
" #f)"
" #f)"
"(for-loop_638"
" result_644"
"(pos-next_613 pos_640)"
"(pos-next_619 pos_641))"
" result_644))"
" result_639))"
" result_639))))"
" for-loop_638)"
" #t"
" init_614"
" init_620)))"
" #f)"
" #f)))))))))"
"(define-values"
"(super-ok?)"
"(lambda(e_649 defns_650)"
"(let-values(((or-part_651)(quoted? false? e_649)))"
"(if or-part_651"
" or-part_651"
"(let-values(((o_652)(hash-ref defns_650(correlated-e e_649) #f)))"
"(if o_652(if(known-struct-op? o_652)(eq? 'struct-type(known-struct-op-type o_652)) #f) #f))))))"
"(define-values"
"(extract-struct-field-count-lower-bound)"
"(lambda(e_653)"
"(let-values(((l_654)(correlated->list e_653)))"
"(+(field-count-expr-to-field-count(list-ref l_654 3))(field-count-expr-to-field-count(list-ref l_654 4))))))"
"(define-values"
"(quoted?)"
"(lambda(val?_655 v_656)"
"(let-values(((or-part_657)"
"(if(pair?(correlated-e v_656))"
"(if(eq?(correlated-e(car(correlated-e v_656))) 'quote)"
"(val?_655(correlated-e(correlated-cadr v_656)))"
" #f)"
" #f)))"
"(if or-part_657 or-part_657(val?_655(correlated-e v_656))))))"
"(define-values"
"(quoted-value)"
"(lambda(v_658)(if(pair?(correlated-e v_658))(correlated-e(correlated-cadr v_658))(correlated-e v_658))))"
"(define-values(false?)(lambda(v_659)(eq?(correlated-e v_659) #f)))"
"(define-values"
"(field-count-expr-to-field-count)"
"(lambda(v_660)(if(quoted? exact-nonnegative-integer? v_660)(quoted-value v_660) #f)))"
"(define-values"
"(inspector-or-false?)"
"(lambda(v_661)"
"(let-values(((or-part_662)(quoted? false? v_661)))"
"(if or-part_662"
" or-part_662"
"(let-values(((or-part_663)(if(quoted? symbol? v_661)(eq? 'prefab(quoted-value v_661)) #f)))"
"(if or-part_663"
" or-part_663"
"(if(= 1(correlated-length v_661))"
"(eq? 'current-inspector(correlated-e(car(correlated-e v_661))))"
" #f)))))))"
"(define-values"
"(known-good-struct-properties?)"
"(lambda(v_664 immutables-expr_665 super-expr_666 defns_667)"
"(let-values(((or-part_668)(quoted? null? v_664)))"
"(if or-part_668"
" or-part_668"
"(let-values(((or-part_669)(eq? 'null(correlated-e v_664))))"
"(if or-part_669"
" or-part_669"
"(if(pair?(correlated-e v_664))"
"(if(eq?(correlated-e(car(correlated-e v_664))) 'list)"
"(if(let-values(((lst_670)(cdr(correlated->list v_664))))"
"(begin"
"(if(list? lst_670)(void)(let-values()(in-list lst_670)))"
"((letrec-values(((for-loop_671)"
"(lambda(result_672 lst_673)"
"(if(pair? lst_673)"
"(let-values(((prop+val_674)(unsafe-car lst_673)))"
"(let-values(((result_675)"
"(let-values()"
"(let-values(((result_677)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length prop+val_674)"
" 3)"
"(let-values(((prop+val_678)"
"(correlated->list"
" prop+val_674)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_678)))"
"(known-good-struct-property+value?"
"(list-ref prop+val_678 1)"
"(list-ref prop+val_678 2)"
" immutables-expr_665"
" super-expr_666"
" defns_667)"
" #f))"
" #f)))))"
"(values result_677)))))"
"(if(not((lambda x_679(not result_675)) prop+val_674))"
"(for-loop_671 result_675(unsafe-cdr lst_673))"
" result_675)))"
" result_672))))"
" for-loop_671)"
" #t"
" lst_670)))"
"(="
"(sub1(correlated-length v_664))"
"(set-count"
"(let-values(((lst_680)(cdr(correlated->list v_664))))"
"(begin"
"(if(list? lst_680)(void)(let-values()(in-list lst_680)))"
"((letrec-values(((for-loop_681)"
"(lambda(table_682 lst_683)"
"(if(pair? lst_683)"
"(let-values(((prop+val_684)(unsafe-car lst_683)))"
"(let-values(((table_685)"
"(let-values(((table_686) table_682))"
"(let-values(((table_687)"
"(let-values()"
"(let-values(((key_688 val_689)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_684)"
" 1)))"
" #t))))"
"(hash-set"
" table_686"
" key_688"
" val_689)))))"
"(values table_687)))))"
"(for-loop_681 table_685(unsafe-cdr lst_683))))"
" table_682))))"
" for-loop_681)"
" '#hash()"
" lst_680)))))"
" #f)"
" #f)"
" #f)))))))"
"(define-values"
"(known-good-struct-property+value?)"
"(lambda(prop-expr_690 val-expr_691 immutables-expr_692 super-expr_693 defns_694)"
"(let-values(((prop-name_695)(correlated-e prop-expr_690)))"
"(let-values(((tmp_696) prop-name_695))"
"(if(equal? tmp_696 'prop:evt)"
"(let-values()"
"(let-values(((or-part_697)(is-lambda? val-expr_691 1 defns_694)))"
"(if or-part_697 or-part_697(immutable-field? val-expr_691 immutables-expr_692))))"
"(if(equal? tmp_696 'prop:procedure)"
"(let-values()"
"(let-values(((or-part_698)(is-lambda? val-expr_691 1 defns_694)))"
"(if or-part_698 or-part_698(immutable-field? val-expr_691 immutables-expr_692))))"
"(if(equal? tmp_696 'prop:custom-write)"
"(let-values()(is-lambda? val-expr_691 3 defns_694))"
"(if(equal? tmp_696 'prop:equal+hash)"
"(let-values()"
"(let-values(((l_699)(correlated->list val-expr_691)))"
"(if(eq? 'list(car l_699))"
"(if(is-lambda?(list-ref l_699 1) 3 defns_694)"
"(if(is-lambda?(list-ref l_699 2) 2 defns_694)(is-lambda?(list-ref l_699 3) 2 defns_694) #f)"
" #f)"
" #f)))"
"(if(if(equal? tmp_696 'prop:method-arity-error) #t(equal? tmp_696 'prop:incomplete-arity))"
"(let-values()"
"(not"
"(let-values(((val-expr102_701) val-expr_691)"
"((temp103_702) 1)"
"((temp104_703)(lambda(x_705)(hash-ref defns_694 x_705 #f)))"
"((defns105_704) defns_694))"
"(any-side-effects?12.1 defns105_704 #t #f #f val-expr102_701 temp103_702 temp104_703))))"
"(if(equal? tmp_696 'prop:impersonator-of)"
"(let-values()(is-lambda? val-expr_691 1 defns_694))"
"(if(equal? tmp_696 'prop:arity-string)"
"(let-values()(is-lambda? val-expr_691 1 defns_694))"
"(if(equal? tmp_696 'prop:checked-procedure)"
"(let-values()(if(quoted? false? super-expr_693)(immutable-field? 1 immutables-expr_692) #f))"
"(let-values()"
"(let-values(((o_706)(hash-ref defns_694 prop-name_695 #f)))"
"(if o_706"
"(if(known-property? o_706)"
"(not"
"(let-values(((val-expr106_708) val-expr_691)"
"((temp107_709) 1)"
"((temp108_710)(lambda(x_712)(hash-ref defns_694 x_712 #f)))"
"((defns109_711) defns_694))"
"(any-side-effects?12.1"
" defns109_711"
" #t"
" #f"
" #f"
" val-expr106_708"
" temp107_709"
" temp108_710)))"
" #f)"
" #f)))))))))))))))"
"(define-values"
"(is-lambda?)"
"(lambda(expr_713 arity_714 defns_715)"
"(let-values(((lookup_716)(hash-ref defns_715 expr_713 #f)))"
"(let-values(((or-part_717)"
"(if lookup_716"
"(if(known-function? lookup_716)"
"(let-values(((or-part_718)(not arity_714)))"
"(if or-part_718 or-part_718(equal? arity_714(known-function-arity lookup_716))))"
" #f)"
" #f)))"
"(if or-part_717"
" or-part_717"
"(let-values(((or-part_719)"
"(if(pair?(correlated-e expr_713))"
"(if(eq? 'case-lambda(car(correlated-e expr_713)))(not arity_714) #f)"
" #f)))"
"(if or-part_719"
" or-part_719"
"(if(pair?(correlated-e expr_713))"
"(if(eq? 'lambda(car(correlated-e expr_713)))"
"(let-values(((or-part_720)(not arity_714)))"
"(if or-part_720"
" or-part_720"
"(= arity_714(length(correlated->list(cadr(correlated->list expr_713)))))))"
" #f)"
" #f))))))))"
"(define-values"
"(immutable-field?)"
"(lambda(val-expr_721 immutables-expr_722)"
"(if(quoted? exact-nonnegative-integer? val-expr_721)"
"(memv(quoted-value val-expr_721)(immutables-expr-to-immutables immutables-expr_722 null))"
" #f)))"
"(define-values"
"(immutables-expr-to-immutables)"
"(lambda(e_723 fail-v_724)"
"(let-values(((tmp_725)(if(pair?(correlated-e e_723))(correlated-e(car(correlated-e e_723))) #f)))"
"(if(equal? tmp_725 'quote)"
"(let-values()"
"(let-values(((v_726)(correlated-cadr e_723)))"
"(let-values(((or-part_727)"
"(if(correlated-length v_726)"
"(let-values(((l_728)(map2 correlated-e(correlated->list v_726))))"
"(if(andmap2 exact-nonnegative-integer? l_728)"
"(if(=(length l_728)(set-count(list->set l_728))) l_728 #f)"
" #f))"
" #f)))"
"(if or-part_727 or-part_727 fail-v_724))))"
"(let-values() fail-v_724)))))"
"(define-values"
"(procedure-spec?)"
"(lambda(e_729 field-count_730)"
"(let-values(((or-part_731)(quoted? false? e_729)))"
"(if or-part_731"
" or-part_731"
"(let-values(((or-part_732)"
"(if(quoted? exact-nonnegative-integer? e_729)"
"(if field-count_730(<(quoted-value e_729) field-count_730) #f)"
" #f)))"
"(if or-part_732 or-part_732(is-lambda? e_729 #f '#hasheq())))))))"
"(define-values"
"(immutables-ok?)"
"(lambda(e_733 init-field-count-expr_734)"
"(let-values(((l_735)(immutables-expr-to-immutables e_733 #f)))"
"(let-values(((c_736)(field-count-expr-to-field-count init-field-count-expr_734)))"
"(if l_735"
"(let-values(((lst_737) l_735))"
"(begin"
"(if(list? lst_737)(void)(let-values()(in-list lst_737)))"
"((letrec-values(((for-loop_738)"
"(lambda(result_739 lst_740)"
"(if(pair? lst_740)"
"(let-values(((n_741)(unsafe-car lst_740)))"
"(let-values(((result_742)"
"(let-values()"
"(let-values(((result_744)"
"(let-values()(let-values()(< n_741 c_736)))))"
"(values result_744)))))"
"(if(not((lambda x_745(not result_742)) n_741))"
"(for-loop_738 result_742(unsafe-cdr lst_740))"
" result_742)))"
" result_739))))"
" for-loop_738)"
" #t"
" lst_737)))"
" #f)))))"
"(define-values"
"(ok-make-struct-field-accessor/mutator?)"
"(lambda(e_746 locals_747 type_748 defns_749)"
"(let-values(((l_750)(correlated->list e_746)))"
"(let-values(((a_751)"
"(if(let-values(((or-part_752)(=(length l_750) 3)))"
"(if or-part_752 or-part_752(=(length l_750) 4)))"
"(hash-ref"
" locals_747"
"(correlated-e(list-ref l_750 1))"
"(lambda()(hash-ref defns_749(correlated-e(list-ref l_750 1)) #f)))"
" #f)))"
"(if(known-struct-op? a_751)"
"(if(eq?(known-struct-op-type a_751) type_748)"
"(if(<(field-count-expr-to-field-count(list-ref l_750 2))(known-struct-op-field-count a_751))"
"(let-values(((or-part_753)(=(length l_750) 3)))"
"(if or-part_753 or-part_753(quoted? symbol?(list-ref l_750 3))))"
" #f)"
" #f)"
" #f)))))"
"(define-values(maybe+)(lambda(x_754 y_755)(if x_754(if y_755(+ x_754 y_755) #f) #f)))"
"(void)"
"(void)"
"(define-values"
"(compile-single)"
"(lambda(p_1 cctx_2)"
"(let-values(((p12_4) p_1)((cctx13_5) cctx_2)((temp14_6) #f)((temp15_7) #t))"
"(compile-top9.1 temp14_6 #t temp15_7 #t #f #f p12_4 cctx13_5))))"
"(define-values"
"(compile-top9.1)"
"(lambda(serializable?1_8"
" serializable?4_9"
" single-expression?2_10"
" single-expression?5_11"
" to-source?3_12"
" to-source?6_13"
" p7_14"
" cctx8_15)"
"(let-values(((p_16) p7_14))"
"(let-values(((cctx_17) cctx8_15))"
"(let-values(((serializable?_18)(if serializable?4_9 serializable?1_8 #t)))"
"(let-values(((single-expression?_19)(if single-expression?5_11 single-expression?2_10 #f)))"
"(let-values(((to-source?_20)(if to-source?6_13 to-source?3_12 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((phase_21)(compile-context-phase cctx_17)))"
"(let-values(((mpis_22)(make-module-path-index-table)))"
"(let-values(((purely-functional?_23) #t))"
"(let-values(((body-linklets_24"
" min-phase_25"
" max-phase_26"
" phase-to-link-module-uses_27"
" phase-to-link-module-uses-expr_28"
" phase-to-link-extra-inspectorsss_29"
" syntax-literals_30"
" no-root-context-pos_31)"
"(let-values(((temp16_35)(list p_16))"
"((cctx17_36) cctx_17)"
"((mpis18_37) mpis_22)"
"((temp19_38)"
"(if single-expression?_19"
"(list* '()(list syntax-literals-id) '(()))"
"(list"
"(list top-level-bind!-id top-level-require!-id)"
"(list mpi-vector-id syntax-literals-id)"
" instance-imports)))"
"((to-source?20_39) to-source?_20)"
"((temp21_40)(lambda()(set! purely-functional?_23 #f)))"
"((temp22_41)"
"(lambda(e_44 expected-results_45 phase_46 required-reference?_47)"
"(if(if purely-functional?_23"
"(let-values(((e25_48) e_44)"
"((expected-results26_49) expected-results_45)"
"((required-reference?27_50)"
" required-reference?_47))"
"(any-side-effects?12.1"
" #f"
" #f"
" #f"
" #f"
" e25_48"
" expected-results26_49"
" required-reference?27_50))"
" #f)"
"(let-values()(set! purely-functional?_23 #f))"
"(void))))"
"((temp23_42)"
"(lambda(s_51 cctx_52)"
"(begin"
"(set! purely-functional?_23 #f)"
"(compile-top-level-require s_51 cctx_52))))"
"((temp24_43)(not single-expression?_19)))"
"(compile-forms26.1"
" temp19_38"
" #f"
" #f"
" temp22_41"
" #t"
" temp24_43"
" #t"
" temp21_40"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp23_42"
" #t"
" #f"
" #f"
" to-source?20_39"
" #t"
" temp16_35"
" cctx17_36"
" mpis18_37))))"
"(let-values(((add-metadata_32)"
"(lambda(ht_53)"
"(let-values(((ht_54)(hash-set ht_53 'original-phase phase_21)))"
"(let-values(((ht_55)(hash-set ht_54 'max-phase max-phase_26))) ht_55)))))"
"(let-values(((bundle_33)"
"((if to-source?_20 values 1/hash->linklet-bundle)"
"(add-metadata_32"
"(if serializable?_18"
"(let-values()"
"(let-values(((syntax-literals-expr_56)"
"(let-values()"
"(generate-eager-syntax-literals!"
" syntax-literals_30"
" mpis_22"
" phase_21"
"(compile-context-self cctx_17)"
"(compile-context-namespace cctx_17)))))"
"(let-values(((link-linklet_57)"
"((if to-source?_20"
" values"
"(lambda(s_58)"
"(let-values()(1/compile-linklet s_58))))"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list"
" mpi-vector-id"
" deserialized-syntax-vector-id"
" 'phase-to-link-modules"
" syntax-literals-id)"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize mpis_22))"
"(list"
" 'define-values"
"(list deserialized-syntax-vector-id)"
"(list* 'make-vector(add1 phase_21) '(#f)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_28)"
"(list"
" 'define-values"
"(list syntax-literals-id)"
" syntax-literals-expr_56)))))"
"(hash-set body-linklets_24 'link link-linklet_57))))"
"(let-values() body-linklets_24))))))"
"(if to-source?_20"
"(let-values()(hasheq #f bundle_33))"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory(hasheq #f bundle_33))"
" #f"
" #f"
" #f"
" phase-to-link-module-uses_27"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_29"
"(mpis-as-vector mpis_22)"
"(syntax-literals-as-vector syntax-literals_30)"
" null"
" null"
"(extract-namespace-scopes(compile-context-namespace cctx_17))"
" purely-functional?_23))))))))))))))))))"
"(define-values"
"(compile-top-level-require)"
"(lambda(p_88 cctx_89)"
"(let-values(((phase_90)(compile-context-phase cctx_89)))"
"(if(parsed-require? p_88)"
"(let-values()"
"(let-values(((form-stx_91)(compile-quote-syntax(syntax-disarm$1(parsed-s p_88)) cctx_89)))"
"(list top-level-require!-id form-stx_91 ns-id)))"
"(let-values() #f)))))"
"(void)"
"(void)"
"(define-values"
"(module-path->mpi5.1)"
"(lambda(declared-submodule-names1_1 declared-submodule-names2_2 mod-path3_3 self4_4)"
"(let-values(((mod-path_5) mod-path3_3))"
"(let-values(((self_6) self4_4))"
"(let-values(((declared-submodule-names_7)"
"(if declared-submodule-names2_2 declared-submodule-names1_1 '#hasheq())))"
"(let-values()"
"(if(if(list? mod-path_5)"
"(if(= 2(length mod-path_5))"
"(if(eq? 'quote(car mod-path_5))"
"(if(symbol?(cadr mod-path_5))(hash-ref declared-submodule-names_7(cadr mod-path_5) #f) #f)"
" #f)"
" #f)"
" #f)"
"              (let-values () (1/module-path-index-join (list 'submod \".\" (cadr mod-path_5)) self_6))"
"(if(if(list? mod-path_5)"
"(if(eq? 'submod(car mod-path_5))"
"(let-values(((mod-path_8)(cadr mod-path_5)))"
"(if(list? mod-path_8)"
"(if(= 2(length mod-path_8))"
"(if(eq? 'quote(car mod-path_8))"
"(if(symbol?(cadr mod-path_8))"
"(hash-ref declared-submodule-names_7(cadr mod-path_8) #f)"
" #f)"
" #f)"
" #f)"
" #f))"
" #f)"
" #f)"
"(let-values()"
"                  (1/module-path-index-join (list* 'submod \".\" (cadr (cadr mod-path_5)) (cddr mod-path_5)) self_6))"
"(let-values()(1/module-path-index-join mod-path_5 self_6))))))))))"
"(define-values"
"(module-path->mpi/context)"
"(lambda(mod-path_26 ctx_27)"
"(let-values(((mod-path8_29) mod-path_26)"
"((temp9_30)(namespace-mpi(expand-context-namespace ctx_27)))"
"((temp10_31)(expand-context-declared-submodule-names ctx_27)))"
"(module-path->mpi5.1 temp10_31 #t mod-path8_29 temp9_30))))"
"(void)"
"(void)"
"(define-values"
"(syntax-mapped-names)"
"(lambda(s_1 phase_2)"
"(let-values(((s-scs_3)(syntax-scope-set s_1 phase_2)))"
"(let-values(((ht_4) s-scs_3))"
"(begin"
"(if((lambda(ht_5)(if(hash? ht_5)(immutable? ht_5) #f)) ht_4)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_4)))"
"((letrec-values(((for-loop_6)"
"(lambda(syms_7 i_8)"
"(if i_8"
"(let-values(((sc_9)(unsafe-immutable-hash-iterate-key ht_4 i_8)))"
"(let-values(((syms_10)"
"(let-values(((syms_11) syms_7))"
"(let-values(((syms_12)"
"(let-values()"
"(set-union"
" syms_11"
"(binding-table-symbols"
"(scope-binding-table sc_9)"
" s-scs_3"
" s_1"
" null)))))"
"(values syms_12)))))"
"(for-loop_6 syms_10(unsafe-immutable-hash-iterate-next ht_4 i_8))))"
" syms_7))))"
" for-loop_6)"
"(seteq)"
"(unsafe-immutable-hash-iterate-first ht_4)))))))"
"(void)"
"(void)"
"(define-values"
"(struct:requires+provides"
" requires+provides1.1"
" requires+provides?"
" requires+provides-self"
" requires+provides-require-mpis"
" requires+provides-require-mpis-in-order"
" requires+provides-requires"
" requires+provides-provides"
" requires+provides-phase-to-defined-syms"
" requires+provides-can-cross-phase-persistent?"
" requires+provides-all-bindings-simple?"
" set-requires+provides-can-cross-phase-persistent?!"
" set-requires+provides-all-bindings-simple?!)"
"(let-values(((struct:_36 make-_37 ?_38 -ref_39 -set!_40)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'requires+provides"
" #f"
" 8"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'requires+provides)))))"
"(values"
" struct:_36"
" make-_37"
" ?_38"
"(make-struct-field-accessor -ref_39 0 'self)"
"(make-struct-field-accessor -ref_39 1 'require-mpis)"
"(make-struct-field-accessor -ref_39 2 'require-mpis-in-order)"
"(make-struct-field-accessor -ref_39 3 'requires)"
"(make-struct-field-accessor -ref_39 4 'provides)"
"(make-struct-field-accessor -ref_39 5 'phase-to-defined-syms)"
"(make-struct-field-accessor -ref_39 6 'can-cross-phase-persistent?)"
"(make-struct-field-accessor -ref_39 7 'all-bindings-simple?)"
"(make-struct-field-mutator -set!_40 6 'can-cross-phase-persistent?)"
"(make-struct-field-mutator -set!_40 7 'all-bindings-simple?))))"
"(define-values"
"(struct:required required2.1 required? required-id required-phase required-can-be-shadowed? required-as-transformer?)"
"(let-values(((struct:_91 make-_92 ?_93 -ref_94 -set!_95)"
"(let-values()"
"(let-values()"
"(make-struct-type 'required #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'required)))))"
"(values"
" struct:_91"
" make-_92"
" ?_93"
"(make-struct-field-accessor -ref_94 0 'id)"
"(make-struct-field-accessor -ref_94 1 'phase)"
"(make-struct-field-accessor -ref_94 2 'can-be-shadowed?)"
"(make-struct-field-accessor -ref_94 3 'as-transformer?))))"
"(define-values"
"(struct:bulk-required"
" bulk-required4.1"
" bulk-required?"
" bulk-required-provides"
" bulk-required-prefix-len"
" bulk-required-s"
" bulk-required-provide-phase-level"
" bulk-required-can-be-shadowed?)"
"(let-values(((struct:_161 make-_162 ?_163 -ref_164 -set!_165)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-required"
" #f"
" 5"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'bulk-required)))))"
"(values"
" struct:_161"
" make-_162"
" ?_163"
"(make-struct-field-accessor -ref_164 0 'provides)"
"(make-struct-field-accessor -ref_164 1 'prefix-len)"
"(make-struct-field-accessor -ref_164 2 's)"
"(make-struct-field-accessor -ref_164 3 'provide-phase-level)"
"(make-struct-field-accessor -ref_164 4 'can-be-shadowed?))))"
"(define-values"
"(make-requires+provides)"
"(lambda(self_201)"
"(requires+provides1.1"
" self_201"
"(make-module-path-index-intern-table)"
"(make-hasheqv)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheqv)"
" #t"
" #t)))"
"(define-values"
"(requires+provides-reset!)"
"(lambda(r+p_202)"
"(begin"
"(hash-clear!(requires+provides-require-mpis-in-order r+p_202))"
"(hash-clear!(requires+provides-requires r+p_202))"
"(hash-clear!(requires+provides-provides r+p_202))"
"(hash-clear!(requires+provides-phase-to-defined-syms r+p_202)))))"
"(define-values"
"(intern-mpi)"
"(lambda(r+p_203 mpi_204)(intern-module-path-index!(requires+provides-require-mpis r+p_203) mpi_204)))"
"(define-values"
"(add-required-module!)"
"(lambda(r+p_205 mod-name_206 phase-shift_207 is-cross-phase-persistent?_208)"
"(let-values(((mpi_209)(intern-mpi r+p_205 mod-name_206)))"
"(begin"
"(if(hash-ref(hash-ref(requires+provides-requires r+p_205) mpi_209 '#hasheqv()) phase-shift_207 #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-update!"
"(requires+provides-require-mpis-in-order r+p_205)"
" phase-shift_207"
"(lambda(l_210)(cons mpi_209 l_210))"
" null)"
"(hash-set!"
"(hash-ref!(requires+provides-requires r+p_205) mpi_209 make-hasheqv)"
" phase-shift_207"
"(make-hasheq)))))"
"(if is-cross-phase-persistent?_208"
"(void)"
"(let-values()(set-requires+provides-can-cross-phase-persistent?! r+p_205 #f)))"
" mpi_209))))"
"(define-values"
"(add-defined-or-required-id!13.1)"
"(lambda(as-transformer?6_221 can-be-shadowed?5_222 can-be-shadowed?7_223 r+p9_224 id10_225 phase11_226 binding12_227)"
"(let-values(((r+p_228) r+p9_224))"
"(let-values(((id_229) id10_225))"
"(let-values(((phase_230) phase11_226))"
"(let-values(((binding_231) binding12_227))"
"(let-values(((can-be-shadowed?_232)(if can-be-shadowed?7_223 can-be-shadowed?5_222 #f)))"
"(let-values(((as-transformer?_233) as-transformer?6_221))"
"(let-values()"
"(begin"
"(if(equal?"
" phase_230"
"(phase+"
"(module-binding-nominal-phase binding_231)"
"(module-binding-nominal-require-phase binding_231)))"
"(void)"
"                      (let-values () (error \"internal error: binding phase does not match nominal info\")))"
"(let-values(((.../require+provide.rkt:118:2_234) add-defined-or-required-id-at-nominal!29.1)"
"((r+p108_235) r+p_228)"
"((id109_236) id_229)"
"((phase110_237) phase_230)"
"((temp111_238)(module-binding-nominal-module binding_231))"
"((temp112_239)(module-binding-nominal-require-phase binding_231))"
"((can-be-shadowed?113_240) can-be-shadowed?_232)"
"((as-transformer?114_241) as-transformer?_233))"
"(add-defined-or-required-id-at-nominal!27.1"
" as-transformer?114_241"
" can-be-shadowed?113_240"
" temp111_238"
" temp112_239"
" r+p108_235"
" id109_236"
" phase110_237))))))))))))"
"(define-values"
"(lifted/6.1$7 lifted/7.1$7 lifted/8.1$7 lifted/9.1$7 lifted/10.1$7)"
"(make-struct-type"
" 'add-defined-or-required-id-at-nominal!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'add-defined-or-required-id-at-nominal!"
"(case-lambda((self_261 r+p_262 id_263 phase_264)(apply missing-kw self_261 r+p_262 id_263 phase_264 null))))))"
"(current-inspector)"
"(case-lambda((self_265 r+p_266 id_267 phase_268)(apply missing-kw self_265 r+p_266 id_267 phase_268 null)))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!27.1)"
"(lambda(as-transformer?19_269"
" can-be-shadowed?18_270"
" nominal-module16_271"
" nominal-require-phase17_272"
" r+p24_273"
" id25_274"
" phase26_275)"
"(let-values(((r+p_276) r+p24_273))"
"(let-values(((id_277) id25_274))"
"(let-values(((phase_278) phase26_275))"
"(let-values(((nominal-module_279) nominal-module16_271))"
"(let-values(((nominal-require-phase_280) nominal-require-phase17_272))"
"(let-values(((can-be-shadowed?_281) can-be-shadowed?18_270))"
"(let-values(((as-transformer?_282) as-transformer?19_269))"
"(let-values()"
"(let-values(((at-mod_283)"
"(hash-ref!"
"(requires+provides-requires r+p_276)"
"(intern-mpi r+p_276 nominal-module_279)"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_284)(hash-ref! at-mod_283 nominal-require-phase_280 make-hasheq)))"
"(let-values(((sym_285)(syntax-e$1 id_277)))"
"(hash-set!"
" sym-to-reqds_284"
" sym_285"
"(cons"
"(required2.1 id_277 phase_278 can-be-shadowed?_281 as-transformer?_282)"
"(hash-ref sym-to-reqds_284 sym_285 null))))))))))))))))"
"(define-values"
"(unpack28.1)"
"(lambda(given-kws_286 given-args_287 r+p24_288 id25_289 phase26_290)"
"(let-values(((as-transformer?19_291)(car given-args_287))"
"((given-kws_292)(cdr given-kws_286))"
"((given-args_293)(cdr given-args_287)))"
"(let-values(((can-be-shadowed?18_294)(car given-args_293))"
"((given-kws_295)(cdr given-kws_292))"
"((given-args_296)(cdr given-args_293)))"
"(let-values(((nominal-module16_297)(car given-args_296))"
"((given-kws_298)(cdr given-kws_295))"
"((given-args_299)(cdr given-args_296)))"
"(let-values(((nominal-require-phase17_300)(car given-args_299)))"
"(add-defined-or-required-id-at-nominal!27.1"
" as-transformer?19_291"
" can-be-shadowed?18_294"
" nominal-module16_297"
" nominal-require-phase17_300"
" r+p24_288"
" id25_289"
" phase26_290)))))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!29.1)"
"(lifted/7.1$7"
"(lambda(given-kws_301 given-argc_302)"
"(if(= given-argc_302 5)"
"(let-values(((l2_303) given-kws_301))"
"(if(pair? l2_303)"
"(if(eq?(car l2_303) '#:as-transformer?)"
"(let-values(((l2_304)(cdr l2_303)))"
"(if(pair? l2_304)"
"(if(eq?(car l2_304) '#:can-be-shadowed?)"
"(let-values(((l2_305)(cdr l2_304)))"
"(if(pair? l2_305)"
"(if(eq?(car l2_305) '#:nominal-module)"
"(let-values(((l2_306)(cdr l2_305)))"
"(if(pair? l2_306)"
"(if(eq?(car l2_306) '#:nominal-require-phase)(null?(cdr l2_306)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_307 given-args_308 r+p_309 id_310 phase_311)"
"(unpack28.1 given-kws_307 given-args_308 r+p_309 id_310 phase_311)))"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)))"
"(define-values"
"(add-bulk-required-ids!53.1)"
"(lambda(accum-update-nominals36_328"
" can-be-shadowed?34_329"
" check-and-remove?35_330"
" excepts31_331"
" in33_332"
" prefix30_333"
" symbols-accum32_334"
" who37_335"
" r+p46_336"
" s47_337"
" self48_338"
" nominal-module49_339"
" phase-shift50_340"
" provides51_341"
" provide-phase-level52_342)"
"(let-values(((r+p_343) r+p46_336))"
"(let-values(((s_344) s47_337))"
"(let-values(((self_345) self48_338))"
"(let-values(((nominal-module_346) nominal-module49_339))"
"(let-values(((phase-shift_347) phase-shift50_340))"
"(let-values(((provides_348) provides51_341))"
"(let-values(((provide-phase-level_349) provide-phase-level52_342))"
"(let-values(((bulk-prefix_350) prefix30_333))"
"(let-values(((bulk-excepts_351) excepts31_331))"
"(let-values(((symbols-accum_352) symbols-accum32_334))"
"(let-values(((orig-s_353) in33_332))"
"(let-values(((can-be-shadowed?_354) can-be-shadowed?34_329))"
"(let-values(((check-and-remove?_355) check-and-remove?35_330))"
"(let-values(((accum-update-nominals_356) accum-update-nominals36_328))"
"(let-values(((who_357) who37_335))"
"(let-values()"
"(let-values(((phase_358)(phase+ provide-phase-level_349 phase-shift_347)))"
"(let-values(((shortcut-table_359)"
"(if check-and-remove?_355"
"(if(>(hash-count provides_348) 64)"
"(syntax-mapped-names s_344 phase_358)"
" #f)"
" #f)))"
"(let-values(((mpi_360)(intern-mpi r+p_343 nominal-module_346)))"
"(let-values(((at-mod_361)"
"(hash-ref!"
"(requires+provides-requires r+p_343)"
" mpi_360"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_362)"
"(hash-ref! at-mod_361 phase-shift_347 make-hasheq)))"
"(let-values(((prefix-len_363)"
"(if bulk-prefix_350"
"(string-length(symbol->string bulk-prefix_350))"
" 0)))"
"(let-values(((br_364)"
"(bulk-required4.1"
" provides_348"
" prefix-len_363"
" s_344"
" provide-phase-level_349"
" can-be-shadowed?_354)))"
"(let-values(((ht_365) provides_348))"
"(begin"
"(if((lambda(ht_366)(hash? ht_366)) ht_365)"
"(void)"
"(let-values()(default-in-hash ht_365)))"
"((letrec-values(((for-loop_367)"
"(lambda(fold-var_368 i_369)"
"(if i_369"
"(let-values(((out-sym_370 binding/p_371)"
"(hash-iterate-key+value"
" ht_365"
" i_369)))"
"(let-values(((fold-var_372)"
"(let-values()"
"(let-values(((fold-var_374)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if symbols-accum_352"
"(let-values()"
"(hash-set!"
" symbols-accum_352"
" out-sym_370"
" #t))"
"(void))"
"(if(hash-ref"
" bulk-excepts_351"
" out-sym_370"
" #f)"
"(void)"
"(let-values()"
"(let-values(((sym_375)"
"(if(not"
" bulk-prefix_350)"
"(let-values()"
" out-sym_370)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                            \"~a~a\""
" bulk-prefix_350"
" out-sym_370))))))"
"(begin"
"(if(if check-and-remove?_355"
"(let-values(((or-part_376)"
"(not"
" shortcut-table_359)))"
"(if or-part_376"
" or-part_376"
"(hash-ref"
" shortcut-table_359"
" sym_375"
" #f)))"
" #f)"
"(let-values()"
"(let-values(((.../require+provide.rkt:170:8_377)"
" check-not-defined89.1)"
"((temp115_378)"
" #t)"
"((r+p116_379)"
" r+p_343)"
"((temp117_380)"
"(datum->syntax$1"
" s_344"
" sym_375"
" s_344))"
"((phase118_381)"
" phase_358)"
"((orig-s119_382)"
" orig-s_353)"
"((temp120_383)"
"(lambda()"
"(let-values(((binding/p124_388)"
" binding/p_371)"
"((sym125_389)"
" sym_375)"
"((self126_390)"
" self_345)"
"((mpi127_391)"
" mpi_360)"
"((provide-phase-level128_392)"
" provide-phase-level_349)"
"((phase-shift129_393)"
" phase-shift_347))"
"(provide-binding-to-require-binding11.1"
" mpi127_391"
" phase-shift129_393"
" provide-phase-level128_392"
" self126_390"
" binding/p124_388"
" sym125_389))))"
"((temp121_384)"
" #t)"
"((accum-update-nominals122_385)"
" accum-update-nominals_356)"
"((who123_386)"
" who_357))"
"(check-not-defined87.1"
" accum-update-nominals122_385"
" #t"
" temp115_378"
" #t"
" orig-s119_382"
" temp121_384"
" #t"
" temp120_383"
" #t"
" who123_386"
" r+p116_379"
" temp117_380"
" phase118_381)))"
"(void))"
"(hash-set!"
" sym-to-reqds_362"
" sym_375"
"(cons"
" br_364"
"(hash-ref"
" sym-to-reqds_362"
" sym_375"
" null)))))))))"
"(void)))))"
"(values"
" fold-var_374)))))"
"(for-loop_367"
" fold-var_372"
"(hash-iterate-next ht_365 i_369))))"
" fold-var_368))))"
" for-loop_367)"
"(void)"
"(hash-iterate-first ht_365)))))))))))))))))))))))))))))"
"(define-values"
"(bulk-required->required)"
"(lambda(br_444 nominal-module_445 phase_446 sym_447)"
"(let-values(((prefix-len_448)(bulk-required-prefix-len br_444)))"
"(let-values(((out-sym_449)"
"(if(zero? prefix-len_448)"
" sym_447"
"(string->symbol(substring(symbol->string sym_447) prefix-len_448)))))"
"(let-values(((binding/p_450)(hash-ref(bulk-required-provides br_444) out-sym_449)))"
"(required2.1"
"(datum->syntax$1(bulk-required-s br_444) sym_447)"
"(phase+ phase_446(bulk-required-provide-phase-level br_444))"
"(bulk-required-can-be-shadowed? br_444)"
"(provided-as-transformer? binding/p_450)))))))"
"(define-values"
"(normalize-required)"
"(lambda(r_451 mod-name_452 phase_453 sym_454)"
"(if(bulk-required? r_451)(bulk-required->required r_451 mod-name_452 phase_453 sym_454) r_451)))"
"(define-values"
"(add-enclosing-module-defined-and-required!61.1)"
"(lambda(enclosing-requires+provides56_463 r+p58_464 enclosing-mod59_465 phase-shift60_466)"
"(let-values(((r+p_467) r+p58_464))"
"(let-values(((enclosing-r+p_468) enclosing-requires+provides56_463))"
"(let-values(((enclosing-mod_469) enclosing-mod59_465))"
"(let-values(((phase-shift_470) phase-shift60_466))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?! r+p_467 #f)"
"(let-values(((ht_471)(requires+provides-requires enclosing-r+p_468)))"
"(begin"
"(if((lambda(ht_472)(hash? ht_472)) ht_471)(void)(let-values()(default-in-hash ht_471)))"
"((letrec-values(((for-loop_473)"
"(lambda(fold-var_474 i_475)"
"(if i_475"
"(let-values(((mod-name_476 at-mod_477)"
"(hash-iterate-key+value ht_471 i_475)))"
"(let-values(((fold-var_478)"
"(let-values()"
"(let-values(((fold-var_480)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ht_481) at-mod_477))"
"(begin"
"(if((lambda(ht_482)"
"(hash? ht_482))"
" ht_481)"
"(void)"
"(let-values()"
"(default-in-hash ht_481)))"
"((letrec-values(((for-loop_483)"
"(lambda(fold-var_484"
" i_485)"
"(if i_485"
"(let-values(((phase_486"
" at-phase_487)"
"(hash-iterate-key+value"
" ht_481"
" i_485)))"
"(let-values(((fold-var_488)"
"(let-values(((ht_489)"
" at-phase_487))"
"(begin"
"(if((lambda(ht_490)"
"(hash?"
" ht_490))"
" ht_489)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_489)))"
"((letrec-values(((for-loop_491)"
"(lambda(fold-var_492"
" i_493)"
"(if i_493"
"(let-values(((sym_494"
" reqds_495)"
"(hash-iterate-key+value"
" ht_489"
" i_493)))"
"(let-values(((fold-var_496)"
"(let-values(((lst_497)"
" reqds_495))"
"(begin"
"(if(list?"
" lst_497)"
"(void)"
"(let-values()"
"(in-list"
" lst_497)))"
"((letrec-values(((for-loop_498)"
"(lambda(fold-var_499"
" lst_500)"
"(if(pair?"
" lst_500)"
"(let-values(((reqd/maybe-bulk_501)"
"(unsafe-car"
" lst_500)))"
"(let-values(((fold-var_502)"
"(let-values()"
"(let-values(((fold-var_504)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((reqd_505)"
"(normalize-required"
" reqd/maybe-bulk_501"
" mod-name_476"
" phase_486"
" sym_494)))"
"(let-values(((r+p130_507)"
" r+p_467)"
"((temp131_508)"
"(syntax-shift-phase-level$1"
"(let-values(((temp137_514)"
"(required-id"
" reqd_505))"
"((temp138_515)"
"(requires+provides-self"
" enclosing-r+p_468))"
"((enclosing-mod139_516)"
" enclosing-mod_469))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" temp137_514"
" temp138_515"
" enclosing-mod139_516"
" #f"
" #f))"
" phase-shift_470))"
"((temp132_509)"
"(phase+"
"(required-phase"
" reqd_505)"
" phase-shift_470))"
"((enclosing-mod133_510)"
" enclosing-mod_469)"
"((phase-shift134_511)"
" phase-shift_470)"
"((temp135_512)"
" #t)"
"((temp136_513)"
"(required-as-transformer?"
" reqd_505)))"
"(add-defined-or-required-id-at-nominal!27.1"
" temp136_513"
" temp135_512"
" enclosing-mod133_510"
" phase-shift134_511"
" r+p130_507"
" temp131_508"
" temp132_509))))"
"(void)))))"
"(values"
" fold-var_504)))))"
"(for-loop_498"
" fold-var_502"
"(unsafe-cdr"
" lst_500))))"
" fold-var_499))))"
" for-loop_498)"
" fold-var_492"
" lst_497)))))"
"(for-loop_491"
" fold-var_496"
"(hash-iterate-next"
" ht_489"
" i_493))))"
" fold-var_492))))"
" for-loop_491)"
" fold-var_484"
"(hash-iterate-first"
" ht_489))))))"
"(for-loop_483"
" fold-var_488"
"(hash-iterate-next"
" ht_481"
" i_485))))"
" fold-var_484))))"
" for-loop_483)"
"(void)"
"(hash-iterate-first ht_481)))))"
"(void)))))"
"(values fold-var_480)))))"
"(for-loop_473 fold-var_478(hash-iterate-next ht_471 i_475))))"
" fold-var_474))))"
" for-loop_473)"
"(void)"
"(hash-iterate-first ht_471))))))))))))"
"(define-values"
"(remove-required-id!69.1)"
"(lambda(unless-matches64_539 r+p66_540 id67_541 phase68_542)"
"(let-values(((r+p_543) r+p66_540))"
"(let-values(((id_544) id67_541))"
"(let-values(((phase_545) phase68_542))"
"(let-values(((binding_546) unless-matches64_539))"
"(let-values()"
"(let-values(((b_547)"
"(let-values(((id140_549) id_544)((phase141_550) phase_545)((temp142_551) #t))"
"(resolve+shift30.1 #f #f temp142_551 #t #f #f #f #f #f #f id140_549 phase141_550))))"
"(if b_547"
"(let-values()"
"(let-values(((mpi_552)(intern-mpi r+p_543(module-binding-nominal-module b_547))))"
"(let-values(((at-mod_553)(hash-ref(requires+provides-requires r+p_543) mpi_552 #f)))"
"(if at-mod_553"
"(let-values()"
"(let-values(((nominal-phase_554)(module-binding-nominal-require-phase b_547)))"
"(let-values(((sym-to-reqds_555)(hash-ref at-mod_553 nominal-phase_554 #f)))"
"(if sym-to-reqds_555"
"(let-values()"
"(let-values(((sym_556)(syntax-e$1 id_544)))"
"(let-values(((l_557)(hash-ref sym-to-reqds_555 sym_556 null)))"
"(if(null? l_557)"
"(void)"
"(let-values()"
"(if(same-binding? b_547 binding_546)"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_555"
" sym_556"
"(remove-non-matching-requireds"
" l_557"
" id_544"
" phase_545"
" mpi_552"
" nominal-phase_554"
" sym_556)))))))))"
"(void)))))"
"(void)))))"
"(void))))))))))"
"(define-values"
"(remove-non-matching-requireds)"
"(lambda(reqds_572 id_573 phase_574 mpi_575 nominal-phase_576 sym_577)"
"(alt-reverse"
"(let-values(((lst_578) reqds_572))"
"(begin"
"(if(list? lst_578)(void)(let-values()(in-list lst_578)))"
"((letrec-values(((for-loop_579)"
"(lambda(fold-var_580 lst_581)"
"(if(pair? lst_581)"
"(let-values(((r_582)(unsafe-car lst_581)))"
"(let-values(((fold-var_583)"
"(let-values(((r_584)"
"(normalize-required"
" r_582"
" mpi_575"
" nominal-phase_576"
" sym_577)))"
"(begin"
" #t"
"((letrec-values(((for-loop_585)"
"(lambda(fold-var_586)"
"(let-values()"
"(let-values(((fold-var_587)"
"(let-values(((fold-var_588)"
" fold-var_586))"
"(if(free-identifier=?$1"
"(required-id r_584)"
" id_573"
" phase_574"
" phase_574)"
" fold-var_588"
"(let-values(((fold-var_589)"
" fold-var_588))"
"(let-values(((fold-var_590)"
"(let-values()"
"(cons"
"(let-values()"
" r_584)"
" fold-var_589))))"
"(values"
" fold-var_590)))))))"
" fold-var_587)))))"
" for-loop_585)"
" fold-var_580)))))"
"(for-loop_579 fold-var_583(unsafe-cdr lst_581))))"
" fold-var_580))))"
" for-loop_579)"
" null"
" lst_578))))))"
"(define-values"
"(lifted/26.1$1 lifted/27.1$1 lifted/28.1$1 lifted/29.1$1 lifted/30.1$1)"
"(make-struct-type"
" 'check-not-defined"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'check-not-defined"
"(case-lambda((self_591 r+p_592 id_593 phase_594)(apply missing-kw self_591 r+p_592 id_593 phase_594 null))))))"
"(current-inspector)"
"(case-lambda((self_595 r+p_596 id_597 phase_598)(apply missing-kw self_595 r+p_596 id_597 phase_598 null)))))"
"(define-values"
"(check-not-defined87.1)"
"(lambda(accum-update-nominals76_599"
" accum-update-nominals82_600"
" check-not-required?72_601"
" check-not-required?78_602"
" in73_603"
" remove-shadowed!?75_604"
" remove-shadowed!?81_605"
" unless-matches74_606"
" unless-matches80_607"
" who77_608"
" r+p84_609"
" id85_610"
" phase86_611)"
"(let-values(((check-not-required?_612)(if check-not-required?78_602 check-not-required?72_601 #f)))"
"(let-values(((r+p_613) r+p84_609))"
"(let-values(((id_614) id85_610))"
"(let-values(((phase_615) phase86_611))"
"(let-values(((orig-s_616) in73_603))"
"(let-values(((ok-binding/delayed_617)(if unless-matches80_607 unless-matches74_606 #f)))"
"(let-values(((remove-shadowed!?_618)(if remove-shadowed!?81_605 remove-shadowed!?75_604 #f)))"
"(let-values(((accum-update-nominals_619)"
"(if accum-update-nominals82_600 accum-update-nominals76_599 #f)))"
"(let-values(((who_620) who77_608))"
"(let-values()"
"(let-values(((b_621)"
"(let-values(((id143_623) id_614)((phase144_624) phase_615)((temp145_625) #t))"
"(resolve+shift30.1"
" #f"
" #f"
" temp145_625"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id143_623"
" phase144_624))))"
"(if(not b_621)"
"(let-values()(void))"
"(if(not(module-binding? b_621))"
"                              (let-values () (raise-syntax-error$1 #f \"identifier out of context\" id_614))"
"(let-values()"
"(let-values(((defined?_626)"
"(if b_621"
"(eq?(requires+provides-self r+p_613)(module-binding-module b_621))"
" #f)))"
"(if(if(not defined?_626)(not check-not-required?_612) #f)"
"(let-values()(set-requires+provides-all-bindings-simple?! r+p_613 #f))"
"(if(if defined?_626"
"(not"
"(hash-ref"
"(hash-ref"
"(requires+provides-phase-to-defined-syms r+p_613)"
" phase_615"
" '#hasheq())"
"(module-binding-sym b_621)"
" #f))"
" #f)"
"(let-values()(void))"
"(let-values()"
"(let-values(((mpi_627)"
"(intern-mpi r+p_613(module-binding-nominal-module b_621))))"
"(let-values(((at-mod_628)"
"(hash-ref(requires+provides-requires r+p_613) mpi_627 #f)))"
"(let-values(((ok-binding_629)"
"(if(procedure? ok-binding/delayed_617)"
"(ok-binding/delayed_617)"
" ok-binding/delayed_617)))"
"(if(not at-mod_628)"
"(let-values()(void))"
"(if(if ok-binding_629(same-binding? b_621 ok-binding_629) #f)"
"(let-values()"
"(if(same-binding-nominals? b_621 ok-binding_629)"
"(void)"
"(let-values()"
"(let-values(((update!_630)"
"(lambda()"
"(let-values(((temp146_632) #t)"
"((id147_633) id_614)"
"((temp148_634)"
"(let-values(((b150_637) b_621)"
"((temp151_638)"
"(cons"
" ok-binding_629"
"(module-binding-extra-nominal-bindings"
" b_621))))"
"(module-binding-update46.1"
" #f"
" #f"
" temp151_638"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b150_637)))"
"((phase149_635) phase_615))"
"(add-binding!17.1"
" #f"
" #f"
" temp146_632"
" #t"
" id147_633"
" temp148_634"
" phase149_635)))))"
"(if accum-update-nominals_619"
"(let-values()"
"(set-box!"
" accum-update-nominals_619"
"(cons update!_630(unbox accum-update-nominals_619))))"
"(let-values()(update!_630)))))))"
"(let-values()"
"(let-values(((nominal-phase_639)"
"(module-binding-nominal-require-phase b_621)))"
"(let-values(((sym-to-reqds_640)"
"(hash-ref at-mod_628 nominal-phase_639 '#hasheq())))"
"(let-values(((reqds_641)"
"(hash-ref"
" sym-to-reqds_640"
"(syntax-e$1 id_614)"
" null)))"
"(begin"
"(let-values(((lst_642) reqds_641))"
"(begin"
"(if(list? lst_642)"
"(void)"
"(let-values()(in-list lst_642)))"
"((letrec-values(((for-loop_643)"
"(lambda(fold-var_644 lst_645)"
"(if(pair? lst_645)"
"(let-values(((r_646)"
"(unsafe-car"
" lst_645)))"
"(let-values(((fold-var_647)"
"(let-values()"
"(let-values(((fold-var_649)"
"(let-values()"
"(begin"
"(let-values()"
"(if(if(bulk-required?"
" r_646)"
"(bulk-required-can-be-shadowed?"
" r_646)"
"(required-can-be-shadowed?"
" r_646))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" r+p_613"
" #f))"
"(let-values()"
"(raise-syntax-error$1"
" who_620"
"(string-append"
"                                                                                                                                  \"identifier already \""
"(if defined?_626"
"                                                                                                                                    \"defined\""
"                                                                                                                                    \"required\")"
"(if(zero-phase?"
" phase_615)"
"(let-values()"
"                                                                                                                                      \"\")"
"(if(label-phase?"
" phase_615)"
"(let-values()"
"                                                                                                                                        \" for label\")"
"(if(="
" 1"
" phase_615)"
"(let-values()"
"                                                                                                                                          \" for syntax\")"
"(let-values()"
"(format"
"                                                                                                                                           \" for phase ~a\""
" phase_615))))))"
" orig-s_616"
" id_614))))"
"(void)))))"
"(values"
" fold-var_649)))))"
"(for-loop_643"
" fold-var_647"
"(unsafe-cdr lst_645))))"
" fold-var_644))))"
" for-loop_643)"
"(void)"
" lst_642)))"
"(if(if remove-shadowed!?_618(pair? reqds_641) #f)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_640"
"(syntax-e$1 id_614)"
"(remove-non-matching-requireds"
" reqds_641"
" id_614"
" phase_615"
" mpi_627"
" nominal-phase_639"
"(syntax-e$1 id_614))))"
"(void))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack88.1)"
"(lambda(given-kws_650 given-args_651 r+p84_652 id85_653 phase86_654)"
"(let-values(((accum-update-nominals82_655)"
"(if(pair? given-kws_650)(eq? '#:accum-update-nominals(car given-kws_650)) #f)))"
"(let-values(((accum-update-nominals76_656)(if accum-update-nominals82_655(car given-args_651)(void)))"
"((given-kws_657)(if accum-update-nominals82_655(cdr given-kws_650) given-kws_650))"
"((given-args_658)(if accum-update-nominals82_655(cdr given-args_651) given-args_651)))"
"(let-values(((check-not-required?78_659)"
"(if(pair? given-kws_657)(eq? '#:check-not-required?(car given-kws_657)) #f)))"
"(let-values(((check-not-required?72_660)(if check-not-required?78_659(car given-args_658)(void)))"
"((given-kws_661)(if check-not-required?78_659(cdr given-kws_657) given-kws_657))"
"((given-args_662)(if check-not-required?78_659(cdr given-args_658) given-args_658)))"
"(let-values(((in73_663)(car given-args_662))"
"((given-kws_664)(cdr given-kws_661))"
"((given-args_665)(cdr given-args_662)))"
"(let-values(((remove-shadowed!?81_666)"
"(if(pair? given-kws_664)(eq? '#:remove-shadowed!?(car given-kws_664)) #f)))"
"(let-values(((remove-shadowed!?75_667)(if remove-shadowed!?81_666(car given-args_665)(void)))"
"((given-kws_668)(if remove-shadowed!?81_666(cdr given-kws_664) given-kws_664))"
"((given-args_669)(if remove-shadowed!?81_666(cdr given-args_665) given-args_665)))"
"(let-values(((unless-matches80_670)"
"(if(pair? given-kws_668)(eq? '#:unless-matches(car given-kws_668)) #f)))"
"(let-values(((unless-matches74_671)(if unless-matches80_670(car given-args_669)(void)))"
"((given-kws_672)(if unless-matches80_670(cdr given-kws_668) given-kws_668))"
"((given-args_673)(if unless-matches80_670(cdr given-args_669) given-args_669)))"
"(let-values(((who77_674)(car given-args_673)))"
"(check-not-defined87.1"
" accum-update-nominals76_656"
" accum-update-nominals82_655"
" check-not-required?72_660"
" check-not-required?78_659"
" in73_663"
" remove-shadowed!?75_667"
" remove-shadowed!?81_666"
" unless-matches74_671"
" unless-matches80_670"
" who77_674"
" r+p84_652"
" id85_653"
" phase86_654)))))))))))))"
"(define-values"
"(check-not-defined89.1)"
"(lifted/27.1$1"
"(lambda(given-kws_675 given-argc_676)"
"(if(= given-argc_676 5)"
"(subsets?"
" '(#:in #:who)"
" given-kws_675"
" '(#:accum-update-nominals #:check-not-required? #:in #:remove-shadowed!? #:unless-matches #:who))"
" #f))"
"(case-lambda"
"((given-kws_677 given-args_678 r+p_679 id_680 phase_681)"
"(unpack88.1 given-kws_677 given-args_678 r+p_679 id_680 phase_681)))"
" '(#:in #:who)"
" '(#:accum-update-nominals #:check-not-required? #:in #:remove-shadowed!? #:unless-matches #:who)))"
"(define-values"
"(add-defined-syms!)"
"(lambda(r+p_682 syms_683 phase_684)"
"(let-values(((phase-to-defined-syms_685)(requires+provides-phase-to-defined-syms r+p_682)))"
"(let-values(((defined-syms_686)(hash-ref phase-to-defined-syms_685 phase_684 '#hasheq())))"
"(let-values(((new-defined-syms_687)"
"(let-values(((lst_688) syms_683))"
"(begin"
"(if(list? lst_688)(void)(let-values()(in-list lst_688)))"
"((letrec-values(((for-loop_689)"
"(lambda(defined-syms_690 lst_691)"
"(if(pair? lst_691)"
"(let-values(((sym_692)(unsafe-car lst_691)))"
"(let-values(((defined-syms_693)"
"(let-values(((defined-syms_694) defined-syms_690))"
"(let-values(((defined-syms_695)"
"(let-values()"
"(hash-set"
" defined-syms_694"
" sym_692"
" #t))))"
"(values defined-syms_695)))))"
"(for-loop_689 defined-syms_693(unsafe-cdr lst_691))))"
" defined-syms_690))))"
" for-loop_689)"
" defined-syms_686"
" lst_688)))))"
"(hash-set! phase-to-defined-syms_685 phase_684 new-defined-syms_687))))))"
"(define-values"
"(extract-module-requires)"
"(lambda(r+p_696 mod-name_697 phase_698)"
"(let-values(((mpi_699)(intern-mpi r+p_696 mod-name_697)))"
"(let-values(((at-mod_700)(hash-ref(requires+provides-requires r+p_696) mpi_699 #f)))"
"(if at-mod_700"
"(alt-reverse"
"(let-values(((ht_701)(hash-ref at-mod_700 phase_698 '#hasheq())))"
"(begin"
"(if((lambda(ht_702)(hash? ht_702)) ht_701)(void)(let-values()(default-in-hash ht_701)))"
"((letrec-values(((for-loop_703)"
"(lambda(fold-var_704 i_705)"
"(if i_705"
"(let-values(((sym_706 reqds_707)(hash-iterate-key+value ht_701 i_705)))"
"(let-values(((fold-var_708)"
"(let-values(((lst_709) reqds_707))"
"(begin"
"(if(list? lst_709)(void)(let-values()(in-list lst_709)))"
"((letrec-values(((for-loop_710)"
"(lambda(fold-var_711 lst_712)"
"(if(pair? lst_712)"
"(let-values(((reqd_713)"
"(unsafe-car lst_712)))"
"(let-values(((fold-var_714)"
"(let-values(((fold-var_715)"
" fold-var_711))"
"(let-values(((fold-var_716)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_713"
" mpi_699"
" phase_698"
" sym_706))"
" fold-var_715))))"
"(values"
" fold-var_716)))))"
"(for-loop_710"
" fold-var_714"
"(unsafe-cdr lst_712))))"
" fold-var_711))))"
" for-loop_710)"
" fold-var_704"
" lst_709)))))"
"(for-loop_703 fold-var_708(hash-iterate-next ht_701 i_705))))"
" fold-var_704))))"
" for-loop_703)"
" null"
"(hash-iterate-first ht_701)))))"
" #f)))))"
"(define-values"
"(extract-module-definitions)"
"(lambda(r+p_717)"
"(let-values(((or-part_718)(extract-module-requires r+p_717(requires+provides-self r+p_717) 0)))"
"(if or-part_718 or-part_718 null))))"
"(define-values"
"(extract-all-module-requires)"
"(lambda(r+p_719 mod-name_720 phase_721)"
"(let-values(((self_722)(requires+provides-self r+p_719)))"
"(let-values(((requires_723)(requires+provides-requires r+p_719)))"
"(call/ec"
"(lambda(esc_724)"
"(alt-reverse"
"(let-values(((lst_725)"
"(if mod-name_720(list(intern-mpi r+p_719 mod-name_720))(hash-keys requires_723))))"
"(begin"
"(if(list? lst_725)(void)(let-values()(in-list lst_725)))"
"((letrec-values(((for-loop_726)"
"(lambda(fold-var_727 lst_728)"
"(if(pair? lst_728)"
"(let-values(((mod-name_729)(unsafe-car lst_728)))"
"(let-values(((fold-var_730)"
"(let-values(((fold-var_731) fold-var_727))"
"(if(eq? mod-name_729 self_722)"
" fold-var_731"
"(let-values(((phase-to-requireds_732)"
"(hash-ref"
" requires_723"
" mod-name_729"
" '#hasheqv())))"
"(begin"
" #t"
"((letrec-values(((for-loop_733)"
"(lambda(fold-var_734)"
"(let-values()"
"(let-values(((fold-var_735)"
"(let-values(((lst_736)"
"(if(eq?"
" phase_721"
" 'all)"
"(hash-keys"
" phase-to-requireds_732)"
"(list"
" phase_721))))"
"(begin"
"(if(list?"
" lst_736)"
"(void)"
"(let-values()"
"(in-list"
" lst_736)))"
"((letrec-values(((for-loop_737)"
"(lambda(fold-var_738"
" lst_739)"
"(if(pair?"
" lst_739)"
"(let-values(((phase_740)"
"(unsafe-car"
" lst_739)))"
"(let-values(((fold-var_741)"
"(let-values(((ht_742)"
"(hash-ref"
" phase-to-requireds_732"
" phase_740"
"(lambda()"
"(esc_724"
" #f)))))"
"(begin"
"(if((lambda(ht_743)"
"(hash?"
" ht_743))"
" ht_742)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_742)))"
"((letrec-values(((for-loop_744)"
"(lambda(fold-var_745"
" i_746)"
"(if i_746"
"(let-values(((sym_747"
" reqds_748)"
"(hash-iterate-key+value"
" ht_742"
" i_746)))"
"(let-values(((fold-var_749)"
"(let-values(((lst_750)"
" reqds_748))"
"(begin"
"(if(list?"
" lst_750)"
"(void)"
"(let-values()"
"(in-list"
" lst_750)))"
"((letrec-values(((for-loop_751)"
"(lambda(fold-var_752"
" lst_753)"
"(if(pair?"
" lst_753)"
"(let-values(((reqd_754)"
"(unsafe-car"
" lst_753)))"
"(let-values(((fold-var_755)"
"(let-values(((fold-var_756)"
" fold-var_752))"
"(let-values(((fold-var_757)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_754"
" mod-name_729"
" phase_740"
" sym_747))"
" fold-var_756))))"
"(values"
" fold-var_757)))))"
"(for-loop_751"
" fold-var_755"
"(unsafe-cdr"
" lst_753))))"
" fold-var_752))))"
" for-loop_751)"
" fold-var_745"
" lst_750)))))"
"(for-loop_744"
" fold-var_749"
"(hash-iterate-next"
" ht_742"
" i_746))))"
" fold-var_745))))"
" for-loop_744)"
" fold-var_738"
"(hash-iterate-first"
" ht_742))))))"
"(for-loop_737"
" fold-var_741"
"(unsafe-cdr"
" lst_739))))"
" fold-var_738))))"
" for-loop_737)"
" fold-var_734"
" lst_736)))))"
" fold-var_735)))))"
" for-loop_733)"
" fold-var_731)))))))"
"(for-loop_726 fold-var_730(unsafe-cdr lst_728))))"
" fold-var_727))))"
" for-loop_726)"
" null"
" lst_725))))))))))"
"(define-values"
"(add-provide!101.1)"
"(lambda(as-protected?90_774"
" as-transformer?91_775"
" r+p94_776"
" sym95_777"
" phase96_778"
" binding97_779"
" immed-binding98_780"
" id99_781"
" orig-s100_782)"
"(let-values(((r+p_783) r+p94_776))"
"(let-values(((sym_784) sym95_777))"
"(let-values(((phase_785) phase96_778))"
"(let-values(((binding_786) binding97_779))"
"(let-values(((immed-binding_787) immed-binding98_780))"
"(let-values(((id_788) id99_781))"
"(let-values(((orig-s_789) orig-s100_782))"
"(let-values(((as-protected?_790) as-protected?90_774))"
"(let-values(((as-transformer?_791) as-transformer?91_775))"
"(let-values()"
"(begin"
"(if(if as-protected?_790"
"(not(eq?(module-binding-module immed-binding_787)(requires+provides-self r+p_783)))"
" #f)"
"(let-values()"
"                              (raise-syntax-error$1 #f \"cannot protect required identifier in re-provide\" sym_784))"
"(void))"
"(hash-update!"
"(requires+provides-provides r+p_783)"
" phase_785"
"(lambda(at-phase_792)"
"(let-values(((b/p_793)(hash-ref at-phase_792 sym_784 #f)))"
"(let-values(((b_794)(provided-as-binding b/p_793)))"
"(if(not b_794)"
"(let-values()"
"(hash-set"
" at-phase_792"
" sym_784"
"(if(let-values(((or-part_795) as-protected?_790))"
"(if or-part_795 or-part_795 as-transformer?_791))"
"(provided1.1 binding_786 as-protected?_790 as-transformer?_791)"
" binding_786)))"
"(if(same-binding? b_794 binding_786)"
"(let-values() at-phase_792)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                        \"identifier already provided (as a different binding)\""
" orig-s_789"
" id_788)))))))"
" '#hasheq()))))))))))))))"
"(define-values"
"(extract-requires-and-provides)"
"(lambda(r+p_822 old-self_823 new-self_824)"
"(let-values(((extract-requires_825)"
"(lambda()"
"(let-values(((phase-to-mpis-in-order_827)(requires+provides-require-mpis-in-order r+p_822)))"
"(let-values(((phases-in-order_828)"
"(let-values(((temp152_829)(hash-keys phase-to-mpis-in-order_827))"
"((phase<?153_830) phase<?))"
"(sort7.1 #f #f #f #f temp152_829 phase<?153_830))))"
"(alt-reverse"
"(let-values(((lst_831) phases-in-order_828))"
"(begin"
"(if(list? lst_831)(void)(let-values()(in-list lst_831)))"
"((letrec-values(((for-loop_832)"
"(lambda(fold-var_833 lst_834)"
"(if(pair? lst_834)"
"(let-values(((phase_835)(unsafe-car lst_834)))"
"(let-values(((fold-var_836)"
"(let-values(((fold-var_837) fold-var_833))"
"(let-values(((fold-var_838)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_835"
"(alt-reverse"
"(let-values(((lst_839)"
"(alt-reverse"
"(hash-ref"
" phase-to-mpis-in-order_827"
" phase_835))))"
"(begin"
"(if(list? lst_839)"
"(void)"
"(let-values()"
"(in-list lst_839)))"
"((letrec-values(((for-loop_840)"
"(lambda(fold-var_841"
" lst_842)"
"(if(pair?"
" lst_842)"
"(let-values(((mpi_843)"
"(unsafe-car"
" lst_842)))"
"(let-values(((fold-var_844)"
"(let-values(((fold-var_845)"
" fold-var_841))"
"(if(eq?"
" mpi_843"
" old-self_823)"
" fold-var_845"
"(let-values(((fold-var_846)"
" fold-var_845))"
"(let-values(((fold-var_847)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" mpi_843"
" old-self_823"
" new-self_824))"
" fold-var_846))))"
"(values"
" fold-var_847)))))))"
"(for-loop_840"
" fold-var_844"
"(unsafe-cdr"
" lst_842))))"
" fold-var_841))))"
" for-loop_840)"
" null"
" lst_839))))))"
" fold-var_837))))"
"(values fold-var_838)))))"
"(for-loop_832 fold-var_836(unsafe-cdr lst_834))))"
" fold-var_833))))"
" for-loop_832)"
" null"
" lst_831)))))))))"
"(let-values(((extract-provides_826)"
"(lambda()"
"(shift-provides-module-path-index"
"(requires+provides-provides r+p_822)"
" old-self_823"
" new-self_824))))"
"(values(extract-requires_825)(extract-provides_826))))))"
"(define-values"
"(shift-provides-module-path-index)"
"(lambda(provides_871 from-mpi_872 to-mpi_873)"
"(let-values(((ht_874) provides_871))"
"(begin"
"(if((lambda(ht_875)(hash? ht_875)) ht_874)(void)(let-values()(default-in-hash ht_874)))"
"((letrec-values(((for-loop_876)"
"(lambda(table_877 i_878)"
"(if i_878"
"(let-values(((phase_879 at-phase_880)(hash-iterate-key+value ht_874 i_878)))"
"(let-values(((table_881)"
"(let-values(((table_882) table_877))"
"(let-values(((table_883)"
"(let-values()"
"(let-values(((key_884 val_885)"
"(let-values()"
"(values"
" phase_879"
"(let-values(((ht_886) at-phase_880))"
"(begin"
"(if((lambda(ht_887)"
"(hash? ht_887))"
" ht_886)"
"(void)"
"(let-values()"
"(default-in-hash ht_886)))"
"((letrec-values(((for-loop_888)"
"(lambda(table_889"
" i_890)"
"(if i_890"
"(let-values(((sym_891"
" binding_892)"
"(hash-iterate-key+value"
" ht_886"
" i_890)))"
"(let-values(((table_893)"
"(let-values(((table_894)"
" table_889))"
"(if(symbol-interned?"
" sym_891)"
"(let-values(((table_895)"
" table_894))"
"(let-values(((table_896)"
"(let-values()"
"(let-values(((key_897"
" val_898)"
"(let-values()"
"(values"
" sym_891"
"(if(eq?"
" from-mpi_872"
" to-mpi_873)"
"(let-values()"
" binding_892)"
"(let-values()"
"((letrec-values(((loop_899)"
"(lambda(binding_900)"
"(if(provided?"
" binding_900)"
"(let-values()"
"(provided1.1"
"(loop_899"
"(provided-binding"
" binding_900))"
"(provided-protected?"
" binding_900)"
"(provided-syntax?"
" binding_900)))"
"(let-values()"
"(binding-module-path-index-shift"
" binding_900"
" from-mpi_872"
" to-mpi_873))))))"
" loop_899)"
" binding_892)))))))"
"(hash-set"
" table_895"
" key_897"
" val_898)))))"
"(values"
" table_896)))"
" table_894))))"
"(for-loop_888"
" table_893"
"(hash-iterate-next"
" ht_886"
" i_890))))"
" table_889))))"
" for-loop_888)"
" '#hasheq()"
"(hash-iterate-first ht_886))))))))"
"(hash-set table_882 key_884 val_885)))))"
"(values table_883)))))"
"(for-loop_876 table_881(hash-iterate-next ht_874 i_878))))"
" table_877))))"
" for-loop_876)"
" '#hasheqv()"
"(hash-iterate-first ht_874))))))"
"(void)"
"(void)"
"(define-values"
"(struct:adjust-only adjust-only1.1 adjust-only? adjust-only-syms)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-only #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-only)))))"
"(values struct:_21 make-_22 ?_23(make-struct-field-accessor -ref_24 0 'syms))))"
"(define-values"
"(struct:adjust-prefix adjust-prefix2.1 adjust-prefix? adjust-prefix-sym)"
"(let-values(((struct:_41 make-_42 ?_43 -ref_44 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-prefix #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-prefix)))))"
"(values struct:_41 make-_42 ?_43(make-struct-field-accessor -ref_44 0 'sym))))"
"(define-values"
"(struct:adjust-all-except adjust-all-except3.1 adjust-all-except? adjust-all-except-prefix-sym adjust-all-except-syms)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'adjust-all-except"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'adjust-all-except)))))"
"(values"
" struct:_61"
" make-_62"
" ?_63"
"(make-struct-field-accessor -ref_64 0 'prefix-sym)"
"(make-struct-field-accessor -ref_64 1 'syms))))"
"(define-values"
"(struct:adjust-rename adjust-rename4.1 adjust-rename? adjust-rename-to-id adjust-rename-from-sym)"
"(let-values(((struct:_86 make-_87 ?_88 -ref_89 -set!_90)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-rename #f 2 0 #f null(current-inspector) #f '(0 1) #f 'adjust-rename)))))"
"(values"
" struct:_86"
" make-_87"
" ?_88"
"(make-struct-field-accessor -ref_89 0 'to-id)"
"(make-struct-field-accessor -ref_89 1 'from-sym))))"
"(define-values(layers$1) '(raw phaseless path))"
"(define-values"
"(parse-and-perform-requires!30.1)"
"(lambda(copy-variable-as-constant?11_123"
" copy-variable-as-constant?21_124"
" copy-variable-phase-level10_125"
" copy-variable-phase-level20_126"
" declared-submodule-names9_127"
" declared-submodule-names19_128"
" initial-require?13_129"
" initial-require?23_130"
" run-phase6_131"
" run-phase16_132"
" run?7_133"
" run?17_134"
" self5_135"
" self15_136"
" skip-variable-phase-level12_137"
" skip-variable-phase-level22_138"
" visit?8_139"
" visit?18_140"
" who14_141"
" reqs25_142"
" orig-s26_143"
" m-ns27_144"
" phase-shift28_145"
" requires+provides29_146)"
"(let-values(((reqs_147) reqs25_142))"
"(let-values(((orig-s_148) orig-s26_143))"
"(let-values(((m-ns_149) m-ns27_144))"
"(let-values(((phase-shift_150) phase-shift28_145))"
"(let-values(((requires+provides_151) requires+provides29_146))"
"(let-values(((self_152)(if self15_136 self5_135 #f)))"
"(let-values(((run-phase_153)(if run-phase16_132 run-phase6_131(namespace-phase m-ns_149))))"
"(let-values(((run?_154)(if run?17_134 run?7_133 #f)))"
"(let-values(((visit?_155)(if visit?18_140 visit?8_139 #t)))"
"(let-values(((declared-submodule-names_156)"
"(if declared-submodule-names19_128 declared-submodule-names9_127 '#hasheq())))"
"(let-values(((copy-variable-phase-level_157)"
"(if copy-variable-phase-level20_126 copy-variable-phase-level10_125 #f)))"
"(let-values(((copy-variable-as-constant?_158)"
"(if copy-variable-as-constant?21_124 copy-variable-as-constant?11_123 #f)))"
"(let-values(((skip-variable-phase-level_159)"
"(if skip-variable-phase-level22_138 skip-variable-phase-level12_137 #f)))"
"(let-values(((initial-require?_160)"
"(if initial-require?23_130 initial-require?13_129 #f)))"
"(let-values(((who_161) who14_141))"
"(let-values()"
"((letrec-values(((loop_162)"
"(lambda(reqs_163"
" top-req_164"
" phase-shift_165"
" just-meta_166"
" adjust_167"
" for-meta-ok?_168"
" just-meta-ok?_169"
" layer_170)"
"(let-values(((lst_171) reqs_163))"
"(begin"
"(if(list? lst_171)"
"(void)"
"(let-values()(in-list lst_171)))"
"((letrec-values(((for-loop_172)"
"(lambda(result_173 lst_174)"
"(if(pair? lst_174)"
"(let-values(((req_175)"
"(unsafe-car lst_174)))"
"(let-values(((result_176)"
"(let-values()"
"(let-values(((result_178)"
"(let-values()"
"(let-values()"
"(let-values(((check-nested_179)"
"(let-values(((check-nested108_181)"
"(lambda(want-layer107_182"
" ok?105_183"
" ok?106_184)"
"(let-values(((want-layer_185)"
" want-layer107_182))"
"(let-values(((ok?_186)"
"(if ok?106_184"
" ok?105_183"
" #t)))"
"(let-values()"
"(if(if ok?_186"
"(member"
" want-layer_185"
"(member"
" layer_170"
" layers$1))"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"invalid nesting\""
" orig-s_148"
" req_175)))))))))"
"(case-lambda"
"((want-layer_187)"
"(check-nested108_181"
" want-layer_187"
" #f"
" #f))"
"((want-layer_188"
" ok?105_189)"
"(check-nested108_181"
" want-layer_188"
" ok?105_189"
" #t))))))"
"(let-values(((fm_180)"
"(if(pair?"
"(syntax-e$1"
" req_175))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" req_175)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" req_175)))"
" #f)"
" #f)))"
"(let-values(((tmp_190)"
" fm_180))"
"(if(equal?"
" tmp_190"
" 'for-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_179"
" 'raw"
" for-meta-ok?_168)"
"(values))))"
"(let-values(((ok?_191"
" for-meta110_192"
" phase-level111_193"
" spec112_194)"
"(let-values(((s_208)"
" req_175))"
"(let-values(((orig-s_209)"
" s_208))"
"(let-values(((for-meta110_210"
" phase-level111_211"
" spec112_212)"
"(let-values(((s_213)"
"(if(syntax?$1"
" s_208)"
"(syntax-e$1"
" s_208)"
" s_208)))"
"(if(pair?"
" s_213)"
"(let-values(((for-meta113_214)"
"(let-values(((s_217)"
"(car"
" s_213)))"
" s_217))"
"((phase-level114_215"
" spec115_216)"
"(let-values(((s_218)"
"(cdr"
" s_213)))"
"(let-values(((s_219)"
"(if(syntax?$1"
" s_218)"
"(syntax-e$1"
" s_218)"
" s_218)))"
"(if(pair?"
" s_219)"
"(let-values(((phase-level116_220)"
"(let-values(((s_222)"
"(car"
" s_219)))"
" s_222))"
"((spec117_221)"
"(let-values(((s_223)"
"(cdr"
" s_219)))"
"(let-values(((s_224)"
"(if(syntax?$1"
" s_223)"
"(syntax-e$1"
" s_223)"
" s_223)))"
"(let-values(((flat-s_225)"
"(to-syntax-list.1"
" s_224)))"
"(if(not"
" flat-s_225)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_209))"
"(let-values()"
" flat-s_225)))))))"
"(values"
" phase-level116_220"
" spec117_221))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_209))))))"
"(values"
" for-meta113_214"
" phase-level114_215"
" spec115_216))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_209)))))"
"(values"
" #t"
" for-meta110_210"
" phase-level111_211"
" spec112_212))))))"
"(let-values(((p_207)"
"(syntax-e$1"
" phase-level111_193)))"
"(begin"
"(if(phase?"
" p_207)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad phase\""
" orig-s_148"
" req_175)))"
"(loop_162"
" spec112_194"
"(let-values(((or-part_226)"
" top-req_164))"
"(if or-part_226"
" or-part_226"
" req_175))"
"(phase+"
" phase-shift_165"
" p_207)"
" just-meta_166"
" adjust_167"
" #f"
" just-meta-ok?_169"
" 'raw))))))"
"(if(equal?"
" tmp_190"
" 'for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_179"
" 'raw"
" for-meta-ok?_168)"
"(values))))"
"(let-values(((ok?_227"
" for-syntax118_228"
" spec119_229)"
"(let-values(((s_240)"
" req_175))"
"(let-values(((orig-s_241)"
" s_240))"
"(let-values(((for-syntax118_242"
" spec119_243)"
"(let-values(((s_244)"
"(if(syntax?$1"
" s_240)"
"(syntax-e$1"
" s_240)"
" s_240)))"
"(if(pair?"
" s_244)"
"(let-values(((for-syntax120_245)"
"(let-values(((s_247)"
"(car"
" s_244)))"
" s_247))"
"((spec121_246)"
"(let-values(((s_248)"
"(cdr"
" s_244)))"
"(let-values(((s_249)"
"(if(syntax?$1"
" s_248)"
"(syntax-e$1"
" s_248)"
" s_248)))"
"(let-values(((flat-s_250)"
"(to-syntax-list.1"
" s_249)))"
"(if(not"
" flat-s_250)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_241))"
"(let-values()"
" flat-s_250)))))))"
"(values"
" for-syntax120_245"
" spec121_246))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad syntax\""
" orig-s_241)))))"
"(values"
" #t"
" for-syntax118_242"
" spec119_243))))))"
"(loop_162"
" spec119_229"
"(let-values(((or-part_251)"
" top-req_164))"
"(if or-part_251"
" or-part_251"
" req_175))"
"(phase+"
" phase-shift_165"
" 1)"
" just-meta_166"
" adjust_167"
" #f"
" just-meta-ok?_169"
" 'raw))))"
"(if(equal?"
" tmp_190"
" 'for-template)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_179"
" 'raw"
" for-meta-ok?_168)"
"(values))))"
"(let-values(((ok?_252"
" for-template122_253"
" spec123_254)"
"(let-values(((s_265)"
" req_175))"
"(let-values(((orig-s_266)"
" s_265))"
"(let-values(((for-template122_267"
" spec123_268)"
"(let-values(((s_269)"
"(if(syntax?$1"
" s_265)"
"(syntax-e$1"
" s_265)"
" s_265)))"
"(if(pair?"
" s_269)"
"(let-values(((for-template124_270)"
"(let-values(((s_272)"
"(car"
" s_269)))"
" s_272))"
"((spec125_271)"
"(let-values(((s_273)"
"(cdr"
" s_269)))"
"(let-values(((s_274)"
"(if(syntax?$1"
" s_273)"
"(syntax-e$1"
" s_273)"
" s_273)))"
"(let-values(((flat-s_275)"
"(to-syntax-list.1"
" s_274)))"
"(if(not"
" flat-s_275)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_266))"
"(let-values()"
" flat-s_275)))))))"
"(values"
" for-template124_270"
" spec125_271))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"bad syntax\""
" orig-s_266)))))"
"(values"
" #t"
" for-template122_267"
" spec123_268))))))"
"(loop_162"
" spec123_254"
"(let-values(((or-part_276)"
" top-req_164))"
"(if or-part_276"
" or-part_276"
" req_175))"
"(phase+"
" phase-shift_165"
" -1)"
" just-meta_166"
" adjust_167"
" #f"
" just-meta-ok?_169"
" 'raw))))"
"(if(equal?"
" tmp_190"
" 'for-label)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_179"
" 'raw"
" for-meta-ok?_168)"
"(values))))"
"(let-values(((ok?_277"
" for-label126_278"
" spec127_279)"
"(let-values(((s_290)"
" req_175))"
"(let-values(((orig-s_291)"
" s_290))"
"(let-values(((for-label126_292"
" spec127_293)"
"(let-values(((s_294)"
"(if(syntax?$1"
" s_290)"
"(syntax-e$1"
" s_290)"
" s_290)))"
"(if(pair?"
" s_294)"
"(let-values(((for-label128_295)"
"(let-values(((s_297)"
"(car"
" s_294)))"
" s_297))"
"((spec129_296)"
"(let-values(((s_298)"
"(cdr"
" s_294)))"
"(let-values(((s_299)"
"(if(syntax?$1"
" s_298)"
"(syntax-e$1"
" s_298)"
" s_298)))"
"(let-values(((flat-s_300)"
"(to-syntax-list.1"
" s_299)))"
"(if(not"
" flat-s_300)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_291))"
"(let-values()"
" flat-s_300)))))))"
"(values"
" for-label128_295"
" spec129_296))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_291)))))"
"(values"
" #t"
" for-label126_292"
" spec127_293))))))"
"(loop_162"
" spec127_279"
"(let-values(((or-part_301)"
" top-req_164))"
"(if or-part_301"
" or-part_301"
" req_175))"
"(phase+"
" phase-shift_165"
" #f)"
" just-meta_166"
" adjust_167"
" #f"
" just-meta-ok?_169"
" 'raw))))"
"(if(equal?"
" tmp_190"
" 'just-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_179"
" 'raw"
" just-meta-ok?_169)"
"(values))))"
"(let-values(((ok?_302"
" just-meta130_303"
" phase-level131_304"
" spec132_305)"
"(let-values(((s_319)"
" req_175))"
"(let-values(((orig-s_320)"
" s_319))"
"(let-values(((just-meta130_321"
" phase-level131_322"
" spec132_323)"
"(let-values(((s_324)"
"(if(syntax?$1"
" s_319)"
"(syntax-e$1"
" s_319)"
" s_319)))"
"(if(pair?"
" s_324)"
"(let-values(((just-meta133_325)"
"(let-values(((s_328)"
"(car"
" s_324)))"
" s_328))"
"((phase-level134_326"
" spec135_327)"
"(let-values(((s_329)"
"(cdr"
" s_324)))"
"(let-values(((s_330)"
"(if(syntax?$1"
" s_329)"
"(syntax-e$1"
" s_329)"
" s_329)))"
"(if(pair?"
" s_330)"
"(let-values(((phase-level136_331)"
"(let-values(((s_333)"
"(car"
" s_330)))"
" s_333))"
"((spec137_332)"
"(let-values(((s_334)"
"(cdr"
" s_330)))"
"(let-values(((s_335)"
"(if(syntax?$1"
" s_334)"
"(syntax-e$1"
" s_334)"
" s_334)))"
"(let-values(((flat-s_336)"
"(to-syntax-list.1"
" s_335)))"
"(if(not"
" flat-s_336)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_320))"
"(let-values()"
" flat-s_336)))))))"
"(values"
" phase-level136_331"
" spec137_332))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_320))))))"
"(values"
" just-meta133_325"
" phase-level134_326"
" spec135_327))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_320)))))"
"(values"
" #t"
" just-meta130_321"
" phase-level131_322"
" spec132_323))))))"
"(let-values(((p_318)"
"(syntax-e$1"
" phase-level131_304)))"
"(begin"
"(if(phase?"
" p_318)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad phase\""
" orig-s_148"
" req_175)))"
"(loop_162"
" spec132_305"
"(let-values(((or-part_337)"
" top-req_164))"
"(if or-part_337"
" or-part_337"
" req_175))"
" phase-shift_165"
" p_318"
" adjust_167"
" for-meta-ok?_168"
" #f"
" 'raw))))))"
"(if(equal?"
" tmp_190"
" 'only)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_179"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_338"
" only138_339"
" spec139_340"
" id140_341)"
"(let-values(((s_354)"
" req_175))"
"(let-values(((orig-s_355)"
" s_354))"
"(let-values(((only138_356"
" spec139_357"
" id140_358)"
"(let-values(((s_359)"
"(if(syntax?$1"
" s_354)"
"(syntax-e$1"
" s_354)"
" s_354)))"
"(if(pair?"
" s_359)"
"(let-values(((only141_360)"
"(let-values(((s_363)"
"(car"
" s_359)))"
" s_363))"
"((spec142_361"
" id143_362)"
"(let-values(((s_364)"
"(cdr"
" s_359)))"
"(let-values(((s_365)"
"(if(syntax?$1"
" s_364)"
"(syntax-e$1"
" s_364)"
" s_364)))"
"(if(pair?"
" s_365)"
"(let-values(((spec144_366)"
"(let-values(((s_368)"
"(car"
" s_365)))"
" s_368))"
"((id145_367)"
"(let-values(((s_369)"
"(cdr"
" s_365)))"
"(let-values(((s_370)"
"(if(syntax?$1"
" s_369)"
"(syntax-e$1"
" s_369)"
" s_369)))"
"(let-values(((flat-s_371)"
"(to-syntax-list.1"
" s_370)))"
"(if(not"
" flat-s_371)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_355))"
"(let-values()"
"(let-values(((id_372)"
"(let-values(((lst_373)"
" flat-s_371))"
"(begin"
"(if(list?"
" lst_373)"
"(void)"
"(let-values()"
"(in-list"
" lst_373)))"
"((letrec-values(((for-loop_374)"
"(lambda(id_375"
" lst_376)"
"(if(pair?"
" lst_376)"
"(let-values(((s_377)"
"(unsafe-car"
" lst_376)))"
"(let-values(((id_378)"
"(let-values(((id_379)"
" id_375))"
"(let-values(((id_380)"
"(let-values()"
"(let-values(((id146_381)"
"(let-values()"
"(if(let-values(((or-part_382)"
"(if(syntax?$1"
" s_377)"
"(symbol?"
"(syntax-e$1"
" s_377))"
" #f)))"
"(if or-part_382"
" or-part_382"
"(symbol?"
" s_377)))"
" s_377"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_355"
" s_377)))))"
"(cons"
" id146_381"
" id_379)))))"
"(values"
" id_380)))))"
"(for-loop_374"
" id_378"
"(unsafe-cdr"
" lst_376))))"
" id_375))))"
" for-loop_374)"
" null"
" lst_373)))))"
"(alt-reverse"
" id_372)))))))))"
"(values"
" spec144_366"
" id145_367))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_355))))))"
"(values"
" only141_360"
" spec142_361"
" id143_362))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_355)))))"
"(values"
" #t"
" only138_356"
" spec139_357"
" id140_358))))))"
"(loop_162"
"(list"
" spec139_340)"
"(let-values(((or-part_383)"
" top-req_164))"
"(if or-part_383"
" or-part_383"
" req_175))"
" phase-shift_165"
" just-meta_166"
"(adjust-only1.1"
"(ids->sym-set"
" id140_341))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_190"
" 'prefix)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_179"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_384"
" prefix147_385"
" id:prefix148_386"
" spec149_387)"
"(let-values(((s_400)"
" req_175))"
"(let-values(((orig-s_401)"
" s_400))"
"(let-values(((prefix147_402"
" id:prefix148_403"
" spec149_404)"
"(let-values(((s_405)"
"(if(syntax?$1"
" s_400)"
"(syntax-e$1"
" s_400)"
" s_400)))"
"(if(pair?"
" s_405)"
"(let-values(((prefix150_406)"
"(let-values(((s_409)"
"(car"
" s_405)))"
" s_409))"
"((id:prefix151_407"
" spec152_408)"
"(let-values(((s_410)"
"(cdr"
" s_405)))"
"(let-values(((s_411)"
"(if(syntax?$1"
" s_410)"
"(syntax-e$1"
" s_410)"
" s_410)))"
"(if(pair?"
" s_411)"
"(let-values(((id:prefix153_412)"
"(let-values(((s_414)"
"(car"
" s_411)))"
"(if(let-values(((or-part_415)"
"(if(syntax?$1"
" s_414)"
"(symbol?"
"(syntax-e$1"
" s_414))"
" #f)))"
"(if or-part_415"
" or-part_415"
"(symbol?"
" s_414)))"
" s_414"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_401"
" s_414))))"
"((spec154_413)"
"(let-values(((s_416)"
"(cdr"
" s_411)))"
"(let-values(((s_417)"
"(if(syntax?$1"
" s_416)"
"(syntax-e$1"
" s_416)"
" s_416)))"
"(if(pair?"
" s_417)"
"(let-values(((spec155_418)"
"(let-values(((s_419)"
"(car"
" s_417)))"
" s_419))"
"(()"
"(let-values(((s_420)"
"(cdr"
" s_417)))"
"(let-values(((s_421)"
"(if(syntax?$1"
" s_420)"
"(syntax-e$1"
" s_420)"
" s_420)))"
"(if(null?"
" s_421)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_401))))))"
"(values"
" spec155_418))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_401))))))"
"(values"
" id:prefix153_412"
" spec154_413))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_401))))))"
"(values"
" prefix150_406"
" id:prefix151_407"
" spec152_408))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_401)))))"
"(values"
" #t"
" prefix147_402"
" id:prefix148_403"
" spec149_404))))))"
"(loop_162"
"(list"
" spec149_387)"
"(let-values(((or-part_422)"
" top-req_164))"
"(if or-part_422"
" or-part_422"
" req_175))"
" phase-shift_165"
" just-meta_166"
"(adjust-prefix2.1"
"(syntax-e$1"
" id:prefix148_386))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_190"
" 'all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_179"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_423"
" all-except156_424"
" spec157_425"
" id158_426)"
"(let-values(((s_439)"
" req_175))"
"(let-values(((orig-s_440)"
" s_439))"
"(let-values(((all-except156_441"
" spec157_442"
" id158_443)"
"(let-values(((s_444)"
"(if(syntax?$1"
" s_439)"
"(syntax-e$1"
" s_439)"
" s_439)))"
"(if(pair?"
" s_444)"
"(let-values(((all-except159_445)"
"(let-values(((s_448)"
"(car"
" s_444)))"
" s_448))"
"((spec160_446"
" id161_447)"
"(let-values(((s_449)"
"(cdr"
" s_444)))"
"(let-values(((s_450)"
"(if(syntax?$1"
" s_449)"
"(syntax-e$1"
" s_449)"
" s_449)))"
"(if(pair?"
" s_450)"
"(let-values(((spec162_451)"
"(let-values(((s_453)"
"(car"
" s_450)))"
" s_453))"
"((id163_452)"
"(let-values(((s_454)"
"(cdr"
" s_450)))"
"(let-values(((s_455)"
"(if(syntax?$1"
" s_454)"
"(syntax-e$1"
" s_454)"
" s_454)))"
"(let-values(((flat-s_456)"
"(to-syntax-list.1"
" s_455)))"
"(if(not"
" flat-s_456)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_440))"
"(let-values()"
"(let-values(((id_457)"
"(let-values(((lst_458)"
" flat-s_456))"
"(begin"
"(if(list?"
" lst_458)"
"(void)"
"(let-values()"
"(in-list"
" lst_458)))"
"((letrec-values(((for-loop_459)"
"(lambda(id_460"
" lst_461)"
"(if(pair?"
" lst_461)"
"(let-values(((s_462)"
"(unsafe-car"
" lst_461)))"
"(let-values(((id_463)"
"(let-values(((id_464)"
" id_460))"
"(let-values(((id_465)"
"(let-values()"
"(let-values(((id164_466)"
"(let-values()"
"(if(let-values(((or-part_467)"
"(if(syntax?$1"
" s_462)"
"(symbol?"
"(syntax-e$1"
" s_462))"
" #f)))"
"(if or-part_467"
" or-part_467"
"(symbol?"
" s_462)))"
" s_462"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_440"
" s_462)))))"
"(cons"
" id164_466"
" id_464)))))"
"(values"
" id_465)))))"
"(for-loop_459"
" id_463"
"(unsafe-cdr"
" lst_461))))"
" id_460))))"
" for-loop_459)"
" null"
" lst_458)))))"
"(alt-reverse"
" id_457)))))))))"
"(values"
" spec162_451"
" id163_452))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_440))))))"
"(values"
" all-except159_445"
" spec160_446"
" id161_447))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_440)))))"
"(values"
" #t"
" all-except156_441"
" spec157_442"
" id158_443))))))"
"(loop_162"
"(list"
" spec157_425)"
"(let-values(((or-part_468)"
" top-req_164))"
"(if or-part_468"
" or-part_468"
" req_175))"
" phase-shift_165"
" just-meta_166"
"(adjust-all-except3.1"
" '||"
"(ids->sym-set"
" id158_426))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_190"
" 'prefix-all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_179"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_469"
" prefix-all-except165_470"
" id:prefix166_471"
" spec167_472"
" id168_473)"
"(let-values(((s_488)"
" req_175))"
"(let-values(((orig-s_489)"
" s_488))"
"(let-values(((prefix-all-except165_490"
" id:prefix166_491"
" spec167_492"
" id168_493)"
"(let-values(((s_494)"
"(if(syntax?$1"
" s_488)"
"(syntax-e$1"
" s_488)"
" s_488)))"
"(if(pair?"
" s_494)"
"(let-values(((prefix-all-except169_495)"
"(let-values(((s_499)"
"(car"
" s_494)))"
" s_499))"
"((id:prefix170_496"
" spec171_497"
" id172_498)"
"(let-values(((s_500)"
"(cdr"
" s_494)))"
"(let-values(((s_501)"
"(if(syntax?$1"
" s_500)"
"(syntax-e$1"
" s_500)"
" s_500)))"
"(if(pair?"
" s_501)"
"(let-values(((id:prefix173_502)"
"(let-values(((s_505)"
"(car"
" s_501)))"
"(if(let-values(((or-part_506)"
"(if(syntax?$1"
" s_505)"
"(symbol?"
"(syntax-e$1"
" s_505))"
" #f)))"
"(if or-part_506"
" or-part_506"
"(symbol?"
" s_505)))"
" s_505"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_489"
" s_505))))"
"((spec174_503"
" id175_504)"
"(let-values(((s_507)"
"(cdr"
" s_501)))"
"(let-values(((s_508)"
"(if(syntax?$1"
" s_507)"
"(syntax-e$1"
" s_507)"
" s_507)))"
"(if(pair?"
" s_508)"
"(let-values(((spec176_509)"
"(let-values(((s_511)"
"(car"
" s_508)))"
" s_511))"
"((id177_510)"
"(let-values(((s_512)"
"(cdr"
" s_508)))"
"(let-values(((s_513)"
"(if(syntax?$1"
" s_512)"
"(syntax-e$1"
" s_512)"
" s_512)))"
"(let-values(((flat-s_514)"
"(to-syntax-list.1"
" s_513)))"
"(if(not"
" flat-s_514)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_489))"
"(let-values()"
"(let-values(((id_515)"
"(let-values(((lst_516)"
" flat-s_514))"
"(begin"
"(if(list?"
" lst_516)"
"(void)"
"(let-values()"
"(in-list"
" lst_516)))"
"((letrec-values(((for-loop_517)"
"(lambda(id_518"
" lst_519)"
"(if(pair?"
" lst_519)"
"(let-values(((s_520)"
"(unsafe-car"
" lst_519)))"
"(let-values(((id_521)"
"(let-values(((id_522)"
" id_518))"
"(let-values(((id_523)"
"(let-values()"
"(let-values(((id178_524)"
"(let-values()"
"(if(let-values(((or-part_525)"
"(if(syntax?$1"
" s_520)"
"(symbol?"
"(syntax-e$1"
" s_520))"
" #f)))"
"(if or-part_525"
" or-part_525"
"(symbol?"
" s_520)))"
" s_520"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_489"
" s_520)))))"
"(cons"
" id178_524"
" id_522)))))"
"(values"
" id_523)))))"
"(for-loop_517"
" id_521"
"(unsafe-cdr"
" lst_519))))"
" id_518))))"
" for-loop_517)"
" null"
" lst_516)))))"
"(alt-reverse"
" id_515)))))))))"
"(values"
" spec176_509"
" id177_510))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_489))))))"
"(values"
" id:prefix173_502"
" spec174_503"
" id175_504))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_489))))))"
"(values"
" prefix-all-except169_495"
" id:prefix170_496"
" spec171_497"
" id172_498))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_489)))))"
"(values"
" #t"
" prefix-all-except165_490"
" id:prefix166_491"
" spec167_492"
" id168_493))))))"
"(loop_162"
"(list"
" spec167_472)"
"(let-values(((or-part_526)"
" top-req_164))"
"(if or-part_526"
" or-part_526"
" req_175))"
" phase-shift_165"
" just-meta_166"
"(adjust-all-except3.1"
"(syntax-e$1"
" id:prefix166_471)"
"(ids->sym-set"
" id168_473))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_190"
" 'rename)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_179"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_527"
" rename179_528"
" spec180_529"
" id:to181_530"
" id:from182_531)"
"(let-values(((s_546)"
" req_175))"
"(let-values(((orig-s_547)"
" s_546))"
"(let-values(((rename179_548"
" spec180_549"
" id:to181_550"
" id:from182_551)"
"(let-values(((s_552)"
"(if(syntax?$1"
" s_546)"
"(syntax-e$1"
" s_546)"
" s_546)))"
"(if(pair?"
" s_552)"
"(let-values(((rename183_553)"
"(let-values(((s_557)"
"(car"
" s_552)))"
" s_557))"
"((spec184_554"
" id:to185_555"
" id:from186_556)"
"(let-values(((s_558)"
"(cdr"
" s_552)))"
"(let-values(((s_559)"
"(if(syntax?$1"
" s_558)"
"(syntax-e$1"
" s_558)"
" s_558)))"
"(if(pair?"
" s_559)"
"(let-values(((spec187_560)"
"(let-values(((s_563)"
"(car"
" s_559)))"
" s_563))"
"((id:to188_561"
" id:from189_562)"
"(let-values(((s_564)"
"(cdr"
" s_559)))"
"(let-values(((s_565)"
"(if(syntax?$1"
" s_564)"
"(syntax-e$1"
" s_564)"
" s_564)))"
"(if(pair?"
" s_565)"
"(let-values(((id:to190_566)"
"(let-values(((s_568)"
"(car"
" s_565)))"
"(if(let-values(((or-part_569)"
"(if(syntax?$1"
" s_568)"
"(symbol?"
"(syntax-e$1"
" s_568))"
" #f)))"
"(if or-part_569"
" or-part_569"
"(symbol?"
" s_568)))"
" s_568"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_547"
" s_568))))"
"((id:from191_567)"
"(let-values(((s_570)"
"(cdr"
" s_565)))"
"(let-values(((s_571)"
"(if(syntax?$1"
" s_570)"
"(syntax-e$1"
" s_570)"
" s_570)))"
"(if(pair?"
" s_571)"
"(let-values(((id:from192_572)"
"(let-values(((s_573)"
"(car"
" s_571)))"
"(if(let-values(((or-part_574)"
"(if(syntax?$1"
" s_573)"
"(symbol?"
"(syntax-e$1"
" s_573))"
" #f)))"
"(if or-part_574"
" or-part_574"
"(symbol?"
" s_573)))"
" s_573"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_547"
" s_573))))"
"(()"
"(let-values(((s_575)"
"(cdr"
" s_571)))"
"(let-values(((s_576)"
"(if(syntax?$1"
" s_575)"
"(syntax-e$1"
" s_575)"
" s_575)))"
"(if(null?"
" s_576)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_547))))))"
"(values"
" id:from192_572))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_547))))))"
"(values"
" id:to190_566"
" id:from191_567))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_547))))))"
"(values"
" spec187_560"
" id:to188_561"
" id:from189_562))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_547))))))"
"(values"
" rename183_553"
" spec184_554"
" id:to185_555"
" id:from186_556))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                         \"bad syntax\""
" orig-s_547)))))"
"(values"
" #t"
" rename179_548"
" spec180_549"
" id:to181_550"
" id:from182_551))))))"
"(loop_162"
"(list"
" spec180_529)"
"(let-values(((or-part_577)"
" top-req_164))"
"(if or-part_577"
" or-part_577"
" req_175))"
" phase-shift_165"
" just-meta_166"
"(adjust-rename4.1"
" id:to181_530"
"(syntax-e$1"
" id:from182_531))"
" #f"
" #f"
" 'path))))"
"(let-values()"
"(let-values(((maybe-mp_578)"
"(syntax->datum$1"
" req_175)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_581)"
"(1/module-path?"
" maybe-mp_578)))"
"(if or-part_581"
" or-part_581"
"(1/resolved-module-path?"
" maybe-mp_578)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad require spec\""
" orig-s_148"
" req_175)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_582)"
" adjust_167))"
"(if or-part_582"
" or-part_582"
"(not"
"(eq?"
" just-meta_166"
" 'all))))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" requires+provides_151"
" #f))"
"(void))"
"(values))))"
"(let-values(((mp_579)"
"(if(1/resolved-module-path?"
" maybe-mp_578)"
"(resolved-module-path->module-path"
" maybe-mp_578)"
" maybe-mp_578)))"
"(let-values(((mpi_580)"
"(let-values(((mp210_584)"
" mp_579)"
"((self211_585)"
" self_152)"
"((declared-submodule-names212_586)"
" declared-submodule-names_156))"
"(module-path->mpi5.1"
" declared-submodule-names212_586"
" #t"
" mp210_584"
" self211_585))))"
"(begin"
"(let-values(((...r/expand/require.rkt:169:9_587)"
" perform-require!76.1)"
"((mpi193_588)"
" mpi_580)"
"((req194_589)"
" req_175)"
"((self195_590)"
" self_152)"
"((temp196_591)"
"(let-values(((or-part_605)"
" req_175))"
"(if or-part_605"
" or-part_605"
" top-req_164)))"
"((m-ns197_592)"
" m-ns_149)"
"((phase-shift198_593)"
" phase-shift_165)"
"((run-phase199_594)"
" run-phase_153)"
"((just-meta200_595)"
" just-meta_166)"
"((adjust201_596)"
" adjust_167)"
"((requires+provides202_597)"
" requires+provides_151)"
"((run?203_598)"
" run?_154)"
"((visit?204_599)"
" visit?_155)"
"((copy-variable-phase-level205_600)"
" copy-variable-phase-level_157)"
"((copy-variable-as-constant?206_601)"
" copy-variable-as-constant?_158)"
"((skip-variable-phase-level207_602)"
" skip-variable-phase-level_159)"
"((initial-require?208_603)"
" initial-require?_160)"
"((who209_604)"
" who_161))"
"(perform-require!74.1"
" adjust201_596"
" #t"
" #f"
" #f"
" copy-variable-as-constant?206_601"
" #t"
" copy-variable-phase-level205_600"
" #t"
" initial-require?208_603"
" #t"
" just-meta200_595"
" #t"
" phase-shift198_593"
" requires+provides202_597"
" #t"
" run-phase199_594"
" run?203_598"
" #t"
" skip-variable-phase-level207_602"
" #t"
" visit?204_599"
" #t"
" who209_604"
" mpi193_588"
" req194_589"
" self195_590"
" temp196_591"
" m-ns197_592))"
"(set! initial-require?_160"
" #f)))))))))))))))))))))))))"
"(values"
" result_178)))))"
"(if(not"
"((lambda x_606"
"(not result_176))"
" req_175))"
"(for-loop_172"
" result_176"
"(unsafe-cdr lst_174))"
" result_176)))"
" result_173))))"
" for-loop_172)"
" #t"
" lst_171))))))"
" loop_162)"
" reqs_147"
" #f"
" phase-shift_150"
" 'all"
" #f"
" #t"
" #t"
" 'raw)))))))))))))))))))"
"(define-values"
"(ids->sym-set)"
"(lambda(ids_660)"
"(let-values(((lst_661) ids_660))"
"(begin"
"(if(list? lst_661)(void)(let-values()(in-list lst_661)))"
"((letrec-values(((for-loop_662)"
"(lambda(table_663 lst_664)"
"(if(pair? lst_664)"
"(let-values(((id_665)(unsafe-car lst_664)))"
"(let-values(((table_666)"
"(let-values(((table_667) table_663))"
"(let-values(((table_668)"
"(let-values()"
"(let-values(((key_669 val_670)"
"(let-values()"
"(values"
"(let-values()(syntax-e$1 id_665))"
" #t))))"
"(hash-set table_667 key_669 val_670)))))"
"(values table_668)))))"
"(for-loop_662 table_666(unsafe-cdr lst_664))))"
" table_663))))"
" for-loop_662)"
" '#hash()"
" lst_661)))))"
"(define-values"
"(perform-initial-require!40.1)"
"(lambda(who33_683 mod-path35_684 self36_685 in-stx37_686 m-ns38_687 requires+provides39_688)"
"(let-values(((mod-path_689) mod-path35_684))"
"(let-values(((self_690) self36_685))"
"(let-values(((in-stx_691) in-stx37_686))"
"(let-values(((m-ns_692) m-ns38_687))"
"(let-values(((requires+provides_693) requires+provides39_688))"
"(let-values(((who_694) who33_683))"
"(let-values()"
"(let-values(((...r/expand/require.rkt:195:2_695) perform-require!76.1)"
"((temp213_696)"
"(let-values(((mod-path224_707) mod-path_689)((self225_708) self_690))"
"(module-path->mpi5.1 #f #f mod-path224_707 self225_708)))"
"((temp214_697) #f)"
"((self215_698) self_690)"
"((in-stx216_699) in-stx_691)"
"((m-ns217_700) m-ns_692)"
"((temp218_701) 0)"
"((temp219_702) 0)"
"((requires+provides220_703) requires+provides_693)"
"((temp221_704) #t)"
"((temp222_705) #t)"
"((who223_706) who_694))"
"(perform-require!74.1"
" #f"
" #f"
" temp221_704"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp222_705"
" #t"
" #f"
" #f"
" temp218_701"
" requires+provides220_703"
" #t"
" temp219_702"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" who223_706"
" temp213_696"
" temp214_697"
" self215_698"
" in-stx216_699"
" m-ns217_700)))))))))))"
"(define-values"
"(lifted/11.1$3 lifted/12.1$3 lifted/13.1$3 lifted/14.1$3 lifted/15.1$3)"
"(make-struct-type"
" 'perform-require!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'perform-require!"
"(case-lambda"
"((self_727 mpi_728 orig-s_729 self_730 in-stx_731 m-ns_732)"
"(apply missing-kw self_727 mpi_728 orig-s_729 self_730 in-stx_731 m-ns_732 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_733 mpi_734 orig-s_735 self_736 in-stx_737 m-ns_738)"
"(apply missing-kw self_733 mpi_734 orig-s_735 self_736 in-stx_737 m-ns_738 null)))))"
"(define-values"
"(perform-require!74.1)"
"(lambda(adjust46_739"
" adjust59_740"
" can-be-shadowed?50_741"
" can-be-shadowed?63_742"
" copy-variable-as-constant?53_743"
" copy-variable-as-constant?66_744"
" copy-variable-phase-level52_745"
" copy-variable-phase-level65_746"
" initial-require?51_747"
" initial-require?64_748"
" just-meta45_749"
" just-meta58_750"
" phase-shift43_751"
" requires+provides47_752"
" requires+provides60_753"
" run-phase44_754"
" run?49_755"
" run?62_756"
" skip-variable-phase-level54_757"
" skip-variable-phase-level67_758"
" visit?48_759"
" visit?61_760"
" who55_761"
" mpi69_762"
" orig-s70_763"
" self71_764"
" in-stx72_765"
" m-ns73_766)"
"(let-values(((mpi_767) mpi69_762))"
"(let-values(((orig-s_768) orig-s70_763))"
"(let-values()"
"(let-values(((in-stx_770) in-stx72_765))"
"(let-values(((m-ns_771) m-ns73_766))"
"(let-values(((phase-shift_772) phase-shift43_751))"
"(let-values(((run-phase_773) run-phase44_754))"
"(let-values(((just-meta_774)(if just-meta58_750 just-meta45_749 'all)))"
"(let-values(((adjust_775)(if adjust59_740 adjust46_739 #f)))"
"(let-values(((requires+provides_776)(if requires+provides60_753 requires+provides47_752 #f)))"
"(let-values(((visit?_777)(if visit?61_760 visit?48_759 #t)))"
"(let-values(((run?_778)(if run?62_756 run?49_755 #f)))"
"(let-values(((can-be-shadowed?_779)(if can-be-shadowed?63_742 can-be-shadowed?50_741 #f)))"
"(let-values(((initial-require?_780)"
"(if initial-require?64_748 initial-require?51_747 #f)))"
"(let-values(((copy-variable-phase-level_781)"
"(if copy-variable-phase-level65_746 copy-variable-phase-level52_745 #f)))"
"(let-values(((copy-variable-as-constant?_782)"
"(if copy-variable-as-constant?66_744"
" copy-variable-as-constant?53_743"
" #f)))"
"(let-values(((skip-variable-phase-level_783)"
"(if skip-variable-phase-level67_758"
" skip-variable-phase-level54_757"
" #f)))"
"(let-values(((who_784) who55_761))"
"(let-values()"
"(let-values()"
"(let-values(((module-name_785)(1/module-path-index-resolve mpi_767 #t)))"
"(let-values(((bind-in-stx_786)"
"(if(adjust-rename? adjust_775)"
"(adjust-rename-to-id adjust_775)"
" in-stx_770)))"
"(let-values(((done-syms_787)(if adjust_775(make-hash) #f)))"
"(let-values(((m_788)(namespace->module m-ns_771 module-name_785)))"
"(let-values((()"
"(begin"
"(if m_788"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'require"
" module-name_785)))"
"(values))))"
"(let-values(((interned-mpi_789)"
"(if requires+provides_776"
"(add-required-module!"
" requires+provides_776"
" mpi_767"
" phase-shift_772"
"(module-cross-phase-persistent? m_788))"
" mpi_767)))"
"(let-values((()"
"(begin"
"(if visit?_777"
"(let-values()"
"(let-values(((m-ns239_796) m-ns_771)"
"((interned-mpi240_797)"
" interned-mpi_789)"
"((phase-shift241_798)"
" phase-shift_772)"
"((run-phase242_799)"
" run-phase_773))"
"(namespace-module-visit!102.1"
" run-phase242_799"
" #t"
" m-ns239_796"
" interned-mpi240_797"
" phase-shift241_798)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if run?_778"
"(let-values()"
"(let-values(((m-ns243_801) m-ns_771)"
"((interned-mpi244_802)"
" interned-mpi_789)"
"((phase-shift245_803)"
" phase-shift_772)"
"((run-phase246_804)"
" run-phase_773))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" run-phase246_804"
" #t"
" #f"
" #f"
" #f"
" #f"
" m-ns243_801"
" interned-mpi244_802"
" phase-shift245_803)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(not"
"(let-values(((or-part_805)"
" visit?_777))"
"(if or-part_805"
" or-part_805"
" run?_778)))"
"(let-values()"
"(let-values(((m-ns247_807) m-ns_771)"
"((interned-mpi248_808)"
" interned-mpi_789)"
"((phase-shift249_809)"
" phase-shift_772)"
"((run-phase250_810)"
" run-phase_773))"
"(namespace-module-make-available!110.1"
" run-phase250_810"
" #t"
" m-ns247_807"
" interned-mpi248_808"
" phase-shift249_809)))"
"(void))"
"(values))))"
"(let-values(((can-bulk-bind?_790)"
"(if(let-values(((or-part_811)"
"(not adjust_775)))"
"(if or-part_811"
" or-part_811"
"(let-values(((or-part_812)"
"(adjust-prefix?"
" adjust_775)))"
"(if or-part_812"
" or-part_812"
"(adjust-all-except?"
" adjust_775)))))"
"(not skip-variable-phase-level_783)"
" #f)))"
"(let-values(((bulk-prefix_791)"
"(if(adjust-prefix? adjust_775)"
"(let-values()"
"(adjust-prefix-sym adjust_775))"
"(if(adjust-all-except? adjust_775)"
"(let-values()"
"(adjust-all-except-prefix-sym"
" adjust_775))"
"(let-values() #f)))))"
"(let-values(((bulk-excepts_792)"
"(if(adjust-all-except? adjust_775)"
"(let-values()"
"(adjust-all-except-syms adjust_775))"
"(let-values() '#hasheq()))))"
"(let-values(((update-nominals-box_793)"
"(if can-bulk-bind?_790"
"(box null)"
" #f)))"
"(let-values((()"
"(begin"
"(let-values(((...r/expand/require.rkt:255:3_813)"
" bind-all-provides!100.1)"
"((m226_814) m_788)"
"((bind-in-stx227_815)"
" bind-in-stx_786)"
"((phase-shift228_816)"
" phase-shift_772)"
"((m-ns229_817)"
" m-ns_771)"
"((interned-mpi230_818)"
" interned-mpi_789)"
"((orig-s231_819)"
" orig-s_768)"
"((temp232_820)"
"(if(adjust-only?"
" adjust_775)"
"(let-values()"
"(set->list"
"(adjust-only-syms"
" adjust_775)))"
"(if(adjust-rename?"
" adjust_775)"
"(let-values()"
"(list"
"(adjust-rename-from-sym"
" adjust_775)))"
"(let-values()"
" #f))))"
"((just-meta233_821)"
" just-meta_774)"
"((can-bulk-bind?234_822)"
" can-bulk-bind?_790)"
"((bulk-prefix235_823)"
" bulk-prefix_791)"
"((bulk-excepts236_824)"
" bulk-excepts_792)"
"((temp237_825)"
"(if requires+provides_776"
"(if can-bulk-bind?_790"
"(lambda(provides_827"
" provide-phase-level_828)"
"(let-values(((requires+provides251_830)"
" requires+provides_776)"
"((bind-in-stx252_831)"
" bind-in-stx_786)"
"((temp253_832)"
"(module-self"
" m_788))"
"((mpi254_833)"
" mpi_767)"
"((phase-shift255_834)"
" phase-shift_772)"
"((provides256_835)"
" provides_827)"
"((provide-phase-level257_836)"
" provide-phase-level_828)"
"((bulk-prefix258_837)"
" bulk-prefix_791)"
"((bulk-excepts259_838)"
" bulk-excepts_792)"
"((temp260_839)"
"(if(positive?"
"(hash-count"
" bulk-excepts_792))"
" done-syms_787"
" #f))"
"((can-be-shadowed?261_840)"
" can-be-shadowed?_779)"
"((temp262_841)"
"(not"
" initial-require?_780))"
"((orig-s263_842)"
" orig-s_768)"
"((update-nominals-box264_843)"
" update-nominals-box_793)"
"((who265_844)"
" who_784))"
"(add-bulk-required-ids!53.1"
" update-nominals-box264_843"
" can-be-shadowed?261_840"
" temp262_841"
" bulk-excepts259_838"
" orig-s263_842"
" bulk-prefix258_837"
" temp260_839"
" who265_844"
" requires+provides251_830"
" bind-in-stx252_831"
" temp253_832"
" mpi254_833"
" phase-shift255_834"
" provides256_835"
" provide-phase-level257_836)))"
" #f)"
" #f))"
"((temp238_826)"
"(if(let-values(((or-part_845)"
"(not"
" can-bulk-bind?_790)))"
"(if or-part_845"
" or-part_845"
" copy-variable-phase-level_781))"
"(lambda(binding_846"
" as-transformer?_847)"
"(let-values(((sym_848)"
"(module-binding-nominal-sym"
" binding_846)))"
"(let-values(((provide-phase_849)"
"(module-binding-nominal-phase"
" binding_846)))"
"(let-values(((adjusted-sym_850)"
"(if(if skip-variable-phase-level_783"
"(if(not"
" as-transformer?_847)"
"(equal?"
" provide-phase_849"
" skip-variable-phase-level_783)"
" #f)"
" #f)"
"(let-values()"
" #f)"
"(if(not"
" adjust_775)"
"(let-values()"
" sym_848)"
"(if(adjust-only?"
" adjust_775)"
"(let-values()"
"(if(set-member?"
"(adjust-only-syms"
" adjust_775)"
" sym_848)"
"(if(hash-set!"
" done-syms_787"
" sym_848"
" #t)"
" sym_848"
" #f)"
" #f))"
"(if(adjust-prefix?"
" adjust_775)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                      \"~a~a\""
"(adjust-prefix-sym"
" adjust_775)"
" sym_848)))"
"(if(adjust-all-except?"
" adjust_775)"
"(let-values()"
"(if(not"
"(if(set-member?"
"(adjust-all-except-syms"
" adjust_775)"
" sym_848)"
"(hash-set!"
" done-syms_787"
" sym_848"
" #t)"
" #f))"
"(string->symbol"
"(format"
"                                                                                                                                          \"~a~a\""
"(adjust-all-except-prefix-sym"
" adjust_775)"
" sym_848))"
" #f))"
"(if(adjust-rename?"
" adjust_775)"
"(let-values()"
"(if(eq?"
" sym_848"
"(adjust-rename-from-sym"
" adjust_775))"
"(if(hash-set!"
" done-syms_787"
" sym_848"
" #t)"
"(adjust-rename-to-id"
" adjust_775)"
" #f)"
" #f))"
"(void)))))))))"
"(begin"
"(if(if adjusted-sym_850"
" requires+provides_776"
" #f)"
"(let-values()"
"(let-values(((s_851)"
"(datum->syntax$1"
" bind-in-stx_786"
" adjusted-sym_850)))"
"(let-values(((bind-phase_852)"
"(phase+"
" phase-shift_772"
" provide-phase_849)))"
"(begin"
"(if initial-require?_780"
"(void)"
"(let-values()"
"(let-values(((temp272_854)"
" #t)"
"((requires+provides273_855)"
" requires+provides_776)"
"((s274_856)"
" s_851)"
"((bind-phase275_857)"
" bind-phase_852)"
"((binding276_858)"
" binding_846)"
"((orig-s277_859)"
" orig-s_768)"
"((temp278_860)"
" #t)"
"((who279_861)"
" who_784))"
"(check-not-defined87.1"
" #f"
" #f"
" temp272_854"
" #t"
" orig-s277_859"
" temp278_860"
" #t"
" binding276_858"
" #t"
" who279_861"
" requires+provides273_855"
" s274_856"
" bind-phase275_857))))"
"(let-values(((requires+provides266_863)"
" requires+provides_776)"
"((s267_864)"
" s_851)"
"((bind-phase268_865)"
" bind-phase_852)"
"((binding269_866)"
" binding_846)"
"((can-be-shadowed?270_867)"
" can-be-shadowed?_779)"
"((as-transformer?271_868)"
" as-transformer?_847))"
"(add-defined-or-required-id!13.1"
" as-transformer?271_868"
" can-be-shadowed?270_867"
" #t"
" requires+provides266_863"
" s267_864"
" bind-phase268_865"
" binding269_866))))))"
"(void))"
"(if(if adjusted-sym_850"
"(if copy-variable-phase-level_781"
"(if(not"
" as-transformer?_847)"
"(equal?"
" provide-phase_849"
" copy-variable-phase-level_781)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(copy-namespace-value"
" m-ns_771"
" adjusted-sym_850"
" binding_846"
" copy-variable-phase-level_781"
" phase-shift_772"
" copy-variable-as-constant?_782))"
"(void))"
" adjusted-sym_850)))))"
" #f)))"
"(bind-all-provides!98.1"
" temp237_825"
" bulk-excepts236_824"
" bulk-prefix235_823"
" can-bulk-bind?234_822"
" temp238_826"
" orig-s231_819"
" just-meta233_821"
" temp232_820"
" m226_814"
" bind-in-stx227_815"
" phase-shift228_816"
" m-ns229_817"
" interned-mpi230_818))"
"(values))))"
"(let-values((()"
"(begin"
"(if update-nominals-box_793"
"(let-values()"
"(let-values(((lst_869)"
"(unbox"
" update-nominals-box_793)))"
"(begin"
"(if(list? lst_869)"
"(void)"
"(let-values()"
"(in-list lst_869)))"
"((letrec-values(((for-loop_870)"
"(lambda(fold-var_871"
" lst_872)"
"(if(pair?"
" lst_872)"
"(let-values(((update!_873)"
"(unsafe-car"
" lst_872)))"
"(let-values(((fold-var_874)"
"(let-values()"
"(let-values(((fold-var_876)"
"(let-values()"
"(begin"
"(let-values()"
"(update!_873))"
"(void)))))"
"(values"
" fold-var_876)))))"
"(for-loop_870"
" fold-var_874"
"(unsafe-cdr"
" lst_872))))"
" fold-var_871))))"
" for-loop_870)"
"(void)"
" lst_869))))"
"(void))"
"(values))))"
"(let-values(((need-syms_794)"
"(if(adjust-only? adjust_775)"
"(let-values()"
"(adjust-only-syms"
" adjust_775))"
"(if(adjust-all-except?"
" adjust_775)"
"(let-values()"
"(adjust-all-except-syms"
" adjust_775))"
"(if(adjust-rename?"
" adjust_775)"
"(let-values()"
"(set"
"(adjust-rename-from-sym"
" adjust_775)))"
"(let-values() #f))))))"
"(if(if need-syms_794"
"(not"
"(="
"(set-count need-syms_794)"
"(hash-count done-syms_787)))"
" #f)"
"(let-values()"
"(let-values(((ht_877) need-syms_794))"
"(begin"
"(if((lambda(ht_878)"
"(if(hash? ht_878)"
"(immutable? ht_878)"
" #f))"
" ht_877)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_877)))"
"((letrec-values(((for-loop_879)"
"(lambda(fold-var_880"
" i_881)"
"(if i_881"
"(let-values(((sym_882)"
"(unsafe-immutable-hash-iterate-key"
" ht_877"
" i_881)))"
"(let-values(((fold-var_883)"
"(let-values()"
"(let-values(((fold-var_885)"
"(let-values()"
"(begin"
"(let-values()"
"(if(hash-ref"
" done-syms_787"
" sym_882"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" who_784"
"                                                                                                                                                     \"not in nested spec\""
" orig-s_768"
" sym_882))))"
"(void)))))"
"(values"
" fold-var_885)))))"
"(for-loop_879"
" fold-var_883"
"(unsafe-immutable-hash-iterate-next"
" ht_877"
" i_881))))"
" fold-var_880))))"
" for-loop_879)"
"(void)"
"(unsafe-immutable-hash-iterate-first"
" ht_877)))))"
"(void))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack75.1)"
"(lambda(given-kws_886 given-args_887 mpi69_888 orig-s70_889 self71_890 in-stx72_891 m-ns73_892)"
"(let-values(((adjust59_893)(if(pair? given-kws_886)(eq? '#:adjust(car given-kws_886)) #f)))"
"(let-values(((adjust46_894)(if adjust59_893(car given-args_887)(void)))"
"((given-kws_895)(if adjust59_893(cdr given-kws_886) given-kws_886))"
"((given-args_896)(if adjust59_893(cdr given-args_887) given-args_887)))"
"(let-values(((can-be-shadowed?63_897)"
"(if(pair? given-kws_895)(eq? '#:can-be-shadowed?(car given-kws_895)) #f)))"
"(let-values(((can-be-shadowed?50_898)(if can-be-shadowed?63_897(car given-args_896)(void)))"
"((given-kws_899)(if can-be-shadowed?63_897(cdr given-kws_895) given-kws_895))"
"((given-args_900)(if can-be-shadowed?63_897(cdr given-args_896) given-args_896)))"
"(let-values(((copy-variable-as-constant?66_901)"
"(if(pair? given-kws_899)(eq? '#:copy-variable-as-constant?(car given-kws_899)) #f)))"
"(let-values(((copy-variable-as-constant?53_902)"
"(if copy-variable-as-constant?66_901(car given-args_900)(void)))"
"((given-kws_903)(if copy-variable-as-constant?66_901(cdr given-kws_899) given-kws_899))"
"((given-args_904)(if copy-variable-as-constant?66_901(cdr given-args_900) given-args_900)))"
"(let-values(((copy-variable-phase-level65_905)"
"(if(pair? given-kws_903)(eq? '#:copy-variable-phase-level(car given-kws_903)) #f)))"
"(let-values(((copy-variable-phase-level52_906)"
"(if copy-variable-phase-level65_905(car given-args_904)(void)))"
"((given-kws_907)(if copy-variable-phase-level65_905(cdr given-kws_903) given-kws_903))"
"((given-args_908)"
"(if copy-variable-phase-level65_905(cdr given-args_904) given-args_904)))"
"(let-values(((initial-require?64_909)"
"(if(pair? given-kws_907)(eq? '#:initial-require?(car given-kws_907)) #f)))"
"(let-values(((initial-require?51_910)(if initial-require?64_909(car given-args_908)(void)))"
"((given-kws_911)(if initial-require?64_909(cdr given-kws_907) given-kws_907))"
"((given-args_912)(if initial-require?64_909(cdr given-args_908) given-args_908)))"
"(let-values(((just-meta58_913)"
"(if(pair? given-kws_911)(eq? '#:just-meta(car given-kws_911)) #f)))"
"(let-values(((just-meta45_914)(if just-meta58_913(car given-args_912)(void)))"
"((given-kws_915)(if just-meta58_913(cdr given-kws_911) given-kws_911))"
"((given-args_916)(if just-meta58_913(cdr given-args_912) given-args_912)))"
"(let-values(((phase-shift43_917)(car given-args_916))"
"((given-kws_918)(cdr given-kws_915))"
"((given-args_919)(cdr given-args_916)))"
"(let-values(((requires+provides60_920)"
"(if(pair? given-kws_918)"
"(eq? '#:requires+provides(car given-kws_918))"
" #f)))"
"(let-values(((requires+provides47_921)"
"(if requires+provides60_920(car given-args_919)(void)))"
"((given-kws_922)"
"(if requires+provides60_920(cdr given-kws_918) given-kws_918))"
"((given-args_923)"
"(if requires+provides60_920(cdr given-args_919) given-args_919)))"
"(let-values(((run-phase44_924)(car given-args_923))"
"((given-kws_925)(cdr given-kws_922))"
"((given-args_926)(cdr given-args_923)))"
"(let-values(((run?62_927)"
"(if(pair? given-kws_925)(eq? '#:run?(car given-kws_925)) #f)))"
"(let-values(((run?49_928)(if run?62_927(car given-args_926)(void)))"
"((given-kws_929)(if run?62_927(cdr given-kws_925) given-kws_925))"
"((given-args_930)"
"(if run?62_927(cdr given-args_926) given-args_926)))"
"(let-values(((skip-variable-phase-level67_931)"
"(if(pair? given-kws_929)"
"(eq? '#:skip-variable-phase-level(car given-kws_929))"
" #f)))"
"(let-values(((skip-variable-phase-level54_932)"
"(if skip-variable-phase-level67_931"
"(car given-args_930)"
"(void)))"
"((given-kws_933)"
"(if skip-variable-phase-level67_931"
"(cdr given-kws_929)"
" given-kws_929))"
"((given-args_934)"
"(if skip-variable-phase-level67_931"
"(cdr given-args_930)"
" given-args_930)))"
"(let-values(((visit?61_935)"
"(if(pair? given-kws_933)"
"(eq? '#:visit?(car given-kws_933))"
" #f)))"
"(let-values(((visit?48_936)"
"(if visit?61_935(car given-args_934)(void)))"
"((given-kws_937)"
"(if visit?61_935(cdr given-kws_933) given-kws_933))"
"((given-args_938)"
"(if visit?61_935(cdr given-args_934) given-args_934)))"
"(let-values(((who55_939)(car given-args_938)))"
"(perform-require!74.1"
" adjust46_894"
" adjust59_893"
" can-be-shadowed?50_898"
" can-be-shadowed?63_897"
" copy-variable-as-constant?53_902"
" copy-variable-as-constant?66_901"
" copy-variable-phase-level52_906"
" copy-variable-phase-level65_905"
" initial-require?51_910"
" initial-require?64_909"
" just-meta45_914"
" just-meta58_913"
" phase-shift43_917"
" requires+provides47_921"
" requires+provides60_920"
" run-phase44_924"
" run?49_928"
" run?62_927"
" skip-variable-phase-level54_932"
" skip-variable-phase-level67_931"
" visit?48_936"
" visit?61_935"
" who55_939"
" mpi69_888"
" orig-s70_889"
" self71_890"
" in-stx72_891"
" m-ns73_892))))))))))))))))))))))))))"
"(define-values"
"(perform-require!76.1)"
"(lifted/12.1$3"
"(lambda(given-kws_940 given-argc_941)"
"(if(= given-argc_941 7)"
"(subsets?"
" '(#:phase-shift #:run-phase #:who)"
" given-kws_940"
" '(#:adjust"
" #:can-be-shadowed?"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who))"
" #f))"
"(case-lambda"
"((given-kws_942 given-args_943 mpi_944 orig-s_945 self_946 in-stx_947 m-ns_948)"
"(unpack75.1 given-kws_942 given-args_943 mpi_944 orig-s_945 self_946 in-stx_947 m-ns_948)))"
" '(#:phase-shift #:run-phase #:who)"
" '(#:adjust"
" #:can-be-shadowed?"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)))"
"(define-values"
"(lifted/16.1$2 lifted/17.1$2 lifted/18.1$2 lifted/19.1$2 lifted/20.1$2)"
"(make-struct-type"
" 'bind-all-provides!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'bind-all-provides!"
"(case-lambda"
"((self_949 m_950 in-stx_951 phase-shift_952 ns_953 mpi_954)"
"(apply missing-kw self_949 m_950 in-stx_951 phase-shift_952 ns_953 mpi_954 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_955 m_956 in-stx_957 phase-shift_958 ns_959 mpi_960)"
"(apply missing-kw self_955 m_956 in-stx_957 phase-shift_958 ns_959 mpi_960 null)))))"
"(define-values"
"(bind-all-provides!98.1)"
"(lambda(bulk-callback84_961"
" bulk-excepts82_962"
" bulk-prefix81_963"
" can-bulk?80_964"
" filter83_965"
" in77_966"
" just-meta79_967"
" only78_968"
" m93_969"
" in-stx94_970"
" phase-shift95_971"
" ns96_972"
" mpi97_973)"
"(let-values(((m_974) m93_969))"
"(let-values(((in-stx_975) in-stx94_970))"
"(let-values(((phase-shift_976) phase-shift95_971))"
"(let-values(((ns_977) ns96_972))"
"(let-values(((mpi_978) mpi97_973))"
"(let-values(((orig-s_979) in77_966))"
"(let-values(((only-syms_980) only78_968))"
"(let-values(((just-meta_981) just-meta79_967))"
"(let-values(((can-bulk?_982) can-bulk?80_964))"
"(let-values(((bulk-prefix_983) bulk-prefix81_963))"
"(let-values(((bulk-excepts_984) bulk-excepts82_962))"
"(let-values(((filter_985) filter83_965))"
"(let-values(((bulk-callback_986) bulk-callback84_961))"
"(let-values()"
"(let-values(((self_987)(module-self m_974)))"
"(let-values(((ht_988)(module-provides m_974)))"
"(begin"
"(if((lambda(ht_989)(hash? ht_989)) ht_988)"
"(void)"
"(let-values()(default-in-hash ht_988)))"
"((letrec-values(((for-loop_990)"
"(lambda(fold-var_991 i_992)"
"(if i_992"
"(let-values(((provide-phase-level_993 provides_994)"
"(hash-iterate-key+value ht_988 i_992)))"
"(let-values(((fold-var_995)"
"(let-values(((fold-var_996) fold-var_991))"
"(if(let-values(((or-part_997)"
"(eq?"
" just-meta_981"
" 'all)))"
"(if or-part_997"
" or-part_997"
"(eqv?"
" just-meta_981"
" provide-phase-level_993)))"
"(let-values()"
"(let-values(((fold-var_999)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_1000)"
"(phase+"
" phase-shift_976"
" provide-phase-level_993)))"
"(begin"
"(if bulk-callback_986"
"(let-values()"
"(bulk-callback_986"
" provides_994"
" provide-phase-level_993))"
"(void))"
"(if filter_985"
"(let-values()"
"(let-values(((lst_1001)"
"(let-values(((or-part_1002)"
" only-syms_980))"
"(if or-part_1002"
" or-part_1002"
"(hash-keys"
" provides_994)))))"
"(begin"
"(if(list?"
" lst_1001)"
"(void)"
"(let-values()"
"(in-list"
" lst_1001)))"
"((letrec-values(((for-loop_1003)"
"(lambda(fold-var_1004"
" lst_1005)"
"(if(pair?"
" lst_1005)"
"(let-values(((sym_1006)"
"(unsafe-car"
" lst_1005)))"
"(let-values(((fold-var_1007)"
"(let-values()"
"(let-values(((fold-var_1009)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((binding/p_1010)"
"(hash-ref"
" provides_994"
" sym_1006"
" #f)))"
"(if binding/p_1010"
"(let-values()"
"(let-values(((b_1011)"
"(let-values(((binding/p280_1013)"
" binding/p_1010)"
"((sym281_1014)"
" sym_1006)"
"((self282_1015)"
" self_987)"
"((mpi283_1016)"
" mpi_978)"
"((provide-phase-level284_1017)"
" provide-phase-level_993)"
"((phase-shift285_1018)"
" phase-shift_976))"
"(provide-binding-to-require-binding11.1"
" mpi283_1016"
" phase-shift285_1018"
" provide-phase-level284_1017"
" self282_1015"
" binding/p280_1013"
" sym281_1014))))"
"(let-values(((sym_1019)"
"(filter_985"
" b_1011"
"(provided-as-transformer?"
" binding/p_1010))))"
"(if(if sym_1019"
"(not"
" can-bulk?_982)"
" #f)"
"(let-values()"
"(let-values(((temp286_1020)"
"(datum->syntax$1"
" in-stx_975"
" sym_1019))"
"((b287_1021)"
" b_1011)"
"((phase288_1022)"
" phase_1000))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" temp286_1020"
" b287_1021"
" phase288_1022)))"
"(void)))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_1009)))))"
"(for-loop_1003"
" fold-var_1007"
"(unsafe-cdr"
" lst_1005))))"
" fold-var_1004))))"
" for-loop_1003)"
"(void)"
" lst_1001))))"
"(void))"
"(if can-bulk?_982"
"(let-values()"
"(let-values(((in-stx289_1024)"
" in-stx_975)"
"((temp290_1025)"
"(bulk-binding14.1"
"(if(not"
" bulk-prefix_983)"
"(if(zero?"
"(hash-count"
" bulk-excepts_984))"
" provides_994"
" #f)"
" #f)"
" bulk-prefix_983"
" bulk-excepts_984"
" self_987"
" mpi_978"
" provide-phase-level_993"
" phase-shift_976"
"(namespace-bulk-binding-registry"
" ns_977)))"
"((phase291_1026)"
" phase_1000)"
"((orig-s292_1027)"
" orig-s_979))"
"(add-bulk-binding!25.1"
" orig-s292_1027"
" #t"
" in-stx289_1024"
" temp290_1025"
" phase291_1026)))"
"(void)))))"
"(void)))))"
"(values fold-var_999)))"
" fold-var_996))))"
"(for-loop_990"
" fold-var_995"
"(hash-iterate-next ht_988 i_992))))"
" fold-var_991))))"
" for-loop_990)"
"(void)"
"(hash-iterate-first ht_988)))))))))))))))))))))"
"(define-values"
"(unpack99.1)"
"(lambda(given-kws_1028 given-args_1029 m93_1030 in-stx94_1031 phase-shift95_1032 ns96_1033 mpi97_1034)"
"(let-values(((bulk-callback84_1035)(car given-args_1029))"
"((given-kws_1036)(cdr given-kws_1028))"
"((given-args_1037)(cdr given-args_1029)))"
"(let-values(((bulk-excepts82_1038)(car given-args_1037))"
"((given-kws_1039)(cdr given-kws_1036))"
"((given-args_1040)(cdr given-args_1037)))"
"(let-values(((bulk-prefix81_1041)(car given-args_1040))"
"((given-kws_1042)(cdr given-kws_1039))"
"((given-args_1043)(cdr given-args_1040)))"
"(let-values(((can-bulk?80_1044)(car given-args_1043))"
"((given-kws_1045)(cdr given-kws_1042))"
"((given-args_1046)(cdr given-args_1043)))"
"(let-values(((filter83_1047)(car given-args_1046))"
"((given-kws_1048)(cdr given-kws_1045))"
"((given-args_1049)(cdr given-args_1046)))"
"(let-values(((in77_1050)(car given-args_1049))"
"((given-kws_1051)(cdr given-kws_1048))"
"((given-args_1052)(cdr given-args_1049)))"
"(let-values(((just-meta79_1053)(car given-args_1052))"
"((given-kws_1054)(cdr given-kws_1051))"
"((given-args_1055)(cdr given-args_1052)))"
"(let-values(((only78_1056)(car given-args_1055)))"
"(bind-all-provides!98.1"
" bulk-callback84_1035"
" bulk-excepts82_1038"
" bulk-prefix81_1041"
" can-bulk?80_1044"
" filter83_1047"
" in77_1050"
" just-meta79_1053"
" only78_1056"
" m93_1030"
" in-stx94_1031"
" phase-shift95_1032"
" ns96_1033"
" mpi97_1034)))))))))))"
"(define-values"
"(bind-all-provides!100.1)"
"(lifted/17.1$2"
"(lambda(given-kws_1057 given-argc_1058)"
"(if(= given-argc_1058 7)"
"(let-values(((l2_1059) given-kws_1057))"
"(if(pair? l2_1059)"
"(if(eq?(car l2_1059) '#:bulk-callback)"
"(let-values(((l2_1060)(cdr l2_1059)))"
"(if(pair? l2_1060)"
"(if(eq?(car l2_1060) '#:bulk-excepts)"
"(let-values(((l2_1061)(cdr l2_1060)))"
"(if(pair? l2_1061)"
"(if(eq?(car l2_1061) '#:bulk-prefix)"
"(let-values(((l2_1062)(cdr l2_1061)))"
"(if(pair? l2_1062)"
"(if(eq?(car l2_1062) '#:can-bulk?)"
"(let-values(((l2_1063)(cdr l2_1062)))"
"(if(pair? l2_1063)"
"(if(eq?(car l2_1063) '#:filter)"
"(let-values(((l2_1064)(cdr l2_1063)))"
"(if(pair? l2_1064)"
"(if(eq?(car l2_1064) '#:in)"
"(let-values(((l2_1065)(cdr l2_1064)))"
"(if(pair? l2_1065)"
"(if(eq?(car l2_1065) '#:just-meta)"
"(let-values(((l2_1066)(cdr l2_1065)))"
"(if(pair? l2_1066)"
"(if(eq?(car l2_1066) '#:only)(null?(cdr l2_1066)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1067 given-args_1068 m_1069 in-stx_1070 phase-shift_1071 ns_1072 mpi_1073)"
"(unpack99.1 given-kws_1067 given-args_1068 m_1069 in-stx_1070 phase-shift_1071 ns_1072 mpi_1073)))"
" '(#:bulk-callback #:bulk-excepts #:bulk-prefix #:can-bulk? #:filter #:in #:just-meta #:only)"
" '(#:bulk-callback #:bulk-excepts #:bulk-prefix #:can-bulk? #:filter #:in #:just-meta #:only)))"
"(define-values"
"(require-spec-shift-for-syntax)"
"(lambda(req_1074)"
"(let-values(((rebuild-req_1075)"
"(lambda(req_1077 new-req_1078)(datum->syntax$1 req_1077 new-req_1078 req_1077 req_1077))))"
"(letrec-values(((loop_1076)"
"(lambda(shifted?_1079)"
"(lambda(req_1080)"
"(let-values(((fm_1081)"
"(if(pair?(syntax-e$1 req_1080))"
"(if(identifier?(car(syntax-e$1 req_1080)))"
"(syntax-e$1(car(syntax-e$1 req_1080)))"
" #f)"
" #f)))"
"(let-values(((tmp_1082) fm_1081))"
"(if(equal? tmp_1082 'for-meta)"
"(let-values()"
"(let-values(((ok?_1083 for-meta293_1084 phase-level294_1085 spec295_1086)"
"(let-values(((s_1100) req_1080))"
"(let-values(((orig-s_1101) s_1100))"
"(let-values(((for-meta293_1102 phase-level294_1103 spec295_1104)"
"(let-values(((s_1105)"
"(if(syntax?$1 s_1100)"
"(syntax-e$1 s_1100)"
" s_1100)))"
"(if(pair? s_1105)"
"(let-values(((for-meta296_1106)"
"(let-values(((s_1109)"
"(car s_1105)))"
" s_1109))"
"((phase-level297_1107 spec298_1108)"
"(let-values(((s_1110)"
"(cdr s_1105)))"
"(let-values(((s_1111)"
"(if(syntax?$1"
" s_1110)"
"(syntax-e$1"
" s_1110)"
" s_1110)))"
"(if(pair? s_1111)"
"(let-values(((phase-level299_1112)"
"(let-values(((s_1114)"
"(car"
" s_1111)))"
" s_1114))"
"((spec300_1113)"
"(let-values(((s_1115)"
"(cdr"
" s_1111)))"
"(let-values(((s_1116)"
"(if(syntax?$1"
" s_1115)"
"(syntax-e$1"
" s_1115)"
" s_1115)))"
"(let-values(((flat-s_1117)"
"(to-syntax-list.1"
" s_1116)))"
"(if(not"
" flat-s_1117)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                    \"bad syntax\""
" orig-s_1101))"
"(let-values()"
" flat-s_1117)))))))"
"(values"
" phase-level299_1112"
" spec300_1113))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_1101))))))"
"(values"
" for-meta296_1106"
" phase-level297_1107"
" spec298_1108))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_1101)))))"
"(values"
" #t"
" for-meta293_1102"
" phase-level294_1103"
" spec295_1104))))))"
"(let-values(((p_1099)(syntax-e$1 phase-level294_1085)))"
"(begin"
"(if(phase? p_1099)"
"(void)"
"                                           (let-values () (raise-syntax-error$1 #f \"bad phase\" req_1080)))"
"(rebuild-req_1075"
" req_1080"
"(list*"
" for-meta293_1084"
"(phase+ p_1099 1)"
"(map2(loop_1076 #t) spec295_1086)))))))"
"(if(equal? tmp_1082 'for-syntax)"
"(let-values()"
"(let-values(((ok?_1118 for-syntax301_1119 spec302_1120)"
"(let-values(((s_1131) req_1080))"
"(let-values(((orig-s_1132) s_1131))"
"(let-values(((for-syntax301_1133 spec302_1134)"
"(let-values(((s_1135)"
"(if(syntax?$1 s_1131)"
"(syntax-e$1 s_1131)"
" s_1131)))"
"(if(pair? s_1135)"
"(let-values(((for-syntax303_1136)"
"(let-values(((s_1138)"
"(car s_1135)))"
" s_1138))"
"((spec304_1137)"
"(let-values(((s_1139)"
"(cdr s_1135)))"
"(let-values(((s_1140)"
"(if(syntax?$1"
" s_1139)"
"(syntax-e$1"
" s_1139)"
" s_1139)))"
"(let-values(((flat-s_1141)"
"(to-syntax-list.1"
" s_1140)))"
"(if(not flat-s_1141)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_1132))"
"(let-values()"
" flat-s_1141)))))))"
"(values for-syntax303_1136 spec304_1137))"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_1132)))))"
"(values #t for-syntax301_1133 spec302_1134))))))"
"(rebuild-req_1075"
" req_1080"
"(list* 'for-meta 2(map2(loop_1076 #t) spec302_1120)))))"
"(if(equal? tmp_1082 'for-template)"
"(let-values()"
"(let-values(((ok?_1142 for-template305_1143 spec306_1144)"
"(let-values(((s_1155) req_1080))"
"(let-values(((orig-s_1156) s_1155))"
"(let-values(((for-template305_1157 spec306_1158)"
"(let-values(((s_1159)"
"(if(syntax?$1 s_1155)"
"(syntax-e$1 s_1155)"
" s_1155)))"
"(if(pair? s_1159)"
"(let-values(((for-template307_1160)"
"(let-values(((s_1162)"
"(car s_1159)))"
" s_1162))"
"((spec308_1161)"
"(let-values(((s_1163)"
"(cdr s_1159)))"
"(let-values(((s_1164)"
"(if(syntax?$1"
" s_1163)"
"(syntax-e$1"
" s_1163)"
" s_1163)))"
"(let-values(((flat-s_1165)"
"(to-syntax-list.1"
" s_1164)))"
"(if(not flat-s_1165)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1156))"
"(let-values()"
" flat-s_1165)))))))"
"(values for-template307_1160 spec308_1161))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_1156)))))"
"(values #t for-template305_1157 spec306_1158))))))"
"(rebuild-req_1075"
" req_1080"
"(list* 'for-meta 0(map2(loop_1076 #t) spec306_1144)))))"
"(if(equal? tmp_1082 'for-label)"
"(let-values()"
"(let-values(((ok?_1166 for-label309_1167 spec310_1168)"
"(let-values(((s_1179) req_1080))"
"(let-values(((orig-s_1180) s_1179))"
"(let-values(((for-label309_1181 spec310_1182)"
"(let-values(((s_1183)"
"(if(syntax?$1 s_1179)"
"(syntax-e$1 s_1179)"
" s_1179)))"
"(if(pair? s_1183)"
"(let-values(((for-label311_1184)"
"(let-values(((s_1186)"
"(car s_1183)))"
" s_1186))"
"((spec312_1185)"
"(let-values(((s_1187)"
"(cdr s_1183)))"
"(let-values(((s_1188)"
"(if(syntax?$1"
" s_1187)"
"(syntax-e$1"
" s_1187)"
" s_1187)))"
"(let-values(((flat-s_1189)"
"(to-syntax-list.1"
" s_1188)))"
"(if(not flat-s_1189)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_1180))"
"(let-values()"
" flat-s_1189)))))))"
"(values for-label311_1184 spec312_1185))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_1180)))))"
"(values #t for-label309_1181 spec310_1182))))))"
"(rebuild-req_1075"
" req_1080"
"(list* for-label309_1167(map2(loop_1076 #t) spec310_1168)))))"
"(if(equal? tmp_1082 'just-meta)"
"(let-values()"
"(let-values(((ok?_1190 just-meta313_1191 phase-level314_1192 spec315_1193)"
"(let-values(((s_1206) req_1080))"
"(let-values(((orig-s_1207) s_1206))"
"(let-values(((just-meta313_1208"
" phase-level314_1209"
" spec315_1210)"
"(let-values(((s_1211)"
"(if(syntax?$1 s_1206)"
"(syntax-e$1 s_1206)"
" s_1206)))"
"(if(pair? s_1211)"
"(let-values(((just-meta316_1212)"
"(let-values(((s_1215)"
"(car"
" s_1211)))"
" s_1215))"
"((phase-level317_1213"
" spec318_1214)"
"(let-values(((s_1216)"
"(cdr"
" s_1211)))"
"(let-values(((s_1217)"
"(if(syntax?$1"
" s_1216)"
"(syntax-e$1"
" s_1216)"
" s_1216)))"
"(if(pair? s_1217)"
"(let-values(((phase-level319_1218)"
"(let-values(((s_1220)"
"(car"
" s_1217)))"
" s_1220))"
"((spec320_1219)"
"(let-values(((s_1221)"
"(cdr"
" s_1217)))"
"(let-values(((s_1222)"
"(if(syntax?$1"
" s_1221)"
"(syntax-e$1"
" s_1221)"
" s_1221)))"
"(let-values(((flat-s_1223)"
"(to-syntax-list.1"
" s_1222)))"
"(if(not"
" flat-s_1223)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                            \"bad syntax\""
" orig-s_1207))"
"(let-values()"
" flat-s_1223)))))))"
"(values"
" phase-level319_1218"
" spec320_1219))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1207))))))"
"(values"
" just-meta316_1212"
" phase-level317_1213"
" spec318_1214))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_1207)))))"
"(values"
" #t"
" just-meta313_1208"
" phase-level314_1209"
" spec315_1210))))))"
"(rebuild-req_1075"
" req_1080"
"(list*"
" just-meta313_1191"
" phase-level314_1192"
"(map2(loop_1076 #f) spec315_1193)))))"
"(let-values()"
"(if shifted?_1079"
" req_1080"
"(datum->syntax$1 #f(list 'for-syntax req_1080)))))))))))))))"
"((loop_1076 #f) req_1074)))))"
"(define-values"
"(copy-namespace-value)"
"(lambda(m-ns_1224 adjusted-sym_1225 binding_1226 phase-level_1227 phase-shift_1228 as-constant?_1229)"
"(let-values(((i-ns_1230)"
"(let-values(((m-ns321_1233) m-ns_1224)"
"((temp322_1234)(1/module-path-index-resolve(module-binding-module binding_1226)))"
"((temp323_1235)(phase-(module-binding-phase binding_1226) phase-level_1227))"
"((temp324_1236) #t))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp324_1236"
" #t"
" #f"
" #f"
" m-ns321_1233"
" temp322_1234"
" temp323_1235))))"
"(let-values(((val_1231)"
"(namespace-get-variable"
" i-ns_1230"
"(module-binding-phase binding_1226)"
"(module-binding-sym binding_1226)"
"(lambda()"
"(error"
" 'namespace-require/copy"
"(format"
"(string-append"
"                          \"namespace mismatch;\\n\""
"                          \" variable not found\\n\""
"                          \"  variable name: ~s\\n\""
"                          \"  phase level: ~s\")"
"(module-binding-sym binding_1226)"
"(module-binding-phase binding_1226)))))))"
"(namespace-set-variable!"
" m-ns_1224"
"(phase+ phase-shift_1228 phase-level_1227)"
" adjusted-sym_1225"
" val_1231"
" as-constant?_1229)))))"
"(void)"
"(void)"
"(define-values"
"(select-defined-syms-and-bind!16.1)"
"(lambda(as-transformer?5_18"
" as-transformer?10_19"
" frame-id1_20"
" in4_21"
" in9_22"
" requires+provides3_23"
" requires+provides8_24"
" top-level-bind-scope2_25"
" top-level-bind-scope7_26"
" ids11_27"
" defined-syms12_28"
" self13_29"
" phase14_30"
" all-scopes-stx15_31)"
"(let-values(((ids_32) ids11_27))"
"(let-values(((defined-syms_33) defined-syms12_28))"
"(let-values(((self_34) self13_29))"
"(let-values(((phase_35) phase14_30))"
"(let-values(((all-scopes-stx_36) all-scopes-stx15_31))"
"(let-values(((frame-id_37) frame-id1_20))"
"(let-values(((top-level-bind-scope_38)(if top-level-bind-scope7_26 top-level-bind-scope2_25 #f)))"
"(let-values(((requires+provides_39)(if requires+provides8_24 requires+provides3_23 #f)))"
"(let-values(((orig-s_40)(if in9_22 in4_21 #f)))"
"(let-values(((as-transformer?_41)(if as-transformer?10_19 as-transformer?5_18 #f)))"
"(let-values()"
"(let-values(((defined-syms-at-phase_42)"
"(let-values(((or-part_43)(hash-ref defined-syms_33 phase_35 #f)))"
"(if or-part_43"
" or-part_43"
"(let-values(((ht_44)(make-hasheq)))"
"(begin(hash-set! defined-syms_33 phase_35 ht_44) ht_44))))))"
"(alt-reverse"
"(let-values(((lst_45) ids_32))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((id_49)(unsafe-car lst_48)))"
"(let-values(((fold-var_50)"
"(let-values(((fold-var_51) fold-var_47))"
"(let-values(((fold-var_52)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_53)"
"(syntax-e$1"
" id_49)))"
"(let-values(((defined-sym_54)"
"(if(if(not"
"(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_42"
" sym_53"
" #f)"
" id_49"
" phase_35"
" top-level-bind-scope_38))"
"(no-extra-scopes?"
" id_49"
" all-scopes-stx_36"
" top-level-bind-scope_38"
" phase_35)"
" #f)"
" sym_53"
"((letrec-values(((loop_56)"
"(lambda(pos_57)"
"(let-values(((s_58)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                                                  \"~a.~a\""
" sym_53"
" pos_57))))"
"(if(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_42"
" s_58"
" #f)"
" id_49"
" phase_35"
" top-level-bind-scope_38)"
"(loop_56"
"(add1"
" pos_57))"
" s_58)))))"
" loop_56)"
" 1))))"
"(let-values((()"
"(begin"
"(hash-set!"
" defined-syms-at-phase_42"
" defined-sym_54"
" id_49)"
"(values))))"
"(let-values(((b_55)"
"(let-values(((self23_60)"
" self_34)"
"((phase24_61)"
" phase_35)"
"((defined-sym25_62)"
" defined-sym_54)"
"((frame-id26_63)"
" frame-id_37)"
"((sym27_64)"
" sym_53))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" frame-id26_63"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sym27_64"
" #t"
" self23_60"
" phase24_61"
" defined-sym25_62))))"
"(begin"
"(if requires+provides_39"
"(let-values()"
"(let-values(((requires+provides28_66)"
" requires+provides_39)"
"((id29_67)"
" id_49)"
"((phase30_68)"
" phase_35)"
"((b31_69)"
" b_55))"
"(remove-required-id!69.1"
" b31_69"
" requires+provides28_66"
" id29_67"
" phase30_68)))"
"(void))"
"(let-values(((id19_71)"
" id_49)"
"((b20_72)"
" b_55)"
"((phase21_73)"
" phase_35)"
"((orig-s22_74)"
" orig-s_40))"
"(add-binding!17.1"
" orig-s22_74"
" #t"
" #f"
" #f"
" id19_71"
" b20_72"
" phase21_73))"
"(if requires+provides_39"
"(let-values()"
"(let-values(((requires+provides32_76)"
" requires+provides_39)"
"((id33_77)"
" id_49)"
"((phase34_78)"
" phase_35)"
"((b35_79)"
" b_55)"
"((as-transformer?36_80)"
" as-transformer?_41))"
"(add-defined-or-required-id!13.1"
" as-transformer?36_80"
" #f"
" #f"
" requires+provides32_76"
" id33_77"
" phase34_78"
" b35_79)))"
"(void))"
" defined-sym_54))))))"
" fold-var_51))))"
"(values fold-var_52)))))"
"(for-loop_46 fold-var_50(unsafe-cdr lst_48))))"
" fold-var_47))))"
" for-loop_46)"
" null"
" lst_45))))))))))))))))))"
"(define-values"
"(no-extra-scopes?)"
"(lambda(id_114 all-scopes-stx_115 top-level-bind-scope_116 phase_117)"
"(let-values(((m-id_118)(datum->syntax$1 all-scopes-stx_115(syntax-e$1 id_114))))"
"(let-values(((or-part_119)(bound-identifier=?$1 id_114 m-id_118 phase_117)))"
"(if or-part_119"
" or-part_119"
"(if top-level-bind-scope_116"
"(bound-identifier=?$1 id_114(add-scope m-id_118 top-level-bind-scope_116) phase_117)"
" #f))))))"
"(define-values"
"(defined-as-other?)"
"(lambda(prev-id_120 id_121 phase_122 top-level-bind-scope_123)"
"(if prev-id_120"
"(if(not(bound-identifier=?$1 prev-id_120 id_121 phase_122))"
"(let-values(((or-part_124)(not top-level-bind-scope_123)))"
"(if or-part_124"
" or-part_124"
"(not"
"(bound-identifier=?$1"
"(remove-scope prev-id_120 top-level-bind-scope_123)"
"(remove-scope id_121 top-level-bind-scope_123)"
" phase_122))))"
" #f)"
" #f)))"
"(define-values"
"(select-defined-syms-and-bind!/ctx)"
"(lambda(tl-ids_125 ctx_126)"
"(let-values(((tl-ids37_128) tl-ids_125)"
"((temp38_129)(root-expand-context-defined-syms ctx_126))"
"((temp39_130)(namespace-mpi(expand-context-namespace ctx_126)))"
"((temp40_131)(expand-context-phase ctx_126))"
"((temp41_132)(root-expand-context-all-scopes-stx ctx_126))"
"((temp42_133)(root-expand-context-frame-id ctx_126))"
"((temp43_134)(root-expand-context-top-level-bind-scope ctx_126)))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" temp42_133"
" #f"
" #f"
" #f"
" #f"
" temp43_134"
" #t"
" tl-ids37_128"
" temp38_129"
" temp39_130"
" temp40_131"
" temp41_132))))"
"(define-values"
"(add-defined-sym!)"
"(lambda(defined-syms_135 phase_136 sym_137 id_138)"
"(let-values(((defined-syms-at-phase_139)"
"(let-values(((or-part_140)(hash-ref defined-syms_135 phase_136 #f)))"
"(if or-part_140"
" or-part_140"
"(let-values(((ht_141)(make-hasheq)))"
"(begin(hash-set! defined-syms_135 phase_136 ht_141) ht_141))))))"
"(hash-set! defined-syms-at-phase_139 sym_137 id_138))))"
"(void)"
"(void)"
"(define-values"
"(make-create-root-expand-context-from-module)"
"(lambda(requires_1 evaled-ld-h_2)"
"(lambda(ns_3 phase-shift_4 original-self_5 self_6)"
"(let-values(((root-ctx_7)(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f))))"
"(let-values(((s_8)"
"(syntax-shift-phase-level$1"
"(add-scopes empty-syntax(root-expand-context-module-scopes root-ctx_7))"
" phase-shift_4)))"
"(let-values((()"
"(begin"
"(let-values(((lst_10) requires_1))"
"(begin"
"(if(list? lst_10)(void)(let-values()(in-list lst_10)))"
"((letrec-values(((for-loop_11)"
"(lambda(fold-var_12 lst_13)"
"(if(pair? lst_13)"
"(let-values(((phase+reqs_14)(unsafe-car lst_13)))"
"(let-values(((fold-var_15)"
"(let-values()"
"(let-values(((fold-var_17)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_18)"
"(car"
" phase+reqs_14)))"
"(let-values(((lst_19)"
"(cdr"
" phase+reqs_14)))"
"(begin"
"(if(list? lst_19)"
"(void)"
"(let-values()"
"(in-list lst_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_21"
" lst_22)"
"(if(pair?"
" lst_22)"
"(let-values(((req_23)"
"(unsafe-car"
" lst_22)))"
"(let-values(((fold-var_24)"
"(let-values()"
"(let-values(((fold-var_26)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_27)"
"(module-path-index-shift"
" req_23"
" original-self_5"
" self_6)))"
"(let-values(((mpi1_29)"
" mpi_27)"
"((s2_30)"
" s_8)"
"((self3_31)"
" self_6)"
"((s4_32)"
" s_8)"
"((ns5_33)"
" ns_3)"
"((temp6_34)"
"(phase+"
" phase_18"
" phase-shift_4))"
"((phase-shift7_35)"
" phase-shift_4)"
"((temp8_36)"
" 'module))"
"(perform-require!74.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp6_34"
" #f"
" #f"
" phase-shift7_35"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp8_36"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33))))"
"(void)))))"
"(values"
" fold-var_26)))))"
"(for-loop_20"
" fold-var_24"
"(unsafe-cdr"
" lst_22))))"
" fold-var_21))))"
" for-loop_20)"
"(void)"
" lst_19)))))"
"(void)))))"
"(values fold-var_17)))))"
"(for-loop_11 fold-var_15(unsafe-cdr lst_13))))"
" fold-var_12))))"
" for-loop_11)"
"(void)"
" lst_10)))"
"(values))))"
"(let-values(((defined-syms_9)(root-expand-context-defined-syms root-ctx_7)))"
"(begin"
"(let-values(((ht_37) evaled-ld-h_2))"
"(begin"
"(if((lambda(ht_38)(hash? ht_38)) ht_37)(void)(let-values()(default-in-hash ht_37)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40 i_41)"
"(if i_41"
"(let-values(((phase_42 linklet_43)(hash-iterate-key+value ht_37 i_41)))"
"(let-values(((fold-var_44)"
"(let-values()"
"(let-values(((fold-var_46)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_47)"
"(1/linklet-export-variables"
" linklet_43)))"
"(begin"
"(if(list? lst_47)"
"(void)"
"(let-values()(in-list lst_47)))"
"((letrec-values(((for-loop_48)"
"(lambda(fold-var_49"
" lst_50)"
"(if(pair?"
" lst_50)"
"(let-values(((sym_51)"
"(unsafe-car"
" lst_50)))"
"(let-values(((fold-var_52)"
"(let-values()"
"(let-values(((fold-var_54)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_55)"
"(datum->syntax$1"
" s_8"
" sym_51)))"
"(begin"
"(let-values(((id9_56)"
" id_55)"
"((temp10_57)"
"(let-values(((self12_59)"
" self_6)"
"((phase13_60)"
" phase_42)"
"((sym14_61)"
" sym_51))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" self12_59"
" phase13_60"
" sym14_61)))"
"((temp11_58)"
"(phase+"
" phase_42"
" phase-shift_4)))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" id9_56"
" temp10_57"
" temp11_58))"
"(add-defined-sym!"
" defined-syms_9"
" phase_42"
" sym_51"
" id_55))))"
"(void)))))"
"(values"
" fold-var_54)))))"
"(for-loop_48"
" fold-var_52"
"(unsafe-cdr"
" lst_50))))"
" fold-var_49))))"
" for-loop_48)"
"(void)"
" lst_47))))"
"(void)))))"
"(values fold-var_46)))))"
"(for-loop_39 fold-var_44(hash-iterate-next ht_37 i_41))))"
" fold-var_40))))"
" for-loop_39)"
"(void)"
"(hash-iterate-first ht_37))))"
" root-ctx_7))))))))"
"(void)"
"(void)"
"(define-values"
"(check-require-access9.1)"
"(lambda(skip-imports1_20"
" linklet3_21"
" import-module-uses4_22"
" import-module-instances5_23"
" insp6_24"
" extra-inspector7_25"
" extra-inspectorsss8_26)"
"(let-values(((linklet_27) linklet3_21))"
"(let-values(((skip-num-imports_28) skip-imports1_20))"
"(let-values(((import-module-uses_29) import-module-uses4_22))"
"(let-values(((import-module-instances_30) import-module-instances5_23))"
"(let-values(((insp_31) insp6_24))"
"(let-values(((extra-inspector_32) extra-inspector7_25))"
"(let-values(((extra-inspectorsss_33) extra-inspectorsss8_26))"
"(let-values()"
"(let-values(((lst_34)(list-tail(1/linklet-import-variables linklet_27) skip-num-imports_28))"
"((lst_35) import-module-uses_29)"
"((lst_36) import-module-instances_30)"
"((lst_37)"
"(let-values(((or-part_38) extra-inspectorsss_33))"
"(if or-part_38 or-part_38 import-module-uses_29))))"
"(begin"
"(if(list? lst_34)(void)(let-values()(in-list lst_34)))"
"(if(list? lst_35)(void)(let-values()(in-list lst_35)))"
"(if(list? lst_36)(void)(let-values()(in-list lst_36)))"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40 lst_41 lst_42 lst_43 lst_44)"
"(if(if(pair? lst_41)"
"(if(pair? lst_42)(if(pair? lst_43)(pair? lst_44) #f) #f)"
" #f)"
"(let-values(((import-syms_45)(unsafe-car lst_41))"
"((mu_46)(unsafe-car lst_42))"
"((mi_47)(unsafe-car lst_43))"
"((extra-inspectorss_48)(unsafe-car lst_44)))"
"(let-values(((fold-var_49)"
"(let-values()"
"(let-values(((fold-var_51)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_52)"
"(module-instance-module"
" mi_47)))"
"(if(module-no-protected? m_52)"
"(void)"
"(let-values()"
"(let-values(((access_53)"
"(let-values(((or-part_54)"
"(module-access"
" m_52)))"
"(if or-part_54"
" or-part_54"
"(module-compute-access!"
" m_52)))))"
"(let-values(((lst_55)"
" import-syms_45)"
"((lst_56)"
"(let-values(((or-part_57)"
"(if extra-inspectorsss_33"
" extra-inspectorss_48"
" #f)))"
"(if or-part_57"
" or-part_57"
" import-syms_45))))"
"(begin"
"(if(list? lst_55)"
"(void)"
"(let-values()"
"(in-list lst_55)))"
"(if(list? lst_56)"
"(void)"
"(let-values()"
"(in-list lst_56)))"
"((letrec-values(((for-loop_58)"
"(lambda(fold-var_59"
" lst_60"
" lst_61)"
"(if(if(pair?"
" lst_60)"
"(pair?"
" lst_61)"
" #f)"
"(let-values(((import-sym_62)"
"(unsafe-car"
" lst_60))"
"((extra-inspectors_63)"
"(unsafe-car"
" lst_61)))"
"(let-values(((fold-var_64)"
"(let-values()"
"(let-values(((fold-var_66)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((a_67)"
"(hash-ref"
"(hash-ref"
" access_53"
"(module-use-phase"
" mu_46)"
" '#hasheq())"
" import-sym_62"
" 'unexported)))"
"(if(let-values(((or-part_68)"
"(eq?"
" a_67"
" 'unexported)))"
"(if or-part_68"
" or-part_68"
"(eq?"
" a_67"
" 'protected)))"
"(let-values()"
"(let-values(((guard-insp_69)"
"(namespace-inspector"
"(module-instance-namespace"
" mi_47))))"
"(if(let-values(((or-part_70)"
"(inspector-superior?"
" insp_31"
" guard-insp_69)))"
"(if or-part_70"
" or-part_70"
"(let-values(((or-part_71)"
"(if extra-inspector_32"
"(inspector-superior?"
" extra-inspector_32"
" guard-insp_69)"
" #f)))"
"(if or-part_71"
" or-part_71"
"(if extra-inspectorsss_33"
"(if extra-inspectorss_48"
"(let-values(((ht_72)"
" extra-inspectors_63))"
"(begin"
"(if((lambda(ht_73)"
"(if(hash?"
" ht_73)"
"(immutable?"
" ht_73)"
" #f))"
" ht_72)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_72)))"
"((letrec-values(((for-loop_74)"
"(lambda(result_75"
" i_76)"
"(if i_76"
"(let-values(((extra-insp_77)"
"(unsafe-immutable-hash-iterate-key"
" ht_72"
" i_76)))"
"(let-values(((result_78)"
"(let-values()"
"(let-values(((result_80)"
"(let-values()"
"(let-values()"
"(inspector-superior?"
" extra-insp_77"
" guard-insp_69)))))"
"(values"
" result_80)))))"
"(if(not"
"((lambda x_81"
"(not"
" result_78))"
" extra-insp_77))"
"(for-loop_74"
" result_78"
"(unsafe-immutable-hash-iterate-next"
" ht_72"
" i_76))"
" result_78)))"
" result_75))))"
" for-loop_74)"
" #t"
"(unsafe-immutable-hash-iterate-first"
" ht_72))))"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(error"
" 'link"
"(string-append"
"                                                                                                                                                                          \"access disallowed by code inspector to ~a variable\\n\""
"                                                                                                                                                                          \"  variable: ~s\\n\""
"                                                                                                                                                                          \"  from module: ~a\")"
" a_67"
" import-sym_62"
"(1/module-path-index-resolve"
"(namespace-mpi"
"(module-instance-namespace"
" mi_47))))))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_66)))))"
"(for-loop_58"
" fold-var_64"
"(unsafe-cdr"
" lst_60)"
"(unsafe-cdr"
" lst_61))))"
" fold-var_59))))"
" for-loop_58)"
"(void)"
" lst_55"
" lst_56))))))))"
"(void)))))"
"(values fold-var_51)))))"
"(for-loop_39"
" fold-var_49"
"(unsafe-cdr lst_41)"
"(unsafe-cdr lst_42)"
"(unsafe-cdr lst_43)"
"(unsafe-cdr lst_44))))"
" fold-var_40))))"
" for-loop_39)"
"(void)"
" lst_34"
" lst_35"
" lst_36"
" lst_37)))))))))))))"
"(void)"
"(void)"
"(define-values(module-cache)(make-weak-hash))"
"(define-values(make-module-cache-key)(lambda(hash-code_1)(if hash-code_1(list hash-code_1) #f)))"
"(define-values"
"(module-cache-set!)"
"(lambda(key_2 proc_3)(hash-set! module-cache key_2(make-ephemeron key_2 proc_3))))"
"(define-values"
"(module-cache-ref)"
"(lambda(key_4)(let-values(((e_5)(hash-ref module-cache key_4 #f)))(if e_5(ephemeron-value e_5) #f))))"
"(void)"
"(void)"
"(define-values"
"(eval-module8.1)"
"(lambda(namespace1_1"
" namespace4_2"
" supermodule-name3_3"
" supermodule-name6_4"
" with-submodules?2_5"
" with-submodules?5_6"
" c7_7)"
"(let-values(((c_8) c7_7))"
"(let-values(((ns_9)(if namespace4_2 namespace1_1(1/current-namespace))))"
"(let-values(((with-submodules?_10)(if with-submodules?5_6 with-submodules?2_5 #t)))"
"(let-values(((supermodule-name_11)(if supermodule-name6_4 supermodule-name3_3 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((dh_12 h_13 data-instance_14 declaration-instance_15)"
"(compiled-module->dh+h+data-instance+declaration-instance c_8)))"
"(let-values(((syntax-literals-data-instance_16)"
"(if(compiled-in-memory? c_8)"
"(make-syntax-literal-data-instance-from-compiled-in-memory c_8)"
"(let-values(((l_37)(hash-ref h_13 'stx-data #f)))"
"(if l_37"
"(let-values()"
"(1/instantiate-linklet"
"(1/eval-linklet l_37)"
"(list deserialize-instance data-instance_14)))"
"(if(eq?(hash-ref h_13 'module->namespace #f) 'empty)"
"(let-values() empty-syntax-literals-instance/empty-namespace)"
"(let-values() empty-syntax-literals-data-instance)))))))"
"(let-values(((decl_17)"
"(lambda(key_38)(1/instance-variable-value declaration-instance_15 key_38))))"
"(let-values(((pre-submodule-names_18)(hash-ref h_13 'pre null)))"
"(let-values(((post-submodule-names_19)(hash-ref h_13 'post null)))"
"(let-values(((default-name_20)(hash-ref h_13 'name 'module)))"
"(let-values(((cache-key_21)"
"(make-module-cache-key"
"(if(null? pre-submodule-names_18)"
"(if(null? post-submodule-names_19)(hash-ref h_13 'hash-code #f) #f)"
" #f))))"
"(let-values(((cross-phase-persistent?_22)(hash-ref h_13 'cross-phase-persistent? #f)))"
"(let-values(((min-phase_23)(hash-ref h_13 'min-phase 0)))"
"(let-values(((max-phase_24)(hash-ref h_13 'max-phase 0)))"
"(let-values(((language-info_25)(hash-ref h_13 'language-info #f)))"
"(let-values(((phases-h_26)"
"(let-values(((start_39) min-phase_23)"
"((end_40)(add1 max-phase_24))"
"((inc_41) 1))"
"(begin"
"(if(if(real? start_39)"
"(if(real? end_40)(real? inc_41) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_39 end_40 inc_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(table_43 pos_44)"
"(if(< pos_44 end_40)"
"(let-values(((phase-level_45) pos_44))"
"(let-values(((table_46)"
"(let-values(((v_47)"
"(hash-ref"
" h_13"
" phase-level_45"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_48)"
"(lambda(table_49)"
"(let-values()"
"(let-values(((table_50)"
"(let-values(((table_51)"
" table_49))"
"(if v_47"
"(let-values(((table_52)"
" table_51))"
"(let-values(((table_53)"
"(let-values()"
"(let-values(((key_54"
" val_55)"
"(let-values()"
"(values"
" phase-level_45"
"(1/eval-linklet"
" v_47)))))"
"(hash-set"
" table_52"
" key_54"
" val_55)))))"
"(values"
" table_53)))"
" table_51))))"
" table_50)))))"
" for-loop_48)"
" table_43)))))"
"(for-loop_42"
" table_46"
"(+ pos_44 inc_41))))"
" table_43))))"
" for-loop_42)"
" '#hash()"
" start_39)))))"
"(let-values(((syntax-literals-linklet_27)"
"(let-values(((l_56)(hash-ref h_13 'stx #f)))"
"(if l_56(1/eval-linklet l_56) #f))))"
"(let-values(((extra-inspector_28)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-compile-time-inspector c_8)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_29)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_8)"
" '#hasheqv())))"
"(let-values(((requires_30)(decl_17 'requires)))"
"(let-values(((provides_31)(decl_17 'provides)))"
"(let-values(((original-self_32)(decl_17 'self-mpi)))"
"(let-values(((phase-to-link-modules_33)"
"(decl_17 'phase-to-link-modules)))"
"(let-values(((create-root-expand-context-from-module_34)"
"(make-create-root-expand-context-from-module"
" requires_30"
" phases-h_26)))"
"(let-values(((declare-submodules_35)"
"(if dh_12"
"(lambda(ns_57 names_58 declare-name_59 pre?_60)"
"(if(compiled-in-memory? c_8)"
"(let-values(((lst_61)"
"(if pre?_60"
"(compiled-in-memory-pre-compiled-in-memorys"
" c_8)"
"(compiled-in-memory-post-compiled-in-memorys"
" c_8))))"
"(begin"
"(if(list? lst_61)"
"(void)"
"(let-values()(in-list lst_61)))"
"((letrec-values(((for-loop_62)"
"(lambda(fold-var_63"
" lst_64)"
"(if(pair? lst_64)"
"(let-values(((c_65)"
"(unsafe-car"
" lst_64)))"
"(let-values(((fold-var_66)"
"(let-values()"
"(let-values(((fold-var_68)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((c12_70)"
" c_65)"
"((ns13_71)"
" ns_57)"
"((declare-name14_72)"
" declare-name_59))"
"(eval-module8.1"
" ns13_71"
" #t"
" declare-name14_72"
" #t"
" #f"
" #f"
" c12_70)))"
"(void)))))"
"(values"
" fold-var_68)))))"
"(for-loop_62"
" fold-var_66"
"(unsafe-cdr"
" lst_64))))"
" fold-var_63))))"
" for-loop_62)"
"(void)"
" lst_61)))"
"(let-values(((lst_73) names_58))"
"(begin"
"(if(list? lst_73)"
"(void)"
"(let-values()(in-list lst_73)))"
"((letrec-values(((for-loop_74)"
"(lambda(fold-var_75"
" lst_76)"
"(if(pair? lst_76)"
"(let-values(((name_77)"
"(unsafe-car"
" lst_76)))"
"(let-values(((fold-var_78)"
"(let-values()"
"(let-values(((fold-var_80)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((sm-cd_81)"
"(hash-ref"
" dh_12"
" name_77"
" #f)))"
"(begin"
"(if sm-cd_81"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                     \"missing submodule declaration:\""
" name_77)))"
"(let-values(((sm-cd15_83)"
" sm-cd_81)"
"((ns16_84)"
" ns_57)"
"((declare-name17_85)"
" declare-name_59))"
"(eval-module8.1"
" ns16_84"
" #t"
" declare-name17_85"
" #t"
" #f"
" #f"
" sm-cd15_83)))))"
"(void)))))"
"(values"
" fold-var_80)))))"
"(for-loop_74"
" fold-var_78"
"(unsafe-cdr"
" lst_76))))"
" fold-var_75))))"
" for-loop_74)"
"(void)"
" lst_73)))))"
" void)))"
"(let-values(((declare-this-module_36)"
"(lambda(ns_86)"
"(let-values(((m_87)"
"(let-values(((temp22_90)"
"(1/current-module-declare-source))"
"((original-self23_91)"
" original-self_32)"
"((requires24_92)"
" requires_30)"
"((provides25_93)"
" provides_31)"
"((language-info26_94)"
" language-info_25)"
"((min-phase27_95)"
" min-phase_23)"
"((max-phase28_96)"
" max-phase_24)"
"((cross-phase-persistent?29_97)"
" cross-phase-persistent?_22)"
"((temp30_98)"
"(append"
" pre-submodule-names_18"
" post-submodule-names_19))"
"((supermodule-name31_99)"
" supermodule-name_11)"
"((temp32_100)"
"(lambda()"
"(get-all-variables"
" phases-h_26)))"
"((temp33_101)"
"(lambda(phase-level_104"
" ns_105)"
"(module-linklet-info2.1"
"(hash-ref"
" phases-h_26"
" phase-level_104"
" #f)"
"(hash-ref"
" phase-to-link-modules_33"
" phase-level_104"
" #f)"
" original-self_32)))"
"((temp34_102)"
"(lambda(data-box_106"
" ns_107"
" phase-shift_108"
" self_109"
" bulk-binding-registry_110"
" insp_111)"
"(if(unbox"
" data-box_106)"
"(void)"
"(let-values()"
"(init-instance-data!"
" data-box_106"
" cache-key_21"
" ns_107"
" syntax-literals-linklet_27"
" data-instance_14"
" syntax-literals-data-instance_16"
" phase-shift_108"
" original-self_32"
" self_109"
" bulk-binding-registry_110"
" insp_111"
" create-root-expand-context-from-module_34)))))"
"((temp35_103)"
"(lambda(data-box_112"
" ns_113"
" phase-shift_114"
" phase-level_115"
" self_116"
" bulk-binding-registry_117"
" insp_118)"
"(let-values()"
"(let-values(((syntax-literals-instance_119)"
"(instance-data-syntax-literals-instance"
"(unbox"
" data-box_112))))"
"(let-values(((phase-linklet_120)"
"(hash-ref"
" phases-h_26"
" phase-level_115"
" #f)))"
"(if phase-linklet_120"
"(let-values()"
"(let-values(((module-uses_121)"
"(hash-ref"
" phase-to-link-modules_33"
" phase-level_115)))"
"(let-values(((import-module-instances_122"
" import-instances_123)"
"(let-values(((mis_126"
" is_127)"
"(let-values(((lst_128)"
" module-uses_121))"
"(begin"
"(if(list?"
" lst_128)"
"(void)"
"(let-values()"
"(in-list"
" lst_128)))"
"((letrec-values(((for-loop_129)"
"(lambda(mis_130"
" is_131"
" lst_132)"
"(if(pair?"
" lst_132)"
"(let-values(((mu_133)"
"(unsafe-car"
" lst_132)))"
"(let-values(((mis_134"
" is_135)"
"(let-values(((mis_136)"
" mis_130)"
"((is_137)"
" is_131))"
"(let-values(((mis_138"
" is_139)"
"(let-values()"
"(let-values(((mis43_140"
" is44_141)"
"(let-values()"
"(let-values(((ns45_143)"
" ns_113)"
"((mu46_144)"
" mu_133)"
"((original-self47_145)"
" original-self_32)"
"((self48_146)"
" self_116)"
"((temp49_147)"
"(phase+"
"(phase-"
" phase-level_115"
"(module-use-phase"
" mu_133))"
" phase-shift_114)))"
"(namespace-module-use->module+linklet-instances144.1"
" temp49_147"
" original-self47_145"
" #t"
" self48_146"
" #t"
" ns45_143"
" mu46_144)))))"
"(values"
"(cons"
" mis43_140"
" mis_136)"
"(cons"
" is44_141"
" is_137))))))"
"(values"
" mis_138"
" is_139)))))"
"(for-loop_129"
" mis_134"
" is_135"
"(unsafe-cdr"
" lst_132))))"
"(values"
" mis_130"
" is_131)))))"
" for-loop_129)"
" null"
" null"
" lst_128)))))"
"(values"
"(alt-reverse"
" mis_126)"
"(alt-reverse"
" is_127)))))"
"(let-values((()"
"(begin"
"(let-values(((phase-linklet36_149)"
" phase-linklet_120)"
"((temp37_150)"
" 2)"
"((module-uses38_151)"
" module-uses_121)"
"((import-module-instances39_152)"
" import-module-instances_122)"
"((insp40_153)"
" insp_118)"
"((extra-inspector41_154)"
" extra-inspector_28)"
"((temp42_155)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_29"
" phase-level_115"
" #f)))"
"(check-require-access9.1"
" temp37_150"
" phase-linklet36_149"
" module-uses38_151"
" import-module-instances39_152"
" insp40_153"
" extra-inspector41_154"
" temp42_155))"
"(values))))"
"(let-values(((module-body-instance-instance_124)"
"(let-values(((temp50_157)"
"(lambda(name_158"
" val_159)"
"(namespace-set-transformer!"
" ns_113"
"(sub1"
" phase-level_115)"
" name_158"
" val_159))))"
"(make-module-body-instance-instance18.1"
" temp50_157))))"
"(let-values(((instantiate-body_125)"
"(lambda()"
"(1/instantiate-linklet"
" phase-linklet_120"
"(list*"
" syntax-literals-instance_119"
" module-body-instance-instance_124"
" import-instances_123)"
"(namespace->instance"
" ns_113"
" phase-level_115)))))"
"(if(zero-phase?"
" phase-level_115)"
"(let-values()"
"(if(zero-phase?"
" phase-shift_114)"
"(let-values()"
"(instantiate-body_125))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" ns_113)"
"(let-values()"
"(instantiate-body_125))))))"
"(let-values()"
"(let-values(((ns-1_160)"
"(namespace->namespace-at-phase"
" ns_113"
"(phase+"
" phase-shift_114"
"(sub1"
" phase-level_115)))))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(delay"
"(lambda()"
"(let-values(((ns-151_161)"
" ns-1_160))"
"(make-expand-context8.1"
" #f"
" #f"
" #f"
" #f"
" ns-151_161))))"
" 1/current-namespace"
" ns_113"
" current-module-code-inspector"
" insp_118)"
"(let-values()"
"(instantiate-body_125))))))))))))"
"(void))))))))"
"(make-module37.1"
" cross-phase-persistent?29_97"
" #t"
" temp32_100"
" #t"
" temp35_103"
" language-info26_94"
" #t"
" max-phase28_96"
" #t"
" min-phase27_95"
" #t"
" #f"
" #f"
" temp33_101"
" #t"
" #f"
" #f"
" temp34_102"
" #t"
" #f"
" #f"
" provides25_93"
" requires24_92"
" #t"
" original-self23_91"
" temp22_90"
" #t"
" temp30_98"
" #t"
" supermodule-name31_99"
" #t))))"
"(let-values(((declare-name_88)"
"(substitute-module-declare-name"
" default-name_20)))"
"(begin"
"(if with-submodules?_10"
"(let-values()"
"(declare-submodules_35"
" ns_86"
" pre-submodule-names_18"
" declare-name_88"
" #t))"
"(void))"
"(let-values(((ns18_163) ns_86)"
"((m19_164) m_87)"
"((declare-name20_165)"
" declare-name_88)"
"((with-submodules?21_166)"
" with-submodules?_10))"
"(declare-module!56.1"
" with-submodules?21_166"
" #t"
" ns18_163"
" m19_164"
" declare-name20_165))"
"(if with-submodules?_10"
"(let-values()"
"(declare-submodules_35"
" ns_86"
" post-submodule-names_19"
" declare-name_88"
" #f))"
"(void))))))))"
"(begin"
"(if cache-key_21"
"(let-values()"
"(module-cache-set!"
" cache-key_21"
" declare-this-module_36))"
"(void))"
"(declare-this-module_36"
" ns_9))))))))))))))))))))))))))))))))"
"(define-values"
"(struct:instance-data instance-data11.1 instance-data? instance-data-syntax-literals-instance instance-data-cache-key)"
"(let-values(((struct:_193 make-_194 ?_195 -ref_196 -set!_197)"
"(let-values()"
"(let-values()"
"(make-struct-type 'instance-data #f 2 0 #f null(current-inspector) #f '(0 1) #f 'instance-data)))))"
"(values"
" struct:_193"
" make-_194"
" ?_195"
"(make-struct-field-accessor -ref_196 0 'syntax-literals-instance)"
"(make-struct-field-accessor -ref_196 1 'cache-key))))"
"(define-values"
"(init-instance-data!)"
"(lambda(data-box_218"
" cache-key_219"
" ns_220"
" syntax-literals-linklet_221"
" data-instance_222"
" syntax-literals-data-instance_223"
" phase-shift_224"
" original-self_225"
" self_226"
" bulk-binding-registry_227"
" insp_228"
" create-root-expand-context-from-module_229)"
"(let-values((()"
"(begin"
"(if(not(load-on-demand-enabled))"
"(let-values()"
"(force-syntax-deserialize syntax-literals-data-instance_223 bulk-binding-registry_227))"
"(void))"
"(values))))"
"(let-values(((inst_230)"
"(let-values(((ns53_234) ns_220)"
"((phase-shift54_235) phase-shift_224)"
"((self55_236) self_226)"
"((insp56_237) insp_228)"
"((bulk-binding-registry57_238) bulk-binding-registry_227)"
"((temp58_239)"
"                                  (lambda (name_240 val_241) (error \"shouldn't get here for the root-ctx linklet\"))))"
"(make-instance-instance13.1"
" bulk-binding-registry57_238"
" insp56_237"
" ns53_234"
" phase-shift54_235"
" self55_236"
" temp58_239))))"
"(let-values(((syntax-literals-instance_231)"
"(if syntax-literals-linklet_221"
"(1/instantiate-linklet"
" syntax-literals-linklet_221"
"(list deserialize-instance data-instance_222 syntax-literals-data-instance_223 inst_230))"
" empty-syntax-literals-instance)))"
"(let-values((()"
"(begin"
"(set-box! data-box_218(instance-data11.1 syntax-literals-instance_231 cache-key_219))"
"(values))))"
"(let-values(((get-encoded-root-expand-ctx_232)"
"(1/instance-variable-value syntax-literals-instance_231 'get-encoded-root-expand-ctx)))"
"(if(eq? get-encoded-root-expand-ctx_232 'empty)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_220"
"(delay(lambda()(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f))))))"
"(if(procedure? get-encoded-root-expand-ctx_232)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_220"
"(delay(lambda()(root-expand-context-decode-for-module(get-encoded-root-expand-ctx_232))))))"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_220"
"(delay"
"(lambda()"
"(create-root-expand-context-from-module_229"
" ns_220"
" phase-shift_224"
" original-self_225"
" self_226))))))))))))))"
"(define-values"
"(force-syntax-deserialize)"
"(lambda(syntax-literals-data-instance_242 bulk-binding-registry_243)"
"(let-values(((deserialize-syntax_244)"
"(1/instance-variable-value syntax-literals-data-instance_242 deserialize-syntax-id)))"
"(if deserialize-syntax_244(let-values()(deserialize-syntax_244 bulk-binding-registry_243))(void)))))"
"(define-values"
"(compiled-module->dh+h)"
"(lambda(c_245)"
"(let-values(((ld/h_246)(if(compiled-in-memory? c_245)(compiled-in-memory-linklet-directory c_245) c_245)))"
"(let-values(((dh_247)"
"(if(1/linklet-directory? ld/h_246)"
"(let-values()(1/linklet-directory->hash ld/h_246))"
"(let-values() #f))))"
"(let-values(((h_248)(1/linklet-bundle->hash(if dh_247(hash-ref dh_247 #f) ld/h_246))))"
"(values dh_247 h_248))))))"
"(define-values"
"(compiled-module->h)"
"(lambda(c_249)(let-values(((dh_250 h_251)(compiled-module->dh+h c_249))) h_251)))"
"(define-values"
"(compiled-module->dh+h+data-instance+declaration-instance)"
"(lambda(c_252)"
"(let-values(((dh_253 h_254)(compiled-module->dh+h c_252)))"
"(let-values(((data-instance_255)"
"(if(compiled-in-memory? c_252)"
"(make-data-instance-from-compiled-in-memory c_252)"
"(1/instantiate-linklet(1/eval-linklet(hash-ref h_254 'data))(list deserialize-instance)))))"
"(let-values(((declaration-instance_256)"
"(if(if(compiled-in-memory? c_252)(compiled-in-memory-original-self c_252) #f)"
"(make-declaration-instance-from-compiled-in-memory c_252)"
"(1/instantiate-linklet"
"(1/eval-linklet(hash-ref h_254 'decl))"
"(list deserialize-instance data-instance_255)))))"
"(values dh_253 h_254 data-instance_255 declaration-instance_256))))))"
"(define-values"
"(compiled-module->declaration-instance)"
"(lambda(c_257)"
"(let-values(((dh_258 h_259 data-instance_260 declaration-instance_261)"
"(compiled-module->dh+h+data-instance+declaration-instance c_257)))"
" declaration-instance_261)))"
"(define-values"
"(compiled-module->h+declaration-instance)"
"(lambda(c_262)"
"(let-values(((dh_263 h_264 data-instance_265 declaration-instance_266)"
"(compiled-module->dh+h+data-instance+declaration-instance c_262)))"
"(values h_264 declaration-instance_266))))"
"(define-values"
"(make-data-instance-from-compiled-in-memory)"
"(lambda(cim_267)(1/make-instance 'data #f mpi-vector-id(compiled-in-memory-mpis cim_267))))"
"(define-values"
"(make-declaration-instance-from-compiled-in-memory)"
"(lambda(cim_268)"
"(1/make-instance"
" 'decl"
" #f"
" 'self-mpi"
"(compiled-in-memory-original-self cim_268)"
" 'requires"
"(compiled-in-memory-requires cim_268)"
" 'provides"
"(compiled-in-memory-provides cim_268)"
" 'phase-to-link-modules"
"(compiled-in-memory-phase-to-link-module-uses cim_268))))"
"(define-values"
"(make-syntax-literal-data-instance-from-compiled-in-memory)"
"(lambda(cim_269)"
"(1/make-instance"
" 'syntax-literal-data"
" #f"
" deserialize-syntax-id"
" void"
" deserialized-syntax-vector-id"
"(compiled-in-memory-syntax-literals cim_269))))"
"(define-values"
"(empty-syntax-literals-data-instance)"
"(1/make-instance 'empty-stx-data #f deserialized-syntax-vector-id(vector) deserialize-syntax-id void))"
"(define-values"
"(empty-syntax-literals-instance)"
"(1/make-instance 'empty-stx #f get-syntax-literal!-id(lambda(pos_270) #f) 'get-encoded-root-expand-ctx #f))"
"(define-values"
"(empty-syntax-literals-instance/empty-namespace)"
"(1/make-instance"
" 'empty-stx/empty-ns"
" #f"
" get-syntax-literal!-id"
"(lambda(pos_271) #f)"
" 'get-encoded-root-expand-ctx"
" 'empty))"
"(define-values"
"(get-all-variables)"
"(lambda(phases-h_272)"
"(let-values(((ht_273) phases-h_272))"
"(begin"
"(if((lambda(ht_274)(hash? ht_274)) ht_273)(void)(let-values()(default-in-hash ht_273)))"
"((letrec-values(((for-loop_275)"
"(lambda(table_276 i_277)"
"(if i_277"
"(let-values(((phase_278 linklet_279)(hash-iterate-key+value ht_273 i_277)))"
"(let-values(((table_280)"
"(let-values(((table_281) table_276))"
"(let-values(((table_282)"
"(let-values()"
"(let-values(((key_283 val_284)"
"(let-values()"
"(values"
" phase_278"
"(1/linklet-export-variables"
" linklet_279)))))"
"(hash-set table_281 key_283 val_284)))))"
"(values table_282)))))"
"(for-loop_275 table_280(hash-iterate-next ht_273 i_277))))"
" table_276))))"
" for-loop_275)"
" '#hash()"
"(hash-iterate-first ht_273))))))"
"(void)"
"(void)"
"(define-values"
"(provides->api-provides)"
"(lambda(provides_1 self_2)"
"(let-values(((extract_3)"
"(lambda(ok?_4)"
"(let-values(((result-l_5)"
"(alt-reverse"
"(let-values(((ht_6) provides_1))"
"(begin"
"(if((lambda(ht_7)(hash? ht_7)) ht_6)"
"(void)"
"(let-values()(default-in-hash ht_6)))"
"((letrec-values(((for-loop_8)"
"(lambda(fold-var_9 i_10)"
"(if i_10"
"(let-values(((phase_11 at-phase_12)"
"(hash-iterate-key+value ht_6 i_10)))"
"(let-values(((fold-var_13)"
"(let-values(((l_14)"
"(alt-reverse"
"(let-values(((ht_15)"
" at-phase_12))"
"(begin"
"(if((lambda(ht_16)"
"(hash? ht_16))"
" ht_15)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_18"
" i_19)"
"(if i_19"
"(let-values(((sym_20"
" b/p_21)"
"(hash-iterate-key+value"
" ht_15"
" i_19)))"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23)"
" fold-var_18))"
"(if(ok?_4"
" b/p_21)"
"(let-values(((fold-var_24)"
" fold-var_23))"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((b_26)"
"(provided-as-binding"
" b/p_21)))"
"(list"
" sym_20"
"(if(eq?"
" self_2"
"(module-binding-module"
" b_26))"
"(let-values()"
" null)"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_27)"
"(cons"
" b_26"
"(module-binding-extra-nominal-bindings"
" b_26))))"
"(begin"
"(if(list?"
" lst_27)"
"(void)"
"(let-values()"
"(in-list"
" lst_27)))"
"((letrec-values(((for-loop_28)"
"(lambda(fold-var_29"
" lst_30)"
"(if(pair?"
" lst_30)"
"(let-values(((b_31)"
"(unsafe-car"
" lst_30)))"
"(let-values(((fold-var_32)"
"(let-values(((fold-var_33)"
" fold-var_29))"
"(let-values(((fold-var_34)"
"(let-values()"
"(cons"
"(let-values()"
"(if(if(eqv?"
"(module-binding-nominal-phase"
" b_31)"
" phase_11)"
"(eq?"
"(module-binding-nominal-sym"
" b_31)"
" sym_20)"
" #f)"
"(let-values()"
"(module-binding-nominal-module"
" b_31))"
"(let-values()"
"(list"
"(module-binding-nominal-module"
" b_31)"
"(module-binding-phase"
" b_31)"
"(module-binding-nominal-sym"
" b_31)"
"(module-binding-nominal-phase"
" b_31)))))"
" fold-var_33))))"
"(values"
" fold-var_34)))))"
"(for-loop_28"
" fold-var_32"
"(unsafe-cdr"
" lst_30))))"
" fold-var_29))))"
" for-loop_28)"
" null"
" lst_27)))))))))"
" fold-var_24))))"
"(values"
" fold-var_25)))"
" fold-var_23))))"
"(for-loop_17"
" fold-var_22"
"(hash-iterate-next"
" ht_15"
" i_19))))"
" fold-var_18))))"
" for-loop_17)"
" null"
"(hash-iterate-first"
" ht_15)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_35)"
"(lambda(fold-var_36)"
"(let-values()"
"(let-values(((fold-var_37)"
"(let-values(((fold-var_38)"
" fold-var_36))"
"(if(null?"
" l_14)"
" fold-var_38"
"(let-values(((fold-var_39)"
" fold-var_38))"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_11"
"(let-values(((l4_42)"
" l_14)"
"((symbol<?5_43)"
" symbol<?)"
"((car6_44)"
" car))"
"(sort7.1"
" #f"
" #f"
" car6_44"
" #t"
" l4_42"
" symbol<?5_43))))"
" fold-var_39))))"
"(values"
" fold-var_40)))))))"
" fold-var_37)))))"
" for-loop_35)"
" fold-var_9)))))"
"(for-loop_8"
" fold-var_13"
"(hash-iterate-next ht_6 i_10))))"
" fold-var_9))))"
" for-loop_8)"
" null"
"(hash-iterate-first ht_6)))))))"
"(let-values(((result-l1_46) result-l_5)((phase<?2_47) phase<?)((car3_48) car))"
"(sort7.1 #f #f car3_48 #t result-l1_46 phase<?2_47))))))"
"(values"
"(extract_3(lambda(b/p_49)(not(provided-as-transformer? b/p_49))))"
"(extract_3 provided-as-transformer?)))))"
"(define-values"
"(variables->api-nonprovides)"
"(lambda(provides_50 all-vars_51)"
"(let-values(((result-l_52)"
"(alt-reverse"
"(let-values(((ht_53) all-vars_51))"
"(begin"
"(if((lambda(ht_54)(hash? ht_54)) ht_53)(void)(let-values()(default-in-hash ht_53)))"
"((letrec-values(((for-loop_55)"
"(lambda(fold-var_56 i_57)"
"(if i_57"
"(let-values(((phase_58 vars_59)(hash-iterate-key+value ht_53 i_57)))"
"(let-values(((fold-var_60)"
"(let-values(((fold-var_61) fold-var_56))"
"(let-values(((l_62)"
"(let-values(((syms_63)"
"(hash-ref"
" provides_50"
" phase_58"
" '#hasheq())))"
"(alt-reverse"
"(let-values(((lst_64) vars_59))"
"(begin"
"(if(list? lst_64)"
"(void)"
"(let-values()(in-list lst_64)))"
"((letrec-values(((for-loop_65)"
"(lambda(fold-var_66"
" lst_67)"
"(if(pair?"
" lst_67)"
"(let-values(((var-sym_68)"
"(unsafe-car"
" lst_67)))"
"(let-values(((fold-var_69)"
"(let-values(((fold-var_70)"
" fold-var_66))"
"(if(hash-ref"
" syms_63"
" var-sym_68"
" #f)"
" fold-var_70"
"(let-values(((fold-var_71)"
" fold-var_70))"
"(let-values(((fold-var_72)"
"(let-values()"
"(cons"
"(let-values()"
" var-sym_68)"
" fold-var_71))))"
"(values"
" fold-var_72)))))))"
"(for-loop_65"
" fold-var_69"
"(unsafe-cdr"
" lst_67))))"
" fold-var_66))))"
" for-loop_65)"
" null"
" lst_64)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_73)"
"(lambda(fold-var_74)"
"(let-values()"
"(let-values(((fold-var_75)"
"(let-values(((fold-var_76)"
" fold-var_74))"
"(if(null?"
" l_62)"
" fold-var_76"
"(let-values(((fold-var_77)"
" fold-var_76))"
"(let-values(((fold-var_78)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_58"
"(let-values(((l10_79)"
" l_62)"
"((symbol<?11_80)"
" symbol<?))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" l10_79"
" symbol<?11_80))))"
" fold-var_77))))"
"(values"
" fold-var_78)))))))"
" fold-var_75)))))"
" for-loop_73)"
" fold-var_61))))))"
"(for-loop_55 fold-var_60(hash-iterate-next ht_53 i_57))))"
" fold-var_56))))"
" for-loop_55)"
" null"
"(hash-iterate-first ht_53)))))))"
"(let-values(((result-l7_82) result-l_52)((phase<?8_83) phase<?)((car9_84) car))"
"(sort7.1 #f #f car9_84 #t result-l7_82 phase<?8_83)))))"
"(void)"
"(void)"
"(define-values"
"(compiled->linklet-directory-or-bundle)"
"(lambda(c_1)(if(compiled-in-memory? c_1)(compiled-in-memory-linklet-directory c_1) c_1)))"
"(define-values"
"(module-compiled-current-name)"
"(lambda(c_2)"
"(let-values(((ld_3)(compiled->linklet-directory-or-bundle c_2)))"
"(let-values(((b_4)(if(1/linklet-bundle? ld_3) ld_3(hash-ref(1/linklet-directory->hash ld_3) #f))))"
"(hash-ref(1/linklet-bundle->hash b_4) 'name)))))"
"(define-values"
"(module-compiled-immediate-name)"
"(lambda(c_5)(let-values(((n_6)(module-compiled-current-name c_5)))(if(pair? n_6)(car(alt-reverse n_6)) n_6))))"
"(define-values"
"(change-module-name)"
"(lambda(c_7 name_8 prefix_9)"
"(let-values(((full-name_10)(if(null? prefix_9) name_8(append prefix_9(list name_8)))))"
"(let-values(((next-prefix_11)(if(null? prefix_9)(list name_8) full-name_10)))"
"(let-values(((recur_12)"
"(lambda(sub-c_13 name_14)"
"(if(equal?(module-compiled-current-name sub-c_13)(append next-prefix_11(list name_14)))"
" sub-c_13"
"(change-module-name sub-c_13 name_14 next-prefix_11)))))"
"(if(compiled-in-memory? c_7)"
"(let-values()"
"(let-values(((change-submodule-name_15)"
"(lambda(sub-c_18)(recur_12 sub-c_18(module-compiled-immediate-name sub-c_18)))))"
"(let-values(((pre-compiled-in-memorys_16)"
"(map2 change-submodule-name_15(compiled-in-memory-pre-compiled-in-memorys c_7))))"
"(let-values(((post-compiled-in-memorys_17)"
"(map2 change-submodule-name_15(compiled-in-memory-post-compiled-in-memorys c_7))))"
"(let-values(((the-struct_19) c_7))"
"(if(compiled-in-memory? the-struct_19)"
"(let-values(((pre-compiled-in-memorys8_20) pre-compiled-in-memorys_16)"
"((post-compiled-in-memorys9_21) post-compiled-in-memorys_17)"
"((linklet-directory10_22)"
"(let-values(((temp11_24)"
"(update-one-name"
"(let-values(((ld_27)(compiled->linklet-directory-or-bundle c_7)))"
"(if(1/linklet-bundle? ld_27)"
" ld_27"
"(hash-ref(1/linklet-directory->hash ld_27) #f)))"
" full-name_10))"
"((temp12_25)(symbol? full-name_10))"
"((temp13_26)"
"(append pre-compiled-in-memorys_16 post-compiled-in-memorys_17)))"
"(rebuild-linklet-directory5.1 temp12_25 #t temp11_24 temp13_26))))"
"(compiled-in-memory1.1"
" linklet-directory10_22"
"(compiled-in-memory-original-self the-struct_19)"
"(compiled-in-memory-requires the-struct_19)"
"(compiled-in-memory-provides the-struct_19)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_19)"
"(compiled-in-memory-compile-time-inspector the-struct_19)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_19)"
"(compiled-in-memory-mpis the-struct_19)"
"(compiled-in-memory-syntax-literals the-struct_19)"
" pre-compiled-in-memorys8_20"
" post-compiled-in-memorys9_21"
"(compiled-in-memory-namespace-scopes the-struct_19)"
"(compiled-in-memory-purely-functional? the-struct_19)))"
"                        (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_19)))))))"
"(if(1/linklet-directory? c_7)"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_28)(1/linklet-directory->hash c_7)))"
"(begin"
"(if((lambda(ht_29)(hash? ht_29)) ht_28)(void)(let-values()(default-in-hash ht_28)))"
"((letrec-values(((for-loop_30)"
"(lambda(table_31 i_32)"
"(if i_32"
"(let-values(((key_33 val_34)(hash-iterate-key+value ht_28 i_32)))"
"(let-values(((table_35)"
"(let-values(((table_36) table_31))"
"(let-values(((table_37)"
"(let-values()"
"(let-values(((key_38 val_39)"
"(let-values()"
"(values"
" key_33"
"(if(not key_33)"
"(update-one-name"
" val_34"
" full-name_10)"
"(recur_12"
" val_34"
" key_33))))))"
"(hash-set table_36 key_38 val_39)))))"
"(values table_37)))))"
"(for-loop_30 table_35(hash-iterate-next ht_28 i_32))))"
" table_31))))"
" for-loop_30)"
" '#hasheq()"
"(hash-iterate-first ht_28))))))"
"(let-values()(update-one-name c_7 full-name_10)))))))))"
"(define-values"
"(update-one-name)"
"(lambda(lb_40 name_41)(1/hash->linklet-bundle(hash-set(1/linklet-bundle->hash lb_40) 'name name_41))))"
"(define-values"
"(rebuild-linklet-directory5.1)"
"(lambda(bundle-ok?1_42 bundle-ok?2_43 main3_44 submods4_45)"
"(let-values(((main_46) main3_44))"
"(let-values(((submods_47) submods4_45))"
"(let-values(((bundle-ok?_48)(if bundle-ok?2_43 bundle-ok?1_42 #f)))"
"(let-values()"
"(if(if(null? submods_47) bundle-ok?_48 #f)"
" main_46"
"(1/hash->linklet-directory"
"(hash-set"
"(let-values(((lst_49) submods_47))"
"(begin"
"(if(list? lst_49)(void)(let-values()(in-list lst_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(ht_51 lst_52)"
"(if(pair? lst_52)"
"(let-values(((submod_53)(unsafe-car lst_52)))"
"(let-values(((ht_54)"
"(let-values(((ht_55) ht_51))"
"(let-values(((ht_56)"
"(let-values()"
"(let-values(((name_57)"
"(module-compiled-immediate-name"
" submod_53)))"
"(if(hash-ref ht_55 name_57 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-compiled-submodules"
"                                                                                   \"change would result in duplicate submodule name\""
"                                                                                   \"name\""
" name_57))"
"(let-values()"
"(hash-set"
" ht_55"
" name_57"
"(compiled->linklet-directory-or-bundle"
" submod_53))))))))"
"(values ht_56)))))"
"(for-loop_50 ht_54(unsafe-cdr lst_52))))"
" ht_51))))"
" for-loop_50)"
" '#hasheq()"
" lst_49)))"
" #f"
" main_46)))))))))"
"(void)"
"(void)"
"(define-values"
"(1/compiled-expression?)"
"(lambda(c_1)"
"(let-values(((or-part_2)(compiled-in-memory? c_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(1/linklet-directory? c_1)))(if or-part_3 or-part_3(1/linklet-bundle? c_1)))))))"
"(define-values"
"(1/compiled-module-expression?)"
"(lambda(c_4)"
"(let-values(((ld_5)(compiled->linklet-directory-or-bundle c_4)))"
"(let-values(((or-part_6)"
"(if(1/linklet-directory? ld_5)"
"(if(let-values(((b_7)(hash-ref(1/linklet-directory->hash ld_5) #f #f)))"
"(if b_7(hash-ref(1/linklet-bundle->hash b_7) 'decl #f) #f))"
" #t"
" #f)"
" #f)))"
"(if or-part_6"
" or-part_6"
"(if(1/linklet-bundle? ld_5)(if(hash-ref(1/linklet-bundle->hash ld_5) 'decl #f) #t #f) #f))))))"
"(define-values"
"(1/module-compiled-name)"
"(case-lambda"
"((c_8)"
"(begin"
"(if(1/compiled-module-expression? c_8)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_8)))"
"(module-compiled-current-name c_8)))"
"((c_9 name_10)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_9)"
"(void)"
"                      (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_13)(symbol? name_10)))"
"(if or-part_13"
" or-part_13"
"(if(pair? name_10)(if(list? name_10)(andmap2 symbol? name_10) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-name"
"                           \"(or/c symbol? (cons/c symbol? (non-empty-listof symbol?)))\""
" name_10)))"
"(values))))"
"(let-values(((i-name_11 prefix_12)"
"(if(symbol? name_10)"
"(values name_10 null)"
"(let-values(((r_14)(alt-reverse name_10)))(values(car r_14)(alt-reverse(cdr r_14)))))))"
"(change-module-name c_9 i-name_11 prefix_12)))))))"
"(define-values"
"(1/module-compiled-submodules)"
"(case-lambda"
"((c_15 non-star?_16)"
"(begin"
"(if(1/compiled-module-expression? c_15)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_15)))"
"(if(compiled-in-memory? c_15)"
"(let-values()"
"(if non-star?_16"
"(compiled-in-memory-pre-compiled-in-memorys c_15)"
"(compiled-in-memory-post-compiled-in-memorys c_15)))"
"(let-values()"
"(if(1/linklet-directory? c_15)"
"(let-values()"
"(let-values(((ht_17)(1/linklet-directory->hash c_15)))"
"(let-values(((bh_18)(1/linklet-bundle->hash(hash-ref ht_17 #f))))"
"(let-values(((names_19)(hash-ref bh_18(if non-star?_16 'pre 'post) null)))"
"(alt-reverse"
"(let-values(((lst_20) names_19))"
"(begin"
"(if(list? lst_20)(void)(let-values()(in-list lst_20)))"
"((letrec-values(((for-loop_21)"
"(lambda(fold-var_22 lst_23)"
"(if(pair? lst_23)"
"(let-values(((name_24)(unsafe-car lst_23)))"
"(let-values(((fold-var_25)"
"(let-values(((fold-var_26) fold-var_22))"
"(let-values(((fold-var_27)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref ht_17 name_24))"
" fold-var_26))))"
"(values fold-var_27)))))"
"(for-loop_21 fold-var_25(unsafe-cdr lst_23))))"
" fold-var_22))))"
" for-loop_21)"
" null"
" lst_20))))))))"
"(let-values() null))))))"
"((c_28 non-star?_29 submods_30)"
"(begin"
"(if(1/compiled-module-expression? c_28)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_28)))"
"(if(if(list? submods_30)(andmap2 1/compiled-module-expression? submods_30) #f)"
"(void)"
"(let-values()"
"          (raise-argument-error 'module-compiled-submodules \"(listof compiled-module-expression?)\" submods_30)))"
"(if(if(null? submods_30)"
"(let-values(((or-part_31)(1/linklet-bundle?(compiled->linklet-directory-or-bundle c_28))))"
"(if or-part_31"
" or-part_31"
"(if(compiled-in-memory? c_28)"
"(null?"
"(if non-star?_29"
"(compiled-in-memory-pre-compiled-in-memorys c_28)"
"(compiled-in-memory-post-compiled-in-memorys c_28)))"
" #f)))"
" #f)"
"(let-values() c_28)"
"(if(if(compiled-in-memory? c_28)(andmap2 compiled-in-memory? submods_30) #f)"
"(let-values()"
"(let-values(((pre-compiled-in-memorys_32)"
"(if non-star?_29 submods_30(compiled-in-memory-pre-compiled-in-memorys c_28))))"
"(let-values(((post-compiled-in-memorys_33)"
"(if non-star?_29(compiled-in-memory-post-compiled-in-memorys c_28) submods_30)))"
"(let-values(((n-c_34)(normalize-to-linklet-directory c_28)))"
"(fixup-submodule-names"
"(let-values(((the-struct_35) n-c_34))"
"(if(compiled-in-memory? the-struct_35)"
"(let-values(((pre-compiled-in-memorys1_36) pre-compiled-in-memorys_32)"
"((post-compiled-in-memorys2_37) post-compiled-in-memorys_33)"
"((linklet-directory3_38)"
"(let-values(((temp4_40)"
"(reset-submodule-names"
"(hash-ref"
"(1/linklet-directory->hash"
"(compiled->linklet-directory-or-bundle n-c_34))"
" #f)"
" non-star?_29"
" submods_30))"
"((temp5_41)(symbol?(module-compiled-current-name c_28)))"
"((temp6_42)"
"(append pre-compiled-in-memorys_32 post-compiled-in-memorys_33)))"
"(rebuild-linklet-directory5.1 temp5_41 #t temp4_40 temp6_42))))"
"(compiled-in-memory1.1"
" linklet-directory3_38"
"(compiled-in-memory-original-self the-struct_35)"
"(compiled-in-memory-requires the-struct_35)"
"(compiled-in-memory-provides the-struct_35)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_35)"
"(compiled-in-memory-compile-time-inspector the-struct_35)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_35)"
"(compiled-in-memory-mpis the-struct_35)"
"(compiled-in-memory-syntax-literals the-struct_35)"
" pre-compiled-in-memorys1_36"
" post-compiled-in-memorys2_37"
"(compiled-in-memory-namespace-scopes the-struct_35)"
"(compiled-in-memory-purely-functional? the-struct_35)))"
"                       (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_35))))))))"
"(let-values()"
"(let-values(((n-c_43)(normalize-to-linklet-directory c_28)))"
"(fixup-submodule-names"
"(let-values(((temp7_44)"
"(reset-submodule-names"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory-or-bundle n-c_43)) #f)"
" non-star?_29"
" submods_30))"
"((temp8_45)"
"(map2"
" compiled->linklet-directory-or-bundle"
"(append"
"(if non-star?_29 submods_30(1/module-compiled-submodules c_28 #t))"
"(if non-star?_29(1/module-compiled-submodules c_28 #f) submods_30)))))"
"(rebuild-linklet-directory5.1 #f #f temp7_44 temp8_45)))))))))))"
"(define-values"
"(1/module-compiled-language-info)"
"(lambda(c_46)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_46)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-language-info \"compiled-module-expression?\" c_46)))"
"(values))))"
"(let-values(((h_47)(compiled-module->h c_46)))(hash-ref h_47 'language-info #f)))))"
"(define-values"
"(1/module-compiled-imports)"
"(lambda(c_48)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_48)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_48)))"
"(values))))"
"(let-values(((inst_49)(compiled-module->declaration-instance c_48)))"
"(1/instance-variable-value inst_49 'requires)))))"
"(define-values"
"(1/module-compiled-exports)"
"(lambda(c_50)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_50)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_50)))"
"(values))))"
"(let-values(((inst_51)(compiled-module->declaration-instance c_50)))"
"(provides->api-provides"
"(1/instance-variable-value inst_51 'provides)"
"(1/instance-variable-value inst_51 'self-mpi))))))"
"(define-values"
"(1/module-compiled-indirect-exports)"
"(lambda(c_52)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_52)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-indirect-imports \"compiled-module-expression?\" c_52)))"
"(values))))"
"(let-values(((h_53 inst_54)(compiled-module->h+declaration-instance c_52)))"
"(let-values(((min-phase_55)(hash-ref h_53 'min-phase 0)))"
"(let-values(((max-phase_56)(hash-ref h_53 'max-phase 0)))"
"(variables->api-nonprovides"
"(1/instance-variable-value inst_54 'provides)"
"(let-values(((start_57) min-phase_55)((end_58)(add1 max-phase_56))((inc_59) 1))"
"(begin"
"(if(if(real? start_57)(if(real? end_58)(real? inc_59) #f) #f)"
"(void)"
"(let-values()(in-range start_57 end_58 inc_59)))"
"((letrec-values(((for-loop_60)"
"(lambda(table_61 pos_62)"
"(if(< pos_62 end_58)"
"(let-values(((phase-level_63) pos_62))"
"(let-values(((table_64)"
"(let-values(((table_65) table_61))"
"(let-values(((table_66)"
"(let-values()"
"(let-values(((key_67 val_68)"
"(let-values()"
"(let-values(((linklet_69)"
"(hash-ref"
" h_53"
" phase-level_63"
" #f)))"
"(values"
" phase-level_63"
"(if linklet_69"
"(1/linklet-export-variables"
" linklet_69)"
" null))))))"
"(hash-set table_65 key_67 val_68)))))"
"(values table_66)))))"
"(for-loop_60 table_64(+ pos_62 inc_59))))"
" table_61))))"
" for-loop_60)"
" '#hash()"
" start_57))))))))))"
"(define-values"
"(1/module-compiled-cross-phase-persistent?)"
"(lambda(c_70)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_70)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-cross-phase-persistent?"
"                         \"compiled-module-expression?\""
" c_70)))"
"(values))))"
"(let-values(((h_71)(compiled-module->h c_70)))(hash-ref h_71 'cross-phase-persistent? #f)))))"
"(define-values"
"(normalize-to-linklet-directory)"
"(lambda(c_72)"
"(if(1/linklet-directory?(compiled->linklet-directory-or-bundle c_72))"
"(let-values() c_72)"
"(if(1/linklet-bundle? c_72)"
"(let-values()(1/hash->linklet-directory(hasheq #f c_72)))"
"(let-values()"
"(let-values(((the-struct_73) c_72))"
"(if(compiled-in-memory? the-struct_73)"
"(let-values(((linklet-directory9_74)"
"(normalize-to-linklet-directory(compiled-in-memory-linklet-directory c_72))))"
"(compiled-in-memory1.1"
" linklet-directory9_74"
"(compiled-in-memory-original-self the-struct_73)"
"(compiled-in-memory-requires the-struct_73)"
"(compiled-in-memory-provides the-struct_73)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_73)"
"(compiled-in-memory-compile-time-inspector the-struct_73)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_73)"
"(compiled-in-memory-mpis the-struct_73)"
"(compiled-in-memory-syntax-literals the-struct_73)"
"(compiled-in-memory-pre-compiled-in-memorys the-struct_73)"
"(compiled-in-memory-post-compiled-in-memorys the-struct_73)"
"(compiled-in-memory-namespace-scopes the-struct_73)"
"(compiled-in-memory-purely-functional? the-struct_73)))"
"              (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_73))))))))"
"(define-values(fixup-submodule-names)(lambda(c_75)(1/module-compiled-name c_75(1/module-compiled-name c_75))))"
"(define-values"
"(reset-submodule-names)"
"(lambda(b_76 pre?_77 submods_78)"
"(1/hash->linklet-bundle"
"(hash-set"
"(1/linklet-bundle->hash b_76)"
"(if pre?_77 'pre 'post)"
"(map2 module-compiled-immediate-name submods_78)))))"
"(void)"
"(void)"
"(define-values"
"(compile-module13.1)"
"(lambda(force-linklet-directory?1_6"
" force-linklet-directory?6_7"
" modules-being-compiled4_8"
" modules-being-compiled9_9"
" need-compiled-submodule-rename?5_10"
" need-compiled-submodule-rename?10_11"
" serializable?2_12"
" serializable?7_13"
" to-source?3_14"
" to-source?8_15"
" p11_16"
" cctx12_17)"
"(let-values(((p_18) p11_16))"
"(let-values(((cctx_19) cctx12_17))"
"(let-values(((force-linklet-directory?_20)(if force-linklet-directory?6_7 force-linklet-directory?1_6 #f)))"
"(let-values(((serializable?_21)(if serializable?7_13 serializable?2_12 #f)))"
"(let-values(((to-source?_22)(if to-source?8_15 to-source?3_14 #f)))"
"(let-values(((modules-being-compiled_23)"
"(if modules-being-compiled9_9 modules-being-compiled4_8(make-hasheq))))"
"(let-values(((need-compiled-submodule-rename?_24)"
"(if need-compiled-submodule-rename?10_11 need-compiled-submodule-rename?5_10 #t)))"
"(let-values()"
"(let-values(((full-module-name_25)"
"(let-values(((parent-full-name_30)(compile-context-full-module-name cctx_19))"
"((name_31)(syntax-e$1(parsed-module-name-id p_18))))"
"(if parent-full-name_30"
"(append"
"(if(list? parent-full-name_30) parent-full-name_30(list parent-full-name_30))"
"(list name_31))"
" name_31))))"
"(let-values(((compiled-submodules_26)(parsed-module-compiled-submodules p_18)))"
"(let-values(((get-submodules_27)"
"(lambda(star?_32)"
"(alt-reverse"
"(let-values(((ht_33) compiled-submodules_26))"
"(begin"
"(if((lambda(ht_34)(hash? ht_34)) ht_33)"
"(void)"
"(let-values()(default-in-hash ht_33)))"
"((letrec-values(((for-loop_35)"
"(lambda(fold-var_36 i_37)"
"(if i_37"
"(let-values(((name_38 star?+compiled_39)"
"(hash-iterate-key+value ht_33 i_37)))"
"(let-values(((fold-var_40)"
"(let-values(((fold-var_41)"
" fold-var_36))"
"(if(eq?"
" star?_32"
"(car star?+compiled_39))"
"(let-values(((fold-var_42)"
" fold-var_41))"
"(let-values(((fold-var_43)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" name_38"
"(if(if need-compiled-submodule-rename?_24"
"(not"
"(parsed-module-compiled-module"
" p_18))"
" #f)"
"(update-submodule-names"
"(cdr"
" star?+compiled_39)"
" name_38"
" full-module-name_25)"
"(cdr"
" star?+compiled_39))))"
" fold-var_42))))"
"(values fold-var_43)))"
" fold-var_41))))"
"(for-loop_35"
" fold-var_40"
"(hash-iterate-next ht_33 i_37))))"
" fold-var_36))))"
" for-loop_35)"
" null"
"(hash-iterate-first ht_33))))))))"
"(let-values(((pre-submodules_28)(get-submodules_27 #f)))"
"(let-values(((post-submodules_29)(get-submodules_27 #t)))"
"(let-values(((c1_44)(parsed-module-compiled-module p_18)))"
"(if c1_44"
"((lambda(c_45)"
"(let-values(((name_46 prefix_47)"
"(if(symbol? full-module-name_25)"
"(values full-module-name_25 null)"
"(let-values(((r_49)(alt-reverse full-module-name_25)))"
"(values(car r_49)(alt-reverse(cdr r_49)))))))"
"(let-values(((m_48)(change-module-name c_45 name_46 prefix_47)))"
"(1/module-compiled-submodules"
"(1/module-compiled-submodules m_48 #t(map2 cdr pre-submodules_28))"
" #f"
"(map2 cdr post-submodules_29)))))"
" c1_44)"
"(let-values()"
"(let-values(((...r/compile/module.rkt:74:4_50) compile-module-from-parsed36.1)"
"((p37_51) p_18)"
"((cctx38_52) cctx_19)"
"((full-module-name39_53) full-module-name_25)"
"((force-linklet-directory?40_54) force-linklet-directory?_20)"
"((serializable?41_55) serializable?_21)"
"((to-source?42_56) to-source?_22)"
"((modules-being-compiled43_57) modules-being-compiled_23)"
"((pre-submodules44_58) pre-submodules_28)"
"((post-submodules45_59) post-submodules_29)"
"((need-compiled-submodule-rename?46_60)"
" need-compiled-submodule-rename?_24))"
"(compile-module-from-parsed34.1"
" force-linklet-directory?40_54"
" full-module-name39_53"
" modules-being-compiled43_57"
" need-compiled-submodule-rename?46_60"
" post-submodules45_59"
" pre-submodules44_58"
" serializable?41_55"
" to-source?42_56"
" p37_51"
" cctx38_52))))))))))))))))))))"
"(define-values"
"(lifted/1.1$10 lifted/2.1$10 lifted/3.1$9 lifted/4.1$9 lifted/5.1$9)"
"(make-struct-type"
" 'compile-module-from-parsed"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'compile-module-from-parsed"
"(case-lambda((self_102 p_103 cctx_104)(apply missing-kw self_102 p_103 cctx_104 null))))))"
"(current-inspector)"
"(case-lambda((self_105 p_106 cctx_107)(apply missing-kw self_105 p_106 cctx_107 null)))))"
"(define-values"
"(compile-module-from-parsed34.1)"
"(lambda(force-linklet-directory?17_108"
" full-module-name16_109"
" modules-being-compiled20_110"
" need-compiled-submodule-rename?23_111"
" post-submodules22_112"
" pre-submodules21_113"
" serializable?18_114"
" to-source?19_115"
" p32_116"
" cctx33_117)"
"(let-values(((p_118) p32_116))"
"(let-values(((cctx_119) cctx33_117))"
"(let-values(((full-module-name_120) full-module-name16_109))"
"(let-values(((force-linklet-directory?_121) force-linklet-directory?17_108))"
"(let-values(((serializable?_122) serializable?18_114))"
"(let-values(((to-source?_123) to-source?19_115))"
"(let-values(((modules-being-compiled_124) modules-being-compiled20_110))"
"(let-values(((pre-submodules_125) pre-submodules21_113))"
"(let-values(((post-submodules_126) post-submodules22_112))"
"(let-values(((need-compiled-submodule-rename?_127) need-compiled-submodule-rename?23_111))"
"(let-values()"
"(let-values()"
"(let-values(((enclosing-self_128)(compile-context-module-self cctx_119)))"
"(let-values(((self_129)(parsed-module-self p_118)))"
"(let-values(((requires_130)(parsed-module-requires p_118)))"
"(let-values(((provides_131)(parsed-module-provides p_118)))"
"(let-values(((encoded-root-expand-ctx-box_132)"
"(box(parsed-module-encoded-root-ctx p_118))))"
"(let-values(((body-context-simple?_133)(parsed-module-root-ctx-simple? p_118)))"
"(let-values(((language-info_134)"
"(filter-language-info"
"(syntax-property$1(parsed-s p_118) 'module-language))))"
"(let-values(((bodys_135)(parsed-module-body p_118)))"
"(let-values(((empty-result-for-module->namespace?_136) #f))"
"(let-values(((mpis_137)(make-module-path-index-table)))"
"(let-values(((body-cctx_138)"
"(let-values(((the-struct_156) cctx_119))"
"(if(compile-context? the-struct_156)"
"(let-values(((phase47_157) 0)"
"((self48_158) self_129)"
"((module-self49_159) self_129)"
"((full-module-name50_160)"
" full-module-name_120)"
"((lazy-syntax-literals?51_161) #t))"
"(compile-context1.1"
"(compile-context-namespace the-struct_156)"
" phase47_157"
" self48_158"
" module-self49_159"
" full-module-name50_160"
" lazy-syntax-literals?51_161"
"(compile-context-header the-struct_156)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"compile-context?\""
" the-struct_156)))))"
"(let-values(((cross-phase-persistent?_139) #f))"
"(let-values(((side-effects_140)(make-hasheqv)))"
"(let-values(((check-side-effects!_141)"
"(lambda(e_162"
" expected-results_163"
" phase_164"
" required-reference?_165)"
"(if(hash-ref side-effects_140 phase_164 #f)"
"(void)"
"(let-values()"
"(if(let-values(((e52_166) e_162)"
"((expected-results53_167)"
" expected-results_163)"
"((required-reference?54_168)"
" required-reference?_165))"
"(any-side-effects?12.1"
" #f"
" #f"
" #f"
" #f"
" e52_166"
" expected-results53_167"
" required-reference?54_168))"
"(let-values()"
"(hash-set! side-effects_140 phase_164 #t))"
"(void)))))))"
"(let-values((()"
"(begin"
"(if(if need-compiled-submodule-rename?_127"
" modules-being-compiled_124"
" #f)"
"(let-values()"
"(begin"
"(if(null? post-submodules_126)"
"(void)"
"(let-values()"
"(error"
"                                                                                   \"internal error: have post submodules, but not already compiled\")))"
"(register-compiled-submodules"
" modules-being-compiled_124"
" pre-submodules_125"
" self_129)))"
"(void))"
"(values))))"
"(let-values(((body-linklets_142"
" min-phase_143"
" max-phase_144"
" phase-to-link-module-uses_145"
" phase-to-link-module-uses-expr_146"
" phase-to-link-extra-inspectorsss_147"
" syntax-literals_148"
" root-ctx-pos_149)"
"(let-values(((bodys55_170) bodys_135)"
"((body-cctx56_171) body-cctx_138)"
"((mpis57_172) mpis_137)"
"((temp58_173)"
"(list"
"(list get-syntax-literal!-id)"
"(list set-transformer!-id)))"
"((temp59_174) '((void)))"
"((temp60_175) '(0))"
"((encoded-root-expand-ctx-box61_176)"
" encoded-root-expand-ctx-box_132)"
"((body-context-simple?62_177)"
" body-context-simple?_133)"
"((check-side-effects!63_178)"
" check-side-effects!_141)"
"((temp64_179)"
"(lambda(body_182 cctx_183)"
"(if(parsed-#%declare? body_182)"
"(let-values()"
"(let-values(((ok?_184"
" _67_185"
" kw68_186)"
"(let-values(((s_197)"
"(parsed-s"
" body_182)))"
"(let-values(((orig-s_198)"
" s_197))"
"(let-values(((_67_199"
" kw68_200)"
"(let-values(((s_201)"
"(if(syntax?$1"
" s_197)"
"(syntax-e$1"
" s_197)"
" s_197)))"
"(if(pair?"
" s_201)"
"(let-values(((_69_202)"
"(let-values(((s_204)"
"(car"
" s_201)))"
" s_204))"
"((kw70_203)"
"(let-values(((s_205)"
"(cdr"
" s_201)))"
"(let-values(((s_206)"
"(if(syntax?$1"
" s_205)"
"(syntax-e$1"
" s_205)"
" s_205)))"
"(let-values(((flat-s_207)"
"(to-syntax-list.1"
" s_206)))"
"(if(not"
" flat-s_207)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_198))"
"(let-values()"
" flat-s_207)))))))"
"(values"
" _69_202"
" kw70_203))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_198)))))"
"(values"
" #t"
" _67_199"
" kw68_200))))))"
"(begin"
"(let-values(((lst_208)"
" kw68_186))"
"(begin"
"(if(list? lst_208)"
"(void)"
"(let-values()"
"(in-list"
" lst_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(fold-var_210"
" lst_211)"
"(if(pair?"
" lst_211)"
"(let-values(((kw_212)"
"(unsafe-car"
" lst_211)))"
"(let-values(((fold-var_213)"
"(let-values()"
"(let-values(((fold-var_215)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(eq?"
"(syntax-e$1"
" kw_212)"
" '#:cross-phase-persistent)"
"(let-values()"
"(set! cross-phase-persistent?_139"
" #t))"
"(void))"
"(if(eq?"
"(syntax-e$1"
" kw_212)"
" '#:empty-namespace)"
"(let-values()"
"(begin"
"(set! empty-result-for-module->namespace?_136"
" #t)"
"(set-box!"
" encoded-root-expand-ctx-box_132"
" #f)))"
"(void))))"
"(void)))))"
"(values"
" fold-var_215)))))"
"(for-loop_209"
" fold-var_213"
"(unsafe-cdr"
" lst_211))))"
" fold-var_210))))"
" for-loop_209)"
"(void)"
" lst_208)))"
" #f)))"
"(let-values() #f))))"
"((temp65_180)"
"(lambda(mod-name_216 phase_217)"
"(let-values(((ht_218)"
"(if modules-being-compiled_124"
"(hash-ref"
" modules-being-compiled_124"
" mod-name_216"
" #f)"
" #f)))"
"(if ht_218"
"(hash-ref"
" ht_218"
" phase_217"
" #f)"
" #f))))"
"((to-source?66_181)"
" to-source?_123))"
"(compile-forms26.1"
" temp58_173"
" temp59_174"
" #t"
" check-side-effects!63_178"
" #t"
" #f"
" #f"
" #f"
" #f"
" encoded-root-expand-ctx-box61_176"
" #t"
" temp60_175"
" #t"
" temp65_180"
" #t"
" temp64_179"
" #t"
" body-context-simple?62_177"
" #t"
" to-source?66_181"
" #t"
" bodys55_170"
" body-cctx56_171"
" mpis57_172))))"
"(let-values((()"
"(begin"
"(if modules-being-compiled_124"
"(let-values()"
"(hash-set!"
" modules-being-compiled_124"
"(1/module-path-index-resolve self_129)"
"(let-values(((ht_219)"
" body-linklets_142))"
"(begin"
"(if((lambda(ht_220)"
"(hash? ht_220))"
" ht_219)"
"(void)"
"(let-values()"
"(default-in-hash ht_219)))"
"((letrec-values(((for-loop_221)"
"(lambda(table_222"
" i_223)"
"(if i_223"
"(let-values(((phase_224"
" linklet_225)"
"(hash-iterate-key+value"
" ht_219"
" i_223)))"
"(let-values(((table_226)"
"(let-values(((table_227)"
" table_222))"
"(let-values(((table_228)"
"(let-values()"
"(let-values(((key_229"
" val_230)"
"(let-values()"
"(values"
" phase_224"
"(module-linklet-info2.1"
" linklet_225"
"(hash-ref"
" phase-to-link-module-uses_145"
" phase_224"
" #f)"
" self_129)))))"
"(hash-set"
" table_227"
" key_229"
" val_230)))))"
"(values"
" table_228)))))"
"(for-loop_221"
" table_226"
"(hash-iterate-next"
" ht_219"
" i_223))))"
" table_222))))"
" for-loop_221)"
" '#hasheq()"
"(hash-iterate-first ht_219))))))"
"(void))"
"(values))))"
"(let-values(((declaration-linklet_150)"
"(if serializable?_122"
"((if to-source?_123"
" values"
"(lambda(s_231)"
"(let-values()"
"(1/compile-linklet s_231 'decl))))"
"(list"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
" '(self-mpi"
" requires"
" provides"
" phase-to-link-modules)"
"(list"
" 'define-values"
" '(self-mpi)"
"(add-module-path-index!"
" mpis_137"
" self_129))"
"(list"
" 'define-values"
" '(requires)"
"(let-values(((requires71_233)"
" requires_130)"
"((mpis72_234) mpis_137)"
"((temp73_235) #f))"
"(generate-deserialize6.1"
" temp73_235"
" #t"
" requires71_233"
" mpis72_234)))"
"(list"
" 'define-values"
" '(provides)"
"(let-values(((provides74_237)"
" provides_131)"
"((mpis75_238) mpis_137)"
"((temp76_239) #f))"
"(generate-deserialize6.1"
" temp76_239"
" #t"
" provides74_237"
" mpis75_238)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_146)))"
" #f)))"
"(let-values(((syntax-literals-linklet_151)"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_148))"
"((if to-source?_123"
" values"
"(lambda(s_240)"
"(let-values()"
"(1/compile-linklet"
" s_240"
" 'syntax-literals))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id)"
"(list*"
" deserialized-syntax-vector-id"
"(if serializable?_122"
"(list deserialize-syntax-id)"
" '()))"
" instance-imports)"
"(list*"
" get-syntax-literal!-id"
" '(get-encoded-root-expand-ctx))"
"(qq-append"
"(let-values(((syntax-literals77_242)"
" syntax-literals_148)"
"((mpis78_243) mpis_137)"
"((self79_244) self_129)"
"((temp80_245)"
"(not"
" serializable?_122)))"
"(generate-lazy-syntax-literals!9.1"
" temp80_245"
" #t"
" syntax-literals77_242"
" mpis78_243"
" self79_244))"
"(list"
"(list"
" 'define-values"
" '(get-encoded-root-expand-ctx)"
"(if root-ctx-pos_149"
"(let-values()"
"(list"
" 'lambda"
" '()"
"(generate-lazy-syntax-literal-lookup"
" root-ctx-pos_149)))"
"(if empty-result-for-module->namespace?_136"
"(let-values() ''empty)"
"(let-values() ''#f))))))))"
" #f)))"
"(let-values(((syntax-literals-data-linklet_152)"
"(if serializable?_122"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_148))"
"((if to-source?_123"
" values"
"(lambda(s_246)"
"(let-values()"
"(1/compile-linklet"
" s_246"
" 'syntax-literals-data))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
"(list"
" deserialized-syntax-vector-id"
" deserialize-syntax-id)"
"(list"
" 'define-values"
"(list"
" deserialized-syntax-vector-id)"
"(list*"
" 'make-vector"
"(syntax-literals-count"
" syntax-literals_148)"
" '(#f)))"
"(let-values()"
"(generate-lazy-syntax-literals-data!"
" syntax-literals_148"
" mpis_137))))"
" #f)"
" #f)))"
"(let-values(((data-linklet_153)"
"(if serializable?_122"
"((if to-source?_123"
" values"
"(lambda(s_247)"
"(let-values()"
"(1/compile-linklet"
" s_247"
" 'data))))"
"(list"
" 'linklet"
"(list deserialize-imports)"
"(list mpi-vector-id)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize"
" mpis_137))))"
" #f)))"
"(let-values(((bundle_154)"
"(let-values(((bundle_248)"
"(hash-set"
" body-linklets_142"
" 'name"
" full-module-name_120)))"
"(let-values(((bundle_249)"
"(hash-set"
" bundle_248"
" 'decl"
"(let-values(((or-part_250)"
" declaration-linklet_150))"
"(if or-part_250"
" or-part_250"
" 'in-memory)))))"
"(let-values(((bundle_251)"
"(if data-linklet_153"
"(hash-set"
" bundle_249"
" 'data"
" data-linklet_153)"
" bundle_249)))"
"(let-values(((bundle_252)"
"(if syntax-literals-linklet_151"
"(hash-set"
" bundle_251"
" 'stx"
" syntax-literals-linklet_151)"
" bundle_251)))"
"(let-values(((bundle_253)"
"(if syntax-literals-data-linklet_152"
"(hash-set"
" bundle_252"
" 'stx-data"
" syntax-literals-data-linklet_152)"
" bundle_252)))"
"(let-values(((bundle_254)"
"(if(null?"
" pre-submodules_125)"
" bundle_253"
"(hash-set"
" bundle_253"
" 'pre"
"(map2"
" car"
" pre-submodules_125)))))"
"(let-values(((bundle_255)"
"(if(null?"
" post-submodules_126)"
" bundle_254"
"(hash-set"
" bundle_254"
" 'post"
"(map2"
" car"
" post-submodules_126)))))"
"(let-values(((bundle_256)"
"(if cross-phase-persistent?_139"
"(hash-set"
" bundle_255"
" 'cross-phase-persistent?"
" #t)"
" bundle_255)))"
"(let-values(((bundle_257)"
"(if language-info_134"
"(hash-set"
" bundle_256"
" 'language-info"
" language-info_134)"
" bundle_256)))"
"(let-values(((bundle_258)"
"(if(zero?"
" min-phase_143)"
" bundle_257"
"(hash-set"
" bundle_257"
" 'min-phase"
" min-phase_143))))"
"(let-values(((bundle_259)"
"(if(zero?"
" max-phase_144)"
" bundle_258"
"(hash-set"
" bundle_258"
" 'max-phase"
" max-phase_144))))"
"(let-values(((bundle_260)"
"(if(hash-count"
" side-effects_140)"
"(hash-set"
" bundle_259"
" 'side-effects"
"(let-values(((temp81_261)"
"(hash-keys"
" side-effects_140))"
"((<82_262)"
" <))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp81_261"
" <82_262)))"
" bundle_259)))"
"(let-values(((bundle_263)"
"(if empty-result-for-module->namespace?_136"
"(hash-set"
" bundle_260"
" 'module->namespace"
" 'empty)"
" bundle_260)))"
"(1/hash->linklet-bundle"
" bundle_263))))))))))))))))"
"(let-values(((ld_155)"
"(if(if(null? pre-submodules_125)"
"(if(null?"
" post-submodules_126)"
"(not"
" force-linklet-directory?_121)"
" #f)"
" #f)"
"(let-values() bundle_154)"
"(let-values()"
"((if to-source?_123"
" values"
" 1/hash->linklet-directory)"
"(let-values(((lst_264)"
"(append"
" pre-submodules_125"
" post-submodules_126)))"
"(begin"
"(if(list? lst_264)"
"(void)"
"(let-values()"
"(in-list lst_264)))"
"((letrec-values(((for-loop_265)"
"(lambda(ht_266"
" lst_267)"
"(if(pair?"
" lst_267)"
"(let-values(((sm_268)"
"(unsafe-car"
" lst_267)))"
"(let-values(((ht_269)"
"(let-values(((ht_270)"
" ht_266))"
"(let-values(((ht_271)"
"(let-values()"
"(hash-set"
" ht_270"
"(car"
" sm_268)"
"((if to-source?_123"
" values"
" compiled-in-memory-linklet-directory)"
"(cdr"
" sm_268))))))"
"(values"
" ht_271)))))"
"(for-loop_265"
" ht_269"
"(unsafe-cdr"
" lst_267))))"
" ht_266))))"
" for-loop_265)"
"(hasheq #f bundle_154)"
" lst_264))))))))"
"(if to-source?_123"
"(let-values() ld_155)"
"(let-values()"
"(compiled-in-memory1.1"
" ld_155"
" self_129"
" requires_130"
" provides_131"
" phase-to-link-module-uses_145"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_147"
"(mpis-as-vector mpis_137)"
"(syntax-literals-as-vector"
" syntax-literals_148)"
"(map2 cdr pre-submodules_125)"
"(map2 cdr post-submodules_126)"
" #f"
" #f))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack35.1$1)"
"(lambda(given-kws_272 given-args_273 p32_274 cctx33_275)"
"(let-values(((force-linklet-directory?17_276)(car given-args_273))"
"((given-kws_277)(cdr given-kws_272))"
"((given-args_278)(cdr given-args_273)))"
"(let-values(((full-module-name16_279)(car given-args_278))"
"((given-kws_280)(cdr given-kws_277))"
"((given-args_281)(cdr given-args_278)))"
"(let-values(((modules-being-compiled20_282)(car given-args_281))"
"((given-kws_283)(cdr given-kws_280))"
"((given-args_284)(cdr given-args_281)))"
"(let-values(((need-compiled-submodule-rename?23_285)(car given-args_284))"
"((given-kws_286)(cdr given-kws_283))"
"((given-args_287)(cdr given-args_284)))"
"(let-values(((post-submodules22_288)(car given-args_287))"
"((given-kws_289)(cdr given-kws_286))"
"((given-args_290)(cdr given-args_287)))"
"(let-values(((pre-submodules21_291)(car given-args_290))"
"((given-kws_292)(cdr given-kws_289))"
"((given-args_293)(cdr given-args_290)))"
"(let-values(((serializable?18_294)(car given-args_293))"
"((given-kws_295)(cdr given-kws_292))"
"((given-args_296)(cdr given-args_293)))"
"(let-values(((to-source?19_297)(car given-args_296)))"
"(compile-module-from-parsed34.1"
" force-linklet-directory?17_276"
" full-module-name16_279"
" modules-being-compiled20_282"
" need-compiled-submodule-rename?23_285"
" post-submodules22_288"
" pre-submodules21_291"
" serializable?18_294"
" to-source?19_297"
" p32_274"
" cctx33_275)))))))))))"
"(define-values"
"(compile-module-from-parsed36.1)"
"(lifted/2.1$10"
"(lambda(given-kws_298 given-argc_299)"
"(if(= given-argc_299 4)"
"(let-values(((l2_300) given-kws_298))"
"(if(pair? l2_300)"
"(if(eq?(car l2_300) '#:force-linklet-directory?)"
"(let-values(((l2_301)(cdr l2_300)))"
"(if(pair? l2_301)"
"(if(eq?(car l2_301) '#:full-module-name)"
"(let-values(((l2_302)(cdr l2_301)))"
"(if(pair? l2_302)"
"(if(eq?(car l2_302) '#:modules-being-compiled)"
"(let-values(((l2_303)(cdr l2_302)))"
"(if(pair? l2_303)"
"(if(eq?(car l2_303) '#:need-compiled-submodule-rename?)"
"(let-values(((l2_304)(cdr l2_303)))"
"(if(pair? l2_304)"
"(if(eq?(car l2_304) '#:post-submodules)"
"(let-values(((l2_305)(cdr l2_304)))"
"(if(pair? l2_305)"
"(if(eq?(car l2_305) '#:pre-submodules)"
"(let-values(((l2_306)(cdr l2_305)))"
"(if(pair? l2_306)"
"(if(eq?(car l2_306) '#:serializable?)"
"(let-values(((l2_307)(cdr l2_306)))"
"(if(pair? l2_307)"
"(if(eq?(car l2_307) '#:to-source?)(null?(cdr l2_307)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_308 given-args_309 p_310 cctx_311)(unpack35.1$1 given-kws_308 given-args_309 p_310 cctx_311)))"
" '(#:force-linklet-directory?"
" #:full-module-name"
" #:modules-being-compiled"
" #:need-compiled-submodule-rename?"
" #:post-submodules"
" #:pre-submodules"
" #:serializable?"
" #:to-source?)"
" '(#:force-linklet-directory?"
" #:full-module-name"
" #:modules-being-compiled"
" #:need-compiled-submodule-rename?"
" #:post-submodules"
" #:pre-submodules"
" #:serializable?"
" #:to-source?)))"
"(define-values"
"(update-submodule-names)"
"(lambda(cim_312 name_313 full-module-name_314)"
"(change-module-name"
" cim_312"
" name_313"
"(if(symbol? full-module-name_314)"
"(list full-module-name_314)"
"(alt-reverse(cdr(alt-reverse full-module-name_314)))))))"
"(define-values"
"(register-compiled-submodules)"
"(lambda(modules-being-compiled_315 pre-submodules_316 self_317)"
"(let-values(((lst_318) pre-submodules_316))"
"(begin"
"(if(list? lst_318)(void)(let-values()(in-list lst_318)))"
"((letrec-values(((for-loop_319)"
"(lambda(fold-var_320 lst_321)"
"(if(pair? lst_321)"
"(let-values(((s_322)(unsafe-car lst_321)))"
"(let-values(((fold-var_323)"
"(let-values()"
"(let-values(((fold-var_325)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((name_326)(car s_322)))"
"(let-values(((cim_327)(cdr s_322)))"
"(let-values(((phase-to-link-module-uses_328)"
"(compiled-in-memory-phase-to-link-module-uses"
" cim_327)))"
"(let-values(((ld_329)"
"(compiled-in-memory-linklet-directory"
" cim_327)))"
"(let-values(((sm-self_330)"
"(1/module-path-index-join"
"                                                                                           (list 'submod \".\" name_326)"
" self_317)))"
"(hash-set!"
" modules-being-compiled_315"
"(1/module-path-index-resolve sm-self_330)"
"(let-values(((ht_331)"
"(1/linklet-bundle->hash"
"(if(1/linklet-directory?"
" ld_329)"
"(hash-ref"
"(1/linklet-directory->hash"
" ld_329)"
" #f)"
" ld_329))))"
"(begin"
"(if((lambda(ht_332)(hash? ht_332))"
" ht_331)"
"(void)"
"(let-values()"
"(default-in-hash ht_331)))"
"((letrec-values(((for-loop_333)"
"(lambda(table_334"
" i_335)"
"(if i_335"
"(let-values(((phase_336"
" linklet_337)"
"(hash-iterate-key+value"
" ht_331"
" i_335)))"
"(let-values(((table_338)"
"(let-values(((table_339)"
" table_334))"
"(if(number?"
" phase_336)"
"(let-values(((table_340)"
" table_339))"
"(let-values(((table_341)"
"(let-values()"
"(let-values(((key_342"
" val_343)"
"(let-values()"
"(values"
" phase_336"
"(module-linklet-info2.1"
" linklet_337"
"(hash-ref"
" phase-to-link-module-uses_328"
" phase_336"
" #f)"
" self_317)))))"
"(hash-set"
" table_340"
" key_342"
" val_343)))))"
"(values"
" table_341)))"
" table_339))))"
"(for-loop_333"
" table_338"
"(hash-iterate-next"
" ht_331"
" i_335))))"
" table_334))))"
" for-loop_333)"
" '#hasheq()"
"(hash-iterate-first"
" ht_331)))))))))))"
"(void)))))"
"(values fold-var_325)))))"
"(for-loop_319 fold-var_323(unsafe-cdr lst_321))))"
" fold-var_320))))"
" for-loop_319)"
"(void)"
" lst_318)))))"
"(define-values"
"(filter-language-info)"
"(lambda(li_344)"
"(if(vector? li_344)"
"(if(= 3(vector-length li_344))"
"(if(1/module-path?(vector-ref li_344 0))(if(symbol?(vector-ref li_344 1)) li_344 #f) #f)"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(top-level-instance)"
"(1/make-instance"
" 'top-level"
" #f"
" top-level-bind!-id"
"(lambda(id_1 mpi_2 orig-phase_3 phase-shift_4 ns_5 sym_6 trans?_7 trans-val_8)"
"(let-values(((phase_9)(phase+ orig-phase_3 phase-shift_4)))"
"(let-values(((b_10)"
"(let-values(((mpi4_12) mpi_2)"
"((phase5_13) phase_9)"
"((sym6_14) sym_6)"
"((temp7_15)(root-expand-context-frame-id(namespace-get-root-expand-ctx ns_5))))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" temp7_15"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi4_12"
" phase5_13"
" sym6_14))))"
"(begin"
"(let-values(((id1_16) id_1)((b2_17) b_10)((phase3_18) phase_9))"
"(add-binding!17.1 #f #f #f #f id1_16 b2_17 phase3_18))"
"(if trans?_7"
"(let-values()(if trans-val_8(let-values()(maybe-install-free=id! trans-val_8 id_1 phase_9))(void)))"
"(let-values()(namespace-unset-transformer! ns_5 phase_9 sym_6)))))))"
" top-level-require!-id"
"(lambda(stx_19 ns_20)"
"(let-values(((reqs_21)(cdr(syntax->list$1 stx_19))))"
"(let-values(((temp8_23) #t)"
"((temp9_24) #f)"
"((reqs10_25) reqs_21)"
"((temp11_26) #f)"
"((ns12_27) ns_20)"
"((temp13_28)(namespace-phase ns_20))"
"((temp14_29)(make-requires+provides #f))"
"((temp15_30) 'require)"
"((temp16_31) #t))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp16_31"
" #t"
" #f"
" #f"
" temp8_23"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp9_24"
" #t"
" temp15_30"
" reqs10_25"
" temp11_26"
" ns12_27"
" temp13_28"
" temp14_29))))))"
"(void)"
"(void)"
"(define-values"
"(create-compiled-in-memorys-using-shared-data)"
"(lambda(tops_1 data-linklet_2 ns_3)"
"(let-values(((data-instance_4)"
"(1/instantiate-linklet"
" data-linklet_2"
"(list"
" deserialize-instance"
"(let-values(((ns1_15) ns_3)"
"((temp2_16)(namespace-phase ns_3))"
"((temp3_17)(namespace-mpi ns_3))"
"((temp4_18)(namespace-bulk-binding-registry ns_3))"
"((temp5_19)(current-code-inspector)))"
"(make-eager-instance-instance11.1 temp4_18 temp2_16 temp5_19 ns1_15 temp3_17))))))"
"(let-values(((data_5)(lambda(key_20)(1/instance-variable-value data-instance_4 key_20))))"
"(let-values(((mpi-vector_6)(data_5 mpi-vector-id)))"
"(let-values(((mpi-vector-trees_7)(data_5 'mpi-vector-trees)))"
"(let-values(((phase-to-link-modules-vector_8)(data_5 'phase-to-link-modules-vector)))"
"(let-values(((phase-to-link-modules-trees_9)(data_5 'phase-to-link-modules-trees)))"
"(let-values(((syntax-literals_10)(data_5 'syntax-literals)))"
"(let-values(((syntax-literals-trees_11)(data_5 'syntax-literals-trees)))"
"(let-values(((namespace-scopes_12)(extract-namespace-scopes ns_3)))"
"(letrec-values(((construct-compiled-in-memory_13)"
"(lambda(ld_21"
" mpi-vector-tree_22"
" phase-to-link-modules-tree_23"
" syntax-literals-tree_24)"
"(let-values(((is-module?_25)"
"(let-values(((or-part_31)(1/linklet-bundle? ld_21)))"
"(if or-part_31"
" or-part_31"
"(let-values(((b_32)"
"(hash-ref"
"(1/linklet-directory->hash ld_21)"
" #f"
" #f)))"
"(if b_32"
"(hash-ref(1/linklet-bundle->hash b_32) 'decl #f)"
" #f))))))"
"(let-values(((mpi-pos-vec_26)(vector-ref mpi-vector-tree_22 0)))"
"(let-values(((syntax-literals-spec_27)"
"(vector-ref syntax-literals-tree_24 0)))"
"(let-values(((pres_28)"
"(if is-module?_25"
"(extract-submodules ld_21 'pre)"
"(compiled-top->compiled-tops ld_21))))"
"(let-values(((posts_29)"
"(if is-module?_25"
"(extract-submodules ld_21 'post)"
" null)))"
"(let-values(((map-construct-compiled-in-memory_30)"
"(lambda(l_33 vec-pos_34)"
"(alt-reverse"
"(let-values(((lst_35) l_33)"
"((lst_36)"
"(vector-ref"
" mpi-vector-tree_22"
" vec-pos_34))"
"((lst_37)"
"(vector-ref"
" phase-to-link-modules-tree_23"
" vec-pos_34))"
"((lst_38)"
"(vector-ref"
" syntax-literals-tree_24"
" vec-pos_34)))"
"(begin"
"(if(list? lst_35)"
"(void)"
"(let-values()(in-list lst_35)))"
"(if(list? lst_36)"
"(void)"
"(let-values()(in-list lst_36)))"
"(if(list? lst_37)"
"(void)"
"(let-values()(in-list lst_37)))"
"(if(list? lst_38)"
"(void)"
"(let-values()(in-list lst_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40"
" lst_41"
" lst_42"
" lst_43"
" lst_44)"
"(if(if(pair? lst_41)"
"(if(pair? lst_42)"
"(if(pair? lst_43)"
"(pair? lst_44)"
" #f)"
" #f)"
" #f)"
"(let-values(((sub-ld_45)"
"(unsafe-car"
" lst_41))"
"((mpi-vector-tree_46)"
"(unsafe-car"
" lst_42))"
"((phase-to-link-modules-tree_47)"
"(unsafe-car"
" lst_43))"
"((syntax-literals-tree_48)"
"(unsafe-car"
" lst_44)))"
"(let-values(((fold-var_49)"
"(let-values(((fold-var_50)"
" fold-var_40))"
"(let-values(((fold-var_51)"
"(let-values()"
"(cons"
"(let-values()"
"(construct-compiled-in-memory_13"
" sub-ld_45"
" mpi-vector-tree_46"
" phase-to-link-modules-tree_47"
" syntax-literals-tree_48))"
" fold-var_50))))"
"(values"
" fold-var_51)))))"
"(for-loop_39"
" fold-var_49"
"(unsafe-cdr lst_41)"
"(unsafe-cdr lst_42)"
"(unsafe-cdr lst_43)"
"(unsafe-cdr"
" lst_44))))"
" fold-var_40))))"
" for-loop_39)"
" null"
" lst_35"
" lst_36"
" lst_37"
" lst_38)))))))"
"(compiled-in-memory1.1"
" ld_21"
" #f"
" #f"
" #f"
"(vector-ref"
" phase-to-link-modules-vector_8"
"(vector-ref phase-to-link-modules-tree_23 0))"
" #f"
" '#hasheqv()"
"(let-values(((len_52)(vector-length mpi-pos-vec_26)))"
"(begin"
"(if(exact-nonnegative-integer? len_52)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                               \"exact-nonnegative-integer?\""
" len_52)))"
"(let-values(((v_53)(make-vector len_52 0)))"
"(begin"
"(if(zero? len_52)"
"(void)"
"(let-values()"
"(let-values(((vec_54 len_55)"
"(let-values(((vec_56) mpi-pos-vec_26))"
"(begin"
"(if(vector? vec_56)"
"(void)"
"(let-values()"
"(in-vector vec_56)))"
"(values"
" vec_56"
"(unsafe-vector-length vec_56))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_57)"
"(lambda(i_58 pos_59)"
"(if(unsafe-fx< pos_59 len_55)"
"(let-values(((pos_60)"
"(unsafe-vector-ref"
" vec_54"
" pos_59)))"
"(let-values(((i_61)"
"(let-values(((i_62)"
" i_58))"
"(let-values(((i_63)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_53"
" i_62"
"(let-values()"
"(vector-ref"
" mpi-vector_6"
" pos_60)))"
"(unsafe-fx+"
" 1"
" i_62)))))"
"(values"
" i_63)))))"
"(if(not"
"((lambda x_64"
"(unsafe-fx="
" i_61"
" len_52))"
" pos_60))"
"(for-loop_57"
" i_61"
"(unsafe-fx+"
" 1"
" pos_59))"
" i_61)))"
" i_58))))"
" for-loop_57)"
" 0"
" 0)))))"
" v_53))))"
"(let-values(((len_65)(cdr syntax-literals-spec_27)))"
"(begin"
"(if(exact-nonnegative-integer? len_65)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                               \"exact-nonnegative-integer?\""
" len_65)))"
"(let-values(((v_66)(make-vector len_65 0)))"
"(begin"
"(if(zero? len_65)"
"(void)"
"(let-values()"
"(let-values(((start_67) 0)"
"((end_68)(cdr syntax-literals-spec_27))"
"((inc_69) 1))"
"(begin"
"(if(if(real? start_67)"
"(if(real? end_68)(real? inc_69) #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_67 end_68 inc_69)))"
"((letrec-values(((for-loop_70)"
"(lambda(i_71 pos_72)"
"(if(< pos_72 end_68)"
"(let-values(((i_73)"
" pos_72))"
"(let-values(((i_74)"
"(let-values(((i_75)"
" i_71))"
"(let-values(((i_76)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_66"
" i_75"
"(let-values()"
"(if syntax-literals_10"
"(vector-ref"
" syntax-literals_10"
"(+"
"(car"
" syntax-literals-spec_27)"
" i_73))"
" #f)))"
"(unsafe-fx+"
" 1"
" i_75)))))"
"(values"
" i_76)))))"
"(if(not"
"((lambda x_77"
"(unsafe-fx="
" i_74"
" len_65))"
" i_73))"
"(for-loop_70"
" i_74"
"(+ pos_72 inc_69))"
" i_74)))"
" i_71))))"
" for-loop_70)"
" 0"
" start_67)))))"
" v_66))))"
"(map-construct-compiled-in-memory_30 pres_28 1)"
"(map-construct-compiled-in-memory_30 posts_29 2)"
" namespace-scopes_12"
" #f))))))))))"
"(map2"
" construct-compiled-in-memory_13"
" tops_1"
" mpi-vector-trees_7"
" phase-to-link-modules-trees_9"
" syntax-literals-trees_11)))))))))))))"
"(define-values"
"(extract-submodules)"
"(lambda(ld_78 names-key_79)"
"(if(1/linklet-bundle? ld_78)"
"(let-values() null)"
"(let-values()"
"(let-values(((h_80)(1/linklet-directory->hash ld_78)))"
"(let-values(((mod_81)(hash-ref h_80 #f #f)))"
"            (let-values ((() (begin (if mod_81 (void) (let-values () (error \"missing main module\"))) (values))))"
"(let-values(((mh_82)(1/linklet-bundle->hash mod_81)))"
"(let-values(((names_83)(hash-ref mh_82 names-key_79 null)))"
"(alt-reverse"
"(let-values(((lst_84) names_83))"
"(begin"
"(if(list? lst_84)(void)(let-values()(in-list lst_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(fold-var_86 lst_87)"
"(if(pair? lst_87)"
"(let-values(((name_88)(unsafe-car lst_87)))"
"(let-values(((fold-var_89)"
"(let-values(((fold-var_90) fold-var_86))"
"(let-values(((fold-var_91)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" h_80"
" name_88"
"(lambda()"
"(error"
"                                                                                      \"missing submodule declaration:\""
" name_88))))"
" fold-var_90))))"
"(values fold-var_91)))))"
"(for-loop_85 fold-var_89(unsafe-cdr lst_87))))"
" fold-var_86))))"
" for-loop_85)"
" null"
" lst_84)))))))))))))"
"(void)"
"(void)"
"(define-values"
"(eval-single-top)"
"(lambda(c_1 ns_2)"
"(let-values(((c18_4) c_1)((ns19_5) ns_2)((temp20_6) #t))(eval-one-top15.1 temp20_6 #t c18_4 ns19_5 #f #f))))"
"(define-values"
"(compiled-multiple-top?)"
"(lambda(c_7)"
"(let-values(((ld_8)(if(compiled-in-memory? c_7)(compiled-in-memory-linklet-directory c_7) c_7)))"
"(if(1/linklet-directory? ld_8)(not(hash-ref(1/linklet-directory->hash ld_8) #f #f)) #f))))"
"(define-values"
"(eval-top)"
"(let-values(((eval-top7_9)"
"(lambda(c5_10 ns6_11 eval-compiled1_12 as-tail?2_13 eval-compiled3_14 as-tail?4_15)"
"(let-values(((c_16) c5_10))"
"(let-values(((ns_17) ns6_11))"
"(let-values(((eval-compiled_18)(if eval-compiled3_14 eval-compiled1_12 eval-top)))"
"(let-values(((as-tail?_19)(if as-tail?4_15 as-tail?2_13 #t)))"
"(let-values()"
"(if(compiled-multiple-top? c_16)"
"(eval-multiple-tops c_16 ns_17 eval-compiled_18 as-tail?_19)"
"(let-values(((c21_20) c_16)((ns22_21) ns_17)((as-tail?23_22) as-tail?_19))"
"(eval-one-top15.1 #f #f c21_20 ns22_21 as-tail?23_22 #t)))))))))))"
"(case-lambda"
"((c_23 ns_24)(eval-top7_9 c_23 ns_24 #f #f #f #f))"
"((c_25 ns_26 eval-compiled_27 as-tail?2_28)(eval-top7_9 c_25 ns_26 eval-compiled_27 as-tail?2_28 #t #t))"
"((c_29 ns_30 eval-compiled1_31)(eval-top7_9 c_29 ns_30 eval-compiled1_31 #f #t #f)))))"
"(define-values"
"(eval-multiple-tops)"
"(lambda(c_32 ns_33 eval-compiled_34 as-tail?_35)"
"(let-values(((eval-compiled-parts_36)"
"(lambda(l_37)"
"((letrec-values(((loop_38)"
"(lambda(l_39)"
"(if(null? l_39)"
"(let-values() void)"
"(if(null?(cdr l_39))"
"(let-values()(eval-compiled_34(car l_39) ns_33 as-tail?_35))"
"(let-values()"
"(begin(eval-compiled_34(car l_39) ns_33 #f)(loop_38(cdr l_39)))))))))"
" loop_38)"
" l_37))))"
"(if(compiled-in-memory? c_32)"
"(let-values()(eval-compiled-parts_36(compiled-in-memory-pre-compiled-in-memorys c_32)))"
"(let-values(((c1_40)(hash-ref(1/linklet-directory->hash c_32) 'data #f)))"
"(if c1_40"
"((lambda(data-ld_41)"
"(eval-compiled-parts_36"
"(create-compiled-in-memorys-using-shared-data"
"(compiled-top->compiled-tops c_32)"
"(hash-ref(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash data-ld_41) #f)) 0)"
" ns_33)))"
" c1_40)"
"(let-values()(eval-compiled-parts_36(compiled-top->compiled-tops c_32)))))))))"
"(define-values"
"(eval-one-top15.1)"
"(lambda(single-expression?9_42 single-expression?10_43 c13_44 ns14_45 as-tail?11_46 as-tail?12_47)"
"(let-values(((c_48) c13_44))"
"(let-values(((ns_49) ns14_45))"
"(let-values(((as-tail?_50)(if as-tail?12_47 as-tail?11_46 #t)))"
"(let-values(((single-expression?_51)(if single-expression?10_43 single-expression?9_42 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((ld_52)(if(compiled-in-memory? c_48)(compiled-in-memory-linklet-directory c_48) c_48)))"
"(let-values(((h_53)(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash ld_52) #f))))"
"(let-values(((link-instance_54)"
"(if(compiled-in-memory? c_48)"
"(link-instance-from-compiled-in-memory"
" c_48"
"(if(not single-expression?_51) ns_49 #f))"
"(1/instantiate-linklet"
"(hash-ref h_53 'link)"
"(list"
" deserialize-instance"
"(let-values(((ns24_63) ns_49)"
"((temp25_64)(namespace-phase ns_49))"
"((temp26_65)(namespace-mpi ns_49))"
"((temp27_66)(namespace-bulk-binding-registry ns_49))"
"((temp28_67)(current-code-inspector)))"
"(make-eager-instance-instance11.1"
" temp27_66"
" temp25_64"
" temp28_67"
" ns24_63"
" temp26_65)))))))"
"(let-values(((orig-phase_55)(hash-ref h_53 'original-phase)))"
"(let-values(((max-phase_56)(hash-ref h_53 'max-phase)))"
"(let-values(((phase-shift_57)(phase-(namespace-phase ns_49) orig-phase_55)))"
"(let-values(((extra-inspector_58)"
"(if(compiled-in-memory? c_48)"
"(compiled-in-memory-compile-time-inspector c_48)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_59)"
"(if(compiled-in-memory? c_48)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_48)"
" '#hasheqv())))"
"(let-values(((phase-to-link-modules_60)"
"(if(compiled-in-memory? c_48)"
"(compiled-in-memory-phase-to-link-module-uses c_48)"
"(1/instance-variable-value link-instance_54 'phase-to-link-modules))))"
"(let-values(((thunk_61)"
"(let-values(((start_68) max-phase_56)"
"((end_69)(sub1 orig-phase_55))"
"((inc_70) -1))"
"(begin"
"(if(if(real? start_68)(if(real? end_69)(real? inc_70) #f) #f)"
"(void)"
"(let-values()(in-range start_68 end_69 inc_70)))"
"((letrec-values(((for-loop_71)"
"(lambda(prev-thunk_72 pos_73)"
"(if(> pos_73 end_69)"
"(let-values(((phase_74) pos_73))"
"(let-values(((prev-thunk_75)"
"(let-values(((prev-thunk_76)"
" prev-thunk_72))"
"(let-values(((prev-thunk_77)"
"(let-values()"
"(let-values((()"
"(begin"
"(prev-thunk_76"
" #f)"
"(values))))"
"(let-values(((module-uses_78)"
"(hash-ref"
" phase-to-link-modules_60"
" phase_74"
" null)))"
"(let-values(((import-module-instances_79"
" import-instances_80)"
"(let-values(((mis_84"
" is_85)"
"(let-values(((lst_86)"
" module-uses_78))"
"(begin"
"(if(list?"
" lst_86)"
"(void)"
"(let-values()"
"(in-list"
" lst_86)))"
"((letrec-values(((for-loop_87)"
"(lambda(mis_88"
" is_89"
" lst_90)"
"(if(pair?"
" lst_90)"
"(let-values(((mu_91)"
"(unsafe-car"
" lst_90)))"
"(let-values(((mis_92"
" is_93)"
"(let-values(((mis_94)"
" mis_88)"
"((is_95)"
" is_89))"
"(let-values(((mis_96"
" is_97)"
"(let-values()"
"(let-values(((mis29_98"
" is30_99)"
"(let-values()"
"(let-values(((ns31_101)"
" ns_49)"
"((mu32_102)"
" mu_91)"
"((temp33_103)"
"(phase-"
"(phase+"
" phase_74"
" phase-shift_57)"
"(module-use-phase"
" mu_91))))"
"(namespace-module-use->module+linklet-instances144.1"
" temp33_103"
" #f"
" #f"
" #f"
" #f"
" ns31_101"
" mu32_102)))))"
"(values"
"(cons"
" mis29_98"
" mis_94)"
"(cons"
" is30_99"
" is_95))))))"
"(values"
" mis_96"
" is_97)))))"
"(for-loop_87"
" mis_92"
" is_93"
"(unsafe-cdr"
" lst_90))))"
"(values"
" mis_88"
" is_89)))))"
" for-loop_87)"
" null"
" null"
" lst_86)))))"
"(values"
"(alt-reverse"
" mis_84)"
"(alt-reverse"
" is_85)))))"
"(let-values(((phase-ns_81)"
"(namespace->namespace-at-phase"
" ns_49"
"(phase+"
" phase_74"
" phase-shift_57))))"
"(let-values(((inst_82)"
"(if single-expression?_51"
" link-instance_54"
"(let-values(((phase-ns34_105)"
" phase-ns_81)"
"((phase-shift35_106)"
" phase-shift_57)"
"((temp36_107)"
"(namespace-mpi"
" ns_49))"
"((temp37_108)"
"(namespace-inspector"
" ns_49))"
"((temp38_109)"
"(namespace-bulk-binding-registry"
" ns_49))"
"((temp39_110)"
"(lambda(name_111"
" val_112)"
"(namespace-set-transformer!"
" ns_49"
"(phase+"
"(sub1"
" phase_74)"
" phase-shift_57)"
" name_111"
" val_112))))"
"(make-instance-instance13.1"
" temp38_109"
" temp37_108"
" phase-ns34_105"
" phase-shift35_106"
" temp36_107"
" temp39_110)))))"
"(let-values(((linklet_83)"
"(hash-ref"
" h_53"
" phase_74"
" #f)))"
"(if linklet_83"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((linklet40_115)"
" linklet_83)"
"((temp41_116)"
" 3)"
"((module-uses42_117)"
" module-uses_78)"
"((import-module-instances43_118)"
" import-module-instances_79)"
"((temp44_119)"
"(current-code-inspector))"
"((extra-inspector45_120)"
" extra-inspector_58)"
"((temp46_121)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_59"
" phase_74"
" #f)))"
"(check-require-access9.1"
" temp41_116"
" linklet40_115"
" module-uses42_117"
" import-module-instances43_118"
" temp44_119"
" extra-inspector45_120"
" temp46_121))"
"(values))))"
"(let-values(((instantiate_113)"
"(lambda(tail?_122)"
"(1/instantiate-linklet"
" linklet_83"
"(list*"
" top-level-instance"
" link-instance_54"
" inst_82"
" import-instances_80)"
"(namespace->instance"
" ns_49"
"(phase+"
" phase_74"
" phase-shift_57))"
"(not"
" tail?_122)))))"
"(if(zero-phase?"
" phase_74)"
"(let-values()"
" instantiate_113)"
"(if single-expression?_51"
"(let-values()"
"(lambda(tail?_123)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" phase-ns_81)"
"(let-values()"
"(instantiate_113"
" tail?_123)))))"
"(let-values()"
"(let-values(((ns-1_124)"
"(namespace->namespace-at-phase"
" phase-ns_81"
"(sub1"
" phase_74))))"
"(lambda(tail?_125)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(let-values(((ns-147_126)"
" ns-1_124))"
"(make-expand-context8.1"
" #f"
" #f"
" #f"
" #f"
" ns-147_126))"
" 1/current-namespace"
" phase-ns_81)"
"(let-values()"
"(instantiate_113"
" tail?_125)))))))))))"
"(let-values()"
" void)))))))))))"
"(values prev-thunk_77)))))"
"(for-loop_71"
" prev-thunk_75"
"(+ pos_73 inc_70))))"
" prev-thunk_72))))"
" for-loop_71)"
" void"
" start_68)))))"
"(thunk_61 as-tail?_50)))))))))))))))))))"
"(define-values"
"(link-instance-from-compiled-in-memory)"
"(lambda(cim_154 to-ns_155)"
"(let-values(((orig-syntax-literals_156)(compiled-in-memory-syntax-literals cim_154)))"
"(let-values(((syntax-literals_157)"
"(if(not to-ns_155)"
"(let-values() orig-syntax-literals_156)"
"(if(namespace-scopes=?"
"(compiled-in-memory-namespace-scopes cim_154)"
"(extract-namespace-scopes to-ns_155))"
"(let-values() orig-syntax-literals_156)"
"(let-values()"
"(let-values(((len_158)(vector-length orig-syntax-literals_156)))"
"(begin"
"(if(exact-nonnegative-integer? len_158)"
"(void)"
"                                (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_158)))"
"(let-values(((v_159)(make-vector len_158 0)))"
"(begin"
"(if(zero? len_158)"
"(void)"
"(let-values()"
"(let-values(((vec_160 len_161)"
"(let-values(((vec_162) orig-syntax-literals_156))"
"(begin"
"(if(vector? vec_162)"
"(void)"
"(let-values()(in-vector vec_162)))"
"(values vec_162(unsafe-vector-length vec_162))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_163)"
"(lambda(i_164 pos_165)"
"(if(unsafe-fx< pos_165 len_161)"
"(let-values(((s_166)"
"(unsafe-vector-ref vec_160 pos_165)))"
"(let-values(((i_167)"
"(let-values(((i_168) i_164))"
"(let-values(((i_169)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_159"
" i_168"
"(let-values()"
"(swap-top-level-scopes"
" s_166"
"(compiled-in-memory-namespace-scopes"
" cim_154)"
" to-ns_155)))"
"(unsafe-fx+"
" 1"
" i_168)))))"
"(values i_169)))))"
"(if(not"
"((lambda x_170(unsafe-fx= i_167 len_158))"
" s_166))"
"(for-loop_163 i_167(unsafe-fx+ 1 pos_165))"
" i_167)))"
" i_164))))"
" for-loop_163)"
" 0"
" 0)))))"
" v_159)))))))))"
"(1/make-instance"
" 'link"
" #f"
" mpi-vector-id"
"(compiled-in-memory-mpis cim_154)"
" syntax-literals-id"
" syntax-literals_157)))))"
"(void)"
"(void)"
"(define-values(runtime-scope)(new-multi-scope))"
"(define-values(runtime-stx)(add-scope empty-syntax runtime-scope))"
"(define-values(runtime-module-name)(1/make-resolved-module-path '#%runtime))"
"(define-values(runtime-mpi)(1/module-path-index-join ''#%runtime #f))"
"(define-values"
"(add-runtime-primitive!)"
"(lambda(sym_1)"
"(let-values(((temp1_2)(syntax-scope-set runtime-stx 0))"
"((sym2_3) sym_1)"
"((temp3_4)"
"(let-values(((runtime-mpi4_5) runtime-mpi)((temp5_6) 0)((sym6_7) sym_1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" runtime-mpi4_5"
" temp5_6"
" sym6_7))))"
"(add-binding-in-scopes!16.1 #f #f temp1_2 sym2_3 temp3_4))))"
"(call-with-values(lambda()(add-runtime-primitive! 'values)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'cons)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'list)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type-property)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'gensym)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'string->uninterned-symbol)) print-values)"
"(define-values"
"(runtime-instances)"
" '(#%kernel #%paramz #%foreign #%unsafe #%flfxnum #%extfl #%network #%place #%futures))"
"(void)"
"(void)"
"(define-values(box-cons!)(lambda(b_6 v_7)(set-box! b_6(cons v_7(unbox b_6)))))"
"(define-values(box-clear!)(lambda(b_8)(begin0(alt-reverse(unbox b_8))(set-box! b_8 null))))"
"(define-values"
"(struct:lift-context lift-context1.1 lift-context? lift-context-convert lift-context-lifts lift-context-module*-ok?)"
"(let-values(((struct:_9 make-_10 ?_11 -ref_12 -set!_13)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lift-context #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lift-context)))))"
"(values"
" struct:_9"
" make-_10"
" ?_11"
"(make-struct-field-accessor -ref_12 0 'convert)"
"(make-struct-field-accessor -ref_12 1 'lifts)"
"(make-struct-field-accessor -ref_12 2 'module*-ok?))))"
"(define-values"
"(struct:lifted-bind lifted-bind2.1 lifted-bind? lifted-bind-ids lifted-bind-keys lifted-bind-rhs)"
"(let-values(((struct:_39 make-_40 ?_41 -ref_42 -set!_43)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lifted-bind #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lifted-bind)))))"
"(values"
" struct:_39"
" make-_40"
" ?_41"
"(make-struct-field-accessor -ref_42 0 'ids)"
"(make-struct-field-accessor -ref_42 1 'keys)"
"(make-struct-field-accessor -ref_42 2 'rhs))))"
"(define-values"
"(make-lift-context6.1)"
"(lambda(module*-ok?3_69 module*-ok?4_70 convert5_71)"
"(let-values(((convert_72) convert5_71))"
"(let-values(((module*-ok?_73)(if module*-ok?4_70 module*-ok?3_69 #f)))"
"(let-values()(lift-context1.1 convert_72(box null) module*-ok?_73))))))"
"(define-values"
"(add-lifted!)"
"(lambda(lifts_88 ids_89 rhs_90 phase_91)"
"(let-values(((lifted-ids_92 lifted_93)((lift-context-convert lifts_88) ids_89 rhs_90 phase_91)))"
"(begin(box-cons!(lift-context-lifts lifts_88) lifted_93) lifted-ids_92))))"
"(define-values(get-and-clear-lifts!)(lambda(lifts_94)(box-clear!(lift-context-lifts lifts_94))))"
"(define-values"
"(make-local-lift)"
"(lambda(lift-env_95 counter_96)"
"(lambda(ids_97 rhs_98 phase_99)"
"(let-values(((keys_100)"
"(alt-reverse"
"(let-values(((lst_101) ids_97))"
"(begin"
"(if(list? lst_101)(void)(let-values()(in-list lst_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(fold-var_103 lst_104)"
"(if(pair? lst_104)"
"(let-values(((id_105)(unsafe-car lst_104)))"
"(let-values(((fold-var_106)"
"(let-values(((fold-var_107) fold-var_103))"
"(let-values(((fold-var_108)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((key_109)"
"(let-values(((id31_110)"
" id_105)"
"((phase32_111)"
" phase_99)"
"((counter33_112)"
" counter_96))"
"(add-local-binding!35.1"
" #f"
" #f"
" #f"
" #f"
" id31_110"
" phase32_111"
" counter33_112))))"
"(begin"
"(set-box!"
" lift-env_95"
"(hash-set"
"(unbox lift-env_95)"
" key_109"
" variable))"
" key_109)))"
" fold-var_107))))"
"(values fold-var_108)))))"
"(for-loop_102 fold-var_106(unsafe-cdr lst_104))))"
" fold-var_103))))"
" for-loop_102)"
" null"
" lst_101))))))"
"(values ids_97(lifted-bind2.1 ids_97 keys_100 rhs_98))))))"
"(define-values"
"(make-top-level-lift)"
"(lambda(ctx_113)"
"(lambda(ids_114 rhs_115 phase_116)"
"(let-values(((post-scope_117)"
"(root-expand-context-post-expansion-scope"
"(namespace-get-root-expand-ctx(expand-context-namespace ctx_113)))))"
"(let-values(((tl-ids_118)"
"(alt-reverse"
"(let-values(((lst_120) ids_114))"
"(begin"
"(if(list? lst_120)(void)(let-values()(in-list lst_120)))"
"((letrec-values(((for-loop_121)"
"(lambda(fold-var_122 lst_123)"
"(if(pair? lst_123)"
"(let-values(((id_124)(unsafe-car lst_123)))"
"(let-values(((fold-var_125)"
"(let-values(((fold-var_126) fold-var_122))"
"(let-values(((fold-var_127)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope id_124 post-scope_117))"
" fold-var_126))))"
"(values fold-var_127)))))"
"(for-loop_121 fold-var_125(unsafe-cdr lst_123))))"
" fold-var_122))))"
" for-loop_121)"
" null"
" lst_120))))))"
"(let-values(((syms_119)(select-defined-syms-and-bind!/ctx tl-ids_118 ctx_113)))"
"(values tl-ids_118(lifted-bind2.1 tl-ids_118 syms_119 rhs_115))))))))"
"(define-values"
"(wrap-lifts-as-let)"
"(lambda(lifts_128 body_129 s_130 phase_131)"
"(datum->syntax$1"
" #f"
"(let-values(((lst_132)(alt-reverse lifts_128)))"
"(begin"
"(if(list? lst_132)(void)(let-values()(in-list lst_132)))"
"((letrec-values(((for-loop_133)"
"(lambda(body_134 lst_135)"
"(if(pair? lst_135)"
"(let-values(((lift_136)(unsafe-car lst_135)))"
"(let-values(((body_137)"
"(let-values(((body_138) body_134))"
"(let-values(((body_139)"
"(let-values()"
"(begin"
"(if(lifted-bind? lift_136)"
"(void)"
"(let-values()"
"                                                                       (error \"non-bindings in `lift-context`\")))"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx phase_131)"
" 'let-values)"
"(list"
"(list"
"(lifted-bind-ids lift_136)"
"(lifted-bind-rhs lift_136)))"
" body_138)))))"
"(values body_139)))))"
"(for-loop_133 body_137(unsafe-cdr lst_135))))"
" body_134))))"
" for-loop_133)"
" body_129"
" lst_132))))))"
"(define-values"
"(wrap-lifts-as-begin15.1)"
"(lambda(adjust-form9_140 adjust-form10_141 lifts11_142 body12_143 s13_144 phase14_145)"
"(let-values(((lifts_146) lifts11_142))"
"(let-values(((body_147) body12_143))"
"(let-values()"
"(let-values(((phase_149) phase14_145))"
"(let-values(((adjust-form_150)(if adjust-form10_141 adjust-form9_140 values)))"
"(let-values()"
"(datum->syntax$1"
" #f"
"(cons"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_149) 'begin)"
"(append"
"(alt-reverse"
"(let-values(((lst_151) lifts_146))"
"(begin"
"(if(list? lst_151)(void)(let-values()(in-list lst_151)))"
"((letrec-values(((for-loop_152)"
"(lambda(fold-var_153 lst_154)"
"(if(pair? lst_154)"
"(let-values(((lift_155)(unsafe-car lst_154)))"
"(let-values(((fold-var_156)"
"(let-values(((fold-var_157) fold-var_153))"
"(let-values(((fold-var_158)"
"(let-values()"
"(cons"
"(let-values()"
"(adjust-form_150"
"(if(lifted-bind? lift_155)"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_149)"
" 'define-values)"
"(lifted-bind-ids lift_155)"
"(lifted-bind-rhs lift_155))))"
"(let-values() lift_155))))"
" fold-var_157))))"
"(values fold-var_158)))))"
"(for-loop_152 fold-var_156(unsafe-cdr lst_154))))"
" fold-var_153))))"
" for-loop_152)"
" null"
" lst_151))))"
"(list body_147))))))))))))"
"(define-values"
"(get-lifts-as-lists)"
"(lambda(lifts_182)"
"(alt-reverse"
"(let-values(((lst_183) lifts_182))"
"(begin"
"(if(list? lst_183)(void)(let-values()(in-list lst_183)))"
"((letrec-values(((for-loop_184)"
"(lambda(fold-var_185 lst_186)"
"(if(pair? lst_186)"
"(let-values(((lift_187)(unsafe-car lst_186)))"
"(let-values(((fold-var_188)"
"(let-values(((fold-var_189) fold-var_185))"
"(let-values(((fold-var_190)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(lifted-bind-ids lift_187)"
"(lifted-bind-keys lift_187)"
"(lifted-bind-rhs lift_187)))"
" fold-var_189))))"
"(values fold-var_190)))))"
"(for-loop_184 fold-var_188(unsafe-cdr lst_186))))"
" fold-var_185))))"
" for-loop_184)"
" null"
" lst_183))))))"
"(define-values"
"(struct:module-lift-context"
" module-lift-context18.1"
" module-lift-context?"
" module-lift-context-wrt-phase"
" module-lift-context-lifts"
" module-lift-context-module*-ok?)"
"(let-values(((struct:_191 make-_192 ?_193 -ref_194 -set!_195)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'module-lift-context)))))"
"(values"
" struct:_191"
" make-_192"
" ?_193"
"(make-struct-field-accessor -ref_194 0 'wrt-phase)"
"(make-struct-field-accessor -ref_194 1 'lifts)"
"(make-struct-field-accessor -ref_194 2 'module*-ok?))))"
"(define-values"
"(make-module-lift-context)"
"(lambda(phase_221 module*-ok?_222)(module-lift-context18.1 phase_221(box null) module*-ok?_222)))"
"(define-values"
"(get-and-clear-module-lifts!)"
"(lambda(module-lifts_223)(box-clear!(module-lift-context-lifts module-lifts_223))))"
"(define-values"
"(add-lifted-module!)"
"(lambda(module-lifts_224 s_225 phase_226)"
"(begin"
"(if(let-values(((or-part_227)"
"(if(module-lift-context? module-lifts_224)"
"(module-lift-context-module*-ok? module-lifts_224)"
" #f)))"
"(if or-part_227"
" or-part_227"
"(if(lift-context? module-lifts_224)(lift-context-module*-ok? module-lifts_224) #f)))"
"(void)"
"(let-values()"
"(let-values(((tmp_228)(core-form-sym s_225 phase_226)))"
"(if(equal? tmp_228 'module)"
"(let-values()(void))"
"(if(equal? tmp_228 'module*)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                   \"cannot lift `module*' to a top-level context\""
"                   \"syntax\""
" s_225))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a `module' declaration\" \"syntax\" s_225)))))))"
"(if(module-lift-context? module-lifts_224)"
"(let-values()(box-cons!(module-lift-context-lifts module-lifts_224) s_225))"
"(if(lift-context? module-lifts_224)"
"(let-values()(box-cons!(lift-context-lifts module-lifts_224) s_225))"
"          (let-values () (error \"internal error: unrecognized lift-context type for module lift\")))))))"
"(define-values"
"(struct:require-lift-context"
" require-lift-context19.1"
" require-lift-context?"
" require-lift-context-do-require"
" require-lift-context-wrt-phase"
" require-lift-context-requires)"
"(let-values(((struct:_229 make-_230 ?_231 -ref_232 -set!_233)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'require-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'require-lift-context)))))"
"(values"
" struct:_229"
" make-_230"
" ?_231"
"(make-struct-field-accessor -ref_232 0 'do-require)"
"(make-struct-field-accessor -ref_232 1 'wrt-phase)"
"(make-struct-field-accessor -ref_232 2 'requires))))"
"(define-values"
"(make-require-lift-context)"
"(lambda(wrt-phase_259 do-require_260)(require-lift-context19.1 do-require_260 wrt-phase_259(box null))))"
"(define-values"
"(get-and-clear-require-lifts!)"
"(lambda(require-lifts_261)(box-clear!(require-lift-context-requires require-lifts_261))))"
"(define-values"
"(add-lifted-require!)"
"(lambda(require-lifts_262 s_263 phase_264)"
"(begin"
"((require-lift-context-do-require require-lifts_262) s_263 phase_264)"
"(box-cons!(require-lift-context-requires require-lifts_262) s_263))))"
"(define-values"
"(struct:to-module-lift-context"
" to-module-lift-context20.1"
" to-module-lift-context?"
" to-module-lift-context-wrt-phase"
" to-module-lift-context-provides"
" to-module-lift-context-end-as-expressions?"
" to-module-lift-context-ends)"
"(let-values(((struct:_265 make-_266 ?_267 -ref_268 -set!_269)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'to-module-lift-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'to-module-lift-context)))))"
"(values"
" struct:_265"
" make-_266"
" ?_267"
"(make-struct-field-accessor -ref_268 0 'wrt-phase)"
"(make-struct-field-accessor -ref_268 1 'provides)"
"(make-struct-field-accessor -ref_268 2 'end-as-expressions?)"
"(make-struct-field-accessor -ref_268 3 'ends))))"
"(define-values"
"(make-to-module-lift-context26.1)"
"(lambda(end-as-expressions?22_304 shared-module-ends21_305 phase25_306)"
"(let-values(((phase_307) phase25_306))"
"(let-values(((ends_308) shared-module-ends21_305))"
"(let-values(((end-as-expressions?_309) end-as-expressions?22_304))"
"(let-values()(to-module-lift-context20.1 phase_307(box null) end-as-expressions?_309 ends_308)))))))"
"(define-values(make-shared-module-ends)(lambda()(box null)))"
"(define-values"
"(get-and-clear-end-lifts!)"
"(lambda(to-module-lifts_324)(box-clear!(to-module-lift-context-ends to-module-lifts_324))))"
"(define-values"
"(get-and-clear-provide-lifts!)"
"(lambda(to-module-lifts_325)(box-clear!(to-module-lift-context-provides to-module-lifts_325))))"
"(define-values"
"(add-lifted-to-module-provide!)"
"(lambda(to-module-lifts_326 s_327 phase_328)"
"(box-cons!(to-module-lift-context-provides to-module-lifts_326) s_327)))"
"(define-values"
"(add-lifted-to-module-end!)"
"(lambda(to-module-lifts_329 s_330 phase_331)(box-cons!(to-module-lift-context-ends to-module-lifts_329) s_330)))"
"(void)"
"(void)"
"(define-values"
"(struct:already-expanded already-expanded1.1 already-expanded? already-expanded-s already-expanded-binding-layer)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'already-expanded"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'already-expanded)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 's)"
"(make-struct-field-accessor -ref_4 1 'binding-layer))))"
"(void)"
"(void)"
"(define-values"
"(1/prop:liberal-define-context has-liberal-define-context-property? liberal-define-context-value)"
"(make-struct-type-property 'liberal-define-context))"
"(define-values"
"(struct:liberal-define-context make-liberal-define-context 1/liberal-define-context?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'liberal-define-context"
" #f"
" 0"
" 0"
" #f"
"(list(cons 1/prop:liberal-define-context #t))"
" #f"
" #f"
" '()"
" #f"
" 'make-liberal-define-context)))))"
"(values struct:_1 make-_2 ?_3)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:expansion-contexts expansion-contexts? expansion-contexts-ref)"
"(make-struct-type-property"
" 'expansion-contexts"
"(lambda(v_1 info_2)"
"(begin"
"(if(if(list? v_1)"
"(let-values(((lst_3) v_1))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(result_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((s_7)(unsafe-car lst_6)))"
"(let-values(((result_8)"
"(let-values()"
"(let-values(((result_10)"
"(let-values()"
"(let-values()"
"(memq"
" s_7"
" '(expression"
" top-level"
" module"
" module-begin"
" definition-context))))))"
"(values result_10)))))"
"(if(not((lambda x_11(not result_8)) s_7))"
"(for-loop_4 result_8(unsafe-cdr lst_6))"
" result_8)))"
" result_5))))"
" for-loop_4)"
" #t"
" lst_3)))"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:expansion-contexts"
"            \"(listof (or/c 'expression 'top-level 'module 'module-begin 'definition-context))\""
" v_1)))"
" v_1))))"
"(define-values"
"(not-in-this-expand-context?)"
"(lambda(t_12 ctx_13)"
"(if(expansion-contexts? t_12)"
"(not(memq(context->symbol(expand-context-context ctx_13))(expansion-contexts-ref t_12)))"
" #f)))"
"(define-values(context->symbol)(lambda(context_14)(if(symbol? context_14) context_14 'definition-context)))"
"(define-values"
"(avoid-current-expand-context)"
"(lambda(s_15 t_16 ctx_17)"
"(let-values(((wrap_18)"
"(lambda(sym_20)"
"(datum->syntax$1"
" #f"
"(list"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx sym_20)(expand-context-phase ctx_17))"
" s_15)))))"
"(let-values(((fail_19)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"                        \"not allowed in context\\n  expansion context: ~a\""
"(context->symbol(expand-context-context ctx_17)))"
" s_15))))"
"(let-values(((tmp_21)(context->symbol(expand-context-context ctx_17))))"
"(if(equal? tmp_21 'module-begin)"
"(let-values()(wrap_18 'begin))"
"(if(if(equal? tmp_21 'module) #t(if(equal? tmp_21 'top-level) #t(equal? tmp_21 'definition-context)))"
"(let-values()(if(memq 'expression(expansion-contexts-ref t_16))(wrap_18 '#%expression)(fail_19)))"
"(let-values()(fail_19)))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:reference-record"
" reference-record1.1"
" reference-record?"
" reference-record-already-bound"
" reference-record-reference-before-bound"
" reference-record-all-referenced?"
" set-reference-record-already-bound!"
" set-reference-record-reference-before-bound!"
" set-reference-record-all-referenced?!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'reference-record #f 3 0 #f null #f #f '() #f 'reference-record)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'already-bound)"
"(make-struct-field-accessor -ref_4 1 'reference-before-bound)"
"(make-struct-field-accessor -ref_4 2 'all-referenced?)"
"(make-struct-field-mutator -set!_5 0 'already-bound)"
"(make-struct-field-mutator -set!_5 1 'reference-before-bound)"
"(make-struct-field-mutator -set!_5 2 'all-referenced?))))"
"(define-values(make-reference-record)(lambda()(reference-record1.1(seteq)(seteq) #f)))"
"(define-values"
"(reference-record-used!)"
"(lambda(rr_31 key_32)"
"(if(set-member?(reference-record-already-bound rr_31) key_32)"
"(void)"
"(let-values()"
"(set-reference-record-reference-before-bound!"
" rr_31"
"(set-add(reference-record-reference-before-bound rr_31) key_32))))))"
"(define-values"
"(reference-records-all-used!)"
"(lambda(rrs_33)"
"(let-values(((stop?_34 fold-var_35)"
"(let-values(((lst_36) rrs_33))"
"(begin"
"(if(list? lst_36)(void)(let-values()(in-list lst_36)))"
"((letrec-values(((for-loop_37)"
"(lambda(stop-after?_38 fold-var_39 lst_40)"
"(if(pair? lst_40)"
"(let-values(((rr_41)(unsafe-car lst_40)))"
"(let-values(((stop-after?_42 fold-var_43)"
"(let-values(((stop-after?_44) stop-after?_38)"
"((fold-var_45) fold-var_39))"
"(let-values(((stop?_46)"
"(reference-record-all-referenced? rr_41)))"
"(begin"
" #t"
"((letrec-values(((for-loop_47)"
"(lambda(stop-after?_48 fold-var_49)"
"(let-values()"
"(let-values(((stop-after?_50"
" fold-var_51)"
"(let-values(((stop-after?_52)"
" stop-after?_48)"
"((fold-var_53)"
" fold-var_49))"
"(let-values(((stop-after?_54)"
"(let-values(((or-part_55)"
" stop-after?_52))"
"(if or-part_55"
" or-part_55"
" stop?_46))))"
"(begin"
" #t"
"((letrec-values(((for-loop_56)"
"(lambda(stop-after?_57"
" fold-var_58)"
"(let-values()"
"(let-values(((stop-after?_59"
" fold-var_60)"
"(let-values(((stop-after?_61)"
" stop-after?_57)"
"((fold-var_62)"
" fold-var_58))"
"(if stop?_46"
"(values"
" stop-after?_61"
" fold-var_62)"
"(let-values(((stop-after?_63)"
" stop-after?_61))"
"(let-values(((stop-after?_65"
" fold-var_66)"
"(let-values()"
"(let-values(((fold-var_67)"
"(let-values()"
"(begin"
"(let-values()"
"(set-reference-record-all-referenced?!"
" rr_41"
" #t))"
"(void)))))"
"(values"
" stop-after?_63"
" fold-var_67)))))"
"(values"
" stop-after?_65"
" fold-var_66)))))))"
"(values"
" stop-after?_59"
" fold-var_60))))))"
" for-loop_56)"
" stop-after?_54"
" fold-var_53))))))"
"(values"
" stop-after?_50"
" fold-var_51))))))"
" for-loop_47)"
" stop-after?_44"
" fold-var_45))))))"
"(if(not((lambda x_68 stop-after?_42) rr_41))"
"(for-loop_37 stop-after?_42 fold-var_43(unsafe-cdr lst_40))"
"(values stop-after?_42 fold-var_43))))"
"(values stop-after?_38 fold-var_39)))))"
" for-loop_37)"
" #f"
"(void)"
" lst_36)))))"
"(values fold-var_35))))"
"(define-values"
"(reference-record-bound!)"
"(lambda(rr_69 keys_70)"
"(begin"
"(set-reference-record-already-bound!"
" rr_69"
"(let-values(((lst_71) keys_70))"
"(begin"
"(if(list? lst_71)(void)(let-values()(in-list lst_71)))"
"((letrec-values(((for-loop_72)"
"(lambda(ab_73 lst_74)"
"(if(pair? lst_74)"
"(let-values(((key_75)(unsafe-car lst_74)))"
"(let-values(((ab_76)"
"(let-values(((ab_77) ab_73))"
"(let-values(((ab_78)(let-values()(set-add ab_77 key_75))))"
"(values ab_78)))))"
"(for-loop_72 ab_76(unsafe-cdr lst_74))))"
" ab_73))))"
" for-loop_72)"
"(reference-record-already-bound rr_69)"
" lst_71))))"
"(set-reference-record-reference-before-bound!"
" rr_69"
"(let-values(((lst_79) keys_70))"
"(begin"
"(if(list? lst_79)(void)(let-values()(in-list lst_79)))"
"((letrec-values(((for-loop_80)"
"(lambda(rbb_81 lst_82)"
"(if(pair? lst_82)"
"(let-values(((key_83)(unsafe-car lst_82)))"
"(let-values(((rbb_84)"
"(let-values(((rbb_85) rbb_81))"
"(let-values(((rbb_86)(let-values()(set-remove rbb_85 key_83))))"
"(values rbb_86)))))"
"(for-loop_80 rbb_84(unsafe-cdr lst_82))))"
" rbb_81))))"
" for-loop_80)"
"(reference-record-reference-before-bound rr_69)"
" lst_79)))))))"
"(define-values"
"(reference-record-forward-references?)"
"(lambda(rr_87)"
"(let-values(((or-part_88)(reference-record-all-referenced? rr_87)))"
"(if or-part_88 or-part_88(positive?(set-count(reference-record-reference-before-bound rr_87)))))))"
"(define-values"
"(reference-record-clear!)"
"(lambda(rr_89)"
"(begin(set-reference-record-already-bound! rr_89 #f)(set-reference-record-reference-before-bound! rr_89 #f))))"
"(void)"
"(void)"
"(define-values"
"(call-expand-observe)"
"(lambda(obs_57 key_58 . args_59)"
"(obs_57"
"(hash-ref key->number key_58)"
"(if(null? args_59)(let-values() #f)(let-values()(apply list* args_59))))))"
"(define-values"
"(log-expand-start)"
"(lambda()"
"(let-values(((obs_60)(current-expand-observe)))"
"(if obs_60(let-values()(call-expand-observe obs_60 'start-expand))(void)))))"
"(define-values"
"(key->number)"
" '#hash((prim-#%stratified . 155)"
"(lambda-renames . 17)"
"(variable . 125)"
"(macro-post-x . 22)"
"(splice . 11)"
"(exit-local-bind . 160)"
"(prim-submodule . 158)"
"(local-lift . 129)"
"(prim-letrec-values . 113)"
"(enter-macro . 8)"
"(opaque-expr . 146)"
"(prim-set! . 123)"
"(prim-if . 105)"
"(prim-define-values . 104)"
"(block->letrec . 14)"
"(lift-statement . 134)"
"(enter-prim . 6)"
"(prim-define-syntaxes . 103)"
"(prim-begin0 . 108)"
"(track-origin . 152)"
"(lift-loop . 128)"
"(prim-expression . 138)"
"(phase-up . 20)"
"(local-post . 133)"
"(prim-require . 119)"
"(prim-stop . 100)"
"(start-expand . 141)"
"(enter-block . 10)"
"(prim-module-begin . 102)"
"(letrec-syntaxes-renames . 19)"
"(prim-#%datum . 115)"
"(enter-list . 4)"
"(enter-bind . 144)"
"(return . 2)"
"(rename-list . 147)"
"(next-group . 13)"
"(prim-quote-syntax . 118)"
"(exit-prim . 7)"
"(module-lift-loop . 137)"
"(exit-bind . 145)"
"(module-body . 23)"
"(let-renames . 16)"
"(prim-#%app . 109)"
"(exit-check . 127)"
"(prim-lambda . 110)"
"(prim-letrec-syntaxes-values . 114)"
"(exit-local-expr . 140)"
"(exit-list . 5)"
"(block-renames . 24)"
"(prim-quote . 117)"
"(enter-check . 126)"
"(block->list . 12)"
"(macro-pre-x . 21)"
"(prim-begin-for-syntax . 156)"
"(tag . 142)"
"(local-bind . 143)"
"(enter-local . 130)"
"(local-pre . 132)"
"(prim-#%top . 116)"
"(lift-require . 150)"
"(exit-macro . 9)"
"(prim-submodule* . 159)"
"(lift-provide . 151)"
"(prim-begin . 107)"
"(local-value-result . 154)"
"(module-lift-end-loop . 135)"
"(letlift-loop . 136)"
"(exit-local . 131)"
"(prim-provide . 122)"
"(enter-local-expr . 139)"
"(prim-module . 101)"
"(prim-with-continaution-mark . 106)"
"(next . 3)"
"(case-lambda-renames . 18)"
"(local-value . 153)"
"(prim-#%variable-reference . 149)"
"(rename-one . 148)"
"(prepare-env . 157)"
"(prim-case-lambda . 111)"
"(visit . 0)"
"(prim-let-values . 112)"
"(resolve . 1)))"
"(void)"
"(void)"
"(define-values"
"(expand5.1)"
"(lambda(alternate-id1_21 alternate-id2_22 s3_23 ctx4_24)"
"(let-values(((s_25) s3_23))"
"(let-values(((ctx_26) ctx4_24))"
"(let-values(((alternate-id_27)(if alternate-id2_22 alternate-id1_21 #f)))"
"(let-values()"
"(begin"
"(let-values(((obs_28)(expand-context-observer ctx_26)))"
"(if obs_28"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_28"
"(if(expand-context-only-immediate? ctx_26) 'enter-check 'visit)"
" s_25)))"
"(void)))"
"(if(identifier? s_25)"
"(let-values()(expand-identifier s_25 ctx_26 alternate-id_27))"
"(if(if(pair?(syntax-content s_25))(identifier?(car(syntax-content s_25))) #f)"
"(let-values()(expand-id-application-form s_25 ctx_26 alternate-id_27))"
"(if(let-values(((or-part_29)(pair?(syntax-content s_25))))"
"(if or-part_29 or-part_29(null?(syntax-content s_25))))"
"(let-values()(expand-implicit '#%app s_25 ctx_26 #f))"
"(if(already-expanded?(syntax-content s_25))"
"(let-values()(expand-already-expanded s_25 ctx_26))"
"(let-values()(expand-implicit '#%datum s_25 ctx_26 #f)))))))))))))"
"(define-values"
"(expand-identifier)"
"(lambda(s_47 ctx_48 alternate-id_49)"
"(let-values(((id_50)(let-values(((or-part_51) alternate-id_49))(if or-part_51 or-part_51 s_47))))"
"(if(free-id-set-member?(expand-context-stops ctx_48)(expand-context-phase ctx_48) id_50)"
"(let-values()"
"(begin"
"(let-values(((obs_52)(expand-context-observer ctx_48)))"
"(if obs_52"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_48))"
"(let-values()"
"(begin"
"(call-expand-observe obs_52 'enter-prim s_47)"
"(call-expand-observe obs_52 'prim-stop)"
"(call-expand-observe obs_52 'exit-prim s_47)"
"(call-expand-observe obs_52 'return s_47)))"
"(void)))"
"(void)))"
" s_47))"
"(let-values()"
"(let-values(((binding_53)"
"(let-values(((id65_55) id_50)"
"((temp66_56)(expand-context-phase ctx_48))"
"((temp67_57) 'ambiguous)"
"((temp68_58) #t))"
"(resolve+shift30.1 temp67_57 #t #f #f #f #f temp68_58 #t #f #f id65_55 temp66_56))))"
"(begin"
"(let-values(((obs_59)(expand-context-observer ctx_48)))"
"(if obs_59"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_48))"
"(let-values()(call-expand-observe obs_59 'resolve id_50))"
"(void)))"
"(void)))"
"(if(eq? binding_53 'ambiguous)"
"(let-values()(raise-ambiguous-error id_50 ctx_48))"
"(if(not binding_53)"
"(let-values()(expand-implicit '#%top(substitute-alternate-id s_47 alternate-id_49) ctx_48 s_47))"
"(let-values()"
"(let-values(((t_60 primitive?_61 insp-of-t_62)"
"(let-values(((binding69_64) binding_53)"
"((ctx70_65) ctx_48)"
"((id71_66) id_50)"
"((temp72_67)(if alternate-id_49 s_47 #f))"
"((temp73_68)(expand-context-in-local-expand? ctx_48)))"
"(lookup15.1 temp72_67 #t temp73_68 #t binding69_64 ctx70_65 id71_66))))"
"(dispatch t_60 insp-of-t_62 s_47 id_50 ctx_48 binding_53 primitive?_61))))))))))))"
"(define-values"
"(expand-id-application-form)"
"(lambda(s_69 ctx_70 alternate-id_71)"
"(let-values(((id_72)"
"(let-values(((or-part_73) alternate-id_71))"
"(if or-part_73 or-part_73(car(syntax-e/no-taint s_69))))))"
"(if(free-id-set-member?(expand-context-stops ctx_70)(expand-context-phase ctx_70) id_72)"
"(let-values()"
"(begin"
"(let-values(((obs_74)(expand-context-observer ctx_70)))"
"(if obs_74"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_70))"
"(let-values()"
"(begin"
"(call-expand-observe obs_74 'enter-prim s_69)"
"(call-expand-observe obs_74 'prim-stop)"
"(call-expand-observe obs_74 'exit-prim s_69)"
"(call-expand-observe obs_74 'return s_69)))"
"(void)))"
"(void)))"
" s_69))"
"(let-values()"
"(let-values(((binding_75)"
"(let-values(((id74_77) id_72)"
"((temp75_78)(expand-context-phase ctx_70))"
"((temp76_79) 'ambiguous)"
"((temp77_80) #t))"
"(resolve+shift30.1 temp76_79 #t #f #f #f #f temp77_80 #t #f #f id74_77 temp75_78))))"
"(begin"
"(let-values(((obs_81)(expand-context-observer ctx_70)))"
"(if obs_81"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_70))"
"(let-values()(call-expand-observe obs_81 'resolve id_72))"
"(void)))"
"(void)))"
"(if(eq? binding_75 'ambiguous)"
"(let-values()(raise-ambiguous-error id_72 ctx_70))"
"(if(not binding_75)"
"(let-values()(expand-implicit '#%app(substitute-alternate-id s_69 alternate-id_71) ctx_70 id_72))"
"(let-values()"
"(let-values(((t_82 primitive?_83 insp-of-t_84)"
"(let-values(((binding78_86) binding_75)"
"((ctx79_87) ctx_70)"
"((id80_88) id_72)"
"((temp81_89)(if alternate-id_71(car(syntax-e/no-taint s_69)) #f))"
"((temp82_90)(expand-context-in-local-expand? ctx_70)))"
"(lookup15.1 temp81_89 #t temp82_90 #t binding78_86 ctx79_87 id80_88))))"
"(if(variable? t_82)"
"(let-values()"
"(expand-implicit '#%app(substitute-alternate-id s_69 alternate-id_71) ctx_70 id_72))"
"(let-values()"
"(dispatch t_82 insp-of-t_84 s_69 id_72 ctx_70 binding_75 primitive?_83))))))))))))))"
"(define-values"
"(expand-implicit)"
"(lambda(sym_91 s_92 ctx_93 trigger-id_94)"
"(let-values(((disarmed-s_95)(syntax-disarm$1 s_92)))"
"(let-values(((id_96)(datum->syntax$1 disarmed-s_95 sym_91)))"
"(if(free-id-set-member?(expand-context-stops ctx_93)(expand-context-phase ctx_93) id_96)"
"(let-values()"
"(begin"
"(let-values(((obs_97)(expand-context-observer ctx_93)))"
"(if obs_97"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_93))"
"(let-values()"
"(begin"
"(call-expand-observe obs_97 'enter-prim s_92)"
"(call-expand-observe obs_97 'prim-stop)"
"(call-expand-observe obs_97 'exit-prim s_92)"
"(call-expand-observe obs_97 'return s_92)))"
"(void)))"
"(void)))"
" s_92))"
"(let-values()"
"(let-values(((b_98)"
"(let-values(((id83_100) id_96)"
"((temp84_101)(expand-context-phase ctx_93))"
"((temp85_102) 'ambiguous)"
"((temp86_103) #t))"
"(resolve+shift30.1 temp85_102 #t #f #f #f #f temp86_103 #t #f #f id83_100 temp84_101))))"
"(if(eq? b_98 'ambiguous)"
"(let-values()(raise-ambiguous-error id_96 ctx_93))"
"(let-values()"
"(let-values(((t_104 primitive?_105 insp-of-t_106)"
"(if b_98"
"(let-values(((b87_107) b_98)((ctx88_108) ctx_93)((id89_109) id_96))"
"(lookup15.1 #f #f #f #f b87_107 ctx88_108 id89_109))"
"(values #f #f #f))))"
"(if(transformer? t_104)"
"(let-values()"
"(dispatch-transformer"
" t_104"
" insp-of-t_106"
"(make-explicit sym_91 s_92 disarmed-s_95)"
" id_96"
" ctx_93"
" b_98))"
"(if(expand-context-only-immediate? ctx_93)"
"(let-values()"
"(begin"
"(let-values(((obs_110)(expand-context-observer ctx_93)))"
"(if obs_110"
"(let-values()(let-values()(call-expand-observe obs_110 'exit-check s_92)))"
"(void)))"
" s_92))"
"(if(core-form? t_104)"
"(let-values()"
"(if(if(eq? sym_91 '#%top)"
"(if(eq?(core-form-name t_104) '#%top)(expand-context-in-local-expand? ctx_93) #f)"
" #f)"
"(let-values()(dispatch-implicit-#%top-core-form t_104 s_92 ctx_93))"
"(let-values()"
"(dispatch-core-form t_104(make-explicit sym_91 s_92 disarmed-s_95) ctx_93))))"
"(let-values()"
"(let-values(((tl-id_111)"
"(if(eq? sym_91 '#%top)"
"(if(root-expand-context-top-level-bind-scope ctx_93)"
"(add-scope s_92(root-expand-context-top-level-bind-scope ctx_93))"
" #f)"
" #f)))"
"(let-values(((tl-b_112)"
"(if tl-id_111"
"(let-values(((tl-id90_113) tl-id_111)"
"((temp91_114)(expand-context-phase ctx_93)))"
"(resolve29.1 #f #f #f #f #f #f #f #f tl-id90_113 temp91_114))"
" #f)))"
"(if tl-b_112"
"(let-values()"
"(if(expand-context-to-parsed? ctx_93)"
"(parsed-id2.1 tl-id_111 tl-b_112 #f)"
" tl-id_111))"
"(let-values()"
"(raise-syntax-implicit-error s_92 sym_91 trigger-id_94 ctx_93)))))))))))))))))))"
"(define-values"
"(expand-already-expanded)"
"(lambda(s_115 ctx_116)"
"(let-values(((ae_117)(syntax-e$1 s_115)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_119)(syntax-any-macro-scopes? s_115)))"
"(if or-part_119"
" or-part_119"
"(not"
"(eq?(expand-context-binding-layer ctx_116)(already-expanded-binding-layer ae_117)))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                            \"expanded syntax not in its original lexical context;\\n\""
"                            \" extra bindings or scopes in the current context\")"
"(already-expanded-s ae_117)))"
"(void))"
"(values))))"
"(let-values(((result-s_118)(syntax-track-origin$1(already-expanded-s ae_117) s_115)))"
"(begin"
"(let-values(((obs_120)(expand-context-observer ctx_116)))"
"(if obs_120"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_120 'tag result-s_118)"
"(call-expand-observe obs_120 'opaque-expr result-s_118))))"
"(void)))"
"(if(expand-context-to-parsed? ctx_116)"
"(let-values(((result-s92_121) result-s_118)((ctx93_122) ctx_116))"
"(expand5.1 #f #f result-s92_121 ctx93_122))"
" result-s_118)))))))"
"(define-values"
"(make-explicit)"
"(lambda(sym_123 s_124 disarmed-s_125)"
"(syntax-rearm$1(datum->syntax$1 disarmed-s_125(cons sym_123 disarmed-s_125) s_124 s_124) s_124)))"
"(define-values"
"(dispatch)"
"(lambda(t_126 insp-of-t_127 s_128 id_129 ctx_130 binding_131 primitive?_132)"
"(if(core-form? t_126)"
"(let-values()(dispatch-core-form t_126 s_128 ctx_130))"
"(if(transformer? t_126)"
"(let-values()(dispatch-transformer t_126 insp-of-t_127 s_128 id_129 ctx_130 binding_131))"
"(if(variable? t_126)"
"(let-values()(dispatch-variable t_126 s_128 id_129 ctx_130 binding_131 primitive?_132))"
"          (let-values () (raise-syntax-error$1 #f \"illegal use of syntax\" s_128)))))))"
"(define-values"
"(dispatch-core-form)"
"(lambda(t_133 s_134 ctx_135)"
"(if(expand-context-only-immediate? ctx_135)"
"(let-values()"
"(begin"
"(let-values(((obs_136)(expand-context-observer ctx_135)))"
"(if obs_136(let-values()(let-values()(call-expand-observe obs_136 'exit-check s_134)))(void)))"
" s_134))"
"(if(expand-context-observer ctx_135)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_138)(expand-context-observer ctx_135)))"
"(if obs_138"
"(let-values()(let-values()(call-expand-observe obs_138 'enter-prim s_134)))"
"(void)))"
"(values))))"
"(let-values(((result-s_137)((core-form-expander t_133) s_134 ctx_135)))"
"(begin"
"(let-values(((obs_139)(expand-context-observer ctx_135)))"
"(if obs_139"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_139 'exit-prim result-s_137)"
"(call-expand-observe obs_139 'return result-s_137))))"
"(void)))"
" result-s_137))))"
"(let-values()((core-form-expander t_133) s_134 ctx_135))))))"
"(define-values"
"(dispatch-implicit-#%top-core-form)"
"(lambda(t_140 s_141 ctx_142)"
"(let-values((()"
"(begin"
"(let-values(((obs_144)(expand-context-observer ctx_142)))"
"(if obs_144"
"(let-values()(let-values()(call-expand-observe obs_144 'enter-prim s_141)))"
"(void)))"
"(values))))"
"(let-values(((result-s_143)((core-form-expander t_140) s_141 ctx_142 #t)))"
"(begin"
"(let-values(((obs_145)(expand-context-observer ctx_142)))"
"(if obs_145"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_145 'exit-prim result-s_143)"
"(call-expand-observe obs_145 'return result-s_143))))"
"(void)))"
" result-s_143)))))"
"(define-values"
"(dispatch-transformer)"
"(lambda(t_146 insp-of-t_147 s_148 id_149 ctx_150 binding_151)"
"(if(not-in-this-expand-context? t_146 ctx_150)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_153)(expand-context-observer ctx_150)))"
"(if obs_153"
"(let-values()(let-values()(call-expand-observe obs_153 'enter-macro s_148)))"
"(void)))"
"(values))))"
"(let-values(((adj-s_152)"
"(avoid-current-expand-context(substitute-alternate-id s_148 id_149) t_146 ctx_150)))"
"(begin"
"(let-values(((obs_154)(expand-context-observer ctx_150)))"
"(if obs_154(let-values()(let-values()(call-expand-observe obs_154 'exit-macro s_148)))(void)))"
"(let-values(((adj-s94_155) adj-s_152)((ctx95_156) ctx_150))(expand5.1 #f #f adj-s94_155 ctx95_156))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_159)(expand-context-observer ctx_150)))"
"(if obs_159"
"(let-values()"
"(if(expand-context-only-immediate? ctx_150)"
"(let-values()"
"(begin"
"(call-expand-observe obs_159 'visit s_148)"
"(call-expand-observe obs_159 'resolves id_149)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-s_157 re-ctx_158)"
"(if(1/rename-transformer? t_146)"
"(values s_148 ctx_150)"
"(apply-transformer t_146 insp-of-t_147 s_148 id_149 ctx_150 binding_151))))"
"(begin"
"(let-values(((obs_160)(expand-context-observer ctx_150)))"
"(if obs_160"
"(let-values()"
"(if(expand-context-only-immediate? ctx_150)"
"(let-values()(call-expand-observe obs_160 'return exp-s_157))"
"(void)))"
"(void)))"
"(if(expand-context-just-once? ctx_150)"
"(let-values() exp-s_157)"
"(let-values()"
"(let-values(((exp-s96_162) exp-s_157)"
"((re-ctx97_163) re-ctx_158)"
"((temp98_164)"
"(if(1/rename-transformer? t_146)"
"(syntax-track-origin$1"
"(rename-transformer-target-in-context t_146 ctx_150)"
" id_149"
" id_149)"
" #f)))"
"(expand5.1 temp98_164 #t exp-s96_162 re-ctx97_163)))))))))))"
"(define-values"
"(dispatch-variable)"
"(lambda(t_165 s_166 id_167 ctx_168 binding_169 primitive?_170)"
"(if(expand-context-only-immediate? ctx_168)"
"(let-values()"
"(begin"
"(let-values(((obs_171)(expand-context-observer ctx_168)))"
"(if obs_171(let-values()(let-values()(call-expand-observe obs_171 'exit-check s_166)))(void)))"
" id_167))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_173)(expand-context-observer ctx_168)))"
"(if obs_173"
"(let-values()(let-values()(call-expand-observe obs_173 'variable s_166)))"
"(void)))"
"(values))))"
"(let-values((()(begin(register-variable-referenced-if-local! binding_169)(values))))"
"(let-values(((result-s_172)"
"(let-values(((id99_175) id_167)"
"((t100_176) t_165)"
"((temp101_177)"
"(free-id-set-empty-or-just-module*?(expand-context-stops ctx_168))))"
"(substitute-variable6.1 temp101_177 id99_175 t100_176))))"
"(if(expand-context-to-parsed? ctx_168)"
"(let-values()"
"(let-values(((prop-s_178)(keep-properties-only result-s_172)))"
"(let-values(((insp_179)(syntax-inspector result-s_172)))"
"(if primitive?_170"
"(parsed-primitive-id3.1 prop-s_178 binding_169 insp_179)"
"(parsed-id2.1 prop-s_178 binding_169 insp_179)))))"
"(let-values()"
"(begin"
"(let-values(((obs_180)(expand-context-observer ctx_168)))"
"(if obs_180"
"(let-values()(let-values()(call-expand-observe obs_180 'return result-s_172)))"
"(void)))"
" result-s_172))))))))))"
"(define-values"
"(apply-transformer)"
"(lambda(t_181 insp-of-t_182 s_183 id_184 ctx_185 binding_186)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_199)(expand-context-observer ctx_185)))"
"(if obs_199"
"(let-values()(let-values()(call-expand-observe obs_199 'enter-macro s_183)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_187)(syntax-disarm$1 s_183)))"
"(let-values(((intro-scope_188)(new-scope 'macro)))"
"(let-values(((intro-s_189)(flip-scope disarmed-s_187 intro-scope_188)))"
"(let-values(((use-s_190 use-scopes_191)(maybe-add-use-site-scope intro-s_189 ctx_185 binding_186)))"
"(let-values(((cleaned-s_192)(syntax-remove-taint-dispatch-properties use-s_190)))"
"(let-values(((def-ctx-scopes_193)(box null)))"
"(let-values(((transformed-s_194)"
"(apply-transformer-in-context"
" t_181"
" cleaned-s_192"
" ctx_185"
" insp-of-t_182"
" intro-scope_188"
" use-scopes_191"
" def-ctx-scopes_193"
" id_184)))"
"(let-values(((result-s_195)(flip-scope transformed-s_194 intro-scope_188)))"
"(let-values(((post-s_196)(maybe-add-post-expansion-scope result-s_195 ctx_185)))"
"(let-values(((tracked-s_197)(syntax-track-origin$1 post-s_196 cleaned-s_192 id_184)))"
"(let-values(((rearmed-s_198)"
"(taint-dispatch"
" tracked-s_197"
"(lambda(t-s_200)(syntax-rearm$1 t-s_200 s_183))"
"(expand-context-phase ctx_185))))"
"(begin"
"(let-values(((obs_201)(expand-context-observer ctx_185)))"
"(if obs_201"
"(let-values()"
"(let-values()(call-expand-observe obs_201 'exit-macro rearmed-s_198)))"
"(void)))"
"(values"
" rearmed-s_198"
"(accumulate-def-ctx-scopes ctx_185 def-ctx-scopes_193))))))))))))))))))"
"(define-values"
"(apply-transformer-in-context)"
"(lambda(t_202 cleaned-s_203 ctx_204 insp-of-t_205 intro-scope_206 use-scopes_207 def-ctx-scopes_208 id_209)"
"(let-values((()"
"(begin"
"(let-values(((obs_214)(expand-context-observer ctx_204)))"
"(if obs_214"
"(let-values()(let-values()(call-expand-observe obs_214 'macro-pre-x cleaned-s_203)))"
"(void)))"
"(values))))"
"(let-values(((confine-def-ctx-scopes?_210)"
"(not"
"(let-values(((or-part_215)(expand-context-only-immediate? ctx_204)))"
"(if or-part_215"
" or-part_215"
"(not(free-id-set-empty-or-just-module*?(expand-context-stops ctx_204))))))))"
"(let-values(((accum-ctx_211)"
"(if(if confine-def-ctx-scopes?_210"
"(if(expand-context-def-ctx-scopes ctx_204)"
"(not(null?(unbox(expand-context-def-ctx-scopes ctx_204))))"
" #f)"
" #f)"
"(accumulate-def-ctx-scopes ctx_204(expand-context-def-ctx-scopes ctx_204))"
" ctx_204)))"
"(let-values(((m-ctx_212)"
"(let-values(((v_216) accum-ctx_211))"
"(let-values(((the-struct_217) v_216))"
"(if(expand-context/outer? the-struct_217)"
"(let-values(((current-introduction-scopes102_218)(cons intro-scope_206 use-scopes_207))"
"((def-ctx-scopes103_219)"
"(if confine-def-ctx-scopes?_210"
" def-ctx-scopes_208"
"(expand-context-def-ctx-scopes ctx_204)))"
"((inner104_220)(root-expand-context/outer-inner v_216)))"
"(expand-context/outer1.1"
" inner104_220"
"(root-expand-context/outer-post-expansion-scope the-struct_217)"
"(root-expand-context/outer-use-site-scopes the-struct_217)"
"(root-expand-context/outer-frame-id the-struct_217)"
"(expand-context/outer-context the-struct_217)"
"(expand-context/outer-env the-struct_217)"
"(expand-context/outer-post-expansion-scope-action the-struct_217)"
"(expand-context/outer-scopes the-struct_217)"
" def-ctx-scopes103_219"
"(expand-context/outer-binding-layer the-struct_217)"
"(expand-context/outer-reference-records the-struct_217)"
"(expand-context/outer-only-immediate? the-struct_217)"
"(expand-context/outer-need-eventually-defined the-struct_217)"
" current-introduction-scopes102_218"
"(expand-context/outer-name the-struct_217)))"
"                              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_217))))))"
"(let-values(((transformed-s_213)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" m-ctx_212"
" 1/current-namespace"
"(namespace->namespace-at-phase"
"(expand-context-namespace ctx_204)"
"(add1(expand-context-phase ctx_204)))"
" current-module-code-inspector"
"(let-values(((or-part_221) insp-of-t_205))"
"(if or-part_221 or-part_221(current-module-code-inspector))))"
"(let-values()"
"(call-with-continuation-barrier"
"(lambda()((transformer->procedure t_202) cleaned-s_203)))))))"
"(begin"
"(let-values(((obs_222)(expand-context-observer ctx_204)))"
"(if obs_222"
"(let-values()(let-values()(call-expand-observe obs_222 'macro-post-x transformed-s_213)))"
"(void)))"
"(if(syntax?$1 transformed-s_213)"
"(void)"
"(let-values()"
"(raise-arguments-error"
"(syntax-e$1 id_209)"
"                     \"received value from syntax expander was not syntax\""
"                     \"received\""
" transformed-s_213)))"
" transformed-s_213))))))))"
"(define-values"
"(maybe-add-use-site-scope)"
"(lambda(s_223 ctx_224 binding_225)"
"(if(if(root-expand-context-use-site-scopes ctx_224)"
"(matching-frame?(root-expand-context-frame-id ctx_224)(binding-frame-id binding_225))"
" #f)"
"(let-values()"
"(let-values(((sc_226)(new-scope 'use-site)))"
"(let-values(((b_227)(root-expand-context-use-site-scopes ctx_224)))"
"(begin(set-box! b_227(cons sc_226(unbox b_227)))(values(add-scope s_223 sc_226)(list sc_226))))))"
"(let-values()(values s_223 null)))))"
"(define-values"
"(matching-frame?)"
"(lambda(current-frame-id_228 bind-frame-id_229)"
"(if current-frame-id_228"
"(let-values(((or-part_230)(eq? current-frame-id_228 bind-frame-id_229)))"
"(if or-part_230 or-part_230(eq? current-frame-id_228 'all)))"
" #f)))"
"(define-values"
"(maybe-add-post-expansion-scope)"
"(lambda(s_231 ctx_232)"
"(if(root-expand-context-post-expansion-scope ctx_232)"
"(let-values()"
"((expand-context-post-expansion-scope-action ctx_232) s_231(root-expand-context-post-expansion-scope ctx_232)))"
"(let-values() s_231))))"
"(define-values"
"(accumulate-def-ctx-scopes)"
"(lambda(ctx_233 def-ctx-scopes_234)"
"(if(null?(unbox def-ctx-scopes_234))"
" ctx_233"
"(let-values(((v_235) ctx_233))"
"(let-values(((the-struct_236) v_235))"
"(if(expand-context/outer? the-struct_236)"
"(let-values(((scopes105_237)(append(unbox def-ctx-scopes_234)(expand-context-scopes ctx_233)))"
"((inner106_238)(root-expand-context/outer-inner v_235)))"
"(expand-context/outer1.1"
" inner106_238"
"(root-expand-context/outer-post-expansion-scope the-struct_236)"
"(root-expand-context/outer-use-site-scopes the-struct_236)"
"(root-expand-context/outer-frame-id the-struct_236)"
"(expand-context/outer-context the-struct_236)"
"(expand-context/outer-env the-struct_236)"
"(expand-context/outer-post-expansion-scope-action the-struct_236)"
" scopes105_237"
"(expand-context/outer-def-ctx-scopes the-struct_236)"
"(expand-context/outer-binding-layer the-struct_236)"
"(expand-context/outer-reference-records the-struct_236)"
"(expand-context/outer-only-immediate? the-struct_236)"
"(expand-context/outer-need-eventually-defined the-struct_236)"
"(expand-context/outer-current-introduction-scopes the-struct_236)"
"(expand-context/outer-name the-struct_236)))"
"            (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_236)))))))"
"(define-values"
"(lookup15.1)"
"(lambda(in8_239"
" in10_240"
" out-of-context-as-variable?9_241"
" out-of-context-as-variable?11_242"
" b12_243"
" ctx13_244"
" id14_245)"
"(let-values(((b_246) b12_243))"
"(let-values(((ctx_247) ctx13_244))"
"(let-values(((id_248) id14_245))"
"(let-values(((in-s_249)(if in10_240 in8_239 #f)))"
"(let-values(((out-of-context-as-variable?_250)"
"(if out-of-context-as-variable?11_242 out-of-context-as-variable?9_241 #f)))"
"(let-values()"
"(let-values(((b107_252) b_246)"
"((temp108_253)(expand-context-env ctx_247))"
"((temp109_254)(expand-context-lift-envs ctx_247))"
"((temp110_255)(expand-context-namespace ctx_247))"
"((temp111_256)(expand-context-phase ctx_247))"
"((id112_257) id_248)"
"((in-s113_258) in-s_249)"
"((out-of-context-as-variable?114_259) out-of-context-as-variable?_250))"
"(binding-lookup48.1"
" in-s113_258"
" #t"
" out-of-context-as-variable?114_259"
" #t"
" b107_252"
" temp108_253"
" temp109_254"
" temp110_255"
" temp111_256"
" id112_257))))))))))"
"(define-values"
"(substitute-alternate-id)"
"(lambda(s_286 alternate-id_287)"
"(if(not alternate-id_287)"
"(let-values() s_286)"
"(if(identifier? s_286)"
"(let-values()(syntax-rearm$1(syntax-track-origin$1 alternate-id_287 s_286) s_286))"
"(let-values()"
"(let-values(((disarmed-s_288)(syntax-disarm$1 s_286)))"
"(syntax-rearm$1"
"(syntax-track-origin$1"
"(datum->syntax$1 disarmed-s_288(cons alternate-id_287(cdr(syntax-e$1 disarmed-s_288))) s_286)"
" s_286)"
" s_286)))))))"
"(define-values"
"(register-variable-referenced-if-local!)"
"(lambda(binding_289)"
"(if(if(local-binding? binding_289)(reference-record?(binding-frame-id binding_289)) #f)"
"(let-values()(reference-record-used!(binding-frame-id binding_289)(local-binding-key binding_289)))"
"(void))))"
"(define-values"
"(expand/capture-lifts28.1)"
"(lambda(always-wrap?21_290"
" always-wrap?25_291"
" begin-form?19_292"
" begin-form?23_293"
" expand-lifts?18_294"
" expand-lifts?22_295"
" lift-key20_296"
" lift-key24_297"
" s26_298"
" ctx27_299)"
"(let-values(((s_300) s26_298))"
"(let-values(((ctx_301) ctx27_299))"
"(let-values(((expand-lifts?_302)(if expand-lifts?22_295 expand-lifts?18_294 #f)))"
"(let-values(((begin-form?_303)(if begin-form?23_293 begin-form?19_292 #f)))"
"(let-values(((lift-key_304)(if lift-key24_297 lift-key20_296(generate-lift-key))))"
"(let-values(((always-wrap?_305)(if always-wrap?25_291 always-wrap?21_290 #f)))"
"(let-values()"
"(let-values(((context_306)(expand-context-context ctx_301)))"
"(let-values(((phase_307)(expand-context-phase ctx_301)))"
"(let-values(((local?_308)(not begin-form?_303)))"
"((letrec-values(((loop_309)"
"(lambda(s_310 always-wrap?_311 ctx_312)"
"(let-values(((lift-env_313)(if local?_308(box empty-env) #f)))"
"(let-values(((lift-ctx_314)"
"(let-values(((temp115_320)"
"(if local?_308"
"(make-local-lift"
" lift-env_313"
"(root-expand-context-counter ctx_312))"
"(make-top-level-lift ctx_312)))"
"((temp116_321)"
"(if(not local?_308)"
"(eq? context_306 'module)"
" #f)))"
"(make-lift-context6.1 temp116_321 #t temp115_320))))"
"(let-values(((capture-ctx_315)"
"(let-values(((v_322) ctx_312))"
"(let-values(((the-struct_323) v_322))"
"(if(expand-context/outer? the-struct_323)"
"(let-values(((inner117_324)"
"(let-values(((the-struct_325)"
"(root-expand-context/outer-inner"
" v_322)))"
"(if(expand-context/inner?"
" the-struct_325)"
"(let-values(((lift-key118_326)"
" lift-key_304)"
"((lifts119_327)"
" lift-ctx_314)"
"((lift-envs120_328)"
"(if local?_308"
"(cons"
" lift-env_313"
"(expand-context-lift-envs"
" ctx_312))"
"(expand-context-lift-envs"
" ctx_312)))"
"((module-lifts121_329)"
"(if(let-values(((or-part_330)"
" local?_308))"
"(if or-part_330"
" or-part_330"
"(not"
"(memq"
" context_306"
" '(top-level"
" module)))))"
"(expand-context-module-lifts"
" ctx_312)"
" lift-ctx_314)))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_325)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_325)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_325)"
"(root-expand-context/inner-defined-syms"
" the-struct_325)"
"(root-expand-context/inner-counter"
" the-struct_325)"
" lift-key118_326"
"(expand-context/inner-to-parsed?"
" the-struct_325)"
"(expand-context/inner-phase"
" the-struct_325)"
"(expand-context/inner-namespace"
" the-struct_325)"
"(expand-context/inner-user-env"
" the-struct_325)"
"(expand-context/inner-just-once?"
" the-struct_325)"
"(expand-context/inner-module-begin-k"
" the-struct_325)"
"(expand-context/inner-allow-unbound?"
" the-struct_325)"
"(expand-context/inner-in-local-expand?"
" the-struct_325)"
"(expand-context/inner-stops"
" the-struct_325)"
"(expand-context/inner-declared-submodule-names"
" the-struct_325)"
" lifts119_327"
" lift-envs120_328"
" module-lifts121_329"
"(expand-context/inner-require-lifts"
" the-struct_325)"
"(expand-context/inner-to-module-lifts"
" the-struct_325)"
"(expand-context/inner-requires+provides"
" the-struct_325)"
"(expand-context/inner-observer"
" the-struct_325)"
"(expand-context/inner-for-serializable?"
" the-struct_325)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                       \"expand-context/inner?\""
" the-struct_325)))))"
"(expand-context/outer1.1"
" inner117_324"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_323)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_323)"
"(root-expand-context/outer-frame-id"
" the-struct_323)"
"(expand-context/outer-context the-struct_323)"
"(expand-context/outer-env the-struct_323)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_323)"
"(expand-context/outer-scopes the-struct_323)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_323)"
"(expand-context/outer-binding-layer"
" the-struct_323)"
"(expand-context/outer-reference-records"
" the-struct_323)"
"(expand-context/outer-only-immediate?"
" the-struct_323)"
"(expand-context/outer-need-eventually-defined"
" the-struct_323)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_323)"
"(expand-context/outer-name the-struct_323)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"expand-context/outer?\""
" the-struct_323))))))"
"(let-values(((exp-s_316)"
"(let-values(((s122_331) s_310)"
"((capture-ctx123_332) capture-ctx_315))"
"(expand5.1 #f #f s122_331 capture-ctx123_332))))"
"(let-values(((lifts_317)"
"(get-and-clear-lifts!"
"(expand-context-lifts capture-ctx_315))))"
"(let-values(((with-lifts-s_318)"
"(if(let-values(((or-part_333)(pair? lifts_317)))"
"(if or-part_333 or-part_333 always-wrap?_311))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_312)"
"(let-values()"
"(begin"
"(if expand-lifts?_302"
"(void)"
"(let-values()"
"(error"
"                                                                                   \"internal error: to-parsed mode without expanding lifts\")))"
"(wrap-lifts-as-parsed-let"
" lifts_317"
" exp-s_316"
" s_310"
" ctx_312"
"(lambda(rhs_334 rhs-ctx_335)"
"(loop_309 rhs_334 #f rhs-ctx_335)))))"
"(let-values()"
"(if begin-form?_303"
"(let-values(((lifts124_336) lifts_317)"
"((exp-s125_337) exp-s_316)"
"((s126_338) s_310)"
"((phase127_339) phase_307))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" lifts124_336"
" exp-s125_337"
" s126_338"
" phase127_339))"
"(wrap-lifts-as-let"
" lifts_317"
" exp-s_316"
" s_310"
" phase_307)))))"
"(let-values() exp-s_316))))"
"(if(let-values(((or-part_340)(not expand-lifts?_302)))"
"(if or-part_340"
" or-part_340"
"(let-values(((or-part_341)(null? lifts_317)))"
"(if or-part_341"
" or-part_341"
"(expand-context-to-parsed? ctx_312)))))"
"(let-values() with-lifts-s_318)"
"(let-values()"
"(begin"
"(let-values(((obs_342)"
"(expand-context-observer ctx_312)))"
"(if obs_342"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_342"
" 'lift-loop"
" with-lifts-s_318)))"
"(void)))"
"(loop_309 with-lifts-s_318 #f ctx_312)))))))))))))"
" loop_309)"
" s_300"
" always-wrap?_305"
" ctx_301)))))))))))))"
"(define-values"
"(expand-transformer43.1)"
"(lambda(always-wrap?35_378"
" always-wrap?40_379"
" begin-form?32_380"
" begin-form?37_381"
" context31_382"
" context36_383"
" expand-lifts?33_384"
" expand-lifts?38_385"
" lift-key34_386"
" lift-key39_387"
" s41_388"
" ctx42_389)"
"(let-values(((s_390) s41_388))"
"(let-values(((ctx_391) ctx42_389))"
"(let-values(((context_392)(if context36_383 context31_382 'expression)))"
"(let-values(((begin-form?_393)(if begin-form?37_381 begin-form?32_380 #f)))"
"(let-values(((expand-lifts?_394)(if expand-lifts?38_385 expand-lifts?33_384 #t)))"
"(let-values(((lift-key_395)(if lift-key39_387 lift-key34_386(generate-lift-key))))"
"(let-values(((always-wrap?_396)(if always-wrap?40_379 always-wrap?35_378 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((trans-ctx_397)(context->transformer-context ctx_391 context_392)))"
"(let-values(((s128_399) s_390)"
"((trans-ctx129_400) trans-ctx_397)"
"((expand-lifts?130_401) expand-lifts?_394)"
"((begin-form?131_402) begin-form?_393)"
"((lift-key132_403) lift-key_395)"
"((always-wrap?133_404) always-wrap?_396))"
"(expand/capture-lifts28.1"
" always-wrap?133_404"
" #t"
" begin-form?131_402"
" #t"
" expand-lifts?130_401"
" #t"
" lift-key132_403"
" #t"
" s128_399"
" trans-ctx129_400))))))))))))))"
"(define-values"
"(context->transformer-context)"
"(let-values(((context->transformer-context49_446)"
"(lambda(ctx48_447 context46_448 context47_449)"
"(let-values(((ctx_450) ctx48_447))"
"(let-values(((context_451)(if context47_449 context46_448 'expression)))"
"(let-values()"
"(let-values(((phase_452)(add1(expand-context-phase ctx_450))))"
"(let-values(((ns_453)"
"(namespace->namespace-at-phase(expand-context-namespace ctx_450) phase_452)))"
"(begin"
"(namespace-visit-available-modules! ns_453 phase_452)"
"(let-values(((v_454) ctx_450))"
"(let-values(((the-struct_455) v_454))"
"(if(expand-context/outer? the-struct_455)"
"(let-values(((context134_456) context_451)"
"((scopes135_457) null)"
"((env136_458) empty-env)"
"((only-immediate?137_459) #f)"
"((def-ctx-scopes138_460) #f)"
"((post-expansion-scope139_461) #f)"
"((inner140_462)"
"(let-values(((the-struct_463)"
"(root-expand-context/outer-inner v_454)))"
"(if(expand-context/inner? the-struct_463)"
"(let-values(((phase141_464) phase_452)"
"((namespace142_465) ns_453))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_463)"
"(root-expand-context/inner-top-level-bind-scope the-struct_463)"
"(root-expand-context/inner-all-scopes-stx the-struct_463)"
"(root-expand-context/inner-defined-syms the-struct_463)"
"(root-expand-context/inner-counter the-struct_463)"
"(root-expand-context/inner-lift-key the-struct_463)"
"(expand-context/inner-to-parsed? the-struct_463)"
" phase141_464"
" namespace142_465"
"(expand-context/inner-user-env the-struct_463)"
"(expand-context/inner-just-once? the-struct_463)"
"(expand-context/inner-module-begin-k the-struct_463)"
"(expand-context/inner-allow-unbound? the-struct_463)"
"(expand-context/inner-in-local-expand? the-struct_463)"
"(expand-context/inner-stops the-struct_463)"
"(expand-context/inner-declared-submodule-names the-struct_463)"
"(expand-context/inner-lifts the-struct_463)"
"(expand-context/inner-lift-envs the-struct_463)"
"(expand-context/inner-module-lifts the-struct_463)"
"(expand-context/inner-require-lifts the-struct_463)"
"(expand-context/inner-to-module-lifts the-struct_463)"
"(expand-context/inner-requires+provides the-struct_463)"
"(expand-context/inner-observer the-struct_463)"
"(expand-context/inner-for-serializable? the-struct_463)))"
"(raise-argument-error"
" 'struct-copy"
"                                                       \"expand-context/inner?\""
" the-struct_463)))))"
"(expand-context/outer1.1"
" inner140_462"
" post-expansion-scope139_461"
"(root-expand-context/outer-use-site-scopes the-struct_455)"
"(root-expand-context/outer-frame-id the-struct_455)"
" context134_456"
" env136_458"
"(expand-context/outer-post-expansion-scope-action the-struct_455)"
" scopes135_457"
" def-ctx-scopes138_460"
"(expand-context/outer-binding-layer the-struct_455)"
"(expand-context/outer-reference-records the-struct_455)"
" only-immediate?137_459"
"(expand-context/outer-need-eventually-defined the-struct_455)"
"(expand-context/outer-current-introduction-scopes the-struct_455)"
"(expand-context/outer-name the-struct_455)))"
"(raise-argument-error"
" 'struct-copy"
"                                     \"expand-context/outer?\""
" the-struct_455)))))))))))))"
"(case-lambda"
"((ctx_466)(context->transformer-context49_446 ctx_466 #f #f))"
"((ctx_467 context46_468)(context->transformer-context49_446 ctx_467 context46_468 #t)))))"
"(define-values"
"(expand+eval-for-syntaxes-binding)"
"(lambda(rhs_469 ids_470 ctx_471)"
"(let-values(((exp-rhs_472)"
"(let-values(((rhs143_475) rhs_469)((temp144_476)(as-named-context ctx_471 ids_470)))"
"(expand-transformer43.1 #f #f #f #f #f #f #f #f #f #f rhs143_475 temp144_476))))"
"(let-values(((phase_473)(add1(expand-context-phase ctx_471))))"
"(let-values(((parsed-rhs_474)"
"(if(expand-context-to-parsed? ctx_471)"
" exp-rhs_472"
"(let-values(((exp-rhs145_477) exp-rhs_472)"
"((temp146_478)(context->transformer-context(as-to-parsed-context ctx_471))))"
"(expand5.1 #f #f exp-rhs145_477 temp146_478)))))"
"(values"
" exp-rhs_472"
" parsed-rhs_474"
"(eval-for-bindings"
" ids_470"
" parsed-rhs_474"
" phase_473"
"(namespace->namespace-at-phase(expand-context-namespace ctx_471) phase_473)"
" ctx_471)))))))"
"(define-values"
"(eval-for-syntaxes-binding)"
"(lambda(rhs_479 ids_480 ctx_481)"
"(let-values(((exp-rhs_482 parsed-rhs_483 vals_484)(expand+eval-for-syntaxes-binding rhs_479 ids_480 ctx_481)))"
" vals_484)))"
"(define-values"
"(eval-for-bindings)"
"(lambda(ids_485 p_486 phase_487 ns_488 ctx_489)"
"(let-values(((compiled_490)"
"(compile-single"
" p_486"
"(let-values(((ns147_493) ns_488)((phase148_494) phase_487))"
"(make-compile-context14.1 #f #f #f #f #f #f ns147_493 #t phase148_494 #t #f #f)))))"
"(let-values(((vals_491)"
"(call-with-values"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" ctx_489"
" 1/current-namespace"
" ns_488"
" eval-jit-enabled"
" #f)"
"(let-values()(eval-single-top compiled_490 ns_488))))"
" list)))"
"(begin"
"(if(=(length vals_491)(length ids_485))"
"(void)"
"(let-values()"
"              (error \"wrong number of results (\" (length vals_491) \"vs.\" (length ids_485) \")\" \"from\" p_486)))"
" vals_491)))))"
"(define-values(keep-properties-only)(lambda(s_495)(datum->syntax$1 #f 'props s_495 s_495)))"
"(define-values"
"(keep-as-needed55.1)"
"(lambda(for-track?51_496 for-track?52_497 ctx53_498 s54_499)"
"(let-values(((ctx_500) ctx53_498))"
"(let-values(((s_501) s54_499))"
"(let-values(((for-track?_502)(if for-track?52_497 for-track?51_496 #f)))"
"(let-values()"
"(let-values(((d_503)(syntax-e$1 s_501)))"
"(let-values(((keep-e_504)"
"(if(symbol? d_503)"
"(let-values() d_503)"
"(if(if(pair? d_503)(identifier?(car d_503)) #f)"
"(let-values()(syntax-e$1(car d_503)))"
"(let-values() #f)))))"
"(if(expand-context-to-parsed? ctx_500)"
"(let-values()(datum->syntax$1 #f keep-e_504 s_501 s_501))"
"(let-values()"
"(syntax-rearm$1(datum->syntax$1(syntax-disarm$1 s_501) keep-e_504 s_501 s_501) s_501)))))))))))"
"(define-values"
"(rebuild62.1)"
"(lambda(track?58_522 track?59_523 orig-s60_524 new61_525)"
"(let-values(((orig-s_526) orig-s60_524))"
"(let-values(((new_527) new61_525))"
"(let-values(((track?_528)(if track?59_523 track?58_522 #t)))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 orig-s_526) new_527 orig-s_526(if track?_528 orig-s_526 #f))"
" orig-s_526)))))))"
"(define-values"
"(attach-disappeared-transformer-bindings)"
"(lambda(s_546 trans-idss_547)"
"(if(null? trans-idss_547)"
"(let-values() s_546)"
"(let-values()"
"(syntax-property$1"
" s_546"
" 'disappeared-binding"
"(append"
"(apply append trans-idss_547)"
"(let-values(((or-part_548)(syntax-property$1 s_546 'disappeared-binding)))"
"(if or-part_548 or-part_548 null))))))))"
"(define-values"
"(increment-binding-layer)"
"(lambda(ids_549 ctx_550 layer-val_551)"
"(if((letrec-values(((loop_552)"
"(lambda(ids_553)"
"(let-values(((or-part_554)(identifier? ids_553)))"
"(if or-part_554"
" or-part_554"
"(if(pair? ids_553)"
"(let-values(((or-part_555)(loop_552(car ids_553))))"
"(if or-part_555 or-part_555(loop_552(cdr ids_553))))"
" #f))))))"
" loop_552)"
" ids_549)"
" layer-val_551"
"(expand-context-binding-layer ctx_550))))"
"(define-values"
"(wrap-lifts-as-parsed-let)"
"(lambda(lifts_556 exp-s_557 s_558 ctx_559 parse-rhs_560)"
"(let-values(((idss+keyss+rhss_561)(get-lifts-as-lists lifts_556)))"
"((letrec-values(((lets-loop_562)"
"(lambda(idss+keyss+rhss_563 rhs-ctx_564)"
"(if(null? idss+keyss+rhss_563)"
"(let-values() exp-s_557)"
"(let-values()"
"(let-values(((ids_565)(caar idss+keyss+rhss_563)))"
"(let-values(((keys_566)(cadar idss+keyss+rhss_563)))"
"(let-values(((rhs_567)(caddar idss+keyss+rhss_563)))"
"(let-values(((exp-rhs_568)(parse-rhs_560 rhs_567 rhs-ctx_564)))"
"(parsed-let-values17.1"
" s_558"
"(list ids_565)"
"(list(list keys_566 exp-rhs_568))"
"(list"
"(lets-loop_562"
"(cdr idss+keyss+rhss_563)"
"(let-values(((v_569) rhs-ctx_564))"
"(let-values(((the-struct_570) v_569))"
"(if(expand-context/outer? the-struct_570)"
"(let-values(((env149_571)"
"(let-values(((lst_573) ids_565)((lst_574) keys_566))"
"(begin"
"(if(list? lst_573)"
"(void)"
"(let-values()(in-list lst_573)))"
"(if(list? lst_574)"
"(void)"
"(let-values()(in-list lst_574)))"
"((letrec-values(((for-loop_575)"
"(lambda(env_576 lst_577 lst_578)"
"(if(if(pair? lst_577)"
"(pair? lst_578)"
" #f)"
"(let-values(((id_579)"
"(unsafe-car"
" lst_577))"
"((key_580)"
"(unsafe-car"
" lst_578)))"
"(let-values(((env_581)"
"(let-values(((env_582)"
" env_576))"
"(let-values(((env_583)"
"(let-values()"
"(env-extend"
" env_582"
" key_580"
"(local-variable1.1"
" id_579)))))"
"(values"
" env_583)))))"
"(for-loop_575"
" env_581"
"(unsafe-cdr lst_577)"
"(unsafe-cdr lst_578))))"
" env_576))))"
" for-loop_575)"
"(expand-context-env rhs-ctx_564)"
" lst_573"
" lst_574))))"
"((inner150_572)(root-expand-context/outer-inner v_569)))"
"(expand-context/outer1.1"
" inner150_572"
"(root-expand-context/outer-post-expansion-scope the-struct_570)"
"(root-expand-context/outer-use-site-scopes the-struct_570)"
"(root-expand-context/outer-frame-id the-struct_570)"
"(expand-context/outer-context the-struct_570)"
" env149_571"
"(expand-context/outer-post-expansion-scope-action the-struct_570)"
"(expand-context/outer-scopes the-struct_570)"
"(expand-context/outer-def-ctx-scopes the-struct_570)"
"(expand-context/outer-binding-layer the-struct_570)"
"(expand-context/outer-reference-records the-struct_570)"
"(expand-context/outer-only-immediate? the-struct_570)"
"(expand-context/outer-need-eventually-defined the-struct_570)"
"(expand-context/outer-current-introduction-scopes the-struct_570)"
"(expand-context/outer-name the-struct_570)))"
"(raise-argument-error"
" 'struct-copy"
"                                                \"expand-context/outer?\""
" the-struct_570))))))))))))))))"
" lets-loop_562)"
" idss+keyss+rhss_561"
" ctx_559))))"
"(define-values"
"(rename-transformer-target-in-context)"
"(lambda(t_584 ctx_585)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) current-expand-context ctx_585)"
"(let-values()(1/rename-transformer-target t_584)))))"
"(void)"
"(void)"
"(define-values"
"(stop-ids->all-stop-ids)"
"(lambda(stop-ids_1 phase_2)"
"(if(null? stop-ids_1)"
"(let-values() stop-ids_1)"
"(let-values()"
"(let-values(((p-core-stx_3)(syntax-shift-phase-level$1 core-stx phase_2)))"
"(if(if(= 1(length stop-ids_1))"
"(free-identifier=?$1(car stop-ids_1)(datum->syntax$1 p-core-stx_3 'module*) phase_2 phase_2)"
" #f)"
"(let-values() stop-ids_1)"
"(let-values()"
"(append"
" stop-ids_1"
"(alt-reverse"
"(let-values(((lst_4) auto-stop-syms))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((sym_8)(unsafe-car lst_7)))"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1 p-core-stx_3 sym_8))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(for-loop_5 fold-var_9(unsafe-cdr lst_7))))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4))))))))))))"
"(define-values"
"(auto-stop-syms)"
" '(begin"
" quote"
" set!"
" lambda"
" case-lambda"
" let-values"
" letrec-values"
" if"
" begin0"
" with-continuation-mark"
" letrec-syntaxes+values"
" #%app"
" #%expression"
" #%top"
" #%variable-reference))"
"(void)"
"(void)"
"(define-values"
"(struct:internal-definition-context"
" internal-definition-context1.1"
" 1/internal-definition-context?"
" internal-definition-context-frame-id"
" internal-definition-context-scope"
" internal-definition-context-add-scope?"
" internal-definition-context-env-mixins)"
"(let-values(((struct:_6 make-_7 ?_8 -ref_9 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'internal-definition-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'internal-definition-context)))))"
"(values"
" struct:_6"
" make-_7"
" ?_8"
"(make-struct-field-accessor -ref_9 0 'frame-id)"
"(make-struct-field-accessor -ref_9 1 'scope)"
"(make-struct-field-accessor -ref_9 2 'add-scope?)"
"(make-struct-field-accessor -ref_9 3 'env-mixins))))"
"(define-values"
"(struct:env-mixin env-mixin2.1 env-mixin? env-mixin-id env-mixin-sym env-mixin-value env-mixin-cache)"
"(let-values(((struct:_41 make-_42 ?_43 -ref_44 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type 'env-mixin #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'env-mixin)))))"
"(values"
" struct:_41"
" make-_42"
" ?_43"
"(make-struct-field-accessor -ref_44 0 'id)"
"(make-struct-field-accessor -ref_44 1 'sym)"
"(make-struct-field-accessor -ref_44 2 'value)"
"(make-struct-field-accessor -ref_44 3 'cache))))"
"(define-values"
"(1/syntax-local-make-definition-context)"
"(let-values(((syntax-local-make-definition-context7_76)"
"(lambda(parent-ctx3_77 add-scope?4_78 parent-ctx5_79 add-scope?6_80)"
"(let-values(((parent-ctx_81)(if parent-ctx5_79 parent-ctx3_77 #f)))"
"(let-values(((add-scope?_82)(if add-scope?6_80 add-scope?4_78 #t)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_87)(not parent-ctx_81)))"
"(if or-part_87 or-part_87(1/internal-definition-context? parent-ctx_81)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-make-definition-context"
"                                             \"(or/c #f internal-definition-context?)\""
" parent-ctx_81)))"
"(values))))"
"(let-values(((ctx_83)"
"(let-values(((temp38_88) 'syntax-local-make-definition-context))"
"(get-current-expand-context15.1 #f #f temp38_88 #t))))"
"(let-values(((frame-id_84)"
"(let-values(((or-part_89)(root-expand-context-frame-id ctx_83)))"
"(if or-part_89"
" or-part_89"
"(let-values(((or-part_90)"
"(if parent-ctx_81"
"(internal-definition-context-frame-id parent-ctx_81)"
" #f)))"
"(if or-part_90 or-part_90(gensym)))))))"
"(let-values(((sc_85)(new-scope 'intdef)))"
"(let-values(((def-ctx-scopes_86)(expand-context-def-ctx-scopes ctx_83)))"
"(begin"
"(if def-ctx-scopes_86"
"(void)"
"(let-values()"
"                                        (error \"internal error: no box to accumulate definition-context scopes\")))"
"(set-box! def-ctx-scopes_86(cons sc_85(unbox def-ctx-scopes_86)))"
"(internal-definition-context1.1"
" frame-id_84"
" sc_85"
" add-scope?_82"
"(box null))))))))))))))"
"(case-lambda"
"(()(syntax-local-make-definition-context7_76 #f #f #f #f))"
"((parent-ctx_91 add-scope?4_92)(syntax-local-make-definition-context7_76 parent-ctx_91 add-scope?4_92 #t #t))"
"((parent-ctx3_93)(syntax-local-make-definition-context7_76 parent-ctx3_93 #f #t #f)))))"
"(define-values"
"(1/syntax-local-bind-syntaxes)"
"(lambda(ids_94 s_95 intdef_96)"
"(let-values((()"
"(begin"
"(if(if(list? ids_94)(andmap2 identifier? ids_94) #f)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(listof identifier?)\" ids_94)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_104)(not s_95)))(if or-part_104 or-part_104(syntax?$1 s_95)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(or/c syntax? #f)\" s_95)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/internal-definition-context? intdef_96)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                             \"internal-definition-context?\""
" intdef_96)))"
"(values))))"
"(let-values(((ctx_97)"
"(let-values(((temp39_105) 'local-expand))"
"(get-current-expand-context15.1 #f #f temp39_105 #t))))"
"(let-values((()"
"(begin"
"(let-values(((obs_106)(expand-context-observer ctx_97)))"
"(if obs_106"
"(let-values()(let-values()(call-expand-observe obs_106 'local-bind ids_94)))"
"(void)))"
"(values))))"
"(let-values(((phase_98)(expand-context-phase ctx_97)))"
"(let-values(((intdef-env_99)(add-intdef-bindings(expand-context-env ctx_97) intdef_96)))"
"(let-values(((intdef-ids_100)"
"(alt-reverse"
"(let-values(((lst_107) ids_94))"
"(begin"
"(if(list? lst_107)(void)(let-values()(in-list lst_107)))"
"((letrec-values(((for-loop_108)"
"(lambda(fold-var_109 lst_110)"
"(if(pair? lst_110)"
"(let-values(((id_111)(unsafe-car lst_110)))"
"(let-values(((fold-var_112)"
"(let-values(((fold-var_113) fold-var_109))"
"(let-values(((fold-var_114)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((pre-id_115)"
"(remove-use-site-scopes"
"(flip-introduction-scopes"
" id_111"
" ctx_97)"
" ctx_97)))"
"(let-values(((pre-id40_117)"
" pre-id_115)"
"((intdef41_118)"
" intdef_96)"
"((temp42_119)"
" #t))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp42_119"
" #t"
" pre-id40_117"
" intdef41_118))))"
" fold-var_113))))"
"(values fold-var_114)))))"
"(for-loop_108 fold-var_112(unsafe-cdr lst_110))))"
" fold-var_109))))"
" for-loop_108)"
" null"
" lst_107))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_120)(expand-context-observer ctx_97)))"
"(if obs_120"
"(let-values()"
"(let-values()(call-expand-observe obs_120 'rename-list intdef-ids_100)))"
"(void)))"
"(values))))"
"(let-values(((syms_101)"
"(alt-reverse"
"(let-values(((lst_121) intdef-ids_100))"
"(begin"
"(if(list? lst_121)(void)(let-values()(in-list lst_121)))"
"((letrec-values(((for-loop_122)"
"(lambda(fold-var_123 lst_124)"
"(if(pair? lst_124)"
"(let-values(((intdef-id_125)(unsafe-car lst_124)))"
"(let-values(((fold-var_126)"
"(let-values(((fold-var_127)"
" fold-var_123))"
"(let-values(((fold-var_128)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((intdef-id43_130)"
" intdef-id_125)"
"((phase44_131)"
" phase_98)"
"((temp45_132)"
"(root-expand-context-counter"
" ctx_97))"
"((temp46_133)"
"(internal-definition-context-frame-id"
" intdef_96)))"
"(add-local-binding!35.1"
" temp46_133"
" #t"
" #f"
" #f"
" intdef-id43_130"
" phase44_131"
" temp45_132)))"
" fold-var_127))))"
"(values fold-var_128)))))"
"(for-loop_122 fold-var_126(unsafe-cdr lst_124))))"
" fold-var_123))))"
" for-loop_122)"
" null"
" lst_121))))))"
"(let-values(((vals_102)"
"(if s_95"
"(let-values()"
"(let-values(((input-s_134)"
"(flip-introduction-scopes"
"(let-values(((s47_137) s_95)"
"((intdef48_138) intdef_96)"
"((temp49_139) #t))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp49_139"
" #t"
" s47_137"
" intdef48_138))"
" ctx_97)))"
"(let-values(((tmp-env_135)"
"(let-values(((lst_140) syms_101))"
"(begin"
"(if(list? lst_140)"
"(void)"
"(let-values()(in-list lst_140)))"
"((letrec-values(((for-loop_141)"
"(lambda(env_142 lst_143)"
"(if(pair? lst_143)"
"(let-values(((sym_144)"
"(unsafe-car lst_143)))"
"(let-values(((env_145)"
"(let-values(((env_146)"
" env_142))"
"(let-values(((env_147)"
"(let-values()"
"(hash-set"
" env_146"
" sym_144"
" variable))))"
"(values"
" env_147)))))"
"(for-loop_141"
" env_145"
"(unsafe-cdr lst_143))))"
" env_142))))"
" for-loop_141)"
" intdef-env_99"
" lst_140)))))"
"(eval-for-syntaxes-binding"
" input-s_134"
" ids_94"
"(let-values(((...finition-context.rkt:85:33_148)"
" make-local-expand-context35.1)"
"((temp50_149)"
"(let-values(((v_152) ctx_97))"
"(let-values(((the-struct_153) v_152))"
"(if(expand-context/outer? the-struct_153)"
"(let-values(((env53_154) tmp-env_135)"
"((inner54_155)"
"(root-expand-context/outer-inner"
" v_152)))"
"(expand-context/outer1.1"
" inner54_155"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_153)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_153)"
"(root-expand-context/outer-frame-id"
" the-struct_153)"
"(expand-context/outer-context the-struct_153)"
" env53_154"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_153)"
"(expand-context/outer-scopes the-struct_153)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_153)"
"(expand-context/outer-binding-layer"
" the-struct_153)"
"(expand-context/outer-reference-records"
" the-struct_153)"
"(expand-context/outer-only-immediate?"
" the-struct_153)"
"(expand-context/outer-need-eventually-defined"
" the-struct_153)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_153)"
"(expand-context/outer-name the-struct_153)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                    \"expand-context/outer?\""
" the-struct_153)))))"
"((temp51_150) 'expression)"
"((intdef52_151) intdef_96))"
"(make-local-expand-context33.1"
" temp51_150"
" intdef52_151"
" #f"
" #f"
" #f"
" #f"
" temp50_149))))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_156) ids_94))"
"(begin"
"(if(list? lst_156)(void)(let-values()(in-list lst_156)))"
"((letrec-values(((for-loop_157)"
"(lambda(fold-var_158 lst_159)"
"(if(pair? lst_159)"
"(let-values(((id_160)(unsafe-car lst_159)))"
"(let-values(((fold-var_161)"
"(let-values(((fold-var_162)"
" fold-var_158))"
"(let-values(((fold-var_163)"
"(let-values()"
"(cons"
"(let-values()"
" variable)"
" fold-var_162))))"
"(values fold-var_163)))))"
"(for-loop_157"
" fold-var_161"
"(unsafe-cdr lst_159))))"
" fold-var_158))))"
" for-loop_157)"
" null"
" lst_156))))))))"
"(let-values(((env-mixins_103)(internal-definition-context-env-mixins intdef_96)))"
"(begin"
"(set-box!"
" env-mixins_103"
"(append"
"(alt-reverse"
"(let-values(((lst_164) intdef-ids_100)((lst_165) syms_101)((lst_166) vals_102))"
"(begin"
"(if(list? lst_164)(void)(let-values()(in-list lst_164)))"
"(if(list? lst_165)(void)(let-values()(in-list lst_165)))"
"(if(list? lst_166)(void)(let-values()(in-list lst_166)))"
"((letrec-values(((for-loop_167)"
"(lambda(fold-var_168 lst_169 lst_170 lst_171)"
"(if(if(pair? lst_169)"
"(if(pair? lst_170)(pair? lst_171) #f)"
" #f)"
"(let-values(((intdef-id_172)(unsafe-car lst_169))"
"((sym_173)(unsafe-car lst_170))"
"((val_174)(unsafe-car lst_171)))"
"(let-values(((fold-var_175)"
"(let-values(((fold-var_176) fold-var_168))"
"(let-values(((fold-var_177)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_174"
" intdef-id_172"
" phase_98)"
"(env-mixin2.1"
" intdef-id_172"
" sym_173"
" val_174"
"(make-weak-hasheq))))"
" fold-var_176))))"
"(values fold-var_177)))))"
"(for-loop_167"
" fold-var_175"
"(unsafe-cdr lst_169)"
"(unsafe-cdr lst_170)"
"(unsafe-cdr lst_171))))"
" fold-var_168))))"
" for-loop_167)"
" null"
" lst_164"
" lst_165"
" lst_166))))"
"(unbox env-mixins_103)))"
"(let-values(((obs_178)(expand-context-observer ctx_97)))"
"(if obs_178"
"(let-values()(let-values()(call-expand-observe obs_178 'exit-local-bind)))"
"(void))))))))))))))))))"
"(define-values"
"(1/internal-definition-context-binding-identifiers)"
"(lambda(intdef_179)"
"(begin"
"(if(1/internal-definition-context? intdef_179)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-binding-identifiers"
"           \"internal-definition-context?\""
" intdef_179)))"
"(alt-reverse"
"(let-values(((lst_180)(unbox(internal-definition-context-env-mixins intdef_179))))"
"(begin"
"(if(list? lst_180)(void)(let-values()(in-list lst_180)))"
"((letrec-values(((for-loop_181)"
"(lambda(fold-var_182 lst_183)"
"(if(pair? lst_183)"
"(let-values(((env-mixin_184)(unsafe-car lst_183)))"
"(let-values(((fold-var_185)"
"(let-values(((fold-var_186) fold-var_182))"
"(let-values(((fold-var_187)"
"(let-values()"
"(cons"
"(let-values()(env-mixin-id env-mixin_184))"
" fold-var_186))))"
"(values fold-var_187)))))"
"(for-loop_181 fold-var_185(unsafe-cdr lst_183))))"
" fold-var_182))))"
" for-loop_181)"
" null"
" lst_180)))))))"
"(define-values"
"(1/internal-definition-context-introduce)"
"(let-values(((internal-definition-context-introduce13_188)"
"(lambda(intdef11_189 s12_190 mode9_191 mode10_192)"
"(let-values(((intdef_193) intdef11_189))"
"(let-values(((s_194) s12_190))"
"(let-values(((mode_195)(if mode10_192 mode9_191 'flip)))"
"(let-values()"
"(begin"
"(if(1/internal-definition-context? intdef_193)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                 \"internal-definition-context?\""
" intdef_193)))"
"(if(syntax?$1 s_194)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'internal-definition-context-introduce \"syntax?\" s_194)))"
"(let-values(((s55_197) s_194)"
"((intdef56_198) intdef_193)"
"((temp57_199)"
"(let-values(((tmp_200) mode_195))"
"(if(equal? tmp_200 'add)"
"(let-values() add-scope)"
"(if(equal? tmp_200 'remove)"
"(let-values() remove-scope)"
"(if(equal? tmp_200 'flip)"
"(let-values() flip-scope)"
"(let-values()"
"(raise-argument-error"
" 1/internal-definition-context-introduce"
"                                                     \"(or/c 'add 'remove 'flip)\""
" mode_195))))))))"
"(add-intdef-scopes21.1 temp57_199 #t #f #f s55_197 intdef56_198))))))))))"
"(case-lambda"
"((intdef_201 s_202)(internal-definition-context-introduce13_188 intdef_201 s_202 #f #f))"
"((intdef_203 s_204 mode9_205)(internal-definition-context-introduce13_188 intdef_203 s_204 mode9_205 #t)))))"
"(define-values"
"(1/internal-definition-context-seal)"
"(lambda(intdef_206)"
"(begin"
"(if(1/internal-definition-context? intdef_206)"
"(void)"
"(let-values()"
"          (raise-argument-error 'internal-definition-context-seal \"internal-definition-context?\" intdef_206)))"
"(void))))"
"(define-values"
"(1/identifier-remove-from-definition-context)"
"(lambda(id_207 intdef_208)"
"(begin"
"(if(identifier? id_207)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-remove-from-definition-context \"identifier?\" id_207)))"
"(if(let-values(((or-part_209)(1/internal-definition-context? intdef_208)))"
"(if or-part_209 or-part_209(if(list? intdef_208)(andmap2 1/internal-definition-context? intdef_208) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-remove-from-definition-context"
"           \"(or/c internal-definition-context? (listof internal-definition-context?))\""
" intdef_208)))"
"(let-values(((pos->vals_210 pos-next_211 init_212 pos-cont?_213 val-cont?_214 all-cont?_215)"
"(make-sequence '(intdef)(in-intdefs intdef_208))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_216)"
"(lambda(id_217 pos_218)"
"(if(if pos-cont?_213(pos-cont?_213 pos_218) #t)"
"(let-values(((intdef_219)(pos->vals_210 pos_218)))"
"(if(if val-cont?_214(val-cont?_214 intdef_219) #t)"
"(let-values(((id_220)"
"(let-values(((id_221) id_217))"
"(let-values(((id_222)"
"(let-values()"
"(1/internal-definition-context-introduce"
" intdef_219"
" id_221"
" 'remove))))"
"(values id_222)))))"
"(if(if all-cont?_215(all-cont?_215 pos_218 intdef_219) #t)"
"(for-loop_216 id_220(pos-next_211 pos_218))"
" id_220))"
" id_217))"
" id_217))))"
" for-loop_216)"
" id_207"
" init_212))))))"
"(define-values"
"(in-intdefs)"
"(lambda(intdefs_223)"
"(if(not intdefs_223)"
"(let-values()(in-list null))"
"(if(list? intdefs_223)"
"(let-values()(in-list(alt-reverse intdefs_223)))"
"(let-values()(in-value intdefs_223))))))"
"(define-values"
"(add-intdef-bindings)"
"(lambda(env_224 intdefs_225)"
"(let-values(((pos->vals_226 pos-next_227 init_228 pos-cont?_229 val-cont?_230 all-cont?_231)"
"(make-sequence '(intdef)(in-intdefs intdefs_225))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_232)"
"(lambda(env_233 pos_234)"
"(if(if pos-cont?_229(pos-cont?_229 pos_234) #t)"
"(let-values(((intdef_235)(pos->vals_226 pos_234)))"
"(if(if val-cont?_230(val-cont?_230 intdef_235) #t)"
"(let-values(((env_236)"
"(let-values(((env_237) env_233))"
"(let-values(((env_238)"
"(let-values()"
"(let-values(((env-mixins_239)"
"(unbox"
"(internal-definition-context-env-mixins"
" intdef_235))))"
"((letrec-values(((loop_240)"
"(lambda(env_241 env-mixins_242)"
"(if(null? env-mixins_242)"
"(let-values() env_241)"
"(let-values()"
"(let-values(((env-mixin_243)"
"(car"
" env-mixins_242)))"
"(let-values(((or-part_244)"
"(hash-ref"
"(env-mixin-cache"
" env-mixin_243)"
" env_241"
" #f)))"
"(if or-part_244"
" or-part_244"
"(let-values(((new-env_245)"
"(env-extend"
"(loop_240"
" env_241"
"(cdr"
" env-mixins_242))"
"(env-mixin-sym"
" env-mixin_243)"
"(env-mixin-value"
" env-mixin_243))))"
"(begin"
"(hash-set!"
"(env-mixin-cache"
" env-mixin_243)"
" env_241"
" new-env_245)"
" new-env_245))))))))))"
" loop_240)"
" env_237"
" env-mixins_239)))))"
"(values env_238)))))"
"(if(if all-cont?_231(all-cont?_231 pos_234 intdef_235) #t)"
"(for-loop_232 env_236(pos-next_227 pos_234))"
" env_236))"
" env_233))"
" env_233))))"
" for-loop_232)"
" env_224"
" init_228)))))"
"(define-values"
"(add-intdef-scopes21.1)"
"(lambda(action16_246 action18_247 always?15_248 always?17_249 s19_250 intdefs20_251)"
"(let-values(((s_252) s19_250))"
"(let-values(((intdefs_253) intdefs20_251))"
"(let-values(((always?_254)(if always?17_249 always?15_248 #f)))"
"(let-values(((action_255)(if action18_247 action16_246 add-scope)))"
"(let-values()"
"(let-values(((pos->vals_256 pos-next_257 init_258 pos-cont?_259 val-cont?_260 all-cont?_261)"
"(make-sequence '(intdef)(in-intdefs intdefs_253))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_262)"
"(lambda(s_263 pos_264)"
"(if(if pos-cont?_259(pos-cont?_259 pos_264) #t)"
"(let-values(((intdef_265)(pos->vals_256 pos_264)))"
"(if(if val-cont?_260(val-cont?_260 intdef_265) #t)"
"(let-values(((s_266)"
"(let-values(((s_267) s_263))"
"(if(let-values(((or-part_268) always?_254))"
"(if or-part_268"
" or-part_268"
"(internal-definition-context-add-scope?"
" intdef_265)))"
"(let-values(((s_269) s_267))"
"(let-values(((s_270)"
"(let-values()"
"(action_255"
" s_269"
"(internal-definition-context-scope"
" intdef_265)))))"
"(values s_270)))"
" s_267))))"
"(if(if all-cont?_261(all-cont?_261 pos_264 intdef_265) #t)"
"(for-loop_262 s_266(pos-next_257 pos_264))"
" s_266))"
" s_263))"
" s_263))))"
" for-loop_262)"
" s_252"
" init_258))))))))))"
"(define-values"
"(lifted/1.1$8 lifted/2.1$8 lifted/3.1$7 lifted/4.1$7 lifted/5.1$7)"
"(make-struct-type"
" 'make-local-expand-context"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'make-local-expand-context(case-lambda((self_294 ctx_295)(apply missing-kw self_294 ctx_295 null))))))"
"(current-inspector)"
"(case-lambda((self_296 ctx_297)(apply missing-kw self_296 ctx_297 null)))))"
"(define-values"
"(make-local-expand-context33.1)"
"(lambda(context24_298 intdefs26_299 phase25_300 phase29_301 stop-ids27_302 stop-ids31_303 ctx32_304)"
"(let-values(((ctx_305) ctx32_304))"
"(let-values(((context_306) context24_298))"
"(let-values(((phase_307)(if phase29_301 phase25_300(expand-context-phase ctx_305))))"
"(let-values(((intdefs_308) intdefs26_299))"
"(let-values(((stop-ids_309)(if stop-ids31_303 stop-ids27_302 #f)))"
"(let-values()"
"(let-values(((same-kind?_310)"
"(let-values(((or-part_313)(eq? context_306(expand-context-context ctx_305))))"
"(if or-part_313"
" or-part_313"
"(if(list? context_306)(list?(expand-context-context ctx_305)) #f)))))"
"(let-values(((all-stop-ids_311)"
"(if stop-ids_309(stop-ids->all-stop-ids stop-ids_309 phase_307) #f)))"
"(let-values(((def-ctx-scopes_312)"
"(if(expand-context-def-ctx-scopes ctx_305)"
"(unbox(expand-context-def-ctx-scopes ctx_305))"
" null)))"
"(let-values(((v_314) ctx_305))"
"(let-values(((the-struct_315) v_314))"
"(if(expand-context/outer? the-struct_315)"
"(let-values(((context58_316) context_306)"
"((env59_317)(add-intdef-bindings(expand-context-env ctx_305) intdefs_308))"
"((use-site-scopes60_318)"
"(if(let-values(((or-part_326)(eq? context_306 'module)))"
"(if or-part_326 or-part_326(list? context_306)))"
"(let-values(((or-part_327)(root-expand-context-use-site-scopes ctx_305)))"
"(if or-part_327 or-part_327(box null)))"
" #f))"
"((frame-id61_319)"
"(let-values(((pos->vals_328"
" pos-next_329"
" init_330"
" pos-cont?_331"
" val-cont?_332"
" all-cont?_333)"
"(make-sequence '(intdef)(in-intdefs intdefs_308))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_334)"
"(lambda(frame-id_335 pos_336)"
"(if(if pos-cont?_331(pos-cont?_331 pos_336) #t)"
"(let-values(((intdef_337)(pos->vals_328 pos_336)))"
"(if(if val-cont?_332"
"(val-cont?_332 intdef_337)"
" #t)"
"(let-values(((frame-id_338)"
"(let-values(((frame-id_339)"
" frame-id_335))"
"(let-values(((frame-id_340)"
"(let-values()"
"(let-values(((i-frame-id_341)"
"(internal-definition-context-frame-id"
" intdef_337)))"
"(if(if frame-id_339"
"(if i-frame-id_341"
"(not"
"(eq?"
" frame-id_339"
" i-frame-id_341))"
" #f)"
" #f)"
"(let-values()"
" 'all)"
"(let-values()"
"(let-values(((or-part_342)"
" frame-id_339))"
"(if or-part_342"
" or-part_342"
" i-frame-id_341))))))))"
"(values frame-id_340)))))"
"(if(if all-cont?_333"
"(all-cont?_333 pos_336 intdef_337)"
" #t)"
"(for-loop_334"
" frame-id_338"
"(pos-next_329 pos_336))"
" frame-id_338))"
" frame-id_335))"
" frame-id_335))))"
" for-loop_334)"
"(root-expand-context-frame-id ctx_305)"
" init_330))))"
"((post-expansion-scope62_320)"
"(if intdefs_308"
"(new-scope 'macro)"
"(if same-kind?_310"
"(if(memq context_306 '(module module-begin top-level))"
"(root-expand-context-post-expansion-scope ctx_305)"
" #f)"
" #f)))"
"((post-expansion-scope-action63_321)"
"(if intdefs_308"
"(lambda(s_343 placeholder-sc_344)"
"(let-values(((s68_345) s_343)((intdefs69_346) intdefs_308))"
"(add-intdef-scopes21.1 #f #f #f #f s68_345 intdefs69_346)))"
"(expand-context-post-expansion-scope-action ctx_305)))"
"((scopes64_322)(append def-ctx-scopes_312(expand-context-scopes ctx_305)))"
"((only-immediate?65_323)(not stop-ids_309))"
"((current-introduction-scopes66_324) null)"
"((inner67_325)"
"(let-values(((the-struct_347)(root-expand-context/outer-inner v_314)))"
"(if(expand-context/inner? the-struct_347)"
"(let-values(((to-parsed?70_348) #f)"
"((just-once?71_349) #f)"
"((in-local-expand?72_350) #t)"
"((stops73_351)"
"(free-id-set"
" phase_307"
"(let-values(((or-part_352) all-stop-ids_311))"
"(if or-part_352 or-part_352 null)))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_347)"
"(root-expand-context/inner-top-level-bind-scope the-struct_347)"
"(root-expand-context/inner-all-scopes-stx the-struct_347)"
"(root-expand-context/inner-defined-syms the-struct_347)"
"(root-expand-context/inner-counter the-struct_347)"
"(root-expand-context/inner-lift-key the-struct_347)"
" to-parsed?70_348"
"(expand-context/inner-phase the-struct_347)"
"(expand-context/inner-namespace the-struct_347)"
"(expand-context/inner-user-env the-struct_347)"
" just-once?71_349"
"(expand-context/inner-module-begin-k the-struct_347)"
"(expand-context/inner-allow-unbound? the-struct_347)"
" in-local-expand?72_350"
" stops73_351"
"(expand-context/inner-declared-submodule-names the-struct_347)"
"(expand-context/inner-lifts the-struct_347)"
"(expand-context/inner-lift-envs the-struct_347)"
"(expand-context/inner-module-lifts the-struct_347)"
"(expand-context/inner-require-lifts the-struct_347)"
"(expand-context/inner-to-module-lifts the-struct_347)"
"(expand-context/inner-requires+provides the-struct_347)"
"(expand-context/inner-observer the-struct_347)"
"(expand-context/inner-for-serializable? the-struct_347)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"expand-context/inner?\""
" the-struct_347)))))"
"(expand-context/outer1.1"
" inner67_325"
" post-expansion-scope62_320"
" use-site-scopes60_318"
" frame-id61_319"
" context58_316"
" env59_317"
" post-expansion-scope-action63_321"
" scopes64_322"
"(expand-context/outer-def-ctx-scopes the-struct_315)"
"(expand-context/outer-binding-layer the-struct_315)"
"(expand-context/outer-reference-records the-struct_315)"
" only-immediate?65_323"
"(expand-context/outer-need-eventually-defined the-struct_315)"
" current-introduction-scopes66_324"
"(expand-context/outer-name the-struct_315)))"
"                            (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_315)))))))))))))))"
"(define-values"
"(unpack34.1)"
"(lambda(given-kws_353 given-args_354 ctx32_355)"
"(let-values(((context24_356)(car given-args_354))"
"((given-kws_357)(cdr given-kws_353))"
"((given-args_358)(cdr given-args_354)))"
"(let-values(((intdefs26_359)(car given-args_358))"
"((given-kws_360)(cdr given-kws_357))"
"((given-args_361)(cdr given-args_358)))"
"(let-values(((phase29_362)(if(pair? given-kws_360)(eq? '#:phase(car given-kws_360)) #f)))"
"(let-values(((phase25_363)(if phase29_362(car given-args_361)(void)))"
"((given-kws_364)(if phase29_362(cdr given-kws_360) given-kws_360))"
"((given-args_365)(if phase29_362(cdr given-args_361) given-args_361)))"
"(let-values(((stop-ids31_366)(pair? given-kws_364)))"
"(let-values(((stop-ids27_367)(if stop-ids31_366(car given-args_365)(void))))"
"(make-local-expand-context33.1"
" context24_356"
" intdefs26_359"
" phase25_363"
" phase29_362"
" stop-ids27_367"
" stop-ids31_366"
" ctx32_355)))))))))"
"(define-values"
"(make-local-expand-context35.1)"
"(lifted/2.1$8"
"(lambda(given-kws_368 given-argc_369)"
"(if(= given-argc_369 3)"
"(subsets? '(#:context #:intdefs) given-kws_368 '(#:context #:intdefs #:phase #:stop-ids))"
" #f))"
"(case-lambda((given-kws_370 given-args_371 ctx_372)(unpack34.1 given-kws_370 given-args_371 ctx_372)))"
" '(#:context #:intdefs)"
" '(#:context #:intdefs #:phase #:stop-ids)))"
"(define-values"
"(flip-introduction-scopes)"
"(lambda(s_373 ctx_374)(flip-scopes s_373(expand-context-current-introduction-scopes ctx_374))))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-transforming?)"
"(lambda()(if(let-values(((temp65_12) #t))(get-current-expand-context15.1 temp65_12 #t #f #f)) #t #f)))"
"(define-values"
"(1/syntax-transforming-with-lifts?)"
"(lambda()"
"(let-values(((ctx_13)(let-values(((temp66_15) #t))(get-current-expand-context15.1 temp66_15 #t #f #f))))"
"(if ctx_13(if(expand-context-lifts ctx_13) #t #f) #f))))"
"(define-values"
"(1/syntax-transforming-module-expression?)"
"(lambda()"
"(let-values(((ctx_16)(let-values(((temp67_18) #t))(get-current-expand-context15.1 temp67_18 #t #f #f))))"
"(if ctx_16(if(expand-context-to-module-lifts ctx_16) #t #f) #f))))"
"(define-values"
"(1/syntax-local-transforming-module-provides?)"
"(lambda()"
"(let-values(((ctx_19)(let-values(((temp68_21) #t))(get-current-expand-context15.1 temp68_21 #t #f #f))))"
"(if ctx_19(if(expand-context-requires+provides ctx_19) #t #f) #f))))"
"(define-values"
"(1/syntax-local-context)"
"(lambda()"
"(let-values(((ctx_22)"
"(let-values(((temp69_23) 'syntax-local-context))"
"(get-current-expand-context15.1 #f #f temp69_23 #t))))"
"(expand-context-context ctx_22))))"
"(define-values"
"(1/syntax-local-introduce)"
"(lambda(s_24)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_24)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-introduce \"syntax?\" s_24)))"
"(values))))"
"(let-values(((ctx_25)"
"(let-values(((temp70_26) 'syntax-local-introduce))"
"(get-current-expand-context15.1 #f #f temp70_26 #t))))"
"(flip-introduction-scopes s_24 ctx_25)))))"
"(define-values"
"(1/syntax-local-identifier-as-binding)"
"(lambda(id_27)"
"(let-values((()"
"(begin"
"(if(identifier? id_27)"
"(void)"
"                      (let-values () (raise-argument-error 1/syntax-local-identifier-as-binding \"identifier?\" id_27)))"
"(values))))"
"(let-values(((ctx_28)"
"(let-values(((temp71_29) 'syntax-local-identifier-as-binding))"
"(get-current-expand-context15.1 #f #f temp71_29 #t))))"
"(remove-use-site-scopes id_27 ctx_28)))))"
"(define-values"
"(1/syntax-local-phase-level)"
"(lambda()"
"(let-values(((ctx_30)(let-values(((temp72_32) #t))(get-current-expand-context15.1 temp72_32 #t #f #f))))"
"(if ctx_30(expand-context-phase ctx_30) 0))))"
"(define-values"
"(1/syntax-local-name)"
"(lambda()"
"(let-values(((ctx_33)"
"(let-values(((temp73_35) 'syntax-local-name))(get-current-expand-context15.1 #f #f temp73_35 #t))))"
"(let-values(((id_34)(expand-context-name ctx_33)))"
"(if id_34(datum->syntax$1 #f(syntax-e$1 id_34) id_34) #f)))))"
"(define-values"
"(1/make-syntax-introducer)"
"(let-values(((make-syntax-introducer3_36)"
"(lambda(as-use-site?1_37 as-use-site?2_38)"
"(let-values(((as-use-site?_39)(if as-use-site?2_38 as-use-site?1_37 #f)))"
"(let-values()"
"(let-values(((sc_40)(new-scope(if as-use-site?_39 'use-site 'macro))))"
"(let-values(((core77_41)"
"(lambda(s76_42 mode74_43 mode75_44)"
"(let-values(((s_45) s76_42))"
"(let-values(((mode_46)(if mode75_44 mode74_43 'flip)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_45)"
"(void)"
"(let-values()"
"                                                    (raise-argument-error 'syntax-introducer \"syntax?\" s_45)))"
"(let-values(((tmp_47) mode_46))"
"(if(equal? tmp_47 'add)"
"(let-values()(add-scope s_45 sc_40))"
"(if(equal? tmp_47 'remove)"
"(let-values()(remove-scope s_45 sc_40))"
"(if(equal? tmp_47 'flip)"
"(let-values()(flip-scope s_45 sc_40))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                           \"(or/c 'add 'remove 'flip)\""
" mode_46)))))))))))))"
"(case-lambda"
"((s_48)(core77_41 s_48 #f #f))"
"((s_49 mode74_50)(core77_41 s_49 mode74_50 #t))))))))))"
"(case-lambda"
"(()(make-syntax-introducer3_36 #f #f))"
"((as-use-site?1_51)(make-syntax-introducer3_36 as-use-site?1_51 #t)))))"
"(define-values"
"(1/make-syntax-delta-introducer)"
"(let-values(((make-syntax-delta-introducer9_52)"
"(lambda(ext-s7_53 base-s8_54 phase5_55 phase6_56)"
"(let-values(((ext-s_57) ext-s7_53))"
"(let-values(((base-s_58) base-s8_54))"
"(let-values(((phase_59)(if phase6_56 phase5_55(1/syntax-local-phase-level))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 ext-s_57)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'make-syntax-delta-introducer \"syntax?\" ext-s_57)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_65)(syntax?$1 base-s_58)))"
"(if or-part_65 or-part_65(not base-s_58)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                 \"(or/c syntax? #f)\""
" base-s_58)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(phase? phase_59)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" phase?-string"
" phase_59)))"
"(values))))"
"(let-values(((ext-scs_60)(syntax-scope-set ext-s_57 phase_59)))"
"(let-values(((base-scs_61)"
"(syntax-scope-set"
"(let-values(((or-part_66) base-s_58))"
"(if or-part_66 or-part_66 empty-syntax))"
" phase_59)))"
"(let-values(((use-base-scs_62)"
"(if(subset? base-scs_61 ext-scs_60)"
" base-scs_61"
"(let-values(((or-part_67)"
"(if(identifier? base-s_58)"
"(let-values(((base-s79_69) base-s_58)"
"((phase80_70) phase_59)"
"((temp81_71) #t))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_71"
" #t"
" base-s79_69"
" phase80_70))"
" #f)))"
"(if or-part_67 or-part_67(seteq))))))"
"(let-values(((delta-scs_63)"
"(set->list(set-subtract ext-scs_60 use-base-scs_62))))"
"(let-values(((maybe-taint_64)"
"(if(syntax-clean? ext-s_57) values syntax-taint$1)))"
"(let-values(((core85_72)"
"(lambda(s84_73 mode82_74 mode83_75)"
"(let-values(((s_76) s84_73))"
"(let-values(((mode_77)(if mode83_75 mode82_74 'add)))"
"(let-values()"
"(maybe-taint_64"
"(let-values(((tmp_78) mode_77))"
"(if(equal? tmp_78 'add)"
"(let-values()(add-scopes s_76 delta-scs_63))"
"(if(equal? tmp_78 'remove)"
"(let-values()(remove-scopes s_76 delta-scs_63))"
"(if(equal? tmp_78 'flip)"
"(let-values()(flip-scopes s_76 delta-scs_63))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                                            \"(or/c 'add 'remove 'flip)\""
" mode_77)))))))))))))"
"(case-lambda"
"((s_79)(core85_72 s_79 #f #f))"
"((s_80 mode82_81)(core85_72 s_80 mode82_81 #t)))))))))))))))))))"
"(case-lambda"
"((ext-s_82 base-s_83)(make-syntax-delta-introducer9_52 ext-s_82 base-s_83 #f #f))"
"((ext-s_84 base-s_85 phase5_86)(make-syntax-delta-introducer9_52 ext-s_84 base-s_85 phase5_86 #t)))))"
"(define-values"
"(do-syntax-local-value17.1)"
"(lambda(immediate?11_97 who13_98 id14_99 intdef15_100 failure-thunk16_101)"
"(let-values(((who_102) who13_98))"
"(let-values(((id_103) id14_99))"
"(let-values(((intdef_104) intdef15_100))"
"(let-values(((failure-thunk_105) failure-thunk16_101))"
"(let-values(((immediate?_106) immediate?11_97))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_103)"
"(void)"
"                                  (let-values () (raise-argument-error who_102 \"identifier?\" id_103)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_110)(not failure-thunk_105)))"
"(if or-part_110"
" or-part_110"
"(if(procedure? failure-thunk_105)"
"(procedure-arity-includes? failure-thunk_105 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_102"
"                                       \"(or #f (procedure-arity-includes/c 0))\""
" failure-thunk_105)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_111)(not intdef_104)))"
"(if or-part_111 or-part_111(1/internal-definition-context? intdef_104)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_102"
"                                         \"(or #f internal-definition-context?)\""
" failure-thunk_105)))"
"(values))))"
"(let-values(((current-ctx_107)"
"(let-values(((who87_112) who_102))"
"(get-current-expand-context15.1 #f #f who87_112 #t))))"
"(let-values(((ctx_108)"
"(if intdef_104"
"(let-values(((v_113) current-ctx_107))"
"(let-values(((the-struct_114) v_113))"
"(if(expand-context/outer? the-struct_114)"
"(let-values(((env88_115)"
"(add-intdef-bindings"
"(expand-context-env current-ctx_107)"
" intdef_104))"
"((inner89_116)(root-expand-context/outer-inner v_113)))"
"(expand-context/outer1.1"
" inner89_116"
"(root-expand-context/outer-post-expansion-scope the-struct_114)"
"(root-expand-context/outer-use-site-scopes the-struct_114)"
"(root-expand-context/outer-frame-id the-struct_114)"
"(expand-context/outer-context the-struct_114)"
" env88_115"
"(expand-context/outer-post-expansion-scope-action the-struct_114)"
"(expand-context/outer-scopes the-struct_114)"
"(expand-context/outer-def-ctx-scopes the-struct_114)"
"(expand-context/outer-binding-layer the-struct_114)"
"(expand-context/outer-reference-records the-struct_114)"
"(expand-context/outer-only-immediate? the-struct_114)"
"(expand-context/outer-need-eventually-defined the-struct_114)"
"(expand-context/outer-current-introduction-scopes the-struct_114)"
"(expand-context/outer-name the-struct_114)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"expand-context/outer?\""
" the-struct_114))))"
" current-ctx_107)))"
"(let-values((()"
"(begin"
"(let-values(((obs_117)(expand-context-observer ctx_108)))"
"(if obs_117"
"(let-values()"
"(let-values()(call-expand-observe obs_117 'local-value id_103)))"
"(void)))"
"(values))))"
"(let-values(((phase_109)(expand-context-phase ctx_108)))"
"((letrec-values(((loop_118)"
"(lambda(id_119)"
"(let-values(((b_120)"
"(if immediate?_106"
"(let-values(((id90_122) id_119)"
"((phase91_123) phase_109)"
"((temp92_124) #t))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp92_124"
" #t"
" #f"
" #f"
" id90_122"
" phase91_123))"
"(resolve+shift/extra-inspector"
" id_119"
" phase_109"
"(expand-context-namespace ctx_108)))))"
"(begin"
"(let-values(((obs_125)(expand-context-observer ctx_108)))"
"(if obs_125"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_125 'resolve id_119)))"
"(void)))"
"(if(not b_120)"
"(let-values()"
"(begin"
"(let-values(((obs_126)(expand-context-observer ctx_108)))"
"(if obs_126"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_126"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_105"
"(failure-thunk_105)"
"(error"
" 'syntax-local-value"
"                                                               \"unbound identifier: ~v\""
" id_119))))"
"(let-values()"
"(let-values(((v_127 primitive?_128 insp_129)"
"(let-values(((b93_131) b_120)"
"((ctx94_132) ctx_108)"
"((id95_133) id_119)"
"((temp96_134) #t))"
"(lookup15.1"
" #f"
" #f"
" temp96_134"
" #t"
" b93_131"
" ctx94_132"
" id95_133))))"
"(if(let-values(((or-part_135)(variable? v_127)))"
"(if or-part_135 or-part_135(core-form? v_127)))"
"(let-values()"
"(begin"
"(let-values(((obs_136)"
"(expand-context-observer ctx_108)))"
"(if obs_136"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_136"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_105"
"(failure-thunk_105)"
"(error"
" 'syntax-local-value"
"                                                                     \"identifier is not bound to syntax: ~v\""
" id_119))))"
"(let-values()"
"(begin"
"(let-values(((obs_137)"
"(expand-context-observer ctx_108)))"
"(if obs_137"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_137"
" 'local-value-result"
" #t)))"
"(void)))"
"(if(1/rename-transformer? v_127)"
"(let-values()"
"(if immediate?_106"
"(values"
" v_127"
"(1/rename-transformer-target v_127))"
"(loop_118(1/rename-transformer-target v_127))))"
"(if immediate?_106"
"(let-values()(values v_127 #f))"
"(let-values() v_127))))))))))))))"
" loop_118)"
"(flip-introduction-scopes id_103 ctx_108)))))))))))))))))"
"(define-values"
"(1/syntax-local-value)"
"(let-values(((syntax-local-value25_154)"
"(lambda(id24_155 failure-thunk20_156 intdef21_157 failure-thunk22_158 intdef23_159)"
"(let-values(((id_160) id24_155))"
"(let-values(((failure-thunk_161)(if failure-thunk22_158 failure-thunk20_156 #f)))"
"(let-values(((intdef_162)(if intdef23_159 intdef21_157 #f)))"
"(let-values()"
"(let-values(((temp97_164) 'syntax-local-value)"
"((temp98_165) #f)"
"((id99_166) id_160)"
"((intdef100_167) intdef_162)"
"((failure-thunk101_168) failure-thunk_161))"
"(do-syntax-local-value17.1"
" temp98_165"
" temp97_164"
" id99_166"
" intdef100_167"
" failure-thunk101_168)))))))))"
"(case-lambda"
"((id_169)(syntax-local-value25_154 id_169 #f #f #f #f))"
"((id_170 failure-thunk_171 intdef21_172)(syntax-local-value25_154 id_170 failure-thunk_171 intdef21_172 #t #t))"
"((id_173 failure-thunk20_174)(syntax-local-value25_154 id_173 failure-thunk20_174 #f #t #f)))))"
"(define-values"
"(1/syntax-local-value/immediate)"
"(let-values(((syntax-local-value/immediate32_175)"
"(lambda(id31_176 failure-thunk27_177 intdef28_178 failure-thunk29_179 intdef30_180)"
"(let-values(((id_181) id31_176))"
"(let-values(((failure-thunk_182)(if failure-thunk29_179 failure-thunk27_177 #f)))"
"(let-values(((intdef_183)(if intdef30_180 intdef28_178 #f)))"
"(let-values()"
"(let-values(((temp102_185) 'syntax-local-value/immediate)"
"((temp103_186) #t)"
"((id104_187) id_181)"
"((intdef105_188) intdef_183)"
"((failure-thunk106_189) failure-thunk_182))"
"(do-syntax-local-value17.1"
" temp103_186"
" temp102_185"
" id104_187"
" intdef105_188"
" failure-thunk106_189)))))))))"
"(case-lambda"
"((id_190)(syntax-local-value/immediate32_175 id_190 #f #f #f #f))"
"((id_191 failure-thunk_192 intdef28_193)"
"(syntax-local-value/immediate32_175 id_191 failure-thunk_192 intdef28_193 #t #t))"
"((id_194 failure-thunk27_195)(syntax-local-value/immediate32_175 id_194 failure-thunk27_195 #f #t #f)))))"
"(define-values"
"(do-lift-values-expression)"
"(lambda(who_196 n_197 s_198)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_198) (void) (let-values () (raise-argument-error who_196 \"syntax?\" s_198)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? n_197)"
"(void)"
"                        (let-values () (raise-argument-error who_196 \"exact-nonnegative-integer?\" n_197)))"
"(values))))"
"(let-values(((ctx_199)"
"(let-values(((who107_203) who_196))(get-current-expand-context15.1 #f #f who107_203 #t))))"
"(let-values(((lifts_200)(expand-context-lifts ctx_199)))"
"(let-values(((counter_201)(root-expand-context-counter ctx_199)))"
"(let-values(((ids_202)"
"(alt-reverse"
"(let-values(((start_204) 0)((end_205) n_197)((inc_206) 1))"
"(begin"
"(if(if(real? start_204)(if(real? end_205)(real? inc_206) #f) #f)"
"(void)"
"(let-values()(in-range start_204 end_205 inc_206)))"
"((letrec-values(((for-loop_207)"
"(lambda(fold-var_208 pos_209)"
"(if(< pos_209 end_205)"
"(let-values()"
"(let-values(((fold-var_211)"
"(let-values(((fold-var_212) fold-var_208))"
"(let-values(((fold-var_213)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(set-box!"
" counter_201"
"(add1"
"(unbox"
" counter_201)))"
"(values))))"
"(let-values(((name_214)"
"(string->unreadable-symbol"
"(format"
"                                                                                                              \"lifted/~a\""
"(unbox"
" counter_201)))))"
"(add-scope"
"(datum->syntax$1"
" #f"
" name_214)"
"(new-scope 'macro)))))"
" fold-var_212))))"
"(values fold-var_213)))))"
"(for-loop_207 fold-var_211(+ pos_209 inc_206))))"
" fold-var_208))))"
" for-loop_207)"
" null"
" start_204))))))"
"(begin"
"(let-values(((obs_215)(expand-context-observer ctx_199)))"
"(if obs_215"
"(let-values()(let-values()(call-expand-observe obs_215 'local-lift ids_202 s_198)))"
"(void)))"
"(map2"
"(lambda(id_216)(flip-introduction-scopes id_216 ctx_199))"
"(add-lifted!"
" lifts_200"
" ids_202"
"(flip-introduction-scopes s_198 ctx_199)"
"(expand-context-phase ctx_199))))))))))))"
"(define-values"
"(1/syntax-local-lift-expression)"
"(lambda(s_217)(car(do-lift-values-expression 'syntax-local-lift-expression 1 s_217))))"
"(define-values"
"(1/syntax-local-lift-values-expression)"
"(lambda(n_218 s_219)(do-lift-values-expression 'syntax-local-lift-values-expression n_218 s_219)))"
"(define-values"
"(1/syntax-local-lift-context)"
"(lambda()"
"(let-values(((ctx_220)"
"(let-values(((temp108_221) 'syntax-local-lift-context))"
"(get-current-expand-context15.1 #f #f temp108_221 #t))))"
"(root-expand-context-lift-key ctx_220))))"
"(define-values"
"(1/syntax-local-lift-module)"
"(lambda(s_222)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_222)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-lift-module \"syntax?\" s_222)))"
"(values))))"
"(let-values(((ctx_223)"
"(let-values(((temp109_225) 'syntax-local-lift-module))"
"(get-current-expand-context15.1 #f #f temp109_225 #t))))"
"(let-values(((phase_224)(expand-context-phase ctx_223)))"
"(begin"
"(let-values(((tmp_226)(core-form-sym s_222 phase_224)))"
"(if(if(equal? tmp_226 'module) #t(equal? tmp_226 'module*))"
"(let-values()(add-lifted-module!(expand-context-module-lifts ctx_223) s_222 phase_224))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a module form\" \"given form\" s_222))))"
"(let-values(((obs_227)(expand-context-observer ctx_223)))"
"(if obs_227"
"(let-values()(let-values()(call-expand-observe obs_227 'lift-statement s_222)))"
"(void)))))))))"
"(define-values"
"(do-local-lift-to-module52.1)"
"(lambda(add-lifted!37_234"
" get-lift-ctx36_235"
" get-wrt-phase38_236"
" intro?34_237"
" intro?42_238"
" more-checks35_239"
" more-checks43_240"
" post-wrap41_241"
" post-wrap49_242"
" pre-wrap39_243"
" pre-wrap47_244"
" shift-wrap40_245"
" shift-wrap48_246"
" who50_247"
" s51_248)"
"(let-values(((who_249) who50_247))"
"(let-values(((s_250) s51_248))"
"(let-values(((intro?_251)(if intro?42_238 intro?34_237 #t)))"
"(let-values(((more-checks_252)(if more-checks43_240 more-checks35_239 void)))"
"(let-values(((get-lift-ctx_253) get-lift-ctx36_235))"
"(let-values(((add-lifted!_254) add-lifted!37_234))"
"(let-values(((get-wrt-phase_255) get-wrt-phase38_236))"
"(let-values(((pre-wrap_256)"
"(if pre-wrap47_244 pre-wrap39_243(lambda(s_257 phase_258 lift-ctx_259) s_257))))"
"(let-values(((shift-wrap_260)"
"(if shift-wrap48_246 shift-wrap40_245(lambda(s_261 phase_262 lift-ctx_263) s_261))))"
"(let-values(((post-wrap_264)"
"(if post-wrap49_242 post-wrap41_241(lambda(s_265 phase_266 lift-ctx_267) s_265))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_250)"
"(void)"
"                                            (let-values () (raise-argument-error who_249 \"syntax?\" s_250)))"
"(values))))"
"(let-values((()(begin(more-checks_252)(values))))"
"(let-values(((ctx_268)"
"(let-values(((who110_276) who_249))"
"(get-current-expand-context15.1 #f #f who110_276 #t))))"
"(let-values(((lift-ctx_269)(get-lift-ctx_253 ctx_268)))"
"(let-values(((phase_270)(expand-context-phase ctx_268)))"
"(let-values(((wrt-phase_271)(get-wrt-phase_255 lift-ctx_269)))"
"(let-values(((added-s_272)"
"(if intro?_251(flip-introduction-scopes s_250 ctx_268) s_250)))"
"(let-values(((pre-s_273)(pre-wrap_256 added-s_272 phase_270 lift-ctx_269)))"
"(let-values(((shift-s_274)"
"(let-values(((start_277) phase_270)"
"((end_278) wrt-phase_271)"
"((inc_279) -1))"
"(begin"
"(if(if(real? start_277)"
"(if(real? end_278)(real? inc_279) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_277 end_278 inc_279)))"
"((letrec-values(((for-loop_280)"
"(lambda(s_281 pos_282)"
"(if(> pos_282 end_278)"
"(let-values(((phase_283) pos_282))"
"(let-values(((s_284)"
"(let-values(((s_285)"
" s_281))"
"(let-values(((s_286)"
"(let-values()"
"(shift-wrap_260"
" s_285"
"(sub1"
" phase_283)"
" lift-ctx_269))))"
"(values s_286)))))"
"(for-loop_280"
" s_284"
"(+ pos_282 inc_279))))"
" s_281))))"
" for-loop_280)"
" pre-s_273"
" start_277)))))"
"(let-values(((post-s_275)"
"(post-wrap_264 shift-s_274 wrt-phase_271 lift-ctx_269)))"
"(begin"
"(add-lifted!_254 lift-ctx_269 post-s_275 wrt-phase_271)"
"(values ctx_268 added-s_272)))))))))))))))))))))))))"
"(define-values"
"(1/syntax-local-lift-require)"
"(lambda(s_324 use-s_325)"
"(let-values(((sc_326)(new-scope 'macro)))"
"(let-values(((ctx_327 added-s_328)"
"(let-values(((temp111_331) 'syntax-local-lift-require)"
"((temp112_332)(datum->syntax$1 #f s_324))"
"((temp113_333) #f)"
"((temp114_334)"
"(lambda()"
"(if(syntax?$1 use-s_325)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'syntax-local-lift-require \"syntax?\" use-s_325)))))"
"((expand-context-require-lifts115_335) expand-context-require-lifts)"
"((require-lift-context-wrt-phase116_336) require-lift-context-wrt-phase)"
"((add-lifted-require!117_337) add-lifted-require!)"
"((temp118_338)"
"(lambda(s_340 phase_341 require-lift-ctx_342)(require-spec-shift-for-syntax s_340)))"
"((temp119_339)"
"(lambda(s_343 phase_344 require-lift-ctx_345)"
"(wrap-form '#%require(add-scope s_343 sc_326) phase_344))))"
"(do-local-lift-to-module52.1"
" add-lifted-require!117_337"
" expand-context-require-lifts115_335"
" require-lift-context-wrt-phase116_336"
" temp113_333"
" #t"
" temp114_334"
" #t"
" temp119_339"
" #t"
" #f"
" #f"
" temp118_338"
" #t"
" temp111_331"
" temp112_332))))"
"(let-values(((result-s_329)(add-scope use-s_325 sc_326)))"
"(begin"
"(let-values(((obs_346)(expand-context-observer ctx_327)))"
"(if obs_346"
"(let-values()"
"(let-values()(call-expand-observe obs_346 'lift-require added-s_328 use-s_325 result-s_329)))"
"(void)))"
" result-s_329))))))"
"(define-values"
"(1/syntax-local-lift-provide)"
"(lambda(s_347)"
"(let-values(((ctx_348 result-s_349)"
"(let-values(((temp120_351) 'syntax-local-lift-module-end-declaration)"
"((s121_352) s_347)"
"((expand-context-to-module-lifts122_353) expand-context-to-module-lifts)"
"((to-module-lift-context-wrt-phase123_354) to-module-lift-context-wrt-phase)"
"((add-lifted-to-module-provide!124_355) add-lifted-to-module-provide!)"
"((temp125_356)"
"(lambda(s_358 phase_359 to-module-lift-ctx_360)(wrap-form 'for-syntax s_358 #f)))"
"((temp126_357)"
"(lambda(s_361 phase_362 to-module-lift-ctx_363)"
"(wrap-form '#%provide s_361 phase_362))))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-provide!124_355"
" expand-context-to-module-lifts122_353"
" to-module-lift-context-wrt-phase123_354"
" #f"
" #f"
" #f"
" #f"
" temp126_357"
" #t"
" #f"
" #f"
" temp125_356"
" #t"
" temp120_351"
" s121_352))))"
"(let-values(((obs_364)(expand-context-observer ctx_348)))"
"(if obs_364(let-values()(let-values()(call-expand-observe obs_364 'lift-provide result-s_349)))(void))))))"
"(define-values"
"(1/syntax-local-lift-module-end-declaration)"
"(lambda(s_365)"
"(let-values(((ctx_366 also-s_367)"
"(let-values(((temp127_369) 'syntax-local-lift-module-end-declaration)"
"((s128_370) s_365)"
"((expand-context-to-module-lifts129_371) expand-context-to-module-lifts)"
"((temp130_372)(lambda(lift-ctx_376) 0))"
"((add-lifted-to-module-end!131_373) add-lifted-to-module-end!)"
"((temp132_374)"
"(lambda(orig-s_377 phase_378 to-module-lift-ctx_379)"
"(if(to-module-lift-context-end-as-expressions? to-module-lift-ctx_379)"
"(wrap-form '#%expression orig-s_377 phase_378)"
" orig-s_377)))"
"((temp133_375)"
"(lambda(s_380 phase_381 to-module-lift-ctx_382)"
"(wrap-form 'begin-for-syntax s_380 phase_381))))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-end!131_373"
" expand-context-to-module-lifts129_371"
" temp130_372"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp132_374"
" #t"
" temp133_375"
" #t"
" temp127_369"
" s128_370))))"
"(let-values(((obs_383)(expand-context-observer ctx_366)))"
"(if obs_383(let-values()(let-values()(call-expand-observe obs_383 'lift-statement s_365)))(void))))))"
"(define-values"
"(wrap-form)"
"(lambda(sym_384 s_385 phase_386)"
"(datum->syntax$1"
" #f"
"(list(datum->syntax$1(if phase_386(syntax-shift-phase-level$1 core-stx phase_386) #f) sym_384) s_385))))"
"(define-values"
"(1/syntax-local-module-defined-identifiers)"
"(lambda()"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-defined-identifiers"
"                         \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_387)"
"(let-values(((temp134_388) 'syntax-local-module-defined-identifiers))"
"(get-current-expand-context15.1 #f #f temp134_388 #t))))"
"(requireds->phase-ht(extract-module-definitions(expand-context-requires+provides ctx_387)))))))"
"(define-values"
"(1/syntax-local-module-required-identifiers)"
"(lambda(mod-path_389 phase-level_390)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_395)(not mod-path_389)))"
"(if or-part_395 or-part_395(1/module-path? mod-path_389)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                         \"(or/c module-path? #f)\""
" mod-path_389)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_396)(eq? phase-level_390 #t)))"
"(if or-part_396 or-part_396(phase? phase-level_390)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                           (format \"(or/c ~a #t)\" phase?-string)"
" phase-level_390)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-required-identifiers"
"                             \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_391)"
"(let-values(((temp135_397) 'syntax-local-module-required-identifiers))"
"(get-current-expand-context15.1 #f #f temp135_397 #t))))"
"(let-values(((requires+provides_392)(expand-context-requires+provides ctx_391)))"
"(let-values(((mpi_393)(if mod-path_389(module-path->mpi/context mod-path_389 ctx_391) #f)))"
"(let-values(((requireds_394)"
"(extract-all-module-requires"
" requires+provides_392"
" mpi_393"
"(if(eq? phase-level_390 #t) 'all phase-level_390))))"
"(if requireds_394"
"(alt-reverse"
"(let-values(((ht_398)(requireds->phase-ht requireds_394)))"
"(begin"
"(if((lambda(ht_399)(hash? ht_399)) ht_398)(void)(let-values()(default-in-hash ht_398)))"
"((letrec-values(((for-loop_400)"
"(lambda(fold-var_401 i_402)"
"(if i_402"
"(let-values(((phase_403 ids_404)(hash-iterate-key+value ht_398 i_402)))"
"(let-values(((fold-var_405)"
"(let-values(((fold-var_406) fold-var_401))"
"(let-values(((fold-var_407)"
"(let-values()"
"(cons"
"(let-values()"
"(cons phase_403 ids_404))"
" fold-var_406))))"
"(values fold-var_407)))))"
"(for-loop_400 fold-var_405(hash-iterate-next ht_398 i_402))))"
" fold-var_401))))"
" for-loop_400)"
" null"
"(hash-iterate-first ht_398)))))"
" #f))))))))))"
"(define-values"
"(requireds->phase-ht)"
"(lambda(requireds_408)"
"(let-values(((lst_409) requireds_408))"
"(begin"
"(if(list? lst_409)(void)(let-values()(in-list lst_409)))"
"((letrec-values(((for-loop_410)"
"(lambda(ht_411 lst_412)"
"(if(pair? lst_412)"
"(let-values(((r_413)(unsafe-car lst_412)))"
"(let-values(((ht_414)"
"(let-values(((ht_415) ht_411))"
"(let-values(((ht_416)"
"(let-values()"
"(hash-update"
" ht_415"
"(required-phase r_413)"
"(lambda(l_417)(cons(required-id r_413) l_417))"
" null))))"
"(values ht_416)))))"
"(for-loop_410 ht_414(unsafe-cdr lst_412))))"
" ht_411))))"
" for-loop_410)"
"(hasheqv)"
" lst_409)))))"
"(define-values"
"(1/syntax-local-module-exports)"
"(lambda(mod-path_418)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_423)(1/module-path? mod-path_418)))"
"(if or-part_423"
" or-part_423"
"(if(syntax?$1 mod-path_418)(1/module-path?(syntax->datum$1 mod-path_418)) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-exports"
"(string-append"
"                          \"(or/c module-path?\\n\""
"                          \"      (and/c syntax?\\n\""
"                          \"             (lambda (stx)\\n\""
"                          \"               (module-path? (syntax->datum stx)))))\")"
" mod-path_418)))"
"(values))))"
"(let-values(((ctx_419)"
"(let-values(((temp136_424) 'syntax-local-module-exports))"
"(get-current-expand-context15.1 #f #f temp136_424 #t))))"
"(let-values(((ns_420)(expand-context-namespace ctx_419)))"
"(let-values(((mod-name_421)"
"(1/module-path-index-resolve"
"(module-path->mpi/context"
"(if(syntax?$1 mod-path_418)(syntax->datum$1 mod-path_418) mod-path_418)"
" ctx_419)"
" #t)))"
"(let-values(((m_422)(namespace->module ns_420 mod-name_421)))"
"(begin"
"(if m_422(void)(let-values()(raise-unknown-module-error 'syntax-local-module-exports mod-name_421)))"
"(alt-reverse"
"(let-values(((ht_425)(module-provides m_422)))"
"(begin"
"(if((lambda(ht_426)(hash? ht_426)) ht_425)(void)(let-values()(default-in-hash ht_425)))"
"((letrec-values(((for-loop_427)"
"(lambda(fold-var_428 i_429)"
"(if i_429"
"(let-values(((phase_430 syms_431)(hash-iterate-key+value ht_425 i_429)))"
"(let-values(((fold-var_432)"
"(let-values(((fold-var_433) fold-var_428))"
"(let-values(((fold-var_434)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_430"
"(alt-reverse"
"(let-values(((ht_435) syms_431))"
"(begin"
"(if((lambda(ht_436)"
"(hash? ht_436))"
" ht_435)"
"(void)"
"(let-values()"
"(default-in-hash-keys"
" ht_435)))"
"((letrec-values(((for-loop_437)"
"(lambda(fold-var_438"
" i_439)"
"(if i_439"
"(let-values(((sym_440)"
"(hash-iterate-key"
" ht_435"
" i_439)))"
"(let-values(((fold-var_441)"
"(let-values(((fold-var_442)"
" fold-var_438))"
"(let-values(((fold-var_443)"
"(let-values()"
"(cons"
"(let-values()"
" sym_440)"
" fold-var_442))))"
"(values"
" fold-var_443)))))"
"(for-loop_437"
" fold-var_441"
"(hash-iterate-next"
" ht_435"
" i_439))))"
" fold-var_438))))"
" for-loop_437)"
" null"
"(hash-iterate-first ht_435)))))))"
" fold-var_433))))"
"(values fold-var_434)))))"
"(for-loop_427 fold-var_432(hash-iterate-next ht_425 i_429))))"
" fold-var_428))))"
" for-loop_427)"
" null"
"(hash-iterate-first ht_425)))))))))))))"
"(define-values"
"(1/syntax-local-submodules)"
"(lambda()"
"(let-values(((ctx_444)"
"(let-values(((temp137_446) 'syntax-local-submodules))"
"(get-current-expand-context15.1 #f #f temp137_446 #t))))"
"(let-values(((submods_445)(expand-context-declared-submodule-names ctx_444)))"
"(alt-reverse"
"(let-values(((ht_447) submods_445))"
"(begin"
"(if((lambda(ht_448)(hash? ht_448)) ht_447)(void)(let-values()(default-in-hash ht_447)))"
"((letrec-values(((for-loop_449)"
"(lambda(fold-var_450 i_451)"
"(if i_451"
"(let-values(((name_452 kind_453)(hash-iterate-key+value ht_447 i_451)))"
"(let-values(((fold-var_454)"
"(let-values(((fold-var_455) fold-var_450))"
"(if(eq? kind_453 'module)"
"(let-values(((fold-var_456) fold-var_455))"
"(let-values(((fold-var_457)"
"(let-values()"
"(cons(let-values() name_452) fold-var_456))))"
"(values fold-var_457)))"
" fold-var_455))))"
"(for-loop_449 fold-var_454(hash-iterate-next ht_447 i_451))))"
" fold-var_450))))"
" for-loop_449)"
" null"
"(hash-iterate-first ht_447)))))))))"
"(define-values"
"(1/syntax-local-environment-ref)"
"(let-values(((syntax-local-environment-ref58_458)"
"(lambda(key57_459 default55_460 default56_461)"
"(let-values(((key_462) key57_459))"
"(let-values(((default_463)(if default56_461 default55_460 #f)))"
"(let-values()"
"(let-values(((ctx_464)"
"(let-values(((temp138_465) 'syntax-local-environment-ref))"
"(get-current-expand-context15.1 #f #f temp138_465 #t))))"
"(hash-ref(expand-context-user-env ctx_464) key_462 default_463))))))))"
"(case-lambda"
"((key_466)(syntax-local-environment-ref58_458 key_466 #f #f))"
"((key_467 default55_468)(syntax-local-environment-ref58_458 key_467 default55_468 #t)))))"
"(define-values"
"(1/syntax-local-get-shadower)"
"(let-values(((syntax-local-get-shadower63_469)"
"(lambda(id62_470 only-generated?60_471 only-generated?61_472)"
"(let-values(((id_473) id62_470))"
"(let-values(((only-generated?_474)(if only-generated?61_472 only-generated?60_471 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_473)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'syntax-local-get-shadower \"identifier?\" id_473)))"
"(values))))"
"(let-values(((ctx_475)"
"(let-values(((temp139_477) 'syntax-local-get-shadower))"
"(get-current-expand-context15.1 #f #f temp139_477 #t))))"
"(let-values(((new-id_476)(add-scopes id_473(expand-context-scopes ctx_475))))"
"(if(syntax-clean? id_473) new-id_476(syntax-taint$1 new-id_476)))))))))))"
"(case-lambda"
"((id_478)(syntax-local-get-shadower63_469 id_478 #f #f))"
"((id_479 only-generated?60_480)(syntax-local-get-shadower63_469 id_479 only-generated?60_480 #t)))))"
"(void)"
"(void)"
"(define-values"
"(syntax-source-accessor)"
"(lambda(who_1 srcloc-accessor_2)"
"(lambda(s_3)"
"(let-values((()"
"(begin"
"                      (if (syntax?$1 s_3) (void) (let-values () (raise-argument-error who_1 \"syntax?\" s_3)))"
"(values))))"
"(let-values(((srcloc_4)(syntax-srcloc s_3)))(if srcloc_4(srcloc-accessor_2 srcloc_4) #f))))))"
"(define-values(1/syntax-source)(syntax-source-accessor 'syntax-source srcloc-source))"
"(define-values(1/syntax-line)(syntax-source-accessor 'syntax-line srcloc-line))"
"(define-values(1/syntax-column)(syntax-source-accessor 'syntax-column srcloc-column))"
"(define-values(1/syntax-position)(syntax-source-accessor 'syntax-position srcloc-position))"
"(define-values(1/syntax-span)(syntax-source-accessor 'syntax-span srcloc-span))"
"(define-values"
"(encoded-srcloc?)"
"(lambda(v_5)"
"(let-values(((or-part_6)(if(list? v_5)(if(=(length v_5) 5)(srcloc-vector?(list->vector v_5)) #f) #f)))"
"(if or-part_6 or-part_6(if(vector? v_5)(if(=(vector-length v_5) 5)(srcloc-vector? v_5) #f) #f)))))"
"(define-values"
"(srcloc-vector?)"
"(lambda(v_7)"
"(if(let-values(((or-part_8)(not(vector-ref v_7 1))))"
"(if or-part_8 or-part_8(exact-positive-integer?(vector-ref v_7 1))))"
"(if(let-values(((or-part_9)(not(vector-ref v_7 2))))"
"(if or-part_9 or-part_9(exact-nonnegative-integer?(vector-ref v_7 2))))"
"(if(let-values(((or-part_10)(not(vector-ref v_7 3))))"
"(if or-part_10 or-part_10(exact-positive-integer?(vector-ref v_7 3))))"
"(let-values(((or-part_11)(not(vector-ref v_7 4))))"
"(if or-part_11 or-part_11(exact-nonnegative-integer?(vector-ref v_7 4))))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(to-srcloc-stx)"
"(lambda(v_12)"
"(if(pair? v_12)"
"(let-values()(to-srcloc-stx(list->vector v_12)))"
"(if(vector? v_12)"
"(let-values()"
"(let-values(((the-struct_13) empty-syntax))"
"(if(syntax?$1 the-struct_13)"
"(let-values(((srcloc1_14)"
"(srcloc"
"(vector-ref v_12 0)"
"(vector-ref v_12 1)"
"(vector-ref v_12 2)"
"(vector-ref v_12 3)"
"(vector-ref v_12 4))))"
"(syntax1.1"
"(syntax-content the-struct_13)"
"(syntax-scopes the-struct_13)"
"(syntax-shifted-multi-scopes the-struct_13)"
"(syntax-scope-propagations the-struct_13)"
"(syntax-mpi-shifts the-struct_13)"
" srcloc1_14"
"(syntax-props the-struct_13)"
"(syntax-inspector the-struct_13)"
"(syntax-tamper the-struct_13)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_13))))"
"(let-values() v_12)))))"
"(void)"
"(void)"
"(define-values"
"(reader-syntax->syntax)"
"(lambda(v_1)"
"(let-values(((s_2) v_1)"
"((f_3)"
"(lambda(tail?_5 v_6)"
"(if(1/syntax? v_6)"
"(let-values()"
"(let-values(((e_7)(syntax-e$2 v_6)))"
"(if(syntax?$1 e_7)"
"(let-values() e_7)"
"(let-values()"
"(let-values(((s_8)"
"(let-values(((the-struct_10) empty-syntax))"
"(if(syntax?$1 the-struct_10)"
"(let-values(((content1_11)(reader-syntax->syntax(syntax-e$2 v_6)))"
"((srcloc2_12)"
"(srcloc"
"(syntax-source$1 v_6)"
"(syntax-line$1 v_6)"
"(syntax-column$1 v_6)"
"(syntax-position$1 v_6)"
"(syntax-span$1 v_6)))"
"((props3_13)"
"(let-values(((tmp_14)"
"(1/syntax-property v_6 'paren-shape)))"
"(if(equal? tmp_14 '#\\[)"
"(let-values() original-square-props)"
"(if(equal? tmp_14 '#\\{)"
"(let-values() original-curly-props)"
"(let-values() original-props))))))"
"(syntax1.1"
" content1_11"
"(syntax-scopes the-struct_10)"
"(syntax-shifted-multi-scopes the-struct_10)"
"(syntax-scope-propagations the-struct_10)"
"(syntax-mpi-shifts the-struct_10)"
" srcloc2_12"
" props3_13"
"(syntax-inspector the-struct_10)"
"(syntax-tamper the-struct_10)))"
"                                                (raise-argument-error 'struct-copy \"syntax?\" the-struct_10)))))"
"(let-values(((keys_9)(syntax-property-symbol-keys$1 v_6)))"
"(if(null? keys_9)"
"(let-values() s_8)"
"(if(if(null?(cdr keys_9))(eq?(car keys_9) 'paren-shape) #f)"
"(let-values() s_8)"
"(let-values()"
"(let-values(((lst_15) keys_9))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(s_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((key_19)(unsafe-car lst_18)))"
"(let-values(((s_20)"
"(let-values(((s_21) s_17))"
"(let-values(((s_22)"
"(let-values()"
"(syntax-property$1"
" s_21"
" key_19"
"(1/syntax-property"
" v_6"
" key_19)"
" #t))))"
"(values s_22)))))"
"(for-loop_16 s_20(unsafe-cdr lst_18))))"
" s_17))))"
" for-loop_16)"
" s_8"
" lst_15))))))))))))"
"(let-values() v_6))))"
"((seen_4) #f))"
"((letrec-values(((loop_23)"
"(lambda(tail?_24 s_25 prev-depth_26)"
"(let-values(((depth_27)(add1 prev-depth_26)))"
"(if(if seen_4(> depth_27 32) #f)"
"(let-values()"
"(datum-map-slow tail?_24 s_25(lambda(tail?_28 s_29)(f_3 tail?_28 s_29)) seen_4))"
"(if(null? s_25)"
"(let-values()(f_3 tail?_24 s_25))"
"(if(pair? s_25)"
"(let-values()"
"(f_3"
" tail?_24"
"(cons(loop_23 #f(car s_25) depth_27)(loop_23 #t(cdr s_25) depth_27))))"
"(if(let-values(((or-part_30)(symbol? s_25)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(boolean? s_25)))"
"(if or-part_31 or-part_31(number? s_25)))))"
"(let-values()(f_3 #f s_25))"
"(if(let-values(((or-part_32)(vector? s_25)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)(box? s_25)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_34)(prefab-struct-key s_25)))"
"(if or-part_34 or-part_34(hash? s_25)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_24"
" s_25"
"(lambda(tail?_35 s_36)(f_3 tail?_35 s_36))"
" seen_4))"
"(let-values()(f_3 #f s_25)))))))))))"
" loop_23)"
" #f"
" s_2"
" 0))))"
"(define-values(original-props)(syntax-props(syntax-property$1 empty-syntax original-property-sym #t)))"
"(define-values"
"(original-square-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\[)))"
"(define-values"
"(original-curly-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\{)))"
"(void)"
"(void)"
"(define-values"
"(read-syntax$1)"
"(lambda(src_1 in_2)(let-values()(reader-syntax->syntax(read-syntax$2 src_1 in_2)))))"
"(define-values"
"(read-syntax/recursive$1)"
"(lambda(src_3 in_4 start_5 readtable_6 graph?_7)"
"(let-values()(reader-syntax->syntax(read-syntax/recursive$2 src_3 in_4 start_5 readtable_6 graph?_7)))))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-e)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-e \"syntax?\" s_1)))"
"(syntax-e$1 s_1))))"
"(define-values"
"(1/syntax->datum)"
"(lambda(s_2)"
"(begin"
"      (if (syntax?$1 s_2) (void) (let-values () (raise-argument-error 'syntax->datum \"syntax?\" s_2)))"
"(syntax->datum$1 s_2))))"
"(define-values(maybe-syntax->datum)(lambda(s_3)(if(syntax?$1 s_3)(syntax->datum$1 s_3) s_3)))"
"(define-values"
"(1/datum->syntax)"
"(let-values(((datum->syntax9_4)"
"(lambda(stx-c7_5 s8_6 stx-l1_7 stx-p2_8 ignored3_9 stx-l4_10 stx-p5_11 ignored6_12)"
"(let-values(((stx-c_13) stx-c7_5))"
"(let-values(((s_14) s8_6))"
"(let-values(((stx-l_15)(if stx-l4_10 stx-l1_7 #f)))"
"(let-values(((stx-p_16)(if stx-p5_11 stx-p2_8 #f)))"
"(let-values(((ignored_17)(if ignored6_12 ignored3_9 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_18)(not stx-c_13)))"
"(if or-part_18 or-part_18(syntax?$1 stx-c_13)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-c_13)))"
"(if(let-values(((or-part_19)(not stx-l_15)))"
"(if or-part_19"
" or-part_19"
"(let-values(((or-part_20)(syntax?$1 stx-l_15)))"
"(if or-part_20 or-part_20(encoded-srcloc? stx-l_15)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'datum->syntax"
"(string-append"
"                                      \"(or #f syntax?\\n\""
"                                      \"       (list/c any/c\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f))\\n\""
"                                      \"       (vector/c any/c\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)))\")"
" stx-l_15)))"
"(if(let-values(((or-part_21)(not stx-p_16)))"
"(if or-part_21 or-part_21(syntax?$1 stx-p_16)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-p_16)))"
"(datum->syntax$1 stx-c_13 s_14(to-srcloc-stx stx-l_15) stx-p_16)))))))))))"
"(case-lambda"
"((stx-c_22 s_23)(datum->syntax9_4 stx-c_22 s_23 #f #f #f #f #f #f))"
"((stx-c_24 s_25 stx-l_26 stx-p_27 ignored3_28)"
"(datum->syntax9_4 stx-c_24 s_25 stx-l_26 stx-p_27 ignored3_28 #t #t #t))"
"((stx-c_29 s_30 stx-l_31 stx-p2_32)(datum->syntax9_4 stx-c_29 s_30 stx-l_31 stx-p2_32 #f #t #t #f))"
"((stx-c_33 s_34 stx-l1_35)(datum->syntax9_4 stx-c_33 s_34 stx-l1_35 #f #f #t #f #f)))))"
"(define-values"
"(1/syntax->list)"
"(lambda(s_36)"
"(begin"
"      (if (syntax?$1 s_36) (void) (let-values () (raise-argument-error 'syntax->list \"syntax?\" s_36)))"
"(syntax->list$1 s_36))))"
"(define-values"
"(1/syntax-original?)"
"(lambda(s_37)"
"(begin"
"      (if (syntax?$1 s_37) (void) (let-values () (raise-argument-error 'syntax-original? \"syntax?\" s_37)))"
"(if(syntax-property$1 s_37 original-property-sym)(not(syntax-any-macro-scopes? s_37)) #f))))"
"(define-values"
"(1/bound-identifier=?)"
"(let-values(((bound-identifier=?15_38)"
"(lambda(a13_39 b14_40 phase11_41 phase12_42)"
"(let-values(((a_43) a13_39))"
"(let-values(((b_44) b14_40))"
"(let-values(((phase_45)(if phase12_42 phase11_41(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? a_43)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" a_43)))"
"(if(identifier? b_44)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" b_44)))"
"(if(phase? phase_45)"
"(void)"
"(let-values()(raise-argument-error 'bound-identifier=? phase?-string phase_45)))"
"(bound-identifier=?$1 a_43 b_44 phase_45)))))))))"
"(case-lambda"
"((a_46 b_47)(bound-identifier=?15_38 a_46 b_47 #f #f))"
"((a_48 b_49 phase11_50)(bound-identifier=?15_38 a_48 b_49 phase11_50 #t)))))"
"(define-values"
"(1/free-identifier=?)"
"(let-values(((free-identifier=?23_51)"
"(lambda(a21_52 b22_53 a-phase17_54 b-phase18_55 a-phase19_56 b-phase20_57)"
"(let-values(((a_58) a21_52))"
"(let-values(((b_59) b22_53))"
"(let-values(((a-phase_60)(if a-phase19_56 a-phase17_54(1/syntax-local-phase-level))))"
"(let-values(((b-phase_61)(if b-phase20_57 b-phase18_55 a-phase_60)))"
"(let-values()"
"(begin"
"(if(identifier? a_58)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" a_58)))"
"(if(identifier? b_59)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" b_59)))"
"(if(phase? a-phase_60)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string a-phase_60)))"
"(if(phase? b-phase_61)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string b-phase_61)))"
"(free-identifier=?$1 a_58 b_59 a-phase_60 b-phase_61))))))))))"
"(case-lambda"
"((a_62 b_63)(free-identifier=?23_51 a_62 b_63 #f #f #f #f))"
"((a_64 b_65 a-phase_66 b-phase18_67)(free-identifier=?23_51 a_64 b_65 a-phase_66 b-phase18_67 #t #t))"
"((a_68 b_69 a-phase17_70)(free-identifier=?23_51 a_68 b_69 a-phase17_70 #f #t #f)))))"
"(define-values"
"(1/free-transformer-identifier=?)"
"(lambda(a_71 b_72)"
"(let-values((()"
"(begin"
"(if(identifier? a_71)"
"(void)"
"                      (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" a_71)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_72)"
"(void)"
"                        (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" b_72)))"
"(values))))"
"(let-values(((phase_73)(add1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_71 b_72 phase_73 phase_73))))))"
"(define-values"
"(1/free-template-identifier=?)"
"(lambda(a_74 b_75)"
"(let-values((()"
"(begin"
"(if(identifier? a_74)"
"(void)"
"                      (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" a_74)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_75)"
"(void)"
"                        (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" b_75)))"
"(values))))"
"(let-values(((phase_76)(sub1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_74 b_75 phase_76 phase_76))))))"
"(define-values"
"(1/free-label-identifier=?)"
"(lambda(a_77 b_78)"
"(begin"
"      (if (identifier? a_77) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" a_77)))"
"      (if (identifier? b_78) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" b_78)))"
"(free-identifier=?$1 a_77 b_78 #f #f))))"
"(define-values"
"(1/identifier-binding)"
"(let-values(((identifier-binding30_79)"
"(lambda(id29_80 phase25_81 top-level-symbol?26_82 phase27_83 top-level-symbol?28_84)"
"(let-values(((id_85) id29_80))"
"(let-values(((phase_86)(if phase27_83 phase25_81(1/syntax-local-phase-level))))"
"(let-values(((top-level-symbol?_87)(if top-level-symbol?28_84 top-level-symbol?26_82 #f)))"
"(let-values()"
"(begin"
"(if(identifier? id_85)"
"(void)"
"                              (let-values () (raise-argument-error 'identifier-binding \"identifier?\" id_85)))"
"(if(phase? phase_86)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding phase?-string phase_86)))"
"(identifier-binding$1 id_85 phase_86 top-level-symbol?_87)))))))))"
"(case-lambda"
"((id_88)(identifier-binding30_79 id_88 #f #f #f #f))"
"((id_89 phase_90 top-level-symbol?26_91)(identifier-binding30_79 id_89 phase_90 top-level-symbol?26_91 #t #t))"
"((id_92 phase25_93)(identifier-binding30_79 id_92 phase25_93 #f #t #f)))))"
"(define-values"
"(1/identifier-transformer-binding)"
"(let-values(((identifier-transformer-binding35_94)"
"(lambda(id34_95 phase32_96 phase33_97)"
"(let-values(((id_98) id34_95))"
"(let-values(((phase_99)(if phase33_97 phase32_96(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_98)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-transformer-binding \"identifier?\" id_98)))"
"(identifier-binding$1 id_98(if phase_99(add1 phase_99) #f)))))))))"
"(case-lambda"
"((id_100)(identifier-transformer-binding35_94 id_100 #f #f))"
"((id_101 phase32_102)(identifier-transformer-binding35_94 id_101 phase32_102 #t)))))"
"(define-values"
"(1/identifier-template-binding)"
"(lambda(id_103)"
"(begin"
"(if(identifier? id_103)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-template-binding \"identifier?\" id_103)))"
"(identifier-binding$1 id_103(sub1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-label-binding)"
"(lambda(id_104)"
"(begin"
"(if(identifier? id_104)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-label-binding \"identifier?\" id_104)))"
"(identifier-binding$1 id_104 #f))))"
"(define-values"
"(1/identifier-binding-symbol)"
"(let-values(((identifier-binding-symbol40_105)"
"(lambda(id39_106 phase37_107 phase38_108)"
"(let-values(((id_109) id39_106))"
"(let-values(((phase_110)(if phase38_108 phase37_107(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_109)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding-symbol \"identifier?\" id_109)))"
"(if(phase? phase_110)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding-symbol phase?-string phase_110)))"
"(identifier-binding-symbol$1 id_109 phase_110))))))))"
"(case-lambda"
"((id_111)(identifier-binding-symbol40_105 id_111 #f #f))"
"((id_112 phase37_113)(identifier-binding-symbol40_105 id_112 phase37_113 #t)))))"
"(define-values"
"(1/identifier-prune-lexical-context)"
"(let-values(((identifier-prune-lexical-context45_114)"
"(lambda(id44_115 syms42_116 syms43_117)"
"(let-values(((id_118) id44_115))"
"(let-values(((syms_119)(if syms43_117 syms42_116 null)))"
"(let-values()"
"(begin"
"(if(identifier? id_118)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"identifier?\" id_118)))"
"(if(if(list? syms_119)(andmap2 symbol? syms_119) #f)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"(listof symbol?)\" syms_119)))"
" id_118)))))))"
"(case-lambda"
"((id_120)(identifier-prune-lexical-context45_114 id_120 #f #f))"
"((id_121 syms42_122)(identifier-prune-lexical-context45_114 id_121 syms42_122 #t)))))"
"(define-values"
"(1/syntax-debug-info)"
"(let-values(((syntax-debug-info52_123)"
"(lambda(s51_124 phase47_125 all-bindings?48_126 phase49_127 all-bindings?50_128)"
"(let-values(((s_129) s51_124))"
"(let-values(((phase_130)(if phase49_127 phase47_125(1/syntax-local-phase-level))))"
"(let-values(((all-bindings?_131)(if all-bindings?50_128 all-bindings?48_126 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_129)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-debug-info \"syntax?\" s_129)))"
"(if(phase? phase_130)"
"(void)"
"(let-values()(raise-argument-error 'syntax-debug-info phase?-string phase_130)))"
"(syntax-debug-info$1 s_129 phase_130 all-bindings?_131)))))))))"
"(case-lambda"
"((s_132)(syntax-debug-info52_123 s_132 #f #f #f #f))"
"((s_133 phase_134 all-bindings?48_135)(syntax-debug-info52_123 s_133 phase_134 all-bindings?48_135 #t #t))"
"((s_136 phase47_137)(syntax-debug-info52_123 s_136 phase47_137 #f #t #f)))))"
"(define-values"
"(1/syntax-shift-phase-level)"
"(lambda(s_138 phase_139)"
"(begin"
"      (if (syntax?$1 s_138) (void) (let-values () (raise-argument-error 'syntax-shift-phase-level \"syntax?\" s_138)))"
"(if(phase? phase_139)"
"(void)"
"(let-values()(raise-argument-error 'syntax-shift-phase-level phase?-string phase_139)))"
"(syntax-shift-phase-level$1 s_138 phase_139))))"
"(define-values"
"(1/syntax-track-origin)"
"(lambda(new-stx_140 old-stx_141 id_142)"
"(let-values((()"
"(begin"
"(if(syntax?$1 new-stx_140)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" new-stx_140)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(syntax?$1 old-stx_141)"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" old-stx_141)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? id_142)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-track-origin \"identifier?\" id_142)))"
"(values))))"
"(let-values(((s_143)(syntax-track-origin$1 new-stx_140 old-stx_141 id_142)))"
"(let-values(((ctx_144)"
"(let-values(((temp72_146) #t))(get-current-expand-context15.1 temp72_146 #t #f #f))))"
"(begin"
"(if ctx_144"
"(let-values()"
"(let-values(((obs_147)(expand-context-observer ctx_144)))"
"(if obs_147"
"(let-values()(let-values()(call-expand-observe obs_147 'track-origin s_143)))"
"(void))))"
"(void))"
" s_143))))))))"
"(define-values"
"(1/read-syntax)"
"(let-values(((read-syntax58_148)"
"(lambda(src54_149 in55_150 src56_151 in57_152)"
"(let-values(((src_153)(if src56_151 src54_149(object-name(current-input-port)))))"
"(let-values(((in_154)(if in57_152 in55_150(current-input-port))))"
"(let-values()"
"(begin"
"(if(input-port? in_154)"
"(void)"
"                            (let-values () (raise-argument-error 'read-syntax \"input-port?\" in_154)))"
"(read-syntax$1 src_153 in_154))))))))"
"(case-lambda"
"(()(read-syntax58_148 #f #f #f #f))"
"((src_155 in55_156)(read-syntax58_148 src_155 in55_156 #t #t))"
"((src54_157)(read-syntax58_148 src54_157 #f #t #f)))))"
"(define-values"
"(1/read-syntax/recursive)"
"(let-values(((read-syntax/recursive70_158)"
"(lambda(src60_159"
" in61_160"
" start62_161"
" readtable63_162"
" graph?64_163"
" src65_164"
" in66_165"
" start67_166"
" readtable68_167"
" graph?69_168)"
"(let-values(((src_169)(if src65_164 src60_159(object-name(current-input-port)))))"
"(let-values(((in_170)(if in66_165 in61_160(current-input-port))))"
"(let-values(((start_171)(if start67_166 start62_161 #f)))"
"(let-values(((readtable_172)(if readtable68_167 readtable63_162(current-readtable))))"
"(let-values(((graph?_173)(if graph?69_168 graph?64_163 #t)))"
"(let-values()"
"(begin"
"(if(input-port? in_170)"
"(void)"
"                                  (let-values () (raise-argument-error 'read-syntax/recursive \"input-port?\" in_170)))"
"(if(let-values(((or-part_174)(char? start_171)))"
"(if or-part_174 or-part_174(not start_171)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c char? #f)\" start_171)))"
"(if(let-values(((or-part_175)(readtable? readtable_172)))"
"(if or-part_175 or-part_175(not readtable_172)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c readtable? #f)\" readtable_172)))"
"(read-syntax/recursive$1 src_169 in_170 start_171 readtable_172 graph?_173)))))))))))"
"(case-lambda"
"(()(read-syntax/recursive70_158 #f #f #f #f #f #f #f #f #f #f))"
"((src_176 in_177 start_178 readtable_179 graph?64_180)"
"(read-syntax/recursive70_158 src_176 in_177 start_178 readtable_179 graph?64_180 #t #t #t #t #t))"
"((src_181 in_182 start_183 readtable63_184)"
"(read-syntax/recursive70_158 src_181 in_182 start_183 readtable63_184 #f #t #t #t #t #f))"
"((src_185 in_186 start62_187)(read-syntax/recursive70_158 src_185 in_186 start62_187 #f #f #t #t #t #f #f))"
"((src_188 in61_189)(read-syntax/recursive70_158 src_188 in61_189 #f #f #f #t #t #f #f #f))"
"((src60_190)(read-syntax/recursive70_158 src60_190 #f #f #f #f #t #f #f #f #f)))))"
"(void)"
"(void)"
"(define-values"
"(1/namespace-attach-module)"
"(let-values(((namespace-attach-module5_1)"
"(lambda(src-namespace3_2 mod-path4_3 dest-namespace1_4 dest-namespace2_5)"
"(let-values(((src-namespace_6) src-namespace3_2))"
"(let-values(((mod-path_7) mod-path4_3))"
"(let-values(((dest-namespace_8)(if dest-namespace2_5 dest-namespace1_4(1/current-namespace))))"
"(let-values()"
"(let-values(((temp22_10) 'namespace-attach-module)"
"((src-namespace23_11) src-namespace_6)"
"((mod-path24_12) mod-path_7)"
"((dest-namespace25_13) dest-namespace_8)"
"((temp26_14) #t))"
"(do-attach-module19.1"
" temp26_14"
" #t"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13)))))))))"
"(case-lambda"
"((src-namespace_15 mod-path_16)(namespace-attach-module5_1 src-namespace_15 mod-path_16 #f #f))"
"((src-namespace_17 mod-path_18 dest-namespace1_19)"
"(namespace-attach-module5_1 src-namespace_17 mod-path_18 dest-namespace1_19 #t)))))"
"(define-values"
"(1/namespace-attach-module-declaration)"
"(let-values(((namespace-attach-module-declaration11_20)"
"(lambda(src-namespace9_21 mod-path10_22 dest-namespace7_23 dest-namespace8_24)"
"(let-values(((src-namespace_25) src-namespace9_21))"
"(let-values(((mod-path_26) mod-path10_22))"
"(let-values(((dest-namespace_27)"
"(if dest-namespace8_24 dest-namespace7_23(1/current-namespace))))"
"(let-values()"
"(let-values(((temp27_29) 'namespace-attach-module-declaration)"
"((src-namespace28_30) src-namespace_25)"
"((mod-path29_31) mod-path_26)"
"((dest-namespace30_32) dest-namespace_27)"
"((temp31_33) #f))"
"(do-attach-module19.1"
" temp31_33"
" #t"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32)))))))))"
"(case-lambda"
"((src-namespace_34 mod-path_35)(namespace-attach-module-declaration11_20 src-namespace_34 mod-path_35 #f #f))"
"((src-namespace_36 mod-path_37 dest-namespace7_38)"
"(namespace-attach-module-declaration11_20 src-namespace_36 mod-path_37 dest-namespace7_38 #t)))))"
"(define-values"
"(do-attach-module19.1)"
"(lambda(attach-instances?13_39 attach-instances?14_40 who15_41 src-namespace16_42 mod-path17_43 dest-namespace18_44)"
"(let-values(((who_45) who15_41))"
"(let-values(((src-namespace_46) src-namespace16_42))"
"(let-values(((mod-path_47) mod-path17_43))"
"(let-values(((dest-namespace_48) dest-namespace18_44))"
"(let-values(((attach-instances?_49)(if attach-instances?14_40 attach-instances?13_39 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? src-namespace_46)"
"(void)"
"                                  (let-values () (raise-argument-error who_45 \"namespace?\" src-namespace_46)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_54)(1/module-path? mod-path_47)))"
"(if or-part_54 or-part_54(1/resolved-module-path? mod-path_47)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_45"
"                                       \"(or/c module-path? resolved-module-path?)\""
" mod-path_47)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? dest-namespace_48)"
"(void)"
"                                      (let-values () (raise-argument-error who_45 \"namespace?\" dest-namespace_48)))"
"(values))))"
"(let-values(((phase_50)(namespace-phase src-namespace_46)))"
"(let-values((()"
"(begin"
"(if(eqv? phase_50(namespace-phase dest-namespace_48))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                             \"source and destination namespace phases do not match\""
"                                             \"source phase\""
" phase_50"
"                                             \"destination phase\""
"(namespace-phase dest-namespace_48))))"
"(values))))"
"(let-values(((todo_51)(make-hasheq)))"
"(let-values(((missing_52)(gensym 'missing)))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_55)"
"(lambda(mpi_56"
" phase_57"
" attach-instances?_58"
" attach-phase_59)"
"(let-values(((mod-name_60)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(1/module-path-index-resolve"
" mpi_56)))))"
"(let-values(((attach-this-instance?_61)"
"(if attach-instances?_58"
"(eqv? phase_57 attach-phase_59)"
" #f)))"
"(let-values(((m-ns_62)"
"(hash-ref"
"(hash-ref"
" todo_51"
" mod-name_60"
" '#hasheqv())"
" phase_57"
" missing_52)))"
"(if(let-values(((or-part_63)"
"(eq? missing_52 m-ns_62)))"
"(if or-part_63"
" or-part_63"
"(if attach-this-instance?_61"
"(not m-ns_62)"
" #f)))"
"(let-values()"
"(let-values(((m_64)"
"(namespace->module"
" src-namespace_46"
" mod-name_60)))"
"(begin"
"(if m_64"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                     \"module not declared (in the source namespace)\""
"                                                                                     \"module name\""
" mod-name_60)))"
"(if(if(module-cross-phase-persistent?"
" m_64)"
"(if(not(label-phase? phase_57))"
"(not(zero-phase? phase_57))"
" #f)"
" #f)"
"(let-values()"
"(loop_55"
" mpi_56"
" 0"
" attach-instances?_58"
" 0))"
"(let-values()"
"(let-values(((already-m_65)"
"(namespace->module"
" dest-namespace_48"
" mod-name_60)))"
"(let-values((()"
"(begin"
"(if(if already-m_65"
"(not"
"(eq?"
" already-m_65"
" m_64))"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                           \"a different declaration is already in the destination namespace\""
"                                                                                                           \"module name\""
" mod-name_60))"
"(void))"
"(values))))"
"(let-values(((m-ns_66"
" already?_67)"
"(if attach-this-instance?_61"
"(let-values()"
"(let-values(((m-ns_68)"
"(let-values(((src-namespace32_70)"
" src-namespace_46)"
"((mod-name33_71)"
" mod-name_60)"
"((phase34_72)"
" phase_57))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace32_70"
" mod-name33_71"
" phase34_72))))"
"(let-values((()"
"(begin"
"(if m-ns_68"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                                 \"module not instantiated (in the source namespace)\""
"                                                                                                                                 \"module name\""
" mod-name_60)))"
"(values))))"
"(let-values(((already-m-ns_69)"
"(if already-m_65"
"(let-values(((dest-namespace35_73)"
" dest-namespace_48)"
"((mod-name36_74)"
" mod-name_60)"
"((phase37_75)"
" phase_57))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace35_73"
" mod-name36_74"
" phase37_75))"
" #f)))"
"(begin"
"(if(if already-m-ns_69"
"(if(not"
"(eq?"
" m-ns_68"
" already-m-ns_69))"
"(not"
"(namespace-same-instance?"
" m-ns_68"
" already-m-ns_69))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                       \"a different instance is already in the destination namespace\""
"                                                                                                                       \"module name\""
" mod-name_60))"
"(void))"
"(values"
" m-ns_68"
"(if already-m-ns_69"
" #t"
" #f)))))))"
"(let-values()"
"(begin"
"(if(if(label-phase?"
" phase_57)"
"(not"
"(let-values(((src-namespace38_76)"
" src-namespace_46)"
"((mod-name39_77)"
" mod-name_60)"
"((phase40_78)"
" phase_57))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace38_76"
" mod-name39_77"
" phase40_78)))"
" #f)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(let-values(((src-namespace41_79)"
" src-namespace_46)"
"((mpi42_80)"
" mpi_56)"
"((phase43_81)"
" phase_57))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace41_79"
" mpi42_80"
" phase43_81)))))"
"(void))"
"(values"
" #f"
"(if already-m_65"
" #t"
" #f)))))))"
"(begin"
"(hash-update!"
" todo_51"
" mod-name_60"
"(lambda(ht_82)"
"(hash-set"
" ht_82"
" phase_57"
" m-ns_66))"
" '#hasheqv())"
"(if already?_67"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_83)"
"(module-requires"
" m_64)))"
"(begin"
"(if(list? lst_83)"
"(void)"
"(let-values()"
"(in-list"
" lst_83)))"
"((letrec-values(((for-loop_84)"
"(lambda(fold-var_85"
" lst_86)"
"(if(pair?"
" lst_86)"
"(let-values(((phase+reqs_87)"
"(unsafe-car"
" lst_86)))"
"(let-values(((fold-var_88)"
"(let-values(((lst_89)"
"(cdr"
" phase+reqs_87)))"
"(begin"
"(if(list?"
" lst_89)"
"(void)"
"(let-values()"
"(in-list"
" lst_89)))"
"((letrec-values(((for-loop_90)"
"(lambda(fold-var_91"
" lst_92)"
"(if(pair?"
" lst_92)"
"(let-values(((req_93)"
"(unsafe-car"
" lst_92)))"
"(let-values(((fold-var_94)"
"(let-values()"
"(let-values(((fold-var_96)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_55"
"(module-path-index-shift"
" req_93"
"(module-self"
" m_64)"
" mpi_56)"
"(phase+"
" phase_57"
"(car"
" phase+reqs_87))"
" attach-instances?_58"
" attach-phase_59))"
"(void)))))"
"(values"
" fold-var_96)))))"
"(for-loop_90"
" fold-var_94"
"(unsafe-cdr"
" lst_92))))"
" fold-var_91))))"
" for-loop_90)"
" fold-var_85"
" lst_89)))))"
"(for-loop_84"
" fold-var_88"
"(unsafe-cdr"
" lst_86))))"
" fold-var_85))))"
" for-loop_84)"
"(void)"
" lst_83)))"
"(let-values(((lst_97)"
"(module-submodule-names"
" m_64)))"
"(begin"
"(if(list? lst_97)"
"(void)"
"(let-values()"
"(in-list"
" lst_97)))"
"((letrec-values(((for-loop_98)"
"(lambda(fold-var_99"
" lst_100)"
"(if(pair?"
" lst_100)"
"(let-values(((submod-name_101)"
"(unsafe-car"
" lst_100)))"
"(let-values(((fold-var_102)"
"(let-values()"
"(let-values(((fold-var_104)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_55"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                                                                                     \".\""
" submod-name_101)"
" mpi_56)"
" #f"
" #f"
" attach-phase_59))"
"(void)))))"
"(values"
" fold-var_104)))))"
"(for-loop_98"
" fold-var_102"
"(unsafe-cdr"
" lst_100))))"
" fold-var_99))))"
" for-loop_98)"
"(void)"
" lst_97)))"
"(if(module-supermodule-name"
" m_64)"
"(let-values()"
"(loop_55"
"(1/module-path-index-join"
"                                                                                                        '(submod \"..\")"
" mpi_56)"
" #f"
" #f"
" attach-phase_59))"
"(void))))))))))))))"
"(void))))))))"
" loop_55)"
"(1/module-path-index-join"
"(if(1/resolved-module-path? mod-path_47)"
"(resolved-module-path->module-path mod-path_47)"
" mod-path_47)"
" #f)"
" phase_50"
" attach-instances?_49"
" phase_50)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ht_105) todo_51))"
"(begin"
"(if((lambda(ht_106)(hash? ht_106)) ht_105)"
"(void)"
"(let-values()(default-in-hash ht_105)))"
"((letrec-values(((for-loop_107)"
"(lambda(fold-var_108 i_109)"
"(if i_109"
"(let-values(((mod-name_110 phases_111)"
"(hash-iterate-key+value"
" ht_105"
" i_109)))"
"(let-values(((fold-var_112)"
"(let-values(((ht_113)"
" phases_111))"
"(begin"
"(if((lambda(ht_114)"
"(hash? ht_114))"
" ht_113)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_113)))"
"((letrec-values(((for-loop_115)"
"(lambda(fold-var_116"
" i_117)"
"(if i_117"
"(let-values(((phase_118"
" m-ns_119)"
"(hash-iterate-key+value"
" ht_113"
" i_117)))"
"(let-values(((fold-var_120)"
"(let-values()"
"(let-values(((fold-var_122)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_123)"
"(namespace->module"
" src-namespace_46"
" mod-name_110)))"
"(begin"
"(let-values(((dest-namespace44_124)"
" dest-namespace_48)"
"((m45_125)"
" m_123)"
"((mod-name46_126)"
" mod-name_110))"
"(declare-module!56.1"
" #f"
" #f"
" dest-namespace44_124"
" m45_125"
" mod-name46_126))"
"(if m-ns_119"
"(let-values()"
"(begin"
"(namespace-record-module-instance-attached!"
" src-namespace_46"
" mod-name_110"
" phase_118)"
"(let-values(((or-part_127)"
"(let-values(((dest-namespace47_128)"
" dest-namespace_48)"
"((mod-name48_129)"
" mod-name_110)"
"((phase49_130)"
" phase_118))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace47_128"
" mod-name48_129"
" phase49_130))))"
"(if or-part_127"
" or-part_127"
"(namespace-install-module-namespace!"
" dest-namespace_48"
" mod-name_110"
" phase_118"
" m_123"
" m-ns_119)))))"
"(void)))))"
"(void)))))"
"(values"
" fold-var_122)))))"
"(for-loop_115"
" fold-var_120"
"(hash-iterate-next"
" ht_113"
" i_117))))"
" fold-var_116))))"
" for-loop_115)"
" fold-var_108"
"(hash-iterate-first"
" ht_113))))))"
"(for-loop_107"
" fold-var_112"
"(hash-iterate-next ht_105 i_109))))"
" fold-var_108))))"
" for-loop_107)"
"(void)"
"(hash-iterate-first ht_105))))"
"(values))))"
"(let-values(((mnr_53)(1/current-module-name-resolver)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" dest-namespace_48)"
"(let-values()"
"(let-values(((ht_131) todo_51))"
"(begin"
"(if((lambda(ht_132)(hash? ht_132)) ht_131)"
"(void)"
"(let-values()(default-in-hash-keys ht_131)))"
"((letrec-values(((for-loop_133)"
"(lambda(fold-var_134 i_135)"
"(if i_135"
"(let-values(((mod-name_136)"
"(hash-iterate-key ht_131 i_135)))"
"(let-values(((fold-var_137)"
"(let-values()"
"(let-values(((fold-var_139)"
"(let-values()"
"(begin"
"(let-values()"
"(mnr_53"
" mod-name_136"
" src-namespace_46))"
"(void)))))"
"(values fold-var_139)))))"
"(for-loop_133"
" fold-var_137"
"(hash-iterate-next ht_131 i_135))))"
" fold-var_134))))"
" for-loop_133)"
"(void)"
"(hash-iterate-first ht_131))))))))))))))))))))))))"
"(void)"
"(void)"
"(define-values"
"(1/make-empty-namespace)"
"(lambda()"
"(let-values(((current-ns_1)(1/current-namespace)))"
"(let-values(((phase_2)(namespace-phase current-ns_1)))"
"(let-values(((ns_3)(namespace->namespace-at-phase(make-namespace) phase_2)))"
"(begin"
"(1/namespace-attach-module current-ns_1 ''#%kernel ns_3)"
"(namespace-primitive-module-visit! ns_3 '#%kernel)"
" ns_3))))))"
"(define-values"
"(1/namespace-syntax-introduce)"
"(let-values(((namespace-syntax-introduce4_4)"
"(lambda(s3_5 ns1_6 ns2_7)"
"(let-values(((s_8) s3_5))"
"(let-values(((ns_9)(if ns2_7 ns1_6(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'namespace-syntax-introduce \"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_9)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-syntax-introduce \"namespace?\" ns_9)))"
"(values))))"
"(let-values(((root-ctx_10)(namespace-get-root-expand-ctx ns_9)))"
"(let-values(((post-scope_11)(root-expand-context-post-expansion-scope root-ctx_10)))"
"(let-values(((other-namespace-scopes_12)"
"(alt-reverse"
"(let-values(((ht_15)"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx root-ctx_10)"
"(namespace-phase ns_9))))"
"(begin"
"(if((lambda(ht_16)(if(hash? ht_16)(immutable? ht_16) #f)) ht_15)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_18 i_19)"
"(if i_19"
"(let-values(((sc_20)"
"(unsafe-immutable-hash-iterate-key"
" ht_15"
" i_19)))"
"(let-values(((fold-var_21)"
"(let-values(((fold-var_22)"
" fold-var_18))"
"(if(equal?"
" sc_20"
" post-scope_11)"
" fold-var_22"
"(let-values(((fold-var_23)"
" fold-var_22))"
"(let-values(((fold-var_24)"
"(let-values()"
"(cons"
"(let-values()"
" sc_20)"
" fold-var_23))))"
"(values"
" fold-var_24)))))))"
"(for-loop_17"
" fold-var_21"
"(unsafe-immutable-hash-iterate-next"
" ht_15"
" i_19))))"
" fold-var_18))))"
" for-loop_17)"
" null"
"(unsafe-immutable-hash-iterate-first ht_15)))))))"
"(let-values(((add-ns-scopes_13)"
"(lambda(s_25)"
"(let-values(((temp78_27)"
"(add-scopes"
"(push-scope s_25 post-scope_11)"
" other-namespace-scopes_12))"
"((temp79_28)"
"(root-expand-context-all-scopes-stx root-ctx_10))"
"((temp80_29)"
"(let-values(((or-part_31)"
"(namespace-declaration-inspector ns_9)))"
"(if or-part_31 or-part_31(current-code-inspector))))"
"((temp81_30) #t))"
"(syntax-transfer-shifts39.1"
" temp81_30"
" #t"
" temp78_27"
" temp79_28"
" temp80_29"
" #t)))))"
"(let-values(((maybe-module-id_14)"
"(if(pair?(1/syntax-e s_8))"
"(if(identifier?(car(1/syntax-e s_8)))"
"(add-ns-scopes_13(car(1/syntax-e s_8)))"
" #f)"
" #f)))"
"(if(if maybe-module-id_14"
"(1/free-identifier=?"
" maybe-module-id_14"
"(1/namespace-module-identifier ns_9))"
" #f)"
"(let-values()"
"(1/datum->syntax"
" s_8"
"(cons maybe-module-id_14(cdr(1/syntax-e s_8)))"
" s_8"
" s_8))"
"(let-values()(add-ns-scopes_13 s_8))))))))))))))))"
"(case-lambda"
"((s_32)(namespace-syntax-introduce4_4 s_32 #f #f))"
"((s_33 ns1_34)(namespace-syntax-introduce4_4 s_33 ns1_34 #t)))))"
"(define-values"
"(1/namespace-module-identifier)"
"(let-values(((namespace-module-identifier8_35)"
"(lambda(where6_36 where7_37)"
"(let-values(((where_38)(if where7_37 where6_36(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_39)(1/namespace? where_38)))"
"(if or-part_39 or-part_39(phase? where_38)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-module-identifier"
"                             (string-append \"(or/c namespace? \" phase?-string \")\")"
" where_38)))"
"(1/datum->syntax"
"(1/syntax-shift-phase-level"
" core-stx"
"(if(1/namespace? where_38)(namespace-phase where_38) where_38))"
" 'module)))))))"
"(case-lambda"
"(()(namespace-module-identifier8_35 #f #f))"
"((where6_40)(namespace-module-identifier8_35 where6_40 #t)))))"
"(define-values"
"(1/namespace-symbol->identifier)"
"(lambda(sym_41)"
"(begin"
"      (if (symbol? sym_41) (void) (let-values () (raise-argument-error 'namespace-symbol->identifier \"symbol?\" sym_41)))"
"(1/namespace-syntax-introduce(1/datum->syntax #f sym_41)))))"
"(define-values"
"(do-namespace-require23.1)"
"(lambda(copy-variable-as-constant?13_42"
" copy-variable-as-constant?18_43"
" copy-variable-phase-level12_44"
" copy-variable-phase-level17_45"
" run?10_46"
" run?15_47"
" skip-variable-phase-level14_48"
" skip-variable-phase-level19_49"
" visit?11_50"
" visit?16_51"
" who20_52"
" req21_53"
" ns22_54)"
"(let-values(((run?_55)(if run?15_47 run?10_46 #t)))"
"(let-values(((visit?_56)(if visit?16_51 visit?11_50 #f)))"
"(let-values(((who_57) who20_52))"
"(let-values(((req_58) req21_53))"
"(let-values(((ns_59) ns22_54))"
"(let-values(((copy-variable-phase-level_60)"
"(if copy-variable-phase-level17_45 copy-variable-phase-level12_44 #f)))"
"(let-values(((copy-variable-as-constant?_61)"
"(if copy-variable-as-constant?18_43 copy-variable-as-constant?13_42 #f)))"
"(let-values(((skip-variable-phase-level_62)"
"(if skip-variable-phase-level19_49 skip-variable-phase-level14_48 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_59)"
"(void)"
"                                        (let-values () (raise-argument-error who_57 \"namespace?\" ns_59)))"
"(values))))"
"(let-values(((ctx-stx_63)"
"(add-scopes"
" empty-syntax"
"(root-expand-context-module-scopes(namespace-get-root-expand-ctx ns_59)))))"
"(if(let-values(((or-part_64)(1/module-path-index? req_58)))"
"(if or-part_64 or-part_64(1/module-path? req_58)))"
"(let-values()"
"(let-values(((temp82_66)"
"(if(1/module-path-index? req_58)"
" req_58"
"(1/module-path-index-join req_58 #f)))"
"((temp83_67) #f)"
"((temp84_68) #f)"
"((ctx-stx85_69) ctx-stx_63)"
"((ns86_70) ns_59)"
"((run?87_71) run?_55)"
"((visit?88_72) visit?_56)"
"((temp89_73)(namespace-phase ns_59))"
"((temp90_74)(namespace-phase ns_59))"
"((copy-variable-phase-level91_75) copy-variable-phase-level_60)"
"((copy-variable-as-constant?92_76) copy-variable-as-constant?_61)"
"((skip-variable-phase-level93_77) skip-variable-phase-level_62)"
"((who94_78) who_57))"
"(perform-require!74.1"
" #f"
" #f"
" #f"
" #f"
" copy-variable-as-constant?92_76"
" #t"
" copy-variable-phase-level91_75"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp89_73"
" #f"
" #f"
" temp90_74"
" run?87_71"
" #t"
" skip-variable-phase-level93_77"
" #t"
" visit?88_72"
" #t"
" who94_78"
" temp82_66"
" temp83_67"
" temp84_68"
" ctx-stx85_69"
" ns86_70)))"
"(let-values()"
"(let-values(((run?95_80) run?_55)"
"((visit?96_81) visit?_56)"
"((temp97_82)(list(1/datum->syntax ctx-stx_63 req_58)))"
"((temp98_83) #f)"
"((ns99_84) ns_59)"
"((temp100_85)(namespace-phase ns_59))"
"((temp101_86)(make-requires+provides #f))"
"((skip-variable-phase-level102_87) skip-variable-phase-level_62)"
"((who103_88) who_57))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" run?95_80"
" #t"
" #f"
" #f"
" skip-variable-phase-level102_87"
" #t"
" visit?96_81"
" #t"
" who103_88"
" temp97_82"
" temp98_83"
" ns99_84"
" temp100_85"
" temp101_86)))))))))))))))))"
"(define-values"
"(1/namespace-require)"
"(let-values(((namespace-require29_133)"
"(lambda(req28_134 ns26_135 ns27_136)"
"(let-values(((req_137) req28_134))"
"(let-values(((ns_138)(if ns27_136 ns26_135(1/current-namespace))))"
"(let-values()"
"(let-values(((temp104_139) 'namespace-require)((req105_140) req_137)((ns106_141) ns_138))"
"(do-namespace-require23.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp104_139"
" req105_140"
" ns106_141))))))))"
"(case-lambda"
"((req_142)(namespace-require29_133 req_142 #f #f))"
"((req_143 ns26_144)(namespace-require29_133 req_143 ns26_144 #t)))))"
"(define-values"
"(1/namespace-require/expansion-time)"
"(let-values(((namespace-require/expansion-time34_145)"
"(lambda(req33_146 ns31_147 ns32_148)"
"(let-values(((req_149) req33_146))"
"(let-values(((ns_150)(if ns32_148 ns31_147(1/current-namespace))))"
"(let-values()"
"(let-values(((temp107_152) #f)"
"((temp108_153) #t)"
"((temp109_154) 'namespace-require/expansion-time)"
"((req110_155) req_149)"
"((ns111_156) ns_150))"
"(do-namespace-require23.1"
" #f"
" #f"
" #f"
" #f"
" temp107_152"
" #t"
" #f"
" #f"
" temp108_153"
" #t"
" temp109_154"
" req110_155"
" ns111_156))))))))"
"(case-lambda"
"((req_157)(namespace-require/expansion-time34_145 req_157 #f #f))"
"((req_158 ns31_159)(namespace-require/expansion-time34_145 req_158 ns31_159 #t)))))"
"(define-values"
"(1/namespace-require/constant)"
"(let-values(((namespace-require/constant39_160)"
"(lambda(req38_161 ns36_162 ns37_163)"
"(let-values(((req_164) req38_161))"
"(let-values(((ns_165)(if ns37_163 ns36_162(1/current-namespace))))"
"(let-values()"
"(let-values(((temp112_167) 'namespace-require/constant)"
"((req113_168) req_164)"
"((ns114_169) ns_165)"
"((temp115_170) 0)"
"((temp116_171) #t))"
"(do-namespace-require23.1"
" temp116_171"
" #t"
" temp115_170"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp112_167"
" req113_168"
" ns114_169))))))))"
"(case-lambda"
"((req_172)(namespace-require/constant39_160 req_172 #f #f))"
"((req_173 ns36_174)(namespace-require/constant39_160 req_173 ns36_174 #t)))))"
"(define-values"
"(1/namespace-require/copy)"
"(let-values(((namespace-require/copy44_175)"
"(lambda(req43_176 ns41_177 ns42_178)"
"(let-values(((req_179) req43_176))"
"(let-values(((ns_180)(if ns42_178 ns41_177(1/current-namespace))))"
"(let-values()"
"(let-values(((temp117_182) 'namespace-require/copy)"
"((req118_183) req_179)"
"((ns119_184) ns_180)"
"((temp120_185) 0)"
"((temp121_186) 0))"
"(do-namespace-require23.1"
" #f"
" #f"
" temp120_185"
" #t"
" #f"
" #f"
" temp121_186"
" #t"
" #f"
" #f"
" temp117_182"
" req118_183"
" ns119_184))))))))"
"(case-lambda"
"((req_187)(namespace-require/copy44_175 req_187 #f #f))"
"((req_188 ns41_189)(namespace-require/copy44_175 req_188 ns41_189 #t)))))"
"(define-values"
"(1/namespace-variable-value)"
"(let-values(((namespace-variable-value53_190)"
"(lambda(sym52_191"
" use-mapping?46_192"
" failure-thunk47_193"
" ns48_194"
" use-mapping?49_195"
" failure-thunk50_196"
" ns51_197)"
"(let-values(((sym_198) sym52_191))"
"(let-values(((use-mapping?_199)(if use-mapping?49_195 use-mapping?46_192 #f)))"
"(let-values(((failure-thunk_200)(if failure-thunk50_196 failure-thunk47_193 #f)))"
"(let-values(((ns_201)(if ns51_197 ns48_194(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_198)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_198)))"
"(if(let-values(((or-part_202)(not failure-thunk_200)))"
"(if or-part_202"
" or-part_202"
"(if(procedure? failure-thunk_200)"
"(procedure-arity-includes? failure-thunk_200 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-variable-value"
"                                   \"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_200)))"
"(if(1/namespace? ns_201)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_201)))"
"((call/ec"
"(lambda(escape_203)"
"(let-values(((var-ns_204 var-phase-level_205 var-sym_206)"
"(if use-mapping?_199"
"(let-values()"
"(let-values(((id_208)(1/datum->syntax #f sym_198)))"
"(let-values(((b_209)"
"(resolve+shift/extra-inspector"
"(1/namespace-syntax-introduce id_208 ns_201)"
"(namespace-phase ns_201)"
" ns_201)))"
"(let-values((()"
"(begin"
"(if b_209"
"(let-values()"
"(namespace-visit-available-modules! ns_201))"
"(void))"
"(values))))"
"(let-values(((v_210 primitive?_211 extra-inspector_212)"
"(if b_209"
"(let-values(((b122_213) b_209)"
"((empty-env123_214) empty-env)"
"((null124_215) null)"
"((ns125_216) ns_201)"
"((temp126_217)"
"(namespace-phase ns_201))"
"((id127_218) id_208))"
"(binding-lookup48.1"
" #f"
" #f"
" #f"
" #f"
" b122_213"
" empty-env123_214"
" null124_215"
" ns125_216"
" temp126_217"
" id127_218))"
"(values variable #f #f))))"
"(begin"
"(if(variable? v_210)"
"(void)"
"(let-values()"
"(escape_203"
"(let-values(((or-part_219) failure-thunk_200))"
"(if or-part_219"
" or-part_219"
"(lambda()"
"(raise"
"(make-exn:fail:syntax$1"
"(format"
"(string-append"
"                                                                             \"namespace-variable-value: bound to syntax\\n\""
"                                                                             \"  in: ~s\")"
" sym_198)"
"(current-continuation-marks)"
" null))))))))"
"(if(module-binding? b_209)"
"(values"
"(if(top-level-module-path-index?"
"(module-binding-module b_209))"
" ns_201"
"(let-values(((ns128_221) ns_201)"
"((temp129_222)"
"(module-binding-module b_209))"
"((temp130_223)"
"(phase-"
"(namespace-phase ns_201)"
"(module-binding-phase b_209)))"
"((temp131_224) #t))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp131_224"
" #t"
" #f"
" #f"
" ns128_221"
" temp129_222"
" temp130_223)))"
"(module-binding-phase b_209)"
"(module-binding-sym b_209))"
"(values ns_201(namespace-phase ns_201) sym_198))))))))"
"(let-values()(values ns_201(namespace-phase ns_201) sym_198)))))"
"(let-values(((val_207)"
"(namespace-get-variable"
" var-ns_204"
" var-phase-level_205"
" var-sym_206"
"(lambda()"
"(escape_203"
"(let-values(((or-part_225) failure-thunk_200))"
"(if or-part_225"
" or-part_225"
"(raise"
"(exn:fail:contract:variable"
"(format"
"(string-append"
"                                                              \"namespace-variable-value: given name is not defined\\n\""
"                                                              \"  name: ~s\")"
" sym_198)"
"(current-continuation-marks)"
" sym_198)))))))))"
"(lambda() val_207)))))))))))))))"
"(case-lambda"
"((sym_226)(namespace-variable-value53_190 sym_226 #f #f #f #f #f #f))"
"((sym_227 use-mapping?_228 failure-thunk_229 ns48_230)"
"(namespace-variable-value53_190 sym_227 use-mapping?_228 failure-thunk_229 ns48_230 #t #t #t))"
"((sym_231 use-mapping?_232 failure-thunk47_233)"
"(namespace-variable-value53_190 sym_231 use-mapping?_232 failure-thunk47_233 #f #t #t #f))"
"((sym_234 use-mapping?46_235)(namespace-variable-value53_190 sym_234 use-mapping?46_235 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-set-variable-value!)"
"(let-values(((namespace-set-variable-value!63_236)"
"(lambda(sym61_237"
" val62_238"
" map?55_239"
" ns56_240"
" as-constant?57_241"
" map?58_242"
" ns59_243"
" as-constant?60_244)"
"(let-values(((sym_245) sym61_237))"
"(let-values(((val_246) val62_238))"
"(let-values(((map?_247)(if map?58_242 map?55_239 #f)))"
"(let-values(((ns_248)(if ns59_243 ns56_240(1/current-namespace))))"
"(let-values(((as-constant?_249)(if as-constant?60_244 as-constant?57_241 #f)))"
"(let-values()"
"(begin"
"(if(symbol? sym_245)"
"(void)"
"                                  (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_245)))"
"(if(1/namespace? ns_248)"
"(void)"
"                                  (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_248)))"
"(namespace-set-variable!"
" ns_248"
"(namespace-phase ns_248)"
" sym_245"
" val_246"
" as-constant?_249)"
"(if map?_247"
"(let-values()"
"(let-values((()"
"(begin"
"(namespace-unset-transformer!"
" ns_248"
"(namespace-phase ns_248)"
" sym_245)"
"(values))))"
"(let-values(((id_250)(1/datum->syntax #f sym_245)))"
"(let-values(((temp132_251)(1/namespace-syntax-introduce id_250 ns_248))"
"((temp133_252)"
"(let-values(((temp135_254)(namespace-mpi ns_248))"
"((temp136_255)(namespace-phase ns_248))"
"((sym137_256) sym_245))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp135_254"
" temp136_255"
" sym137_256)))"
"((temp134_253)(namespace-phase ns_248)))"
"(add-binding!17.1 #f #f #f #f temp132_251 temp133_252 temp134_253)))))"
"(void))))))))))))"
"(case-lambda"
"((sym_257 val_258)(namespace-set-variable-value!63_236 sym_257 val_258 #f #f #f #f #f #f))"
"((sym_259 val_260 map?_261 ns_262 as-constant?57_263)"
"(namespace-set-variable-value!63_236 sym_259 val_260 map?_261 ns_262 as-constant?57_263 #t #t #t))"
"((sym_264 val_265 map?_266 ns56_267)"
"(namespace-set-variable-value!63_236 sym_264 val_265 map?_266 ns56_267 #f #t #t #f))"
"((sym_268 val_269 map?55_270)(namespace-set-variable-value!63_236 sym_268 val_269 map?55_270 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-undefine-variable!)"
"(let-values(((namespace-undefine-variable!68_271)"
"(lambda(sym67_272 ns65_273 ns66_274)"
"(let-values(((sym_275) sym67_272))"
"(let-values(((ns_276)(if ns66_274 ns65_273(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_275)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_275)))"
"(if(1/namespace? ns_276)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_276)))"
"(namespace-unset-variable! ns_276(namespace-phase ns_276) sym_275))))))))"
"(case-lambda"
"((sym_277)(namespace-undefine-variable!68_271 sym_277 #f #f))"
"((sym_278 ns65_279)(namespace-undefine-variable!68_271 sym_278 ns65_279 #t)))))"
"(define-values"
"(1/namespace-mapped-symbols)"
"(let-values(((namespace-mapped-symbols72_280)"
"(lambda(ns70_281 ns71_282)"
"(let-values(((ns_283)(if ns71_282 ns70_281(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_283)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-mapped-symbols \"namespace?\" ns_283)))"
"(set->list"
"(set-union"
"(syntax-mapped-names"
"(root-expand-context-all-scopes-stx(namespace-get-root-expand-ctx ns_283))"
"(namespace-phase ns_283))"
"(list->set(1/instance-variable-names(namespace->instance ns_283 0)))))))))))"
"(case-lambda"
"(()(namespace-mapped-symbols72_280 #f #f))"
"((ns70_284)(namespace-mapped-symbols72_280 ns70_284 #t)))))"
"(define-values"
"(1/namespace-base-phase)"
"(let-values(((namespace-base-phase76_285)"
"(lambda(ns74_286 ns75_287)"
"(let-values(((ns_288)(if ns75_287 ns74_286(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_288)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-base-phase \"namespace?\" ns_288)))"
"(namespace-phase ns_288)))))))"
"(case-lambda(()(namespace-base-phase76_285 #f #f))((ns74_289)(namespace-base-phase76_285 ns74_289 #t)))))"
"(void)"
"(void)"
"(define-values"
"(1/eval)"
"(let-values(((eval6_11)"
"(lambda(s5_12 ns1_13 compile2_14 ns3_15 compile4_16)"
"(let-values(((s_17) s5_12))"
"(let-values(((ns_18)(if ns3_15 ns1_13(1/current-namespace))))"
"(let-values(((compile_19)"
"(if compile4_16 compile2_14(lambda(s_20 ns_21)(1/compile s_20 ns_21 #f)))))"
"(let-values()"
"(if(let-values(((or-part_22)(compiled-in-memory? s_17)))"
"(if or-part_22"
" or-part_22"
"(let-values(((or-part_23)(1/linklet-directory? s_17)))"
"(if or-part_23 or-part_23(1/linklet-bundle? s_17)))))"
"(let-values()(eval-compiled s_17 ns_18))"
"(if(if(syntax?$1 s_17)"
"(let-values(((or-part_24)(compiled-in-memory?(1/syntax-e s_17))))"
"(if or-part_24"
" or-part_24"
"(let-values(((or-part_25)(1/linklet-directory?(1/syntax-e s_17))))"
"(if or-part_25 or-part_25(1/linklet-bundle?(1/syntax-e s_17))))))"
" #f)"
"(let-values()(eval-compiled(1/syntax->datum s_17) ns_18))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:57:4_26) per-top-level66.1)"
"((s76_27) s_17)"
"((ns77_28) ns_18)"
"((temp78_29)"
"(lambda(s_30 ns_31 tail?_32)"
"(eval-compiled(compile_19 s_30 ns_31) ns_31 tail?_32))))"
"(per-top-level64.1 #f #f #f #f #f #f temp78_29 #f #f s76_27 ns77_28))))))))))))"
"(case-lambda"
"((s_33)(eval6_11 s_33 #f #f #f #f))"
"((s_34 ns_35 compile2_36)(eval6_11 s_34 ns_35 compile2_36 #t #t))"
"((s_37 ns1_38)(eval6_11 s_37 ns1_38 #f #t #f)))))"
"(define-values"
"(eval-compiled)"
"(let-values(((eval-compiled12_39)"
"(lambda(c10_40 ns11_41 as-tail?8_42 as-tail?9_43)"
"(let-values(((c_44) c10_40))"
"(let-values(((ns_45) ns11_41))"
"(let-values(((as-tail?_46)(if as-tail?9_43 as-tail?8_42 #t)))"
"(let-values()"
"(if(1/compiled-module-expression? c_44)"
"(let-values()"
"(let-values(((c79_48) c_44)((ns80_49) ns_45))"
"(eval-module8.1 ns80_49 #t #f #f #f #f c79_48)))"
"(let-values()(eval-top c_44 ns_45 eval-compiled as-tail?_46))))))))))"
"(case-lambda"
"((c_50 ns_51)(eval-compiled12_39 c_50 ns_51 #f #f))"
"((c_52 ns_53 as-tail?8_54)(eval-compiled12_39 c_52 ns_53 as-tail?8_54 #t)))))"
"(define-values"
"(1/compile)"
"(let-values(((compile23_55)"
"(lambda(s22_56"
" ns14_57"
" serializable?15_58"
" expand16_59"
" to-source?17_60"
" ns18_61"
" serializable?19_62"
" expand20_63"
" to-source?21_64)"
"(let-values(((s_65) s22_56))"
"(let-values(((ns_66)(if ns18_61 ns14_57(1/current-namespace))))"
"(let-values(((serializable?_67)(if serializable?19_62 serializable?15_58 #t)))"
"(let-values(((expand_68)(if expand20_63 expand16_59 expand$1)))"
"(let-values(((to-source?_69)(if to-source?21_64 to-source?17_60 #f)))"
"(let-values()"
"(let-values(((cs_70)"
"(if(1/compiled-expression? s_65)"
"(let-values()(list s_65))"
"(if(if(syntax?$1 s_65)(1/compiled-expression?(1/syntax-e s_65)) #f)"
"(let-values()(list(1/syntax-e s_65)))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:84:6_71) per-top-level66.1)"
"((s81_72) s_65)"
"((ns82_73) ns_66)"
"((temp83_74)"
"(lambda(s_76 ns_77 as-tail?_78)"
"(list"
"(compile-single$1"
" s_76"
" ns_77"
" expand_68"
" serializable?_67"
" to-source?_69))))"
"((append84_75) append))"
"(per-top-level64.1"
" append84_75"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp83_74"
" #f"
" #f"
" s81_72"
" ns82_73)))))))"
"(if(if(= 1(length cs_70))(not(compiled-multiple-top?(car cs_70))) #f)"
"(car cs_70)"
"(let-values(((cs85_80) cs_70)"
"((to-source?86_81) to-source?_69)"
"((serializable?87_82) serializable?_67)"
"((ns88_83) ns_66))"
"(compiled-tops->compiled-top8.1"
" serializable?87_82"
" #t"
" ns88_83"
" #t"
" to-source?86_81"
" #t"
" cs85_80)))))))))))))"
"(case-lambda"
"((s_84)(compile23_55 s_84 #f #f #f #f #f #f #f #f))"
"((s_85 ns_86 serializable?_87 expand_88 to-source?17_89)"
"(compile23_55 s_85 ns_86 serializable?_87 expand_88 to-source?17_89 #t #t #t #t))"
"((s_90 ns_91 serializable?_92 expand16_93)(compile23_55 s_90 ns_91 serializable?_92 expand16_93 #f #t #t #t #f))"
"((s_94 ns_95 serializable?15_96)(compile23_55 s_94 ns_95 serializable?15_96 #f #f #t #t #f #f))"
"((s_97 ns14_98)(compile23_55 s_97 ns14_98 #f #f #f #t #f #f #f)))))"
"(define-values"
"(compile-to-linklets)"
"(let-values(((compile-to-linklets28_99)"
"(lambda(s27_100 ns25_101 ns26_102)"
"(let-values(((s_103) s27_100))"
"(let-values(((ns_104)(if ns26_102 ns25_101(1/current-namespace))))"
"(let-values()(1/compile s_103 ns_104 #t expand$1 #t)))))))"
"(case-lambda"
"((s_105)(compile-to-linklets28_99 s_105 #f #f))"
"((s_106 ns25_107)(compile-to-linklets28_99 s_106 ns25_107 #t)))))"
"(define-values"
"(struct:lifted-parsed-begin"
" lifted-parsed-begin30.1"
" lifted-parsed-begin?"
" lifted-parsed-begin-seq"
" lifted-parsed-begin-last)"
"(let-values(((struct:_108 make-_109 ?_110 -ref_111 -set!_112)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'lifted-parsed-begin"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'lifted-parsed-begin)))))"
"(values"
" struct:_108"
" make-_109"
" ?_110"
"(make-struct-field-accessor -ref_111 0 'seq)"
"(make-struct-field-accessor -ref_111 1 'last))))"
"(define-values"
"(compile-single$1)"
"(lambda(s_133 ns_134 expand_135 serializable?_136 to-source?_137)"
"(let-values(((exp-s_138)(expand_135 s_133 ns_134 #f #t serializable?_136)))"
"((letrec-values(((loop_139)"
"(lambda(exp-s_140)"
"(if(parsed-module? exp-s_140)"
"(let-values()"
"(let-values(((exp-s90_142) exp-s_140)"
"((temp91_143)"
"(let-values(((ns94_147) ns_134))"
"(make-compile-context14.1 #f #f #f #f #f #f ns94_147 #t #f #f #f #f)))"
"((serializable?92_144) serializable?_136)"
"((to-source?93_145) to-source?_137))"
"(compile-module13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" serializable?92_144"
" #t"
" to-source?93_145"
" #t"
" exp-s90_142"
" temp91_143)))"
"(if(lifted-parsed-begin? exp-s_140)"
"(let-values()"
"(let-values(((temp95_149)"
"(alt-reverse"
"(let-values(((lst_151)"
"(append"
"(lifted-parsed-begin-seq exp-s_140)"
"(list(lifted-parsed-begin-last exp-s_140)))))"
"(begin"
"(if(list? lst_151)(void)(let-values()(in-list lst_151)))"
"((letrec-values(((for-loop_152)"
"(lambda(fold-var_153 lst_154)"
"(if(pair? lst_154)"
"(let-values(((e_155)(unsafe-car lst_154)))"
"(let-values(((fold-var_156)"
"(let-values(((fold-var_157)"
" fold-var_153))"
"(let-values(((fold-var_158)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_139"
" e_155))"
" fold-var_157))))"
"(values fold-var_158)))))"
"(for-loop_152"
" fold-var_156"
"(unsafe-cdr lst_154))))"
" fold-var_153))))"
" for-loop_152)"
" null"
" lst_151)))))"
"((to-source?96_150) to-source?_137))"
"(compiled-tops->compiled-top8.1 #f #f #f #f to-source?96_150 #t temp95_149)))"
"(let-values()"
"(let-values(((exp-s97_160) exp-s_140)"
"((temp98_161)"
"(let-values(((ns101_165) ns_134))"
"(make-compile-context14.1 #f #f #f #f #f #f ns101_165 #t #f #f #f #f)))"
"((serializable?99_162) serializable?_136)"
"((to-source?100_163) to-source?_137))"
"(compile-top9.1"
" serializable?99_162"
" #t"
" #f"
" #f"
" to-source?100_163"
" #t"
" exp-s97_160"
" temp98_161))))))))"
" loop_139)"
" exp-s_138))))"
"(define-values"
"(expand$1)"
"(let-values(((expand40_166)"
"(lambda(s39_167"
" ns31_168"
" log-expand?32_169"
" to-parsed?33_170"
" serializable?34_171"
" ns35_172"
" log-expand?36_173"
" to-parsed?37_174"
" serializable?38_175)"
"(let-values(((s_176) s39_167))"
"(let-values(((ns_177)(if ns35_172 ns31_168(1/current-namespace))))"
"(let-values(((log-expand?_178)(if log-expand?36_173 log-expand?32_169 #f)))"
"(let-values(((to-parsed?_179)(if to-parsed?37_174 to-parsed?33_170 #f)))"
"(let-values(((serializable?_180)(if serializable?38_175 serializable?34_171 #f)))"
"(let-values()"
"(begin"
"(if log-expand?_178(let-values()(log-expand-start))(void))"
"(let-values(((...pander/eval/main.rkt:134:2_181) per-top-level66.1)"
"((s102_182) s_176)"
"((ns103_183) ns_177)"
"((temp104_184)"
"(lambda(s_187 ns_188 as-tail?_189)"
"(expand-single s_187 ns_188 to-parsed?_179 serializable?_180)))"
"((cons105_185) cons)"
"((re-pair106_186) re-pair))"
"(per-top-level64.1"
" cons105_185"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp104_184"
" re-pair106_186"
" #t"
" s102_182"
" ns103_183))))))))))))"
"(case-lambda"
"((s_190)(expand40_166 s_190 #f #f #f #f #f #f #f #f))"
"((s_191 ns_192 log-expand?_193 to-parsed?_194 serializable?34_195)"
"(expand40_166 s_191 ns_192 log-expand?_193 to-parsed?_194 serializable?34_195 #t #t #t #t))"
"((s_196 ns_197 log-expand?_198 to-parsed?33_199)"
"(expand40_166 s_196 ns_197 log-expand?_198 to-parsed?33_199 #f #t #t #t #f))"
"((s_200 ns_201 log-expand?32_202)(expand40_166 s_200 ns_201 log-expand?32_202 #f #f #t #t #f #f))"
"((s_203 ns31_204)(expand40_166 s_203 ns31_204 #f #f #f #t #f #f #f)))))"
"(define-values"
"(expand-single)"
"(lambda(s_205 ns_206 to-parsed?_207 serializable?_208)"
"(let-values(((require-lifts_209 lifts_210 exp-s_211)"
"(expand-capturing-lifts"
" s_205"
"(let-values(((ns107_213) ns_206)"
"((to-parsed?108_214) to-parsed?_207)"
"((serializable?109_215) serializable?_208))"
"(make-expand-context8.1 serializable?109_215 #t to-parsed?108_214 #t ns107_213)))))"
"(if(if(null? require-lifts_209)(null? lifts_210) #f)"
"(let-values() exp-s_211)"
"(if to-parsed?_207"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:147:4_216) wrap-lifts-as-lifted-parsed-begin75.1)"
"((require-lifts110_217) require-lifts_209)"
"((lifts111_218) lifts_210)"
"((exp-s112_219) exp-s_211)"
"((s113_220) s_205)"
"((temp114_221)"
"(lambda(form_222)(expand-single form_222 ns_206 to-parsed?_207 serializable?_208))))"
"(wrap-lifts-as-lifted-parsed-begin73.1"
" temp114_221"
" require-lifts110_217"
" lifts111_218"
" exp-s112_219"
" s113_220)))"
"(let-values()"
"(let-values(((temp115_224)(append require-lifts_209 lifts_210))"
"((temp116_225)"
"(lambda(form_229)(expand-single form_229 ns_206 to-parsed?_207 serializable?_208)))"
"((exp-s117_226) exp-s_211)"
"((s118_227) s_205)"
"((temp119_228)(namespace-phase ns_206)))"
"(wrap-lifts-as-begin15.1 temp116_225 #t temp115_224 exp-s117_226 s118_227 temp119_228))))))))"
"(define-values"
"(expand-once$1)"
"(let-values(((expand-once45_230)"
"(lambda(s44_231 ns42_232 ns43_233)"
"(let-values(((s_234) s44_231))"
"(let-values(((ns_235)(if ns43_233 ns42_232(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:160:2_236) per-top-level66.1)"
"((s120_237) s_234)"
"((ns121_238) ns_235)"
"((temp122_239)"
"(lambda(s_243 ns_244 as-tail?_245)(expand-single-once s_243 ns_244)))"
"((cons123_240) cons)"
"((re-pair124_241) re-pair)"
"((temp125_242) #t))"
"(per-top-level64.1"
" cons123_240"
" #t"
" temp125_242"
" #t"
" #f"
" #f"
" temp122_239"
" re-pair124_241"
" #t"
" s120_237"
" ns121_238))))))))"
"(case-lambda((s_246)(expand-once45_230 s_246 #f #f))((s_247 ns42_248)(expand-once45_230 s_247 ns42_248 #t)))))"
"(define-values"
"(expand-single-once)"
"(lambda(s_249 ns_250)"
"(let-values(((require-lifts_251 lifts_252 exp-s_253)"
"(expand-capturing-lifts"
" s_249"
"(let-values(((v_254)"
"(let-values(((ns126_255) ns_250))(make-expand-context8.1 #f #f #f #f ns126_255))))"
"(let-values(((the-struct_256) v_254))"
"(if(expand-context/outer? the-struct_256)"
"(let-values(((inner127_257)"
"(let-values(((the-struct_258)(root-expand-context/outer-inner v_254)))"
"(if(expand-context/inner? the-struct_258)"
"(let-values(((just-once?128_259) #t))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_258)"
"(root-expand-context/inner-top-level-bind-scope the-struct_258)"
"(root-expand-context/inner-all-scopes-stx the-struct_258)"
"(root-expand-context/inner-defined-syms the-struct_258)"
"(root-expand-context/inner-counter the-struct_258)"
"(root-expand-context/inner-lift-key the-struct_258)"
"(expand-context/inner-to-parsed? the-struct_258)"
"(expand-context/inner-phase the-struct_258)"
"(expand-context/inner-namespace the-struct_258)"
"(expand-context/inner-user-env the-struct_258)"
" just-once?128_259"
"(expand-context/inner-module-begin-k the-struct_258)"
"(expand-context/inner-allow-unbound? the-struct_258)"
"(expand-context/inner-in-local-expand? the-struct_258)"
"(expand-context/inner-stops the-struct_258)"
"(expand-context/inner-declared-submodule-names the-struct_258)"
"(expand-context/inner-lifts the-struct_258)"
"(expand-context/inner-lift-envs the-struct_258)"
"(expand-context/inner-module-lifts the-struct_258)"
"(expand-context/inner-require-lifts the-struct_258)"
"(expand-context/inner-to-module-lifts the-struct_258)"
"(expand-context/inner-requires+provides the-struct_258)"
"(expand-context/inner-observer the-struct_258)"
"(expand-context/inner-for-serializable? the-struct_258)))"
"(raise-argument-error"
" 'struct-copy"
"                                            \"expand-context/inner?\""
" the-struct_258)))))"
"(expand-context/outer1.1"
" inner127_257"
"(root-expand-context/outer-post-expansion-scope the-struct_256)"
"(root-expand-context/outer-use-site-scopes the-struct_256)"
"(root-expand-context/outer-frame-id the-struct_256)"
"(expand-context/outer-context the-struct_256)"
"(expand-context/outer-env the-struct_256)"
"(expand-context/outer-post-expansion-scope-action the-struct_256)"
"(expand-context/outer-scopes the-struct_256)"
"(expand-context/outer-def-ctx-scopes the-struct_256)"
"(expand-context/outer-binding-layer the-struct_256)"
"(expand-context/outer-reference-records the-struct_256)"
"(expand-context/outer-only-immediate? the-struct_256)"
"(expand-context/outer-need-eventually-defined the-struct_256)"
"(expand-context/outer-current-introduction-scopes the-struct_256)"
"(expand-context/outer-name the-struct_256)))"
"                         (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_256)))))))"
"(if(if(null? require-lifts_251)(null? lifts_252) #f)"
"(let-values() exp-s_253)"
"(let-values()"
"(let-values(((temp129_260)(append require-lifts_251 lifts_252))"
"((exp-s130_261) exp-s_253)"
"((s131_262) s_249)"
"((temp132_263)(namespace-phase ns_250)))"
"(wrap-lifts-as-begin15.1 #f #f temp129_260 exp-s130_261 s131_262 temp132_263)))))))"
"(define-values"
"(expand-to-top-form$1)"
"(let-values(((expand-to-top-form50_264)"
"(lambda(s49_265 ns47_266 ns48_267)"
"(let-values(((s_268) s49_265))"
"(let-values(((ns_269)(if ns48_267 ns47_266(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:180:2_270) per-top-level66.1)"
"((s133_271) s_268)"
"((ns134_272) ns_269)"
"((temp135_273) #f))"
"(per-top-level64.1 #f #f #f #f #f #f temp135_273 #f #f s133_271 ns134_272))))))))"
"(case-lambda"
"((s_274)(expand-to-top-form50_264 s_274 #f #f))"
"((s_275 ns47_276)(expand-to-top-form50_264 s_275 ns47_276 #t)))))"
"(define-values"
"(lifted/1.1$6 lifted/2.1$6 lifted/3.1$5 lifted/4.1$5 lifted/5.1$5)"
"(make-struct-type"
" 'per-top-level"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'per-top-level"
"(case-lambda((self_277 given-s_278 ns_279)(apply missing-kw self_277 given-s_278 ns_279 null))))))"
"(current-inspector)"
"(case-lambda((self_280 given-s_281 ns_282)(apply missing-kw self_280 given-s_281 ns_282 null)))))"
"(define-values"
"(per-top-level64.1)"
"(lambda(combine53_283"
" combine58_284"
" just-once?55_285"
" just-once?60_286"
" serializable?56_287"
" serializable?61_288"
" single52_289"
" wrap54_290"
" wrap59_291"
" given-s62_292"
" ns63_293)"
"(let-values(((given-s_294) given-s62_292))"
"(let-values(((ns_295) ns63_293))"
"(let-values(((single_296) single52_289))"
"(let-values(((combine_297)(if combine58_284 combine53_283 #f)))"
"(let-values(((wrap_298)(if wrap59_291 wrap54_290 #f)))"
"(let-values(((just-once?_299)(if just-once?60_286 just-once?55_285 #f)))"
"(let-values(((serializable?_300)(if serializable?61_288 serializable?56_287 #f)))"
"(let-values()"
"(let-values(((s_301)(maybe-intro given-s_294 ns_295)))"
"(let-values(((ctx_302)"
"(let-values(((ns136_304) ns_295))(make-expand-context8.1 #f #f #f #f ns136_304))))"
"(let-values(((phase_303)(namespace-phase ns_295)))"
"((letrec-values(((loop_305)"
"(lambda(s_306 phase_307 ns_308 as-tail?_309)"
"(let-values(((tl-ctx_310)"
"(let-values(((v_315) ctx_302))"
"(let-values(((the-struct_316) v_315))"
"(if(expand-context/outer? the-struct_316)"
"(let-values(((inner137_317)"
"(let-values(((the-struct_318)"
"(root-expand-context/outer-inner"
" v_315)))"
"(if(expand-context/inner?"
" the-struct_318)"
"(let-values(((phase138_319)"
" phase_307)"
"((namespace139_320)"
" ns_308)"
"((just-once?140_321)"
" just-once?_299)"
"((for-serializable?141_322)"
" serializable?_300))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_318)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_318)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_318)"
"(root-expand-context/inner-defined-syms"
" the-struct_318)"
"(root-expand-context/inner-counter"
" the-struct_318)"
"(root-expand-context/inner-lift-key"
" the-struct_318)"
"(expand-context/inner-to-parsed?"
" the-struct_318)"
" phase138_319"
" namespace139_320"
"(expand-context/inner-user-env"
" the-struct_318)"
" just-once?140_321"
"(expand-context/inner-module-begin-k"
" the-struct_318)"
"(expand-context/inner-allow-unbound?"
" the-struct_318)"
"(expand-context/inner-in-local-expand?"
" the-struct_318)"
"(expand-context/inner-stops"
" the-struct_318)"
"(expand-context/inner-declared-submodule-names"
" the-struct_318)"
"(expand-context/inner-lifts"
" the-struct_318)"
"(expand-context/inner-lift-envs"
" the-struct_318)"
"(expand-context/inner-module-lifts"
" the-struct_318)"
"(expand-context/inner-require-lifts"
" the-struct_318)"
"(expand-context/inner-to-module-lifts"
" the-struct_318)"
"(expand-context/inner-requires+provides"
" the-struct_318)"
"(expand-context/inner-observer"
" the-struct_318)"
" for-serializable?141_322))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                     \"expand-context/inner?\""
" the-struct_318)))))"
"(expand-context/outer1.1"
" inner137_317"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_316)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_316)"
"(root-expand-context/outer-frame-id the-struct_316)"
"(expand-context/outer-context the-struct_316)"
"(expand-context/outer-env the-struct_316)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_316)"
"(expand-context/outer-scopes the-struct_316)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_316)"
"(expand-context/outer-binding-layer the-struct_316)"
"(expand-context/outer-reference-records"
" the-struct_316)"
"(expand-context/outer-only-immediate?"
" the-struct_316)"
"(expand-context/outer-need-eventually-defined"
" the-struct_316)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_316)"
"(expand-context/outer-name the-struct_316)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"expand-context/outer?\""
" the-struct_316))))))"
"(let-values(((require-lifts_311 lifts_312 exp-s_313)"
"(expand-capturing-lifts"
" s_306"
"(let-values(((v_323) tl-ctx_310))"
"(let-values(((the-struct_324) v_323))"
"(if(expand-context/outer? the-struct_324)"
"(let-values(((only-immediate?142_325) #t)"
"((def-ctx-scopes143_326)(box null))"
"((inner144_327)"
"(let-values(((the-struct_328)"
"(root-expand-context/outer-inner"
" v_323)))"
"(if(expand-context/inner?"
" the-struct_328)"
"(let-values(((phase145_329)"
" phase_307)"
"((namespace146_330)"
" ns_308))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_328)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_328)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_328)"
"(root-expand-context/inner-defined-syms"
" the-struct_328)"
"(root-expand-context/inner-counter"
" the-struct_328)"
"(root-expand-context/inner-lift-key"
" the-struct_328)"
"(expand-context/inner-to-parsed?"
" the-struct_328)"
" phase145_329"
" namespace146_330"
"(expand-context/inner-user-env"
" the-struct_328)"
"(expand-context/inner-just-once?"
" the-struct_328)"
"(expand-context/inner-module-begin-k"
" the-struct_328)"
"(expand-context/inner-allow-unbound?"
" the-struct_328)"
"(expand-context/inner-in-local-expand?"
" the-struct_328)"
"(expand-context/inner-stops"
" the-struct_328)"
"(expand-context/inner-declared-submodule-names"
" the-struct_328)"
"(expand-context/inner-lifts"
" the-struct_328)"
"(expand-context/inner-lift-envs"
" the-struct_328)"
"(expand-context/inner-module-lifts"
" the-struct_328)"
"(expand-context/inner-require-lifts"
" the-struct_328)"
"(expand-context/inner-to-module-lifts"
" the-struct_328)"
"(expand-context/inner-requires+provides"
" the-struct_328)"
"(expand-context/inner-observer"
" the-struct_328)"
"(expand-context/inner-for-serializable?"
" the-struct_328)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                        \"expand-context/inner?\""
" the-struct_328)))))"
"(expand-context/outer1.1"
" inner144_327"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_324)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_324)"
"(root-expand-context/outer-frame-id"
" the-struct_324)"
"(expand-context/outer-context the-struct_324)"
"(expand-context/outer-env the-struct_324)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_324)"
"(expand-context/outer-scopes the-struct_324)"
" def-ctx-scopes143_326"
"(expand-context/outer-binding-layer"
" the-struct_324)"
"(expand-context/outer-reference-records"
" the-struct_324)"
" only-immediate?142_325"
"(expand-context/outer-need-eventually-defined"
" the-struct_324)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_324)"
"(expand-context/outer-name the-struct_324)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                      \"expand-context/outer?\""
" the-struct_324)))))))"
"(let-values(((disarmed-exp-s_314)(syntax-disarm$1 exp-s_313)))"
"(if(let-values(((or-part_331)(pair? require-lifts_311)))"
"(if or-part_331 or-part_331(pair? lifts_312)))"
"(let-values()"
"(let-values(((new-s_332)"
"(let-values(((temp147_333)"
"(append"
" require-lifts_311"
" lifts_312))"
"((exp-s148_334) exp-s_313)"
"((s149_335) s_306)"
"((phase150_336) phase_307))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" temp147_333"
" exp-s148_334"
" s149_335"
" phase150_336))))"
"(if just-once?_299"
" new-s_332"
"(loop_305 new-s_332 phase_307 ns_308 as-tail?_309))))"
"(if(not single_296)"
"(let-values() exp-s_313)"
"(if(if just-once?_299(not(eq? exp-s_313 s_306)) #f)"
"(let-values() exp-s_313)"
"(let-values()"
"(let-values(((tmp_337)"
"(core-form-sym disarmed-exp-s_314 phase_307)))"
"(if(equal? tmp_337 'begin)"
"(let-values()"
"(let-values(((ok?_338 begin151_339 e152_340)"
"(let-values(((s_352)"
" disarmed-exp-s_314))"
"(let-values(((orig-s_353) s_352))"
"(let-values(((begin151_354"
" e152_355)"
"(let-values(((s_356)"
"(if(syntax?$1"
" s_352)"
"(syntax-e$1"
" s_352)"
" s_352)))"
"(if(pair? s_356)"
"(let-values(((begin153_357)"
"(let-values(((s_359)"
"(car"
" s_356)))"
" s_359))"
"((e154_358)"
"(let-values(((s_360)"
"(cdr"
" s_356)))"
"(let-values(((s_361)"
"(if(syntax?$1"
" s_360)"
"(syntax-e$1"
" s_360)"
" s_360)))"
"(let-values(((flat-s_362)"
"(to-syntax-list.1"
" s_361)))"
"(if(not"
" flat-s_362)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_353))"
"(let-values()"
" flat-s_362)))))))"
"(values"
" begin153_357"
" e154_358))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_353)))))"
"(values"
" #t"
" begin151_354"
" e152_355))))))"
"(letrec-values(((begin-loop_351)"
"(lambda(es_363)"
"(if(null? es_363)"
"(let-values()"
"(if combine_297 null(void)))"
"(if(if(not combine_297)"
"(null?(cdr es_363))"
" #f)"
"(let-values()"
"(loop_305"
"(car es_363)"
" phase_307"
" ns_308"
" as-tail?_309))"
"(let-values()"
"(let-values(((a_364)"
"(loop_305"
"(car es_363)"
" phase_307"
" ns_308"
" #f)))"
"(if combine_297"
"(combine_297"
" a_364"
"(begin-loop_351"
"(cdr es_363)))"
"(begin-loop_351"
"(cdr es_363))))))))))"
"(if wrap_298"
"(wrap_298"
" begin151_339"
" exp-s_313"
"(begin-loop_351 e152_340))"
"(begin-loop_351 e152_340)))))"
"(if(equal? tmp_337 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_365"
" begin-for-syntax155_366"
" e156_367)"
"(let-values(((s_381)"
" disarmed-exp-s_314))"
"(let-values(((orig-s_382) s_381))"
"(let-values(((begin-for-syntax155_383"
" e156_384)"
"(let-values(((s_385)"
"(if(syntax?$1"
" s_381)"
"(syntax-e$1"
" s_381)"
" s_381)))"
"(if(pair? s_385)"
"(let-values(((begin-for-syntax157_386)"
"(let-values(((s_388)"
"(car"
" s_385)))"
" s_388))"
"((e158_387)"
"(let-values(((s_389)"
"(cdr"
" s_385)))"
"(let-values(((s_390)"
"(if(syntax?$1"
" s_389)"
"(syntax-e$1"
" s_389)"
" s_389)))"
"(let-values(((flat-s_391)"
"(to-syntax-list.1"
" s_390)))"
"(if(not"
" flat-s_391)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_382))"
"(let-values()"
" flat-s_391)))))))"
"(values"
" begin-for-syntax157_386"
" e158_387))"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_382)))))"
"(values"
" #t"
" begin-for-syntax155_383"
" e156_384))))))"
"(let-values(((next-phase_378)(add1 phase_307)))"
"(let-values(((next-ns_379)"
"(namespace->namespace-at-phase"
" ns_308"
" next-phase_378)))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
" next-ns_379)"
"(values))))"
"(let-values(((l_380)"
"(alt-reverse"
"(let-values(((lst_392)"
" e156_367))"
"(begin"
"(if(list? lst_392)"
"(void)"
"(let-values()"
"(in-list lst_392)))"
"((letrec-values(((for-loop_393)"
"(lambda(fold-var_394"
" lst_395)"
"(if(pair?"
" lst_395)"
"(let-values(((s_396)"
"(unsafe-car"
" lst_395)))"
"(let-values(((fold-var_397)"
"(let-values(((fold-var_398)"
" fold-var_394))"
"(let-values(((fold-var_399)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_305"
" s_396"
" next-phase_378"
" next-ns_379"
" #f))"
" fold-var_398))))"
"(values"
" fold-var_399)))))"
"(for-loop_393"
" fold-var_397"
"(unsafe-cdr"
" lst_395))))"
" fold-var_394))))"
" for-loop_393)"
" null"
" lst_392))))))"
"(if wrap_298"
"(let-values()"
"(wrap_298"
" begin-for-syntax155_366"
" exp-s_313"
" l_380))"
"(if combine_297"
"(let-values() l_380)"
"(let-values()(void))))))))))"
"(let-values()"
"(single_296"
" exp-s_313"
" ns_308"
" as-tail?_309)))))))))))))))"
" loop_305)"
" s_301"
" phase_303"
" ns_295"
" #t))))))))))))))"
"(define-values"
"(unpack65.1)"
"(lambda(given-kws_400 given-args_401 given-s62_402 ns63_403)"
"(let-values(((combine58_404)(if(pair? given-kws_400)(eq? '#:combine(car given-kws_400)) #f)))"
"(let-values(((combine53_405)(if combine58_404(car given-args_401)(void)))"
"((given-kws_406)(if combine58_404(cdr given-kws_400) given-kws_400))"
"((given-args_407)(if combine58_404(cdr given-args_401) given-args_401)))"
"(let-values(((just-once?60_408)(if(pair? given-kws_406)(eq? '#:just-once?(car given-kws_406)) #f)))"
"(let-values(((just-once?55_409)(if just-once?60_408(car given-args_407)(void)))"
"((given-kws_410)(if just-once?60_408(cdr given-kws_406) given-kws_406))"
"((given-args_411)(if just-once?60_408(cdr given-args_407) given-args_407)))"
"(let-values(((serializable?61_412)"
"(if(pair? given-kws_410)(eq? '#:serializable?(car given-kws_410)) #f)))"
"(let-values(((serializable?56_413)(if serializable?61_412(car given-args_411)(void)))"
"((given-kws_414)(if serializable?61_412(cdr given-kws_410) given-kws_410))"
"((given-args_415)(if serializable?61_412(cdr given-args_411) given-args_411)))"
"(let-values(((single52_416)(car given-args_415))"
"((given-kws_417)(cdr given-kws_414))"
"((given-args_418)(cdr given-args_415)))"
"(let-values(((wrap59_419)(pair? given-kws_417)))"
"(let-values(((wrap54_420)(if wrap59_419(car given-args_418)(void))))"
"(per-top-level64.1"
" combine53_405"
" combine58_404"
" just-once?55_409"
" just-once?60_408"
" serializable?56_413"
" serializable?61_412"
" single52_416"
" wrap54_420"
" wrap59_419"
" given-s62_402"
" ns63_403))))))))))))"
"(define-values"
"(per-top-level66.1)"
"(lifted/2.1$6"
"(lambda(given-kws_421 given-argc_422)"
"(if(= given-argc_422 4)"
"(subsets? '(#:single) given-kws_421 '(#:combine #:just-once? #:serializable? #:single #:wrap))"
" #f))"
"(case-lambda"
"((given-kws_423 given-args_424 given-s_425 ns_426)(unpack65.1 given-kws_423 given-args_424 given-s_425 ns_426)))"
" '(#:single)"
" '(#:combine #:just-once? #:serializable? #:single #:wrap)))"
"(define-values"
"(maybe-intro)"
"(lambda(s_427 ns_428)(if(syntax?$1 s_427) s_427(1/namespace-syntax-introduce(1/datum->syntax #f s_427) ns_428))))"
"(define-values"
"(re-pair)"
"(lambda(form-id_429 s_430 r_431)"
"(syntax-rearm$1(1/datum->syntax(syntax-disarm$1 s_430)(cons form-id_429 r_431) s_430 s_430) s_430)))"
"(define-values"
"(expand-capturing-lifts)"
"(lambda(s_432 ctx_433)"
"(let-values()"
"(let-values(((ns_434)(expand-context-namespace ctx_433)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_434)(values))))"
"(let-values(((lift-ctx_435)"
"(let-values(((temp159_438)(make-top-level-lift ctx_433)))"
"(make-lift-context6.1 #f #f temp159_438))))"
"(let-values(((require-lift-ctx_436)"
"(make-require-lift-context(namespace-phase ns_434)(make-parse-top-lifted-require ns_434))))"
"(let-values(((exp-s_437)"
"(let-values(((s160_439) s_432)"
"((temp161_440)"
"(let-values(((v_441) ctx_433))"
"(let-values(((the-struct_442) v_441))"
"(if(expand-context/outer? the-struct_442)"
"(let-values(((inner162_443)"
"(let-values(((the-struct_444)"
"(root-expand-context/outer-inner v_441)))"
"(if(expand-context/inner? the-struct_444)"
"(let-values(((lifts163_445) lift-ctx_435)"
"((module-lifts164_446) lift-ctx_435)"
"((require-lifts165_447)"
" require-lift-ctx_436))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_444)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_444)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_444)"
"(root-expand-context/inner-defined-syms"
" the-struct_444)"
"(root-expand-context/inner-counter the-struct_444)"
"(root-expand-context/inner-lift-key the-struct_444)"
"(expand-context/inner-to-parsed? the-struct_444)"
"(expand-context/inner-phase the-struct_444)"
"(expand-context/inner-namespace the-struct_444)"
"(expand-context/inner-user-env the-struct_444)"
"(expand-context/inner-just-once? the-struct_444)"
"(expand-context/inner-module-begin-k"
" the-struct_444)"
"(expand-context/inner-allow-unbound?"
" the-struct_444)"
"(expand-context/inner-in-local-expand?"
" the-struct_444)"
"(expand-context/inner-stops the-struct_444)"
"(expand-context/inner-declared-submodule-names"
" the-struct_444)"
" lifts163_445"
"(expand-context/inner-lift-envs the-struct_444)"
" module-lifts164_446"
" require-lifts165_447"
"(expand-context/inner-to-module-lifts"
" the-struct_444)"
"(expand-context/inner-requires+provides"
" the-struct_444)"
"(expand-context/inner-observer the-struct_444)"
"(expand-context/inner-for-serializable?"
" the-struct_444)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"expand-context/inner?\""
" the-struct_444)))))"
"(expand-context/outer1.1"
" inner162_443"
"(root-expand-context/outer-post-expansion-scope the-struct_442)"
"(root-expand-context/outer-use-site-scopes the-struct_442)"
"(root-expand-context/outer-frame-id the-struct_442)"
"(expand-context/outer-context the-struct_442)"
"(expand-context/outer-env the-struct_442)"
"(expand-context/outer-post-expansion-scope-action the-struct_442)"
"(expand-context/outer-scopes the-struct_442)"
"(expand-context/outer-def-ctx-scopes the-struct_442)"
"(expand-context/outer-binding-layer the-struct_442)"
"(expand-context/outer-reference-records the-struct_442)"
"(expand-context/outer-only-immediate? the-struct_442)"
"(expand-context/outer-need-eventually-defined the-struct_442)"
"(expand-context/outer-current-introduction-scopes the-struct_442)"
"(expand-context/outer-name the-struct_442)))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"expand-context/outer?\""
" the-struct_442))))))"
"(expand5.1 #f #f s160_439 temp161_440))))"
"(values"
"(get-and-clear-require-lifts! require-lift-ctx_436)"
"(get-and-clear-lifts! lift-ctx_435)"
" exp-s_437)))))))))"
"(define-values"
"(make-parse-top-lifted-require)"
"(lambda(ns_448)"
"(lambda(s_449 phase_450)"
"(let-values(((ok?_451 #%require166_452 req167_453)"
"(let-values(((s_464)(syntax-disarm$1 s_449)))"
"(let-values(((orig-s_465) s_464))"
"(let-values(((#%require166_466 req167_467)"
"(let-values(((s_468)(if(syntax?$1 s_464)(syntax-e$1 s_464) s_464)))"
"(if(pair? s_468)"
"(let-values(((#%require168_469)(let-values(((s_471)(car s_468))) s_471))"
"((req169_470)"
"(let-values(((s_472)(cdr s_468)))"
"(let-values(((s_473)"
"(if(syntax?$1 s_472)"
"(syntax-e$1 s_472)"
" s_472)))"
"(if(pair? s_473)"
"(let-values(((req170_474)"
"(let-values(((s_475)(car s_473))) s_475))"
"(()"
"(let-values(((s_476)(cdr s_473)))"
"(let-values(((s_477)"
"(if(syntax?$1 s_476)"
"(syntax-e$1 s_476)"
" s_476)))"
"(if(null? s_477)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_465))))))"
"(values req170_474))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_465))))))"
"(values #%require168_469 req169_470))"
"                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_465)))))"
"(values #t #%require166_466 req167_467))))))"
"(let-values(((temp171_479)(list req167_453))"
"((s172_480) s_449)"
"((ns173_481) ns_448)"
"((phase174_482) phase_450)"
"((phase175_483) phase_450)"
"((temp176_484)(make-requires+provides #f))"
"((temp177_485) 'require))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" phase175_483"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp177_485"
" temp171_479"
" s172_480"
" ns173_481"
" phase174_482"
" temp176_484))))))"
"(define-values"
"(lifted/6.1$4 lifted/7.1$4 lifted/8.1$4 lifted/9.1$4 lifted/10.1$4)"
"(make-struct-type"
" 'wrap-lifts-as-lifted-parsed-begin"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'wrap-lifts-as-lifted-parsed-begin"
"(case-lambda"
"((self_486 require-lifts_487 lifts_488 exp-s_489 s_490)"
"(apply missing-kw self_486 require-lifts_487 lifts_488 exp-s_489 s_490 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_491 require-lifts_492 lifts_493 exp-s_494 s_495)"
"(apply missing-kw self_491 require-lifts_492 lifts_493 exp-s_494 s_495 null)))))"
"(define-values"
"(wrap-lifts-as-lifted-parsed-begin73.1)"
"(lambda(adjust-form67_496 require-lifts69_497 lifts70_498 exp-s71_499 s72_500)"
"(let-values(((require-lifts_501) require-lifts69_497))"
"(let-values(((lifts_502) lifts70_498))"
"(let-values(((exp-s_503) exp-s71_499))"
"(let-values(((s_504) s72_500))"
"(let-values(((adjust-form_505) adjust-form67_496))"
"(let-values()"
"(lifted-parsed-begin30.1"
"(append"
"(alt-reverse"
"(let-values(((lst_506) require-lifts_501))"
"(begin"
"(if(list? lst_506)(void)(let-values()(in-list lst_506)))"
"((letrec-values(((for-loop_507)"
"(lambda(fold-var_508 lst_509)"
"(if(pair? lst_509)"
"(let-values(((req_510)(unsafe-car lst_509)))"
"(let-values(((fold-var_511)"
"(let-values(((fold-var_512) fold-var_508))"
"(let-values(((fold-var_513)"
"(let-values()"
"(cons"
"(let-values()"
"(parsed-require23.1 req_510))"
" fold-var_512))))"
"(values fold-var_513)))))"
"(for-loop_507 fold-var_511(unsafe-cdr lst_509))))"
" fold-var_508))))"
" for-loop_507)"
" null"
" lst_506))))"
"(alt-reverse"
"(let-values(((lst_514)(get-lifts-as-lists lifts_502)))"
"(begin"
"(if(list? lst_514)(void)(let-values()(in-list lst_514)))"
"((letrec-values(((for-loop_515)"
"(lambda(fold-var_516 lst_517)"
"(if(pair? lst_517)"
"(let-values(((ids+syms+rhs_518)(unsafe-car lst_517)))"
"(let-values(((fold-var_519)"
"(let-values(((fold-var_520) fold-var_516))"
"(let-values(((fold-var_521)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((exp-rhs_522)"
"(adjust-form_505"
"(caddr"
" ids+syms+rhs_518))))"
"(let-values(((just-rhs_523)"
"(if(lifted-parsed-begin?"
" exp-rhs_522)"
"(lifted-parsed-begin-last"
" exp-rhs_522)"
" exp-rhs_522)))"
"(let-values(((dv_524)"
"(parsed-define-values19.1"
" s_504"
"(car"
" ids+syms+rhs_518)"
"(cadr"
" ids+syms+rhs_518)"
" just-rhs_523)))"
"(if(lifted-parsed-begin?"
" exp-rhs_522)"
"(let-values(((the-struct_525)"
" exp-rhs_522))"
"(if(lifted-parsed-begin?"
" the-struct_525)"
"(let-values(((last178_526)"
" dv_524))"
"(lifted-parsed-begin30.1"
"(lifted-parsed-begin-seq"
" the-struct_525)"
" last178_526))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                               \"lifted-parsed-begin?\""
" the-struct_525)))"
" dv_524)))))"
" fold-var_520))))"
"(values fold-var_521)))))"
"(for-loop_515 fold-var_519(unsafe-cdr lst_517))))"
" fold-var_516))))"
" for-loop_515)"
" null"
" lst_514)))))"
" exp-s_503)))))))))"
"(define-values"
"(unpack74.1)"
"(lambda(given-kws_527 given-args_528 require-lifts69_529 lifts70_530 exp-s71_531 s72_532)"
"(let-values(((adjust-form67_533)(car given-args_528)))"
"(wrap-lifts-as-lifted-parsed-begin73.1 adjust-form67_533 require-lifts69_529 lifts70_530 exp-s71_531 s72_532))))"
"(define-values"
"(wrap-lifts-as-lifted-parsed-begin75.1)"
"(lifted/7.1$4"
"(lambda(given-kws_534 given-argc_535)"
"(if(= given-argc_535 6)"
"(let-values(((l2_536) given-kws_534))"
"(if(pair? l2_536)(if(eq?(car l2_536) '#:adjust-form)(null?(cdr l2_536)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_537 given-args_538 require-lifts_539 lifts_540 exp-s_541 s_542)"
"(unpack74.1 given-kws_537 given-args_538 require-lifts_539 lifts_540 exp-s_541 s_542)))"
" '(#:adjust-form)"
" '(#:adjust-form)))"
"(void)"
"(void)"
"(define-values"
"(do-dynamic-require)"
"(let-values(((do-dynamic-require6_1)"
"(lambda(who3_2 mod-path4_3 sym5_4 fail-k1_5 fail-k2_6)"
"(let-values(((who_7) who3_2))"
"(let-values(((mod-path_8) mod-path4_3))"
"(let-values(((sym_9) sym5_4))"
"(let-values(((fail-k_10)(if fail-k2_6 fail-k1_5 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_15)(1/module-path? mod-path_8)))"
"(if or-part_15"
" or-part_15"
"(let-values(((or-part_16)(1/module-path-index? mod-path_8)))"
"(if or-part_16 or-part_16(1/resolved-module-path? mod-path_8)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_7"
"                                                 \"(or/c module-path? module-path-index? resolved-module-path?)\""
" mod-path_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_17)(symbol? sym_9)))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)(not sym_9)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)(equal? sym_9 0)))"
"(if or-part_19 or-part_19(void? sym_9)))))))"
"(void)"
"(let-values()"
"                                                  (raise-argument-error who_7 \"(or/c symbol? #f 0 void?)\" sym_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(procedure? fail-k_10)"
"(procedure-arity-includes? fail-k_10 0)"
" #f)"
"(void)"
"                                                  (let-values () (raise-argument-error who_7 \"(-> any)\" fail-k_10)))"
"(values))))"
"(let-values(((ns_11)(1/current-namespace)))"
"(let-values(((mpi_12)"
"(if(1/module-path? mod-path_8)"
"(let-values()(1/module-path-index-join mod-path_8 #f))"
"(if(1/module-path-index? mod-path_8)"
"(let-values() mod-path_8)"
"(let-values()"
"(1/module-path-index-join"
"(resolved-module-path->module-path mod-path_8)"
" #f))))))"
"(let-values(((mod-name_13)(1/module-path-index-resolve mpi_12 #t)))"
"(let-values(((phase_14)(namespace-phase ns_11)))"
"(if(not sym_9)"
"(let-values()"
"(let-values(((ns20_21) ns_11)"
"((mpi21_22) mpi_12)"
"((phase22_23) phase_14)"
"((phase23_24) phase_14)"
"((temp24_25) #f))"
"(namespace-module-instantiate!94.1"
" temp24_25"
" #t"
" phase23_24"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns20_21"
" mpi21_22"
" phase22_23)))"
"(if(equal? sym_9 0)"
"(let-values()"
"(let-values(((ns25_27) ns_11)"
"((mpi26_28) mpi_12)"
"((phase27_29) phase_14)"
"((phase28_30) phase_14))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" phase28_30"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns25_27"
" mpi26_28"
" phase27_29)))"
"(if(void? sym_9)"
"(let-values()"
"(let-values(((ns29_32) ns_11)"
"((mpi30_33) mpi_12)"
"((phase31_34) phase_14)"
"((phase32_35) phase_14))"
"(namespace-module-visit!102.1"
" phase32_35"
" #t"
" ns29_32"
" mpi30_33"
" phase31_34)))"
"(let-values()"
"(let-values(((m_36)(namespace->module ns_11 mod-name_13)))"
"(let-values((()"
"(begin"
"(if m_36"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'dynamic-require"
" mod-name_13)))"
"(values))))"
"(let-values(((binding/p_37)"
"(hash-ref"
"(hash-ref(module-provides m_36) 0 '#hasheq())"
" sym_9"
" #f)))"
"(if(not binding/p_37)"
"(let-values()"
"(if(eq? fail-k_10 default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                               \"name is not provided\""
"                                                               \"name\""
" sym_9"
"                                                               \"module\""
" mod-name_13)"
"(fail-k_10)))"
"(let-values()"
"(let-values(((binding_38)"
"(provided-as-binding binding/p_37)))"
"(let-values(((ex-sym_39)"
"(module-binding-sym binding_38)))"
"(let-values(((ex-phase_40)"
"(module-binding-phase binding_38)))"
"(let-values((()"
"(begin"
"(let-values(((ns33_47) ns_11)"
"((mpi34_48) mpi_12)"
"((phase35_49) phase_14)"
"((phase36_50) phase_14))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" phase36_50"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns33_47"
" mpi34_48"
" phase35_49))"
"(values))))"
"(let-values(((ex-mod-name_41)"
"(1/module-path-index-resolve"
"(module-path-index-shift"
"(module-binding-module binding_38)"
"(module-self m_36)"
" mpi_12))))"
"(let-values(((m-ns_42)"
"(let-values(((ns37_52) ns_11)"
"((ex-mod-name38_53)"
" ex-mod-name_41)"
"((temp39_54)"
"(phase-"
" phase_14"
" ex-phase_40))"
"((temp40_55) #t))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp40_55"
" #t"
" #f"
" #f"
" ns37_52"
" ex-mod-name38_53"
" temp39_54))))"
"(let-values(((mi_43)"
"(namespace->module"
" ns_11"
" ex-mod-name_41)))"
"(let-values(((access_44)"
"(let-values(((or-part_56)"
"(module-access"
" m_36)))"
"(if or-part_56"
" or-part_56"
"(module-compute-access!"
" m_36)))))"
"(let-values((()"
"(begin"
"(if(if(not"
"(eq?"
" 'provided"
"(hash-ref"
" access_44"
" ex-sym_39"
" #f)))"
"(if(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector"
" m-ns_42)))"
"(not"
"(if(module-binding-extra-inspector"
" binding_38)"
"(inspector-superior?"
"(module-binding-extra-inspector"
" binding_38)"
"(namespace-inspector"
" m-ns_42))"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" 'dynamc-require"
"                                                                                                 \"name is protected\""
"                                                                                                 \"name\""
" sym_9"
"                                                                                                 \"module\""
" mod-name_13))"
"(void))"
"(values))))"
"(let-values(((fail_45)"
"(lambda()"
"(if(eq?"
" fail-k_10"
" default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                                 \"name's binding is missing\""
"                                                                                                 \"name\""
" sym_9"
"                                                                                                 \"module\""
" mod-name_13)"
"(fail-k_10)))))"
"(if(not"
"(provided-as-transformer?"
" binding/p_37))"
"(let-values()"
"(namespace-get-variable"
" m-ns_42"
" ex-phase_40"
" ex-sym_39"
" fail_45))"
"(let-values()"
"(let-values(((missing_57)"
"(gensym 'missing)))"
"(let-values((()"
"(begin"
"(let-values(((ns41_60)"
" ns_11)"
"((mpi42_61)"
" mpi_12)"
"((phase43_62)"
" phase_14)"
"((phase44_63)"
" phase_14))"
"(namespace-module-visit!102.1"
" phase44_63"
" #t"
" ns41_60"
" mpi42_61"
" phase43_62))"
"(values))))"
"(let-values(((t_58)"
"(namespace-get-transformer"
" m-ns_42"
" ex-phase_40"
" ex-sym_39"
" missing_57)))"
"(if(eq? t_58 missing_57)"
"(let-values()(fail_45))"
"(let-values()"
"(let-values(((tmp-ns_64)"
"(let-values(((ns45_66)"
" ns_11))"
"(new-namespace9.1"
" #f"
" #f"
" #f"
" #f"
" ns45_66"
" #t))))"
"(let-values(((mod-path_65)"
"(resolved-module-path->module-path"
" mod-name_13)))"
"(begin"
"(1/namespace-require"
" mod-path_65"
" tmp-ns_64)"
"(1/eval"
" sym_9"
" tmp-ns_64)))))))))))))))))))))))))))))))))))))))))))))"
"(case-lambda"
"((who_67 mod-path_68 sym_69)(do-dynamic-require6_1 who_67 mod-path_68 sym_69 #f #f))"
"((who_70 mod-path_71 sym_72 fail-k1_73)(do-dynamic-require6_1 who_70 mod-path_71 sym_72 fail-k1_73 #t)))))"
" (define-values (default-dynamic-require-fail-thunk) (lambda () (error \"failed\")))"
"(define-values"
"(1/dynamic-require)"
"(let-values(((dynamic-require12_74)"
"(lambda(mod-path10_75 sym11_76 fail-k8_77 fail-k9_78)"
"(let-values(((mod-path_79) mod-path10_75))"
"(let-values(((sym_80) sym11_76))"
"(let-values(((fail-k_81)(if fail-k9_78 fail-k8_77 default-dynamic-require-fail-thunk)))"
"(let-values()(do-dynamic-require 'dynamic-require mod-path_79 sym_80 fail-k_81))))))))"
"(case-lambda"
"((mod-path_82 sym_83)(dynamic-require12_74 mod-path_82 sym_83 #f #f))"
"((mod-path_84 sym_85 fail-k8_86)(dynamic-require12_74 mod-path_84 sym_85 fail-k8_86 #t)))))"
"(define-values"
"(1/dynamic-require-for-syntax)"
"(let-values(((dynamic-require-for-syntax18_87)"
"(lambda(mod-path16_88 sym17_89 fail-k14_90 fail-k15_91)"
"(let-values(((mod-path_92) mod-path16_88))"
"(let-values(((sym_93) sym17_89))"
"(let-values(((fail-k_94)(if fail-k15_91 fail-k14_90 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
"(let-values(((ns_95)(1/current-namespace)))"
"(namespace->namespace-at-phase ns_95(add1(namespace-phase ns_95)))))"
"(let-values()"
"(do-dynamic-require 'dynamic-require-for-syntax mod-path_92 sym_93 fail-k_94))))))))))"
"(case-lambda"
"((mod-path_96 sym_97)(dynamic-require-for-syntax18_87 mod-path_96 sym_97 #f #f))"
"((mod-path_98 sym_99 fail-k14_100)(dynamic-require-for-syntax18_87 mod-path_98 sym_99 fail-k14_100 #t)))))"
"(void)"
"(void)"
"(define-values"
"(eval$1)"
"(case-lambda"
"((s_1)((current-eval)(intro s_1)))"
"((s_2 ns_3)"
"(begin"
"      (if (1/namespace? ns_3) (void) (let-values () (raise-argument-error 'eval \"namespace?\" ns_3)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_3)"
"(let-values()((current-eval)(intro s_2 ns_3))))))))"
"(define-values"
"(1/eval-syntax)"
"(case-lambda"
"((s_4)"
"(begin"
"      (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_4)))"
"((current-eval) s_4)))"
"((s_5 ns_6)"
"(begin"
"      (if (syntax?$1 s_5) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_5)))"
"      (if (1/namespace? ns_6) (void) (let-values () (raise-argument-error 'eval-syntax \"namespace?\" ns_6)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_6)"
"(let-values()((current-eval) s_5)))))))"
"(define-values(compile$1)(lambda(s_7)((current-compile)(intro s_7) #f)))"
"(define-values"
"(1/compile-syntax)"
"(lambda(s_8)"
"(begin"
"      (if (syntax?$1 s_8) (void) (let-values () (raise-argument-error 'compile-syntax \"syntax?\" s_8)))"
"((current-compile) s_8 #f))))"
"(define-values(1/expand)(lambda(s_9)(expand$1(intro s_9)(1/current-namespace) #t)))"
"(define-values"
"(1/expand-syntax)"
"(lambda(s_10)"
"(begin"
"      (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'expand-syntax \"syntax?\" s_10)))"
"(expand$1 s_10(1/current-namespace) #t))))"
"(define-values(1/expand-once)(lambda(s_11)(expand-once$1(intro s_11))))"
"(define-values"
"(1/expand-syntax-once)"
"(lambda(s_12)"
"(begin"
"      (if (syntax?$1 s_12) (void) (let-values () (raise-argument-error 'expand-syntax-once \"syntax?\" s_12)))"
"(expand-once$1 s_12))))"
"(define-values(1/expand-to-top-form)(lambda(s_13)(expand-to-top-form$1(intro s_13))))"
"(define-values"
"(1/expand-syntax-to-top-form)"
"(lambda(s_14)"
"(begin"
"      (if (syntax?$1 s_14) (void) (let-values () (raise-argument-error 'expand-syntax-to-top-form \"syntax?\" s_14)))"
"(expand-to-top-form$1 s_14))))"
"(define-values"
"(intro)"
"(let-values(((intro4_15)"
"(lambda(given-s3_16 ns1_17 ns2_18)"
"(let-values(((given-s_19) given-s3_16))"
"(let-values(((ns_20)(if ns2_18 ns1_17(1/current-namespace))))"
"(let-values()"
"(let-values(((s_21)(if(syntax?$1 given-s_19) given-s_19(1/datum->syntax #f given-s_19))))"
"(1/namespace-syntax-introduce s_21 ns_20))))))))"
"(case-lambda((given-s_22)(intro4_15 given-s_22 #f #f))((given-s_23 ns1_24)(intro4_15 given-s_23 ns1_24 #t)))))"
"(void)"
"(void)"
"(define-values"
"(1/module-declared?)"
"(let-values(((module-declared?4_6)"
"(lambda(mod3_7 load?1_8 load?2_9)"
"(let-values(((mod_10) mod3_7))"
"(let-values(((load?_11)(if load?2_9 load?1_8 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_10)"
"(void)"
"(let-values()"
"(raise-argument-error 'module-declared? module-reference-str mod_10)))"
"(values))))"
"(let-values(((ns_12)(1/current-namespace)))"
"(let-values(((name_13)"
"(let-values(((...space/api-module.rkt:28:15_14)"
" reference->resolved-module-path34.1)"
"((mod35_15) mod_10)"
"((load?36_16) load?_11))"
"(reference->resolved-module-path32.1 load?36_16 mod35_15))))"
"(if(namespace->module ns_12 name_13) #t #f))))))))))"
"(case-lambda"
"((mod_17)(module-declared?4_6 mod_17 #f #f))"
"((mod_18 load?1_19)(module-declared?4_6 mod_18 load?1_19 #t)))))"
"(define-values"
"(1/module-predefined?)"
"(lambda(mod_20)"
"(let-values((()"
"(begin"
"(if(module-reference? mod_20)"
"(void)"
"(let-values()(raise-argument-error 'module-predefined? module-reference-str mod_20)))"
"(values))))"
"(let-values(((ns_21)(1/current-namespace)))"
"(let-values(((name_22)"
"(let-values(((...space/api-module.rkt:35:15_24) reference->resolved-module-path34.1)"
"((mod37_25) mod_20)"
"((temp38_26) #f))"
"(reference->resolved-module-path32.1 temp38_26 mod37_25))))"
"(let-values(((m_23)(namespace->module ns_21 name_22)))(if m_23(module-primitive? m_23) #f)))))))"
"(define-values"
"(module->)"
"(let-values(((module->11_27)"
"(lambda(extract8_28 who9_29 mod10_30 load?6_31 load?7_32)"
"(let-values(((extract_33) extract8_28))"
"(let-values(((who_34) who9_29))"
"(let-values(((mod_35) mod10_30))"
"(let-values(((load?_36)(if load?7_32 load?6_31 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_35)"
"(void)"
"(let-values()(raise-argument-error who_34 module-reference-str mod_35)))"
"(values))))"
"(let-values(((m_37)"
"(namespace->module/complain"
" who_34"
"(1/current-namespace)"
"(let-values(((...space/api-module.rkt:44:40_38)"
" reference->resolved-module-path34.1)"
"((mod39_39) mod_35)"
"((load?40_40) load?_36))"
"(reference->resolved-module-path32.1 load?40_40 mod39_39)))))"
"(extract_33 m_37)))))))))))"
"(case-lambda"
"((extract_41 who_42 mod_43)(module->11_27 extract_41 who_42 mod_43 #f #f))"
"((extract_44 who_45 mod_46 load?6_47)(module->11_27 extract_44 who_45 mod_46 load?6_47 #t)))))"
"(define-values"
"(1/module->language-info)"
"(let-values(((module->language-info16_48)"
"(lambda(mod15_49 load?13_50 load?14_51)"
"(let-values(((mod_52) mod15_49))"
"(let-values(((load?_53)(if load?14_51 load?13_50 #f)))"
"(let-values()(module-> module-language-info 'module->language-info mod_52 load?_53)))))))"
"(case-lambda"
"((mod_54)(module->language-info16_48 mod_54 #f #f))"
"((mod_55 load?13_56)(module->language-info16_48 mod_55 load?13_56 #t)))))"
"(define-values(1/module->imports)(lambda(mod_57)(module-> module-requires 'module->imports mod_57)))"
"(define-values"
"(1/module->exports)"
"(lambda(mod_58)"
"(let-values(((provides_59 self_60)"
"(module->"
"(lambda(m_61)(values(module-provides m_61)(module-self m_61)))"
" 'module->exports"
" mod_58)))"
"(provides->api-provides provides_59 self_60))))"
"(define-values"
"(1/module->indirect-exports)"
"(lambda(mod_62)"
"(module->"
"(lambda(m_63)(variables->api-nonprovides(module-provides m_63)((module-get-all-variables m_63))))"
" 'module->indirect-exports"
" mod_62)))"
"(define-values"
"(1/module-provide-protected?)"
"(lambda(mod_64 sym_65)"
"(module->"
"(lambda(m_66)"
"(let-values(((b/p_67)(hash-ref(module-provides m_66) sym_65 #f)))"
"(let-values(((or-part_68)(not b/p_67)))(if or-part_68 or-part_68(provided-as-protected? b/p_67)))))"
" 'module-provide-protected?"
" mod_64)))"
"(define-values"
"(1/module->namespace)"
"(let-values(((module->namespace21_69)"
"(lambda(mod20_70 ns18_71 ns19_72)"
"(let-values(((mod_73) mod20_70))"
"(let-values(((ns_74)(if ns19_72 ns18_71(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_73)"
"(void)"
"(let-values()"
"(raise-argument-error 'module->namespace module-reference-str mod_73)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_74)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'module->namespace \"namespace?\" ns_74)))"
"(values))))"
"(let-values(((name_75)"
"(let-values(((...space/api-module.rkt:74:15_78)"
" reference->resolved-module-path34.1)"
"((mod44_79) mod_73)"
"((temp45_80) #t))"
"(reference->resolved-module-path32.1 temp45_80 mod44_79))))"
"(let-values(((phase_76)(namespace-phase ns_74)))"
"(let-values(((m-ns_77)"
"(let-values(((ns46_81) ns_74)"
"((name47_82) name_75)"
"((phase48_83) phase_76))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns46_81"
" name47_82"
" phase48_83))))"
"(begin"
"(if m-ns_77"
"(void)"
"(let-values()"
"(begin"
"(namespace->module/complain 'module->namespace ns_74 name_75)"
"(raise-arguments-error"
" 'module->namespace"
"                                           \"module not instantiated in the current namespace\""
"                                           \"name\""
" name_75))))"
"(if(inspector-superior?(current-code-inspector)(namespace-inspector m-ns_77))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module->namespace"
"                                         \"current code inspector cannot access namespace of module\""
"                                         \"module name\""
" name_75)))"
"(if(namespace-get-root-expand-ctx m-ns_77)"
"(void)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" m-ns_77"
"(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f)))))"
"(let-values(((ns41_84) ns_74)"
"((temp42_85)(namespace-mpi m-ns_77))"
"((phase43_86) phase_76))"
"(namespace-module-make-available!110.1 #f #f ns41_84 temp42_85 phase43_86))"
" m-ns_77))))))))))))"
"(case-lambda"
"((mod_87)(module->namespace21_69 mod_87 #f #f))"
"((mod_88 ns18_89)(module->namespace21_69 mod_88 ns18_89 #t)))))"
"(define-values"
"(1/namespace-unprotect-module)"
"(let-values(((namespace-unprotect-module27_90)"
"(lambda(insp25_91 mod26_92 ns23_93 ns24_94)"
"(let-values(((insp_95) insp25_91))"
"(let-values(((mod_96) mod26_92))"
"(let-values(((ns_97)(if ns24_94 ns23_93(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(inspector? insp_95)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-unprotect-module \"inspector?\" insp_95)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod_96)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                 \"module-path?\""
" mod_96)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_97)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                   \"namespace?\""
" ns_97)))"
"(values))))"
"(let-values(((name_98)"
"(let-values(((...space/api-module.rkt:99:15_101)"
" reference->resolved-module-path34.1)"
"((mod49_102) mod_96)"
"((temp50_103) #f))"
"(reference->resolved-module-path32.1 temp50_103 mod49_102))))"
"(let-values(((phase_99)(namespace-phase ns_97)))"
"(let-values(((m-ns_100)"
"(let-values(((ns51_104) ns_97)"
"((name52_105) name_98)"
"((phase53_106) phase_99))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns51_104"
" name52_105"
" phase53_106))))"
"(begin"
"(if m-ns_100"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'namespace-unprotect-module"
"                                             \"module not instantiated\""
"                                             \"module name\""
" name_98)))"
"(if(inspector-superior? insp_95(namespace-inspector m-ns_100))"
"(let-values()"
"(set-namespace-inspector!"
" m-ns_100"
"(make-inspector(current-code-inspector))))"
"(void))))))))))))))))"
"(case-lambda"
"((insp_107 mod_108)(namespace-unprotect-module27_90 insp_107 mod_108 #f #f))"
"((insp_109 mod_110 ns23_111)(namespace-unprotect-module27_90 insp_109 mod_110 ns23_111 #t)))))"
"(define-values"
"(namespace->module/complain)"
"(lambda(who_112 ns_113 name_114)"
"(let-values(((or-part_115)(namespace->module ns_113 name_114)))"
"(if or-part_115"
" or-part_115"
"        (raise-arguments-error who_112 \"unknown module in the current namespace\" \"name\" name_114)))))"
"(define-values"
"(module-reference?)"
"(lambda(mod_116)"
"(let-values(((or-part_117)(1/module-path? mod_116)))"
"(if or-part_117"
" or-part_117"
"(let-values(((or-part_118)(1/module-path-index? mod_116)))"
"(if or-part_118 or-part_118(1/resolved-module-path? mod_116)))))))"
" (define-values (module-reference-str) \"(or/c module-path? module-path-index? resolved-module-path?)\")"
"(define-values"
"(lifted/1.1$5 lifted/2.1$5 lifted/3.1$4 lifted/4.1$4 lifted/5.1$4)"
"(make-struct-type"
" 'reference->resolved-module-path"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'reference->resolved-module-path"
"(case-lambda((self_119 mod_120)(apply missing-kw self_119 mod_120 null))))))"
"(current-inspector)"
"(case-lambda((self_121 mod_122)(apply missing-kw self_121 mod_122 null)))))"
"(define-values"
"(reference->resolved-module-path32.1)"
"(lambda(load?29_123 mod31_124)"
"(let-values(((mod_125) mod31_124))"
"(let-values(((load?_126) load?29_123))"
"(let-values()"
"(if(1/resolved-module-path? mod_125)"
"(let-values() mod_125)"
"(let-values()"
"(let-values(((mpi_127)"
"(if(1/module-path-index? mod_125) mod_125(1/module-path-index-join mod_125 #f))))"
"(1/module-path-index-resolve mpi_127 load?_126)))))))))"
"(define-values"
"(unpack33.1)"
"(lambda(given-kws_128 given-args_129 mod31_130)"
"(let-values(((load?29_131)(car given-args_129)))(reference->resolved-module-path32.1 load?29_131 mod31_130))))"
"(define-values"
"(reference->resolved-module-path34.1)"
"(lifted/2.1$5"
"(lambda(given-kws_132 given-argc_133)"
"(if(= given-argc_133 3)"
"(let-values(((l2_134) given-kws_132))"
"(if(pair? l2_134)(if(eq?(car l2_134) '#:load?)(null?(cdr l2_134)) #f) #f))"
" #f))"
"(case-lambda((given-kws_135 given-args_136 mod_137)(unpack33.1 given-kws_135 given-args_136 mod_137)))"
" '(#:load?)"
" '(#:load?)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:missing-module 1/exn:missing-module? 1/exn:missing-module-accessor)"
"(make-struct-type-property"
" 'missing-module"
"(lambda(v_3 info_4)"
"(begin"
"(if(if(procedure? v_3)(procedure-arity-includes? v_3 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:missing-module \"(procedure-arity-includes/c 1)\" v_3)))"
" v_3))))"
"(define-values"
"(1/struct:exn:fail:filesystem:missing-module"
" 1/make-exn:fail:filesystem:missing-module"
" 1/exn:fail:filesystem:missing-module?"
" 1/exn:fail:filesystem:missing-module-path)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:filesystem:missing-module"
" struct:exn:fail:filesystem"
" 1"
" 0"
" #f"
"(list"
"(cons 1/prop:missing-module(lambda(e_26)(1/exn:fail:filesystem:missing-module-path e_26))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:filesystem:missing-module)))))"
"(values struct:_5 make-_6 ?_7(make-struct-field-accessor -ref_8 0 'path))))"
"(define-values"
"(1/struct:exn:fail:syntax:missing-module"
" 1/make-exn:fail:syntax:missing-module"
" 1/exn:fail:syntax:missing-module?"
" 1/exn:fail:syntax:missing-module-path)"
"(let-values(((struct:_27 make-_28 ?_29 -ref_30 -set!_31)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:missing-module"
" 1/struct:exn:fail:syntax"
" 1"
" 0"
" #f"
"(list(cons 1/prop:missing-module(lambda(e_48)(1/exn:fail:syntax:missing-module-path e_48))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:syntax:missing-module)))))"
"(values struct:_27 make-_28 ?_29(make-struct-field-accessor -ref_30 0 'path))))"
"(define-values"
"(1/current-module-path-for-load)"
"(make-parameter"
" #f"
"(lambda(v_49)"
"(begin"
"(if(let-values(((or-part_50)(not v_49)))"
"(if or-part_50"
" or-part_50"
"(let-values(((or-part_51)(1/module-path? v_49)))"
"(if or-part_51 or-part_51(if(syntax?$1 v_49)(1/module-path?(syntax->datum$1 v_49)) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-path-for-load"
"(string-append"
"             \"(or/c module-path?\""
"             \" (and/c syntax? (lambda (stx) (module-path? (syntax->datum stx))))\""
"             \" #f)\")"
" v_49)))"
" v_49))))"
"(define-values"
"(maybe-raise-missing-module)"
"(lambda(name_52 filename_53 pre_54 rel_55 post_56 errstr_57)"
"(let-values(((path_58)(1/current-module-path-for-load)))"
"(if path_58"
"(let-values()"
"(begin"
"(if(syntax?$1 path_58)"
"(let-values()"
"(raise"
"(1/make-exn:fail:syntax:missing-module"
"(format"
"(string-append"
"                    \"~a: cannot open module file\\n\""
"                    \"  module path: ~a\\n\""
"                    \"  path: ~a~a~a~a\\n\""
"                    \"  system error: ~a\")"
"(if(syntax-srcloc path_58)(srcloc->string(syntax-srcloc path_58)) name_52)"
"(syntax->datum$1 path_58)"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)"
"(list path_58)"
"(syntax->datum$1 path_58))))"
"(void))"
"(raise"
"(1/make-exn:fail:filesystem:missing-module"
"(format"
"(string-append"
"                \"~a: cannot open module file\\n\""
"                \"  module path: ~a\\n\""
"                \"  path: ~a~a~a~a\\n\""
"                \"  system error: ~a\")"
" name_52"
" path_58"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)"
" path_58))))"
"(void)))))"
"(void)"
"(void)"
"(define-values"
"(1/local-expand)"
"(let-values(((local-expand6_1)"
"(lambda(s3_2 context4_3 stop-ids5_4 intdefs1_5 intdefs2_6)"
"(let-values(((s_7) s3_2))"
"(let-values(((context_8) context4_3))"
"(let-values(((stop-ids_9) stop-ids5_4))"
"(let-values(((intdefs_10)(if intdefs2_6 intdefs1_5 #f)))"
"(let-values()"
"(let-values(((temp63_11) 'local-expand)"
"((s64_12) s_7)"
"((context65_13) context_8)"
"((stop-ids66_14) stop-ids_9)"
"((intdefs67_15) intdefs_10))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp63_11"
" s64_12"
" context65_13"
" stop-ids66_14"
" intdefs67_15"
" #t))))))))))"
"(case-lambda"
"((s_16 context_17 stop-ids_18)(local-expand6_1 s_16 context_17 stop-ids_18 #f #f))"
"((s_19 context_20 stop-ids_21 intdefs1_22)(local-expand6_1 s_19 context_20 stop-ids_21 intdefs1_22 #t)))))"
"(define-values"
"(1/local-expand/capture-lifts)"
"(let-values(((local-expand/capture-lifts15_23)"
"(lambda(s12_24 context13_25 stop-ids14_26 intdefs8_27 lift-key9_28 intdefs10_29 lift-key11_30)"
"(let-values(((s_31) s12_24))"
"(let-values(((context_32) context13_25))"
"(let-values(((stop-ids_33) stop-ids14_26))"
"(let-values(((intdefs_34)(if intdefs10_29 intdefs8_27 #f)))"
"(let-values(((lift-key_35)(if lift-key11_30 lift-key9_28(generate-lift-key))))"
"(let-values()"
"(let-values(((temp68_37) 'local-expand)"
"((s69_38) s_31)"
"((context70_39) context_32)"
"((stop-ids71_40) stop-ids_33)"
"((intdefs72_41) intdefs_34)"
"((temp73_42) #t)"
"((lift-key74_43) lift-key_35))"
"(do-local-expand60.1"
" #f"
" #f"
" temp73_42"
" #t"
" lift-key74_43"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp68_37"
" s69_38"
" context70_39"
" stop-ids71_40"
" intdefs72_41"
" #t)))))))))))"
"(case-lambda"
"((s_44 context_45 stop-ids_46)(local-expand/capture-lifts15_23 s_44 context_45 stop-ids_46 #f #f #f #f))"
"((s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51)"
"(local-expand/capture-lifts15_23 s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51 #t #t))"
"((s_52 context_53 stop-ids_54 intdefs8_55)"
"(local-expand/capture-lifts15_23 s_52 context_53 stop-ids_54 intdefs8_55 #f #t #f)))))"
"(define-values"
"(1/local-transformer-expand)"
"(let-values(((local-transformer-expand22_56)"
"(lambda(s19_57 context20_58 stop-ids21_59 intdefs17_60 intdefs18_61)"
"(let-values(((s_62) s19_57))"
"(let-values(((context_63) context20_58))"
"(let-values(((stop-ids_64) stop-ids21_59))"
"(let-values(((intdefs_65)(if intdefs18_61 intdefs17_60 #f)))"
"(let-values()"
"(let-values(((temp75_67) 'local-expand)"
"((s76_68) s_62)"
"((context77_69) context_63)"
"((stop-ids78_70) stop-ids_64)"
"((intdefs79_71) intdefs_65)"
"((temp80_72) #t))"
"(do-local-expand60.1"
" temp80_72"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp75_67"
" s76_68"
" context77_69"
" stop-ids78_70"
" intdefs79_71"
" #t))))))))))"
"(case-lambda"
"((s_73 context_74 stop-ids_75)(local-transformer-expand22_56 s_73 context_74 stop-ids_75 #f #f))"
"((s_76 context_77 stop-ids_78 intdefs17_79)"
"(local-transformer-expand22_56 s_76 context_77 stop-ids_78 intdefs17_79 #t)))))"
"(define-values"
"(1/local-transformer-expand/capture-lifts)"
"(let-values(((local-transformer-expand/capture-lifts31_80)"
"(lambda(s28_81 context29_82 stop-ids30_83 intdefs24_84 lift-key25_85 intdefs26_86 lift-key27_87)"
"(let-values(((s_88) s28_81))"
"(let-values(((context_89) context29_82))"
"(let-values(((stop-ids_90) stop-ids30_83))"
"(let-values(((intdefs_91)(if intdefs26_86 intdefs24_84 #f)))"
"(let-values(((lift-key_92)(if lift-key27_87 lift-key25_85(generate-lift-key))))"
"(let-values()"
"(let-values(((temp81_94) 'local-expand)"
"((s82_95) s_88)"
"((context83_96) context_89)"
"((stop-ids84_97) stop-ids_90)"
"((intdefs85_98) intdefs_91)"
"((temp86_99) #t)"
"((temp87_100) #t)"
"((lift-key88_101) lift-key_92))"
"(do-local-expand60.1"
" temp86_99"
" #t"
" temp87_100"
" #t"
" lift-key88_101"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_94"
" s82_95"
" context83_96"
" stop-ids84_97"
" intdefs85_98"
" #t)))))))))))"
"(case-lambda"
"((s_102 context_103 stop-ids_104)"
"(local-transformer-expand/capture-lifts31_80 s_102 context_103 stop-ids_104 #f #f #f #f))"
"((s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109)"
"(local-transformer-expand/capture-lifts31_80 s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109 #t #t))"
"((s_110 context_111 stop-ids_112 intdefs24_113)"
"(local-transformer-expand/capture-lifts31_80 s_110 context_111 stop-ids_112 intdefs24_113 #f #t #f)))))"
"(define-values"
"(do-syntax-local-expand-expression39.1)"
"(lambda(local-keys33_114 local-keys35_115 local-values34_116 local-values36_117 who37_118 s38_119)"
"(let-values(((who_120) who37_118))"
"(let-values(((s_121) s38_119))"
"(let-values(((local-keys_122)(if local-keys35_115 local-keys33_114 null)))"
"(let-values(((local-values_123)(if local-values36_117 local-values34_116 null)))"
"(let-values()"
"(let-values(((exp-s_124)"
"(let-values(((who89_128) who_120)"
"((s90_129) s_121)"
"((temp91_130) 'expression)"
"((null92_131) null)"
"((temp93_132) #f)"
"((temp94_133) #t)"
"((local-keys95_134) local-keys_122)"
"((local-values96_135) local-values_123))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" local-keys95_134"
" #t"
" local-values96_135"
" #t"
" temp94_133"
" #t"
" who89_128"
" s90_129"
" temp91_130"
" null92_131"
" temp93_132"
" #t))))"
"(let-values(((ctx_125)(let-values()(get-current-expand-context15.1 #f #f #f #f))))"
"(let-values(((ae_126)"
"(already-expanded1.1"
"(flip-introduction-scopes exp-s_124 ctx_125)"
"(expand-context-binding-layer ctx_125))))"
"(begin"
"(let-values(((obs_136)(expand-context-observer ctx_125)))"
"(if obs_136"
"(let-values()(let-values()(call-expand-observe obs_136 'opaque-expr ae_126)))"
"(void)))"
"(let-values(((obs_137)(expand-context-observer ctx_125)))"
"(if obs_137"
"(let-values()(let-values()(call-expand-observe obs_137 'exit-local exp-s_124)))"
"(void)))"
"(values exp-s_124(flip-introduction-scopes(datum->syntax$1 #f ae_126) ctx_125)))))))))))))"
"(define-values"
"(1/syntax-local-expand-expression)"
"(lambda(s_161)"
"(let-values(((temp97_162) 'syntax-local-expand-expression)((s98_163) s_161))"
"(do-syntax-local-expand-expression39.1 #f #f #f #f temp97_162 s98_163))))"
"(define-values"
"(1/syntax-local-expand-expression/extend-environment)"
"(lambda(s_164 keys_165 values_166)"
"(let-values(((temp99_168) 'syntax-local-expand-expression/extend-environment)"
"((s100_169) s_164)"
"((keys101_170) keys_165)"
"((values102_171) values_166))"
"(do-syntax-local-expand-expression39.1 keys101_170 #t values102_171 #t temp99_168 s100_169))))"
"(define-values"
"(do-local-expand60.1)"
"(lambda(as-transformer?43_172"
" as-transformer?49_173"
" capture-lifts?42_174"
" capture-lifts?48_175"
" lift-key44_176"
" lift-key50_177"
" local-keys46_178"
" local-keys52_179"
" local-values47_180"
" local-values53_181"
" skip-log-exit?45_182"
" skip-log-exit?51_183"
" who56_184"
" s57_185"
" context58_186"
" stop-ids59_187"
" intdefs54_188"
" intdefs55_189)"
"(let-values(((who_190) who56_184))"
"(let-values(((s_191) s57_185))"
"(let-values(((context_192) context58_186))"
"(let-values(((stop-ids_193) stop-ids59_187))"
"(let-values(((intdefs_194)(if intdefs55_189 intdefs54_188 #f)))"
"(let-values(((capture-lifts?_195)(if capture-lifts?48_175 capture-lifts?42_174 #f)))"
"(let-values(((as-transformer?_196)(if as-transformer?49_173 as-transformer?43_172 #f)))"
"(let-values(((lift-key_197)"
"(if lift-key50_177"
" lift-key44_176"
"(if(let-values(((or-part_198) capture-lifts?_195))"
"(if or-part_198 or-part_198 as-transformer?_196))"
"(generate-lift-key)"
" #f))))"
"(let-values(((skip-log-exit?_199)(if skip-log-exit?51_183 skip-log-exit?45_182 #f)))"
"(let-values(((local-keys_200)(if local-keys52_179 local-keys46_178 null)))"
"(let-values(((local-values_201)(if local-values53_181 local-values47_180 null)))"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_191)"
"(void)"
"                                                (let-values () (raise-argument-error who_190 \"syntax?\" s_191)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_209)(list? context_192)))"
"(if or-part_209"
" or-part_209"
"(memq"
" context_192"
"(if as-transformer?_196"
" '(expression top-level)"
" '(expression top-level module module-begin)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_190"
"(if as-transformer?_196"
"                                                       \"(or/c 'expression 'top-level list?)\""
"                                                       \"(or/c 'expression 'top-level 'module 'module-begin list?)\")"
" context_192)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_210)(not stop-ids_193)))"
"(if or-part_210"
" or-part_210"
"(if(list? stop-ids_193)"
"(andmap2 identifier? stop-ids_193)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_190"
"                                                       \"(or/c (listof identifier?) #f)\""
" stop-ids_193)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_211)(not intdefs_194)))"
"(if or-part_211"
" or-part_211"
"(let-values(((or-part_212)"
"(1/internal-definition-context? intdefs_194)))"
"(if or-part_212"
" or-part_212"
"(if(list? intdefs_194)"
"(andmap2 1/internal-definition-context? intdefs_194)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_190"
"                                                         \"(or/c #f internal-definitionc-context? (listof internal-definitionc-context?))\""
" intdefs_194)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-keys_200)"
"(void)"
"(let-values()"
"                                                          (raise-argument-error who_190 \"list?\" local-keys_200)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-values_201)"
"(void)"
"(let-values()"
"                                                            (raise-argument-error who_190 \"list?\" local-values_201)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(=(length local-keys_200)(length local-values_201))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_190"
"                                                               \"different lengths for list of keys and values for extending the environment\""
"                                                               \"keys\""
" local-keys_200"
"                                                               \"values\""
" local-values_201)))"
"(values))))"
"(let-values(((ctx_202)"
"(let-values(((who103_213) who_190))"
"(get-current-expand-context15.1 #f #f who103_213 #t))))"
"(let-values(((phase_203)"
"(if as-transformer?_196"
"(add1(expand-context-phase ctx_202))"
"(expand-context-phase ctx_202))))"
"(let-values(((base-local-ctx_204)"
"(let-values(((ctx104_215) ctx_202)"
"((context105_216) context_192)"
"((phase106_217) phase_203)"
"((intdefs107_218) intdefs_194)"
"((stop-ids108_219) stop-ids_193))"
"(make-local-expand-context33.1"
" context105_216"
" intdefs107_218"
" phase106_217"
" #t"
" stop-ids108_219"
" #t"
" ctx104_215))))"
"(let-values(((local-ctx_205)"
"(let-values(((v_220) base-local-ctx_204))"
"(let-values(((the-struct_221) v_220))"
"(if(expand-context/outer? the-struct_221)"
"(let-values(((inner109_222)"
"(let-values(((the-struct_223)"
"(root-expand-context/outer-inner"
" v_220)))"
"(if(expand-context/inner?"
" the-struct_223)"
"(let-values(((user-env110_224)"
"(let-values(((user-env_225)"
"(expand-context-user-env"
" base-local-ctx_204)))"
"(let-values(((lst_226)"
" local-keys_200)"
"((lst_227)"
" local-values_201))"
"(begin"
"(if(list?"
" lst_226)"
"(void)"
"(let-values()"
"(in-list"
" lst_226)))"
"(if(list?"
" lst_227)"
"(void)"
"(let-values()"
"(in-list"
" lst_227)))"
"((letrec-values(((for-loop_228)"
"(lambda(user-env_229"
" lst_230"
" lst_231)"
"(if(if(pair?"
" lst_230)"
"(pair?"
" lst_231)"
" #f)"
"(let-values(((key_232)"
"(unsafe-car"
" lst_230))"
"((value_233)"
"(unsafe-car"
" lst_231)))"
"(let-values(((user-env_234)"
"(let-values(((user-env_235)"
" user-env_229))"
"(let-values(((user-env_236)"
"(let-values()"
"(hash-set"
" user-env_235"
" key_232"
" value_233))))"
"(values"
" user-env_236)))))"
"(for-loop_228"
" user-env_234"
"(unsafe-cdr"
" lst_230)"
"(unsafe-cdr"
" lst_231))))"
" user-env_229))))"
" for-loop_228)"
" user-env_225"
" lst_226"
" lst_227))))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_223)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_223)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_223)"
"(root-expand-context/inner-defined-syms"
" the-struct_223)"
"(root-expand-context/inner-counter"
" the-struct_223)"
"(root-expand-context/inner-lift-key"
" the-struct_223)"
"(expand-context/inner-to-parsed?"
" the-struct_223)"
"(expand-context/inner-phase"
" the-struct_223)"
"(expand-context/inner-namespace"
" the-struct_223)"
" user-env110_224"
"(expand-context/inner-just-once?"
" the-struct_223)"
"(expand-context/inner-module-begin-k"
" the-struct_223)"
"(expand-context/inner-allow-unbound?"
" the-struct_223)"
"(expand-context/inner-in-local-expand?"
" the-struct_223)"
"(expand-context/inner-stops"
" the-struct_223)"
"(expand-context/inner-declared-submodule-names"
" the-struct_223)"
"(expand-context/inner-lifts"
" the-struct_223)"
"(expand-context/inner-lift-envs"
" the-struct_223)"
"(expand-context/inner-module-lifts"
" the-struct_223)"
"(expand-context/inner-require-lifts"
" the-struct_223)"
"(expand-context/inner-to-module-lifts"
" the-struct_223)"
"(expand-context/inner-requires+provides"
" the-struct_223)"
"(expand-context/inner-observer"
" the-struct_223)"
"(expand-context/inner-for-serializable?"
" the-struct_223)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                         \"expand-context/inner?\""
" the-struct_223)))))"
"(expand-context/outer1.1"
" inner109_222"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_221)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_221)"
"(root-expand-context/outer-frame-id"
" the-struct_221)"
"(expand-context/outer-context the-struct_221)"
"(expand-context/outer-env the-struct_221)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_221)"
"(expand-context/outer-scopes the-struct_221)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_221)"
"(expand-context/outer-binding-layer"
" the-struct_221)"
"(expand-context/outer-reference-records"
" the-struct_221)"
"(expand-context/outer-only-immediate?"
" the-struct_221)"
"(expand-context/outer-need-eventually-defined"
" the-struct_221)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_221)"
"(expand-context/outer-name the-struct_221)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                       \"expand-context/outer?\""
" the-struct_221))))))"
"(let-values(((input-s_206)"
"(let-values(((temp111_237)"
"(flip-introduction-scopes"
" s_191"
" ctx_202))"
"((intdefs112_238) intdefs_194))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" #f"
" #f"
" temp111_237"
" intdefs112_238))))"
"(let-values((()"
"(begin"
"(let-values(((obs_239)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_239"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_239"
" 'enter-local)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if as-transformer?_196"
"(let-values()"
"(let-values(((obs_240)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_240"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_240"
" 'phase-up)))"
"(void))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_241)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_241"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_241"
" 'local-pre"
" input-s_206)"
"(call-expand-observe"
" obs_241"
" 'start-expand))))"
"(void)))"
"(values))))"
"(let-values(((output-s_207)"
"(if(if as-transformer?_196"
" capture-lifts?_195"
" #f)"
"(let-values()"
"(let-values(((input-s113_243)"
" input-s_206)"
"((local-ctx114_244)"
" local-ctx_205)"
"((context115_245)"
" context_192)"
"((temp116_246) #f)"
"((temp117_247) #t)"
"((lift-key118_248)"
" lift-key_197)"
"((temp119_249) #t))"
"(expand-transformer43.1"
" temp119_249"
" #t"
" temp117_247"
" #t"
" context115_245"
" #t"
" temp116_246"
" #t"
" lift-key118_248"
" #t"
" input-s113_243"
" local-ctx114_244)))"
"(if as-transformer?_196"
"(let-values()"
"(let-values(((input-s120_251)"
" input-s_206)"
"((local-ctx121_252)"
" local-ctx_205)"
"((context122_253)"
" context_192)"
"((temp123_254) #f)"
"((temp124_255)"
"(eq?"
" 'top-level"
" context_192))"
"((lift-key125_256)"
" lift-key_197))"
"(expand-transformer43.1"
" #f"
" #f"
" temp124_255"
" #t"
" context122_253"
" #t"
" temp123_254"
" #t"
" lift-key125_256"
" #t"
" input-s120_251"
" local-ctx121_252)))"
"(if capture-lifts?_195"
"(let-values()"
"(let-values(((input-s126_258)"
" input-s_206)"
"((local-ctx127_259)"
" local-ctx_205)"
"((temp128_260) #t)"
"((lift-key129_261)"
" lift-key_197)"
"((temp130_262) #t))"
"(expand/capture-lifts28.1"
" temp130_262"
" #t"
" temp128_260"
" #t"
" #f"
" #f"
" lift-key129_261"
" #t"
" input-s126_258"
" local-ctx127_259)))"
"(let-values()"
"(let-values(((input-s131_263)"
" input-s_206)"
"((local-ctx132_264)"
" local-ctx_205))"
"(expand5.1"
" #f"
" #f"
" input-s131_263"
" local-ctx132_264))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_265)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_265"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_265"
" 'local-post"
" output-s_207)))"
"(void)))"
"(values))))"
"(let-values(((result-s_208)"
"(flip-introduction-scopes"
" output-s_207"
" ctx_202)))"
"(begin"
"(if skip-log-exit?_199"
"(void)"
"(let-values()"
"(let-values(((obs_266)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_266"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_266"
" 'exit-local"
" result-s_208)))"
"(void)))))"
" result-s_208))))))))))))))))))))))))))))))))))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-tainted?)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-tainted? \"syntax?\" s_1)))"
"(syntax-tainted?$1 s_1))))"
"(define-values"
"(1/syntax-arm)"
"(let-values(((syntax-arm6_2)"
"(lambda(s5_3 maybe-insp1_4 use-mode?2_5 maybe-insp3_6 use-mode?4_7)"
"(let-values(((s_8) s5_3))"
"(let-values(((maybe-insp_9)(if maybe-insp3_6 maybe-insp1_4 #f)))"
"(let-values(((use-mode?_10)(if use-mode?4_7 use-mode?2_5 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
"                                            (let-values () (raise-argument-error 'syntax-arm \"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_12)(not maybe-insp_9)))"
"(if or-part_12 or-part_12(inspector? maybe-insp_9)))"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'syntax-arm \"(or/c inspector? #f)\" maybe-insp_9)))"
"(values))))"
"(let-values(((insp_11)(inspector-for-taint maybe-insp_9)))"
"(if use-mode?_10"
"(let-values()"
"(taint-dispatch"
" s_8"
"(lambda(s_13)(syntax-arm$1 s_13 insp_11))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-arm$1 s_8 insp_11)))))))))))))"
"(case-lambda"
"((s_14)(syntax-arm6_2 s_14 #f #f #f #f))"
"((s_15 maybe-insp_16 use-mode?2_17)(syntax-arm6_2 s_15 maybe-insp_16 use-mode?2_17 #t #t))"
"((s_18 maybe-insp1_19)(syntax-arm6_2 s_18 maybe-insp1_19 #f #t #f)))))"
"(define-values"
"(1/syntax-disarm)"
"(lambda(s_20 maybe-insp_21)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_20) (void) (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_20)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_23)(not maybe-insp_21)))"
"(if or-part_23 or-part_23(inspector? maybe-insp_21)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-disarm \"(or/c inspector? #f)\" maybe-insp_21)))"
"(values))))"
"(let-values(((insp_22)(inspector-for-taint maybe-insp_21)))(syntax-disarm$1 s_20 insp_22))))))"
"(define-values"
"(1/syntax-rearm)"
"(let-values(((syntax-rearm12_24)"
"(lambda(s10_25 from-s11_26 use-mode?8_27 use-mode?9_28)"
"(let-values(((s_29) s10_25))"
"(let-values(((from-s_30) from-s11_26))"
"(let-values(((use-mode?_31)(if use-mode?9_28 use-mode?8_27 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_29)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_29)))"
"(if(syntax?$1 from-s_30)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" from-s_30)))"
"(if use-mode?_31"
"(let-values()"
"(taint-dispatch"
" s_29"
"(lambda(s_32)(syntax-rearm$1 s_32 from-s_30))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-rearm$1 s_29 from-s_30)))))))))))"
"(case-lambda"
"((s_33 from-s_34)(syntax-rearm12_24 s_33 from-s_34 #f #f))"
"((s_35 from-s_36 use-mode?8_37)(syntax-rearm12_24 s_35 from-s_36 use-mode?8_37 #t)))))"
"(define-values"
"(1/syntax-taint)"
"(lambda(s_38)"
"(begin"
"      (if (syntax?$1 s_38) (void) (let-values () (raise-argument-error 'syntax-taint \"syntax?\" s_38)))"
"(syntax-taint$1 s_38))))"
"(define-values"
"(inspector-for-taint)"
"(lambda(maybe-insp_39)"
"(let-values(((or-part_40) maybe-insp_39))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(current-module-code-inspector)))"
"(if or-part_41 or-part_41(current-code-inspector)))))))"
"(void)"
"(void)"
"(define-values"
"(1/variable-reference->empty-namespace)"
"(lambda(vr_1)"
"(begin"
"(if(1/variable-reference? vr_1)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->empty-namespace \"variable-reference?\" vr_1)))"
"(let-values(((temp1_2)(1/variable-reference->namespace vr_1)))(new-namespace9.1 #f #f #f #f temp1_2 #t)))))"
"(define-values"
"(1/variable-reference->namespace)"
"(lambda(vr_3)"
"(begin"
"(if(1/variable-reference? vr_3)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->namespace \"variable-reference?\" vr_3)))"
"(1/instance-data(1/variable-reference->instance vr_3)))))"
"(define-values"
"(1/variable-reference->module-path-index)"
"(lambda(vr_4)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_4)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-path-index \"variable-reference?\" vr_4)))"
"(values))))"
"(let-values(((mpi_5)(namespace-mpi(1/variable-reference->namespace vr_4))))"
"(if(top-level-module-path-index? mpi_5) #f mpi_5)))))"
"(define-values"
"(1/variable-reference->resolved-module-path)"
"(lambda(vr_6)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_6)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->resolved-module-path \"variable-reference?\" vr_6)))"
"(values))))"
"(let-values(((mpi_7)(1/variable-reference->module-path-index vr_6)))"
"(if mpi_7(1/module-path-index-resolve mpi_7) #f)))))"
"(define-values"
"(1/variable-reference->module-source)"
"(lambda(vr_8)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_8)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-source \"variable-reference?\" vr_8)))"
"(values))))"
"(let-values(((ns_9)(1/variable-reference->namespace vr_8)))(namespace-source-name ns_9)))))"
"(define-values"
"(1/variable-reference->phase)"
"(lambda(vr_10)"
"(begin"
"(if(1/variable-reference? vr_10)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->phase \"variable-reference?\" vr_10)))"
"(namespace-phase(1/variable-reference->namespace vr_10)))))"
"(define-values"
"(1/variable-reference->module-base-phase)"
"(lambda(vr_11)"
"(begin"
"(if(1/variable-reference? vr_11)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->module-base-phase \"variable-reference?\" vr_11)))"
"(namespace-0-phase(1/variable-reference->namespace vr_11)))))"
"(define-values"
"(1/variable-reference->module-declaration-inspector)"
"(lambda(vr_12)"
"(begin"
"(if(1/variable-reference? vr_12)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->base-phase \"variable-reference?\" vr_12)))"
"(let-values(((or-part_13)(namespace-declaration-inspector(1/variable-reference->namespace vr_12))))"
"(if or-part_13"
" or-part_13"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"           \"given variable reference is not from a module\"))))))"
"(void)"
"(void)"
"(define-values"
"(primitive-ids)"
"(seteq"
" 'syntax?"
" 'syntax-e"
" 'syntax->datum"
" 'datum->syntax"
" 'bound-identifier=?"
" 'free-identifier=?"
" 'free-transformer-identifier=?"
" 'free-template-identifier=?"
" 'free-label-identifier=?"
" 'identifier-binding"
" 'identifier-transformer-binding"
" 'identifier-template-binding"
" 'identifier-label-binding"
" 'identifier-binding-symbol"
" 'identifier-prune-lexical-context"
" 'syntax-debug-info"
" 'syntax-track-origin"
" 'syntax-shift-phase-level"
" 'syntax-source-module"
" 'identifier-prune-to-source-module"
" 'syntax-source"
" 'syntax-line"
" 'syntax-column"
" 'syntax-position"
" 'syntax-span"
" 'syntax->list"
" 'syntax-property"
" 'syntax-property-preserved?"
" 'syntax-property-symbol-keys"
" 'syntax-original?"
" 'syntax-tainted?"
" 'syntax-arm"
" 'syntax-disarm"
" 'syntax-rearm"
" 'syntax-taint"
" 'raise-syntax-error"
" 'struct:exn:fail:syntax"
" 'exn:fail:syntax"
" 'make-exn:fail:syntax"
" 'exn:fail:syntax?"
" 'exn:fail:syntax-exprs"
" 'struct:exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound"
" 'make-exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound?"
" 'current-module-path-for-load"
" 'prop:missing-module"
" 'exn:missing-module?"
" 'exn:missing-module-accessor"
" 'struct:exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module"
" 'make-exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module?"
" 'exn:fail:filesystem:missing-module-path"
" 'struct:exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module"
" 'make-exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module?"
" 'exn:fail:syntax:missing-module-path"
" 'read-syntax"
" 'read-syntax/recursive"
" 'syntax-transforming?"
" 'syntax-transforming-with-lifts?"
" 'syntax-transforming-module-expression?"
" 'syntax-local-transforming-module-provides?"
" 'syntax-local-context"
" 'syntax-local-introduce"
" 'syntax-local-identifier-as-binding"
" 'syntax-local-phase-level"
" 'syntax-local-name"
" 'make-syntax-introducer"
" 'make-syntax-delta-introducer"
" 'syntax-local-value"
" 'syntax-local-value/immediate"
" 'syntax-local-lift-expression"
" 'syntax-local-lift-values-expression"
" 'syntax-local-lift-context"
" 'syntax-local-lift-module"
" 'syntax-local-lift-require"
" 'syntax-local-lift-provide"
" 'syntax-local-lift-module-end-declaration"
" 'syntax-local-module-defined-identifiers"
" 'syntax-local-module-required-identifiers"
" 'syntax-local-module-exports"
" 'syntax-local-submodules"
" 'syntax-local-get-shadower"
" 'local-expand"
" 'local-expand/capture-lifts"
" 'local-transformer-expand"
" 'local-transformer-expand/capture-lifts"
" 'syntax-local-expand-expression"
" 'syntax-local-expand-expression/extend-environment"
" 'syntax-local-environment-ref"
" 'internal-definition-context?"
" 'syntax-local-make-definition-context"
" 'syntax-local-bind-syntaxes"
" 'internal-definition-context-binding-identifiers"
" 'internal-definition-context-introduce"
" 'internal-definition-context-seal"
" 'identifier-remove-from-definition-context"
" 'make-set!-transformer"
" 'prop:set!-transformer"
" 'set!-transformer?"
" 'set!-transformer-procedure"
" 'rename-transformer?"
" 'prop:rename-transformer"
" 'make-rename-transformer"
" 'rename-transformer-target"
" 'prop:liberal-define-context"
" 'liberal-define-context?"
" 'prop:expansion-contexts"
" 'module-path?"
" 'resolved-module-path?"
" 'make-resolved-module-path"
" 'resolved-module-path-name"
" 'module-path-index?"
" 'module-path-index-resolve"
" 'module-path-index-join"
" 'module-path-index-split"
" 'module-path-index-submodule"
" 'current-module-name-resolver"
" 'current-module-declare-name"
" 'current-module-declare-source"
" 'current-namespace"
" 'namespace-module-registry"
" 'namespace?"
" 'variable-reference->empty-namespace"
" 'variable-reference->namespace"
" 'variable-reference->resolved-module-path"
" 'variable-reference->module-path-index"
" 'variable-reference->module-source"
" 'variable-reference->phase"
" 'variable-reference->module-base-phase"
" 'variable-reference->module-declaration-inspector))"
"(call-with-values(lambda()(add-core-primitive! 'syntax? syntax?$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-e 1/syntax-e)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->datum 1/syntax->datum)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'datum->syntax 1/datum->syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'bound-identifier=? 1/bound-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-identifier=? 1/free-identifier=?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-transformer-identifier=? 1/free-transformer-identifier=?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-template-identifier=? 1/free-template-identifier=?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-label-identifier=? 1/free-label-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-binding 1/identifier-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-transformer-binding 1/identifier-transformer-binding))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-template-binding 1/identifier-template-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-label-binding 1/identifier-label-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-binding-symbol 1/identifier-binding-symbol))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-lexical-context 1/identifier-prune-lexical-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-debug-info 1/syntax-debug-info)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-track-origin 1/syntax-track-origin)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-shift-phase-level 1/syntax-shift-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source-module 1/syntax-source-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-to-source-module 1/identifier-prune-to-source-module))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source 1/syntax-source)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-line 1/syntax-line)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-column 1/syntax-column)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-position 1/syntax-position)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-span 1/syntax-span)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->list 1/syntax->list)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-property syntax-property$1)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-preserved? 1/syntax-property-preserved?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-symbol-keys 1/syntax-property-symbol-keys))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-original? 1/syntax-original?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-tainted? 1/syntax-tainted?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-arm 1/syntax-arm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-disarm 1/syntax-disarm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-rearm 1/syntax-rearm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-taint 1/syntax-taint)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'raise-syntax-error raise-syntax-error$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'struct:exn:fail:syntax 1/struct:exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax make-exn:fail:syntax$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-exn:fail:syntax make-exn:fail:syntax$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax? 1/exn:fail:syntax?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax-exprs 1/exn:fail:syntax-exprs)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'struct:exn:fail:syntax:unbound 1/struct:exn:fail:syntax:unbound))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound? 1/exn:fail:syntax:unbound?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-path-for-load 1/current-module-path-for-load))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:missing-module 1/prop:missing-module)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:missing-module? 1/exn:missing-module?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:missing-module-accessor 1/exn:missing-module-accessor))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'struct:exn:fail:filesystem:missing-module 1/struct:exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module? 1/exn:fail:filesystem:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module-path 1/exn:fail:filesystem:missing-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'struct:exn:fail:syntax:missing-module 1/struct:exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module? 1/exn:fail:syntax:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module-path 1/exn:fail:syntax:missing-module-path))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax 1/read-syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax/recursive 1/read-syntax/recursive)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-transforming? 1/syntax-transforming?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-with-lifts? 1/syntax-transforming-with-lifts?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-module-expression? 1/syntax-transforming-module-expression?))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'syntax-local-transforming-module-provides? 1/syntax-local-transforming-module-provides?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-context 1/syntax-local-context)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-introduce 1/syntax-local-introduce)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-identifier-as-binding 1/syntax-local-identifier-as-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-phase-level 1/syntax-local-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-name 1/syntax-local-name)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-syntax-introducer 1/make-syntax-introducer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-syntax-delta-introducer 1/make-syntax-delta-introducer))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-value 1/syntax-local-value)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-value/immediate 1/syntax-local-value/immediate))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-expression 1/syntax-local-lift-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-values-expression 1/syntax-local-lift-values-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-context 1/syntax-local-lift-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-lift-module 1/syntax-local-lift-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-require 1/syntax-local-lift-require))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-provide 1/syntax-local-lift-provide))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-module-end-declaration 1/syntax-local-lift-module-end-declaration))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-defined-identifiers 1/syntax-local-module-defined-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-required-identifiers 1/syntax-local-module-required-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-exports 1/syntax-local-module-exports))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-submodules 1/syntax-local-submodules)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-get-shadower 1/syntax-local-get-shadower))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-expand 1/local-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-expand/capture-lifts 1/local-expand/capture-lifts))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-transformer-expand 1/local-transformer-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-transformer-expand/capture-lifts 1/local-transformer-expand/capture-lifts))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-expand-expression 1/syntax-local-expand-expression))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'syntax-local-expand-expression/extend-environment"
" 1/syntax-local-expand-expression/extend-environment))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-environment-ref 1/syntax-local-environment-ref))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context? 1/internal-definition-context?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-make-definition-context 1/syntax-local-make-definition-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-bind-syntaxes 1/syntax-local-bind-syntaxes))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'internal-definition-context-binding-identifiers"
" 1/internal-definition-context-binding-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-introduce 1/internal-definition-context-introduce))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-seal 1/internal-definition-context-seal))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'identifier-remove-from-definition-context 1/identifier-remove-from-definition-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-set!-transformer 1/make-set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:set!-transformer 1/prop:set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'set!-transformer? 1/set!-transformer?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'set!-transformer-procedure 1/set!-transformer-procedure))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'rename-transformer? 1/rename-transformer?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:rename-transformer 1/prop:rename-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-rename-transformer 1/make-rename-transformer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'rename-transformer-target 1/rename-transformer-target))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'prop:liberal-define-context 1/prop:liberal-define-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'liberal-define-context? has-liberal-define-context-property?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:expansion-contexts 1/prop:expansion-contexts)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path? 1/module-path?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'resolved-module-path? 1/resolved-module-path?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-resolved-module-path 1/make-resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'resolved-module-path-name 1/resolved-module-path-name))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index? 1/module-path-index?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-resolve 1/module-path-index-resolve))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-join 1/module-path-index-join)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-split 1/module-path-index-split)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-submodule 1/module-path-index-submodule))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-name-resolver 1/current-module-name-resolver))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-name 1/current-module-declare-name))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-source 1/current-module-declare-source))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'current-namespace 1/current-namespace)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'namespace-module-registry 1/namespace-module-registry))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'namespace? 1/namespace?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->empty-namespace 1/variable-reference->empty-namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->namespace 1/variable-reference->namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->resolved-module-path 1/variable-reference->resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-path-index 1/variable-reference->module-path-index))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-source 1/variable-reference->module-source))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->phase 1/variable-reference->phase))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-base-phase 1/variable-reference->module-base-phase))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'variable-reference->module-declaration-inspector"
" 1/variable-reference->module-declaration-inspector))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(declare-kernel-module!6.1)"
"(lambda(eval1_25 main-ids2_26 ns5_27)"
"(let-values(((ns_28) ns5_27))"
"(let-values()"
"(let-values(((main-ids_30) main-ids2_26))"
"(let-values()"
"(begin"
"(let-values(((...nder/boot/kernel.rkt:23:2_31) copy-runtime-module!26.1)"
"((temp51_32) '#%kernel)"
"((temp52_33) '#%runtime)"
"((temp53_34)(set-union primitive-ids main-ids_30))"
"((temp54_35)"
"(hasheq"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"((ns55_36) ns_28))"
"(copy-runtime-module!24.1 #f #f temp54_35 #t ns55_36 #f #f #f #f temp53_34 #t temp52_33 #t temp51_32))"
"(let-values(((...nder/boot/kernel.rkt:30:2_37) declare-reexporting-module!50.1)"
"((temp56_38) '#%kernel)"
"((temp57_39) '(#%core #%runtime #%main))"
"((ns58_40) ns_28))"
"(declare-reexporting-module!48.1 ns58_40 #f #f temp56_38 temp57_39)))))))))"
"(define-values"
"(lifted/6.1$3 lifted/7.1$3 lifted/8.1$3 lifted/9.1$3 lifted/10.1$3)"
"(make-struct-type"
" 'copy-runtime-module!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'copy-runtime-module!(case-lambda((self_55 name_56)(apply missing-kw self_55 name_56 null))))))"
"(current-inspector)"
"(case-lambda((self_57 name_58)(apply missing-kw self_57 name_58 null)))))"
"(define-values"
"(copy-runtime-module!24.1)"
"(lambda(alts12_59"
" alts19_60"
" extras13_61"
" extras20_62"
" namespace10_63"
" primitive?14_64"
" primitive?21_65"
" protected?15_66"
" protected?22_67"
" skip11_68"
" skip18_69"
" to9_70"
" to16_71"
" name23_72)"
"(let-values(((name_73) name23_72))"
"(let-values(((to-name_74)(if to16_71 to9_70 name_73)))"
"(let-values(((ns_75) namespace10_63))"
"(let-values(((skip-syms_76)(if skip18_69 skip11_68(seteq))))"
"(let-values(((alts_77)(if alts19_60 alts12_59 '#hasheq())))"
"(let-values(((extras_78)(if extras20_62 extras13_61 '#hasheq())))"
"(let-values(((primitive?_79)(if primitive?21_65 primitive?14_64 #t)))"
"(let-values(((protected?_80)(if protected?22_67 protected?15_66 #f)))"
"(let-values()"
"(let-values(((mod-name_81)(list 'quote name_73)))"
"(let-values(((prims_82)(1/primitive-table name_73)))"
"(let-values((()"
"(begin"
"(let-values(((ht_85) prims_82))"
"(begin"
"(if((lambda(ht_86)(hash? ht_86)) ht_85)"
"(void)"
"(let-values()(default-in-hash-keys ht_85)))"
"((letrec-values(((for-loop_87)"
"(lambda(fold-var_88 i_89)"
"(if i_89"
"(let-values(((sym_90)"
"(hash-iterate-key ht_85 i_89)))"
"(let-values(((fold-var_91)"
"(let-values()"
"(let-values(((fold-var_93)"
"(let-values()"
"(begin"
"(let-values()"
"(register-built-in-symbol!"
" sym_90))"
"(void)))))"
"(values fold-var_93)))))"
"(for-loop_87"
" fold-var_91"
"(hash-iterate-next ht_85 i_89))))"
" fold-var_88))))"
" for-loop_87)"
"(void)"
"(hash-iterate-first ht_85))))"
"(values))))"
"(let-values(((ht_83)"
"(let-values(((ht_94) prims_82))"
"(begin"
"(if((lambda(ht_95)(hash? ht_95)) ht_94)"
"(void)"
"(let-values()(default-in-hash ht_94)))"
"((letrec-values(((for-loop_96)"
"(lambda(table_97 i_98)"
"(if i_98"
"(let-values(((sym_99 val_100)"
"(hash-iterate-key+value ht_94 i_98)))"
"(let-values(((table_101)"
"(let-values(((table_102) table_97))"
"(if(set-member?"
" skip-syms_76"
" sym_99)"
" table_102"
"(let-values(((table_103)"
" table_102))"
"(let-values(((table_104)"
"(let-values()"
"(let-values(((key_105"
" val_106)"
"(let-values()"
"(values"
" sym_99"
"(let-values(((or-part_107)"
"(hash-ref"
" alts_77"
" sym_99"
" #f)))"
"(if or-part_107"
" or-part_107"
" val_100))))))"
"(hash-set"
" table_103"
" key_105"
" val_106)))))"
"(values table_104)))))))"
"(for-loop_96"
" table_101"
"(hash-iterate-next ht_94 i_98))))"
" table_97))))"
" for-loop_96)"
" '#hasheq()"
"(hash-iterate-first ht_94))))))"
"(let-values(((ht+extras_84)"
"(let-values(((ht_108) extras_78))"
"(begin"
"(if((lambda(ht_109)(hash? ht_109)) ht_108)"
"(void)"
"(let-values()(default-in-hash ht_108)))"
"((letrec-values(((for-loop_110)"
"(lambda(ht_111 i_112)"
"(if i_112"
"(let-values(((k_113 v_114)"
"(hash-iterate-key+value"
" ht_108"
" i_112)))"
"(let-values(((ht_115)"
"(let-values(((ht_116) ht_111))"
"(let-values(((ht_117)"
"(let-values()"
"(hash-set"
" ht_116"
" k_113"
" v_114))))"
"(values ht_117)))))"
"(for-loop_110"
" ht_115"
"(hash-iterate-next ht_108 i_112))))"
" ht_111))))"
" for-loop_110)"
" ht_83"
"(hash-iterate-first ht_108))))))"
"(let-values(((...nder/boot/kernel.rkt:51:2_118) declare-hash-based-module!41.1)"
"((to-name59_119) to-name_74)"
"((ht+extras60_120) ht+extras_84)"
"((ns61_121) ns_75)"
"((primitive?62_122) primitive?_79)"
"((protected?63_123) protected?_80))"
"(declare-hash-based-module!39.1"
" ns61_121"
" primitive?62_122"
" #t"
" #f"
" #f"
" protected?63_123"
" #t"
" #f"
" #f"
" to-name59_119"
" ht+extras60_120))))))))))))))))))"
"(define-values"
"(unpack25.1)"
"(lambda(given-kws_124 given-args_125 name23_126)"
"(let-values(((alts19_127)(if(pair? given-kws_124)(eq? '#:alts(car given-kws_124)) #f)))"
"(let-values(((alts12_128)(if alts19_127(car given-args_125)(void)))"
"((given-kws_129)(if alts19_127(cdr given-kws_124) given-kws_124))"
"((given-args_130)(if alts19_127(cdr given-args_125) given-args_125)))"
"(let-values(((extras20_131)(if(pair? given-kws_129)(eq? '#:extras(car given-kws_129)) #f)))"
"(let-values(((extras13_132)(if extras20_131(car given-args_130)(void)))"
"((given-kws_133)(if extras20_131(cdr given-kws_129) given-kws_129))"
"((given-args_134)(if extras20_131(cdr given-args_130) given-args_130)))"
"(let-values(((namespace10_135)(car given-args_134))"
"((given-kws_136)(cdr given-kws_133))"
"((given-args_137)(cdr given-args_134)))"
"(let-values(((primitive?21_138)(if(pair? given-kws_136)(eq? '#:primitive?(car given-kws_136)) #f)))"
"(let-values(((primitive?14_139)(if primitive?21_138(car given-args_137)(void)))"
"((given-kws_140)(if primitive?21_138(cdr given-kws_136) given-kws_136))"
"((given-args_141)(if primitive?21_138(cdr given-args_137) given-args_137)))"
"(let-values(((protected?22_142)"
"(if(pair? given-kws_140)(eq? '#:protected?(car given-kws_140)) #f)))"
"(let-values(((protected?15_143)(if protected?22_142(car given-args_141)(void)))"
"((given-kws_144)(if protected?22_142(cdr given-kws_140) given-kws_140))"
"((given-args_145)(if protected?22_142(cdr given-args_141) given-args_141)))"
"(let-values(((skip18_146)(if(pair? given-kws_144)(eq? '#:skip(car given-kws_144)) #f)))"
"(let-values(((skip11_147)(if skip18_146(car given-args_145)(void)))"
"((given-kws_148)(if skip18_146(cdr given-kws_144) given-kws_144))"
"((given-args_149)(if skip18_146(cdr given-args_145) given-args_145)))"
"(let-values(((to16_150)(pair? given-kws_148)))"
"(let-values(((to9_151)(if to16_150(car given-args_149)(void))))"
"(copy-runtime-module!24.1"
" alts12_128"
" alts19_127"
" extras13_132"
" extras20_131"
" namespace10_135"
" primitive?14_139"
" primitive?21_138"
" protected?15_143"
" protected?22_142"
" skip11_147"
" skip18_146"
" to9_151"
" to16_150"
" name23_126))))))))))))))))"
"(define-values"
"(copy-runtime-module!26.1)"
"(lifted/7.1$3"
"(lambda(given-kws_152 given-argc_153)"
"(if(= given-argc_153 3)"
"(subsets? '(#:namespace) given-kws_152 '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to))"
" #f))"
"(case-lambda((given-kws_154 given-args_155 name_156)(unpack25.1 given-kws_154 given-args_155 name_156)))"
" '(#:namespace)"
" '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to)))"
"(define-values"
"(lifted/11.1$2 lifted/12.1$2 lifted/13.1$2 lifted/14.1$2 lifted/15.1$2)"
"(make-struct-type"
" 'declare-hash-based-module!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'declare-hash-based-module!"
"(case-lambda((self_157 name_158 ht_159)(apply missing-kw self_157 name_158 ht_159 null))))))"
"(current-inspector)"
"(case-lambda((self_160 name_161 ht_162)(apply missing-kw self_160 name_161 ht_162 null)))))"
"(define-values"
"(declare-hash-based-module!39.1)"
"(lambda(namespace27_163"
" primitive?28_164"
" primitive?33_165"
" protected30_166"
" protected35_167"
" protected?29_168"
" protected?34_169"
" register-builtin?31_170"
" register-builtin?36_171"
" name37_172"
" ht38_173)"
"(let-values(((name_174) name37_172))"
"(let-values(((ht_175) ht38_173))"
"(let-values(((ns_176) namespace27_163))"
"(let-values(((primitive?_177)(if primitive?33_165 primitive?28_164 #f)))"
"(let-values(((protected?_178)(if protected?34_169 protected?29_168 #f)))"
"(let-values(((protected-syms_179)(if protected35_167 protected30_166 null)))"
"(let-values(((register-builtin?_180)(if register-builtin?36_171 register-builtin?31_170 #f)))"
"(let-values()"
"(let-values(((mpi_181)(1/module-path-index-join(list 'quote name_174) #f)))"
"(let-values(((ns64_182) ns_176)"
"((temp65_183)"
"(let-values(((temp67_186) #t)"
"((primitive?68_187) primitive?_177)"
"((temp69_188) #t)"
"((temp70_189)(not protected?_178))"
"((mpi71_190) mpi_181)"
"((temp72_191)"
"(hasheqv"
" 0"
"(let-values(((ht_193) ht_175))"
"(begin"
"(if((lambda(ht_194)(hash? ht_194)) ht_193)"
"(void)"
"(let-values()(default-in-hash-keys ht_193)))"
"((letrec-values(((for-loop_195)"
"(lambda(table_196 i_197)"
"(if i_197"
"(let-values(((sym_198)"
"(hash-iterate-key"
" ht_193"
" i_197)))"
"(let-values(((table_199)"
"(let-values(((table_200)"
" table_196))"
"(let-values(((table_201)"
"(let-values()"
"(let-values(((key_202"
" val_203)"
"(let-values()"
"(let-values((()"
"(begin"
"(if register-builtin?_180"
"(let-values()"
"(register-built-in-symbol!"
" sym_198))"
"(void))"
"(values))))"
"(let-values(((binding_204)"
"(let-values(((mpi74_205)"
" mpi_181)"
"((temp75_206)"
" 0)"
"((sym76_207)"
" sym_198))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi74_205"
" temp75_206"
" sym76_207))))"
"(values"
" sym_198"
"(if(let-values(((or-part_208)"
" protected?_178))"
"(if or-part_208"
" or-part_208"
"(member"
" sym_198"
" protected-syms_179)))"
"(provided1.1"
" binding_204"
" #t"
" #f)"
" binding_204)))))))"
"(hash-set"
" table_200"
" key_202"
" val_203)))))"
"(values table_201)))))"
"(for-loop_195"
" table_199"
"(hash-iterate-next ht_193 i_197))))"
" table_196))))"
" for-loop_195)"
" '#hash()"
"(hash-iterate-first ht_193))))))"
"((temp73_192)"
"(lambda(data-box_209"
" ns_210"
" phase-shift_211"
" phase-level_212"
" self_213"
" bulk-binding-registry_214"
" insp_215)"
"(if(= 0 phase-level_212)"
"(let-values()"
"(let-values(((ht_216) ht_175))"
"(begin"
"(if((lambda(ht_217)(hash? ht_217)) ht_216)"
"(void)"
"(let-values()(default-in-hash ht_216)))"
"((letrec-values(((for-loop_218)"
"(lambda(fold-var_219 i_220)"
"(if i_220"
"(let-values(((sym_221 val_222)"
"(hash-iterate-key+value"
" ht_216"
" i_220)))"
"(let-values(((fold-var_223)"
"(let-values()"
"(let-values(((fold-var_225)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_210"
" 0"
" sym_221"
" val_222))"
"(void)))))"
"(values"
" fold-var_225)))))"
"(for-loop_218"
" fold-var_223"
"(hash-iterate-next"
" ht_216"
" i_220))))"
" fold-var_219))))"
" for-loop_218)"
"(void)"
"(hash-iterate-first ht_216)))))"
"(void)))))"
"(make-module37.1"
" temp67_186"
" #t"
" #f"
" #f"
" temp73_192"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp70_189"
" #t"
" #f"
" #f"
" temp69_188"
" #t"
" #f"
" #f"
" primitive?68_187"
" #t"
" temp72_191"
" #f"
" #f"
" mpi71_190"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((temp66_184)(1/module-path-index-resolve mpi_181)))"
"(declare-module!56.1 #f #f ns64_182 temp65_183 temp66_184)))))))))))))"
"(define-values"
"(unpack40.1)"
"(lambda(given-kws_226 given-args_227 name37_228 ht38_229)"
"(let-values(((namespace27_230)(car given-args_227))"
"((given-kws_231)(cdr given-kws_226))"
"((given-args_232)(cdr given-args_227)))"
"(let-values(((primitive?33_233)(if(pair? given-kws_231)(eq? '#:primitive?(car given-kws_231)) #f)))"
"(let-values(((primitive?28_234)(if primitive?33_233(car given-args_232)(void)))"
"((given-kws_235)(if primitive?33_233(cdr given-kws_231) given-kws_231))"
"((given-args_236)(if primitive?33_233(cdr given-args_232) given-args_232)))"
"(let-values(((protected35_237)(if(pair? given-kws_235)(eq? '#:protected(car given-kws_235)) #f)))"
"(let-values(((protected30_238)(if protected35_237(car given-args_236)(void)))"
"((given-kws_239)(if protected35_237(cdr given-kws_235) given-kws_235))"
"((given-args_240)(if protected35_237(cdr given-args_236) given-args_236)))"
"(let-values(((protected?34_241)(if(pair? given-kws_239)(eq? '#:protected?(car given-kws_239)) #f)))"
"(let-values(((protected?29_242)(if protected?34_241(car given-args_240)(void)))"
"((given-kws_243)(if protected?34_241(cdr given-kws_239) given-kws_239))"
"((given-args_244)(if protected?34_241(cdr given-args_240) given-args_240)))"
"(let-values(((register-builtin?36_245)(pair? given-kws_243)))"
"(let-values(((register-builtin?31_246)(if register-builtin?36_245(car given-args_244)(void))))"
"(declare-hash-based-module!39.1"
" namespace27_230"
" primitive?28_234"
" primitive?33_233"
" protected30_238"
" protected35_237"
" protected?29_242"
" protected?34_241"
" register-builtin?31_246"
" register-builtin?36_245"
" name37_228"
" ht38_229))))))))))))"
"(define-values"
"(declare-hash-based-module!41.1)"
"(lifted/12.1$2"
"(lambda(given-kws_247 given-argc_248)"
"(if(= given-argc_248 4)"
"(subsets? '(#:namespace) given-kws_247 '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?))"
" #f))"
"(case-lambda"
"((given-kws_249 given-args_250 name_251 ht_252)(unpack40.1 given-kws_249 given-args_250 name_251 ht_252)))"
" '(#:namespace)"
" '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?)))"
"(define-values"
"(lifted/16.1$1 lifted/17.1$1 lifted/18.1$1 lifted/19.1$1 lifted/20.1$1)"
"(make-struct-type"
" 'declare-reexporting-module!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'declare-reexporting-module!"
"(case-lambda"
"((self_253 name_254 require-names_255)(apply missing-kw self_253 name_254 require-names_255 null))))))"
"(current-inspector)"
"(case-lambda((self_256 name_257 require-names_258)(apply missing-kw self_256 name_257 require-names_258 null)))))"
"(define-values"
"(declare-reexporting-module!48.1)"
"(lambda(namespace43_259 reexport?42_260 reexport?44_261 name46_262 require-names47_263)"
"(let-values(((name_264) name46_262))"
"(let-values(((require-names_265) require-names47_263))"
"(let-values(((reexport?_266)(if reexport?44_261 reexport?42_260 #t)))"
"(let-values(((ns_267) namespace43_259))"
"(let-values()"
"(let-values(((mpi_268)(1/module-path-index-join(list 'quote name_264) #f)))"
"(let-values(((require-mpis_269)"
"(alt-reverse"
"(let-values(((lst_270) require-names_265))"
"(begin"
"(if(list? lst_270)(void)(let-values()(in-list lst_270)))"
"((letrec-values(((for-loop_271)"
"(lambda(fold-var_272 lst_273)"
"(if(pair? lst_273)"
"(let-values(((require-name_274)(unsafe-car lst_273)))"
"(let-values(((fold-var_275)"
"(let-values(((fold-var_276) fold-var_272))"
"(let-values(((fold-var_277)"
"(let-values()"
"(cons"
"(let-values()"
"(1/module-path-index-join"
"(list"
" 'quote"
" require-name_274)"
" #f))"
" fold-var_276))))"
"(values fold-var_277)))))"
"(for-loop_271 fold-var_275(unsafe-cdr lst_273))))"
" fold-var_272))))"
" for-loop_271)"
" null"
" lst_270))))))"
"(let-values(((ns77_278) ns_267)"
"((temp78_279)"
"(let-values(((temp80_282) #t)"
"((temp81_283) #t)"
"((mpi82_284) mpi_268)"
"((temp83_285)(list(cons 0 require-mpis_269)))"
"((temp84_286)"
"(if reexport?_266"
"(hasheqv"
" 0"
"(let-values(((lst_288) require-mpis_269))"
"(begin"
"(if(list? lst_288)(void)(let-values()(in-list lst_288)))"
"((letrec-values(((for-loop_289)"
"(lambda(table_290 lst_291)"
"(if(pair? lst_291)"
"(let-values(((require-mpi_292)"
"(unsafe-car lst_291)))"
"(let-values(((table_293)"
"(let-values(((m_294)"
"(namespace->module"
" ns_267"
"(1/module-path-index-resolve"
" require-mpi_292))))"
"(begin"
" #t"
"((letrec-values(((for-loop_295)"
"(lambda(table_296)"
"(let-values()"
"(let-values(((table_297)"
"(let-values(((ht_298)"
"(hash-ref"
"(shift-provides-module-path-index"
"(module-provides"
" m_294)"
"(module-self"
" m_294)"
" require-mpi_292)"
" 0)))"
"(begin"
"(if((lambda(ht_299)"
"(hash?"
" ht_299))"
" ht_298)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_298)))"
"((letrec-values(((for-loop_300)"
"(lambda(table_301"
" i_302)"
"(if i_302"
"(let-values(((sym_303"
" binding_304)"
"(hash-iterate-key+value"
" ht_298"
" i_302)))"
"(let-values(((table_305)"
"(let-values(((table_306)"
" table_301))"
"(let-values(((table_307)"
"(let-values()"
"(let-values(((key_308"
" val_309)"
"(let-values()"
"(values"
" sym_303"
" binding_304))))"
"(hash-set"
" table_306"
" key_308"
" val_309)))))"
"(values"
" table_307)))))"
"(for-loop_300"
" table_305"
"(hash-iterate-next"
" ht_298"
" i_302))))"
" table_301))))"
" for-loop_300)"
" table_296"
"(hash-iterate-first"
" ht_298))))))"
" table_297)))))"
" for-loop_295)"
" table_290)))))"
"(for-loop_289"
" table_293"
"(unsafe-cdr lst_291))))"
" table_290))))"
" for-loop_289)"
" '#hash()"
" lst_288))))"
" '#hasheqv()))"
"((void85_287) void))"
"(make-module37.1"
" temp80_282"
" #t"
" #f"
" #f"
" void85_287"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_283"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp84_286"
" temp83_285"
" #t"
" mpi82_284"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((temp79_280)(1/module-path-index-resolve mpi_268)))"
"(declare-module!56.1 #f #f ns77_278 temp78_279 temp79_280)))))))))))"
"(define-values"
"(unpack49.1)"
"(lambda(given-kws_310 given-args_311 name46_312 require-names47_313)"
"(let-values(((namespace43_314)(car given-args_311))"
"((given-kws_315)(cdr given-kws_310))"
"((given-args_316)(cdr given-args_311)))"
"(let-values(((reexport?44_317)(pair? given-kws_315)))"
"(let-values(((reexport?42_318)(if reexport?44_317(car given-args_316)(void))))"
"(declare-reexporting-module!48.1"
" namespace43_314"
" reexport?42_318"
" reexport?44_317"
" name46_312"
" require-names47_313))))))"
"(define-values"
"(declare-reexporting-module!50.1)"
"(lifted/17.1$1"
"(lambda(given-kws_319 given-argc_320)"
"(if(= given-argc_320 4)(subsets? '(#:namespace) given-kws_319 '(#:namespace #:reexport?)) #f))"
"(case-lambda"
"((given-kws_321 given-args_322 name_323 require-names_324)"
"(unpack49.1 given-kws_321 given-args_322 name_323 require-names_324)))"
" '(#:namespace)"
" '(#:namespace #:reexport?)))"
"(void)"
"(void)"
"(define-values"
"(main-primitives)"
"(hasheq"
" 'eval"
" eval$1"
" 'eval-syntax"
" 1/eval-syntax"
" 'compile"
" compile$1"
" 'compile-syntax"
" 1/compile-syntax"
" 'expand"
" 1/expand"
" 'expand-syntax"
" 1/expand-syntax"
" 'expand-once"
" 1/expand-once"
" 'expand-syntax-once"
" 1/expand-syntax-once"
" 'expand-to-top-form"
" 1/expand-to-top-form"
" 'expand-syntax-to-top-form"
" 1/expand-syntax-to-top-form"
" 'dynamic-require"
" 1/dynamic-require"
" 'dynamic-require-for-syntax"
" 1/dynamic-require-for-syntax"
" 'compiled-expression?"
" 1/compiled-expression?"
" 'compiled-module-expression?"
" 1/compiled-module-expression?"
" 'module-compiled-name"
" 1/module-compiled-name"
" 'module-compiled-submodules"
" 1/module-compiled-submodules"
" 'module-compiled-language-info"
" 1/module-compiled-language-info"
" 'module-compiled-imports"
" 1/module-compiled-imports"
" 'module-compiled-exports"
" 1/module-compiled-exports"
" 'module-compiled-indirect-exports"
" 1/module-compiled-indirect-exports"
" 'make-empty-namespace"
" 1/make-empty-namespace"
" 'namespace-attach-module"
" 1/namespace-attach-module"
" 'namespace-attach-module-declaration"
" 1/namespace-attach-module-declaration"
" 'namespace-symbol->identifier"
" 1/namespace-symbol->identifier"
" 'namespace-module-identifier"
" 1/namespace-module-identifier"
" 'namespace-syntax-introduce"
" 1/namespace-syntax-introduce"
" 'namespace-require"
" 1/namespace-require"
" 'namespace-require/copy"
" 1/namespace-require/copy"
" 'namespace-require/constant"
" 1/namespace-require/constant"
" 'namespace-require/expansion-time"
" 1/namespace-require/expansion-time"
" 'namespace-variable-value"
" 1/namespace-variable-value"
" 'namespace-set-variable-value!"
" 1/namespace-set-variable-value!"
" 'namespace-undefine-variable!"
" 1/namespace-undefine-variable!"
" 'namespace-mapped-symbols"
" 1/namespace-mapped-symbols"
" 'namespace-base-phase"
" 1/namespace-base-phase"
" 'module-declared?"
" 1/module-declared?"
" 'module-predefined?"
" 1/module-predefined?"
" 'module->language-info"
" 1/module->language-info"
" 'module->imports"
" 1/module->imports"
" 'module->exports"
" 1/module->exports"
" 'module->indirect-exports"
" 1/module->indirect-exports"
" 'module-compiled-cross-phase-persistent?"
" 1/module-compiled-cross-phase-persistent?"
" 'module-provide-protected?"
" 1/module-provide-protected?"
" 'module->namespace"
" 1/module->namespace"
" 'namespace-unprotect-module"
" 1/namespace-unprotect-module))"
"(void)"
"(void)"
"(define-values"
"(utils-primitives)"
"(hasheq"
" 'path-string?"
" path-string?"
" 'normal-case-path"
" normal-case-path"
" 'path-replace-extension"
" path-replace-extension"
" 'path-add-extension"
" path-add-extension"
" 'reroot-path"
" reroot-path"
" 'path-list-string->path-list"
" path-list-string->path-list"
" 'find-executable-path"
" find-executable-path"
" 'call-with-default-reading-parameterization"
" call-with-default-reading-parameterization"
" 'collection-path"
" collection-path"
" 'collection-file-path"
" collection-file-path"
" 'find-library-collection-paths"
" find-library-collection-paths"
" 'find-library-collection-links"
" find-library-collection-links"
" 'load/use-compiled"
" load/use-compiled"
" 'find-main-config"
" find-main-config"
" 'find-main-collects"
" find-main-collects))"
"(void)"
"(void)"
"(define-values(expobs-primitives)(hasheq 'current-expand-observe current-expand-observe))"
"(void)"
"(void)"
"(define-values"
"(struct:TH-place-channel TH-place-channel TH-place-channel? TH-place-channel-ref TH-place-channel-set!)"
"(make-struct-type 'TH-place-channel #f 2 0 #f(list(cons prop:evt(lambda(x_1)(TH-place-channel-ref x_1 0))))))"
"(define-values"
"(TH-place-channel-in TH-place-channel-out)"
"(values(lambda(x_2)(TH-place-channel-ref x_2 0))(lambda(x_3)(TH-place-channel-ref x_3 1))))"
"(define-values"
"(place-struct-primitives)"
"(hasheq"
" 'struct:TH-place-channel"
" struct:TH-place-channel"
" 'TH-place-channel"
" TH-place-channel"
" 'TH-place-channel?"
" TH-place-channel?"
" 'TH-place-channel-in"
" TH-place-channel-in"
" 'TH-place-channel-out"
" TH-place-channel-out))"
"(void)"
"(void)"
"(define-values"
"(linklet-primitives)"
"(hasheq"
" 'primitive-table"
" 1/primitive-table"
" 'primitive->compiled-position"
" 1/primitive->compiled-position"
" 'compiled-position->primitive"
" 1/compiled-position->primitive"
" 'linklet?"
" 1/linklet?"
" 'compile-linklet"
" 1/compile-linklet"
" 'recompile-linklet"
" 1/recompile-linklet"
" 'eval-linklet"
" 1/eval-linklet"
" 'instantiate-linklet"
" 1/instantiate-linklet"
" 'linklet-import-variables"
" 1/linklet-import-variables"
" 'linklet-export-variables"
" 1/linklet-export-variables"
" 'instance?"
" 1/instance?"
" 'make-instance"
" 1/make-instance"
" 'instance-name"
" 1/instance-name"
" 'instance-data"
" 1/instance-data"
" 'instance-variable-names"
" 1/instance-variable-names"
" 'instance-variable-value"
" 1/instance-variable-value"
" 'instance-set-variable-value!"
" 1/instance-set-variable-value!"
" 'instance-unset-variable!"
" 1/instance-unset-variable!"
" 'linklet-directory?"
" 1/linklet-directory?"
" 'hash->linklet-directory"
" 1/hash->linklet-directory"
" 'linklet-directory->hash"
" 1/linklet-directory->hash"
" 'linklet-bundle?"
" 1/linklet-bundle?"
" 'hash->linklet-bundle"
" 1/hash->linklet-bundle"
" 'linklet-bundle->hash"
" 1/linklet-bundle->hash"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference->instance"
" 1/variable-reference->instance"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"(void)"
"(void)"
"(define-values"
"(with-module-reading-parameterization)"
"(lambda(thunk_1)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-accept-compiled"
" #t)"
"(let-values()(thunk_1)))))))"
"(define-values"
"(check-module-form)"
"(lambda(exp_5 filename_6)"
"(if(let-values(((or-part_7)(eof-object? exp_5)))(if or-part_7 or-part_7(eof-object?(1/syntax-e exp_5))))"
"(let-values()"
"(if filename_6"
"(error"
" 'load-handler"
"           (string-append \"expected a `module' declaration, but found end-of-file\\n\" \"  file: ~a\")"
" filename_6)"
" #f))"
"(if(1/compiled-module-expression?(1/syntax-e exp_5))"
"(let-values() exp_5)"
"(if(if(syntax?$1 exp_5)"
"(if(pair?(1/syntax-e exp_5))"
"(if(eq? 'module(1/syntax-e(car(1/syntax-e exp_5))))"
"(let-values(((r_8)(cdr(1/syntax-e exp_5))))"
"(let-values(((r_9)(if(syntax?$1 r_8)(1/syntax-e r_8) r_8)))"
"(if(pair? r_9)(identifier?(car r_9)) #f)))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(1/datum->syntax exp_5(cons(1/namespace-module-identifier)(cdr(1/syntax-e exp_5))) exp_5 exp_5))"
"(let-values()"
"(if filename_6"
"(error"
" 'default-load-handler"
"               (string-append \"expected a `module' declaration, but found something else\\n\" \"  file: ~a\")"
" filename_6)"
" #f)))))))"
"(void)"
"(void)"
"(define-values"
"(default-load-handler)"
"(lambda(path_1 expected-mod_2)"
"(begin"
"(if(path-string? path_1)"
"(void)"
"        (let-values () (raise-argument-error 'default-load-handler \"path-string?\" path_1)))"
"(if(let-values(((or-part_3)(not expected-mod_2)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(symbol? expected-mod_2)))"
"(if or-part_4"
" or-part_4"
"(if(pair? expected-mod_2)"
"(if(list? expected-mod_2)"
"(if(let-values(((or-part_5)(not(car expected-mod_2))))"
"(if or-part_5 or-part_5(symbol?(car expected-mod_2))))"
"(andmap2 symbol?(cdr expected-mod_2))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'default-load-handler"
"           \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" expected-mod_2)))"
"(if expected-mod_2"
"(let-values()"
"((call-with-input-module-file"
" path_1"
"(lambda(i_6)"
"(begin"
"                (if (regexp-match? '#rx\"[.]zo$\" path_1) (void) (let-values () (port-count-lines! i_6)))"
"(with-module-reading-parameterization+delay-source"
" path_1"
"(lambda()"
"(let-values(((c1_7)(linklet-directory-start i_6)))"
"(if c1_7"
"((lambda(pos_8)"
"(let-values(((b-pos_9)(search-directory i_6 pos_8(encode-symbols expected-mod_2))))"
"(if b-pos_9"
"(let-values()"
"(begin"
"(file-position i_6 b-pos_9)"
"(let-values(((or-part_10)(cached-bundle i_6)))"
"(if or-part_10"
" or-part_10"
"(let-values(((v_11)(read i_6)))"
"(if(1/compiled-module-expression? v_11)"
"(lambda()((current-eval) v_11))"
"(error"
" 'default-load-handler"
"                                           (string-append \"expected a compiled module\\n\" \"  in: ~e\\n\" \"  found: ~e\")"
"(object-name i_6)"
" v_11)))))))"
"(if(pair? expected-mod_2)"
"(let-values() void)"
"(let-values()"
"(error"
" 'default-load-handler"
"                                   (string-append \"could not find main module\\n\" \"  in: ~e\")"
"(object-name i_6)))))))"
" c1_7)"
"(if(if(pair? expected-mod_2)(not(car expected-mod_2)) #f)"
"(let-values() void)"
"(let-values(((c2_12)(cached-bundle i_6)))"
"(if c2_12"
"((lambda(thunk_13) thunk_13) c2_12)"
"(let-values()"
"(let-values(((s_14)(1/read-syntax(object-name i_6) i_6)))"
"(let-values((()"
"(begin"
"(if(eof-object? s_14)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                       \"expected a `module' declaration;\\n\""
"                                                       \" found end-of-file\\n\""
"                                                       \"  in: ~e\")"
"(object-name i_6)))"
"(void))"
"(values))))"
"(let-values(((m-s_15)(check-module-form s_14 path_1)))"
"(let-values(((s2_16)(1/read-syntax(object-name i_6) i_6)))"
"(begin"
"(if(eof-object? s2_16)"
"(void)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                               \"expected a `module' declaration;\\n\""
"                                               \" found an extra form\\n\""
"                                               \"  in: ~e\\n\""
"                                               \"  found: ~.s\")"
"(object-name i_6)"
" s2_16)))"
"(lambda()((current-eval) m-s_15))))))))))))))))))))"
"(let-values()"
"(let-values(((add-top-interaction_17)"
"(lambda(s_18)"
"(1/namespace-syntax-introduce(1/datum->syntax #f(cons '#%top-interaction s_18))))))"
"(let-values(((path1_19) path_1)"
"((temp2_20)"
"(lambda(i_21)"
"(begin"
"(port-count-lines! i_21)"
"((letrec-values(((loop_22)"
"(lambda(vals_23)"
"(let-values(((s_24)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t)"
"(let-values()"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_1))"
"(let-values()"
"(1/read-syntax(object-name i_21) i_21)))"
"(1/read-syntax(object-name i_21) i_21))))))"
"(if(eof-object? s_24)"
"(apply values vals_23)"
"(loop_22"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-values"
"(lambda()((current-eval)(add-top-interaction_17 s_24)))"
" list))"
"(default-continuation-prompt-tag)"
"(lambda args_25"
"(apply"
" abort-current-continuation"
"(default-continuation-prompt-tag)"
" args_25)))))))))"
" loop_22)"
"(list(void)))))))"
"(call-with-input-file*61.1 #f #f path1_19 temp2_20))))))))"
"(define-values"
"(linklet-bundle-or-directory-start)"
"(lambda(i_26 tag_27)"
"(let-values(((version-length_28)(string-length(version))))"
"(if(equal?(peek-byte i_26)(char->integer '#\\#))"
"(if(equal?(peek-byte i_26 1)(char->integer '#\\~))"
"(if(equal?(peek-byte i_26 2) version-length_28)"
"(if(equal?(peek-bytes version-length_28 3 i_26)(string->bytes/utf-8(version)))"
"(if(equal?(peek-byte i_26(+ 3 version-length_28))(char->integer tag_27))(+ version-length_28 4) #f)"
" #f)"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(linklet-directory-start)"
"(lambda(i_29)(let-values(((pos_30)(linklet-bundle-or-directory-start i_29 '#\\D)))(if pos_30(+ pos_30 4) #f))))"
"(define-values"
"(linklet-bundle-hash-code)"
"(lambda(i_31)"
"(let-values(((pos_32)(linklet-bundle-or-directory-start i_31 '#\\B)))"
"(let-values(((hash-code_33)(if pos_32(peek-bytes 20 pos_32 i_31) #f)))"
"(if(bytes? hash-code_33)"
"(if(= 20(bytes-length hash-code_33))"
"(if(let-values(((vec_34 len_35)"
"(let-values(((vec_36) hash-code_33))"
"(begin"
"(if(bytes? vec_36)(void)(let-values()(in-bytes vec_36)))"
"(values vec_36(bytes-length vec_36))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_37)"
"(lambda(result_38 pos_39)"
"(if(unsafe-fx< pos_39 len_35)"
"(let-values(((c_40)(bytes-ref vec_34 pos_39)))"
"(let-values(((result_41)"
"(let-values()"
"(let-values(((result_43)"
"(let-values()"
"(let-values()(not(eq? c_40 0))))))"
"(values result_43)))))"
"(if(not((lambda x_44 result_41) c_40))"
"(for-loop_37 result_41(unsafe-fx+ 1 pos_39))"
" result_41)))"
" result_38))))"
" for-loop_37)"
" #f"
" 0)))"
" hash-code_33"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(cached-bundle)"
"(lambda(i_45)"
"(let-values(((c3_46)(module-cache-ref(make-module-cache-key(linklet-bundle-hash-code i_45)))))"
"(if c3_46"
"((lambda(declare-module_47)(lambda()(declare-module_47(1/current-namespace)))) c3_46)"
"(let-values() #f)))))"
"(define-values"
"(read-number)"
"(lambda(i_48)"
"(let-values(((read-byte/not-eof_49)"
"(lambda(i_50)(let-values(((v_51)(read-byte i_50)))(if(eof-object? v_51) 0 v_51)))))"
"(bitwise-ior"
"(read-byte/not-eof_49 i_48)"
"(arithmetic-shift(read-byte/not-eof_49 i_48) 8)"
"(arithmetic-shift(read-byte/not-eof_49 i_48) 16)"
"(arithmetic-shift(read-byte/not-eof_49 i_48) 24)))))"
"(define-values"
"(search-directory)"
"(lambda(i_52 pos_53 bstr_54)"
"(if(zero? pos_53)"
"(let-values() #f)"
"(let-values()"
"(let-values((()(begin(file-position i_52 pos_53)(values))))"
"(let-values(((name-len_55)(read-number i_52)))"
"(let-values(((v_56)(read-bytes name-len_55 i_52)))"
"(begin"
"(if(if(bytes? v_56)(=(bytes-length v_56) name-len_55) #f)"
"(void)"
"(let-values()"
"(error"
" 'deafult-load-handler"
"(string-append"
"                      \"failure getting submodule path\\n\""
"                      \"  in: ~e\\n\""
"                      \"  at position: ~a\\n\""
"                      \"  expected bytes: ~a\\n\""
"                      \"  read bytes: ~e\")"
"(object-name i_52)"
" pos_53"
" name-len_55"
" v_56)))"
"(if(bytes=? bstr_54 v_56)"
"(let-values()(read-number i_52))"
"(if(bytes<? bstr_54 v_56)"
"(let-values()"
"(begin(read-number i_52)(read-number i_52)(search-directory i_52(read-number i_52) bstr_54)))"
"(let-values()"
"(begin"
"(read-number i_52)"
"(read-number i_52)"
"(read-number i_52)"
"(search-directory i_52(read-number i_52) bstr_54)))))))))))))"
"(define-values"
"(encode-symbols)"
"(lambda(expected-mod_57)"
"(if(symbol? expected-mod_57)"
"      (let-values () #\"\")"
"(let-values()"
"(apply"
" bytes-append"
"(alt-reverse"
"(let-values(((lst_58)(cdr expected-mod_57)))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(fold-var_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((s_62)(unsafe-car lst_61)))"
"(let-values(((fold-var_63)"
"(let-values(((fold-var_64) fold-var_60))"
"(let-values(((fold-var_65)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((bstr_66)"
"(string->bytes/utf-8"
"(symbol->string s_62))))"
"(let-values(((len_67)"
"(bytes-length bstr_66)))"
"(if(< len_67 255)"
"(let-values()"
"(bytes-append(bytes len_67) bstr_66))"
"(let-values()"
"(bytes-append"
" 255"
"(integer->integer-bytes"
" len_67"
" 4"
" #f"
" #f)"
" bstr_66))))))"
" fold-var_64))))"
"(values fold-var_65)))))"
"(for-loop_59 fold-var_63(unsafe-cdr lst_61))))"
" fold-var_60))))"
" for-loop_59)"
" null"
" lst_58)))))))))"
"(define-values"
"(with-module-reading-parameterization+delay-source)"
"(lambda(path_68 thunk_69)"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_68))"
"(let-values()(with-module-reading-parameterization thunk_69)))"
"(with-module-reading-parameterization thunk_69))))"
"(define-values"
"(call-with-input-module-file)"
"(lambda(path_70 proc_71)"
"(let-values(((i_72) #f))"
"(dynamic-wind"
"(lambda()"
"(set! i_72"
"(let-values(((path3_74) path_70)((temp4_75) #t))(open-input-file6.1 temp4_75 #t #f #f path3_74))))"
"(lambda()(proc_71 i_72))"
"(lambda()(close-input-port i_72))))))"
"(void)"
"(void)"
"(define-values(dll-suffix)(system-type 'so-suffix))"
"(define-values"
"(default-load/use-compiled)"
"(let-values(((resolve_1)"
"(lambda(s_2)"
"(if(complete-path? s_2)"
" s_2"
"(let-values(((d_3)(current-load-relative-directory)))"
"(if d_3(path->complete-path s_2 d_3) s_2))))))"
"(let-values(((date-of-1_4)"
"(lambda(a_5)"
"(let-values(((v_6)(file-or-directory-modify-seconds a_5 #f(lambda() #f))))"
"(if v_6(cons a_5 v_6) #f)))))"
"(let-values(((date-of_7)"
"(lambda(a_8 modes_9 roots_10)"
"(ormap2"
"(lambda(root-dir_11)"
"(ormap2"
"(lambda(compiled-dir_12)"
"(let-values(((a_13)(a_8 root-dir_11 compiled-dir_12)))(date-of-1_4 a_13)))"
" modes_9))"
" roots_10))))"
"(let-values(((date>=?_14)"
"(lambda(modes_15 roots_16 a_17 bm_18)"
"(if a_17"
"(let-values(((am_19)(date-of_7 a_17 modes_15 roots_16)))"
"(let-values(((or-part_20)(if(not bm_18) am_19 #f)))"
"(if or-part_20"
" or-part_20"
"(if am_19(if bm_18(if(>=(cdr am_19)(cdr bm_18)) am_19 #f) #f) #f))))"
" #f))))"
"(let-values(((with-dir*_21)"
"(lambda(base_22 t_23)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(path? base_22) base_22(current-directory)))"
"(let-values()(t_23))))))"
"(lambda(path_24 expect-module_25)"
"(let-values((()"
"(begin"
"(if(path-string? path_24)"
"(void)"
"                                (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" path_24)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_29)(not expect-module_25)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? expect-module_25)))"
"(if or-part_30"
" or-part_30"
"(if(list? expect-module_25)"
"(if(>(length expect-module_25) 1)"
"(if(let-values(((or-part_31)(symbol?(car expect-module_25))))"
"(if or-part_31 or-part_31(not(car expect-module_25))))"
"(andmap2 symbol?(cdr expect-module_25))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'load/use-compiled"
"                                     \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" path_24)))"
"(values))))"
"(let-values(((name_26)(if expect-module_25(1/current-module-declare-name) #f)))"
"(let-values(((ns-hts_27)"
"(if name_26"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" #f)"
" #f)))"
"(let-values(((use-path/src_28)(if ns-hts_27(hash-ref(cdr ns-hts_27) name_26 #f) #f)))"
"(if use-path/src_28"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-module-declare-source"
"(cadr use-path/src_28))"
"(let-values()"
"(with-dir*_21"
"(caddr use-path/src_28)"
"(lambda()((current-load)(car use-path/src_28) expect-module_25)))))"
"(let-values(((orig-path_32)(resolve_1 path_24)))"
"(let-values(((base_33 orig-file_34 dir?_35)(split-path path_24)))"
"(let-values(((file_36 alt-file_37)"
"(if expect-module_25"
"(let-values(((b_38)(path->bytes orig-file_34)))"
"(let-values(((len_39)(bytes-length b_38)))"
"(if(if(>= len_39 4)"
"                                                        (bytes=? #\".rkt\" (subbytes b_38 (- len_39 4)))"
" #f)"
"(let-values()"
"(values"
" orig-file_34"
"(bytes->path"
"                                                        (bytes-append (subbytes b_38 0 (- len_39 4)) #\".ss\"))))"
"(let-values()(values orig-file_34 #f)))))"
"(values orig-file_34 #f))))"
"(let-values(((path_40)"
"(if(eq? file_36 orig-file_34)"
" orig-path_32"
"(build-path base_33 file_36))))"
"(let-values(((alt-path_41)"
"(if alt-file_37"
"(if(eq? alt-file_37 orig-file_34)"
" orig-path_32"
"(build-path base_33 alt-file_37))"
" #f)))"
"(let-values(((base_42)(if(eq? base_33 'relative) 'same base_33)))"
"(let-values(((modes_43)(use-compiled-file-paths)))"
"(let-values(((roots_44)(current-compiled-file-roots)))"
"(let-values(((reroot_45)"
"(lambda(p_46 d_47)"
"(if(eq? d_47 'same)"
"(let-values() p_46)"
"(if(relative-path? d_47)"
"(let-values()(build-path p_46 d_47))"
"(let-values()(reroot-path p_46 d_47)))))))"
"(let-values(((main-path-d_48)(date-of-1_4 path_40)))"
"(let-values(((alt-path-d_49)"
"(if alt-path_41"
"(if(not main-path-d_48)(date-of-1_4 alt-path_41) #f)"
" #f)))"
"(let-values(((path-d_50)"
"(let-values(((or-part_51) main-path-d_48))"
"(if or-part_51 or-part_51 alt-path-d_49))))"
"(let-values(((get-so_52)"
"(lambda(file_53 rep-sfx?_54)"
"(lambda(root-dir_55 compiled-dir_56)"
"(build-path"
"(reroot_45 base_42 root-dir_55)"
" compiled-dir_56"
"                                                                     \"native\""
"(system-library-subpath)"
"(if rep-sfx?_54"
"(path-add-extension file_53 dll-suffix)"
" file_53))))))"
"(let-values(((zo_57)"
"(lambda(root-dir_58 compiled-dir_59)"
"(build-path"
"(reroot_45 base_42 root-dir_58)"
" compiled-dir_59"
"                                                                     (path-add-extension file_36 #\".zo\")))))"
"(let-values(((alt-zo_60)"
"(lambda(root-dir_61 compiled-dir_62)"
"(build-path"
"(reroot_45 base_42 root-dir_61)"
" compiled-dir_62"
"                                                                       (path-add-extension alt-file_37 #\".zo\")))))"
"(let-values(((so_63)(get-so_52 file_36 #t)))"
"(let-values(((alt-so_64)(get-so_52 alt-file_37 #t)))"
"(let-values(((try-main?_65)"
"(let-values(((or-part_66) main-path-d_48))"
"(if or-part_66"
" or-part_66"
"(not alt-path-d_49)))))"
"(let-values(((try-alt?_67)"
"(if alt-file_37"
"(let-values(((or-part_68) alt-path-d_49))"
"(if or-part_68"
" or-part_68"
"(not main-path-d_48)))"
" #f)))"
"(let-values(((with-dir_69)"
"(lambda(t_70)"
"(with-dir*_21 base_42 t_70))))"
"(let-values(((c1_71)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" so_63"
" path-d_50)"
" #f)))"
"(if c1_71"
"((lambda(so-d_72)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_72)"
" expect-module_25))))))"
" c1_71)"
"(let-values(((c2_73)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-so_64"
" alt-path-d_49)"
" #f)))"
"(if c2_73"
"((lambda(so-d_74)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_74)"
" expect-module_25))))))"
" c2_73)"
"(let-values(((c3_75)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" zo_57"
" path-d_50)"
" #f)))"
"(if c3_75"
"((lambda(zo-d_76)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_76)"
" #f"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_76)"
" expect-module_25)))))))"
" c3_75)"
"(let-values(((c4_77)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-zo_60"
" path-d_50)"
" #f)))"
"(if c4_77"
"((lambda(zo-d_78)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_78)"
" alt-path_41"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_78)"
" expect-module_25)))))))"
" c4_77)"
"(if(let-values(((or-part_79)"
"(not"
"(pair?"
" expect-module_25))))"
"(if or-part_79"
" or-part_79"
"(car expect-module_25)))"
"(let-values()"
"(let-values(((p_80)"
"(if try-main?_65"
" path_40"
" alt-path_41)))"
"(if(if(pair? expect-module_25)"
"(not(file-exists? p_80))"
" #f)"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
"(if expect-module_25"
"(if(not try-main?_65)"
" p_80"
" #f)"
" #f))"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
" p_80"
" expect-module_25)))))))))"
"(void)))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(register-zo-path)"
"(lambda(name_81 ns-hts_82 path_83 src-path_84 base_85)"
"(if ns-hts_82(let-values()(hash-set!(cdr ns-hts_82) name_81(list path_83 src-path_84 base_85)))(void))))"
"(define-values(default-reader-guard)(lambda(path_86) path_86))"
"(define-values(-module-hash-table-table)(make-weak-hasheq))"
"(define-values(CACHE-N) 512)"
"(define-values(-path-cache)(make-vector CACHE-N #f))"
"(define-values"
"(path-cache-get)"
"(lambda(p_87)"
"(let-values(((i_88)(modulo(abs(equal-hash-code p_87)) CACHE-N)))"
"(let-values(((w_89)(vector-ref -path-cache i_88)))"
"(let-values(((l_90)(if w_89(weak-box-value w_89) #f)))"
"(if l_90(let-values(((a_91)(1/assoc p_87 l_90)))(if a_91(cdr a_91) #f)) #f))))))"
"(define-values"
"(path-cache-set!)"
"(lambda(p_92 v_93)"
"(let-values(((i_94)(modulo(abs(equal-hash-code p_92)) CACHE-N)))"
"(let-values(((w_95)(vector-ref -path-cache i_94)))"
"(let-values(((l_96)(if w_95(weak-box-value w_95) #f)))"
"(vector-set!"
" -path-cache"
" i_94"
"(make-weak-box"
"(cons(cons p_92 v_93)(let-values(((or-part_97) l_96))(if or-part_97 or-part_97 null))))))))))"
"(define-values(-loading-filename)(gensym))"
"(define-values(-loading-prompt-tag)(make-continuation-prompt-tag 'module-loading))"
"(define-values(-prev-relto) #f)"
"(define-values(-prev-relto-dir) #f)"
"(define-values"
"(split-relative-string)"
"(lambda(s_98 coll-mode?_99)"
"(let-values(((l_100)"
"((letrec-values(((loop_101)"
"(lambda(s_102)"
"(let-values(((len_103)(string-length s_102)))"
"((letrec-values(((iloop_104)"
"(lambda(i_105)"
"(if(= i_105 len_103)"
"(let-values()(list s_102))"
"(if(char=? '#\\/(string-ref s_102 i_105))"
"(let-values()"
"(cons"
"(substring s_102 0 i_105)"
"(loop_101(substring s_102(add1 i_105)))))"
"(let-values()(iloop_104(add1 i_105))))))))"
" iloop_104)"
" 0)))))"
" loop_101)"
" s_98)))"
"(if coll-mode?_99"
" l_100"
"((letrec-values(((loop_106)"
"(lambda(l_107)"
"(if(null?(cdr l_107))"
"(values null(car l_107))"
"(let-values(((c_108 f_109)(loop_106(cdr l_107))))"
"(values(cons(car l_107) c_108) f_109))))))"
" loop_106)"
" l_100)))))"
"(define-values"
"(format-source-location)"
"(lambda(stx_110)"
"(srcloc->string"
"(srcloc"
"(1/syntax-source stx_110)"
"(1/syntax-line stx_110)"
"(1/syntax-column stx_110)"
"(1/syntax-position stx_110)"
"(1/syntax-span stx_110)))))"
"(define-values(orig-paramz) #f)"
"(define-values"
"(standard-module-name-resolver)"
"(let-values()"
"(let-values(((planet-resolver_111) #f))"
"(let-values(((prep-planet-resolver!_112)"
"(lambda()"
"(if planet-resolver_111"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
" orig-paramz"
"(set! planet-resolver_111"
"                             (1/dynamic-require '(lib \"planet/resolver.rkt\") 'planet-module-name-resolver))))))))"
"(letrec-values(((standard-module-name-resolver_113)"
"(case-lambda"
"((s_114 from-namespace_115)"
"(begin"
"(if(1/resolved-module-path? s_114)"
"(void)"
"(let-values()"
"                                 (raise-argument-error 'standard-module-name-resolver \"resolved-module-path?\" s_114)))"
"(if(let-values(((or-part_116)(not from-namespace_115)))"
"(if or-part_116 or-part_116(1/namespace? from-namespace_115)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                  \"(or/c #f namespace?)\""
" from-namespace_115)))"
"(if planet-resolver_111(let-values()(planet-resolver_111 s_114))(void))"
"(let-values(((hts_117)"
"(let-values(((or-part_118)"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" #f)))"
"(if or-part_118"
" or-part_118"
"(let-values(((hts_119)(cons(make-hasheq)(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" hts_119)"
" hts_119))))))"
"(begin"
"(hash-set!(car hts_117) s_114 'declared)"
"(if from-namespace_115"
"(let-values()"
"(let-values(((root-name_120)"
"(if(pair?(1/resolved-module-path-name s_114))"
"(1/make-resolved-module-path"
"(car(1/resolved-module-path-name s_114)))"
" s_114))"
"((from-hts_121)"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry from-namespace_115)"
" #f)))"
"(if from-hts_121"
"(let-values()"
"(let-values(((use-path/src_122)"
"(hash-ref(cdr from-hts_121) root-name_120 #f)))"
"(if use-path/src_122"
"(let-values()(hash-set!(cdr hts_117) root-name_120 use-path/src_122))"
"(void))))"
"(void))))"
"(void))))))"
"((s_123 relto_124 stx_125)"
"(begin"
"(log-message"
"(current-logger)"
" 'error"
"                              \"default module name resolver called with three arguments (deprecated)\""
" #f)"
"(standard-module-name-resolver_113 s_123 relto_124 stx_125 #t)))"
"((s_126 relto_127 stx_128 load?_129)"
"(let-values((()"
"(begin"
"(if(1/module-path? s_126)"
"(void)"
"(let-values()"
"(if(syntax?$1 stx_128)"
"                                                 (raise-syntax-error$1 #f \"bad module path\" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"module-path?\""
" s_126))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_131)(not relto_127)))"
"(if or-part_131 or-part_131(1/resolved-module-path? relto_127)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"(or/c #f resolved-module-path?)\""
" relto_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_132)(not stx_128)))"
"(if or-part_132 or-part_132(syntax?$1 stx_128)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                    \"(or/c #f syntax?)\""
" stx_128)))"
"(values))))"
"(let-values(((flatten-sub-path_130)"
"(lambda(base_133 orig-l_134)"
"((letrec-values(((loop_135)"
"(lambda(a_136 l_137)"
"(if(null? l_137)"
"(let-values()"
"(if(null? a_136)"
" base_133"
"(cons base_133(alt-reverse a_136))))"
"                                                                       (if (equal? (car l_137) \"..\")"
"(let-values()"
"(if(null? a_136)"
"(error"
" 'standard-module-name-resolver"
"                                                                              \"too many \\\"..\\\"s in submodule path: ~.s\""
"(list*"
" 'submod"
"                                                                               (if (equal? base_133 \".\")"
" base_133"
"(if(path? base_133)"
" base_133"
"(list"
"(if(symbol? base_133) 'quote 'file)"
" base_133)))"
" orig-l_134))"
"(loop_135(cdr a_136)(cdr l_137))))"
"(let-values()"
"(loop_135"
"(cons(car l_137) a_136)"
"(cdr l_137))))))))"
" loop_135)"
" null"
" orig-l_134))))"
"(if(if(pair? s_126)(eq?(car s_126) 'quote) #f)"
"(let-values()(1/make-resolved-module-path(cadr s_126)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'quote) #f)"
" #f)"
" #f)"
"(let-values()"
"(1/make-resolved-module-path"
"(flatten-sub-path_130(cadadr s_126)(cddr s_126))))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"                                               (if (let-values (((or-part_138) (equal? (cadr s_126) \".\")))"
"                                                     (if or-part_138 or-part_138 (equal? (cadr s_126) \"..\")))"
"(if relto_127"
"(let-values(((p_139)(1/resolved-module-path-name relto_127)))"
"(let-values(((or-part_140)(symbol? p_139)))"
"(if or-part_140"
" or-part_140"
"(if(pair? p_139)(symbol?(car p_139)) #f))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((rp_141)(1/resolved-module-path-name relto_127)))"
"(1/make-resolved-module-path"
"(flatten-sub-path_130"
"(if(pair? rp_141)(car rp_141) rp_141)"
"(let-values(((r_142)"
"                                                             (if (equal? (cadr s_126) \"..\") (cdr s_126) (cddr s_126))))"
"(if(pair? rp_141)(append(cdr rp_141) r_142) r_142))))))"
"(if(if(pair? s_126)(eq?(car s_126) 'planet) #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111 s_126 relto_127 stx_128 load?_129 #f orig-paramz)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'planet) #f)"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111"
"(cadr s_126)"
" relto_127"
" stx_128"
" load?_129"
"(cddr s_126)"
" orig-paramz)))"
"(let-values()"
"(let-values(((get-dir_143)"
"(lambda()"
"(let-values(((or-part_150)"
"(if relto_127"
"(if(eq? relto_127 -prev-relto)"
" -prev-relto-dir"
"(let-values(((p_151)"
"(1/resolved-module-path-name"
" relto_127)))"
"(let-values(((p_152)"
"(if(pair? p_151)"
"(car p_151)"
" p_151)))"
"(if(path? p_152)"
"(let-values(((base_153"
" n_154"
" d?_155)"
"(split-path"
" p_152)))"
"(begin"
"(set! -prev-relto relto_127)"
"(set! -prev-relto-dir"
" base_153)"
" base_153))"
" #f))))"
" #f)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_156)"
"(current-load-relative-directory)))"
"(if or-part_156"
" or-part_156"
"(current-directory)))))))"
"((get-reg_144)"
"(lambda()"
"(1/namespace-module-registry(1/current-namespace))))"
"((show-collection-err_145)"
"(lambda(msg_157)"
"(let-values(((msg_158)"
"(string-append"
"(let-values(((or-part_159)"
"(if stx_128"
"(if(error-print-source-location)"
"(format-source-location"
" stx_128)"
" #f)"
" #f)))"
"(if or-part_159"
" or-part_159"
"                                                                                  \"standard-module-name-resolver\"))"
"                                                                              \": \""
"(regexp-replace"
"                                                                               '#rx\"\\n\""
" msg_157"
"(format"
"                                                                                \"\\n  for module path: ~s\\n\""
" s_126)))))"
"(raise"
"(if stx_128"
"(1/make-exn:fail:syntax:missing-module"
" msg_158"
"(current-continuation-marks)"
"(list stx_128)"
" s_126)"
"(1/make-exn:fail:filesystem:missing-module"
" msg_158"
"(current-continuation-marks)"
" s_126))))))"
"((ss->rkt_146)"
"(lambda(s_160)"
"(let-values(((len_161)(string-length s_160)))"
"(if(if(>= len_161 3)"
"(if(equal?"
" '#\\."
"(string-ref s_160(- len_161 3)))"
"(if(equal?"
" '#\\s"
"(string-ref s_160(- len_161 2)))"
"(equal?"
" '#\\s"
"(string-ref s_160(- len_161 1)))"
" #f)"
" #f)"
" #f)"
"(string-append"
"(substring s_160 0(- len_161 3))"
"                                                                    \".rkt\")"
" s_160))))"
"((path-ss->rkt_147)"
"(lambda(p_162)"
"(let-values(((base_163 name_164 dir?_165)"
"(split-path p_162)))"
"                                                                 (if (regexp-match '#rx\"[.]ss$\" (path->bytes name_164))"
"                                                                   (path-replace-extension p_162 #\".rkt\")"
" p_162))))"
"((s_148)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((v_166)(cadr s_126)))"
"                                                                 (if (let-values (((or-part_167) (equal? v_166 \".\")))"
"                                                                       (if or-part_167 or-part_167 (equal? v_166 \"..\")))"
"(if relto_127"
"(let-values(((p_168)"
"(1/resolved-module-path-name"
" relto_127)))"
"(if(pair? p_168)(car p_168) p_168))"
"(error"
" 'standard-module-name-resolver"
"                                                                      \"no base path for relative submodule path: ~.s\""
" s_126))"
" v_166))"
" s_126))"
"((subm-path_149)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((p_169)"
"(if(if(let-values(((or-part_170)"
"(equal?"
"(cadr s_126)"
"                                                                                                    \".\")))"
"(if or-part_170"
" or-part_170"
"                                                                                         (equal? (cadr s_126) \"..\")))"
" relto_127"
" #f)"
"(let-values(((p_171)"
"(1/resolved-module-path-name"
" relto_127))"
"((r_172)"
"(if(equal?"
"(cadr s_126)"
"                                                                                                  \"..\")"
"(cdr s_126)"
"(cddr s_126))))"
"(if(pair? p_171)"
"(flatten-sub-path_130"
"(car p_171)"
"(append(cdr p_171) r_172))"
"(flatten-sub-path_130 p_171 r_172)))"
"(flatten-sub-path_130"
"                                                                                \".\""
"                                                                                (if (equal? (cadr s_126) \"..\")"
"(cdr s_126)"
"(cddr s_126))))))"
"(if(pair? p_169)(cdr p_169) #f))"
" #f)))"
"(let-values(((s-parsed_173)"
"(if(symbol? s_148)"
"(let-values()"
"(let-values(((or-part_174)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_174"
" or-part_174"
"(let-values(((cols_175 file_176)"
"(split-relative-string"
"(symbol->string s_148)"
" #f)))"
"(let-values(((f-file_177)"
"(if(null? cols_175)"
"                                                                                         \"main.rkt\""
"(string-append"
" file_176"
"                                                                                          \".rkt\"))))"
"(find-col-file"
" show-collection-err_145"
"(if(null? cols_175)"
" file_176"
"(car cols_175))"
"(if(null? cols_175) null(cdr cols_175))"
" f-file_177"
" #t))))))"
"(if(string? s_148)"
"(let-values()"
"(let-values(((dir_178)(get-dir_143)))"
"(let-values(((or-part_179)"
"(path-cache-get"
"(cons s_148 dir_178))))"
"(if or-part_179"
" or-part_179"
"(let-values(((cols_180 file_181)"
"(split-relative-string"
" s_148"
" #f)))"
"(if(null? cols_180)"
"(build-path"
" dir_178"
"(ss->rkt_146 file_181))"
"(apply"
" build-path"
" dir_178"
"(append"
"(map2"
"(lambda(s_182)"
"                                                                                    (if (string=? s_182 \".\")"
"(let-values() 'same)"
"                                                                                      (if (string=? s_182 \"..\")"
"(let-values() 'up)"
"(let-values() s_182))))"
" cols_180)"
"(list(ss->rkt_146 file_181))))))))))"
"(if(path? s_148)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(if(complete-path? s_148)"
" s_148"
"(path->complete-path s_148(get-dir_143))))))"
"(if(eq?(car s_148) 'lib)"
"(let-values()"
"(let-values(((or-part_183)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_183"
" or-part_183"
"(let-values(((cols_184 file_185)"
"(split-relative-string"
"(cadr s_148)"
" #f)))"
"(let-values(((old-style?_186)"
"(if(null?(cddr s_148))"
"(if(null? cols_184)"
"(regexp-match?"
"                                                                                                  '#rx\"[.]\""
" file_185)"
" #f)"
" #t)))"
"(let-values(((f-file_187)"
"(if old-style?_186"
"(ss->rkt_146 file_185)"
"(if(null? cols_184)"
"                                                                                                   \"main.rkt\""
"(if(regexp-match?"
"                                                                                                        '#rx\"[.]\""
" file_185)"
"(ss->rkt_146"
" file_185)"
"(string-append"
" file_185"
"                                                                                                      \".rkt\"))))))"
"(let-values(((cols_188)"
"(if old-style?_186"
"(append"
"(if(null?"
"(cddr s_148))"
"                                                                                                      '(\"mzlib\")"
"(apply"
" append"
"(map2"
"(lambda(p_189)"
"(split-relative-string"
" p_189"
" #t))"
"(cddr s_148))))"
" cols_184)"
"(if(null? cols_184)"
"(list file_185)"
" cols_184))))"
"(find-col-file"
" show-collection-err_145"
"(car cols_188)"
"(cdr cols_188)"
" f-file_187"
" #t))))))))"
"(if(eq?(car s_148) 'file)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(path->complete-path"
"(expand-user-path(cadr s_148))"
"(get-dir_143)))))"
"(void))))))))"
"(begin"
"(if(let-values(((or-part_190)(path? s-parsed_173)))"
"(if or-part_190 or-part_190(vector? s-parsed_173)))"
"(void)"
"(let-values()"
"(if stx_128"
"(raise-syntax-error$1"
" 'require"
"(format"
"                                                             \"bad module path~a\""
"                                                             (if s-parsed_173 (car s-parsed_173) \"\"))"
" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                            \"module-path?\""
" s_148))))"
"(let-values(((filename_191)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 0)"
"(simplify-path(cleanse-path s-parsed_173) #f))))"
"(let-values(((normal-filename_192)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 1)"
"(normal-case-path filename_191))))"
"(let-values(((base_193 name_194 dir?_195)"
"(if(vector? s-parsed_173)"
"(values"
" 'ignored"
"(vector-ref s-parsed_173 2)"
" 'ignored)"
"(split-path filename_191))))"
"(let-values(((no-sfx_196)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 3)"
"                                                                           (path-replace-extension name_194 #\"\"))))"
"(let-values(((root-modname_197)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 4)"
"(1/make-resolved-module-path"
" filename_191))))"
"(let-values(((hts_198)"
"(let-values(((or-part_199)"
"(hash-ref"
" -module-hash-table-table"
"(get-reg_144)"
" #f)))"
"(if or-part_199"
" or-part_199"
"(let-values(((hts_200)"
"(cons"
"(make-hasheq)"
"(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(get-reg_144)"
" hts_200)"
" hts_200))))))"
"(let-values(((modname_201)"
"(if subm-path_149"
"(1/make-resolved-module-path"
"(cons"
"(1/resolved-module-path-name"
" root-modname_197)"
" subm-path_149))"
" root-modname_197)))"
"(begin"
"(if load?_129"
"(let-values()"
"(let-values(((got_202)"
"(hash-ref"
"(car hts_198)"
" modname_201"
" #f)))"
"(if got_202"
"(void)"
"(let-values()"
"(let-values(((loading_203)"
"(let-values(((tag_205)"
"(if(continuation-prompt-available?"
" -loading-prompt-tag)"
" -loading-prompt-tag"
"(default-continuation-prompt-tag))))"
"(continuation-mark-set-first"
" #f"
" -loading-filename"
" null"
" tag_205)))"
"((nsr_204)(get-reg_144)))"
"(begin"
"(for-each2"
"(lambda(s_206)"
"(if(if(equal?"
"(cdr s_206)"
" normal-filename_192)"
"(eq?(car s_206) nsr_204)"
" #f)"
"(let-values()"
"(error"
" 'standard-module-name-resolver"
"                                                                                           \"cycle in loading\\n  at path: ~a\\n  paths:~a\""
" filename_191"
"(apply"
" string-append"
"((letrec-values(((loop_207)"
"(lambda(l_208)"
"(if(null?"
" l_208)"
" '()"
"(list*"
"                                                                                                                   \"\\n   \""
"(path->string"
"(cdar"
" l_208))"
"(loop_207"
"(cdr"
" l_208)))))))"
" loop_207)"
"(alt-reverse"
" loading_203)))))"
"(void)))"
" loading_203)"
"((if(continuation-prompt-available?"
" -loading-prompt-tag)"
"(lambda(f_209)(f_209))"
"(lambda(f_210)"
"(call-with-continuation-prompt"
" f_210"
" -loading-prompt-tag)))"
"(lambda()"
"(with-continuation-mark"
" -loading-filename"
"(cons"
"(cons"
" nsr_204"
" normal-filename_192)"
" loading_203)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-name"
" root-modname_197"
" 1/current-module-path-for-load"
"((if stx_128"
"(lambda(p_211)"
"(1/datum->syntax"
" #f"
" p_211"
" stx_128))"
" values)"
"(if(symbol? s_148)"
"(let-values() s_148)"
"(if(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)"
"(let-values() s_148)"
"(let-values()"
"(if(1/resolved-module-path?"
" root-modname_197)"
"(let-values(((src_212)"
"(1/resolved-module-path-name"
" root-modname_197)))"
"(if(symbol?"
" src_212)"
"(list"
" 'quote"
" src_212)"
" src_212))"
" root-modname_197))))))"
"(let-values()"
"((current-load/use-compiled)"
" filename_191"
"(let-values(((sym_213)"
"(string->symbol"
"(path->string"
" no-sfx_196))))"
"(if subm-path_149"
"(if(hash-ref"
"(car hts_198)"
" root-modname_197"
" #f)"
"(cons #f subm-path_149)"
"(cons"
" sym_213"
" subm-path_149))"
" sym_213))))))))))))))"
"(void))"
"(if(if(not(vector? s-parsed_173))"
"(if load?_129"
"(let-values(((or-part_214)"
"(string? s_148)))"
"(if or-part_214"
" or-part_214"
"(let-values(((or-part_215)"
"(symbol? s_148)))"
"(if or-part_215"
" or-part_215"
"(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)))))"
" #f)"
" #f)"
"(let-values()"
"(path-cache-set!"
"(if(string? s_148)"
"(cons s_148(get-dir_143))"
"(cons s_148(get-reg_144)))"
"(vector"
" filename_191"
" normal-filename_192"
" name_194"
" no-sfx_196"
" root-modname_197)))"
"(void))"
" modname_201)))))))))))))))))))))))))"
" standard-module-name-resolver_113)))))"
"(define-values"
"(default-eval-handler)"
"(lambda(s_216)"
"(1/eval"
" s_216"
"(1/current-namespace)"
"(let-values(((c_217)(current-compile)))"
"(lambda(e_218 ns_219)"
"(if(eq? ns_219(1/current-namespace))"
"(c_217 e_218 #t)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_219)"
"(let-values()(c_217 e_218 #t)))))))))"
"(define-values"
"(default-compile-handler)"
"(lambda(s_220 immediate-eval?_221)(1/compile s_220(1/current-namespace)(not immediate-eval?_221))))"
"(define-values"
"(default-read-interaction)"
"(lambda(src_222 in_223)"
"(begin"
"(if(input-port? in_223)"
"(void)"
"        (let-values () (raise-argument-error 'default-read-interaction \"input-port?\" in_223)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #f)"
"(let-values()(1/read-syntax src_222 in_223))))))"
"(define-values"
"(boot)"
"(lambda()"
"(begin"
"(seal)"
"(1/current-module-name-resolver standard-module-name-resolver)"
"(current-load/use-compiled default-load/use-compiled)"
"(current-reader-guard default-reader-guard)"
"(current-eval default-eval-handler)"
"(current-compile default-compile-handler)"
"(current-load default-load-handler)"
"(current-read-interaction default-read-interaction))))"
"(define-values"
"(seal)"
"(lambda()(set! orig-paramz(reparameterize(continuation-mark-set-first #f parameterization-key)))))"
"(define-values(boot-primitives)(hash 'boot boot 'seal seal 'orig-paramz orig-paramz))"
"(void)"
"(void)"
"(define-values"
"(dynamic-require-reader)"
"(let-values(((dynamic-require-reader5_1)"
"(lambda(mod-path3_2 sym4_3 fail-thunk1_4 fail-thunk2_5)"
"(let-values(((mod-path_6) mod-path3_2))"
"(let-values(((sym_7) sym4_3))"
"(let-values(((fail-thunk_8)(if fail-thunk2_5 fail-thunk1_4 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values(((root-ns_9)(namespace-root-namespace(1/current-namespace))))"
"(let-values(((proc_10)"
"(if root-ns_9"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" root-ns_9)"
"(let-values()(1/dynamic-require mod-path_6 sym_7 fail-thunk_8)))"
"(1/dynamic-require mod-path_6 sym_7 fail-thunk_8))))"
"(if(if(eq? sym_7 'read-syntax)"
"(if(procedure? proc_10)(procedure-arity-includes? proc_10 6) #f)"
" #f)"
"(let-values()"
"(lambda(name_11 input_12 mod-s_13 line_14 column_15 position_16)"
"(proc_10"
" name_11"
" input_12"
"(reader-syntax->syntax mod-s_13)"
" line_14"
" column_15"
" position_16)))"
"(let-values() proc_10)))))))))))"
"(case-lambda"
"((mod-path_17 sym_18)(dynamic-require-reader5_1 mod-path_17 sym_18 #f #f))"
"((mod-path_19 sym_20 fail-thunk1_21)(dynamic-require-reader5_1 mod-path_19 sym_20 fail-thunk1_21 #t)))))"
"(void)"
"(void)"
"(define-values"
"(expand-body7.1)"
"(lambda(source1_22 stratified?2_23 stratified?4_24 bodys5_25 ctx6_26)"
"(let-values(((bodys_27) bodys5_25))"
"(let-values(((ctx_28) ctx6_26))"
"(let-values(((s_29) source1_22))"
"(let-values(((stratified?_30)(if stratified?4_24 stratified?2_23 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_39)(expand-context-observer ctx_28)))"
"(if obs_39"
"(let-values()(let-values()(call-expand-observe obs_39 'enter-block)))"
"(void)))"
"(values))))"
"(let-values(((inside-sc_31)(new-scope 'intdef)))"
"(let-values(((init-bodys_32)"
"(alt-reverse"
"(let-values(((lst_40) bodys_27))"
"(begin"
"(if(list? lst_40)(void)(let-values()(in-list lst_40)))"
"((letrec-values(((for-loop_41)"
"(lambda(fold-var_42 lst_43)"
"(if(pair? lst_43)"
"(let-values(((body_44)(unsafe-car lst_43)))"
"(let-values(((fold-var_45)"
"(let-values(((fold-var_46) fold-var_42))"
"(let-values(((fold-var_47)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_44"
" inside-sc_31))"
" fold-var_46))))"
"(values fold-var_47)))))"
"(for-loop_41 fold-var_45(unsafe-cdr lst_43))))"
" fold-var_42))))"
" for-loop_41)"
" null"
" lst_40))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_48)(expand-context-observer ctx_28)))"
"(if obs_48"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_48"
" 'block-renames"
"(datum->syntax$1 #f init-bodys_32)"
"(datum->syntax$1 #f bodys_27))))"
"(void)))"
"(values))))"
"(let-values(((phase_33)(expand-context-phase ctx_28)))"
"(let-values(((frame-id_34)(make-reference-record)))"
"(let-values(((def-ctx-scopes_35)(box null)))"
"(let-values(((body-ctx_36)"
"(let-values(((v_49) ctx_28))"
"(let-values(((the-struct_50) v_49))"
"(if(expand-context/outer? the-struct_50)"
"(let-values(((context48_51)(list(make-liberal-define-context)))"
"((name49_52) #f)"
"((only-immediate?50_53) #t)"
"((def-ctx-scopes51_54) def-ctx-scopes_35)"
"((post-expansion-scope52_55) inside-sc_31)"
"((post-expansion-scope-action53_56) add-scope)"
"((scopes54_57)"
"(cons inside-sc_31(expand-context-scopes ctx_28)))"
"((use-site-scopes55_58)(box null))"
"((frame-id56_59) frame-id_34)"
"((reference-records57_60)"
"(cons"
" frame-id_34"
"(expand-context-reference-records ctx_28)))"
"((inner58_61)(root-expand-context/outer-inner v_49)))"
"(expand-context/outer1.1"
" inner58_61"
" post-expansion-scope52_55"
" use-site-scopes55_58"
" frame-id56_59"
" context48_51"
"(expand-context/outer-env the-struct_50)"
" post-expansion-scope-action53_56"
" scopes54_57"
" def-ctx-scopes51_54"
"(expand-context/outer-binding-layer the-struct_50)"
" reference-records57_60"
" only-immediate?50_53"
"(expand-context/outer-need-eventually-defined the-struct_50)"
"(expand-context/outer-current-introduction-scopes the-struct_50)"
" name49_52))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"expand-context/outer?\""
" the-struct_50))))))"
"(let-values(((maybe-increment-binding-layer_37)"
"(lambda(ids_62 body-ctx_63)"
"(if(eq?"
"(expand-context-binding-layer body-ctx_63)"
"(expand-context-binding-layer ctx_28))"
"(increment-binding-layer ids_62 body-ctx_63 inside-sc_31)"
"(expand-context-binding-layer body-ctx_63)))))"
"(let-values(((name_38)(expand-context-name ctx_28)))"
"((letrec-values(((loop_64)"
"(lambda(body-ctx_65"
" bodys_66"
" done-bodys_67"
" val-idss_68"
" val-keyss_69"
" val-rhss_70"
" track-stxs_71"
" trans-idss_72"
" dups_73)"
"(if(null? bodys_66)"
"(let-values()"
"(begin"
"(let-values(((obs_74)"
"(expand-context-observer body-ctx_65)))"
"(if obs_74"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_74"
"(if(null? val-idss_68)"
" 'block->list"
" 'block->letrec))))"
"(void)))"
"(let-values(((...nder/expand/body.rkt:85:6_75)"
" finish-expanding-body28.1)"
"((body-ctx59_76) body-ctx_65)"
"((frame-id60_77) frame-id_34)"
"((def-ctx-scopes61_78) def-ctx-scopes_35)"
"((temp62_79)(alt-reverse val-idss_68))"
"((temp63_80)(alt-reverse val-keyss_69))"
"((temp64_81)(alt-reverse val-rhss_70))"
"((temp65_82)(alt-reverse track-stxs_71))"
"((temp66_83)(alt-reverse done-bodys_67))"
"((s67_84) s_29)"
"((stratified?68_85) stratified?_30)"
"((name69_86) name_38)"
"((temp70_87)(alt-reverse trans-idss_72)))"
"(finish-expanding-body26.1"
" temp70_87"
" name69_86"
" s67_84"
" stratified?68_85"
" body-ctx59_76"
" frame-id60_77"
" def-ctx-scopes61_78"
" temp62_79"
" temp63_80"
" temp64_81"
" temp65_82"
" temp66_83))))"
"(let-values()"
"(let-values(((rest-bodys_88)(cdr bodys_66)))"
"(let-values((()"
"(begin"
"(let-values(((obs_91)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_91"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_91 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_89)"
"(let-values(((temp71_92)(car bodys_66))"
"((temp72_93)"
"(if(if name_38"
"(null?(cdr bodys_66))"
" #f)"
"(let-values(((v_94)"
" body-ctx_65))"
"(let-values(((the-struct_95)"
" v_94))"
"(if(expand-context/outer?"
" the-struct_95)"
"(let-values(((name73_96)"
" name_38)"
"((inner74_97)"
"(root-expand-context/outer-inner"
" v_94)))"
"(expand-context/outer1.1"
" inner74_97"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_95)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_95)"
"(root-expand-context/outer-frame-id"
" the-struct_95)"
"(expand-context/outer-context"
" the-struct_95)"
"(expand-context/outer-env"
" the-struct_95)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_95)"
"(expand-context/outer-scopes"
" the-struct_95)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_95)"
"(expand-context/outer-binding-layer"
" the-struct_95)"
"(expand-context/outer-reference-records"
" the-struct_95)"
"(expand-context/outer-only-immediate?"
" the-struct_95)"
"(expand-context/outer-need-eventually-defined"
" the-struct_95)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_95)"
" name73_96))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                   \"expand-context/outer?\""
" the-struct_95))))"
" body-ctx_65)))"
"(expand5.1 #f #f temp71_92 temp72_93))))"
"(let-values(((disarmed-exp-body_90)"
"(syntax-disarm$1 exp-body_89)))"
"(let-values(((tmp_98)"
"(core-form-sym"
" disarmed-exp-body_90"
" phase_33)))"
"(if(equal? tmp_98 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_114)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_114"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_114"
" 'prim-begin)))"
"(void)))"
"(values))))"
"(let-values(((ok?_99 begin75_100 e76_101)"
"(let-values(((s_115)"
" disarmed-exp-body_90))"
"(let-values(((orig-s_116)"
" s_115))"
"(let-values(((begin75_117"
" e76_118)"
"(let-values(((s_119)"
"(if(syntax?$1"
" s_115)"
"(syntax-e$1"
" s_115)"
" s_115)))"
"(if(pair?"
" s_119)"
"(let-values(((begin77_120)"
"(let-values(((s_122)"
"(car"
" s_119)))"
" s_122))"
"((e78_121)"
"(let-values(((s_123)"
"(cdr"
" s_119)))"
"(let-values(((s_124)"
"(if(syntax?$1"
" s_123)"
"(syntax-e$1"
" s_123)"
" s_123)))"
"(let-values(((flat-s_125)"
"(to-syntax-list.1"
" s_124)))"
"(if(not"
" flat-s_125)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_116))"
"(let-values()"
" flat-s_125)))))))"
"(values"
" begin77_120"
" e78_121))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_116)))))"
"(values"
" #t"
" begin75_117"
" e76_118))))))"
"(let-values(((track_112)"
"(lambda(e_126)"
"(syntax-track-origin$1"
" e_126"
" exp-body_89))))"
"(let-values(((splice-bodys_113)"
"(append"
"(map2 track_112 e76_101)"
" rest-bodys_88)))"
"(begin"
"(let-values(((obs_127)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_127"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_127"
" 'splice"
" splice-bodys_113)))"
"(void)))"
"(loop_64"
" body-ctx_65"
" splice-bodys_113"
" done-bodys_67"
" val-idss_68"
" val-keyss_69"
" val-rhss_70"
" track-stxs_71"
" trans-idss_72"
" dups_73)))))))"
"(if(equal? tmp_98 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_149)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_149"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_149"
" 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_128"
" define-values79_129"
" id80_130"
" rhs81_131)"
"(let-values(((s_150)"
" disarmed-exp-body_90))"
"(let-values(((orig-s_151)"
" s_150))"
"(let-values(((define-values79_152"
" id80_153"
" rhs81_154)"
"(let-values(((s_155)"
"(if(syntax?$1"
" s_150)"
"(syntax-e$1"
" s_150)"
" s_150)))"
"(if(pair?"
" s_155)"
"(let-values(((define-values82_156)"
"(let-values(((s_159)"
"(car"
" s_155)))"
" s_159))"
"((id83_157"
" rhs84_158)"
"(let-values(((s_160)"
"(cdr"
" s_155)))"
"(let-values(((s_161)"
"(if(syntax?$1"
" s_160)"
"(syntax-e$1"
" s_160)"
" s_160)))"
"(if(pair?"
" s_161)"
"(let-values(((id85_162)"
"(let-values(((s_164)"
"(car"
" s_161)))"
"(let-values(((s_165)"
"(if(syntax?$1"
" s_164)"
"(syntax-e$1"
" s_164)"
" s_164)))"
"(let-values(((flat-s_166)"
"(to-syntax-list.1"
" s_165)))"
"(if(not"
" flat-s_166)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_151))"
"(let-values()"
"(let-values(((id_167)"
"(let-values(((lst_168)"
" flat-s_166))"
"(begin"
"(if(list?"
" lst_168)"
"(void)"
"(let-values()"
"(in-list"
" lst_168)))"
"((letrec-values(((for-loop_169)"
"(lambda(id_170"
" lst_171)"
"(if(pair?"
" lst_171)"
"(let-values(((s_172)"
"(unsafe-car"
" lst_171)))"
"(let-values(((id_173)"
"(let-values(((id_174)"
" id_170))"
"(let-values(((id_175)"
"(let-values()"
"(let-values(((id88_176)"
"(let-values()"
"(if(let-values(((or-part_177)"
"(if(syntax?$1"
" s_172)"
"(symbol?"
"(syntax-e$1"
" s_172))"
" #f)))"
"(if or-part_177"
" or-part_177"
"(symbol?"
" s_172)))"
" s_172"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_151"
" s_172)))))"
"(cons"
" id88_176"
" id_174)))))"
"(values"
" id_175)))))"
"(for-loop_169"
" id_173"
"(unsafe-cdr"
" lst_171))))"
" id_170))))"
" for-loop_169)"
" null"
" lst_168)))))"
"(alt-reverse"
" id_167))))))))"
"((rhs86_163)"
"(let-values(((s_178)"
"(cdr"
" s_161)))"
"(let-values(((s_179)"
"(if(syntax?$1"
" s_178)"
"(syntax-e$1"
" s_178)"
" s_178)))"
"(if(pair?"
" s_179)"
"(let-values(((rhs87_180)"
"(let-values(((s_181)"
"(car"
" s_179)))"
" s_181))"
"(()"
"(let-values(((s_182)"
"(cdr"
" s_179)))"
"(let-values(((s_183)"
"(if(syntax?$1"
" s_182)"
"(syntax-e$1"
" s_182)"
" s_182)))"
"(if(null?"
" s_183)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_151))))))"
"(values"
" rhs87_180))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_151))))))"
"(values"
" id85_162"
" rhs86_163))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_151))))))"
"(values"
" define-values82_156"
" id83_157"
" rhs84_158))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_151)))))"
"(values"
" #t"
" define-values79_152"
" id80_153"
" rhs81_154))))))"
"(let-values(((ids_144)"
"(remove-use-site-scopes"
" id80_130"
" body-ctx_65)))"
"(let-values((()"
"(begin"
"(let-values(((obs_184)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_184"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_184"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_144"
" rhs81_131)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_145)"
"(let-values(((ids89_185)"
" ids_144)"
"((phase90_186)"
" phase_33)"
"((exp-body91_187)"
" exp-body_89)"
"((dups92_188)"
" dups_73))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids89_185"
" phase90_186"
" exp-body91_187"
" dups92_188"
" #t))))"
"(let-values(((counter_146)"
"(root-expand-context-counter"
" ctx_28)))"
"(let-values(((keys_147)"
"(alt-reverse"
"(let-values(((lst_189)"
" ids_144))"
"(begin"
"(if(list?"
" lst_189)"
"(void)"
"(let-values()"
"(in-list"
" lst_189)))"
"((letrec-values(((for-loop_190)"
"(lambda(fold-var_191"
" lst_192)"
"(if(pair?"
" lst_192)"
"(let-values(((id_193)"
"(unsafe-car"
" lst_192)))"
"(let-values(((fold-var_194)"
"(let-values(((fold-var_195)"
" fold-var_191))"
"(let-values(((fold-var_196)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id93_198)"
" id_193)"
"((phase94_199)"
" phase_33)"
"((counter95_200)"
" counter_146)"
"((frame-id96_201)"
" frame-id_34)"
"((exp-body97_202)"
" exp-body_89))"
"(add-local-binding!35.1"
" frame-id96_201"
" #t"
" exp-body97_202"
" #t"
" id93_198"
" phase94_199"
" counter95_200)))"
" fold-var_195))))"
"(values"
" fold-var_196)))))"
"(for-loop_190"
" fold-var_194"
"(unsafe-cdr"
" lst_192))))"
" fold-var_191))))"
" for-loop_190)"
" null"
" lst_189))))))"
"(let-values(((extended-env_148)"
"(let-values(((lst_203)"
" keys_147)"
"((lst_204)"
" ids_144))"
"(begin"
"(if(list?"
" lst_203)"
"(void)"
"(let-values()"
"(in-list"
" lst_203)))"
"(if(list?"
" lst_204)"
"(void)"
"(let-values()"
"(in-list"
" lst_204)))"
"((letrec-values(((for-loop_205)"
"(lambda(env_206"
" lst_207"
" lst_208)"
"(if(if(pair?"
" lst_207)"
"(pair?"
" lst_208)"
" #f)"
"(let-values(((key_209)"
"(unsafe-car"
" lst_207))"
"((id_210)"
"(unsafe-car"
" lst_208)))"
"(let-values(((env_211)"
"(let-values(((env_212)"
" env_206))"
"(let-values(((env_213)"
"(let-values()"
"(env-extend"
" env_212"
" key_209"
"(local-variable1.1"
" id_210)))))"
"(values"
" env_213)))))"
"(for-loop_205"
" env_211"
"(unsafe-cdr"
" lst_207)"
"(unsafe-cdr"
" lst_208))))"
" env_206))))"
" for-loop_205)"
"(expand-context-env"
" body-ctx_65)"
" lst_203"
" lst_204)))))"
"(loop_64"
"(let-values(((v_214)"
" body-ctx_65))"
"(let-values(((the-struct_215)"
" v_214))"
"(if(expand-context/outer?"
" the-struct_215)"
"(let-values(((env98_216)"
" extended-env_148)"
"((binding-layer99_217)"
"(maybe-increment-binding-layer_37"
" ids_144"
" body-ctx_65))"
"((inner100_218)"
"(root-expand-context/outer-inner"
" v_214)))"
"(expand-context/outer1.1"
" inner100_218"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_215)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_215)"
"(root-expand-context/outer-frame-id"
" the-struct_215)"
"(expand-context/outer-context"
" the-struct_215)"
" env98_216"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_215)"
"(expand-context/outer-scopes"
" the-struct_215)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_215)"
" binding-layer99_217"
"(expand-context/outer-reference-records"
" the-struct_215)"
"(expand-context/outer-only-immediate?"
" the-struct_215)"
"(expand-context/outer-need-eventually-defined"
" the-struct_215)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_215)"
"(expand-context/outer-name"
" the-struct_215)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                  \"expand-context/outer?\""
" the-struct_215))))"
" rest-bodys_88"
" null"
"(cons"
" ids_144"
"(append"
"(alt-reverse"
"(let-values(((lst_219)"
" done-bodys_67))"
"(begin"
"(if(list? lst_219)"
"(void)"
"(let-values()"
"(in-list"
" lst_219)))"
"((letrec-values(((for-loop_220)"
"(lambda(fold-var_221"
" lst_222)"
"(if(pair?"
" lst_222)"
"(let-values(((done-body_223)"
"(unsafe-car"
" lst_222)))"
"(let-values(((fold-var_224)"
"(let-values(((fold-var_225)"
" fold-var_221))"
"(let-values(((fold-var_226)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_225))))"
"(values"
" fold-var_226)))))"
"(for-loop_220"
" fold-var_224"
"(unsafe-cdr"
" lst_222))))"
" fold-var_221))))"
" for-loop_220)"
" null"
" lst_219))))"
" val-idss_68))"
"(cons"
" keys_147"
"(append"
"(alt-reverse"
"(let-values(((lst_227)"
" done-bodys_67))"
"(begin"
"(if(list? lst_227)"
"(void)"
"(let-values()"
"(in-list"
" lst_227)))"
"((letrec-values(((for-loop_228)"
"(lambda(fold-var_229"
" lst_230)"
"(if(pair?"
" lst_230)"
"(let-values(((done-body_231)"
"(unsafe-car"
" lst_230)))"
"(let-values(((fold-var_232)"
"(let-values(((fold-var_233)"
" fold-var_229))"
"(let-values(((fold-var_234)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_233))))"
"(values"
" fold-var_234)))))"
"(for-loop_228"
" fold-var_232"
"(unsafe-cdr"
" lst_230))))"
" fold-var_229))))"
" for-loop_228)"
" null"
" lst_227))))"
" val-keyss_69))"
"(cons"
" rhs81_131"
"(append"
"(alt-reverse"
"(let-values(((lst_235)"
" done-bodys_67))"
"(begin"
"(if(list? lst_235)"
"(void)"
"(let-values()"
"(in-list"
" lst_235)))"
"((letrec-values(((for-loop_236)"
"(lambda(fold-var_237"
" lst_238)"
"(if(pair?"
" lst_238)"
"(let-values(((done-body_239)"
"(unsafe-car"
" lst_238)))"
"(let-values(((fold-var_240)"
"(let-values(((fold-var_241)"
" fold-var_237))"
"(let-values(((fold-var_242)"
"(let-values()"
"(cons"
"(let-values()"
"(no-binds"
" done-body_239"
" s_29"
" phase_33))"
" fold-var_241))))"
"(values"
" fold-var_242)))))"
"(for-loop_236"
" fold-var_240"
"(unsafe-cdr"
" lst_238))))"
" fold-var_237))))"
" for-loop_236)"
" null"
" lst_235))))"
" val-rhss_70))"
"(cons"
" exp-body_89"
"(append"
"(alt-reverse"
"(let-values(((lst_243)"
" done-bodys_67))"
"(begin"
"(if(list? lst_243)"
"(void)"
"(let-values()"
"(in-list"
" lst_243)))"
"((letrec-values(((for-loop_244)"
"(lambda(fold-var_245"
" lst_246)"
"(if(pair?"
" lst_246)"
"(let-values(((done-body_247)"
"(unsafe-car"
" lst_246)))"
"(let-values(((fold-var_248)"
"(let-values(((fold-var_249)"
" fold-var_245))"
"(let-values(((fold-var_250)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_249))))"
"(values"
" fold-var_250)))))"
"(for-loop_244"
" fold-var_248"
"(unsafe-cdr"
" lst_246))))"
" fold-var_245))))"
" for-loop_244)"
" null"
" lst_243))))"
" track-stxs_71))"
" trans-idss_72"
" new-dups_145))))))))))"
"(if(equal? tmp_98 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_273)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_273"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_273"
" 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_251"
" define-syntaxes101_252"
" id102_253"
" rhs103_254)"
"(let-values(((s_274)"
" disarmed-exp-body_90))"
"(let-values(((orig-s_275)"
" s_274))"
"(let-values(((define-syntaxes101_276"
" id102_277"
" rhs103_278)"
"(let-values(((s_279)"
"(if(syntax?$1"
" s_274)"
"(syntax-e$1"
" s_274)"
" s_274)))"
"(if(pair?"
" s_279)"
"(let-values(((define-syntaxes104_280)"
"(let-values(((s_283)"
"(car"
" s_279)))"
" s_283))"
"((id105_281"
" rhs106_282)"
"(let-values(((s_284)"
"(cdr"
" s_279)))"
"(let-values(((s_285)"
"(if(syntax?$1"
" s_284)"
"(syntax-e$1"
" s_284)"
" s_284)))"
"(if(pair?"
" s_285)"
"(let-values(((id107_286)"
"(let-values(((s_288)"
"(car"
" s_285)))"
"(let-values(((s_289)"
"(if(syntax?$1"
" s_288)"
"(syntax-e$1"
" s_288)"
" s_288)))"
"(let-values(((flat-s_290)"
"(to-syntax-list.1"
" s_289)))"
"(if(not"
" flat-s_290)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_275))"
"(let-values()"
"(let-values(((id_291)"
"(let-values(((lst_292)"
" flat-s_290))"
"(begin"
"(if(list?"
" lst_292)"
"(void)"
"(let-values()"
"(in-list"
" lst_292)))"
"((letrec-values(((for-loop_293)"
"(lambda(id_294"
" lst_295)"
"(if(pair?"
" lst_295)"
"(let-values(((s_296)"
"(unsafe-car"
" lst_295)))"
"(let-values(((id_297)"
"(let-values(((id_298)"
" id_294))"
"(let-values(((id_299)"
"(let-values()"
"(let-values(((id110_300)"
"(let-values()"
"(if(let-values(((or-part_301)"
"(if(syntax?$1"
" s_296)"
"(symbol?"
"(syntax-e$1"
" s_296))"
" #f)))"
"(if or-part_301"
" or-part_301"
"(symbol?"
" s_296)))"
" s_296"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_275"
" s_296)))))"
"(cons"
" id110_300"
" id_298)))))"
"(values"
" id_299)))))"
"(for-loop_293"
" id_297"
"(unsafe-cdr"
" lst_295))))"
" id_294))))"
" for-loop_293)"
" null"
" lst_292)))))"
"(alt-reverse"
" id_291))))))))"
"((rhs108_287)"
"(let-values(((s_302)"
"(cdr"
" s_285)))"
"(let-values(((s_303)"
"(if(syntax?$1"
" s_302)"
"(syntax-e$1"
" s_302)"
" s_302)))"
"(if(pair?"
" s_303)"
"(let-values(((rhs109_304)"
"(let-values(((s_305)"
"(car"
" s_303)))"
" s_305))"
"(()"
"(let-values(((s_306)"
"(cdr"
" s_303)))"
"(let-values(((s_307)"
"(if(syntax?$1"
" s_306)"
"(syntax-e$1"
" s_306)"
" s_306)))"
"(if(null?"
" s_307)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_275))))))"
"(values"
" rhs109_304))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_275))))))"
"(values"
" id107_286"
" rhs108_287))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_275))))))"
"(values"
" define-syntaxes104_280"
" id105_281"
" rhs106_282))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_275)))))"
"(values"
" #t"
" define-syntaxes101_276"
" id102_277"
" rhs103_278))))))"
"(let-values(((ids_267)"
"(remove-use-site-scopes"
" id102_253"
" body-ctx_65)))"
"(let-values((()"
"(begin"
"(let-values(((obs_308)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_308"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_308"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_267"
" rhs103_254)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_268)"
"(let-values(((ids111_309)"
" ids_267)"
"((phase112_310)"
" phase_33)"
"((exp-body113_311)"
" exp-body_89)"
"((dups114_312)"
" dups_73))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids111_309"
" phase112_310"
" exp-body113_311"
" dups114_312"
" #t))))"
"(let-values(((counter_269)"
"(root-expand-context-counter"
" ctx_28)))"
"(let-values(((keys_270)"
"(alt-reverse"
"(let-values(((lst_313)"
" ids_267))"
"(begin"
"(if(list?"
" lst_313)"
"(void)"
"(let-values()"
"(in-list"
" lst_313)))"
"((letrec-values(((for-loop_314)"
"(lambda(fold-var_315"
" lst_316)"
"(if(pair?"
" lst_316)"
"(let-values(((id_317)"
"(unsafe-car"
" lst_316)))"
"(let-values(((fold-var_318)"
"(let-values(((fold-var_319)"
" fold-var_315))"
"(let-values(((fold-var_320)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id115_322)"
" id_317)"
"((phase116_323)"
" phase_33)"
"((counter117_324)"
" counter_269)"
"((frame-id118_325)"
" frame-id_34)"
"((exp-body119_326)"
" exp-body_89))"
"(add-local-binding!35.1"
" frame-id118_325"
" #t"
" exp-body119_326"
" #t"
" id115_322"
" phase116_323"
" counter117_324)))"
" fold-var_319))))"
"(values"
" fold-var_320)))))"
"(for-loop_314"
" fold-var_318"
"(unsafe-cdr"
" lst_316))))"
" fold-var_315))))"
" for-loop_314)"
" null"
" lst_313))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_327)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_327"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_327"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values(((vals_271)"
"(eval-for-syntaxes-binding"
" rhs103_254"
" ids_267"
" body-ctx_65)))"
"(let-values(((extended-env_272)"
"(let-values(((lst_328)"
" keys_270)"
"((lst_329)"
" vals_271)"
"((lst_330)"
" ids_267))"
"(begin"
"(if(list?"
" lst_328)"
"(void)"
"(let-values()"
"(in-list"
" lst_328)))"
"(if(list?"
" lst_329)"
"(void)"
"(let-values()"
"(in-list"
" lst_329)))"
"(if(list?"
" lst_330)"
"(void)"
"(let-values()"
"(in-list"
" lst_330)))"
"((letrec-values(((for-loop_331)"
"(lambda(env_332"
" lst_333"
" lst_334"
" lst_335)"
"(if(if(pair?"
" lst_333)"
"(if(pair?"
" lst_334)"
"(pair?"
" lst_335)"
" #f)"
" #f)"
"(let-values(((key_336)"
"(unsafe-car"
" lst_333))"
"((val_337)"
"(unsafe-car"
" lst_334))"
"((id_338)"
"(unsafe-car"
" lst_335)))"
"(let-values(((env_339)"
"(let-values(((env_340)"
" env_332))"
"(let-values(((env_341)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_337"
" id_338"
" phase_33)"
"(env-extend"
" env_340"
" key_336"
" val_337)))))"
"(values"
" env_341)))))"
"(for-loop_331"
" env_339"
"(unsafe-cdr"
" lst_333)"
"(unsafe-cdr"
" lst_334)"
"(unsafe-cdr"
" lst_335))))"
" env_332))))"
" for-loop_331)"
"(expand-context-env"
" body-ctx_65)"
" lst_328"
" lst_329"
" lst_330)))))"
"(loop_64"
"(let-values(((v_342)"
" body-ctx_65))"
"(let-values(((the-struct_343)"
" v_342))"
"(if(expand-context/outer?"
" the-struct_343)"
"(let-values(((env120_344)"
" extended-env_272)"
"((binding-layer121_345)"
"(maybe-increment-binding-layer_37"
" ids_267"
" body-ctx_65))"
"((inner122_346)"
"(root-expand-context/outer-inner"
" v_342)))"
"(expand-context/outer1.1"
" inner122_346"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_343)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_343)"
"(root-expand-context/outer-frame-id"
" the-struct_343)"
"(expand-context/outer-context"
" the-struct_343)"
" env120_344"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_343)"
"(expand-context/outer-scopes"
" the-struct_343)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_343)"
" binding-layer121_345"
"(expand-context/outer-reference-records"
" the-struct_343)"
"(expand-context/outer-only-immediate?"
" the-struct_343)"
"(expand-context/outer-need-eventually-defined"
" the-struct_343)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_343)"
"(expand-context/outer-name"
" the-struct_343)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                        \"expand-context/outer?\""
" the-struct_343))))"
" rest-bodys_88"
" done-bodys_67"
" val-idss_68"
" val-keyss_69"
" val-rhss_70"
" track-stxs_71"
"(cons"
" ids_267"
" trans-idss_72)"
" new-dups_268))))))))))))"
"(let-values()"
"(if stratified?_30"
"(let-values()"
"(loop_64"
" body-ctx_65"
" null"
"(append"
"(alt-reverse rest-bodys_88)"
"(cons exp-body_89 done-bodys_67))"
" val-idss_68"
" val-keyss_69"
" val-rhss_70"
" track-stxs_71"
" trans-idss_72"
" dups_73))"
"(let-values()"
"(loop_64"
" body-ctx_65"
" rest-bodys_88"
"(cons exp-body_89 done-bodys_67)"
" val-idss_68"
" val-keyss_69"
" val-rhss_70"
" track-stxs_71"
" trans-idss_72"
" dups_73)))))))))))))))))"
" loop_64)"
" body-ctx_36"
" init-bodys_32"
" null"
" null"
" null"
" null"
" null"
" null"
"(make-check-no-duplicate-table)))))))))))))))))))"
"(define-values"
"(lifted/6.1$2 lifted/7.1$2 lifted/8.1$2 lifted/9.1$2 lifted/10.1$2)"
"(make-struct-type"
" 'finish-expanding-body"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'finish-expanding-body"
"(case-lambda"
"((self_362"
" body-ctx_363"
" frame-id_364"
" def-ctx-scopes_365"
" val-idss_366"
" val-keyss_367"
" val-rhss_368"
" track-stxs_369"
" done-bodys_370)"
"(apply"
" missing-kw"
" self_362"
" body-ctx_363"
" frame-id_364"
" def-ctx-scopes_365"
" val-idss_366"
" val-keyss_367"
" val-rhss_368"
" track-stxs_369"
" done-bodys_370"
" null))))))"
"(current-inspector)"
"(case-lambda"
"((self_371"
" body-ctx_372"
" frame-id_373"
" def-ctx-scopes_374"
" val-idss_375"
" val-keyss_376"
" val-rhss_377"
" track-stxs_378"
" done-bodys_379)"
"(apply"
" missing-kw"
" self_371"
" body-ctx_372"
" frame-id_373"
" def-ctx-scopes_374"
" val-idss_375"
" val-keyss_376"
" val-rhss_377"
" track-stxs_378"
" done-bodys_379"
" null)))))"
"(define-values"
"(finish-expanding-body26.1)"
"(lambda(disappeared-transformer-bindings13_380"
" name12_381"
" source10_382"
" stratified?11_383"
" body-ctx18_384"
" frame-id19_385"
" def-ctx-scopes20_386"
" val-idss21_387"
" val-keyss22_388"
" val-rhss23_389"
" track-stxs24_390"
" done-bodys25_391)"
"(let-values(((body-ctx_392) body-ctx18_384))"
"(let-values(((frame-id_393) frame-id19_385))"
"(let-values(((def-ctx-scopes_394) def-ctx-scopes20_386))"
"(let-values(((val-idss_395) val-idss21_387))"
"(let-values(((val-keyss_396) val-keyss22_388))"
"(let-values(((val-rhss_397) val-rhss23_389))"
"(let-values(((track-stxs_398) track-stxs24_390))"
"(let-values(((done-bodys_399) done-bodys25_391))"
"(let-values(((s_400) source10_382))"
"(let-values(((stratified?_401) stratified?11_383))"
"(let-values(((name_402) name12_381))"
"(let-values(((disappeared-transformer-bindings_403) disappeared-transformer-bindings13_380))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? done-bodys_399)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                   \"no expression after a sequence of internal definitions\""
" s_400))"
"(void))"
"(values))))"
"(let-values(((finish-ctx_404)"
"(let-values(((v_406)"
"(accumulate-def-ctx-scopes"
" body-ctx_392"
" def-ctx-scopes_394)))"
"(let-values(((the-struct_407) v_406))"
"(if(expand-context/outer? the-struct_407)"
"(let-values(((context123_408) 'expression)"
"((use-site-scopes124_409)(box null))"
"((scopes125_410)"
"(append"
"(unbox"
"(root-expand-context-use-site-scopes body-ctx_392))"
"(expand-context-scopes body-ctx_392)))"
"((only-immediate?126_411) #f)"
"((def-ctx-scopes127_412) #f)"
"((post-expansion-scope128_413) #f)"
"((inner129_414)"
"(root-expand-context/outer-inner v_406)))"
"(expand-context/outer1.1"
" inner129_414"
" post-expansion-scope128_413"
" use-site-scopes124_409"
"(root-expand-context/outer-frame-id the-struct_407)"
" context123_408"
"(expand-context/outer-env the-struct_407)"
"(expand-context/outer-post-expansion-scope-action the-struct_407)"
" scopes125_410"
" def-ctx-scopes127_412"
"(expand-context/outer-binding-layer the-struct_407)"
"(expand-context/outer-reference-records the-struct_407)"
" only-immediate?126_411"
"(expand-context/outer-need-eventually-defined the-struct_407)"
"(expand-context/outer-current-introduction-scopes the-struct_407)"
"(expand-context/outer-name the-struct_407)))"
"(raise-argument-error"
" 'struct-copy"
"                                                     \"expand-context/outer?\""
" the-struct_407))))))"
"(let-values(((finish-bodys_405)"
"(lambda()"
"(let-values(((block->list?_415)(null? val-idss_395)))"
"(let-values((()"
"(begin"
"(if block->list?_415"
"(void)"
"(let-values()"
"(let-values(((obs_418)"
"(expand-context-observer"
" body-ctx_392)))"
"(if obs_418"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_418"
" 'next-group)))"
"(void)))))"
"(values))))"
"(let-values((()"
"(begin"
"(if block->list?_415"
"(void)"
"(let-values()"
"(let-values(((obs_419)"
"(expand-context-observer"
" body-ctx_392)))"
"(if obs_419"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_419"
" 'prim-begin)))"
"(void)))))"
"(values))))"
"(let-values(((last-i_416)(sub1(length done-bodys_399))))"
"(let-values((()"
"(begin"
"(let-values(((obs_420)"
"(expand-context-observer"
" body-ctx_392)))"
"(if obs_420"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_420"
" 'enter-list"
" done-bodys_399)))"
"(void)))"
"(values))))"
"(let-values(((exp-bodys_417)"
"((letrec-values(((for-loop/head_421)"
"(lambda(done-bodys130_422"
" is132_423)"
"(if(let-values(((or-part_424)"
"(null?"
" done-bodys130_422)))"
"(if or-part_424"
" or-part_424"
" #f))"
"(let-values() null)"
"(let-values()"
"(let-values(((done-body-rest131_425)"
"(cdr"
" done-bodys130_422))"
"((i-rest133_426)"
"(add1"
" is132_423))"
"((done-body_427)"
"(car"
" done-bodys130_422))"
"((i_428)"
" is132_423))"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_429)"
"(expand-context-observer"
" body-ctx_392)))"
"(if obs_429"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_429"
" 'next)))"
"(void)))"
"(let-values(((done-body134_430)"
" done-body_427)"
"((temp135_431)"
"(if(if name_402"
"(="
" i_428"
" last-i_416)"
" #f)"
"(let-values(((v_432)"
" finish-ctx_404))"
"(let-values(((the-struct_433)"
" v_432))"
"(if(expand-context/outer?"
" the-struct_433)"
"(let-values(((name136_434)"
" name_402)"
"((inner137_435)"
"(root-expand-context/outer-inner"
" v_432)))"
"(expand-context/outer1.1"
" inner137_435"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_433)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_433)"
"(root-expand-context/outer-frame-id"
" the-struct_433)"
"(expand-context/outer-context"
" the-struct_433)"
"(expand-context/outer-env"
" the-struct_433)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_433)"
"(expand-context/outer-scopes"
" the-struct_433)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_433)"
"(expand-context/outer-binding-layer"
" the-struct_433)"
"(expand-context/outer-reference-records"
" the-struct_433)"
"(expand-context/outer-only-immediate?"
" the-struct_433)"
"(expand-context/outer-need-eventually-defined"
" the-struct_433)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_433)"
" name136_434))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                \"expand-context/outer?\""
" the-struct_433))))"
" finish-ctx_404)))"
"(expand5.1"
" #f"
" #f"
" done-body134_430"
" temp135_431))))"
"(for-loop/head_421"
" done-body-rest131_425"
" i-rest133_426))))))))"
" for-loop/head_421)"
" done-bodys_399"
" 0)))"
"(begin"
"(let-values(((obs_436)"
"(expand-context-observer body-ctx_392)))"
"(if obs_436"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_436"
" 'exit-list"
" exp-bodys_417)))"
"(void)))"
"(reference-record-clear! frame-id_393)"
" exp-bodys_417))))))))))"
"(if(if(null? val-idss_395)(null? disappeared-transformer-bindings_403) #f)"
"(let-values()(finish-bodys_405))"
"(let-values()"
"(let-values(((exp-s_437)"
"(let-values(((...nder/expand/body.rkt:262:18_438)"
" expand-and-split-bindings-by-reference47.1)"
"((val-idss138_439) val-idss_395)"
"((val-keyss139_440) val-keyss_396)"
"((val-rhss140_441) val-rhss_397)"
"((track-stxs141_442) track-stxs_398)"
"((temp142_443)(not stratified?_401))"
"((frame-id143_444) frame-id_393)"
"((finish-ctx144_445) finish-ctx_404)"
"((s145_446) s_400)"
"((finish-bodys146_447) finish-bodys_405)"
"((temp147_448) #f))"
"(expand-and-split-bindings-by-reference45.1"
" finish-ctx144_445"
" frame-id143_444"
" finish-bodys146_447"
" s145_446"
" temp142_443"
" temp147_448"
" val-idss138_439"
" val-keyss139_440"
" val-rhss140_441"
" track-stxs141_442))))"
"(if(expand-context-to-parsed? body-ctx_392)"
"(list exp-s_437)"
"(list"
"(attach-disappeared-transformer-bindings"
" exp-s_437"
" disappeared-transformer-bindings_403))))))))))))))))))))))))"
"(define-values"
"(unpack27.1)"
"(lambda(given-kws_449"
" given-args_450"
" body-ctx18_451"
" frame-id19_452"
" def-ctx-scopes20_453"
" val-idss21_454"
" val-keyss22_455"
" val-rhss23_456"
" track-stxs24_457"
" done-bodys25_458)"
"(let-values(((disappeared-transformer-bindings13_459)(car given-args_450))"
"((given-kws_460)(cdr given-kws_449))"
"((given-args_461)(cdr given-args_450)))"
"(let-values(((name12_462)(car given-args_461))"
"((given-kws_463)(cdr given-kws_460))"
"((given-args_464)(cdr given-args_461)))"
"(let-values(((source10_465)(car given-args_464))"
"((given-kws_466)(cdr given-kws_463))"
"((given-args_467)(cdr given-args_464)))"
"(let-values(((stratified?11_468)(car given-args_467)))"
"(finish-expanding-body26.1"
" disappeared-transformer-bindings13_459"
" name12_462"
" source10_465"
" stratified?11_468"
" body-ctx18_451"
" frame-id19_452"
" def-ctx-scopes20_453"
" val-idss21_454"
" val-keyss22_455"
" val-rhss23_456"
" track-stxs24_457"
" done-bodys25_458)))))))"
"(define-values"
"(finish-expanding-body28.1)"
"(lifted/7.1$2"
"(lambda(given-kws_469 given-argc_470)"
"(if(= given-argc_470 10)"
"(let-values(((l2_471) given-kws_469))"
"(if(pair? l2_471)"
"(if(eq?(car l2_471) '#:disappeared-transformer-bindings)"
"(let-values(((l2_472)(cdr l2_471)))"
"(if(pair? l2_472)"
"(if(eq?(car l2_472) '#:name)"
"(let-values(((l2_473)(cdr l2_472)))"
"(if(pair? l2_473)"
"(if(eq?(car l2_473) '#:source)"
"(let-values(((l2_474)(cdr l2_473)))"
"(if(pair? l2_474)(if(eq?(car l2_474) '#:stratified?)(null?(cdr l2_474)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_475"
" given-args_476"
" body-ctx_477"
" frame-id_478"
" def-ctx-scopes_479"
" val-idss_480"
" val-keyss_481"
" val-rhss_482"
" track-stxs_483"
" done-bodys_484)"
"(unpack27.1"
" given-kws_475"
" given-args_476"
" body-ctx_477"
" frame-id_478"
" def-ctx-scopes_479"
" val-idss_480"
" val-keyss_481"
" val-rhss_482"
" track-stxs_483"
" done-bodys_484)))"
" '(#:disappeared-transformer-bindings #:name #:source #:stratified?)"
" '(#:disappeared-transformer-bindings #:name #:source #:stratified?)))"
"(define-values"
"(lifted/11.1$1 lifted/12.1$1 lifted/13.1$1 lifted/14.1$1 lifted/15.1$1)"
"(make-struct-type"
" 'expand-and-split-bindings-by-reference"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-and-split-bindings-by-reference"
"(case-lambda"
"((self_485 idss_486 keyss_487 rhss_488 track-stxs_489)"
"(apply missing-kw self_485 idss_486 keyss_487 rhss_488 track-stxs_489 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_490 idss_491 keyss_492 rhss_493 track-stxs_494)"
"(apply missing-kw self_490 idss_491 keyss_492 rhss_493 track-stxs_494 null)))))"
"(define-values"
"(expand-and-split-bindings-by-reference45.1)"
"(lambda(ctx31_495"
" frame-id30_496"
" get-body33_497"
" source32_498"
" split?29_499"
" track?34_500"
" idss41_501"
" keyss42_502"
" rhss43_503"
" track-stxs44_504)"
"(let-values(((idss_505) idss41_501))"
"(let-values(((keyss_506) keyss42_502))"
"(let-values(((rhss_507) rhss43_503))"
"(let-values(((track-stxs_508) track-stxs44_504))"
"(let-values(((split?_509) split?29_499))"
"(let-values(((frame-id_510) frame-id30_496))"
"(let-values(((ctx_511) ctx31_495))"
"(let-values(((s_512) source32_498))"
"(let-values(((get-body_513) get-body33_497))"
"(let-values(((track?_514) track?34_500))"
"(let-values()"
"(let-values(((phase_515)(expand-context-phase ctx_511)))"
"((letrec-values(((loop_516)"
"(lambda(idss_517"
" keyss_518"
" rhss_519"
" track-stxs_520"
" accum-idss_521"
" accum-keyss_522"
" accum-rhss_523"
" accum-track-stxs_524"
" track?_525"
" get-list?_526)"
"(if(null? idss_517)"
"(let-values()"
"(if(if(null? accum-idss_521) get-list?_526 #f)"
"(let-values()(get-body_513))"
"(let-values()"
"(let-values(((exp-body_527)(get-body_513)))"
"(let-values(((result-s_528)"
"(if(expand-context-to-parsed? ctx_511)"
"(if(null? accum-idss_521)"
"(parsed-let-values17.1"
"(keep-properties-only s_512)"
" null"
" null"
" exp-body_527)"
"(parsed-letrec-values18.1"
"(keep-properties-only s_512)"
"(alt-reverse accum-idss_521)"
"(alt-reverse"
"(map2"
" list"
" accum-keyss_522"
" accum-rhss_523))"
" exp-body_527))"
"(let-values(((track?148_530) track?_525)"
"((s149_531) s_512)"
"((temp150_532)"
"(list*"
"(if(null? accum-idss_521)"
"(core-id"
" 'let-values"
" phase_515)"
"(core-id"
" 'letrec-values"
" phase_515))"
"(build-clauses"
" accum-idss_521"
" accum-rhss_523"
" accum-track-stxs_524)"
" exp-body_527)))"
"(rebuild62.1"
" track?148_530"
" #t"
" s149_531"
" temp150_532)))))"
"(begin"
"(if track?_525"
"(let-values()"
"(let-values(((obs_533)"
"(expand-context-observer ctx_511)))"
"(if obs_533"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_533"
" 'tag"
" result-s_528)))"
"(void))))"
"(void))"
"(if get-list?_526(list result-s_528) result-s_528)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_539)"
"(expand-context-observer ctx_511)))"
"(if obs_539"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_539 'next)))"
"(void)))"
"(values))))"
"(let-values(((ids_534)(car idss_517)))"
"(let-values(((expanded-rhs_535)"
"(let-values(((temp151_540)(car rhss_519))"
"((temp152_541)"
"(as-named-context ctx_511 ids_534)))"
"(expand5.1 #f #f temp151_540 temp152_541))))"
"(let-values(((track-stx_536)(car track-stxs_520)))"
"(let-values(((local-or-forward-references?_537)"
"(reference-record-forward-references?"
" frame-id_510)))"
"(let-values((()"
"(begin"
"(reference-record-bound!"
" frame-id_510"
"(car keyss_518))"
"(values))))"
"(let-values(((forward-references?_538)"
"(reference-record-forward-references?"
" frame-id_510)))"
"(if(if(not local-or-forward-references?_537)"
" split?_509"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? accum-idss_521)"
"(void)"
"(let-values()"
"(error"
"                                                                                           \"internal error: accumulated ids not empty\")))"
"(values))))"
"(let-values(((exp-rest_542)"
"(loop_516"
"(cdr idss_517)"
"(cdr keyss_518)"
"(cdr rhss_519)"
"(cdr track-stxs_520)"
" null"
" null"
" null"
" null"
" #f"
" #t)))"
"((if get-list?_526 list values)"
"(if(expand-context-to-parsed? ctx_511)"
"(parsed-let-values17.1"
"(keep-properties-only s_512)"
"(list ids_534)"
"(list"
"(list(car keyss_518) expanded-rhs_535))"
" exp-rest_542)"
"(let-values(((track?153_544) track?_525)"
"((s154_545) s_512)"
"((temp155_546)"
"(list*"
"(core-id"
" 'let-values"
" phase_515)"
"(list"
"(build-clause"
" ids_534"
" expanded-rhs_535"
" track-stx_536))"
" exp-rest_542)))"
"(rebuild62.1"
" track?153_544"
" #t"
" s154_545"
" temp155_546)))))))"
"(if(if(not forward-references?_538)"
"(let-values(((or-part_547) split?_509))"
"(if or-part_547"
" or-part_547"
"(null?(cdr idss_517))))"
" #f)"
"(let-values()"
"(let-values(((exp-rest_548)"
"(loop_516"
"(cdr idss_517)"
"(cdr keyss_518)"
"(cdr rhss_519)"
"(cdr track-stxs_520)"
" null"
" null"
" null"
" null"
" #f"
" #t)))"
"((if get-list?_526 list values)"
"(if(expand-context-to-parsed? ctx_511)"
"(parsed-letrec-values18.1"
"(keep-properties-only s_512)"
"(alt-reverse"
"(cons ids_534 accum-idss_521))"
"(alt-reverse"
"(cons"
"(list(car keyss_518) expanded-rhs_535)"
"(map2"
" list"
" accum-keyss_522"
" accum-rhss_523)))"
" exp-rest_548)"
"(let-values(((track?156_550) track?_525)"
"((s157_551) s_512)"
"((temp158_552)"
"(list*"
"(core-id"
" 'letrec-values"
" phase_515)"
"(build-clauses"
"(cons"
" ids_534"
" accum-idss_521)"
"(cons"
" expanded-rhs_535"
" accum-rhss_523)"
"(cons"
" track-stx_536"
" accum-track-stxs_524))"
" exp-rest_548)))"
"(rebuild62.1"
" track?156_550"
" #t"
" s157_551"
" temp158_552))))))"
"(let-values()"
"(loop_516"
"(cdr idss_517)"
"(cdr keyss_518)"
"(cdr rhss_519)"
"(cdr track-stxs_520)"
"(cons ids_534 accum-idss_521)"
"(cons(car keyss_518) accum-keyss_522)"
"(cons expanded-rhs_535 accum-rhss_523)"
"(cons track-stx_536 accum-track-stxs_524)"
" track?_525"
" get-list?_526))))))))))))))))"
" loop_516)"
" idss_505"
" keyss_506"
" rhss_507"
" track-stxs_508"
" null"
" null"
" null"
" null"
" track?_514"
" #f)))))))))))))))"
"(define-values"
"(unpack46.1$1)"
"(lambda(given-kws_553 given-args_554 idss41_555 keyss42_556 rhss43_557 track-stxs44_558)"
"(let-values(((ctx31_559)(car given-args_554))"
"((given-kws_560)(cdr given-kws_553))"
"((given-args_561)(cdr given-args_554)))"
"(let-values(((frame-id30_562)(car given-args_561))"
"((given-kws_563)(cdr given-kws_560))"
"((given-args_564)(cdr given-args_561)))"
"(let-values(((get-body33_565)(car given-args_564))"
"((given-kws_566)(cdr given-kws_563))"
"((given-args_567)(cdr given-args_564)))"
"(let-values(((source32_568)(car given-args_567))"
"((given-kws_569)(cdr given-kws_566))"
"((given-args_570)(cdr given-args_567)))"
"(let-values(((split?29_571)(car given-args_570))"
"((given-kws_572)(cdr given-kws_569))"
"((given-args_573)(cdr given-args_570)))"
"(let-values(((track?34_574)(car given-args_573)))"
"(expand-and-split-bindings-by-reference45.1"
" ctx31_559"
" frame-id30_562"
" get-body33_565"
" source32_568"
" split?29_571"
" track?34_574"
" idss41_555"
" keyss42_556"
" rhss43_557"
" track-stxs44_558)))))))))"
"(define-values"
"(expand-and-split-bindings-by-reference47.1)"
"(lifted/12.1$1"
"(lambda(given-kws_575 given-argc_576)"
"(if(= given-argc_576 6)"
"(let-values(((l2_577) given-kws_575))"
"(if(pair? l2_577)"
"(if(eq?(car l2_577) '#:ctx)"
"(let-values(((l2_578)(cdr l2_577)))"
"(if(pair? l2_578)"
"(if(eq?(car l2_578) '#:frame-id)"
"(let-values(((l2_579)(cdr l2_578)))"
"(if(pair? l2_579)"
"(if(eq?(car l2_579) '#:get-body)"
"(let-values(((l2_580)(cdr l2_579)))"
"(if(pair? l2_580)"
"(if(eq?(car l2_580) '#:source)"
"(let-values(((l2_581)(cdr l2_580)))"
"(if(pair? l2_581)"
"(if(eq?(car l2_581) '#:split?)"
"(let-values(((l2_582)(cdr l2_581)))"
"(if(pair? l2_582)(if(eq?(car l2_582) '#:track?)(null?(cdr l2_582)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_583 given-args_584 idss_585 keyss_586 rhss_587 track-stxs_588)"
"(unpack46.1$1 given-kws_583 given-args_584 idss_585 keyss_586 rhss_587 track-stxs_588)))"
" '(#:ctx #:frame-id #:get-body #:source #:split? #:track?)"
" '(#:ctx #:frame-id #:get-body #:source #:split? #:track?)))"
"(define-values"
"(build-clauses)"
"(lambda(accum-idss_589 accum-rhss_590 accum-track-stxs_591)"
"(map2 build-clause(alt-reverse accum-idss_589)(alt-reverse accum-rhss_590)(alt-reverse accum-track-stxs_591))))"
"(define-values"
"(build-clause)"
"(lambda(ids_592 rhs_593 track-stx_594)"
"(let-values(((clause_595)(datum->syntax$1 #f(list ids_592 rhs_593))))"
"(if track-stx_594(syntax-track-origin$1 clause_595 track-stx_594) clause_595))))"
"(define-values"
"(no-binds)"
"(lambda(expr_596 s_597 phase_598)"
"(let-values(((s-runtime-stx_599)(syntax-shift-phase-level$1 runtime-stx phase_598)))"
"(datum->syntax$1"
" #f"
"(list"
"(core-id 'begin phase_598)"
" expr_596"
"(list(core-id '#%app phase_598)(datum->syntax$1 s-runtime-stx_599 'values)))"
" s_597))))"
"(void)"
"(void)"
"(define-values"
"(lambda-clause-expander)"
"(lambda(s_11 disarmed-s_12 formals_13 bodys_14 ctx_15 log-renames-tag_16)"
"(let-values(((sc_17)(new-scope 'local)))"
"(let-values(((phase_18)(expand-context-phase ctx_15)))"
"(let-values(((ids_19)(parse-and-flatten-formals formals_13 sc_17 disarmed-s_12)))"
"(let-values((()"
"(begin"
"(let-values(((ids34_28) ids_19)"
"((phase35_29) phase_18)"
"((s36_30) s_11)"
"                                       ((temp37_31) \"argument name\"))"
"(check-no-duplicate-ids8.1 temp37_31 #t ids34_28 phase35_29 s36_30 #f #f))"
"(values))))"
"(let-values(((counter_20)(root-expand-context-counter ctx_15)))"
"(let-values(((keys_21)"
"(alt-reverse"
"(let-values(((lst_32) ids_19))"
"(begin"
"(if(list? lst_32)(void)(let-values()(in-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(fold-var_34 lst_35)"
"(if(pair? lst_35)"
"(let-values(((id_36)(unsafe-car lst_35)))"
"(let-values(((fold-var_37)"
"(let-values(((fold-var_38) fold-var_34))"
"(let-values(((fold-var_39)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id38_41)"
" id_36)"
"((phase39_42)"
" phase_18)"
"((counter40_43)"
" counter_20)"
"((s41_44)"
" s_11))"
"(add-local-binding!35.1"
" #f"
" #f"
" s41_44"
" #t"
" id38_41"
" phase39_42"
" counter40_43)))"
" fold-var_38))))"
"(values fold-var_39)))))"
"(for-loop_33 fold-var_37(unsafe-cdr lst_35))))"
" fold-var_34))))"
" for-loop_33)"
" null"
" lst_32))))))"
"(let-values(((body-env_22)"
"(let-values(((lst_45) keys_21)((lst_46) ids_19))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"(if(list? lst_46)(void)(let-values()(in-list lst_46)))"
"((letrec-values(((for-loop_47)"
"(lambda(env_48 lst_49 lst_50)"
"(if(if(pair? lst_49)(pair? lst_50) #f)"
"(let-values(((key_51)(unsafe-car lst_49))"
"((id_52)(unsafe-car lst_50)))"
"(let-values(((env_53)"
"(let-values(((env_54) env_48))"
"(let-values(((env_55)"
"(let-values()"
"(env-extend"
" env_54"
" key_51"
"(local-variable1.1 id_52)))))"
"(values env_55)))))"
"(for-loop_47"
" env_53"
"(unsafe-cdr lst_49)"
"(unsafe-cdr lst_50))))"
" env_48))))"
" for-loop_47)"
"(expand-context-env ctx_15)"
" lst_45"
" lst_46)))))"
"(let-values(((sc-formals_23)(add-scope formals_13 sc_17)))"
"(let-values(((sc-bodys_24)"
"(alt-reverse"
"(let-values(((lst_56) bodys_14))"
"(begin"
"(if(list? lst_56)(void)(let-values()(in-list lst_56)))"
"((letrec-values(((for-loop_57)"
"(lambda(fold-var_58 lst_59)"
"(if(pair? lst_59)"
"(let-values(((body_60)(unsafe-car lst_59)))"
"(let-values(((fold-var_61)"
"(let-values(((fold-var_62) fold-var_58))"
"(let-values(((fold-var_63)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_60"
" sc_17))"
" fold-var_62))))"
"(values fold-var_63)))))"
"(for-loop_57 fold-var_61(unsafe-cdr lst_59))))"
" fold-var_58))))"
" for-loop_57)"
" null"
" lst_56))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_64)(expand-context-observer ctx_15)))"
"(if obs_64"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_64"
" log-renames-tag_16"
" sc-formals_23"
"(datum->syntax$1 #f sc-bodys_24))))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_25)"
"(let-values(((v_65) ctx_15))"
"(let-values(((the-struct_66) v_65))"
"(if(expand-context/outer? the-struct_66)"
"(let-values(((env42_67) body-env_22)"
"((scopes43_68)(cons sc_17(expand-context-scopes ctx_15)))"
"((binding-layer44_69)"
"(increment-binding-layer ids_19 ctx_15 sc_17))"
"((frame-id45_70) #f)"
"((inner46_71)(root-expand-context/outer-inner v_65)))"
"(expand-context/outer1.1"
" inner46_71"
"(root-expand-context/outer-post-expansion-scope the-struct_66)"
"(root-expand-context/outer-use-site-scopes the-struct_66)"
" frame-id45_70"
"(expand-context/outer-context the-struct_66)"
" env42_67"
"(expand-context/outer-post-expansion-scope-action the-struct_66)"
" scopes43_68"
"(expand-context/outer-def-ctx-scopes the-struct_66)"
" binding-layer44_69"
"(expand-context/outer-reference-records the-struct_66)"
"(expand-context/outer-only-immediate? the-struct_66)"
"(expand-context/outer-need-eventually-defined the-struct_66)"
"(expand-context/outer-current-introduction-scopes the-struct_66)"
"(expand-context/outer-name the-struct_66)))"
"(raise-argument-error"
" 'struct-copy"
"                                             \"expand-context/outer?\""
" the-struct_66))))))"
"(let-values(((exp-body_26)"
"(let-values(((sc-bodys47_73) sc-bodys_24)"
"((body-ctx48_74) body-ctx_25)"
"((temp49_75)"
"(let-values(((ctx50_76) ctx_15)((s51_77) s_11))"
"(keep-as-needed55.1 #f #f ctx50_76 s51_77))))"
"(expand-body7.1 temp49_75 #f #f sc-bodys47_73 body-ctx48_74))))"
"(values"
"(if(expand-context-to-parsed? ctx_15)"
"(unflatten-like-formals keys_21 formals_13)"
" sc-formals_23)"
" exp-body_26)))))))))))))))"
"(define-values"
"(make-expand-lambda)"
"(lambda(get-lambda_78)"
"(lambda(s_79 ctx_80)"
"(let-values((()"
"(begin"
"(let-values(((obs_101)(expand-context-observer ctx_80)))"
"(if obs_101(let-values()(let-values()(call-expand-observe obs_101 'prim-lambda)))(void)))"
"(values))))"
"(let-values(((disarmed-s_81)(syntax-disarm$1 s_79)))"
"(let-values(((ok?_82 lambda52_83 formals53_84 body54_85)"
"(let-values(((s_102) disarmed-s_81))"
"(let-values(((orig-s_103) s_102))"
"(let-values(((lambda52_104 formals53_105 body54_106)"
"(let-values(((s_107)(if(syntax?$1 s_102)(syntax-e$1 s_102) s_102)))"
"(if(pair? s_107)"
"(let-values(((lambda55_108)(let-values(((s_111)(car s_107))) s_111))"
"((formals56_109 body57_110)"
"(let-values(((s_112)(cdr s_107)))"
"(let-values(((s_113)"
"(if(syntax?$1 s_112)"
"(syntax-e$1 s_112)"
" s_112)))"
"(if(pair? s_113)"
"(let-values(((formals58_114)"
"(let-values(((s_116)(car s_113)))"
" s_116))"
"((body59_115)"
"(let-values(((s_117)(cdr s_113)))"
"(let-values(((s_118)"
"(if(syntax?$1 s_117)"
"(syntax-e$1 s_117)"
" s_117)))"
"(let-values(((flat-s_119)"
"(to-syntax-list.1"
" s_118)))"
"(if(not flat-s_119)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_103))"
"(if(null? flat-s_119)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_103))"
"(let-values()"
" flat-s_119))))))))"
"(values formals58_114 body59_115))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_103))))))"
"(values lambda55_108 formals56_109 body57_110))"
"                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_103)))))"
"(values #t lambda52_104 formals53_105 body54_106))))))"
"(let-values(((rebuild-s_98)"
"(let-values(((ctx60_120) ctx_80)((s61_121) s_79))"
"(keep-as-needed55.1 #f #f ctx60_120 s61_121))))"
"(let-values(((formals_99 body_100)"
"(lambda-clause-expander s_79 disarmed-s_81 formals53_84 body54_85 ctx_80 'lambda-renames)))"
"(if(expand-context-to-parsed? ctx_80)"
"(parsed-lambda5.1 rebuild-s_98 formals_99 body_100)"
"(let-values(((rebuild-s62_122) rebuild-s_98)"
"((temp63_123)(list*(get-lambda_78 ctx_80 lambda52_83) formals_99 body_100)))"
"(rebuild62.1 #f #f rebuild-s62_122 temp63_123)))))))))))"
"(call-with-values"
"(lambda()(add-core-form! 'lambda(make-expand-lambda(lambda(ctx_124 lam-id_125) lam-id_125))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'λ"
"(make-expand-lambda"
"(lambda(ctx_126 lam-id_127)"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_126))"
" 'lambda"
" lam-id_127"
" lam-id_127)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'case-lambda"
"(lambda(s_128 ctx_129)"
"(let-values((()"
"(begin"
"(let-values(((obs_162)(expand-context-observer ctx_129)))"
"(if obs_162"
"(let-values()(let-values()(call-expand-observe obs_162 'prim-case-lambda)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_130)(syntax-disarm$1 s_128)))"
"(let-values(((ok?_131 case-lambda64_132 formals65_133 body66_134)"
"(let-values(((s_163) disarmed-s_130))"
"(let-values(((orig-s_164) s_163))"
"(let-values(((case-lambda64_165 formals65_166 body66_167)"
"(let-values(((s_168)(if(syntax?$1 s_163)(syntax-e$1 s_163) s_163)))"
"(if(pair? s_168)"
"(let-values(((case-lambda67_169)"
"(let-values(((s_172)(car s_168))) s_172))"
"((formals68_170 body69_171)"
"(let-values(((s_173)(cdr s_168)))"
"(let-values(((s_174)"
"(if(syntax?$1 s_173)"
"(syntax-e$1 s_173)"
" s_173)))"
"(let-values(((flat-s_175)(to-syntax-list.1 s_174)))"
"(if(not flat-s_175)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_164))"
"(let-values()"
"(let-values(((formals_176 body_177)"
"(let-values(((lst_178)"
" flat-s_175))"
"(begin"
"(if(list? lst_178)"
"(void)"
"(let-values()"
"(in-list lst_178)))"
"((letrec-values(((for-loop_179)"
"(lambda(formals_180"
" body_181"
" lst_182)"
"(if(pair?"
" lst_182)"
"(let-values(((s_183)"
"(unsafe-car"
" lst_182)))"
"(let-values(((formals_184"
" body_185)"
"(let-values(((formals_186)"
" formals_180)"
"((body_187)"
" body_181))"
"(let-values(((formals_188"
" body_189)"
"(let-values()"
"(let-values(((formals76_190"
" body77_191)"
"(let-values()"
"(let-values(((s_192)"
"(if(syntax?$1"
" s_183)"
"(syntax-e$1"
" s_183)"
" s_183)))"
"(if(pair?"
" s_192)"
"(let-values(((formals70_193)"
"(let-values(((s_195)"
"(car"
" s_192)))"
" s_195))"
"((body71_194)"
"(let-values(((s_196)"
"(cdr"
" s_192)))"
"(let-values(((s_197)"
"(if(syntax?$1"
" s_196)"
"(syntax-e$1"
" s_196)"
" s_196)))"
"(let-values(((flat-s_198)"
"(to-syntax-list.1"
" s_197)))"
"(if(not"
" flat-s_198)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"bad syntax\""
" orig-s_164))"
"(if(null?"
" flat-s_198)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"bad syntax\""
" orig-s_164))"
"(let-values()"
" flat-s_198))))))))"
"(values"
" formals70_193"
" body71_194))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                      \"bad syntax\""
" orig-s_164))))))"
"(values"
"(cons"
" formals76_190"
" formals_186)"
"(cons"
" body77_191"
" body_187))))))"
"(values"
" formals_188"
" body_189)))))"
"(for-loop_179"
" formals_184"
" body_185"
"(unsafe-cdr"
" lst_182))))"
"(values"
" formals_180"
" body_181)))))"
" for-loop_179)"
" null"
" null"
" lst_178)))))"
"(values"
"(alt-reverse formals_176)"
"(alt-reverse body_177))))))))))"
"(values case-lambda67_169 formals68_170 body69_171))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_164)))))"
"(values #t case-lambda64_165 formals65_166 body66_167))))))"
"(let-values(((ok?_147 case-lambda72_148 clause73_149)"
"(let-values(((s_199) disarmed-s_130))"
"(let-values(((orig-s_200) s_199))"
"(let-values(((case-lambda72_201 clause73_202)"
"(let-values(((s_203)(if(syntax?$1 s_199)(syntax-e$1 s_199) s_199)))"
"(if(pair? s_203)"
"(let-values(((case-lambda74_204)"
"(let-values(((s_206)(car s_203))) s_206))"
"((clause75_205)"
"(let-values(((s_207)(cdr s_203)))"
"(let-values(((s_208)"
"(if(syntax?$1 s_207)"
"(syntax-e$1 s_207)"
" s_207)))"
"(let-values(((flat-s_209)(to-syntax-list.1 s_208)))"
"(if(not flat-s_209)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_200))"
"(let-values() flat-s_209)))))))"
"(values case-lambda74_204 clause75_205))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_200)))))"
"(values #t case-lambda72_201 clause73_202))))))"
"(let-values(((rebuild-s_160)"
"(let-values(((ctx78_210) ctx_129)((s79_211) s_128))"
"(keep-as-needed55.1 #f #f ctx78_210 s79_211))))"
"(let-values(((clauses_161)"
"((letrec-values(((for-loop/head_212)"
"(lambda(formalss80_213 bodys82_214 clauses84_215)"
"(if(let-values(((or-part_216)(null? formalss80_213)))"
"(if or-part_216"
" or-part_216"
"(let-values(((or-part_217)(null? bodys82_214)))"
"(if or-part_217 or-part_217(null? clauses84_215)))))"
"(let-values() null)"
"(let-values()"
"(let-values(((formals-rest81_218)(cdr formalss80_213))"
"((body-rest83_219)(cdr bodys82_214))"
"((clause-rest85_220)(cdr clauses84_215))"
"((formals_221)(car formalss80_213))"
"((body_222)(car bodys82_214))"
"((clause_223)(car clauses84_215)))"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_227)"
"(expand-context-observer"
" ctx_129)))"
"(if obs_227"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_227"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((rebuild-clause_224)"
"(let-values(((ctx86_228) ctx_129)"
"((clause87_229) clause_223))"
"(keep-as-needed55.1"
" #f"
" #f"
" ctx86_228"
" clause87_229))))"
"(let-values(((exp-formals_225 exp-body_226)"
"(lambda-clause-expander"
" s_128"
" disarmed-s_130"
" formals_221"
" body_222"
" ctx_129"
" 'case-lambda-renames)))"
"(if(expand-context-to-parsed? ctx_129)"
"(list exp-formals_225 exp-body_226)"
"(let-values(((rebuild-clause88_230)"
" rebuild-clause_224)"
"((temp89_231)"
"(list* exp-formals_225 exp-body_226)))"
"(rebuild62.1"
" #f"
" #f"
" rebuild-clause88_230"
" temp89_231)))))))"
"(for-loop/head_212"
" formals-rest81_218"
" body-rest83_219"
" clause-rest85_220))))))))"
" for-loop/head_212)"
" formals65_133"
" body66_134"
" clause73_149)))"
"(if(expand-context-to-parsed? ctx_129)"
"(parsed-case-lambda6.1 rebuild-s_160 clauses_161)"
"(let-values(((rebuild-s90_232) rebuild-s_160)"
"((temp91_233)(list* case-lambda64_132 clauses_161)))"
"(rebuild62.1 #f #f rebuild-s90_232 temp91_233))))))))))))"
" print-values)"
"(define-values"
"(parse-and-flatten-formals)"
"(lambda(all-formals_234 sc_235 s_236)"
"((letrec-values(((loop_237)"
"(lambda(formals_238)"
"(if(identifier? formals_238)"
"(let-values()(list(add-scope formals_238 sc_235)))"
"(if(syntax?$1 formals_238)"
"(let-values()"
"(let-values(((p_239)(syntax-e$1 formals_238)))"
"(if(pair? p_239)"
"(let-values()(loop_237 p_239))"
"(if(null? p_239)"
"(let-values() null)"
"                                    (let-values () (raise-syntax-error$1 #f \"not an identifier\" s_236 p_239))))))"
"(if(pair? formals_238)"
"(let-values()"
"(begin"
"(if(identifier?(car formals_238))"
"(void)"
"(let-values()"
"                                      (raise-syntax-error$1 #f \"not an identifier\" s_236 (car formals_238))))"
"(cons(add-scope(car formals_238) sc_235)(loop_237(cdr formals_238)))))"
"(if(null? formals_238)"
"(let-values() null)"
"(let-values()"
"                                  (raise-syntax-error$1 \"bad argument sequence\" s_236 all-formals_234)))))))))"
" loop_237)"
" all-formals_234)))"
"(define-values"
"(unflatten-like-formals)"
"(lambda(keys_240 formals_241)"
"((letrec-values(((loop_242)"
"(lambda(keys_243 formals_244)"
"(if(null? formals_244)"
"(let-values() null)"
"(if(pair? formals_244)"
"(let-values()(cons(car keys_243)(loop_242(cdr keys_243)(cdr formals_244))))"
"(if(syntax?$1 formals_244)"
"(let-values()(loop_242 keys_243(syntax-e$1 formals_244)))"
"(let-values()(car keys_243))))))))"
" loop_242)"
" keys_240"
" formals_241)))"
"(define-values"
"(make-let-values-form11.1)"
"(lambda(log-tag1_247"
" rec?3_248"
" rec?8_249"
" renames-log-tag5_250"
" renames-log-tag10_251"
" split-by-reference?4_252"
" split-by-reference?9_253"
" syntaxes?2_254"
" syntaxes?7_255)"
"(let-values(((log-tag_256) log-tag1_247))"
"(let-values(((syntaxes?_257)(if syntaxes?7_255 syntaxes?2_254 #f)))"
"(let-values(((rec?_258)(if rec?8_249 rec?3_248 #f)))"
"(let-values(((split-by-reference?_259)(if split-by-reference?9_253 split-by-reference?4_252 #f)))"
"(let-values(((renames-log-tag_260)(if renames-log-tag10_251 renames-log-tag5_250 'let-renames)))"
"(let-values()"
"(lambda(s_261 ctx_262)"
"(let-values((()"
"(begin"
"(let-values(((obs_328)(expand-context-observer ctx_262)))"
"(if obs_328"
"(let-values()(let-values()(call-expand-observe obs_328 log-tag_256)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_263)(syntax-disarm$1 s_261)))"
"(let-values(((ok?_264"
" letrec-syntaxes+values92_265"
" id:trans93_266"
" trans-rhs94_267"
" id:val95_268"
" val-rhs96_269"
" body97_270)"
"(let-values(((s_329) disarmed-s_263))"
"(if(if syntaxes?_257 #t #f)"
"(let-values(((orig-s_330) s_329))"
"(let-values(((letrec-syntaxes+values92_331"
" id:trans93_332"
" trans-rhs94_333"
" id:val95_334"
" val-rhs96_335"
" body97_336)"
"(let-values(((s_337)"
"(if(syntax?$1 s_329)(syntax-e$1 s_329) s_329)))"
"(if(pair? s_337)"
"(let-values(((letrec-syntaxes+values98_338)"
"(let-values(((s_344)(car s_337))) s_344))"
"((id:trans99_339"
" trans-rhs100_340"
" id:val101_341"
" val-rhs102_342"
" body103_343)"
"(let-values(((s_345)(cdr s_337)))"
"(let-values(((s_346)"
"(if(syntax?$1 s_345)"
"(syntax-e$1 s_345)"
" s_345)))"
"(if(pair? s_346)"
"(let-values(((id:trans104_347"
" trans-rhs105_348)"
"(let-values(((s_352)"
"(car"
" s_346)))"
"(let-values(((s_353)"
"(if(syntax?$1"
" s_352)"
"(syntax-e$1"
" s_352)"
" s_352)))"
"(let-values(((flat-s_354)"
"(to-syntax-list.1"
" s_353)))"
"(if(not flat-s_354)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_330))"
"(let-values()"
"(let-values(((id:trans_355"
" trans-rhs_356)"
"(let-values(((lst_357)"
" flat-s_354))"
"(begin"
"(if(list?"
" lst_357)"
"(void)"
"(let-values()"
"(in-list"
" lst_357)))"
"((letrec-values(((for-loop_358)"
"(lambda(id:trans_359"
" trans-rhs_360"
" lst_361)"
"(if(pair?"
" lst_361)"
"(let-values(((s_362)"
"(unsafe-car"
" lst_361)))"
"(let-values(((id:trans_363"
" trans-rhs_364)"
"(let-values(((id:trans_365)"
" id:trans_359)"
"((trans-rhs_366)"
" trans-rhs_360))"
"(let-values(((id:trans_367"
" trans-rhs_368)"
"(let-values()"
"(let-values(((id:trans135_369"
" trans-rhs136_370)"
"(let-values()"
"(let-values(((s_371)"
"(if(syntax?$1"
" s_362)"
"(syntax-e$1"
" s_362)"
" s_362)))"
"(if(pair?"
" s_371)"
"(let-values(((id:trans109_372)"
"(let-values(((s_374)"
"(car"
" s_371)))"
"(let-values(((s_375)"
"(if(syntax?$1"
" s_374)"
"(syntax-e$1"
" s_374)"
" s_374)))"
"(let-values(((flat-s_376)"
"(to-syntax-list.1"
" s_375)))"
"(if(not"
" flat-s_376)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_330))"
"(let-values()"
"(let-values(((id:trans_377)"
"(let-values(((lst_378)"
" flat-s_376))"
"(begin"
"(if(list?"
" lst_378)"
"(void)"
"(let-values()"
"(in-list"
" lst_378)))"
"((letrec-values(((for-loop_379)"
"(lambda(id:trans_380"
" lst_381)"
"(if(pair?"
" lst_381)"
"(let-values(((s_382)"
"(unsafe-car"
" lst_381)))"
"(let-values(((id:trans_383)"
"(let-values(((id:trans_384)"
" id:trans_380))"
"(let-values(((id:trans_385)"
"(let-values()"
"(let-values(((id:trans137_386)"
"(let-values()"
"(if(let-values(((or-part_387)"
"(if(syntax?$1"
" s_382)"
"(symbol?"
"(syntax-e$1"
" s_382))"
" #f)))"
"(if or-part_387"
" or-part_387"
"(symbol?"
" s_382)))"
" s_382"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_330"
" s_382)))))"
"(cons"
" id:trans137_386"
" id:trans_384)))))"
"(values"
" id:trans_385)))))"
"(for-loop_379"
" id:trans_383"
"(unsafe-cdr"
" lst_381))))"
" id:trans_380))))"
" for-loop_379)"
" null"
" lst_378)))))"
"(alt-reverse"
" id:trans_377))))))))"
"((trans-rhs110_373)"
"(let-values(((s_388)"
"(cdr"
" s_371)))"
"(let-values(((s_389)"
"(if(syntax?$1"
" s_388)"
"(syntax-e$1"
" s_388)"
" s_388)))"
"(if(pair?"
" s_389)"
"(let-values(((trans-rhs111_390)"
"(let-values(((s_391)"
"(car"
" s_389)))"
" s_391))"
"(()"
"(let-values(((s_392)"
"(cdr"
" s_389)))"
"(let-values(((s_393)"
"(if(syntax?$1"
" s_392)"
"(syntax-e$1"
" s_392)"
" s_392)))"
"(if(null?"
" s_393)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_330))))))"
"(values"
" trans-rhs111_390))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_330))))))"
"(values"
" id:trans109_372"
" trans-rhs110_373))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_330))))))"
"(values"
"(cons"
" id:trans135_369"
" id:trans_365)"
"(cons"
" trans-rhs136_370"
" trans-rhs_366))))))"
"(values"
" id:trans_367"
" trans-rhs_368)))))"
"(for-loop_358"
" id:trans_363"
" trans-rhs_364"
"(unsafe-cdr"
" lst_361))))"
"(values"
" id:trans_359"
" trans-rhs_360)))))"
" for-loop_358)"
" null"
" null"
" lst_357)))))"
"(values"
"(alt-reverse"
" id:trans_355)"
"(alt-reverse"
" trans-rhs_356)))))))))"
"((id:val106_349"
" val-rhs107_350"
" body108_351)"
"(let-values(((s_394)"
"(cdr"
" s_346)))"
"(let-values(((s_395)"
"(if(syntax?$1"
" s_394)"
"(syntax-e$1"
" s_394)"
" s_394)))"
"(if(pair? s_395)"
"(let-values(((id:val112_396"
" val-rhs113_397)"
"(let-values(((s_399)"
"(car"
" s_395)))"
"(let-values(((s_400)"
"(if(syntax?$1"
" s_399)"
"(syntax-e$1"
" s_399)"
" s_399)))"
"(let-values(((flat-s_401)"
"(to-syntax-list.1"
" s_400)))"
"(if(not"
" flat-s_401)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_330))"
"(let-values()"
"(let-values(((id:val_402"
" val-rhs_403)"
"(let-values(((lst_404)"
" flat-s_401))"
"(begin"
"(if(list?"
" lst_404)"
"(void)"
"(let-values()"
"(in-list"
" lst_404)))"
"((letrec-values(((for-loop_405)"
"(lambda(id:val_406"
" val-rhs_407"
" lst_408)"
"(if(pair?"
" lst_408)"
"(let-values(((s_409)"
"(unsafe-car"
" lst_408)))"
"(let-values(((id:val_410"
" val-rhs_411)"
"(let-values(((id:val_412)"
" id:val_406)"
"((val-rhs_413)"
" val-rhs_407))"
"(let-values(((id:val_414"
" val-rhs_415)"
"(let-values()"
"(let-values(((id:val138_416"
" val-rhs139_417)"
"(let-values()"
"(let-values(((s_418)"
"(if(syntax?$1"
" s_409)"
"(syntax-e$1"
" s_409)"
" s_409)))"
"(if(pair?"
" s_418)"
"(let-values(((id:val115_419)"
"(let-values(((s_421)"
"(car"
" s_418)))"
"(let-values(((s_422)"
"(if(syntax?$1"
" s_421)"
"(syntax-e$1"
" s_421)"
" s_421)))"
"(let-values(((flat-s_423)"
"(to-syntax-list.1"
" s_422)))"
"(if(not"
" flat-s_423)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_330))"
"(let-values()"
"(let-values(((id:val_424)"
"(let-values(((lst_425)"
" flat-s_423))"
"(begin"
"(if(list?"
" lst_425)"
"(void)"
"(let-values()"
"(in-list"
" lst_425)))"
"((letrec-values(((for-loop_426)"
"(lambda(id:val_427"
" lst_428)"
"(if(pair?"
" lst_428)"
"(let-values(((s_429)"
"(unsafe-car"
" lst_428)))"
"(let-values(((id:val_430)"
"(let-values(((id:val_431)"
" id:val_427))"
"(let-values(((id:val_432)"
"(let-values()"
"(let-values(((id:val140_433)"
"(let-values()"
"(if(let-values(((or-part_434)"
"(if(syntax?$1"
" s_429)"
"(symbol?"
"(syntax-e$1"
" s_429))"
" #f)))"
"(if or-part_434"
" or-part_434"
"(symbol?"
" s_429)))"
" s_429"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_330"
" s_429)))))"
"(cons"
" id:val140_433"
" id:val_431)))))"
"(values"
" id:val_432)))))"
"(for-loop_426"
" id:val_430"
"(unsafe-cdr"
" lst_428))))"
" id:val_427))))"
" for-loop_426)"
" null"
" lst_425)))))"
"(alt-reverse"
" id:val_424))))))))"
"((val-rhs116_420)"
"(let-values(((s_435)"
"(cdr"
" s_418)))"
"(let-values(((s_436)"
"(if(syntax?$1"
" s_435)"
"(syntax-e$1"
" s_435)"
" s_435)))"
"(if(pair?"
" s_436)"
"(let-values(((val-rhs117_437)"
"(let-values(((s_438)"
"(car"
" s_436)))"
" s_438))"
"(()"
"(let-values(((s_439)"
"(cdr"
" s_436)))"
"(let-values(((s_440)"
"(if(syntax?$1"
" s_439)"
"(syntax-e$1"
" s_439)"
" s_439)))"
"(if(null?"
" s_440)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_330))))))"
"(values"
" val-rhs117_437))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_330))))))"
"(values"
" id:val115_419"
" val-rhs116_420))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_330))))))"
"(values"
"(cons"
" id:val138_416"
" id:val_412)"
"(cons"
" val-rhs139_417"
" val-rhs_413))))))"
"(values"
" id:val_414"
" val-rhs_415)))))"
"(for-loop_405"
" id:val_410"
" val-rhs_411"
"(unsafe-cdr"
" lst_408))))"
"(values"
" id:val_406"
" val-rhs_407)))))"
" for-loop_405)"
" null"
" null"
" lst_404)))))"
"(values"
"(alt-reverse"
" id:val_402)"
"(alt-reverse"
" val-rhs_403)))))))))"
"((body114_398)"
"(let-values(((s_441)"
"(cdr"
" s_395)))"
"(let-values(((s_442)"
"(if(syntax?$1"
" s_441)"
"(syntax-e$1"
" s_441)"
" s_441)))"
"(let-values(((flat-s_443)"
"(to-syntax-list.1"
" s_442)))"
"(if(not"
" flat-s_443)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_330))"
"(if(null?"
" flat-s_443)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_330))"
"(let-values()"
" flat-s_443))))))))"
"(values"
" id:val112_396"
" val-rhs113_397"
" body114_398))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_330))))))"
"(values"
" id:trans104_347"
" trans-rhs105_348"
" id:val106_349"
" val-rhs107_350"
" body108_351))"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_330))))))"
"(values"
" letrec-syntaxes+values98_338"
" id:trans99_339"
" trans-rhs100_340"
" id:val101_341"
" val-rhs102_342"
" body103_343))"
"                                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_330)))))"
"(values"
" #t"
" letrec-syntaxes+values92_331"
" id:trans93_332"
" trans-rhs94_333"
" id:val95_334"
" val-rhs96_335"
" body97_336)))"
"(values #f #f #f #f #f #f #f)))))"
"(let-values(((ok?_289 let-values118_290 id:val119_291 val-rhs120_292 body121_293)"
"(let-values(((s_444) disarmed-s_263))"
"(if(if(not syntaxes?_257) #t #f)"
"(let-values(((orig-s_445) s_444))"
"(let-values(((let-values118_446 id:val119_447 val-rhs120_448 body121_449)"
"(let-values(((s_450)"
"(if(syntax?$1 s_444)"
"(syntax-e$1 s_444)"
" s_444)))"
"(if(pair? s_450)"
"(let-values(((let-values122_451)"
"(let-values(((s_455)(car s_450))) s_455))"
"((id:val123_452 val-rhs124_453 body125_454)"
"(let-values(((s_456)(cdr s_450)))"
"(let-values(((s_457)"
"(if(syntax?$1 s_456)"
"(syntax-e$1 s_456)"
" s_456)))"
"(if(pair? s_457)"
"(let-values(((id:val126_458"
" val-rhs127_459)"
"(let-values(((s_461)"
"(car"
" s_457)))"
"(let-values(((s_462)"
"(if(syntax?$1"
" s_461)"
"(syntax-e$1"
" s_461)"
" s_461)))"
"(let-values(((flat-s_463)"
"(to-syntax-list.1"
" s_462)))"
"(if(not"
" flat-s_463)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_445))"
"(let-values()"
"(let-values(((id:val_464"
" val-rhs_465)"
"(let-values(((lst_466)"
" flat-s_463))"
"(begin"
"(if(list?"
" lst_466)"
"(void)"
"(let-values()"
"(in-list"
" lst_466)))"
"((letrec-values(((for-loop_467)"
"(lambda(id:val_468"
" val-rhs_469"
" lst_470)"
"(if(pair?"
" lst_470)"
"(let-values(((s_471)"
"(unsafe-car"
" lst_470)))"
"(let-values(((id:val_472"
" val-rhs_473)"
"(let-values(((id:val_474)"
" id:val_468)"
"((val-rhs_475)"
" val-rhs_469))"
"(let-values(((id:val_476"
" val-rhs_477)"
"(let-values()"
"(let-values(((id:val141_478"
" val-rhs142_479)"
"(let-values()"
"(let-values(((s_480)"
"(if(syntax?$1"
" s_471)"
"(syntax-e$1"
" s_471)"
" s_471)))"
"(if(pair?"
" s_480)"
"(let-values(((id:val129_481)"
"(let-values(((s_483)"
"(car"
" s_480)))"
"(let-values(((s_484)"
"(if(syntax?$1"
" s_483)"
"(syntax-e$1"
" s_483)"
" s_483)))"
"(let-values(((flat-s_485)"
"(to-syntax-list.1"
" s_484)))"
"(if(not"
" flat-s_485)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_445))"
"(let-values()"
"(let-values(((id:val_486)"
"(let-values(((lst_487)"
" flat-s_485))"
"(begin"
"(if(list?"
" lst_487)"
"(void)"
"(let-values()"
"(in-list"
" lst_487)))"
"((letrec-values(((for-loop_488)"
"(lambda(id:val_489"
" lst_490)"
"(if(pair?"
" lst_490)"
"(let-values(((s_491)"
"(unsafe-car"
" lst_490)))"
"(let-values(((id:val_492)"
"(let-values(((id:val_493)"
" id:val_489))"
"(let-values(((id:val_494)"
"(let-values()"
"(let-values(((id:val143_495)"
"(let-values()"
"(if(let-values(((or-part_496)"
"(if(syntax?$1"
" s_491)"
"(symbol?"
"(syntax-e$1"
" s_491))"
" #f)))"
"(if or-part_496"
" or-part_496"
"(symbol?"
" s_491)))"
" s_491"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_445"
" s_491)))))"
"(cons"
" id:val143_495"
" id:val_493)))))"
"(values"
" id:val_494)))))"
"(for-loop_488"
" id:val_492"
"(unsafe-cdr"
" lst_490))))"
" id:val_489))))"
" for-loop_488)"
" null"
" lst_487)))))"
"(alt-reverse"
" id:val_486))))))))"
"((val-rhs130_482)"
"(let-values(((s_497)"
"(cdr"
" s_480)))"
"(let-values(((s_498)"
"(if(syntax?$1"
" s_497)"
"(syntax-e$1"
" s_497)"
" s_497)))"
"(if(pair?"
" s_498)"
"(let-values(((val-rhs131_499)"
"(let-values(((s_500)"
"(car"
" s_498)))"
" s_500))"
"(()"
"(let-values(((s_501)"
"(cdr"
" s_498)))"
"(let-values(((s_502)"
"(if(syntax?$1"
" s_501)"
"(syntax-e$1"
" s_501)"
" s_501)))"
"(if(null?"
" s_502)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_445))))))"
"(values"
" val-rhs131_499))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_445))))))"
"(values"
" id:val129_481"
" val-rhs130_482))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_445))))))"
"(values"
"(cons"
" id:val141_478"
" id:val_474)"
"(cons"
" val-rhs142_479"
" val-rhs_475))))))"
"(values"
" id:val_476"
" val-rhs_477)))))"
"(for-loop_467"
" id:val_472"
" val-rhs_473"
"(unsafe-cdr"
" lst_470))))"
"(values"
" id:val_468"
" val-rhs_469)))))"
" for-loop_467)"
" null"
" null"
" lst_466)))))"
"(values"
"(alt-reverse"
" id:val_464)"
"(alt-reverse"
" val-rhs_465)))))))))"
"((body128_460)"
"(let-values(((s_503)"
"(cdr"
" s_457)))"
"(let-values(((s_504)"
"(if(syntax?$1"
" s_503)"
"(syntax-e$1"
" s_503)"
" s_503)))"
"(let-values(((flat-s_505)"
"(to-syntax-list.1"
" s_504)))"
"(if(not"
" flat-s_505)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_445))"
"(if(null?"
" flat-s_505)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_445))"
"(let-values()"
" flat-s_505))))))))"
"(values"
" id:val126_458"
" val-rhs127_459"
" body128_460))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_445))))))"
"(values"
" let-values122_451"
" id:val123_452"
" val-rhs124_453"
" body125_454))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_445)))))"
"(values #t let-values118_446 id:val119_447 val-rhs120_448 body121_449)))"
"(values #f #f #f #f #f)))))"
"(let-values(((sc_308)(new-scope 'local)))"
"(let-values(((phase_309)(expand-context-phase ctx_262)))"
"(let-values(((frame-id_310)(if syntaxes?_257(make-reference-record) #f)))"
"(let-values(((trans-idss_311)"
"(alt-reverse"
"(let-values(((lst_506)(if syntaxes?_257 id:trans93_266 null)))"
"(begin"
"(if(list? lst_506)(void)(let-values()(in-list lst_506)))"
"((letrec-values(((for-loop_507)"
"(lambda(fold-var_508 lst_509)"
"(if(pair? lst_509)"
"(let-values(((ids_510)(unsafe-car lst_509)))"
"(let-values(((fold-var_511)"
"(let-values(((fold-var_512)"
" fold-var_508))"
"(let-values(((fold-var_513)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_514)"
" ids_510))"
"(begin"
"(if(list?"
" lst_514)"
"(void)"
"(let-values()"
"(in-list"
" lst_514)))"
"((letrec-values(((for-loop_515)"
"(lambda(fold-var_516"
" lst_517)"
"(if(pair?"
" lst_517)"
"(let-values(((id_518)"
"(unsafe-car"
" lst_517)))"
"(let-values(((fold-var_519)"
"(let-values(((fold-var_520)"
" fold-var_516))"
"(let-values(((fold-var_521)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_518"
" sc_308))"
" fold-var_520))))"
"(values"
" fold-var_521)))))"
"(for-loop_515"
" fold-var_519"
"(unsafe-cdr"
" lst_517))))"
" fold-var_516))))"
" for-loop_515)"
" null"
" lst_514)))))"
" fold-var_512))))"
"(values fold-var_513)))))"
"(for-loop_507"
" fold-var_511"
"(unsafe-cdr lst_509))))"
" fold-var_508))))"
" for-loop_507)"
" null"
" lst_506))))))"
"(let-values(((val-idss_312)"
"(alt-reverse"
"(let-values(((lst_522)(if syntaxes?_257 id:val95_268 id:val119_291)))"
"(begin"
"(if(list? lst_522)(void)(let-values()(in-list lst_522)))"
"((letrec-values(((for-loop_523)"
"(lambda(fold-var_524 lst_525)"
"(if(pair? lst_525)"
"(let-values(((ids_526)"
"(unsafe-car lst_525)))"
"(let-values(((fold-var_527)"
"(let-values(((fold-var_528)"
" fold-var_524))"
"(let-values(((fold-var_529)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_530)"
" ids_526))"
"(begin"
"(if(list?"
" lst_530)"
"(void)"
"(let-values()"
"(in-list"
" lst_530)))"
"((letrec-values(((for-loop_531)"
"(lambda(fold-var_532"
" lst_533)"
"(if(pair?"
" lst_533)"
"(let-values(((id_534)"
"(unsafe-car"
" lst_533)))"
"(let-values(((fold-var_535)"
"(let-values(((fold-var_536)"
" fold-var_532))"
"(let-values(((fold-var_537)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_534"
" sc_308))"
" fold-var_536))))"
"(values"
" fold-var_537)))))"
"(for-loop_531"
" fold-var_535"
"(unsafe-cdr"
" lst_533))))"
" fold-var_532))))"
" for-loop_531)"
" null"
" lst_530)))))"
" fold-var_528))))"
"(values fold-var_529)))))"
"(for-loop_523"
" fold-var_527"
"(unsafe-cdr lst_525))))"
" fold-var_524))))"
" for-loop_523)"
" null"
" lst_522))))))"
"(let-values((()"
"(begin"
"(let-values(((temp132_538)(list trans-idss_311 val-idss_312))"
"((phase133_539) phase_309)"
"((s134_540) s_261))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" temp132_538"
" phase133_539"
" s134_540"
" #f"
" #f))"
"(values))))"
"(let-values(((counter_313)(root-expand-context-counter ctx_262)))"
"(let-values(((trans-keyss_314)"
"(alt-reverse"
"(let-values(((lst_541) trans-idss_311))"
"(begin"
"(if(list? lst_541)(void)(let-values()(in-list lst_541)))"
"((letrec-values(((for-loop_542)"
"(lambda(fold-var_543 lst_544)"
"(if(pair? lst_544)"
"(let-values(((ids_545)"
"(unsafe-car lst_544)))"
"(let-values(((fold-var_546)"
"(let-values(((fold-var_547)"
" fold-var_543))"
"(let-values(((fold-var_548)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_549)"
" ids_545))"
"(begin"
"(if(list?"
" lst_549)"
"(void)"
"(let-values()"
"(in-list"
" lst_549)))"
"((letrec-values(((for-loop_550)"
"(lambda(fold-var_551"
" lst_552)"
"(if(pair?"
" lst_552)"
"(let-values(((id_553)"
"(unsafe-car"
" lst_552)))"
"(let-values(((fold-var_554)"
"(let-values(((fold-var_555)"
" fold-var_551))"
"(let-values(((fold-var_556)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id144_558)"
" id_553)"
"((phase145_559)"
" phase_309)"
"((counter146_560)"
" counter_313)"
"((frame-id147_561)"
" frame-id_310)"
"((s148_562)"
" s_261))"
"(add-local-binding!35.1"
" frame-id147_561"
" #t"
" s148_562"
" #t"
" id144_558"
" phase145_559"
" counter146_560)))"
" fold-var_555))))"
"(values"
" fold-var_556)))))"
"(for-loop_550"
" fold-var_554"
"(unsafe-cdr"
" lst_552))))"
" fold-var_551))))"
" for-loop_550)"
" null"
" lst_549)))))"
" fold-var_547))))"
"(values"
" fold-var_548)))))"
"(for-loop_542"
" fold-var_546"
"(unsafe-cdr lst_544))))"
" fold-var_543))))"
" for-loop_542)"
" null"
" lst_541))))))"
"(let-values(((val-keyss_315)"
"(alt-reverse"
"(let-values(((lst_563) val-idss_312))"
"(begin"
"(if(list? lst_563)"
"(void)"
"(let-values()(in-list lst_563)))"
"((letrec-values(((for-loop_564)"
"(lambda(fold-var_565 lst_566)"
"(if(pair? lst_566)"
"(let-values(((ids_567)"
"(unsafe-car lst_566)))"
"(let-values(((fold-var_568)"
"(let-values(((fold-var_569)"
" fold-var_565))"
"(let-values(((fold-var_570)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_571)"
" ids_567))"
"(begin"
"(if(list?"
" lst_571)"
"(void)"
"(let-values()"
"(in-list"
" lst_571)))"
"((letrec-values(((for-loop_572)"
"(lambda(fold-var_573"
" lst_574)"
"(if(pair?"
" lst_574)"
"(let-values(((id_575)"
"(unsafe-car"
" lst_574)))"
"(let-values(((fold-var_576)"
"(let-values(((fold-var_577)"
" fold-var_573))"
"(let-values(((fold-var_578)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id149_580)"
" id_575)"
"((phase150_581)"
" phase_309)"
"((counter151_582)"
" counter_313)"
"((frame-id152_583)"
" frame-id_310)"
"((s153_584)"
" s_261))"
"(add-local-binding!35.1"
" frame-id152_583"
" #t"
" s153_584"
" #t"
" id149_580"
" phase150_581"
" counter151_582)))"
" fold-var_577))))"
"(values"
" fold-var_578)))))"
"(for-loop_572"
" fold-var_576"
"(unsafe-cdr"
" lst_574))))"
" fold-var_573))))"
" for-loop_572)"
" null"
" lst_571)))))"
" fold-var_569))))"
"(values"
" fold-var_570)))))"
"(for-loop_564"
" fold-var_568"
"(unsafe-cdr lst_566))))"
" fold-var_565))))"
" for-loop_564)"
" null"
" lst_563))))))"
"(let-values(((bodys_316)"
"(alt-reverse"
"(let-values(((lst_585)"
"(if syntaxes?_257 body97_270 body121_293)))"
"(begin"
"(if(list? lst_585)"
"(void)"
"(let-values()(in-list lst_585)))"
"((letrec-values(((for-loop_586)"
"(lambda(fold-var_587 lst_588)"
"(if(pair? lst_588)"
"(let-values(((body_589)"
"(unsafe-car"
" lst_588)))"
"(let-values(((fold-var_590)"
"(let-values(((fold-var_591)"
" fold-var_587))"
"(let-values(((fold-var_592)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_589"
" sc_308))"
" fold-var_591))))"
"(values"
" fold-var_592)))))"
"(for-loop_586"
" fold-var_590"
"(unsafe-cdr lst_588))))"
" fold-var_587))))"
" for-loop_586)"
" null"
" lst_585))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_593)"
"(expand-context-observer ctx_262)))"
"(if obs_593"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_593"
" renames-log-tag_260"
" val-idss_312"
"(datum->syntax$1 #f bodys_316))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if syntaxes?_257"
"(let-values()"
"(begin"
"(let-values(((obs_594)"
"(expand-context-observer ctx_262)))"
"(if obs_594"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_594"
" 'prepare-env)))"
"(void)))"
"(let-values(((obs_595)"
"(expand-context-observer ctx_262)))"
"(if obs_595"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_595"
" 'enter-bind)))"
"(void)))))"
"(void))"
"(values))))"
"(let-values(((trans-valss_317)"
"(alt-reverse"
"(let-values(((lst_596)"
"(if syntaxes?_257 trans-rhs94_267 '()))"
"((lst_597) trans-idss_311))"
"(begin"
"(if(list? lst_596)"
"(void)"
"(let-values()(in-list lst_596)))"
"(if(list? lst_597)"
"(void)"
"(let-values()(in-list lst_597)))"
"((letrec-values(((for-loop_598)"
"(lambda(fold-var_599"
" lst_600"
" lst_601)"
"(if(if(pair? lst_600)"
"(pair? lst_601)"
" #f)"
"(let-values(((rhs_602)"
"(unsafe-car"
" lst_600))"
"((ids_603)"
"(unsafe-car"
" lst_601)))"
"(let-values(((fold-var_604)"
"(let-values(((fold-var_605)"
" fold-var_599))"
"(let-values(((fold-var_606)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_607)"
"(expand-context-observer"
" ctx_262)))"
"(if obs_607"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_607"
" 'next)))"
"(void)))"
"(eval-for-syntaxes-binding"
"(add-scope"
" rhs_602"
" sc_308)"
" ids_603"
" ctx_262)))"
" fold-var_605))))"
"(values"
" fold-var_606)))))"
"(for-loop_598"
" fold-var_604"
"(unsafe-cdr lst_600)"
"(unsafe-cdr lst_601))))"
" fold-var_599))))"
" for-loop_598)"
" null"
" lst_596"
" lst_597))))))"
"(let-values(((rec-val-env_318)"
"(let-values(((lst_608) val-keyss_315)"
"((lst_609) val-idss_312))"
"(begin"
"(if(list? lst_608)"
"(void)"
"(let-values()(in-list lst_608)))"
"(if(list? lst_609)"
"(void)"
"(let-values()(in-list lst_609)))"
"((letrec-values(((for-loop_610)"
"(lambda(env_611"
" lst_612"
" lst_613)"
"(if(if(pair? lst_612)"
"(pair? lst_613)"
" #f)"
"(let-values(((keys_614)"
"(unsafe-car"
" lst_612))"
"((ids_615)"
"(unsafe-car"
" lst_613)))"
"(let-values(((env_616)"
"(let-values(((env_617)"
" env_611))"
"(let-values(((lst_618)"
" keys_614)"
"((lst_619)"
" ids_615))"
"(begin"
"(if(list?"
" lst_618)"
"(void)"
"(let-values()"
"(in-list"
" lst_618)))"
"(if(list?"
" lst_619)"
"(void)"
"(let-values()"
"(in-list"
" lst_619)))"
"((letrec-values(((for-loop_620)"
"(lambda(env_621"
" lst_622"
" lst_623)"
"(if(if(pair?"
" lst_622)"
"(pair?"
" lst_623)"
" #f)"
"(let-values(((key_624)"
"(unsafe-car"
" lst_622))"
"((id_625)"
"(unsafe-car"
" lst_623)))"
"(let-values(((env_626)"
"(let-values(((env_627)"
" env_621))"
"(let-values(((env_628)"
"(let-values()"
"(env-extend"
" env_627"
" key_624"
"(local-variable1.1"
" id_625)))))"
"(values"
" env_628)))))"
"(for-loop_620"
" env_626"
"(unsafe-cdr"
" lst_622)"
"(unsafe-cdr"
" lst_623))))"
" env_621))))"
" for-loop_620)"
" env_617"
" lst_618"
" lst_619))))))"
"(for-loop_610"
" env_616"
"(unsafe-cdr lst_612)"
"(unsafe-cdr lst_613))))"
" env_611))))"
" for-loop_610)"
"(expand-context-env ctx_262)"
" lst_608"
" lst_609)))))"
"(let-values(((rec-env_319)"
"(let-values(((lst_629) trans-keyss_314)"
"((lst_630) trans-valss_317)"
"((lst_631) trans-idss_311))"
"(begin"
"(if(list? lst_629)"
"(void)"
"(let-values()(in-list lst_629)))"
"(if(list? lst_630)"
"(void)"
"(let-values()(in-list lst_630)))"
"(if(list? lst_631)"
"(void)"
"(let-values()(in-list lst_631)))"
"((letrec-values(((for-loop_632)"
"(lambda(env_633"
" lst_634"
" lst_635"
" lst_636)"
"(if(if(pair? lst_634)"
"(if(pair? lst_635)"
"(pair? lst_636)"
" #f)"
" #f)"
"(let-values(((keys_637)"
"(unsafe-car"
" lst_634))"
"((vals_638)"
"(unsafe-car"
" lst_635))"
"((ids_639)"
"(unsafe-car"
" lst_636)))"
"(let-values(((env_640)"
"(let-values(((env_641)"
" env_633))"
"(let-values(((env_642)"
"(let-values()"
"(let-values(((lst_643)"
" keys_637)"
"((lst_644)"
" vals_638)"
"((lst_645)"
" ids_639))"
"(begin"
"(if(list?"
" lst_643)"
"(void)"
"(let-values()"
"(in-list"
" lst_643)))"
"(if(list?"
" lst_644)"
"(void)"
"(let-values()"
"(in-list"
" lst_644)))"
"(if(list?"
" lst_645)"
"(void)"
"(let-values()"
"(in-list"
" lst_645)))"
"((letrec-values(((for-loop_646)"
"(lambda(env_647"
" lst_648"
" lst_649"
" lst_650)"
"(if(if(pair?"
" lst_648)"
"(if(pair?"
" lst_649)"
"(pair?"
" lst_650)"
" #f)"
" #f)"
"(let-values(((key_651)"
"(unsafe-car"
" lst_648))"
"((val_652)"
"(unsafe-car"
" lst_649))"
"((id_653)"
"(unsafe-car"
" lst_650)))"
"(let-values(((env_654)"
"(let-values(((env_655)"
" env_647))"
"(let-values(((env_656)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_652"
" id_653"
" phase_309)"
"(env-extend"
" env_655"
" key_651"
" val_652)))))"
"(values"
" env_656)))))"
"(for-loop_646"
" env_654"
"(unsafe-cdr"
" lst_648)"
"(unsafe-cdr"
" lst_649)"
"(unsafe-cdr"
" lst_650))))"
" env_647))))"
" for-loop_646)"
" env_641"
" lst_643"
" lst_644"
" lst_645))))))"
"(values"
" env_642)))))"
"(for-loop_632"
" env_640"
"(unsafe-cdr lst_634)"
"(unsafe-cdr lst_635)"
"(unsafe-cdr"
" lst_636))))"
" env_633))))"
" for-loop_632)"
" rec-val-env_318"
" lst_629"
" lst_630"
" lst_631)))))"
"(let-values((()"
"(begin"
"(if syntaxes?_257"
"(let-values()"
"(let-values(((obs_657)"
"(expand-context-observer"
" ctx_262)))"
"(if obs_657"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_657"
" 'exit-bind)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((expr-ctx_320)(as-expression-context ctx_262)))"
"(let-values(((orig-rrs_321)"
"(expand-context-reference-records"
" expr-ctx_320)))"
"(let-values(((rec-ctx_322)"
"(let-values(((v_658) expr-ctx_320))"
"(let-values(((the-struct_659) v_658))"
"(if(expand-context/outer?"
" the-struct_659)"
"(let-values(((env154_660)"
" rec-env_319)"
"((scopes155_661)"
"(cons"
" sc_308"
"(expand-context-scopes"
" ctx_262)))"
"((reference-records156_662)"
"(if split-by-reference?_259"
"(cons"
" frame-id_310"
" orig-rrs_321)"
" orig-rrs_321))"
"((binding-layer157_663)"
"(increment-binding-layer"
"(cons"
" trans-idss_311"
" val-idss_312)"
" ctx_262"
" sc_308))"
"((inner158_664)"
"(root-expand-context/outer-inner"
" v_658)))"
"(expand-context/outer1.1"
" inner158_664"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_659)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_659)"
"(root-expand-context/outer-frame-id"
" the-struct_659)"
"(expand-context/outer-context"
" the-struct_659)"
" env154_660"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_659)"
" scopes155_661"
"(expand-context/outer-def-ctx-scopes"
" the-struct_659)"
" binding-layer157_663"
" reference-records156_662"
"(expand-context/outer-only-immediate?"
" the-struct_659)"
"(expand-context/outer-need-eventually-defined"
" the-struct_659)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_659)"
"(expand-context/outer-name"
" the-struct_659)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                   \"expand-context/outer?\""
" the-struct_659))))))"
"(let-values(((letrec-values-id_323)"
"(if(not"
"(expand-context-to-parsed? ctx_262))"
"(if syntaxes?_257"
"(core-id 'letrec-values phase_309)"
" let-values118_290)"
" #f)))"
"(let-values(((rebuild-s_324)"
"(let-values(((ctx159_665) ctx_262)"
"((s160_666) s_261))"
"(keep-as-needed55.1"
" #f"
" #f"
" ctx159_665"
" s160_666))))"
"(let-values(((val-name-idss_325)"
"(if(expand-context-to-parsed?"
" ctx_262)"
"(alt-reverse"
"(let-values(((lst_667)"
" val-idss_312))"
"(begin"
"(if(list? lst_667)"
"(void)"
"(let-values()"
"(in-list lst_667)))"
"((letrec-values(((for-loop_668)"
"(lambda(fold-var_669"
" lst_670)"
"(if(pair?"
" lst_670)"
"(let-values(((val-ids_671)"
"(unsafe-car"
" lst_670)))"
"(let-values(((fold-var_672)"
"(let-values(((fold-var_673)"
" fold-var_669))"
"(let-values(((fold-var_674)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_675)"
" val-ids_671))"
"(begin"
"(if(list?"
" lst_675)"
"(void)"
"(let-values()"
"(in-list"
" lst_675)))"
"((letrec-values(((for-loop_676)"
"(lambda(fold-var_677"
" lst_678)"
"(if(pair?"
" lst_678)"
"(let-values(((val-id_679)"
"(unsafe-car"
" lst_678)))"
"(let-values(((fold-var_680)"
"(let-values(((fold-var_681)"
" fold-var_677))"
"(let-values(((fold-var_682)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(syntax-e$1"
" val-id_679)"
" val-id_679"
" val-id_679))"
" fold-var_681))))"
"(values"
" fold-var_682)))))"
"(for-loop_676"
" fold-var_680"
"(unsafe-cdr"
" lst_678))))"
" fold-var_677))))"
" for-loop_676)"
" null"
" lst_675)))))"
" fold-var_673))))"
"(values"
" fold-var_674)))))"
"(for-loop_668"
" fold-var_672"
"(unsafe-cdr"
" lst_670))))"
" fold-var_669))))"
" for-loop_668)"
" null"
" lst_667))))"
" val-idss_312)))"
"(let-values(((get-body_326)"
"(lambda()"
"(let-values((()"
"(begin"
"(let-values(((obs_684)"
"(expand-context-observer"
" ctx_262)))"
"(if obs_684"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_684"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_683)"
"(let-values(((v_685)"
" rec-ctx_322))"
"(let-values(((the-struct_686)"
" v_685))"
"(if(expand-context/outer?"
" the-struct_686)"
"(let-values(((reference-records164_687)"
" orig-rrs_321)"
"((inner165_688)"
"(root-expand-context/outer-inner"
" v_685)))"
"(expand-context/outer1.1"
" inner165_688"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_686)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_686)"
"(root-expand-context/outer-frame-id"
" the-struct_686)"
"(expand-context/outer-context"
" the-struct_686)"
"(expand-context/outer-env"
" the-struct_686)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_686)"
"(expand-context/outer-scopes"
" the-struct_686)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_686)"
"(expand-context/outer-binding-layer"
" the-struct_686)"
" reference-records164_687"
"(expand-context/outer-only-immediate?"
" the-struct_686)"
"(expand-context/outer-need-eventually-defined"
" the-struct_686)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_686)"
"(expand-context/outer-name"
" the-struct_686)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                             \"expand-context/outer?\""
" the-struct_686))))))"
"(let-values(((bodys161_690)"
" bodys_316)"
"((temp162_691)"
"(let-values(((body-ctx166_694)"
" body-ctx_683)"
"((ctx167_695)"
" ctx_262))"
"(as-tail-context21.1"
" ctx167_695"
" body-ctx166_694)))"
"((rebuild-s163_692)"
" rebuild-s_324))"
"(expand-body7.1"
" rebuild-s163_692"
" #f"
" #f"
" bodys161_690"
" temp162_691)))))))"
"(let-values(((result-s_327)"
"(if(not split-by-reference?_259)"
"(let-values()"
"(let-values(((clauses_696)"
"((letrec-values(((for-loop/head_698)"
"(lambda(idss168_699"
" keyss170_700"
" rhss172_701)"
"(if(let-values(((or-part_702)"
"(null?"
" idss168_699)))"
"(if or-part_702"
" or-part_702"
"(let-values(((or-part_703)"
"(null?"
" keyss170_700)))"
"(if or-part_703"
" or-part_703"
"(null?"
" rhss172_701)))))"
"(let-values()"
" null)"
"(let-values()"
"(let-values(((ids-rest169_704)"
"(cdr"
" idss168_699))"
"((keys-rest171_705)"
"(cdr"
" keyss170_700))"
"((rhs-rest173_706)"
"(cdr"
" rhss172_701))"
"((ids_707)"
"(car"
" idss168_699))"
"((keys_708)"
"(car"
" keyss170_700))"
"((rhs_709)"
"(car"
" rhss172_701)))"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_711)"
"(expand-context-observer"
" ctx_262)))"
"(if obs_711"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_711"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-rhs_710)"
"(if rec?_258"
"(let-values(((temp174_712)"
"(add-scope"
" rhs_709"
" sc_308))"
"((temp175_713)"
"(as-named-context"
" rec-ctx_322"
" ids_707)))"
"(expand5.1"
" #f"
" #f"
" temp174_712"
" temp175_713))"
"(let-values(((rhs176_714)"
" rhs_709)"
"((temp177_715)"
"(as-named-context"
" expr-ctx_320"
" ids_707)))"
"(expand5.1"
" #f"
" #f"
" rhs176_714"
" temp177_715)))))"
"(if(expand-context-to-parsed?"
" ctx_262)"
"(list"
" keys_708"
" exp-rhs_710)"
"(list"
" ids_707"
" exp-rhs_710)))))"
"(for-loop/head_698"
" ids-rest169_704"
" keys-rest171_705"
" rhs-rest173_706))))))))"
" for-loop/head_698)"
" val-name-idss_325"
" val-keyss_315"
"(if syntaxes?_257"
" val-rhs96_269"
" val-rhs120_292))))"
"(let-values(((exp-body_697)"
"(get-body_326)))"
"(begin"
"(if frame-id_310"
"(let-values()"
"(reference-record-clear!"
" frame-id_310))"
"(void))"
"(if(expand-context-to-parsed?"
" ctx_262)"
"(if rec?_258"
"(parsed-letrec-values18.1"
" rebuild-s_324"
" val-name-idss_325"
" clauses_696"
" exp-body_697)"
"(parsed-let-values17.1"
" rebuild-s_324"
" val-name-idss_325"
" clauses_696"
" exp-body_697))"
"(let-values(((rebuild-s178_716)"
" rebuild-s_324)"
"((temp179_717)"
"(list*"
" letrec-values-id_323"
" clauses_696"
" exp-body_697)))"
"(rebuild62.1"
" #f"
" #f"
" rebuild-s178_716"
" temp179_717)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_719)"
"(expand-context-observer"
" ctx_262)))"
"(if obs_719"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_719"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_720)"
"(expand-context-observer"
" ctx_262)))"
"(if obs_720"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_720"
" 'letrec-values)))"
"(void)))"
"(values))))"
"(let-values(((val-rhss_718)"
"(alt-reverse"
"(let-values(((lst_721)"
"(if syntaxes?_257"
" val-rhs96_269"
" val-rhs120_292)))"
"(begin"
"(if(list?"
" lst_721)"
"(void)"
"(let-values()"
"(in-list"
" lst_721)))"
"((letrec-values(((for-loop_722)"
"(lambda(fold-var_723"
" lst_724)"
"(if(pair?"
" lst_724)"
"(let-values(((rhs_725)"
"(unsafe-car"
" lst_724)))"
"(let-values(((fold-var_726)"
"(let-values(((fold-var_727)"
" fold-var_723))"
"(let-values(((fold-var_728)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" rhs_725"
" sc_308))"
" fold-var_727))))"
"(values"
" fold-var_728)))))"
"(for-loop_722"
" fold-var_726"
"(unsafe-cdr"
" lst_724))))"
" fold-var_723))))"
" for-loop_722)"
" null"
" lst_721))))))"
"(let-values(((val-idss180_730)"
" val-idss_312)"
"((val-keyss181_731)"
" val-keyss_315)"
"((val-rhss182_732)"
" val-rhss_718)"
"((temp183_733)"
"(alt-reverse"
"(let-values(((lst_740)"
" val-idss_312))"
"(begin"
"(if(list?"
" lst_740)"
"(void)"
"(let-values()"
"(in-list"
" lst_740)))"
"((letrec-values(((for-loop_741)"
"(lambda(fold-var_742"
" lst_743)"
"(if(pair?"
" lst_743)"
"(let-values(((rhs_744)"
"(unsafe-car"
" lst_743)))"
"(let-values(((fold-var_745)"
"(let-values(((fold-var_746)"
" fold-var_742))"
"(let-values(((fold-var_747)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_746))))"
"(values"
" fold-var_747)))))"
"(for-loop_741"
" fold-var_745"
"(unsafe-cdr"
" lst_743))))"
" fold-var_742))))"
" for-loop_741)"
" null"
" lst_740)))))"
"((temp184_734)"
" #t)"
"((frame-id185_735)"
" frame-id_310)"
"((rec-ctx186_736)"
" rec-ctx_322)"
"((rebuild-s187_737)"
" rebuild-s_324)"
"((get-body188_738)"
" get-body_326)"
"((temp189_739)"
" #t))"
"(expand-and-split-bindings-by-reference45.1"
" rec-ctx186_736"
" frame-id185_735"
" get-body188_738"
" rebuild-s187_737"
" temp184_734"
" temp189_739"
" val-idss180_730"
" val-keyss181_731"
" val-rhss182_732"
" temp183_733)))))))))"
"(if(expand-context-to-parsed? ctx_262)"
" result-s_327"
"(attach-disappeared-transformer-bindings"
" result-s_327"
" trans-idss_311)))))))))))))))))))))))))))))))))))))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'let-values"
"(let-values(((temp190_772) 'prim-let-values))(make-let-values-form11.1 temp190_772 #f #f #f #f #f #f #f #f))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-values"
"(let-values(((temp191_774) #t)((temp192_775) 'prim-letrec-values))"
"(make-let-values-form11.1 temp192_775 temp191_774 #t #f #f #f #f #f #f))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-syntaxes+values"
"(let-values(((temp193_777) #t)"
"((temp194_778) #t)"
"((temp195_779) #t)"
"((temp196_780) 'prim-letrec-syntaxes+values)"
"((temp197_781) 'letrec-syntaxes-renames))"
"(make-let-values-form11.1 temp196_780 temp194_778 #t temp197_781 #t temp195_779 #t temp193_777 #t))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%stratified-body"
"(lambda(s_782 ctx_783)"
"(let-values((()"
"(begin"
"(let-values(((obs_800)(expand-context-observer ctx_783)))"
"(if obs_800"
"(let-values()(let-values()(call-expand-observe obs_800 'prim-#%stratified)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_784)(syntax-disarm$1 s_782)))"
"(let-values(((ok?_785 #%stratified-body198_786 body199_787)"
"(let-values(((s_801) disarmed-s_784))"
"(let-values(((orig-s_802) s_801))"
"(let-values(((#%stratified-body198_803 body199_804)"
"(let-values(((s_805)(if(syntax?$1 s_801)(syntax-e$1 s_801) s_801)))"
"(if(pair? s_805)"
"(let-values(((#%stratified-body200_806)"
"(let-values(((s_808)(car s_805))) s_808))"
"((body201_807)"
"(let-values(((s_809)(cdr s_805)))"
"(let-values(((s_810)"
"(if(syntax?$1 s_809)"
"(syntax-e$1 s_809)"
" s_809)))"
"(let-values(((flat-s_811)(to-syntax-list.1 s_810)))"
"(if(not flat-s_811)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_802))"
"(if(null? flat-s_811)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_802))"
"(let-values() flat-s_811))))))))"
"(values #%stratified-body200_806 body201_807))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_802)))))"
"(values #t #%stratified-body198_803 body199_804))))))"
"(let-values(((rebuild-s_798)"
"(let-values(((ctx202_812) ctx_783)((s203_813) s_782))"
"(keep-as-needed55.1 #f #f ctx202_812 s203_813))))"
"(let-values(((exp-body_799)"
"(let-values(((temp204_815) body199_787)"
"((ctx205_816) ctx_783)"
"((temp206_817) #t)"
"((rebuild-s207_818) rebuild-s_798))"
"(expand-body7.1 rebuild-s207_818 temp206_817 #t temp204_815 ctx205_816))))"
"(if(expand-context-to-parsed? ctx_783)"
"(parsed-begin12.1 rebuild-s_798 exp-body_799)"
"(let-values(((rebuild-s208_819) rebuild-s_798)"
"((temp209_820)(list*(core-id 'begin(expand-context-phase ctx_783)) exp-body_799)))"
"(rebuild62.1 #f #f rebuild-s208_819 temp209_820)))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%datum"
"(lambda(s_821 ctx_822)"
"(let-values((()"
"(begin"
"(let-values(((obs_839)(expand-context-observer ctx_822)))"
"(if obs_839"
"(let-values()(let-values()(call-expand-observe obs_839 'prim-#%datum)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_823)(syntax-disarm$1 s_821)))"
"(let-values(((ok?_824 #%datum210_825 datum211_826)"
"(let-values(((s_840) disarmed-s_823))"
"(let-values(((orig-s_841) s_840))"
"(let-values(((#%datum210_842 datum211_843)"
"(let-values(((s_844)(if(syntax?$1 s_840)(syntax-e$1 s_840) s_840)))"
"(if(pair? s_844)"
"(let-values(((#%datum212_845)"
"(let-values(((s_847)(car s_844))) s_847))"
"((datum213_846)(let-values(((s_848)(cdr s_844))) s_848)))"
"(values #%datum212_845 datum213_846))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_841)))))"
"(values #t #%datum210_842 datum211_843))))))"
"(let-values(((datum_837) datum211_826))"
"(let-values((()"
"(begin"
"(if(if(syntax?$1 datum_837)(keyword?(syntax-e$1 datum_837)) #f)"
"(let-values()"
"                                   (raise-syntax-error$1 '#%datum \"keyword misused as an expression\" #f datum_837))"
"(void))"
"(values))))"
"(let-values(((phase_838)(expand-context-phase ctx_822)))"
"(if(expand-context-to-parsed? ctx_822)"
"(parsed-quote14.1(keep-properties-only s_821)(syntax->datum$1 datum_837))"
"(let-values(((s214_849) s_821)((temp215_850)(list(core-id 'quote phase_838) datum_837)))"
"(rebuild62.1 #f #f s214_849 temp215_850))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%app"
"(lambda(s_851 ctx_852)"
"(let-values((()"
"(begin"
"(let-values(((obs_868)(expand-context-observer ctx_852)))"
"(if obs_868(let-values()(let-values()(call-expand-observe obs_868 'prim-#%app)))(void)))"
"(values))))"
"(let-values(((disarmed-s_853)(syntax-disarm$1 s_851)))"
"(let-values(((ok?_854 #%app216_855 e217_856)"
"(let-values(((s_869) disarmed-s_853))"
"(let-values(((orig-s_870) s_869))"
"(let-values(((#%app216_871 e217_872)"
"(let-values(((s_873)(if(syntax?$1 s_869)(syntax-e$1 s_869) s_869)))"
"(if(pair? s_873)"
"(let-values(((#%app218_874)(let-values(((s_876)(car s_873))) s_876))"
"((e219_875)"
"(let-values(((s_877)(cdr s_873)))"
"(let-values(((s_878)"
"(if(syntax?$1 s_877)"
"(syntax-e$1 s_877)"
" s_877)))"
"(let-values(((flat-s_879)(to-syntax-list.1 s_878)))"
"(if(not flat-s_879)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_870))"
"(let-values() flat-s_879)))))))"
"(values #%app218_874 e219_875))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_870)))))"
"(values #t #%app216_871 e217_872))))))"
"(let-values(((es_867) e217_856))"
"(if(null? es_867)"
"(let-values()"
"(let-values(((phase_880)(expand-context-phase ctx_852)))"
"(if(expand-context-to-parsed? ctx_852)"
"(parsed-quote14.1(keep-properties-only s_851) null)"
"(let-values(((s220_881) s_851)((temp221_882)(list(core-id 'quote phase_880) null)))"
"(rebuild62.1 #f #f s220_881 temp221_882)))))"
"(let-values()"
"(let-values(((rebuild-s_883)"
"(let-values(((ctx222_888) ctx_852)((s223_889) s_851))"
"(keep-as-needed55.1 #f #f ctx222_888 s223_889))))"
"(let-values(((prefixless_884)(cdr(syntax-e$1 disarmed-s_853))))"
"(let-values(((rebuild-prefixless_885)"
"(if(syntax?$1 prefixless_884)"
"(let-values(((ctx224_890) ctx_852)((prefixless225_891) prefixless_884))"
"(keep-as-needed55.1 #f #f ctx224_890 prefixless225_891))"
" prefixless_884)))"
"(let-values(((expr-ctx_886)(as-expression-context ctx_852)))"
"(let-values(((exp-es_887)"
"((letrec-values(((for-loop/head_892)"
"(lambda(es226_893)"
"(if(null? es226_893)"
"(let-values() null)"
"(let-values()"
"(let-values(((e-rest227_894)(cdr es226_893))"
"((e_895)(car es226_893)))"
"(cons"
"(let-values()"
"(let-values(((e228_896) e_895)"
"((expr-ctx229_897) expr-ctx_886))"
"(expand5.1 #f #f e228_896 expr-ctx229_897)))"
"(for-loop/head_892 e-rest227_894))))))))"
" for-loop/head_892)"
" es_867)))"
"(if(expand-context-to-parsed? ctx_852)"
"(parsed-app7.1"
"(if(syntax?$1 rebuild-prefixless_885) rebuild-prefixless_885 rebuild-s_883)"
" exp-es_887)"
"(let-values(((rebuild-s230_898) rebuild-s_883)"
"((temp231_899)"
"(cons"
" #%app216_855"
"(if(syntax?$1 rebuild-prefixless_885)"
"(let-values(((rebuild-prefixless232_900) rebuild-prefixless_885)"
"((exp-es233_901) exp-es_887))"
"(rebuild62.1 #f #f rebuild-prefixless232_900 exp-es233_901))"
" exp-es_887))))"
"(rebuild62.1 #f #f rebuild-s230_898 temp231_899)))))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote"
"(lambda(s_902 ctx_903)"
"(let-values((()"
"(begin"
"(let-values(((obs_917)(expand-context-observer ctx_903)))"
"(if obs_917(let-values()(let-values()(call-expand-observe obs_917 'prim-quote)))(void)))"
"(values))))"
"(let-values(((ok?_904 quote234_905 datum235_906)"
"(let-values(((s_918)(syntax-disarm$1 s_902)))"
"(let-values(((orig-s_919) s_918))"
"(let-values(((quote234_920 datum235_921)"
"(let-values(((s_922)(if(syntax?$1 s_918)(syntax-e$1 s_918) s_918)))"
"(if(pair? s_922)"
"(let-values(((quote236_923)(let-values(((s_925)(car s_922))) s_925))"
"((datum237_924)"
"(let-values(((s_926)(cdr s_922)))"
"(let-values(((s_927)"
"(if(syntax?$1 s_926)"
"(syntax-e$1 s_926)"
" s_926)))"
"(if(pair? s_927)"
"(let-values(((datum238_928)"
"(let-values(((s_929)(car s_927)))"
" s_929))"
"(()"
"(let-values(((s_930)(cdr s_927)))"
"(let-values(((s_931)"
"(if(syntax?$1 s_930)"
"(syntax-e$1 s_930)"
" s_930)))"
"(if(null? s_931)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_919))))))"
"(values datum238_928))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_919))))))"
"(values quote236_923 datum237_924))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_919)))))"
"(values #t quote234_920 datum235_921))))))"
"(if(expand-context-to-parsed? ctx_903)"
"(parsed-quote14.1(keep-properties-only s_902)(syntax->datum$1 datum235_906))"
" s_902))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote-syntax"
"(lambda(s_932 ctx_933)"
"(let-values((()"
"(begin"
"(let-values(((obs_961)(expand-context-observer ctx_933)))"
"(if obs_961"
"(let-values()(let-values()(call-expand-observe obs_961 'prim-quote-syntax)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_934)(syntax-disarm$1 s_932)))"
"(let-values(((ok?_935 quote-syntax239_936 datum240_937)"
"(let-values(((s_962) disarmed-s_934))"
"(if(let-values(((s_963)(if(syntax?$1 s_962)(syntax-e$1 s_962) s_962)))"
"(if(pair? s_963)"
"(if(let-values(((s_964)(car s_963))) #t)"
"(let-values(((s_965)(cdr s_963)))"
"(let-values(((s_966)(if(syntax?$1 s_965)(syntax-e$1 s_965) s_965)))"
"(if(pair? s_966)"
"(if(let-values(((s_967)(car s_966))) #t)"
"(let-values(((s_968)(cdr s_966)))"
"(let-values(((s_969)(if(syntax?$1 s_968)(syntax-e$1 s_968) s_968)))"
"(if(pair? s_969)"
"(if(let-values(((s_970)(car s_969)))"
"(let-values(((s_971)"
"(if(syntax?$1 s_970)(syntax-e$1 s_970) s_970)))"
"(eq? '#:local s_971)))"
"(let-values(((s_972)(cdr s_969)))"
"(let-values(((s_973)"
"(if(syntax?$1 s_972)(syntax-e$1 s_972) s_972)))"
"(null? s_973)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((quote-syntax239_975 datum240_976)"
"(let-values(((s_977)(if(syntax?$1 s_962)(syntax-e$1 s_962) s_962)))"
"(let-values(((quote-syntax241_978)"
"(let-values(((s_980)(car s_977))) s_980))"
"((datum242_979)"
"(let-values(((s_981)(cdr s_977)))"
"(let-values(((s_982)"
"(if(syntax?$1 s_981)"
"(syntax-e$1 s_981)"
" s_981)))"
"(let-values(((datum243_983)"
"(let-values(((s_984)(car s_982)))"
" s_984))"
"(()"
"(let-values(((s_985)(cdr s_982)))"
"(let-values(((s_986)"
"(if(syntax?$1 s_985)"
"(syntax-e$1 s_985)"
" s_985)))"
"(let-values((()"
"(let-values(((s_987)"
"(car"
" s_986)))"
"(let-values(((s_988)"
"(if(syntax?$1"
" s_987)"
"(syntax-e$1"
" s_987)"
" s_987)))"
"(values))))"
"(()"
"(let-values(((s_989)"
"(cdr"
" s_986)))"
"(let-values(((s_990)"
"(if(syntax?$1"
" s_989)"
"(syntax-e$1"
" s_989)"
" s_989)))"
"(values)))))"
"(values))))))"
"(values datum243_983))))))"
"(values quote-syntax241_978 datum242_979)))))"
"(values #t quote-syntax239_975 datum240_976)))"
"(values #f #f #f)))))"
"(let-values(((ok?_948 quote-syntax244_949 datum245_950)"
"(let-values(((s_991) disarmed-s_934))"
"(if(if(not ok?_935) #t #f)"
"(let-values(((orig-s_992) s_991))"
"(let-values(((quote-syntax244_993 datum245_994)"
"(let-values(((s_995)(if(syntax?$1 s_991)(syntax-e$1 s_991) s_991)))"
"(if(pair? s_995)"
"(let-values(((quote-syntax246_996)"
"(let-values(((s_998)(car s_995))) s_998))"
"((datum247_997)"
"(let-values(((s_999)(cdr s_995)))"
"(let-values(((s_1000)"
"(if(syntax?$1 s_999)"
"(syntax-e$1 s_999)"
" s_999)))"
"(if(pair? s_1000)"
"(let-values(((datum248_1001)"
"(let-values(((s_1002)"
"(car s_1000)))"
" s_1002))"
"(()"
"(let-values(((s_1003)"
"(cdr s_1000)))"
"(let-values(((s_1004)"
"(if(syntax?$1"
" s_1003)"
"(syntax-e$1"
" s_1003)"
" s_1003)))"
"(if(null? s_1004)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_992))))))"
"(values datum248_1001))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_992))))))"
"(values quote-syntax246_996 datum247_997))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_992)))))"
"(values #t quote-syntax244_993 datum245_994)))"
"(values #f #f #f)))))"
"(if ok?_935"
"(let-values()"
"(let-values((()"
"(begin"
"(reference-records-all-used!(expand-context-reference-records ctx_933))"
"(values))))"
"(let-values(((ok?_1005 _249_1006 _250_1007 kw251_1008)"
"(let-values(((s_1021) disarmed-s_934))"
"(let-values(((orig-s_1022) s_1021))"
"(let-values(((_249_1023 _250_1024 kw251_1025)"
"(let-values(((s_1026)"
"(if(syntax?$1 s_1021)(syntax-e$1 s_1021) s_1021)))"
"(if(pair? s_1026)"
"(let-values(((_252_1027)"
"(let-values(((s_1030)(car s_1026))) s_1030))"
"((_253_1028 kw254_1029)"
"(let-values(((s_1031)(cdr s_1026)))"
"(let-values(((s_1032)"
"(if(syntax?$1 s_1031)"
"(syntax-e$1 s_1031)"
" s_1031)))"
"(if(pair? s_1032)"
"(let-values(((_255_1033)"
"(let-values(((s_1035)"
"(car s_1032)))"
" s_1035))"
"((kw256_1034)"
"(let-values(((s_1036)"
"(cdr s_1032)))"
"(let-values(((s_1037)"
"(if(syntax?$1"
" s_1036)"
"(syntax-e$1"
" s_1036)"
" s_1036)))"
"(if(pair? s_1037)"
"(let-values(((kw257_1038)"
"(let-values(((s_1039)"
"(car"
" s_1037)))"
" s_1039))"
"(()"
"(let-values(((s_1040)"
"(cdr"
" s_1037)))"
"(let-values(((s_1041)"
"(if(syntax?$1"
" s_1040)"
"(syntax-e$1"
" s_1040)"
" s_1040)))"
"(if(null?"
" s_1041)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"bad syntax\""
" orig-s_1022))))))"
"(values kw257_1038))"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_1022))))))"
"(values _255_1033 kw256_1034))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_1022))))))"
"(values _252_1027 _253_1028 kw254_1029))"
"                                                         (raise-syntax-error$1 #f \"bad syntax\" orig-s_1022)))))"
"(values #t _249_1023 _250_1024 kw251_1025))))))"
"(if(expand-context-to-parsed? ctx_933)"
"(parsed-quote-syntax15.1(keep-properties-only s_932) datum240_937)"
"(let-values(((s258_1042) s_932)"
"((temp259_1043)(list quote-syntax239_936 datum240_937 kw251_1008)))"
"(rebuild62.1 #f #f s258_1042 temp259_1043))))))"
"(let-values()"
"(let-values(((datum-s_1044)(remove-scopes datum245_950(expand-context-scopes ctx_933))))"
"(if(expand-context-to-parsed? ctx_933)"
"(parsed-quote-syntax15.1(keep-properties-only s_932) datum-s_1044)"
"(let-values(((s260_1045) s_932)((temp261_1046)(list quote-syntax244_949 datum-s_1044)))"
"(rebuild62.1 #f #f s260_1045 temp261_1046)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'if"
"(lambda(s_1047 ctx_1048)"
"(let-values((()"
"(begin"
"(let-values(((obs_1075)(expand-context-observer ctx_1048)))"
"(if obs_1075(let-values()(let-values()(call-expand-observe obs_1075 'prim-if)))(void)))"
"(values))))"
"(let-values(((disarmed-s_1049)(syntax-disarm$1 s_1047)))"
"(let-values(((ok?_1050 if262_1051 tst263_1052 thn264_1053 els265_1054)"
"(let-values(((s_1076) disarmed-s_1049))"
"(let-values(((orig-s_1077) s_1076))"
"(let-values(((if262_1078 tst263_1079 thn264_1080 els265_1081)"
"(let-values(((s_1082)(if(syntax?$1 s_1076)(syntax-e$1 s_1076) s_1076)))"
"(if(pair? s_1082)"
"(let-values(((if266_1083)(let-values(((s_1087)(car s_1082))) s_1087))"
"((tst267_1084 thn268_1085 els269_1086)"
"(let-values(((s_1088)(cdr s_1082)))"
"(let-values(((s_1089)"
"(if(syntax?$1 s_1088)"
"(syntax-e$1 s_1088)"
" s_1088)))"
"(if(pair? s_1089)"
"(let-values(((tst270_1090)"
"(let-values(((s_1093)(car s_1089)))"
" s_1093))"
"((thn271_1091 els272_1092)"
"(let-values(((s_1094)(cdr s_1089)))"
"(let-values(((s_1095)"
"(if(syntax?$1 s_1094)"
"(syntax-e$1 s_1094)"
" s_1094)))"
"(if(pair? s_1095)"
"(let-values(((thn273_1096)"
"(let-values(((s_1098)"
"(car"
" s_1095)))"
" s_1098))"
"((els274_1097)"
"(let-values(((s_1099)"
"(cdr"
" s_1095)))"
"(let-values(((s_1100)"
"(if(syntax?$1"
" s_1099)"
"(syntax-e$1"
" s_1099)"
" s_1099)))"
"(if(pair?"
" s_1100)"
"(let-values(((els275_1101)"
"(let-values(((s_1102)"
"(car"
" s_1100)))"
" s_1102))"
"(()"
"(let-values(((s_1103)"
"(cdr"
" s_1100)))"
"(let-values(((s_1104)"
"(if(syntax?$1"
" s_1103)"
"(syntax-e$1"
" s_1103)"
" s_1103)))"
"(if(null?"
" s_1104)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1077))))))"
"(values"
" els275_1101))"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1077))))))"
"(values"
" thn273_1096"
" els274_1097))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1077))))))"
"(values tst270_1090 thn271_1091 els272_1092))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1077))))))"
"(values if266_1083 tst267_1084 thn268_1085 els269_1086))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1077)))))"
"(values #t if262_1078 tst263_1079 thn264_1080 els265_1081))))))"
"(let-values(((expr-ctx_1069)(as-expression-context ctx_1048)))"
"(let-values(((tail-ctx_1070)"
"(let-values(((expr-ctx276_1106) expr-ctx_1069)((ctx277_1107) ctx_1048))"
"(as-tail-context21.1 ctx277_1107 expr-ctx276_1106))))"
"(let-values(((rebuild-s_1071)"
"(let-values(((ctx278_1108) ctx_1048)((s279_1109) s_1047))"
"(keep-as-needed55.1 #f #f ctx278_1108 s279_1109))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1110)(expand-context-observer ctx_1048)))"
"(if obs_1110"
"(let-values()(let-values()(call-expand-observe obs_1110 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((exp-tst_1072)"
"(let-values(((temp280_1111) tst263_1052)((expr-ctx281_1112) expr-ctx_1069))"
"(expand5.1 #f #f temp280_1111 expr-ctx281_1112))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1113)(expand-context-observer ctx_1048)))"
"(if obs_1113"
"(let-values()(let-values()(call-expand-observe obs_1113 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-thn_1073)"
"(let-values(((temp282_1114) thn264_1053)((tail-ctx283_1115) tail-ctx_1070))"
"(expand5.1 #f #f temp282_1114 tail-ctx283_1115))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1116)(expand-context-observer ctx_1048)))"
"(if obs_1116"
"(let-values()(let-values()(call-expand-observe obs_1116 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-els_1074)"
"(let-values(((temp284_1117) els265_1054)((tail-ctx285_1118) tail-ctx_1070))"
"(expand5.1 #f #f temp284_1117 tail-ctx285_1118))))"
"(if(expand-context-to-parsed? ctx_1048)"
"(parsed-if8.1 rebuild-s_1071 exp-tst_1072 exp-thn_1073 exp-els_1074)"
"(let-values(((rebuild-s286_1119) rebuild-s_1071)"
"((temp287_1120)(list if262_1051 exp-tst_1072 exp-thn_1073 exp-els_1074)))"
"(rebuild62.1 #f #f rebuild-s286_1119 temp287_1120))))))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'with-continuation-mark"
"(lambda(s_1121 ctx_1122)"
"(let-values((()"
"(begin"
"(let-values(((obs_1148)(expand-context-observer ctx_1122)))"
"(if obs_1148"
"(let-values()(let-values()(call-expand-observe obs_1148 'prim-with-continuation-mark)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1123)(syntax-disarm$1 s_1121)))"
"(let-values(((ok?_1124 with-continuation-mark288_1125 key289_1126 val290_1127 body291_1128)"
"(let-values(((s_1149) disarmed-s_1123))"
"(let-values(((orig-s_1150) s_1149))"
"(let-values(((with-continuation-mark288_1151 key289_1152 val290_1153 body291_1154)"
"(let-values(((s_1155)(if(syntax?$1 s_1149)(syntax-e$1 s_1149) s_1149)))"
"(if(pair? s_1155)"
"(let-values(((with-continuation-mark292_1156)"
"(let-values(((s_1160)(car s_1155))) s_1160))"
"((key293_1157 val294_1158 body295_1159)"
"(let-values(((s_1161)(cdr s_1155)))"
"(let-values(((s_1162)"
"(if(syntax?$1 s_1161)"
"(syntax-e$1 s_1161)"
" s_1161)))"
"(if(pair? s_1162)"
"(let-values(((key296_1163)"
"(let-values(((s_1166)(car s_1162)))"
" s_1166))"
"((val297_1164 body298_1165)"
"(let-values(((s_1167)(cdr s_1162)))"
"(let-values(((s_1168)"
"(if(syntax?$1 s_1167)"
"(syntax-e$1 s_1167)"
" s_1167)))"
"(if(pair? s_1168)"
"(let-values(((val299_1169)"
"(let-values(((s_1171)"
"(car"
" s_1168)))"
" s_1171))"
"((body300_1170)"
"(let-values(((s_1172)"
"(cdr"
" s_1168)))"
"(let-values(((s_1173)"
"(if(syntax?$1"
" s_1172)"
"(syntax-e$1"
" s_1172)"
" s_1172)))"
"(if(pair?"
" s_1173)"
"(let-values(((body301_1174)"
"(let-values(((s_1175)"
"(car"
" s_1173)))"
" s_1175))"
"(()"
"(let-values(((s_1176)"
"(cdr"
" s_1173)))"
"(let-values(((s_1177)"
"(if(syntax?$1"
" s_1176)"
"(syntax-e$1"
" s_1176)"
" s_1176)))"
"(if(null?"
" s_1177)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1150))))))"
"(values"
" body301_1174))"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1150))))))"
"(values"
" val299_1169"
" body300_1170))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1150))))))"
"(values key296_1163 val297_1164 body298_1165))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1150))))))"
"(values"
" with-continuation-mark292_1156"
" key293_1157"
" val294_1158"
" body295_1159))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1150)))))"
"(values #t with-continuation-mark288_1151 key289_1152 val290_1153 body291_1154))))))"
"(let-values(((expr-ctx_1143)(as-expression-context ctx_1122)))"
"(let-values(((rebuild-s_1144)"
"(let-values(((ctx302_1178) ctx_1122)((s303_1179) s_1121))"
"(keep-as-needed55.1 #f #f ctx302_1178 s303_1179))))"
"(let-values(((exp-key_1145)"
"(let-values(((temp304_1180) key289_1126)((expr-ctx305_1181) expr-ctx_1143))"
"(expand5.1 #f #f temp304_1180 expr-ctx305_1181))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1182)(expand-context-observer ctx_1122)))"
"(if obs_1182"
"(let-values()(let-values()(call-expand-observe obs_1182 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-val_1146)"
"(let-values(((temp306_1183) val290_1127)((expr-ctx307_1184) expr-ctx_1143))"
"(expand5.1 #f #f temp306_1183 expr-ctx307_1184))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1185)(expand-context-observer ctx_1122)))"
"(if obs_1185"
"(let-values()(let-values()(call-expand-observe obs_1185 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_1147)"
"(let-values(((temp308_1186) body291_1128)"
"((temp309_1187)"
"(let-values(((expr-ctx310_1189) expr-ctx_1143)"
"((ctx311_1190) ctx_1122))"
"(as-tail-context21.1 ctx311_1190 expr-ctx310_1189))))"
"(expand5.1 #f #f temp308_1186 temp309_1187))))"
"(if(expand-context-to-parsed? ctx_1122)"
"(parsed-with-continuation-mark10.1 rebuild-s_1144 exp-key_1145 exp-val_1146 exp-body_1147)"
"(let-values(((rebuild-s312_1191) rebuild-s_1144)"
"((temp313_1192)"
"(list"
" with-continuation-mark288_1125"
" exp-key_1145"
" exp-val_1146"
" exp-body_1147)))"
"(rebuild62.1 #f #f rebuild-s312_1191 temp313_1192))))))))))))))))"
" print-values)"
"(define-values"
"(make-begin20.1)"
"(lambda(last-is-tail?15_1199 list-start-index14_1200 log-tag18_1201 parsed-begin19_1202)"
"(let-values(((log-tag_1203) log-tag18_1201))"
"(let-values(((parsed-begin_1204) parsed-begin19_1202))"
"(let-values(((list-start-index_1205) list-start-index14_1200))"
"(let-values(((last-is-tail?_1206) last-is-tail?15_1199))"
"(let-values()"
"(lambda(s_1207 ctx_1208)"
"(let-values((()"
"(begin"
"(let-values(((obs_1228)(expand-context-observer ctx_1208)))"
"(if obs_1228"
"(let-values()(let-values()(call-expand-observe obs_1228 log-tag_1203)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1209)(syntax-disarm$1 s_1207)))"
"(let-values(((ok?_1210 begin314_1211 e315_1212)"
"(let-values(((s_1229) disarmed-s_1209))"
"(let-values(((orig-s_1230) s_1229))"
"(let-values(((begin314_1231 e315_1232)"
"(let-values(((s_1233)"
"(if(syntax?$1 s_1229)(syntax-e$1 s_1229) s_1229)))"
"(if(pair? s_1233)"
"(let-values(((begin316_1234)"
"(let-values(((s_1236)(car s_1233))) s_1236))"
"((e317_1235)"
"(let-values(((s_1237)(cdr s_1233)))"
"(let-values(((s_1238)"
"(if(syntax?$1 s_1237)"
"(syntax-e$1 s_1237)"
" s_1237)))"
"(let-values(((flat-s_1239)"
"(to-syntax-list.1 s_1238)))"
"(if(not flat-s_1239)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_1230))"
"(if(null? flat-s_1239)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_1230))"
"(let-values() flat-s_1239))))))))"
"(values begin316_1234 e317_1235))"
"                                                        (raise-syntax-error$1 #f \"bad syntax\" orig-s_1230)))))"
"(values #t begin314_1231 e315_1232))))))"
"(let-values(((expr-ctx_1223)"
"(if last-is-tail?_1206"
"(as-begin-expression-context ctx_1208)"
"(as-expression-context ctx_1208))))"
"(let-values(((rebuild-s_1224)"
"(let-values(((ctx318_1240) ctx_1208)((s319_1241) s_1207))"
"(keep-as-needed55.1 #f #f ctx318_1240 s319_1241))))"
"(let-values(((es_1225) e315_1212))"
"(let-values(((last-i_1226)(sub1(length es_1225))))"
"(let-values(((exp-es_1227)"
"((letrec-values(((for-loop/head_1242)"
"(lambda(es320_1243 is322_1244)"
"(if(let-values(((or-part_1245)(null? es320_1243)))"
"(if or-part_1245 or-part_1245 #f))"
"(let-values() null)"
"(let-values()"
"(let-values(((e-rest321_1246)(cdr es320_1243))"
"((i-rest323_1247)(add1 is322_1244))"
"((e_1248)(car es320_1243))"
"((i_1249) is322_1244))"
"(cons"
"(let-values()"
"(begin"
"(if(= i_1249 list-start-index_1205)"
"(let-values()"
"(let-values(((obs_1250)"
"(expand-context-observer"
" ctx_1208)))"
"(if obs_1250"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1250"
" 'enter-list"
"(list-tail es_1225 i_1249))))"
"(void))))"
"(void))"
"(let-values(((obs_1251)"
"(expand-context-observer"
" ctx_1208)))"
"(if obs_1251"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1251"
" 'next)))"
"(void)))"
"(let-values(((e324_1252) e_1248)"
"((temp325_1253)"
"(if(if last-is-tail?_1206"
"(= i_1249 last-i_1226)"
" #f)"
"(let-values(((expr-ctx326_1255)"
" expr-ctx_1223)"
"((ctx327_1256)"
" ctx_1208))"
"(as-tail-context21.1"
" ctx327_1256"
" expr-ctx326_1255))"
" expr-ctx_1223)))"
"(expand5.1 #f #f e324_1252 temp325_1253))))"
"(for-loop/head_1242"
" e-rest321_1246"
" i-rest323_1247))))))))"
" for-loop/head_1242)"
" es_1225"
" 0)))"
"(begin"
"(if(if(= 1 list-start-index_1205)(null?(cdr es_1225)) #f)"
"(let-values()"
"(let-values(((obs_1257)(expand-context-observer ctx_1208)))"
"(if obs_1257"
"(let-values()"
"(let-values()(call-expand-observe obs_1257 'enter-list(cdr es_1225))))"
"(void))))"
"(void))"
"(let-values(((obs_1258)(expand-context-observer ctx_1208)))"
"(if obs_1258"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1258"
" 'exit-list"
"(list-tail exp-es_1227 list-start-index_1205))))"
"(void)))"
"(if(expand-context-to-parsed? ctx_1208)"
"(parsed-begin_1204 rebuild-s_1224 exp-es_1227)"
"(let-values(((rebuild-s328_1259) rebuild-s_1224)"
"((temp329_1260)(cons begin314_1211 exp-es_1227)))"
"(rebuild62.1 #f #f rebuild-s328_1259 temp329_1260))))))))))))))))))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin"
"(let-values(((nonempty-begin_1277)"
"(let-values(((temp330_1279) 'prim-begin0)"
"((parsed-begin331_1280) parsed-begin12.1)"
"((temp332_1281) 0)"
"((temp333_1282) #t))"
"(make-begin20.1 temp333_1282 temp332_1281 temp330_1279 parsed-begin331_1280))))"
"(lambda(s_1283 ctx_1284)"
"(let-values(((context_1285)(expand-context-context ctx_1284)))"
"(if(let-values(((or-part_1286)(eq? context_1285 'top-level)))"
"(if or-part_1286 or-part_1286(eq? context_1285 'module)))"
"(let-values()"
"(let-values(((disarmed-s_1287)(syntax-disarm$1 s_1283)))"
"(let-values(((ok?_1288 begin334_1289)"
"(let-values(((s_1298) disarmed-s_1287))"
"(if(let-values(((s_1299)(if(syntax?$1 s_1298)(syntax-e$1 s_1298) s_1298)))"
"(if(pair? s_1299)"
"(if(let-values(((s_1300)(car s_1299))) #t)"
"(let-values(((s_1301)(cdr s_1299)))"
"(let-values(((s_1302)(if(syntax?$1 s_1301)(syntax-e$1 s_1301) s_1301)))"
"(null? s_1302)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((begin334_1304)"
"(let-values(((s_1305)"
"(if(syntax?$1 s_1298)(syntax-e$1 s_1298) s_1298)))"
"(let-values(((begin335_1306)"
"(let-values(((s_1307)(car s_1305))) s_1307))"
"(()"
"(let-values(((s_1308)(cdr s_1305)))"
"(let-values(((s_1309)"
"(if(syntax?$1 s_1308)"
"(syntax-e$1 s_1308)"
" s_1308)))"
"(values)))))"
"(values begin335_1306)))))"
"(values #t begin334_1304)))"
"(values #f #f)))))"
"(if ok?_1288 s_1283(nonempty-begin_1277 s_1283 ctx_1284)))))"
"(let-values()(nonempty-begin_1277 s_1283 ctx_1284))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin0"
"(let-values(((temp336_1311) 'prim-begin0)"
"((parsed-begin0337_1312) parsed-begin013.1)"
"((temp338_1313) 1)"
"((temp339_1314) #f))"
"(make-begin20.1 temp339_1314 temp338_1313 temp336_1311 parsed-begin0337_1312))))"
" print-values)"
"(define-values"
"(register-eventual-variable!?)"
"(lambda(id_1315 ctx_1316)"
"(if(if(expand-context-need-eventually-defined ctx_1316)(>=(expand-context-phase ctx_1316) 1) #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(expand-context-need-eventually-defined ctx_1316)"
"(expand-context-phase ctx_1316)"
"(lambda(l_1317)(cons id_1315 l_1317))"
" null)"
" #t))"
"(let-values() #f))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%top"
"(let-values(((core344_1318)"
"(lambda(s342_1319 ctx343_1320 implicit-omitted?340_1321 implicit-omitted?341_1322)"
"(let-values(((s_1323) s342_1319))"
"(let-values(((ctx_1324) ctx343_1320))"
"(let-values(((implicit-omitted?_1325)"
"(if implicit-omitted?341_1322 implicit-omitted?340_1321 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1329)(expand-context-observer ctx_1324)))"
"(if obs_1329"
"(let-values()"
"(let-values()(call-expand-observe obs_1329 'prim-#%top)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1326)(syntax-disarm$1 s_1323)))"
"(let-values(((id_1327)"
"(if implicit-omitted?_1325"
"(let-values() s_1323)"
"(let-values()"
"(let-values(((ok?_1330 #%top346_1331 id347_1332)"
"(let-values(((s_1343) disarmed-s_1326))"
"(let-values(((orig-s_1344) s_1343))"
"(let-values(((#%top346_1345 id347_1346)"
"(let-values(((s_1347)"
"(if(syntax?$1 s_1343)"
"(syntax-e$1 s_1343)"
" s_1343)))"
"(if(pair? s_1347)"
"(let-values(((#%top348_1348)"
"(let-values(((s_1350)"
"(car"
" s_1347)))"
" s_1350))"
"((id349_1349)"
"(let-values(((s_1351)"
"(cdr"
" s_1347)))"
"(if(let-values(((or-part_1352)"
"(if(syntax?$1"
" s_1351)"
"(symbol?"
"(syntax-e$1"
" s_1351))"
" #f)))"
"(if or-part_1352"
" or-part_1352"
"(symbol?"
" s_1351)))"
" s_1351"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"not an identifier\""
" orig-s_1344"
" s_1351)))))"
"(values"
" #%top348_1348"
" id349_1349))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1344)))))"
"(values #t #%top346_1345 id347_1346))))))"
" id347_1332)))))"
"(let-values(((b_1328)"
"(let-values(((id350_1354) id_1327)"
"((temp351_1355)(expand-context-phase ctx_1324))"
"((temp352_1356) 'ambiguous))"
"(resolve+shift30.1"
" temp352_1356"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id350_1354"
" temp351_1355))))"
"(if(eq? b_1328 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1327 ctx_1324))"
"(if(if b_1328"
"(if(module-binding? b_1328)"
"(eq?"
"(module-binding-module b_1328)"
"(namespace-mpi(expand-context-namespace ctx_1324)))"
" #f)"
" #f)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1324)"
"(parsed-id2.1 id_1327 b_1328 #f)"
"(if(top-level-module-path-index?(module-binding-module b_1328))"
"(let-values() s_1323)"
"(let-values() id_1327))))"
"(if(register-eventual-variable!? id_1327 ctx_1324)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1324)"
"(parsed-id2.1 id_1327 b_1328 #f)"
" id_1327))"
"(let-values()"
"(if(not(expand-context-allow-unbound? ctx_1324))"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" id_1327"
" #f"
" null"
"(syntax-debug-info-string id_1327 ctx_1324)))"
"(let-values()"
"(let-values(((tl-id_1357)"
"(add-scope"
" id_1327"
"(root-expand-context-top-level-bind-scope ctx_1324))))"
"(let-values(((tl-b_1358)"
"(let-values(((tl-id353_1359) tl-id_1357)"
"((temp354_1360)"
"(expand-context-phase ctx_1324)))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" tl-id353_1359"
" temp354_1360))))"
"(if tl-b_1358"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1324)"
"(parsed-top-id4.1 tl-id_1357 tl-b_1358 #f)"
"(if implicit-omitted?_1325"
"(let-values() id_1327)"
"(let-values()"
"(let-values(((ok?_1361 #%top355_1362 id356_1363)"
"(let-values(((s_1374) disarmed-s_1326))"
"(let-values(((orig-s_1375) s_1374))"
"(let-values(((#%top355_1376"
" id356_1377)"
"(let-values(((s_1378)"
"(if(syntax?$1"
" s_1374)"
"(syntax-e$1"
" s_1374)"
" s_1374)))"
"(if(pair? s_1378)"
"(let-values(((#%top357_1379)"
"(let-values(((s_1381)"
"(car"
" s_1378)))"
" s_1381))"
"((id358_1380)"
"(let-values(((s_1382)"
"(cdr"
" s_1378)))"
"(if(let-values(((or-part_1383)"
"(if(syntax?$1"
" s_1382)"
"(symbol?"
"(syntax-e$1"
" s_1382))"
" #f)))"
"(if or-part_1383"
" or-part_1383"
"(symbol?"
" s_1382)))"
" s_1382"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"not an identifier\""
" orig-s_1375"
" s_1382)))))"
"(values"
" #%top357_1379"
" id358_1380))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1375)))))"
"(values"
" #t"
" #%top355_1376"
" id356_1377))))))"
"(let-values(((s359_1384) s_1323)"
"((temp360_1385)"
"(cons #%top355_1362 id_1327)))"
"(rebuild62.1 #f #f s359_1384 temp360_1385)))))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1324)"
"(parsed-top-id4.1 id_1327 b_1328 #f)"
" s_1323))))))))))))))))))))))"
"(case-lambda"
"((s_1386 ctx_1387)(core344_1318 s_1386 ctx_1387 #f #f))"
"((s_1388 ctx_1389 implicit-omitted?340_1390)(core344_1318 s_1388 ctx_1389 implicit-omitted?340_1390 #t))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'set!"
"(lambda(s_1391 ctx_1392)"
"(let-values((()"
"(begin"
"(let-values(((obs_1411)(expand-context-observer ctx_1392)))"
"(if obs_1411(let-values()(let-values()(call-expand-observe obs_1411 'prim-set!)))(void)))"
"(values))))"
"(let-values(((disarmed-s_1393)(syntax-disarm$1 s_1391)))"
"(let-values(((ok?_1394 set!361_1395 id362_1396 rhs363_1397)"
"(let-values(((s_1412) disarmed-s_1393))"
"(let-values(((orig-s_1413) s_1412))"
"(let-values(((set!361_1414 id362_1415 rhs363_1416)"
"(let-values(((s_1417)(if(syntax?$1 s_1412)(syntax-e$1 s_1412) s_1412)))"
"(if(pair? s_1417)"
"(let-values(((set!364_1418)"
"(let-values(((s_1421)(car s_1417))) s_1421))"
"((id365_1419 rhs366_1420)"
"(let-values(((s_1422)(cdr s_1417)))"
"(let-values(((s_1423)"
"(if(syntax?$1 s_1422)"
"(syntax-e$1 s_1422)"
" s_1422)))"
"(if(pair? s_1423)"
"(let-values(((id367_1424)"
"(let-values(((s_1426)(car s_1423)))"
"(if(let-values(((or-part_1427)"
"(if(syntax?$1"
" s_1426)"
"(symbol?"
"(syntax-e$1"
" s_1426))"
" #f)))"
"(if or-part_1427"
" or-part_1427"
"(symbol? s_1426)))"
" s_1426"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"not an identifier\""
" orig-s_1413"
" s_1426))))"
"((rhs368_1425)"
"(let-values(((s_1428)(cdr s_1423)))"
"(let-values(((s_1429)"
"(if(syntax?$1 s_1428)"
"(syntax-e$1 s_1428)"
" s_1428)))"
"(if(pair? s_1429)"
"(let-values(((rhs369_1430)"
"(let-values(((s_1431)"
"(car"
" s_1429)))"
" s_1431))"
"(()"
"(let-values(((s_1432)"
"(cdr"
" s_1429)))"
"(let-values(((s_1433)"
"(if(syntax?$1"
" s_1432)"
"(syntax-e$1"
" s_1432)"
" s_1432)))"
"(if(null?"
" s_1433)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1413))))))"
"(values rhs369_1430))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1413))))))"
"(values id367_1424 rhs368_1425))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1413))))))"
"(values set!364_1418 id365_1419 rhs366_1420))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1413)))))"
"(values #t set!361_1414 id362_1415 rhs363_1416))))))"
"(let-values(((id_1410) id362_1396))"
"((letrec-values(((rename-loop_1434)"
"(lambda(id_1435 from-rename?_1436)"
"(let-values(((binding_1437)"
"(let-values(((id370_1442) id_1435)"
"((temp371_1443)(expand-context-phase ctx_1392))"
"((temp372_1444) 'ambiguous)"
"((temp373_1445) #t))"
"(resolve+shift30.1"
" temp372_1444"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp373_1445"
" #t"
" #f"
" #f"
" id370_1442"
" temp371_1443))))"
"(let-values((()"
"(begin"
"(if(eq? binding_1437 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1435 ctx_1392))"
"(void))"
"(values))))"
"(let-values(((t_1438 primitive?_1439 insp_1440)"
"(if binding_1437"
"(let-values(((binding374_1446) binding_1437)"
"((ctx375_1447) ctx_1392)"
"((s376_1448) s_1391))"
"(lookup15.1 #f #f #f #f binding374_1446 ctx375_1447 s376_1448))"
"(values #f #f #f))))"
"(begin"
"(let-values(((obs_1449)(expand-context-observer ctx_1392)))"
"(if obs_1449"
"(let-values()"
"(let-values()(call-expand-observe obs_1449 'resolve id_1435)))"
"(void)))"
"(if(let-values(((or-part_1450)(variable? t_1438)))"
"(if or-part_1450"
" or-part_1450"
"(if(not binding_1437)"
"(let-values(((or-part_1451)"
"(register-eventual-variable!? id_1435 ctx_1392)))"
"(if or-part_1451"
" or-part_1451"
"(expand-context-allow-unbound? ctx_1392)))"
" #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(module-binding? binding_1437)"
"(not"
"(eq?"
"(module-binding-module binding_1437)"
"(namespace-mpi"
"(expand-context-namespace ctx_1392))))"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                    \"cannot mutate module-required identifier\""
" s_1391"
" id_1435))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1454)"
"(expand-context-observer ctx_1392)))"
"(if obs_1454"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1454 'next)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(register-variable-referenced-if-local! binding_1437)"
"(values))))"
"(let-values(((rebuild-s_1452)"
"(let-values(((ctx377_1455) ctx_1392)"
"((s378_1456) s_1391))"
"(keep-as-needed55.1 #f #f ctx377_1455 s378_1456))))"
"(let-values(((exp-rhs_1453)"
"(let-values(((temp379_1457) rhs363_1397)"
"((temp380_1458)"
"(as-expression-context ctx_1392)))"
"(expand5.1 #f #f temp379_1457 temp380_1458))))"
"(if(expand-context-to-parsed? ctx_1392)"
"(parsed-set!9.1"
" rebuild-s_1452"
"(parsed-id2.1 id_1435 binding_1437 #f)"
" exp-rhs_1453)"
"(let-values(((rebuild-s381_1459) rebuild-s_1452)"
"((temp382_1460)"
"(list"
" set!361_1395"
"(let-values(((id383_1462) id_1435)"
"((t384_1463) t_1438)"
"((temp385_1464)"
"(free-id-set-empty-or-just-module*?"
"(expand-context-stops"
" ctx_1392))))"
"(substitute-variable6.1"
" temp385_1464"
" id383_1462"
" t384_1463))"
" exp-rhs_1453)))"
"(rebuild62.1 #f #f rebuild-s381_1459 temp382_1460)))))))))"
"(if(not binding_1437)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" s_1391"
" id_1435"
" null"
"(syntax-debug-info-string id_1435 ctx_1392)))"
"(if(1/set!-transformer? t_1438)"
"(let-values()"
"(if(not-in-this-expand-context? t_1438 ctx_1392)"
"(let-values()"
"(let-values(((temp386_1465)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1391"
" disarmed-s_1393"
" set!361_1395"
" rhs363_1397"
" id_1435"
" from-rename?_1436"
" ctx_1392)"
" t_1438"
" ctx_1392))"
"((ctx387_1466) ctx_1392))"
"(expand5.1 #f #f temp386_1465 ctx387_1466)))"
"(let-values()"
"(let-values(((exp-s_1467 re-ctx_1468)"
"(apply-transformer"
" t_1438"
" insp_1440"
" s_1391"
" id_1435"
" ctx_1392"
" binding_1437)))"
"(if(expand-context-just-once? ctx_1392)"
"(let-values() exp-s_1467)"
"(let-values()"
"(let-values(((exp-s388_1469) exp-s_1467)"
"((re-ctx389_1470) re-ctx_1468))"
"(expand5.1 #f #f exp-s388_1469 re-ctx389_1470))))))))"
"(if(1/rename-transformer? t_1438)"
"(let-values()"
"(if(not-in-this-expand-context? t_1438 ctx_1392)"
"(let-values()"
"(let-values(((temp390_1471)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1391"
" disarmed-s_1393"
" set!361_1395"
" rhs363_1397"
" id_1435"
" from-rename?_1436"
" ctx_1392"
" t_1438)"
" t_1438"
" ctx_1392))"
"((ctx391_1472) ctx_1392))"
"(expand5.1 #f #f temp390_1471 ctx391_1472)))"
"(let-values()"
"(rename-loop_1434"
"(rename-transformer-target-in-context t_1438 ctx_1392)"
" #t))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate syntax identifier\""
" s_1391"
" id_1435)))))))))))))"
" rename-loop_1434)"
" id_1410"
" #f))))))))"
" print-values)"
"(define-values"
"(substitute-set!-rename)"
"(let-values(((substitute-set!-rename32_1473)"
"(lambda(s25_1474"
" disarmed-s26_1475"
" set!-id27_1476"
" id28_1477"
" rhs-s29_1478"
" from-rename?30_1479"
" ctx31_1480"
" t23_1481"
" t24_1482)"
"(let-values(((s_1483) s25_1474))"
"(let-values(((disarmed-s_1484) disarmed-s26_1475))"
"(let-values(((set!-id_1485) set!-id27_1476))"
"(let-values(((id_1486) id28_1477))"
"(let-values(((rhs-s_1487) rhs-s29_1478))"
"(let-values(((from-rename?_1488) from-rename?30_1479))"
"(let-values(((ctx_1489) ctx31_1480))"
"(let-values(((t_1490)(if t24_1482 t23_1481 #f)))"
"(let-values()"
"(if(let-values(((or-part_1491) t_1490))"
"(if or-part_1491 or-part_1491 from-rename?_1488))"
"(let-values()"
"(let-values(((new-id_1492)"
"(if t_1490"
"(rename-transformer-target-in-context t_1490 ctx_1489)"
" id_1486)))"
"(syntax-rearm$1"
"(datum->syntax$1"
" disarmed-s_1484"
"(list set!-id_1485 new-id_1492 rhs-s_1487)"
" disarmed-s_1484"
" disarmed-s_1484)"
" s_1483)))"
"(let-values() s_1483))))))))))))))"
"(case-lambda"
"((s_1493 disarmed-s_1494 set!-id_1495 id_1496 rhs-s_1497 from-rename?_1498 ctx_1499)"
"(substitute-set!-rename32_1473"
" s_1493"
" disarmed-s_1494"
" set!-id_1495"
" id_1496"
" rhs-s_1497"
" from-rename?_1498"
" ctx_1499"
" #f"
" #f))"
"((s_1500 disarmed-s_1501 set!-id_1502 id_1503 rhs-s_1504 from-rename?_1505 ctx_1506 t23_1507)"
"(substitute-set!-rename32_1473"
" s_1500"
" disarmed-s_1501"
" set!-id_1502"
" id_1503"
" rhs-s_1504"
" from-rename?_1505"
" ctx_1506"
" t23_1507"
" #t)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%variable-reference"
"(lambda(s_1508 ctx_1509)"
"(let-values((()"
"(begin"
"(let-values(((obs_1550)(expand-context-observer ctx_1509)))"
"(if obs_1550"
"(let-values()(let-values()(call-expand-observe obs_1550 'prim-#%variable-reference)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1510)(syntax-disarm$1 s_1508)))"
"(let-values(((ok?_1511 #%variable-reference392_1512 id393_1513)"
"(let-values(((s_1551) disarmed-s_1510))"
"(if(let-values(((s_1552)(if(syntax?$1 s_1551)(syntax-e$1 s_1551) s_1551)))"
"(if(pair? s_1552)"
"(if(let-values(((s_1553)(car s_1552))) #t)"
"(let-values(((s_1554)(cdr s_1552)))"
"(let-values(((s_1555)(if(syntax?$1 s_1554)(syntax-e$1 s_1554) s_1554)))"
"(if(pair? s_1555)"
"(if(let-values(((s_1556)(car s_1555)))"
"(if(syntax?$1 s_1556)(symbol?(syntax-e$1 s_1556)) #f))"
"(let-values(((s_1557)(cdr s_1555)))"
"(let-values(((s_1558)"
"(if(syntax?$1 s_1557)(syntax-e$1 s_1557) s_1557)))"
"(null? s_1558)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((#%variable-reference392_1560 id393_1561)"
"(let-values(((s_1562)(if(syntax?$1 s_1551)(syntax-e$1 s_1551) s_1551)))"
"(let-values(((#%variable-reference394_1563)"
"(let-values(((s_1565)(car s_1562))) s_1565))"
"((id395_1564)"
"(let-values(((s_1566)(cdr s_1562)))"
"(let-values(((s_1567)"
"(if(syntax?$1 s_1566)"
"(syntax-e$1 s_1566)"
" s_1566)))"
"(let-values(((id396_1568)"
"(let-values(((s_1569)(car s_1567)))"
" s_1569))"
"(()"
"(let-values(((s_1570)(cdr s_1567)))"
"(let-values(((s_1571)"
"(if(syntax?$1 s_1570)"
"(syntax-e$1 s_1570)"
" s_1570)))"
"(values)))))"
"(values id396_1568))))))"
"(values #%variable-reference394_1563 id395_1564)))))"
"(values #t #%variable-reference392_1560 id393_1561)))"
"(values #f #f #f)))))"
"(let-values(((ok?_1524 #%variable-reference397_1525 #%top398_1526 id399_1527)"
"(let-values(((s_1572) disarmed-s_1510))"
"(if(if(not ok?_1511)"
"(let-values(((s_1573)(if(syntax?$1 s_1572)(syntax-e$1 s_1572) s_1572)))"
"(if(pair? s_1573)"
"(if(let-values(((s_1574)(car s_1573))) #t)"
"(let-values(((s_1575)(cdr s_1573)))"
"(let-values(((s_1576)(if(syntax?$1 s_1575)(syntax-e$1 s_1575) s_1575)))"
"(if(pair? s_1576)"
"(if(let-values(((s_1577)(car s_1576)))"
"(let-values(((s_1578)"
"(if(syntax?$1 s_1577)(syntax-e$1 s_1577) s_1577)))"
"(if(pair? s_1578)"
"(if(let-values(((s_1579)(car s_1578))) #t)"
"(let-values(((s_1580)(cdr s_1578)))"
"(if(syntax?$1 s_1580)(symbol?(syntax-e$1 s_1580)) #f))"
" #f)"
" #f)))"
"(let-values(((s_1581)(cdr s_1576)))"
"(let-values(((s_1582)"
"(if(syntax?$1 s_1581)(syntax-e$1 s_1581) s_1581)))"
"(null? s_1582)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values()"
"(let-values(((#%variable-reference397_1584 #%top398_1585 id399_1586)"
"(let-values(((s_1587)"
"(if(syntax?$1 s_1572)(syntax-e$1 s_1572) s_1572)))"
"(let-values(((#%variable-reference400_1588)"
"(let-values(((s_1591)(car s_1587))) s_1591))"
"((#%top401_1589 id402_1590)"
"(let-values(((s_1592)(cdr s_1587)))"
"(let-values(((s_1593)"
"(if(syntax?$1 s_1592)"
"(syntax-e$1 s_1592)"
" s_1592)))"
"(let-values(((#%top403_1594 id404_1595)"
"(let-values(((s_1596)(car s_1593)))"
"(let-values(((s_1597)"
"(if(syntax?$1 s_1596)"
"(syntax-e$1 s_1596)"
" s_1596)))"
"(let-values(((#%top405_1598)"
"(let-values(((s_1600)"
"(car"
" s_1597)))"
" s_1600))"
"((id406_1599)"
"(let-values(((s_1601)"
"(cdr"
" s_1597)))"
" s_1601)))"
"(values"
" #%top405_1598"
" id406_1599)))))"
"(()"
"(let-values(((s_1602)(cdr s_1593)))"
"(let-values(((s_1603)"
"(if(syntax?$1 s_1602)"
"(syntax-e$1 s_1602)"
" s_1602)))"
"(values)))))"
"(values #%top403_1594 id404_1595))))))"
"(values #%variable-reference400_1588 #%top401_1589 id402_1590)))))"
"(values #t #%variable-reference397_1584 #%top398_1585 id399_1586)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_1540 #%variable-reference407_1541)"
"(let-values(((s_1604) disarmed-s_1510))"
"(if(if(not"
"(let-values(((or-part_1605) ok?_1511))"
"(if or-part_1605 or-part_1605 ok?_1524)))"
" #t"
" #f)"
"(let-values(((orig-s_1606) s_1604))"
"(let-values(((#%variable-reference407_1607)"
"(let-values(((s_1608)"
"(if(syntax?$1 s_1604)(syntax-e$1 s_1604) s_1604)))"
"(if(pair? s_1608)"
"(let-values(((#%variable-reference408_1609)"
"(let-values(((s_1610)(car s_1608))) s_1610))"
"(()"
"(let-values(((s_1611)(cdr s_1608)))"
"(let-values(((s_1612)"
"(if(syntax?$1 s_1611)"
"(syntax-e$1 s_1611)"
" s_1611)))"
"(if(null? s_1612)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_1606))))))"
"(values #%variable-reference408_1609))"
"                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_1606)))))"
"(values #t #%variable-reference407_1607)))"
"(values #f #f)))))"
"(if(let-values(((or-part_1613) ok?_1511))(if or-part_1613 or-part_1613 ok?_1524))"
"(let-values()"
"(let-values(((var-id_1614)(if ok?_1511 id393_1513 id399_1527)))"
"(let-values(((binding_1615)"
"(let-values(((var-id409_1617) var-id_1614)"
"((temp410_1618)(expand-context-phase ctx_1509))"
"((temp411_1619) 'ambiguous))"
"(resolve+shift30.1"
" temp411_1619"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" var-id409_1617"
" temp410_1618))))"
"(begin"
"(if(eq? binding_1615 'ambiguous)"
"(let-values()(raise-ambiguous-error var-id_1614 ctx_1509))"
"(void))"
"(if binding_1615"
"(void)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                \"unbound identifier\""
" s_1508"
" var-id_1614"
" null"
"(syntax-debug-info-string var-id_1614 ctx_1509))))"
"(if(expand-context-to-parsed? ctx_1509)"
"(parsed-#%variable-reference11.1"
"(keep-properties-only s_1508)"
"(if ok?_1524"
"(parsed-top-id4.1 var-id_1614 binding_1615 #f)"
"(parsed-id2.1 var-id_1614 binding_1615 #f)))"
" s_1508)))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1509)"
"(parsed-#%variable-reference11.1(keep-properties-only s_1508) #f)"
" s_1508)))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%expression"
"(lambda(s_1620 ctx_1621)"
"(let-values((()"
"(begin"
"(let-values(((obs_1638)(expand-context-observer ctx_1621)))"
"(if obs_1638"
"(let-values()(let-values()(call-expand-observe obs_1638 'prim-#%expression)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1622)(syntax-disarm$1 s_1620)))"
"(let-values(((ok?_1623 #%expression412_1624 e413_1625)"
"(let-values(((s_1639) disarmed-s_1622))"
"(let-values(((orig-s_1640) s_1639))"
"(let-values(((#%expression412_1641 e413_1642)"
"(let-values(((s_1643)(if(syntax?$1 s_1639)(syntax-e$1 s_1639) s_1639)))"
"(if(pair? s_1643)"
"(let-values(((#%expression414_1644)"
"(let-values(((s_1646)(car s_1643))) s_1646))"
"((e415_1645)"
"(let-values(((s_1647)(cdr s_1643)))"
"(let-values(((s_1648)"
"(if(syntax?$1 s_1647)"
"(syntax-e$1 s_1647)"
" s_1647)))"
"(if(pair? s_1648)"
"(let-values(((e416_1649)"
"(let-values(((s_1650)(car s_1648)))"
" s_1650))"
"(()"
"(let-values(((s_1651)(cdr s_1648)))"
"(let-values(((s_1652)"
"(if(syntax?$1 s_1651)"
"(syntax-e$1 s_1651)"
" s_1651)))"
"(if(null? s_1652)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1640))))))"
"(values e416_1649))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1640))))))"
"(values #%expression414_1644 e415_1645))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1640)))))"
"(values #t #%expression412_1641 e413_1642))))))"
"(let-values(((rebuild-s_1636)"
"(let-values(((ctx417_1654) ctx_1621)((s418_1655) s_1620)((temp419_1656) #t))"
"(keep-as-needed55.1 temp419_1656 #t ctx417_1654 s418_1655))))"
"(let-values(((exp-e_1637)"
"(let-values(((temp420_1657) e413_1625)"
"((temp421_1658)"
"(let-values(((temp422_1660)(as-expression-context ctx_1621))"
"((ctx423_1661) ctx_1621))"
"(as-tail-context21.1 ctx423_1661 temp422_1660))))"
"(expand5.1 #f #f temp420_1657 temp421_1658))))"
"(if(expand-context-to-parsed? ctx_1621)"
" exp-e_1637"
"(let-values(((tmp_1662)"
"(if(not(expand-context-in-local-expand? ctx_1621))"
"(expand-context-context ctx_1621)"
" #f)))"
"(if(equal? tmp_1662 'expression)"
"(let-values()"
"(let-values(((result-s_1663)(syntax-track-origin$1 exp-e_1637 rebuild-s_1636)))"
"(begin"
"(let-values(((obs_1664)(expand-context-observer ctx_1621)))"
"(if obs_1664"
"(let-values()(let-values()(call-expand-observe obs_1664 'tag result-s_1663)))"
"(void)))"
" result-s_1663)))"
"(let-values()"
"(let-values(((rebuild-s424_1665) rebuild-s_1636)"
"((temp425_1666)(list #%expression412_1624 exp-e_1637)))"
"(rebuild62.1 #f #f rebuild-s424_1665 temp425_1666))))))))))))))"
" print-values)"
"(call-with-values"
"  (lambda () (add-core-form! 'unquote (lambda (s_1667 ctx_1668) (raise-syntax-error$1 #f \"not in quasiquote\" s_1667))))"
" print-values)"
"(call-with-values"
"(lambda()"
"    (add-core-form! 'unquote-splicing (lambda (s_1669 ctx_1670) (raise-syntax-error$1 #f \"not in quasiquote\" s_1669))))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(binding-for-transformer?)"
"(lambda(b_1 id_2 at-phase_3 ns_4)"
"(if(not at-phase_3)"
"(let-values()"
"(let-values(((m_5)(namespace->module ns_4(1/module-path-index-resolve(module-binding-nominal-module b_1)))))"
"(let-values(((b/p_6)"
"(hash-ref"
"(hash-ref(module-provides m_5)(module-binding-nominal-phase b_1) '#hasheq())"
"(module-binding-nominal-sym b_1)"
" #f)))"
"(provided-as-transformer? b/p_6))))"
"(let-values()"
"(let-values(((val_7 primitive?_8 insp_9)"
"(let-values(((b1_10) b_1)"
"((empty-env2_11) empty-env)"
"((null3_12) null)"
"((ns4_13) ns_4)"
"((at-phase5_14) at-phase_3)"
"((id6_15) id_2))"
"(binding-lookup48.1 #f #f #f #f b1_10 empty-env2_11 null3_12 ns4_13 at-phase5_14 id6_15))))"
"(not(variable? val_7)))))))"
"(void)"
"(void)"
"(define-values(layers) '(raw phaseless id))"
"(define-values(provide-form-name) 'provide)"
"(define-values"
"(parse-and-expand-provides!)"
"(lambda(specs_1 orig-s_2 rp_3 self_4 phase_5 ctx_6)"
"(let-values(((ns_7)(expand-context-namespace ctx_6)))"
"((letrec-values(((loop_8)"
"(lambda(specs_9 at-phase_10 protected?_11 layer_12)"
"(let-values(((track-stxess_13 exp-specss_14)"
"(let-values(((track-stxes_15 exp-specs_16)"
"(let-values(((lst_17) specs_9))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(track-stxes_19 exp-specs_20 lst_21)"
"(if(pair? lst_21)"
"(let-values(((spec_22)"
"(unsafe-car lst_21)))"
"(let-values(((track-stxes_23"
" exp-specs_24)"
"(let-values(((track-stxes_25)"
" track-stxes_19)"
"((exp-specs_26)"
" exp-specs_20))"
"(let-values(((track-stxes_27"
" exp-specs_28)"
"(let-values()"
"(let-values(((track-stxes1_29"
" exp-specs2_30)"
"(let-values()"
"(let-values(((disarmed-spec_31)"
"(syntax-disarm$1"
" spec_22)))"
"(let-values(((fm_32)"
"(if(pair?"
"(syntax-e$1"
" disarmed-spec_31))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" disarmed-spec_31)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" disarmed-spec_31)))"
" #f)"
" #f)))"
"(let-values(((check-nested_33)"
"(lambda(want-layer_34)"
"(if(member"
" want-layer_34"
"(member"
" layer_12"
" layers))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"                                                                                                                                                            \"nested `~a' not allowed\""
" fm_32)"
" orig-s_2"
" spec_22))))))"
"(let-values(((tmp_35)"
" fm_32))"
"(let-values(((index_36)"
"(if(symbol?"
" tmp_35)"
"(hash-ref"
" '#hasheq((rename ."
" 5)"
"(all-from-except"
" ."
" 8)"
"(for-meta"
" ."
" 1)"
"(all-defined-except"
" ."
" 10)"
"(for-syntax"
" ."
" 2)"
"(all-from"
" ."
" 7)"
"(prefix-all-defined"
" ."
" 11)"
"(protect"
" ."
" 4)"
"(prefix-all-defined-except"
" ."
" 12)"
"(struct"
" ."
" 6)"
"(all-defined"
" ."
" 9)"
"(expand"
" ."
" 13)"
"(for-label"
" ."
" 3))"
" tmp_35"
"(lambda()"
" 0))"
" 0)))"
"(if(unsafe-fx<"
" index_36"
" 6)"
"(if(unsafe-fx<"
" index_36"
" 2)"
"(if(unsafe-fx<"
" index_36"
" 1)"
"(let-values()"
"(if(identifier?"
" spec_22)"
"(let-values()"
"(begin"
"(parse-identifier!"
" spec_22"
" orig-s_2"
"(syntax-e$1"
" spec_22)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                         \"bad syntax\""
" orig-s_2"
" spec_22))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'raw)"
"(values))))"
"(let-values(((ok?_37"
" for-meta3_38"
" phase-level4_39"
" spec5_40)"
"(let-values(((s_56)"
" disarmed-spec_31))"
"(let-values(((orig-s_57)"
" s_56))"
"(let-values(((for-meta3_58"
" phase-level4_59"
" spec5_60)"
"(let-values(((s_61)"
"(if(syntax?$1"
" s_56)"
"(syntax-e$1"
" s_56)"
" s_56)))"
"(if(pair?"
" s_61)"
"(let-values(((for-meta6_62)"
"(let-values(((s_65)"
"(car"
" s_61)))"
" s_65))"
"((phase-level7_63"
" spec8_64)"
"(let-values(((s_66)"
"(cdr"
" s_61)))"
"(let-values(((s_67)"
"(if(syntax?$1"
" s_66)"
"(syntax-e$1"
" s_66)"
" s_66)))"
"(if(pair?"
" s_67)"
"(let-values(((phase-level9_68)"
"(let-values(((s_70)"
"(car"
" s_67)))"
" s_70))"
"((spec10_69)"
"(let-values(((s_71)"
"(cdr"
" s_67)))"
"(let-values(((s_72)"
"(if(syntax?$1"
" s_71)"
"(syntax-e$1"
" s_71)"
" s_71)))"
"(let-values(((flat-s_73)"
"(to-syntax-list.1"
" s_72)))"
"(if(not"
" flat-s_73)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_57))"
"(let-values()"
" flat-s_73)))))))"
"(values"
" phase-level9_68"
" spec10_69))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_57))))))"
"(values"
" for-meta6_62"
" phase-level7_63"
" spec8_64))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_57)))))"
"(values"
" #t"
" for-meta3_58"
" phase-level4_59"
" spec5_60))))))"
"(let-values(((p_53)"
"(syntax-e$1"
" phase-level4_39)))"
"(let-values((()"
"(begin"
"(if(phase?"
" p_53)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                               \"bad `for-meta' phase\""
" orig-s_2"
" spec_22)))"
"(values))))"
"(let-values(((track-stxes_54"
" exp-specs_55)"
"(loop_8"
" spec5_40"
"(phase+"
" p_53"
" at-phase_10)"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_54"
"(let-values(((spec11_74)"
" spec_22)"
"((temp12_75)"
"(list*"
" for-meta3_38"
" phase-level4_39"
" exp-specs_55)))"
"(rebuild62.1"
" #f"
" #f"
" spec11_74"
" temp12_75))))))))))))"
"(if(unsafe-fx<"
" index_36"
" 3)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'raw)"
"(values))))"
"(let-values(((ok?_76"
" for-syntax13_77"
" spec14_78)"
"(let-values(((s_91)"
" disarmed-spec_31))"
"(let-values(((orig-s_92)"
" s_91))"
"(let-values(((for-syntax13_93"
" spec14_94)"
"(let-values(((s_95)"
"(if(syntax?$1"
" s_91)"
"(syntax-e$1"
" s_91)"
" s_91)))"
"(if(pair?"
" s_95)"
"(let-values(((for-syntax15_96)"
"(let-values(((s_98)"
"(car"
" s_95)))"
" s_98))"
"((spec16_97)"
"(let-values(((s_99)"
"(cdr"
" s_95)))"
"(let-values(((s_100)"
"(if(syntax?$1"
" s_99)"
"(syntax-e$1"
" s_99)"
" s_99)))"
"(let-values(((flat-s_101)"
"(to-syntax-list.1"
" s_100)))"
"(if(not"
" flat-s_101)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_92))"
"(let-values()"
" flat-s_101)))))))"
"(values"
" for-syntax15_96"
" spec16_97))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_92)))))"
"(values"
" #t"
" for-syntax13_93"
" spec14_94))))))"
"(let-values(((track-stxes_89"
" exp-specs_90)"
"(loop_8"
" spec14_78"
"(phase+"
" 1"
" at-phase_10)"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_89"
"(let-values(((spec17_102)"
" spec_22)"
"((temp18_103)"
"(list*"
" for-syntax13_77"
" exp-specs_90)))"
"(rebuild62.1"
" #f"
" #f"
" spec17_102"
" temp18_103)))))))))"
"(if(unsafe-fx<"
" index_36"
" 4)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'raw)"
"(values))))"
"(let-values(((ok?_104"
" for-label19_105"
" spec20_106)"
"(let-values(((s_119)"
" disarmed-spec_31))"
"(let-values(((orig-s_120)"
" s_119))"
"(let-values(((for-label19_121"
" spec20_122)"
"(let-values(((s_123)"
"(if(syntax?$1"
" s_119)"
"(syntax-e$1"
" s_119)"
" s_119)))"
"(if(pair?"
" s_123)"
"(let-values(((for-label21_124)"
"(let-values(((s_126)"
"(car"
" s_123)))"
" s_126))"
"((spec22_125)"
"(let-values(((s_127)"
"(cdr"
" s_123)))"
"(let-values(((s_128)"
"(if(syntax?$1"
" s_127)"
"(syntax-e$1"
" s_127)"
" s_127)))"
"(let-values(((flat-s_129)"
"(to-syntax-list.1"
" s_128)))"
"(if(not"
" flat-s_129)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_120))"
"(let-values()"
" flat-s_129)))))))"
"(values"
" for-label21_124"
" spec22_125))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_120)))))"
"(values"
" #t"
" for-label19_121"
" spec20_122))))))"
"(let-values(((track-stxes_117"
" exp-specs_118)"
"(loop_8"
" spec20_106"
" #f"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_117"
"(let-values(((spec23_130)"
" spec_22)"
"((temp24_131)"
"(list*"
" for-label19_105"
" exp-specs_118)))"
"(rebuild62.1"
" #f"
" #f"
" spec23_130"
" temp24_131)))))))))"
"(if(unsafe-fx<"
" index_36"
" 5)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values((()"
"(begin"
"(if protected?_11"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                               \"nested `protect' not allowed\""
" orig-s_2"
" spec_22))"
"(void))"
"(values))))"
"(let-values(((ok?_132"
" protect25_133"
" p-spec26_134)"
"(let-values(((s_147)"
" disarmed-spec_31))"
"(let-values(((orig-s_148)"
" s_147))"
"(let-values(((protect25_149"
" p-spec26_150)"
"(let-values(((s_151)"
"(if(syntax?$1"
" s_147)"
"(syntax-e$1"
" s_147)"
" s_147)))"
"(if(pair?"
" s_151)"
"(let-values(((protect27_152)"
"(let-values(((s_154)"
"(car"
" s_151)))"
" s_154))"
"((p-spec28_153)"
"(let-values(((s_155)"
"(cdr"
" s_151)))"
"(let-values(((s_156)"
"(if(syntax?$1"
" s_155)"
"(syntax-e$1"
" s_155)"
" s_155)))"
"(let-values(((flat-s_157)"
"(to-syntax-list.1"
" s_156)))"
"(if(not"
" flat-s_157)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_148))"
"(let-values()"
" flat-s_157)))))))"
"(values"
" protect27_152"
" p-spec28_153))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_148)))))"
"(values"
" #t"
" protect25_149"
" p-spec26_150))))))"
"(let-values(((track-stxes_145"
" exp-specs_146)"
"(loop_8"
" p-spec26_134"
" at-phase_10"
" #t"
" layer_12)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_145"
"(let-values(((spec29_158)"
" spec_22)"
"((temp30_159)"
"(list*"
" protect25_133"
" exp-specs_146)))"
"(rebuild62.1"
" #f"
" #f"
" spec29_158"
" temp30_159))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_160"
" rename31_161"
" id:from32_162"
" id:to33_163)"
"(let-values(((s_176)"
" disarmed-spec_31))"
"(let-values(((orig-s_177)"
" s_176))"
"(let-values(((rename31_178"
" id:from32_179"
" id:to33_180)"
"(let-values(((s_181)"
"(if(syntax?$1"
" s_176)"
"(syntax-e$1"
" s_176)"
" s_176)))"
"(if(pair?"
" s_181)"
"(let-values(((rename34_182)"
"(let-values(((s_185)"
"(car"
" s_181)))"
" s_185))"
"((id:from35_183"
" id:to36_184)"
"(let-values(((s_186)"
"(cdr"
" s_181)))"
"(let-values(((s_187)"
"(if(syntax?$1"
" s_186)"
"(syntax-e$1"
" s_186)"
" s_186)))"
"(if(pair?"
" s_187)"
"(let-values(((id:from37_188)"
"(let-values(((s_190)"
"(car"
" s_187)))"
"(if(let-values(((or-part_191)"
"(if(syntax?$1"
" s_190)"
"(symbol?"
"(syntax-e$1"
" s_190))"
" #f)))"
"(if or-part_191"
" or-part_191"
"(symbol?"
" s_190)))"
" s_190"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_177"
" s_190))))"
"((id:to38_189)"
"(let-values(((s_192)"
"(cdr"
" s_187)))"
"(let-values(((s_193)"
"(if(syntax?$1"
" s_192)"
"(syntax-e$1"
" s_192)"
" s_192)))"
"(if(pair?"
" s_193)"
"(let-values(((id:to39_194)"
"(let-values(((s_195)"
"(car"
" s_193)))"
"(if(let-values(((or-part_196)"
"(if(syntax?$1"
" s_195)"
"(symbol?"
"(syntax-e$1"
" s_195))"
" #f)))"
"(if or-part_196"
" or-part_196"
"(symbol?"
" s_195)))"
" s_195"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_177"
" s_195))))"
"(()"
"(let-values(((s_197)"
"(cdr"
" s_193)))"
"(let-values(((s_198)"
"(if(syntax?$1"
" s_197)"
"(syntax-e$1"
" s_197)"
" s_197)))"
"(if(null?"
" s_198)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_177))))))"
"(values"
" id:to39_194))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_177))))))"
"(values"
" id:from37_188"
" id:to38_189))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_177))))))"
"(values"
" rename34_182"
" id:from35_183"
" id:to36_184))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_177)))))"
"(values"
" #t"
" rename31_178"
" id:from32_179"
" id:to33_180))))))"
"(begin"
"(parse-identifier!"
" id:from32_162"
" orig-s_2"
"(syntax-e$1"
" id:to33_163)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))))))"
"(if(unsafe-fx<"
" index_36"
" 9)"
"(if(unsafe-fx<"
" index_36"
" 7)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_199"
" struct40_200"
" id:struct41_201"
" id:field42_202)"
"(let-values(((s_215)"
" disarmed-spec_31))"
"(let-values(((orig-s_216)"
" s_215))"
"(let-values(((struct40_217"
" id:struct41_218"
" id:field42_219)"
"(let-values(((s_220)"
"(if(syntax?$1"
" s_215)"
"(syntax-e$1"
" s_215)"
" s_215)))"
"(if(pair?"
" s_220)"
"(let-values(((struct43_221)"
"(let-values(((s_224)"
"(car"
" s_220)))"
" s_224))"
"((id:struct44_222"
" id:field45_223)"
"(let-values(((s_225)"
"(cdr"
" s_220)))"
"(let-values(((s_226)"
"(if(syntax?$1"
" s_225)"
"(syntax-e$1"
" s_225)"
" s_225)))"
"(if(pair?"
" s_226)"
"(let-values(((id:struct46_227)"
"(let-values(((s_229)"
"(car"
" s_226)))"
"(if(let-values(((or-part_230)"
"(if(syntax?$1"
" s_229)"
"(symbol?"
"(syntax-e$1"
" s_229))"
" #f)))"
"(if or-part_230"
" or-part_230"
"(symbol?"
" s_229)))"
" s_229"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_216"
" s_229))))"
"((id:field47_228)"
"(let-values(((s_231)"
"(cdr"
" s_226)))"
"(let-values(((s_232)"
"(if(syntax?$1"
" s_231)"
"(syntax-e$1"
" s_231)"
" s_231)))"
"(if(pair?"
" s_232)"
"(let-values(((id:field48_233)"
"(let-values(((s_234)"
"(car"
" s_232)))"
"(let-values(((s_235)"
"(if(syntax?$1"
" s_234)"
"(syntax-e$1"
" s_234)"
" s_234)))"
"(let-values(((flat-s_236)"
"(to-syntax-list.1"
" s_235)))"
"(if(not"
" flat-s_236)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_216))"
"(let-values()"
"(let-values(((id:field_237)"
"(let-values(((lst_238)"
" flat-s_236))"
"(begin"
"(if(list?"
" lst_238)"
"(void)"
"(let-values()"
"(in-list"
" lst_238)))"
"((letrec-values(((for-loop_239)"
"(lambda(id:field_240"
" lst_241)"
"(if(pair?"
" lst_241)"
"(let-values(((s_242)"
"(unsafe-car"
" lst_241)))"
"(let-values(((id:field_243)"
"(let-values(((id:field_244)"
" id:field_240))"
"(let-values(((id:field_245)"
"(let-values()"
"(let-values(((id:field49_246)"
"(let-values()"
"(if(let-values(((or-part_247)"
"(if(syntax?$1"
" s_242)"
"(symbol?"
"(syntax-e$1"
" s_242))"
" #f)))"
"(if or-part_247"
" or-part_247"
"(symbol?"
" s_242)))"
" s_242"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_216"
" s_242)))))"
"(cons"
" id:field49_246"
" id:field_244)))))"
"(values"
" id:field_245)))))"
"(for-loop_239"
" id:field_243"
"(unsafe-cdr"
" lst_241))))"
" id:field_240))))"
" for-loop_239)"
" null"
" lst_238)))))"
"(alt-reverse"
" id:field_237))))))))"
"(()"
"(let-values(((s_248)"
"(cdr"
" s_232)))"
"(let-values(((s_249)"
"(if(syntax?$1"
" s_248)"
"(syntax-e$1"
" s_248)"
" s_248)))"
"(if(null?"
" s_249)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_216))))))"
"(values"
" id:field48_233))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_216))))))"
"(values"
" id:struct46_227"
" id:field47_228))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_216))))))"
"(values"
" struct43_221"
" id:struct44_222"
" id:field45_223))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_216)))))"
"(values"
" #t"
" struct40_217"
" id:struct41_218"
" id:field42_219))))))"
"(begin"
"(parse-struct!"
" id:struct41_201"
" orig-s_2"
" id:field42_202"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(if(unsafe-fx<"
" index_36"
" 8)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_250"
" all-from50_251"
" mod-path51_252)"
"(let-values(((s_263)"
" disarmed-spec_31))"
"(let-values(((orig-s_264)"
" s_263))"
"(let-values(((all-from50_265"
" mod-path51_266)"
"(let-values(((s_267)"
"(if(syntax?$1"
" s_263)"
"(syntax-e$1"
" s_263)"
" s_263)))"
"(if(pair?"
" s_267)"
"(let-values(((all-from52_268)"
"(let-values(((s_270)"
"(car"
" s_267)))"
" s_270))"
"((mod-path53_269)"
"(let-values(((s_271)"
"(cdr"
" s_267)))"
"(let-values(((s_272)"
"(if(syntax?$1"
" s_271)"
"(syntax-e$1"
" s_271)"
" s_271)))"
"(if(pair?"
" s_272)"
"(let-values(((mod-path54_273)"
"(let-values(((s_274)"
"(car"
" s_272)))"
" s_274))"
"(()"
"(let-values(((s_275)"
"(cdr"
" s_272)))"
"(let-values(((s_276)"
"(if(syntax?$1"
" s_275)"
"(syntax-e$1"
" s_275)"
" s_275)))"
"(if(null?"
" s_276)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_264))))))"
"(values"
" mod-path54_273))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_264))))))"
"(values"
" all-from52_268"
" mod-path53_269))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_264)))))"
"(values"
" #t"
" all-from50_265"
" mod-path51_266))))))"
"(begin"
"(parse-all-from"
" mod-path51_252"
" orig-s_2"
" self_4"
" null"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11"
" ctx_6)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_277"
" all-from-except55_278"
" mod-path56_279"
" id57_280)"
"(let-values(((s_293)"
" disarmed-spec_31))"
"(let-values(((orig-s_294)"
" s_293))"
"(let-values(((all-from-except55_295"
" mod-path56_296"
" id57_297)"
"(let-values(((s_298)"
"(if(syntax?$1"
" s_293)"
"(syntax-e$1"
" s_293)"
" s_293)))"
"(if(pair?"
" s_298)"
"(let-values(((all-from-except58_299)"
"(let-values(((s_302)"
"(car"
" s_298)))"
" s_302))"
"((mod-path59_300"
" id60_301)"
"(let-values(((s_303)"
"(cdr"
" s_298)))"
"(let-values(((s_304)"
"(if(syntax?$1"
" s_303)"
"(syntax-e$1"
" s_303)"
" s_303)))"
"(if(pair?"
" s_304)"
"(let-values(((mod-path61_305)"
"(let-values(((s_307)"
"(car"
" s_304)))"
" s_307))"
"((id62_306)"
"(let-values(((s_308)"
"(cdr"
" s_304)))"
"(let-values(((s_309)"
"(if(syntax?$1"
" s_308)"
"(syntax-e$1"
" s_308)"
" s_308)))"
"(let-values(((flat-s_310)"
"(to-syntax-list.1"
" s_309)))"
"(if(not"
" flat-s_310)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_294))"
"(let-values()"
"(let-values(((id_311)"
"(let-values(((lst_312)"
" flat-s_310))"
"(begin"
"(if(list?"
" lst_312)"
"(void)"
"(let-values()"
"(in-list"
" lst_312)))"
"((letrec-values(((for-loop_313)"
"(lambda(id_314"
" lst_315)"
"(if(pair?"
" lst_315)"
"(let-values(((s_316)"
"(unsafe-car"
" lst_315)))"
"(let-values(((id_317)"
"(let-values(((id_318)"
" id_314))"
"(let-values(((id_319)"
"(let-values()"
"(let-values(((id63_320)"
"(let-values()"
"(if(let-values(((or-part_321)"
"(if(syntax?$1"
" s_316)"
"(symbol?"
"(syntax-e$1"
" s_316))"
" #f)))"
"(if or-part_321"
" or-part_321"
"(symbol?"
" s_316)))"
" s_316"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_294"
" s_316)))))"
"(cons"
" id63_320"
" id_318)))))"
"(values"
" id_319)))))"
"(for-loop_313"
" id_317"
"(unsafe-cdr"
" lst_315))))"
" id_314))))"
" for-loop_313)"
" null"
" lst_312)))))"
"(alt-reverse"
" id_311)))))))))"
"(values"
" mod-path61_305"
" id62_306))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_294))))))"
"(values"
" all-from-except58_299"
" mod-path59_300"
" id60_301))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_294)))))"
"(values"
" #t"
" all-from-except55_295"
" mod-path56_296"
" id57_297))))))"
"(begin"
"(parse-all-from"
" mod-path56_279"
" orig-s_2"
" self_4"
" id57_280"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11"
" ctx_6)"
"(values"
" null"
"(list"
" spec_22))))))))"
"(if(unsafe-fx<"
" index_36"
" 11)"
"(if(unsafe-fx<"
" index_36"
" 10)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_322"
" all-defined64_323)"
"(let-values(((s_332)"
" disarmed-spec_31))"
"(let-values(((orig-s_333)"
" s_332))"
"(let-values(((all-defined64_334)"
"(let-values(((s_335)"
"(if(syntax?$1"
" s_332)"
"(syntax-e$1"
" s_332)"
" s_332)))"
"(if(pair?"
" s_335)"
"(let-values(((all-defined65_336)"
"(let-values(((s_337)"
"(car"
" s_335)))"
" s_337))"
"(()"
"(let-values(((s_338)"
"(cdr"
" s_335)))"
"(let-values(((s_339)"
"(if(syntax?$1"
" s_338)"
"(syntax-e$1"
" s_338)"
" s_338)))"
"(if(null?"
" s_339)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_333))))))"
"(values"
" all-defined65_336))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_333)))))"
"(values"
" #t"
" all-defined64_334))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" null"
" #f"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_340"
" all-defined-except66_341"
" id67_342)"
"(let-values(((s_353)"
" disarmed-spec_31))"
"(let-values(((orig-s_354)"
" s_353))"
"(let-values(((all-defined-except66_355"
" id67_356)"
"(let-values(((s_357)"
"(if(syntax?$1"
" s_353)"
"(syntax-e$1"
" s_353)"
" s_353)))"
"(if(pair?"
" s_357)"
"(let-values(((all-defined-except68_358)"
"(let-values(((s_360)"
"(car"
" s_357)))"
" s_360))"
"((id69_359)"
"(let-values(((s_361)"
"(cdr"
" s_357)))"
"(let-values(((s_362)"
"(if(syntax?$1"
" s_361)"
"(syntax-e$1"
" s_361)"
" s_361)))"
"(let-values(((flat-s_363)"
"(to-syntax-list.1"
" s_362)))"
"(if(not"
" flat-s_363)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_354))"
"(let-values()"
"(let-values(((id_364)"
"(let-values(((lst_365)"
" flat-s_363))"
"(begin"
"(if(list?"
" lst_365)"
"(void)"
"(let-values()"
"(in-list"
" lst_365)))"
"((letrec-values(((for-loop_366)"
"(lambda(id_367"
" lst_368)"
"(if(pair?"
" lst_368)"
"(let-values(((s_369)"
"(unsafe-car"
" lst_368)))"
"(let-values(((id_370)"
"(let-values(((id_371)"
" id_367))"
"(let-values(((id_372)"
"(let-values()"
"(let-values(((id70_373)"
"(let-values()"
"(if(let-values(((or-part_374)"
"(if(syntax?$1"
" s_369)"
"(symbol?"
"(syntax-e$1"
" s_369))"
" #f)))"
"(if or-part_374"
" or-part_374"
"(symbol?"
" s_369)))"
" s_369"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_354"
" s_369)))))"
"(cons"
" id70_373"
" id_371)))))"
"(values"
" id_372)))))"
"(for-loop_366"
" id_370"
"(unsafe-cdr"
" lst_368))))"
" id_367))))"
" for-loop_366)"
" null"
" lst_365)))))"
"(alt-reverse"
" id_364)))))))))"
"(values"
" all-defined-except68_358"
" id69_359))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_354)))))"
"(values"
" #t"
" all-defined-except66_355"
" id67_356))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" id67_342"
" #f"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22)))))))"
"(if(unsafe-fx<"
" index_36"
" 12)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_375"
" prefix-all-defined71_376"
" id:prefix72_377)"
"(let-values(((s_388)"
" disarmed-spec_31))"
"(let-values(((orig-s_389)"
" s_388))"
"(let-values(((prefix-all-defined71_390"
" id:prefix72_391)"
"(let-values(((s_392)"
"(if(syntax?$1"
" s_388)"
"(syntax-e$1"
" s_388)"
" s_388)))"
"(if(pair?"
" s_392)"
"(let-values(((prefix-all-defined73_393)"
"(let-values(((s_395)"
"(car"
" s_392)))"
" s_395))"
"((id:prefix74_394)"
"(let-values(((s_396)"
"(cdr"
" s_392)))"
"(let-values(((s_397)"
"(if(syntax?$1"
" s_396)"
"(syntax-e$1"
" s_396)"
" s_396)))"
"(if(pair?"
" s_397)"
"(let-values(((id:prefix75_398)"
"(let-values(((s_399)"
"(car"
" s_397)))"
"(if(let-values(((or-part_400)"
"(if(syntax?$1"
" s_399)"
"(symbol?"
"(syntax-e$1"
" s_399))"
" #f)))"
"(if or-part_400"
" or-part_400"
"(symbol?"
" s_399)))"
" s_399"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_389"
" s_399))))"
"(()"
"(let-values(((s_401)"
"(cdr"
" s_397)))"
"(let-values(((s_402)"
"(if(syntax?$1"
" s_401)"
"(syntax-e$1"
" s_401)"
" s_401)))"
"(if(null?"
" s_402)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_389))))))"
"(values"
" id:prefix75_398))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_389))))))"
"(values"
" prefix-all-defined73_393"
" id:prefix74_394))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_389)))))"
"(values"
" #t"
" prefix-all-defined71_390"
" id:prefix72_391))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" null"
"(syntax-e$1"
" id:prefix72_377)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(if(unsafe-fx<"
" index_36"
" 13)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_33"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_403"
" prefix-all-defined-except76_404"
" id:prefix77_405"
" id78_406)"
"(let-values(((s_419)"
" disarmed-spec_31))"
"(let-values(((orig-s_420)"
" s_419))"
"(let-values(((prefix-all-defined-except76_421"
" id:prefix77_422"
" id78_423)"
"(let-values(((s_424)"
"(if(syntax?$1"
" s_419)"
"(syntax-e$1"
" s_419)"
" s_419)))"
"(if(pair?"
" s_424)"
"(let-values(((prefix-all-defined-except79_425)"
"(let-values(((s_428)"
"(car"
" s_424)))"
" s_428))"
"((id:prefix80_426"
" id81_427)"
"(let-values(((s_429)"
"(cdr"
" s_424)))"
"(let-values(((s_430)"
"(if(syntax?$1"
" s_429)"
"(syntax-e$1"
" s_429)"
" s_429)))"
"(if(pair?"
" s_430)"
"(let-values(((id:prefix82_431)"
"(let-values(((s_433)"
"(car"
" s_430)))"
"(if(let-values(((or-part_434)"
"(if(syntax?$1"
" s_433)"
"(symbol?"
"(syntax-e$1"
" s_433))"
" #f)))"
"(if or-part_434"
" or-part_434"
"(symbol?"
" s_433)))"
" s_433"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_420"
" s_433))))"
"((id83_432)"
"(let-values(((s_435)"
"(cdr"
" s_430)))"
"(let-values(((s_436)"
"(if(syntax?$1"
" s_435)"
"(syntax-e$1"
" s_435)"
" s_435)))"
"(let-values(((flat-s_437)"
"(to-syntax-list.1"
" s_436)))"
"(if(not"
" flat-s_437)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_420))"
"(let-values()"
"(let-values(((id_438)"
"(let-values(((lst_439)"
" flat-s_437))"
"(begin"
"(if(list?"
" lst_439)"
"(void)"
"(let-values()"
"(in-list"
" lst_439)))"
"((letrec-values(((for-loop_440)"
"(lambda(id_441"
" lst_442)"
"(if(pair?"
" lst_442)"
"(let-values(((s_443)"
"(unsafe-car"
" lst_442)))"
"(let-values(((id_444)"
"(let-values(((id_445)"
" id_441))"
"(let-values(((id_446)"
"(let-values()"
"(let-values(((id84_447)"
"(let-values()"
"(if(let-values(((or-part_448)"
"(if(syntax?$1"
" s_443)"
"(symbol?"
"(syntax-e$1"
" s_443))"
" #f)))"
"(if or-part_448"
" or-part_448"
"(symbol?"
" s_443)))"
" s_443"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_420"
" s_443)))))"
"(cons"
" id84_447"
" id_445)))))"
"(values"
" id_446)))))"
"(for-loop_440"
" id_444"
"(unsafe-cdr"
" lst_442))))"
" id_441))))"
" for-loop_440)"
" null"
" lst_439)))))"
"(alt-reverse"
" id_438)))))))))"
"(values"
" id:prefix82_431"
" id83_432))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_420))))))"
"(values"
" prefix-all-defined-except79_425"
" id:prefix80_426"
" id81_427))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_420)))))"
"(values"
" #t"
" prefix-all-defined-except76_421"
" id:prefix77_422"
" id78_423))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" id78_406"
"(syntax-e$1"
" id:prefix77_405)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values(((ok?_449"
" expand85_450"
" id86_451"
" datum87_452)"
"(let-values(((s_494)"
" disarmed-spec_31))"
"(let-values(((orig-s_495)"
" s_494))"
"(let-values(((expand85_496"
" id86_497"
" datum87_498)"
"(let-values(((s_499)"
"(if(syntax?$1"
" s_494)"
"(syntax-e$1"
" s_494)"
" s_494)))"
"(if(pair?"
" s_499)"
"(let-values(((expand88_500)"
"(let-values(((s_503)"
"(car"
" s_499)))"
" s_503))"
"((id89_501"
" datum90_502)"
"(let-values(((s_504)"
"(cdr"
" s_499)))"
"(let-values(((s_505)"
"(if(syntax?$1"
" s_504)"
"(syntax-e$1"
" s_504)"
" s_504)))"
"(if(pair?"
" s_505)"
"(let-values(((id91_506"
" datum92_507)"
"(let-values(((s_508)"
"(car"
" s_505)))"
"(let-values(((s_509)"
"(if(syntax?$1"
" s_508)"
"(syntax-e$1"
" s_508)"
" s_508)))"
"(if(pair?"
" s_509)"
"(let-values(((id93_510)"
"(let-values(((s_512)"
"(car"
" s_509)))"
"(if(let-values(((or-part_513)"
"(if(syntax?$1"
" s_512)"
"(symbol?"
"(syntax-e$1"
" s_512))"
" #f)))"
"(if or-part_513"
" or-part_513"
"(symbol?"
" s_512)))"
" s_512"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_495"
" s_512))))"
"((datum94_511)"
"(let-values(((s_514)"
"(cdr"
" s_509)))"
" s_514)))"
"(values"
" id93_510"
" datum94_511))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_495)))))"
"(()"
"(let-values(((s_515)"
"(cdr"
" s_505)))"
"(let-values(((s_516)"
"(if(syntax?$1"
" s_515)"
"(syntax-e$1"
" s_515)"
" s_515)))"
"(if(null?"
" s_516)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_495))))))"
"(values"
" id91_506"
" datum92_507))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_495))))))"
"(values"
" expand88_500"
" id89_501"
" datum90_502))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_495)))))"
"(values"
" #t"
" expand85_496"
" id86_497"
" datum87_498))))))"
"(let-values(((ok?_465"
" expand95_466"
" form96_467)"
"(let-values(((s_517)"
" disarmed-spec_31))"
"(let-values(((orig-s_518)"
" s_517))"
"(let-values(((expand95_519"
" form96_520)"
"(let-values(((s_521)"
"(if(syntax?$1"
" s_517)"
"(syntax-e$1"
" s_517)"
" s_517)))"
"(if(pair?"
" s_521)"
"(let-values(((expand97_522)"
"(let-values(((s_524)"
"(car"
" s_521)))"
" s_524))"
"((form98_523)"
"(let-values(((s_525)"
"(cdr"
" s_521)))"
"(let-values(((s_526)"
"(if(syntax?$1"
" s_525)"
"(syntax-e$1"
" s_525)"
" s_525)))"
"(if(pair?"
" s_526)"
"(let-values(((form99_527)"
"(let-values(((s_528)"
"(car"
" s_526)))"
" s_528))"
"(()"
"(let-values(((s_529)"
"(cdr"
" s_526)))"
"(let-values(((s_530)"
"(if(syntax?$1"
" s_529)"
"(syntax-e$1"
" s_529)"
" s_529)))"
"(if(null?"
" s_530)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_518))))))"
"(values"
" form99_527))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_518))))))"
"(values"
" expand97_522"
" form98_523))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_518)))))"
"(values"
" #t"
" expand95_519"
" form96_520))))))"
"(let-values(((exp-spec_478)"
"(let-values(((temp104_531)"
" form96_467)"
"((temp105_532)"
"(let-values(((v_533)"
" ctx_6))"
"(let-values(((the-struct_534)"
" v_533))"
"(if(expand-context/outer?"
" the-struct_534)"
"(let-values(((only-immediate?106_535)"
" #t)"
"((def-ctx-scopes107_536)"
"(box"
" null))"
"((inner108_537)"
"(root-expand-context/outer-inner"
" v_533)))"
"(expand-context/outer1.1"
" inner108_537"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_534)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_534)"
"(root-expand-context/outer-frame-id"
" the-struct_534)"
"(expand-context/outer-context"
" the-struct_534)"
"(expand-context/outer-env"
" the-struct_534)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_534)"
"(expand-context/outer-scopes"
" the-struct_534)"
" def-ctx-scopes107_536"
"(expand-context/outer-binding-layer"
" the-struct_534)"
"(expand-context/outer-reference-records"
" the-struct_534)"
" only-immediate?106_535"
"(expand-context/outer-need-eventually-defined"
" the-struct_534)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_534)"
"(expand-context/outer-name"
" the-struct_534)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                               \"expand-context/outer?\""
" the-struct_534))))))"
"(expand5.1"
" #f"
" #f"
" temp104_531"
" temp105_532))))"
"(let-values((()"
"(begin"
"(if(if(pair?"
"(syntax-e$1"
" exp-spec_478))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" exp-spec_478)))"
"(eq?"
" 'begin"
"(core-form-sym"
" exp-spec_478"
" at-phase_10))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                   \"expansion was not a `begin' sequence\""
" orig-s_2"
" spec_22)))"
"(values))))"
"(let-values(((ok?_479"
" begin100_480"
" spec101_481)"
"(let-values(((s_538)"
" exp-spec_478))"
"(let-values(((orig-s_539)"
" s_538))"
"(let-values(((begin100_540"
" spec101_541)"
"(let-values(((s_542)"
"(if(syntax?$1"
" s_538)"
"(syntax-e$1"
" s_538)"
" s_538)))"
"(if(pair?"
" s_542)"
"(let-values(((begin102_543)"
"(let-values(((s_545)"
"(car"
" s_542)))"
" s_545))"
"((spec103_544)"
"(let-values(((s_546)"
"(cdr"
" s_542)))"
"(let-values(((s_547)"
"(if(syntax?$1"
" s_546)"
"(syntax-e$1"
" s_546)"
" s_546)))"
"(let-values(((flat-s_548)"
"(to-syntax-list.1"
" s_547)))"
"(if(not"
" flat-s_548)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_539))"
"(let-values()"
" flat-s_548)))))))"
"(values"
" begin102_543"
" spec103_544))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_539)))))"
"(values"
" #t"
" begin100_540"
" spec101_541))))))"
"(let-values(((track-stxes_492"
" exp-specs_493)"
"(loop_8"
" spec101_481"
" at-phase_10"
" protected?_11"
" layer_12)))"
"(values"
"(list*"
" spec_22"
" exp-spec_478"
" track-stxes_492)"
" exp-specs_493)))))))))))))))))))))"
"(values"
"(cons"
" track-stxes1_29"
" track-stxes_25)"
"(cons"
" exp-specs2_30"
" exp-specs_26))))))"
"(values"
" track-stxes_27"
" exp-specs_28)))))"
"(for-loop_18"
" track-stxes_23"
" exp-specs_24"
"(unsafe-cdr lst_21))))"
"(values track-stxes_19 exp-specs_20)))))"
" for-loop_18)"
" null"
" null"
" lst_17)))))"
"(values(alt-reverse track-stxes_15)(alt-reverse exp-specs_16)))))"
"(values(apply append track-stxess_13)(apply append exp-specss_14))))))"
" loop_8)"
" specs_1"
" phase_5"
" #f"
" 'raw))))"
"(define-values"
"(parse-identifier!)"
"(lambda(spec_549 orig-s_550 sym_551 at-phase_552 ns_553 rp_554 protected?_555)"
"(let-values(((b_556)(resolve+shift/extra-inspector spec_549 at-phase_552 ns_553)))"
"(let-values((()"
"(begin"
"(if b_556"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                           \"provided identifier is not defined or required\""
" orig-s_550"
" spec_549)))"
"(values))))"
"(let-values(((as-transformer?_557)(binding-for-transformer? b_556 spec_549 at-phase_552 ns_553)))"
"(let-values(((immed-b_558)"
"(let-values(((spec118_560) spec_549)((at-phase119_561) at-phase_552)((temp120_562) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f temp120_562 #t #f #f spec118_560 at-phase119_561))))"
"(let-values(((rp109_564) rp_554)"
"((sym110_565) sym_551)"
"((at-phase111_566) at-phase_552)"
"((b112_567) b_556)"
"((immed-b113_568) immed-b_558)"
"((spec114_569) spec_549)"
"((orig-s115_570) orig-s_550)"
"((protected?116_571) protected?_555)"
"((as-transformer?117_572) as-transformer?_557))"
"(add-provide!101.1"
" protected?116_571"
" as-transformer?117_572"
" rp109_564"
" sym110_565"
" at-phase111_566"
" b112_567"
" immed-b113_568"
" spec114_569"
" orig-s115_570))))))))"
"(define-values"
"(parse-struct!)"
"(lambda(id:struct_573 orig-s_574 fields_575 at-phase_576 ns_577 rp_578 protected?_579)"
"(let-values(((mk_580)"
"(lambda(fmt_582)"
"(let-values(((sym_583)(string->symbol(format fmt_582(syntax-e$1 id:struct_573)))))"
"(datum->syntax$1 id:struct_573 sym_583 id:struct_573)))))"
"(let-values(((mk2_581)"
"(lambda(fmt_584 field-id_585)"
"(let-values(((sym_586)"
"(string->symbol"
"(format fmt_584(syntax-e$1 id:struct_573)(syntax-e$1 field-id_585)))))"
"(datum->syntax$1 id:struct_573 sym_586 id:struct_573)))))"
"(begin"
"(let-values(((pos->vals_587 pos-next_588 init_589 pos-cont?_590 val-cont?_591 all-cont?_592)"
"                        (make-sequence '(fmt) (list \"~a\" \"make-~a\" \"struct:~a\" \"~a?\"))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_593)"
"(lambda(fold-var_594 pos_595)"
"(if(if pos-cont?_590(pos-cont?_590 pos_595) #t)"
"(let-values(((fmt_596)(pos->vals_587 pos_595)))"
"(if(if val-cont?_591(val-cont?_591 fmt_596) #t)"
"(let-values(((fold-var_597)"
"(let-values()"
"(let-values(((fold-var_599)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_600)(mk_580 fmt_596)))"
"(parse-identifier!"
" id_600"
" orig-s_574"
"(syntax-e$1 id_600)"
" at-phase_576"
" ns_577"
" rp_578"
" protected?_579)))"
"(void)))))"
"(values fold-var_599)))))"
"(if(if all-cont?_592(all-cont?_592 pos_595 fmt_596) #t)"
"(for-loop_593 fold-var_597(pos-next_588 pos_595))"
" fold-var_597))"
" fold-var_594))"
" fold-var_594))))"
" for-loop_593)"
"(void)"
" init_589)))"
"(let-values(((lst_601) fields_575))"
"(begin"
"(if(list? lst_601)(void)(let-values()(in-list lst_601)))"
"((letrec-values(((for-loop_602)"
"(lambda(fold-var_603 lst_604)"
"(if(pair? lst_604)"
"(let-values(((field_605)(unsafe-car lst_604)))"
"(let-values(((fold-var_606)"
"(let-values()"
"(let-values(((fold-var_608)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((get-id_609)"
"                                                                                        (mk2_581 \"~a-~a\" field_605)))"
"(let-values(((set-id_610)"
"(mk2_581"
"                                                                                           \"set-~a-~a!\""
" field_605)))"
"(begin"
"(parse-identifier!"
" get-id_609"
" orig-s_574"
"(syntax-e$1 get-id_609)"
" at-phase_576"
" ns_577"
" rp_578"
" protected?_579)"
"(parse-identifier!"
" set-id_610"
" orig-s_574"
"(syntax-e$1 set-id_610)"
" at-phase_576"
" ns_577"
" rp_578"
" protected?_579)))))"
"(void)))))"
"(values fold-var_608)))))"
"(for-loop_602 fold-var_606(unsafe-cdr lst_604))))"
" fold-var_603))))"
" for-loop_602)"
"(void)"
" lst_601))))))))"
"(define-values"
"(parse-all-from)"
"(lambda(mod-path-stx_611 orig-s_612 self_613 except-ids_614 at-phase_615 ns_616 rp_617 protected?_618 ctx_619)"
"(let-values(((mod-path_620)(syntax->datum$1 mod-path-stx_611)))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_620)"
"(void)"
"(let-values()"
"                          (raise-syntax-error$1 provide-form-name \"not a module path\" orig-s_612 mod-path-stx_611)))"
"(values))))"
"(let-values(((mpi_621)(module-path->mpi/context mod-path_620 ctx_619)))"
"(parse-all-from-module mpi_621 #f orig-s_612 except-ids_614 #f at-phase_615 ns_616 rp_617 protected?_618))))))"
"(define-values"
"(parse-all-from-module)"
"(lambda(mpi_622 matching-stx_623 orig-s_624 except-ids_625 prefix-sym_626 at-phase_627 ns_628 rp_629 protected?_630)"
"(let-values(((requireds_631)(extract-module-requires rp_629 mpi_622 at-phase_627)))"
"(let-values(((phase-desc_632)"
"(lambda()"
"(if(zero-phase? at-phase_627)"
"                        (let-values () \"\")"
"(if(label-phase? at-phase_627)"
"                          (let-values () \" for-label\")"
"                          (let-values () (format \" for phase ~a\" at-phase_627)))))))"
"(let-values((()"
"(begin"
"(if requireds_631"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                             (format \"cannot provide from a module without a matching require~a\" (phase-desc_632))"
" orig-s_624"
" matching-stx_623)))"
"(values))))"
"(let-values(((add-prefix_633)"
"(lambda(sym_635)"
"                          (if prefix-sym_626 (string->symbol (format \"~a~a\" prefix-sym_626 sym_635)) sym_635))))"
"(let-values(((found_634)(make-hasheq)))"
"(begin"
"(let-values(((lst_636) requireds_631))"
"(begin"
"(if(list? lst_636)(void)(let-values()(in-list lst_636)))"
"((letrec-values(((for-loop_637)"
"(lambda(fold-var_638 lst_639)"
"(if(pair? lst_639)"
"(let-values(((i_640)(unsafe-car lst_639)))"
"(let-values(((fold-var_641)"
"(let-values()"
"(let-values(((fold-var_643)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_644)"
"(required-id i_640)))"
"(let-values(((phase_645)"
"(required-phase i_640)))"
"(if(let-values(((or-part_646)"
"(if matching-stx_623"
"(not"
"(if(eqv?"
" phase_645"
" at-phase_627)"
"(free-identifier=?$1"
" id_644"
"(datum->syntax$1"
" matching-stx_623"
"(syntax-e$1"
" id_644))"
" phase_645"
" phase_645)"
" #f))"
" #f)))"
"(if or-part_646"
" or-part_646"
"(let-values(((lst_647)"
" except-ids_625))"
"(begin"
"(if(list? lst_647)"
"(void)"
"(let-values()"
"(in-list lst_647)))"
"((letrec-values(((for-loop_648)"
"(lambda(result_649"
" lst_650)"
"(if(pair?"
" lst_650)"
"(let-values(((except-id_651)"
"(unsafe-car"
" lst_650)))"
"(let-values(((result_652)"
"(let-values()"
"(let-values(((result_654)"
"(let-values()"
"(let-values()"
"(if(free-identifier=?$1"
" id_644"
" except-id_651"
" phase_645"
" phase_645)"
"(hash-set!"
" found_634"
" except-id_651"
" #t)"
" #f)))))"
"(values"
" result_654)))))"
"(if(not"
"((lambda x_655"
" result_652)"
" except-id_651))"
"(for-loop_648"
" result_652"
"(unsafe-cdr"
" lst_650))"
" result_652)))"
" result_649))))"
" for-loop_648)"
" #f"
" lst_647)))))"
"(void)"
"(let-values()"
"(let-values(((b_656)"
"(resolve+shift/extra-inspector"
" id_644"
" phase_645"
" ns_628)))"
"(let-values(((immed-b_657)"
"(let-values(((id130_659)"
" id_644)"
"((phase131_660)"
" phase_645)"
"((temp132_661)"
" #t))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp132_661"
" #t"
" #f"
" #f"
" id130_659"
" phase131_660))))"
"(let-values(((rp121_663)"
" rp_629)"
"((temp122_664)"
"(add-prefix_633"
"(syntax-e$1"
" id_644)))"
"((phase123_665)"
" phase_645)"
"((b124_666)"
" b_656)"
"((immed-b125_667)"
" immed-b_657)"
"((id126_668)"
" id_644)"
"((orig-s127_669)"
" orig-s_624)"
"((protected?128_670)"
" protected?_630)"
"((temp129_671)"
"(required-as-transformer?"
" i_640)))"
"(add-provide!101.1"
" protected?128_670"
" temp129_671"
" rp121_663"
" temp122_664"
" phase123_665"
" b124_666"
" immed-b125_667"
" id126_668"
" orig-s127_669)))))))))"
"(void)))))"
"(values fold-var_643)))))"
"(for-loop_637 fold-var_641(unsafe-cdr lst_639))))"
" fold-var_638))))"
" for-loop_637)"
"(void)"
" lst_636)))"
"(if(=(hash-count found_634)(length except-ids_625))"
"(void)"
"(let-values()"
"(let-values(((lst_672) except-ids_625))"
"(begin"
"(if(list? lst_672)(void)(let-values()(in-list lst_672)))"
"((letrec-values(((for-loop_673)"
"(lambda(fold-var_674 lst_675)"
"(if(pair? lst_675)"
"(let-values(((except-id_676)(unsafe-car lst_675)))"
"(let-values(((fold-var_677)"
"(let-values()"
"(let-values(((fold-var_679)"
"(let-values()"
"(begin"
"(let-values()"
"(if(let-values(((or-part_680)"
"(hash-ref"
" found_634"
" except-id_676"
" #f)))"
"(if or-part_680"
" or-part_680"
"(let-values(((lst_681)"
" requireds_631))"
"(begin"
"(if(list? lst_681)"
"(void)"
"(let-values()"
"(in-list lst_681)))"
"((letrec-values(((for-loop_682)"
"(lambda(result_683"
" lst_684)"
"(if(pair?"
" lst_684)"
"(let-values(((i_685)"
"(unsafe-car"
" lst_684)))"
"(let-values(((result_686)"
"(let-values()"
"(let-values(((result_688)"
"(let-values()"
"(let-values()"
"(let-values(((id_689)"
"(required-id"
" i_685)))"
"(let-values(((phase_690)"
"(required-phase"
" i_685)))"
"(free-identifier=?$1"
" id_689"
" except-id_676"
" phase_690"
" phase_690)))))))"
"(values"
" result_688)))))"
"(if(not"
"((lambda x_691"
" result_686)"
" i_685))"
"(for-loop_682"
" result_686"
"(unsafe-cdr"
" lst_684))"
" result_686)))"
" result_683))))"
" for-loop_682)"
" #f"
" lst_681)))))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"(if matching-stx_623"
"                                                                                            \"excluded identifier was not defined or required in the module~a\""
"                                                                                            \"excluded identifier was not required from the specified module~a\")"
"(phase-desc_632))"
" orig-s_624"
" except-id_676))))"
"(void)))))"
"(values fold-var_679)))))"
"(for-loop_673 fold-var_677(unsafe-cdr lst_675))))"
" fold-var_674))))"
" for-loop_673)"
"(void)"
" lst_672)))))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:expanded+parsed expanded+parsed1.1 expanded+parsed? expanded+parsed-s expanded+parsed-parsed)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expanded+parsed"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'expanded+parsed)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 's)"
"(make-struct-field-accessor -ref_4 1 'parsed))))"
"(define-values"
"(struct:semi-parsed-define-values"
" semi-parsed-define-values2.1"
" semi-parsed-define-values?"
" semi-parsed-define-values-s"
" semi-parsed-define-values-syms"
" semi-parsed-define-values-ids"
" semi-parsed-define-values-rhs)"
"(let-values(((struct:_26 make-_27 ?_28 -ref_29 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-define-values"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'semi-parsed-define-values)))))"
"(values"
" struct:_26"
" make-_27"
" ?_28"
"(make-struct-field-accessor -ref_29 0 's)"
"(make-struct-field-accessor -ref_29 1 'syms)"
"(make-struct-field-accessor -ref_29 2 'ids)"
"(make-struct-field-accessor -ref_29 3 'rhs))))"
"(define-values"
"(struct:semi-parsed-begin-for-syntax"
" semi-parsed-begin-for-syntax3.1"
" semi-parsed-begin-for-syntax?"
" semi-parsed-begin-for-syntax-s"
" semi-parsed-begin-for-syntax-body)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-begin-for-syntax"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'semi-parsed-begin-for-syntax)))))"
"(values"
" struct:_61"
" make-_62"
" ?_63"
"(make-struct-field-accessor -ref_64 0 's)"
"(make-struct-field-accessor -ref_64 1 'body))))"
"(define-values"
"(parsed-only)"
"(lambda(l_86)"
"(alt-reverse"
"(let-values(((lst_87) l_86))"
"(begin"
"(if(list? lst_87)(void)(let-values()(in-list lst_87)))"
"((letrec-values(((for-loop_88)"
"(lambda(fold-var_89 lst_90)"
"(if(pair? lst_90)"
"(let-values(((i_91)(unsafe-car lst_90)))"
"(let-values(((fold-var_92)"
"(let-values(((fold-var_93) fold-var_89))"
"(if(let-values(((or-part_94)(parsed? i_91)))"
"(if or-part_94"
" or-part_94"
"(let-values(((or-part_95)(expanded+parsed? i_91)))"
"(if or-part_95"
" or-part_95"
"(semi-parsed-begin-for-syntax? i_91)))))"
"(let-values(((fold-var_96) fold-var_93))"
"(let-values(((fold-var_97)"
"(let-values()"
"(cons"
"(let-values()"
"(if(expanded+parsed? i_91)"
"(let-values()(expanded+parsed-parsed i_91))"
"(if(semi-parsed-begin-for-syntax? i_91)"
"(let-values()"
"(parsed-begin-for-syntax21.1"
"(semi-parsed-begin-for-syntax-s i_91)"
"(parsed-only"
"(semi-parsed-begin-for-syntax-body"
" i_91))))"
"(let-values() i_91))))"
" fold-var_96))))"
"(values fold-var_97)))"
" fold-var_93))))"
"(for-loop_88 fold-var_92(unsafe-cdr lst_90))))"
" fold-var_89))))"
" for-loop_88)"
" null"
" lst_87))))))"
"(define-values"
"(syntax-only)"
"(lambda(l_98)"
"(alt-reverse"
"(let-values(((lst_99) l_98))"
"(begin"
"(if(list? lst_99)(void)(let-values()(in-list lst_99)))"
"((letrec-values(((for-loop_100)"
"(lambda(fold-var_101 lst_102)"
"(if(pair? lst_102)"
"(let-values(((i_103)(unsafe-car lst_102)))"
"(let-values(((fold-var_104)"
"(let-values(((fold-var_105) fold-var_101))"
"(if(let-values(((or-part_106)(syntax?$1 i_103)))"
"(if or-part_106"
" or-part_106"
"(let-values(((or-part_107)(expanded+parsed? i_103)))"
"(if or-part_107"
" or-part_107"
"(semi-parsed-begin-for-syntax? i_103)))))"
"(let-values(((fold-var_108) fold-var_105))"
"(let-values(((fold-var_109)"
"(let-values()"
"(cons"
"(let-values()"
"(if(expanded+parsed? i_103)"
"(let-values()(expanded+parsed-s i_103))"
"(if(semi-parsed-begin-for-syntax? i_103)"
"(let-values()"
"(let-values(((s_110)"
"(semi-parsed-begin-for-syntax-s"
" i_103)))"
"(let-values(((nested-bodys_111)"
"(semi-parsed-begin-for-syntax-body"
" i_103)))"
"(let-values(((disarmed-s_112)"
"(syntax-disarm$1"
" s_110)))"
"(let-values(((ok?_113"
" begin-for-syntax7_114"
" _8_115)"
"(let-values(((s_126)"
" disarmed-s_112))"
"(let-values(((orig-s_127)"
" s_126))"
"(let-values(((begin-for-syntax7_128"
" _8_129)"
"(let-values(((s_130)"
"(if(syntax?$1"
" s_126)"
"(syntax-e$1"
" s_126)"
" s_126)))"
"(if(pair?"
" s_130)"
"(let-values(((begin-for-syntax9_131)"
"(let-values(((s_133)"
"(car"
" s_130)))"
" s_133))"
"((_10_132)"
"(let-values(((s_134)"
"(cdr"
" s_130)))"
"(let-values(((s_135)"
"(if(syntax?$1"
" s_134)"
"(syntax-e$1"
" s_134)"
" s_134)))"
"(let-values(((flat-s_136)"
"(to-syntax-list.1"
" s_135)))"
"(if(not"
" flat-s_136)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                 \"bad syntax\""
" orig-s_127))"
"(let-values()"
" flat-s_136)))))))"
"(values"
" begin-for-syntax9_131"
" _10_132))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_127)))))"
"(values"
" #t"
" begin-for-syntax7_128"
" _8_129))))))"
"(let-values(((s11_137) s_110)"
"((temp12_138)"
"(list*"
" begin-for-syntax7_114"
"(syntax-only"
" nested-bodys_111))))"
"(rebuild62.1"
" #f"
" #f"
" s11_137"
" temp12_138)))))))"
"(let-values() i_103))))"
" fold-var_108))))"
"(values fold-var_109)))"
" fold-var_105))))"
"(for-loop_100 fold-var_104(unsafe-cdr lst_102))))"
" fold-var_101))))"
" for-loop_100)"
" null"
" lst_99))))))"
"(void)"
"(void)"
"(define-values(check-cross-phase-persistent-form)(lambda(bodys_1)(check-body bodys_1)))"
"(define-values"
"(check-body)"
"(lambda(bodys_2)"
"(let-values(((lst_3) bodys_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(fold-var_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((body_7)(unsafe-car lst_6)))"
"(let-values(((fold-var_8)"
"(let-values()"
"(let-values(((fold-var_10)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_11)"
"(if(expanded+parsed? body_7)"
"(expanded+parsed-parsed body_7)"
" body_7)))"
"(if(parsed-define-values? p_11)"
"(let-values()"
"(check-expr"
"(parsed-define-values-rhs p_11)"
"(length(parsed-define-values-syms p_11))"
" p_11))"
"(if(let-values(((or-part_12)"
"(parsed-#%declare? p_11)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(parsed-module? p_11)))"
"(if or-part_13"
" or-part_13"
"(syntax?$1 p_11)))))"
"(let-values()(void))"
"(let-values()(disallow p_11))))))"
"(void)))))"
"(values fold-var_10)))))"
"(for-loop_4 fold-var_8(unsafe-cdr lst_6))))"
" fold-var_5))))"
" for-loop_4)"
"(void)"
" lst_3)))))"
"(define-values"
"(check-expr)"
"(lambda(e_14 num-results_15 enclosing_16)"
"(if(let-values(((or-part_17)(parsed-lambda? e_14)))(if or-part_17 or-part_17(parsed-case-lambda? e_14)))"
"(let-values()(check-count 1 num-results_15 enclosing_16))"
"(if(parsed-quote? e_14)"
"(let-values()(begin(check-datum(parsed-quote-datum e_14) e_14)(check-count 1 num-results_15 enclosing_16)))"
"(if(parsed-app? e_14)"
"(let-values()"
"(let-values(((rands_18)(cdr(parsed-app-rator+rands e_14))))"
"(begin"
"(let-values(((lst_19) rands_18))"
"(begin"
"(if(list? lst_19)(void)(let-values()(in-list lst_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_21 lst_22)"
"(if(pair? lst_22)"
"(let-values(((rand_23)(unsafe-car lst_22)))"
"(let-values(((fold-var_24)"
"(let-values()"
"(let-values(((fold-var_26)"
"(let-values()"
"(begin"
"(let-values()"
"(check-expr rand_23 1 e_14))"
"(void)))))"
"(values fold-var_26)))))"
"(for-loop_20 fold-var_24(unsafe-cdr lst_22))))"
" fold-var_21))))"
" for-loop_20)"
"(void)"
" lst_19)))"
"(let-values(((tmp_27)(cross-phase-primitive-name(car(parsed-app-rator+rands e_14)))))"
"(if(if(equal? tmp_27 'cons) #t(equal? tmp_27 'list))"
"(let-values()(check-count 1 num-results_15 enclosing_16))"
"(if(equal? tmp_27 'make-struct-type)"
"(let-values()(check-count 5 num-results_15 enclosing_16))"
"(if(equal? tmp_27 'make-struct-type-property)"
"(let-values()(check-count 3 num-results_15 enclosing_16))"
"(if(equal? tmp_27 'gensym)"
"(let-values()"
"(if(let-values(((or-part_28)(= 0(length rands_18))))"
"(if or-part_28"
" or-part_28"
"(if(= 1(length rands_18))(quoted-string?(car rands_18)) #f)))"
"(void)"
"(let-values()(disallow e_14))))"
"(if(equal? tmp_27 'string->uninterned-symbol)"
"(let-values()"
"(if(if(= 1(length rands_18))(quoted-string?(car rands_18)) #f)"
"(void)"
"(let-values()(disallow e_14))))"
"(let-values()(disallow e_14)))))))))))"
"(void))))))"
"(define-values"
"(check-count)"
"(lambda(is-num_29 expected-num_30 enclosing_31)"
"(if(= is-num_29 expected-num_30)(void)(let-values()(disallow enclosing_31)))))"
"(define-values"
"(check-datum)"
"(lambda(d_32 e_33)"
"(if(let-values(((or-part_34)(number? d_32)))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35)(boolean? d_32)))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36)(symbol? d_32)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(string? d_32)))(if or-part_37 or-part_37(bytes? d_32)))))))))"
"(let-values()(void))"
"(let-values()(disallow e_33)))))"
"(define-values(quoted-string?)(lambda(e_38)(if(parsed-quote? e_38)(string?(parsed-quote-datum e_38)) #f)))"
"(define-values"
"(cross-phase-primitive-name)"
"(lambda(id_39)"
"(if(parsed-id? id_39)"
"(let-values()"
"(let-values(((b_40)(parsed-id-binding id_39)))"
"(if(module-binding? b_40)"
"(if(eq? runtime-module-name(1/module-path-index-resolve(module-binding-module b_40)))"
"(module-binding-sym b_40)"
" #f)"
" #f)))"
"(let-values() #f))))"
"(define-values"
"(disallow)"
"(lambda(body_41)"
"(raise-syntax-error$1"
" 'module"
"     \"not allowed in a cross-phase persistent module\""
"(if(parsed? body_41)(datum->syntax$1 #f body_41(parsed-s body_41)) body_41))))"
"(void)"
"(void)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module"
"(lambda(s_51 ctx_52)"
"(begin"
"(if(eq?(expand-context-context ctx_52) 'top-level)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((obs_53)(expand-context-observer ctx_52)))"
"(if obs_53(let-values()(let-values()(call-expand-observe obs_53 'prim-module)))(void)))"
"               (raise-syntax-error$1 #f \"allowed only at the top level\" s_51))))"
"(let-values()"
"(let-values(((s225_54) s_51)((ctx226_55) ctx_52)((temp227_56) #f))"
"(expand-module18.1 #f #f #f #f #f #f #f #f #f #f #f #f #f #f s225_54 ctx226_55 temp227_56)))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module*"
"(lambda(s_57 ctx_58)"
"(begin"
"(let-values(((obs_59)(expand-context-observer ctx_58)))"
"(if obs_59(let-values()(let-values()(call-expand-observe obs_59 'prim-module)))(void)))"
"         (raise-syntax-error$1 #f \"illegal use (not in a module top-level)\" s_57)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%module-begin"
"(lambda(s_60 ctx_61)"
"(begin"
"(let-values(((obs_62)(expand-context-observer ctx_61)))"
"(if obs_62(let-values()(let-values()(call-expand-observe obs_62 'prim-module-begin)))(void)))"
"(if(eq?(expand-context-context ctx_61) 'module-begin)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not in a module-definition context\" s_60)))"
"(if(expand-context-module-begin-k ctx_61)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not currently transforming a module\" s_60)))"
"((expand-context-module-begin-k ctx_61)"
" s_60"
"(let-values(((v_63) ctx_61))"
"(let-values(((the-struct_64) v_63))"
"(if(expand-context/outer? the-struct_64)"
"(let-values(((inner228_65)"
"(let-values(((the-struct_66)(root-expand-context/outer-inner v_63)))"
"(if(expand-context/inner? the-struct_66)"
"(let-values(((module-begin-k229_67) #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_66)"
"(root-expand-context/inner-top-level-bind-scope the-struct_66)"
"(root-expand-context/inner-all-scopes-stx the-struct_66)"
"(root-expand-context/inner-defined-syms the-struct_66)"
"(root-expand-context/inner-counter the-struct_66)"
"(root-expand-context/inner-lift-key the-struct_66)"
"(expand-context/inner-to-parsed? the-struct_66)"
"(expand-context/inner-phase the-struct_66)"
"(expand-context/inner-namespace the-struct_66)"
"(expand-context/inner-user-env the-struct_66)"
"(expand-context/inner-just-once? the-struct_66)"
" module-begin-k229_67"
"(expand-context/inner-allow-unbound? the-struct_66)"
"(expand-context/inner-in-local-expand? the-struct_66)"
"(expand-context/inner-stops the-struct_66)"
"(expand-context/inner-declared-submodule-names the-struct_66)"
"(expand-context/inner-lifts the-struct_66)"
"(expand-context/inner-lift-envs the-struct_66)"
"(expand-context/inner-module-lifts the-struct_66)"
"(expand-context/inner-require-lifts the-struct_66)"
"(expand-context/inner-to-module-lifts the-struct_66)"
"(expand-context/inner-requires+provides the-struct_66)"
"(expand-context/inner-observer the-struct_66)"
"(expand-context/inner-for-serializable? the-struct_66)))"
"                                  (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_66)))))"
"(expand-context/outer1.1"
" inner228_65"
"(root-expand-context/outer-post-expansion-scope the-struct_64)"
"(root-expand-context/outer-use-site-scopes the-struct_64)"
"(root-expand-context/outer-frame-id the-struct_64)"
"(expand-context/outer-context the-struct_64)"
"(expand-context/outer-env the-struct_64)"
"(expand-context/outer-post-expansion-scope-action the-struct_64)"
"(expand-context/outer-scopes the-struct_64)"
"(expand-context/outer-def-ctx-scopes the-struct_64)"
"(expand-context/outer-binding-layer the-struct_64)"
"(expand-context/outer-reference-records the-struct_64)"
"(expand-context/outer-only-immediate? the-struct_64)"
"(expand-context/outer-need-eventually-defined the-struct_64)"
"(expand-context/outer-current-introduction-scopes the-struct_64)"
"(expand-context/outer-name the-struct_64)))"
"                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_64)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%declare"
"(lambda(s_68 ctx_69)"
"(begin"
"(let-values(((obs_70)(expand-context-observer ctx_69)))"
"(if obs_70(let-values()(let-values()(call-expand-observe obs_70 'prim-declare)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_68)))))"
" print-values)"
"(define-values"
"(expand-module18.1)"
"(lambda(always-produce-compiled?1_71"
" always-produce-compiled?8_72"
" enclosing-all-scopes-stx3_73"
" enclosing-all-scopes-stx10_74"
" enclosing-is-cross-phase-persistent?4_75"
" enclosing-is-cross-phase-persistent?11_76"
" enclosing-requires+provides5_77"
" enclosing-requires+provides12_78"
" keep-enclosing-scope-at-phase2_79"
" keep-enclosing-scope-at-phase9_80"
" modules-being-compiled7_81"
" modules-being-compiled14_82"
" mpis-for-enclosing-reset6_83"
" mpis-for-enclosing-reset13_84"
" s15_85"
" init-ctx16_86"
" enclosing-self17_87)"
"(let-values(((s_88) s15_85))"
"(let-values(((init-ctx_89) init-ctx16_86))"
"(let-values(((enclosing-self_90) enclosing-self17_87))"
"(let-values(((always-produce-compiled?_91)"
"(if always-produce-compiled?8_72 always-produce-compiled?1_71 #f)))"
"(let-values(((keep-enclosing-scope-at-phase_92)"
"(if keep-enclosing-scope-at-phase9_80 keep-enclosing-scope-at-phase2_79 #f)))"
"(let-values(((enclosing-all-scopes-stx_93)"
"(if enclosing-all-scopes-stx10_74 enclosing-all-scopes-stx3_73 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_94)"
"(if enclosing-is-cross-phase-persistent?11_76"
" enclosing-is-cross-phase-persistent?4_75"
" #f)))"
"(let-values(((enclosing-r+p_95)"
"(if enclosing-requires+provides12_78 enclosing-requires+provides5_77 #f)))"
"(let-values(((mpis-for-enclosing-reset_96)"
"(if mpis-for-enclosing-reset13_84 mpis-for-enclosing-reset6_83 #f)))"
"(let-values(((modules-being-compiled_97)"
"(if modules-being-compiled14_82 modules-being-compiled7_81(make-hasheq))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_155)(expand-context-observer init-ctx_89)))"
"(if obs_155"
"(let-values()(let-values()(call-expand-observe obs_155 'prim-module)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_98)(syntax-disarm$1 s_88)))"
"(let-values(((ok?_99"
" module230_100"
" id:module-name231_101"
" initial-require232_102"
" body233_103)"
"(let-values(((s_156) disarmed-s_98))"
"(let-values(((orig-s_157) s_156))"
"(let-values(((module230_158"
" id:module-name231_159"
" initial-require232_160"
" body233_161)"
"(let-values(((s_162)"
"(if(syntax?$1 s_156)"
"(syntax-e$1 s_156)"
" s_156)))"
"(if(pair? s_162)"
"(let-values(((module234_163)"
"(let-values(((s_167)(car s_162)))"
" s_167))"
"((id:module-name235_164"
" initial-require236_165"
" body237_166)"
"(let-values(((s_168)(cdr s_162)))"
"(let-values(((s_169)"
"(if(syntax?$1 s_168)"
"(syntax-e$1 s_168)"
" s_168)))"
"(if(pair? s_169)"
"(let-values(((id:module-name238_170)"
"(let-values(((s_173)"
"(car"
" s_169)))"
"(if(let-values(((or-part_174)"
"(if(syntax?$1"
" s_173)"
"(symbol?"
"(syntax-e$1"
" s_173))"
" #f)))"
"(if or-part_174"
" or-part_174"
"(symbol?"
" s_173)))"
" s_173"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"not an identifier\""
" orig-s_157"
" s_173))))"
"((initial-require239_171"
" body240_172)"
"(let-values(((s_175)"
"(cdr"
" s_169)))"
"(let-values(((s_176)"
"(if(syntax?$1"
" s_175)"
"(syntax-e$1"
" s_175)"
" s_175)))"
"(if(pair?"
" s_176)"
"(let-values(((initial-require241_177)"
"(let-values(((s_179)"
"(car"
" s_176)))"
" s_179))"
"((body242_178)"
"(let-values(((s_180)"
"(cdr"
" s_176)))"
"(let-values(((s_181)"
"(if(syntax?$1"
" s_180)"
"(syntax-e$1"
" s_180)"
" s_180)))"
"(let-values(((flat-s_182)"
"(to-syntax-list.1"
" s_181)))"
"(if(not"
" flat-s_182)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_157))"
"(let-values()"
" flat-s_182)))))))"
"(values"
" initial-require241_177"
" body242_178))"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_157))))))"
"(values"
" id:module-name238_170"
" initial-require239_171"
" body240_172))"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_157))))))"
"(values"
" module234_163"
" id:module-name235_164"
" initial-require236_165"
" body237_166))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_157)))))"
"(values"
" #t"
" module230_158"
" id:module-name231_159"
" initial-require232_160"
" body233_161))))))"
"(let-values(((rebuild-s_118)"
"(let-values(((init-ctx249_183) init-ctx_89)((s250_184) s_88))"
"(keep-as-needed55.1 #f #f init-ctx249_183 s250_184))))"
"(let-values(((initial-require_119)(syntax->datum$1 initial-require232_102)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_185) keep-enclosing-scope-at-phase_92))"
"(if or-part_185"
" or-part_185"
"(1/module-path? initial-require_119)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                         \"not a module path\""
" s_88"
" initial-require232_102)))"
"(values))))"
"(let-values(((phase_120) 0))"
"(let-values(((module-name-sym_121)(syntax-e$1 id:module-name231_101)))"
"(let-values(((outside-scope_122)(new-scope 'module)))"
"(let-values(((inside-scope_123)(new-multi-scope module-name-sym_121)))"
"(let-values(((self_124)"
"(make-self-module-path-index"
"(if enclosing-self_90"
" module-name-sym_121"
"(string->uninterned-symbol"
"(symbol->string module-name-sym_121)))"
" enclosing-self_90)))"
"(let-values(((enclosing-mod_125)"
"(if enclosing-self_90"
"                                                                (1/module-path-index-join '(submod \"..\") self_124)"
" #f)))"
"(let-values((()"
"(begin"
"(if(if enclosing-mod_125"
" mpis-for-enclosing-reset_96"
" #f)"
"(let-values()"
"(set-box!"
" mpis-for-enclosing-reset_96"
"(cons"
" enclosing-mod_125"
"(unbox mpis-for-enclosing-reset_96))))"
"(void))"
"(values))))"
"(let-values(((apply-module-scopes_126)"
"(make-apply-module-scopes"
" outside-scope_122"
" inside-scope_123"
" init-ctx_89"
" keep-enclosing-scope-at-phase_92"
" self_124"
" enclosing-self_90"
" enclosing-mod_125)))"
"(let-values(((initial-require-s_127)"
"(apply-module-scopes_126 initial-require232_102)))"
"(let-values(((all-scopes-s_128)"
"(if enclosing-all-scopes-stx_93"
"(apply-module-scopes_126"
"(syntax-shift-phase-level$1"
" enclosing-all-scopes-stx_93"
" keep-enclosing-scope-at-phase_92))"
" initial-require-s_127)))"
"(let-values(((root-ctx_129)"
"(let-values(((temp251_187)"
"(if keep-enclosing-scope-at-phase_92"
"(root-expand-context-module-scopes"
" init-ctx_89)"
" null))"
"((outside-scope252_188)"
" outside-scope_122)"
"((inside-scope253_189)"
" inside-scope_123)"
"((all-scopes-s254_190)"
" all-scopes-s_128))"
"(make-root-expand-context11.1"
" all-scopes-s254_190"
" #t"
" temp251_187"
" #t"
" outside-scope252_188"
" #t"
" inside-scope253_189"
" #t))))"
"(let-values(((new-module-scopes_130)"
"(root-expand-context-module-scopes"
" root-ctx_129)))"
"(let-values(((frame-id_131)"
"(root-expand-context-frame-id"
" root-ctx_129)))"
"(let-values(((make-m-ns246_133)"
"(lambda(for-submodule?243_191"
" for-submodule?244_192"
" ns245_193)"
"(let-values(((ns_194) ns245_193))"
"(let-values(((for-submodule?_195)"
"(if for-submodule?244_192"
" for-submodule?243_191"
"(if enclosing-self_90"
" #t"
" #f))))"
"(let-values()"
"(let-values(((ns255_197) ns_194)"
"((self256_198)"
" self_124)"
"((root-ctx257_199)"
" root-ctx_129)"
"((for-submodule?258_200)"
" for-submodule?_195))"
"(make-module-namespace48.1"
" for-submodule?258_200"
" self256_198"
" root-ctx257_199"
" ns255_197))))))))"
"(let-values(((unpack247_134)"
"(lambda(given-kws_201"
" given-args_202"
" ns245_203)"
"(let-values(((for-submodule?244_204)"
"(pair? given-kws_201)))"
"(let-values(((for-submodule?243_205)"
"(if for-submodule?244_204"
"(car given-args_202)"
"(void))))"
"(make-m-ns246_133"
" for-submodule?243_205"
" for-submodule?244_204"
" ns245_203))))))"
"(let-values(((make-m-ns248_135)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_206"
" given-argc_207)"
"(if(= given-argc_207 3)"
"(let-values(((l1_208)"
" given-kws_206))"
"(let-values(((l1_209)"
"(if(null?"
" l1_208)"
" l1_208"
"(if(eq?"
"(car"
" l1_208)"
" '#:for-submodule?)"
"(cdr l1_208)"
" l1_208))))"
"(null? l1_209)))"
" #f))"
"(case-lambda"
"((given-kws_210"
" given-args_211"
" ns_212)"
"(unpack247_134"
" given-kws_210"
" given-args_211"
" ns_212)))"
" null"
" '(#:for-submodule?)"
"(let-values(((make-m-ns_213)"
"(case-lambda"
"((ns_214)"
"(unpack247_134"
" null"
" null"
" ns_214)))))"
" make-m-ns_213))))"
"(let-values(((m-ns_136)"
"(let-values(((temp259_215)"
"(expand-context-namespace"
" init-ctx_89)))"
"(make-m-ns246_133"
" #f"
" #f"
" temp259_215))))"
"(let-values(((ctx_137)"
"(let-values(((v_216)"
"(copy-root-expand-context"
" init-ctx_89"
" root-ctx_129)))"
"(let-values(((the-struct_217)"
" v_216))"
"(if(expand-context/outer?"
" the-struct_217)"
"(let-values(((post-expansion-scope-action260_218)"
" add-scope)"
"((inner261_219)"
"(let-values(((the-struct_220)"
"(root-expand-context/outer-inner"
" v_216)))"
"(if(expand-context/inner?"
" the-struct_220)"
"(let-values(((allow-unbound?262_221)"
" #f)"
"((namespace263_222)"
" m-ns_136)"
"((phase264_223)"
" phase_120)"
"((just-once?265_224)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_220)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_220)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_220)"
"(root-expand-context/inner-defined-syms"
" the-struct_220)"
"(root-expand-context/inner-counter"
" the-struct_220)"
"(root-expand-context/inner-lift-key"
" the-struct_220)"
"(expand-context/inner-to-parsed?"
" the-struct_220)"
" phase264_223"
" namespace263_222"
"(expand-context/inner-user-env"
" the-struct_220)"
" just-once?265_224"
"(expand-context/inner-module-begin-k"
" the-struct_220)"
" allow-unbound?262_221"
"(expand-context/inner-in-local-expand?"
" the-struct_220)"
"(expand-context/inner-stops"
" the-struct_220)"
"(expand-context/inner-declared-submodule-names"
" the-struct_220)"
"(expand-context/inner-lifts"
" the-struct_220)"
"(expand-context/inner-lift-envs"
" the-struct_220)"
"(expand-context/inner-module-lifts"
" the-struct_220)"
"(expand-context/inner-require-lifts"
" the-struct_220)"
"(expand-context/inner-to-module-lifts"
" the-struct_220)"
"(expand-context/inner-requires+provides"
" the-struct_220)"
"(expand-context/inner-observer"
" the-struct_220)"
"(expand-context/inner-for-serializable?"
" the-struct_220)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                               \"expand-context/inner?\""
" the-struct_220)))))"
"(expand-context/outer1.1"
" inner261_219"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_217)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_217)"
"(root-expand-context/outer-frame-id"
" the-struct_217)"
"(expand-context/outer-context"
" the-struct_217)"
"(expand-context/outer-env"
" the-struct_217)"
" post-expansion-scope-action260_218"
"(expand-context/outer-scopes"
" the-struct_217)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_217)"
"(expand-context/outer-binding-layer"
" the-struct_217)"
"(expand-context/outer-reference-records"
" the-struct_217)"
"(expand-context/outer-only-immediate?"
" the-struct_217)"
"(expand-context/outer-need-eventually-defined"
" the-struct_217)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_217)"
"(expand-context/outer-name"
" the-struct_217)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                             \"expand-context/outer?\""
" the-struct_217))))))"
"(let-values(((bodys_138)"
"(let-values(((scoped-s_225)"
"(apply-module-scopes_126"
" disarmed-s_98)))"
"(let-values(((ok?_226"
" _266_227"
" _267_228"
" _268_229"
" body269_230)"
"(let-values(((s_245)"
" scoped-s_225))"
"(let-values(((orig-s_246)"
" s_245))"
"(let-values(((_266_247"
" _267_248"
" _268_249"
" body269_250)"
"(let-values(((s_251)"
"(if(syntax?$1"
" s_245)"
"(syntax-e$1"
" s_245)"
" s_245)))"
"(if(pair?"
" s_251)"
"(let-values(((_270_252)"
"(let-values(((s_256)"
"(car"
" s_251)))"
" s_256))"
"((_271_253"
" _272_254"
" body273_255)"
"(let-values(((s_257)"
"(cdr"
" s_251)))"
"(let-values(((s_258)"
"(if(syntax?$1"
" s_257)"
"(syntax-e$1"
" s_257)"
" s_257)))"
"(if(pair?"
" s_258)"
"(let-values(((_274_259)"
"(let-values(((s_262)"
"(car"
" s_258)))"
" s_262))"
"((_275_260"
" body276_261)"
"(let-values(((s_263)"
"(cdr"
" s_258)))"
"(let-values(((s_264)"
"(if(syntax?$1"
" s_263)"
"(syntax-e$1"
" s_263)"
" s_263)))"
"(if(pair?"
" s_264)"
"(let-values(((_277_265)"
"(let-values(((s_267)"
"(car"
" s_264)))"
" s_267))"
"((body278_266)"
"(let-values(((s_268)"
"(cdr"
" s_264)))"
"(let-values(((s_269)"
"(if(syntax?$1"
" s_268)"
"(syntax-e$1"
" s_268)"
" s_268)))"
"(let-values(((flat-s_270)"
"(to-syntax-list.1"
" s_269)))"
"(if(not"
" flat-s_270)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_246))"
"(let-values()"
" flat-s_270)))))))"
"(values"
" _277_265"
" body278_266))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_246))))))"
"(values"
" _274_259"
" _275_260"
" body276_261))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad syntax\""
" orig-s_246))))))"
"(values"
" _270_252"
" _271_253"
" _272_254"
" body273_255))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_246)))))"
"(values"
" #t"
" _266_247"
" _267_248"
" _268_249"
" body269_250))))))"
" body269_230))))"
"(let-values(((requires+provides_139)"
"(make-requires+provides"
" self_124)))"
"(let-values(((defined-syms_140)"
"(root-expand-context-defined-syms"
" root-ctx_129)))"
"(let-values(((compiled-submodules_141)"
"(make-hasheq)))"
"(let-values(((compiled-module-box_142)"
"(box #f)))"
"(let-values(((mpis-to-reset_143)"
"(box null)))"
"(let-values(((initial-require!_144)"
"(lambda()"
"(if(not"
" keep-enclosing-scope-at-phase_92)"
"(let-values()"
"(let-values(((initial-require279_272)"
" initial-require_119)"
"((self280_273)"
" self_124)"
"((all-scopes-s281_274)"
" all-scopes-s_128)"
"((m-ns282_275)"
" m-ns_136)"
"((requires+provides283_276)"
" requires+provides_139)"
"((temp284_277)"
" 'module))"
"(perform-initial-require!40.1"
" temp284_277"
" initial-require279_272"
" self280_273"
" all-scopes-s281_274"
" m-ns282_275"
" requires+provides283_276)))"
"(let-values()"
"(begin"
"(add-required-module!"
" requires+provides_139"
" enclosing-mod_125"
" keep-enclosing-scope-at-phase_92"
" enclosing-is-cross-phase-persistent?_94)"
"(let-values(((requires+provides285_279)"
" requires+provides_139)"
"((enclosing-r+p286_280)"
" enclosing-r+p_95)"
"((enclosing-mod287_281)"
" enclosing-mod_125)"
"((keep-enclosing-scope-at-phase288_282)"
" keep-enclosing-scope-at-phase_92))"
"(add-enclosing-module-defined-and-required!61.1"
" enclosing-r+p286_280"
" requires+provides285_279"
" enclosing-mod287_281"
" keep-enclosing-scope-at-phase288_282))"
"(let-values(((m-ns289_283)"
" m-ns_136)"
"((enclosing-mod290_284)"
" enclosing-mod_125)"
"((keep-enclosing-scope-at-phase291_285)"
" keep-enclosing-scope-at-phase_92))"
"(namespace-module-visit!102.1"
" #f"
" #f"
" m-ns289_283"
" enclosing-mod290_284"
" keep-enclosing-scope-at-phase291_285))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_286)"
"(expand-context-observer"
" init-ctx_89)))"
"(if obs_286"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_286"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(initial-require!_144)"
"(values))))"
"(let-values(((again?_145)"
" #f))"
"(let-values(((module-begin-k_146)"
"(lambda(mb-s_287"
" ctx_288)"
"(let-values((()"
"(begin"
"(if again?_145"
"(let-values()"
"(begin"
"(requires+provides-reset!"
" requires+provides_139)"
"(initial-require!_144)"
"(hash-clear!"
" compiled-submodules_141)"
"(set-box!"
" compiled-module-box_142"
" #f)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(set! again?_145"
" #t)"
"(values))))"
"(let-values(((added-s_289)"
"(add-scope"
" mb-s_287"
" inside-scope_123)))"
"(let-values((()"
"(begin"
"(let-values(((obs_317)"
"(expand-context-observer"
" ctx_288)))"
"(if obs_317"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_317"
" 'rename-one"
" added-s_289)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-mb-s_290)"
"(syntax-disarm$1"
" added-s_289)))"
"(let-values(((ok?_291"
" #%module-begin292_292"
" body293_293)"
"(let-values(((s_318)"
" disarmed-mb-s_290))"
"(let-values(((orig-s_319)"
" s_318))"
"(let-values(((#%module-begin292_320"
" body293_321)"
"(let-values(((s_322)"
"(if(syntax?$1"
" s_318)"
"(syntax-e$1"
" s_318)"
" s_318)))"
"(if(pair?"
" s_322)"
"(let-values(((#%module-begin294_323)"
"(let-values(((s_325)"
"(car"
" s_322)))"
" s_325))"
"((body295_324)"
"(let-values(((s_326)"
"(cdr"
" s_322)))"
"(let-values(((s_327)"
"(if(syntax?$1"
" s_326)"
"(syntax-e$1"
" s_326)"
" s_326)))"
"(let-values(((flat-s_328)"
"(to-syntax-list.1"
" s_327)))"
"(if(not"
" flat-s_328)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_319))"
"(let-values()"
" flat-s_328)))))))"
"(values"
" #%module-begin294_323"
" body295_324))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_319)))))"
"(values"
" #t"
" #%module-begin292_320"
" body293_321))))))"
"(let-values(((bodys_304)"
" body293_293))"
"(let-values(((rebuild-mb-s_305)"
"(let-values(((ctx296_329)"
" ctx_288)"
"((mb-s297_330)"
" mb-s_287))"
"(keep-as-needed55.1"
" #f"
" #f"
" ctx296_329"
" mb-s297_330))))"
"(let-values(((need-eventually-defined_306)"
"(make-hasheqv)))"
"(let-values(((module-ends_307)"
"(make-shared-module-ends)))"
"(let-values(((declared-keywords_308)"
"(make-hasheq)))"
"(let-values(((declared-submodule-names_309)"
"(make-hasheq)))"
"(let-values(((expression-expanded-bodys_310)"
"((letrec-values(((pass-1-and-2-loop_331)"
"(lambda(bodys_332"
" phase_333)"
"(let-values(((def-ctx-scopes_334)"
"(box"
" null)))"
"(let-values(((partial-body-ctx_335)"
"(let-values(((v_338)"
" ctx_288))"
"(let-values(((the-struct_339)"
" v_338))"
"(if(expand-context/outer?"
" the-struct_339)"
"(let-values(((context307_340)"
" 'module)"
"((only-immediate?308_341)"
" #t)"
"((def-ctx-scopes309_342)"
" def-ctx-scopes_334)"
"((need-eventually-defined310_343)"
" need-eventually-defined_306)"
"((inner311_344)"
"(let-values(((the-struct_345)"
"(root-expand-context/outer-inner"
" v_338)))"
"(if(expand-context/inner?"
" the-struct_345)"
"(let-values(((phase312_346)"
" phase_333)"
"((namespace313_347)"
"(namespace->namespace-at-phase"
" m-ns_136"
" phase_333))"
"((declared-submodule-names314_348)"
" declared-submodule-names_309)"
"((lifts315_349)"
"(let-values(((temp319_353)"
"(make-wrap-as-definition"
" self_124"
" frame-id_131"
" inside-scope_123"
" all-scopes-s_128"
" defined-syms_140"
" requires+provides_139)))"
"(make-lift-context6.1"
" #f"
" #f"
" temp319_353)))"
"((module-lifts316_350)"
"(make-module-lift-context"
" phase_333"
" #t))"
"((require-lifts317_351)"
"(make-require-lift-context"
" phase_333"
"(let-values(((...er/expand/module.rkt:292:64_354)"
" make-parse-lifted-require224.1)"
"((m-ns320_355)"
" m-ns_136)"
"((self321_356)"
" self_124)"
"((requires+provides322_357)"
" requires+provides_139)"
"((declared-submodule-names323_358)"
" declared-submodule-names_309))"
"(make-parse-lifted-require222.1"
" declared-submodule-names323_358"
" m-ns320_355"
" self321_356"
" requires+provides322_357))))"
"((to-module-lifts318_352)"
"(let-values(((phase324_360)"
" phase_333)"
"((module-ends325_361)"
" module-ends_307)"
"((temp326_362)"
" #f))"
"(make-to-module-lift-context26.1"
" temp326_362"
" module-ends325_361"
" phase324_360))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_345)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_345)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_345)"
"(root-expand-context/inner-defined-syms"
" the-struct_345)"
"(root-expand-context/inner-counter"
" the-struct_345)"
"(root-expand-context/inner-lift-key"
" the-struct_345)"
"(expand-context/inner-to-parsed?"
" the-struct_345)"
" phase312_346"
" namespace313_347"
"(expand-context/inner-user-env"
" the-struct_345)"
"(expand-context/inner-just-once?"
" the-struct_345)"
"(expand-context/inner-module-begin-k"
" the-struct_345)"
"(expand-context/inner-allow-unbound?"
" the-struct_345)"
"(expand-context/inner-in-local-expand?"
" the-struct_345)"
"(expand-context/inner-stops"
" the-struct_345)"
" declared-submodule-names314_348"
" lifts315_349"
"(expand-context/inner-lift-envs"
" the-struct_345)"
" module-lifts316_350"
" require-lifts317_351"
" to-module-lifts318_352"
"(expand-context/inner-requires+provides"
" the-struct_345)"
"(expand-context/inner-observer"
" the-struct_345)"
"(expand-context/inner-for-serializable?"
" the-struct_345)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                 \"expand-context/inner?\""
" the-struct_345)))))"
"(expand-context/outer1.1"
" inner311_344"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_339)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_339)"
"(root-expand-context/outer-frame-id"
" the-struct_339)"
" context307_340"
"(expand-context/outer-env"
" the-struct_339)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_339)"
"(expand-context/outer-scopes"
" the-struct_339)"
" def-ctx-scopes309_342"
"(expand-context/outer-binding-layer"
" the-struct_339)"
"(expand-context/outer-reference-records"
" the-struct_339)"
" only-immediate?308_341"
" need-eventually-defined310_343"
"(expand-context/outer-current-introduction-scopes"
" the-struct_339)"
"(expand-context/outer-name"
" the-struct_339)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                               \"expand-context/outer?\""
" the-struct_339))))))"
"(let-values(((partially-expanded-bodys_336)"
"(let-values(((...er/expand/module.rkt:302:11_363)"
" partially-expand-bodys83.1)"
"((bodys327_364)"
" bodys_332)"
"((temp328_365)"
"(zero?"
" phase_333))"
"((phase329_366)"
" phase_333)"
"((partial-body-ctx330_367)"
" partial-body-ctx_335)"
"((m-ns331_368)"
" m-ns_136)"
"((self332_369)"
" self_124)"
"((frame-id333_370)"
" frame-id_131)"
"((requires+provides334_371)"
" requires+provides_139)"
"((need-eventually-defined335_372)"
" need-eventually-defined_306)"
"((all-scopes-s336_373)"
" all-scopes-s_128)"
"((defined-syms337_374)"
" defined-syms_140)"
"((declared-keywords338_375)"
" declared-keywords_308)"
"((declared-submodule-names339_376)"
" declared-submodule-names_309)"
"((compiled-submodules340_377)"
" compiled-submodules_141)"
"((modules-being-compiled341_378)"
" modules-being-compiled_97)"
"((mpis-to-reset342_379)"
" mpis-to-reset_143)"
"((pass-1-and-2-loop343_380)"
" pass-1-and-2-loop_331))"
"(partially-expand-bodys81.1"
" all-scopes-s336_373"
" compiled-submodules340_377"
" partial-body-ctx330_367"
" declared-keywords338_375"
" declared-submodule-names339_376"
" defined-syms337_374"
" frame-id333_370"
" pass-1-and-2-loop343_380"
" modules-being-compiled341_378"
" mpis-to-reset342_379"
" m-ns331_368"
" need-eventually-defined335_372"
" phase329_366"
" requires+provides334_371"
" self332_369"
" temp328_365"
" bodys327_364))))"
"(let-values((()"
"(begin"
"(let-values(((obs_381)"
"(expand-context-observer"
" partial-body-ctx_335)))"
"(if obs_381"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_381"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_337)"
"(let-values(((v_382)"
"(accumulate-def-ctx-scopes"
" partial-body-ctx_335"
" def-ctx-scopes_334)))"
"(let-values(((the-struct_383)"
" v_382))"
"(if(expand-context/outer?"
" the-struct_383)"
"(let-values(((only-immediate?344_384)"
" #f)"
"((def-ctx-scopes345_385)"
" #f)"
"((post-expansion-scope346_386)"
" #f)"
"((inner347_387)"
"(let-values(((the-struct_388)"
"(root-expand-context/outer-inner"
" v_382)))"
"(if(expand-context/inner?"
" the-struct_388)"
"(let-values(((to-module-lifts348_389)"
"(let-values(((phase349_391)"
" phase_333)"
"((module-ends350_392)"
" module-ends_307)"
"((temp351_393)"
" #t))"
"(make-to-module-lift-context26.1"
" temp351_393"
" module-ends350_392"
" phase349_391))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_388)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_388)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_388)"
"(root-expand-context/inner-defined-syms"
" the-struct_388)"
"(root-expand-context/inner-counter"
" the-struct_388)"
"(root-expand-context/inner-lift-key"
" the-struct_388)"
"(expand-context/inner-to-parsed?"
" the-struct_388)"
"(expand-context/inner-phase"
" the-struct_388)"
"(expand-context/inner-namespace"
" the-struct_388)"
"(expand-context/inner-user-env"
" the-struct_388)"
"(expand-context/inner-just-once?"
" the-struct_388)"
"(expand-context/inner-module-begin-k"
" the-struct_388)"
"(expand-context/inner-allow-unbound?"
" the-struct_388)"
"(expand-context/inner-in-local-expand?"
" the-struct_388)"
"(expand-context/inner-stops"
" the-struct_388)"
"(expand-context/inner-declared-submodule-names"
" the-struct_388)"
"(expand-context/inner-lifts"
" the-struct_388)"
"(expand-context/inner-lift-envs"
" the-struct_388)"
"(expand-context/inner-module-lifts"
" the-struct_388)"
"(expand-context/inner-require-lifts"
" the-struct_388)"
" to-module-lifts348_389"
"(expand-context/inner-requires+provides"
" the-struct_388)"
"(expand-context/inner-observer"
" the-struct_388)"
"(expand-context/inner-for-serializable?"
" the-struct_388)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                       \"expand-context/inner?\""
" the-struct_388)))))"
"(expand-context/outer1.1"
" inner347_387"
" post-expansion-scope346_386"
"(root-expand-context/outer-use-site-scopes"
" the-struct_383)"
"(root-expand-context/outer-frame-id"
" the-struct_383)"
"(expand-context/outer-context"
" the-struct_383)"
"(expand-context/outer-env"
" the-struct_383)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_383)"
"(expand-context/outer-scopes"
" the-struct_383)"
" def-ctx-scopes345_385"
"(expand-context/outer-binding-layer"
" the-struct_383)"
"(expand-context/outer-reference-records"
" the-struct_383)"
" only-immediate?344_384"
"(expand-context/outer-need-eventually-defined"
" the-struct_383)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_383)"
"(expand-context/outer-name"
" the-struct_383)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                     \"expand-context/outer?\""
" the-struct_383))))))"
"(let-values(((...er/expand/module.rkt:333:9_394)"
" finish-expanding-body-expressons103.1)"
"((partially-expanded-bodys298_395)"
" partially-expanded-bodys_336)"
"((temp299_396)"
"(zero?"
" phase_333))"
"((phase300_397)"
" phase_333)"
"((body-ctx301_398)"
" body-ctx_337)"
"((self302_399)"
" self_124)"
"((declared-submodule-names303_400)"
" declared-submodule-names_309)"
"((compiled-submodules304_401)"
" compiled-submodules_141)"
"((modules-being-compiled305_402)"
" modules-being-compiled_97)"
"((mpis-to-reset306_403)"
" mpis-to-reset_143))"
"(finish-expanding-body-expressons101.1"
" compiled-submodules304_401"
" body-ctx301_398"
" declared-submodule-names303_400"
" modules-being-compiled305_402"
" mpis-to-reset306_403"
" phase300_397"
" self302_399"
" temp299_396"
" partially-expanded-bodys298_395))))))))))"
" pass-1-and-2-loop_331)"
" bodys_304"
" phase_120)))"
"(let-values((()"
"(begin"
"(check-defined-by-now"
" need-eventually-defined_306"
" self_124)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_404)"
"(expand-context-observer"
" ctx_288)))"
"(if obs_404"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_404"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((fully-expanded-bodys-except-post-submodules_311)"
"(let-values(((...er/expand/module.rkt:352:7_405)"
" resolve-provides119.1)"
"((expression-expanded-bodys352_406)"
" expression-expanded-bodys_310)"
"((requires+provides353_407)"
" requires+provides_139)"
"((declared-submodule-names354_408)"
" declared-submodule-names_309)"
"((m-ns355_409)"
" m-ns_136)"
"((phase356_410)"
" phase_120)"
"((self357_411)"
" self_124)"
"((ctx358_412)"
" ctx_288))"
"(resolve-provides117.1"
" ctx358_412"
" declared-submodule-names354_408"
" m-ns355_409"
" phase356_410"
" requires+provides353_407"
" self357_411"
" expression-expanded-bodys352_406))))"
"(let-values(((is-cross-phase-persistent?_312)"
"(hash-ref"
" declared-keywords_308"
" '#:cross-phase-persistent"
" #f)))"
"(let-values((()"
"(begin"
"(if is-cross-phase-persistent?_312"
"(let-values()"
"(begin"
"(if(requires+provides-can-cross-phase-persistent?"
" requires+provides_139)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"cannot be cross-phase persistent due to required modules\""
" s_88"
"(hash-ref"
" declared-keywords_308"
" '#:cross-phase-persistent))))"
"(check-cross-phase-persistent-form"
" fully-expanded-bodys-except-post-submodules_311)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_413)"
"(expand-context-observer"
" ctx_288)))"
"(if obs_413"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_413"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((submod-m-ns_313)"
"(let-values(((m-ns359_415)"
" m-ns_136)"
"((temp360_416)"
" #t))"
"(make-m-ns246_133"
" temp360_416"
" #t"
" m-ns359_415))))"
"(let-values(((submod-ctx_314)"
"(let-values(((v_417)"
" ctx_288))"
"(let-values(((the-struct_418)"
" v_417))"
"(if(expand-context/outer?"
" the-struct_418)"
"(let-values(((frame-id361_419)"
" #f)"
"((post-expansion-scope362_420)"
" #f)"
"((inner363_421)"
"(let-values(((the-struct_422)"
"(root-expand-context/outer-inner"
" v_417)))"
"(if(expand-context/inner?"
" the-struct_422)"
"(let-values(((namespace364_423)"
" submod-m-ns_313))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_422)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_422)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_422)"
"(root-expand-context/inner-defined-syms"
" the-struct_422)"
"(root-expand-context/inner-counter"
" the-struct_422)"
"(root-expand-context/inner-lift-key"
" the-struct_422)"
"(expand-context/inner-to-parsed?"
" the-struct_422)"
"(expand-context/inner-phase"
" the-struct_422)"
" namespace364_423"
"(expand-context/inner-user-env"
" the-struct_422)"
"(expand-context/inner-just-once?"
" the-struct_422)"
"(expand-context/inner-module-begin-k"
" the-struct_422)"
"(expand-context/inner-allow-unbound?"
" the-struct_422)"
"(expand-context/inner-in-local-expand?"
" the-struct_422)"
"(expand-context/inner-stops"
" the-struct_422)"
"(expand-context/inner-declared-submodule-names"
" the-struct_422)"
"(expand-context/inner-lifts"
" the-struct_422)"
"(expand-context/inner-lift-envs"
" the-struct_422)"
"(expand-context/inner-module-lifts"
" the-struct_422)"
"(expand-context/inner-require-lifts"
" the-struct_422)"
"(expand-context/inner-to-module-lifts"
" the-struct_422)"
"(expand-context/inner-requires+provides"
" the-struct_422)"
"(expand-context/inner-observer"
" the-struct_422)"
"(expand-context/inner-for-serializable?"
" the-struct_422)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                             \"expand-context/inner?\""
" the-struct_422)))))"
"(expand-context/outer1.1"
" inner363_421"
" post-expansion-scope362_420"
"(root-expand-context/outer-use-site-scopes"
" the-struct_418)"
" frame-id361_419"
"(expand-context/outer-context"
" the-struct_418)"
"(expand-context/outer-env"
" the-struct_418)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_418)"
"(expand-context/outer-scopes"
" the-struct_418)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_418)"
"(expand-context/outer-binding-layer"
" the-struct_418)"
"(expand-context/outer-reference-records"
" the-struct_418)"
"(expand-context/outer-only-immediate?"
" the-struct_418)"
"(expand-context/outer-need-eventually-defined"
" the-struct_418)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_418)"
"(expand-context/outer-name"
" the-struct_418)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                           \"expand-context/outer?\""
" the-struct_418))))))"
"(let-values(((declare-enclosing-module_315)"
"(delay"
"(lambda()"
"(let-values(((...er/expand/module.rkt:384:14_424)"
" declare-module-for-expansion143.1)"
"((fully-expanded-bodys-except-post-submodules365_425)"
" fully-expanded-bodys-except-post-submodules_311)"
"((temp366_426)"
" id:module-name231_101)"
"((rebuild-s367_427)"
" rebuild-s_118)"
"((requires+provides368_428)"
" requires+provides_139)"
"((submod-m-ns369_429)"
" submod-m-ns_313)"
"((self370_430)"
" self_124)"
"((enclosing-self371_431)"
" enclosing-self_90)"
"((root-ctx372_432)"
" root-ctx_129)"
"((submod-ctx373_433)"
" submod-ctx_314)"
"((modules-being-compiled374_434)"
" modules-being-compiled_97)"
"((compiled-module-box375_435)"
" compiled-module-box_142))"
"(declare-module-for-expansion141.1"
" submod-ctx373_433"
" enclosing-self371_431"
" compiled-module-box375_435"
" temp366_426"
" modules-being-compiled374_434"
" submod-m-ns369_429"
" rebuild-s367_427"
" requires+provides368_428"
" root-ctx372_432"
" self370_430"
" fully-expanded-bodys-except-post-submodules365_425))))))"
"(let-values(((fully-expanded-bodys_316)"
"(if(stop-at-module*?"
" submod-ctx_314)"
"(let-values()"
" fully-expanded-bodys-except-post-submodules_311)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:401:9_436)"
" expand-post-submodules169.1)"
"((fully-expanded-bodys-except-post-submodules376_437)"
" fully-expanded-bodys-except-post-submodules_311)"
"((declare-enclosing-module377_438)"
" declare-enclosing-module_315)"
"((phase378_439)"
" phase_120)"
"((self379_440)"
" self_124)"
"((requires+provides380_441)"
" requires+provides_139)"
"((is-cross-phase-persistent?381_442)"
" is-cross-phase-persistent?_312)"
"((all-scopes-s382_443)"
" all-scopes-s_128)"
"((mpis-to-reset383_444)"
" mpis-to-reset_143)"
"((declared-submodule-names384_445)"
" declared-submodule-names_309)"
"((compiled-submodules385_446)"
" compiled-submodules_141)"
"((modules-being-compiled386_447)"
" modules-being-compiled_97)"
"((submod-ctx387_448)"
" submod-ctx_314))"
"(expand-post-submodules167.1"
" all-scopes-s382_443"
" compiled-submodules385_446"
" submod-ctx387_448"
" declare-enclosing-module377_438"
" declared-submodule-names384_445"
" is-cross-phase-persistent?381_442"
" modules-being-compiled386_447"
" mpis-to-reset383_444"
" phase378_439"
" requires+provides380_441"
" self379_440"
" fully-expanded-bodys-except-post-submodules376_437))))))"
"(if(expand-context-to-parsed?"
" submod-ctx_314)"
"(let-values()"
"(parsed-#%module-begin24.1"
" rebuild-mb-s_305"
"(parsed-only"
" fully-expanded-bodys_316)))"
"(let-values()"
"(let-values(((mb-result-s_449)"
"(let-values(((rebuild-mb-s388_450)"
" rebuild-mb-s_305)"
"((temp389_451)"
"(list*"
" #%module-begin292_292"
"(syntax-only"
" fully-expanded-bodys_316))))"
"(rebuild62.1"
" #f"
" #f"
" rebuild-mb-s388_450"
" temp389_451))))"
"(if(not"
"(expand-context-in-local-expand?"
" submod-ctx_314))"
"(let-values()"
"(expanded+parsed1.1"
" mb-result-s_449"
"(parsed-#%module-begin24.1"
" rebuild-mb-s_305"
"(parsed-only"
" fully-expanded-bodys_316))))"
"(let-values()"
" mb-result-s_449)))))))))))))))))))))))))))))))"
"(let-values(((mb-ctx_147)"
"(let-values(((v_452)"
" ctx_137))"
"(let-values(((the-struct_453)"
" v_452))"
"(if(expand-context/outer?"
" the-struct_453)"
"(let-values(((context390_454)"
" 'module-begin)"
"((inner391_455)"
"(let-values(((the-struct_456)"
"(root-expand-context/outer-inner"
" v_452)))"
"(if(expand-context/inner?"
" the-struct_456)"
"(let-values(((module-begin-k392_457)"
" module-begin-k_146)"
"((in-local-expand?393_458)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_456)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_456)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_456)"
"(root-expand-context/inner-defined-syms"
" the-struct_456)"
"(root-expand-context/inner-counter"
" the-struct_456)"
"(root-expand-context/inner-lift-key"
" the-struct_456)"
"(expand-context/inner-to-parsed?"
" the-struct_456)"
"(expand-context/inner-phase"
" the-struct_456)"
"(expand-context/inner-namespace"
" the-struct_456)"
"(expand-context/inner-user-env"
" the-struct_456)"
"(expand-context/inner-just-once?"
" the-struct_456)"
" module-begin-k392_457"
"(expand-context/inner-allow-unbound?"
" the-struct_456)"
" in-local-expand?393_458"
"(expand-context/inner-stops"
" the-struct_456)"
"(expand-context/inner-declared-submodule-names"
" the-struct_456)"
"(expand-context/inner-lifts"
" the-struct_456)"
"(expand-context/inner-lift-envs"
" the-struct_456)"
"(expand-context/inner-module-lifts"
" the-struct_456)"
"(expand-context/inner-require-lifts"
" the-struct_456)"
"(expand-context/inner-to-module-lifts"
" the-struct_456)"
"(expand-context/inner-requires+provides"
" the-struct_456)"
"(expand-context/inner-observer"
" the-struct_456)"
"(expand-context/inner-for-serializable?"
" the-struct_456)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                       \"expand-context/inner?\""
" the-struct_456)))))"
"(expand-context/outer1.1"
" inner391_455"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_453)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_453)"
"(root-expand-context/outer-frame-id"
" the-struct_453)"
" context390_454"
"(expand-context/outer-env"
" the-struct_453)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_453)"
"(expand-context/outer-scopes"
" the-struct_453)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_453)"
"(expand-context/outer-binding-layer"
" the-struct_453)"
"(expand-context/outer-reference-records"
" the-struct_453)"
"(expand-context/outer-only-immediate?"
" the-struct_453)"
"(expand-context/outer-need-eventually-defined"
" the-struct_453)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_453)"
"(expand-context/outer-name"
" the-struct_453)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                     \"expand-context/outer?\""
" the-struct_453))))))"
"(let-values(((mb-scopes-s_148)"
"(if keep-enclosing-scope-at-phase_92"
" disarmed-s_98"
" all-scopes-s_128)))"
"(let-values(((mb_149)"
"(let-values(((...er/expand/module.rkt:454:5_459)"
" ensure-module-begin36.1)"
"((bodys394_460)"
" bodys_138)"
"((module-name-sym395_461)"
" module-name-sym_121)"
"((mb-scopes-s396_462)"
" mb-scopes-s_148)"
"((m-ns397_463)"
" m-ns_136)"
"((mb-ctx398_464)"
" mb-ctx_147)"
"((phase399_465)"
" phase_120)"
"((s400_466)"
" s_88))"
"(ensure-module-begin34.1"
" mb-ctx398_464"
" m-ns397_463"
" module-name-sym395_461"
" phase399_465"
" s400_466"
" mb-scopes-s396_462"
" bodys394_460))))"
"(let-values(((expanded-mb_150)"
"(let-values()"
"(let-values(((mb401_467)"
" mb_149)"
"((mb-ctx402_468)"
" mb-ctx_147))"
"(expand5.1"
" #f"
" #f"
" mb401_467"
" mb-ctx402_468)))))"
"(let-values(((requires_151"
" provides_152)"
"(extract-requires-and-provides"
" requires+provides_139"
" self_124"
" self_124)))"
"(let-values(((result-form_153)"
"(if(let-values(((or-part_469)"
"(expand-context-to-parsed?"
" init-ctx_89)))"
"(if or-part_469"
" or-part_469"
" always-produce-compiled?_91))"
"(parsed-module25.1"
" rebuild-s_118"
" #f"
" id:module-name231_101"
" self_124"
" requires_151"
" provides_152"
"(requires+provides-all-bindings-simple?"
" requires+provides_139)"
"(root-expand-context-encode-for-module"
" root-ctx_129"
" self_124"
" self_124)"
"(parsed-#%module-begin-body"
"(if(expanded+parsed?"
" expanded-mb_150)"
"(expanded+parsed-parsed"
" expanded-mb_150)"
" expanded-mb_150))"
"(unbox"
" compiled-module-box_142)"
" compiled-submodules_141)"
" #f)))"
"(let-values(((result-s_154)"
"(if(not"
"(expand-context-to-parsed?"
" init-ctx_89))"
"(let-values()"
"(let-values(((generic-self_470)"
"(make-generic-self-module-path-index"
" self_124)))"
"(begin"
"(imitate-generic-module-path-index!"
" self_124)"
"(let-values(((lst_471)"
"(unbox"
" mpis-to-reset_143)))"
"(begin"
"(if(list?"
" lst_471)"
"(void)"
"(let-values()"
"(in-list"
" lst_471)))"
"((letrec-values(((for-loop_472)"
"(lambda(fold-var_473"
" lst_474)"
"(if(pair?"
" lst_474)"
"(let-values(((mpi_475)"
"(unsafe-car"
" lst_474)))"
"(let-values(((fold-var_476)"
"(let-values()"
"(let-values(((fold-var_478)"
"(let-values()"
"(begin"
"(let-values()"
"(imitate-generic-module-path-index!"
" mpi_475))"
"(void)))))"
"(values"
" fold-var_478)))))"
"(for-loop_472"
" fold-var_476"
"(unsafe-cdr"
" lst_474))))"
" fold-var_473))))"
" for-loop_472)"
"(void)"
" lst_471)))"
"(let-values(((result-s_479)"
"(let-values(((rebuild-s403_480)"
" rebuild-s_118)"
"((temp404_481)"
"(list"
" module230_100"
" id:module-name231_101"
" initial-require-s_127"
"(expanded+parsed-s"
" expanded-mb_150))))"
"(rebuild62.1"
" #f"
" #f"
" rebuild-s403_480"
" temp404_481))))"
"(let-values(((result-s_482)"
"(let-values(((result-s405_483)"
" result-s_479)"
"((self406_484)"
" self_124)"
"((generic-self407_485)"
" generic-self_470))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" result-s405_483"
" self406_484"
" generic-self407_485"
" #f"
" #f))))"
"(let-values(((result-s_486)"
"(attach-root-expand-context-properties"
" result-s_482"
" root-ctx_129"
" self_124"
" generic-self_470)))"
"(let-values(((result-s_487)"
"(if(requires+provides-all-bindings-simple?"
" requires+provides_139)"
"(syntax-property$1"
" result-s_486"
" 'module-body-context-simple?"
" #t)"
" result-s_486)))"
"(begin"
"(let-values(((obs_488)"
"(expand-context-observer"
" init-ctx_89)))"
"(if obs_488"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_488"
" 'rename-one"
" result-s_487)))"
"(void)))"
" result-s_487))))))))"
"(void))))"
"(if(expand-context-to-parsed?"
" init-ctx_89)"
"(let-values()"
" result-form_153)"
"(if always-produce-compiled?_91"
"(let-values()"
"(expanded+parsed1.1"
" result-s_154"
" result-form_153))"
"(let-values()"
" result-s_154))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(lifted/1.1 lifted/2.1 lifted/3.1 lifted/4.1 lifted/5.1)"
"(make-struct-type"
" 'ensure-module-begin"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'ensure-module-begin(case-lambda((self_545 bodys_546)(apply missing-kw self_545 bodys_546 null))))))"
"(current-inspector)"
"(case-lambda((self_547 bodys_548)(apply missing-kw self_547 bodys_548 null)))))"
"(define-values"
"(ensure-module-begin34.1)"
"(lambda(ctx24_549 m-ns23_550 module-name-sym21_551 phase25_552 s26_553 scopes-s22_554 bodys33_555)"
"(let-values(((bodys_556) bodys33_555))"
"(let-values(((module-name-sym_557) module-name-sym21_551))"
"(let-values(((scopes-s_558) scopes-s22_554))"
"(let-values()"
"(let-values(((ctx_560) ctx24_549))"
"(let-values(((phase_561) phase25_552))"
"(let-values(((s_562) s26_553))"
"(let-values()"
"(let-values(((make-mb-ctx_563)"
"(lambda()"
"(let-values(((v_565) ctx_560))"
"(let-values(((the-struct_566) v_565))"
"(if(expand-context/outer? the-struct_566)"
"(let-values(((context408_567) 'module-begin)"
"((only-immediate?409_568) #t)"
"((inner410_569)(root-expand-context/outer-inner v_565)))"
"(expand-context/outer1.1"
" inner410_569"
"(root-expand-context/outer-post-expansion-scope the-struct_566)"
"(root-expand-context/outer-use-site-scopes the-struct_566)"
"(root-expand-context/outer-frame-id the-struct_566)"
" context408_567"
"(expand-context/outer-env the-struct_566)"
"(expand-context/outer-post-expansion-scope-action the-struct_566)"
"(expand-context/outer-scopes the-struct_566)"
"(expand-context/outer-def-ctx-scopes the-struct_566)"
"(expand-context/outer-binding-layer the-struct_566)"
"(expand-context/outer-reference-records the-struct_566)"
" only-immediate?409_568"
"(expand-context/outer-need-eventually-defined the-struct_566)"
"(expand-context/outer-current-introduction-scopes the-struct_566)"
"(expand-context/outer-name the-struct_566)))"
"(raise-argument-error"
" 'struct-copy"
"                                           \"expand-context/outer?\""
" the-struct_566)))))))"
"(let-values(((mb_564)"
"(if(= 1(length bodys_556))"
"(let-values()"
"(begin"
"(let-values(((obs_570)(expand-context-observer ctx_560)))"
"(if obs_570"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_570 'rename-one(car bodys_556))))"
"(void)))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1(car bodys_556)) phase_561))"
"(let-values()(car bodys_556))"
"(let-values()"
"(let-values(((partly-expanded-body_571)"
"(let-values()"
"(let-values(((temp411_572)"
"(add-enclosing-name-property"
"(car bodys_556)"
" module-name-sym_557))"
"((temp412_573)(make-mb-ctx_563)))"
"(expand5.1 #f #f temp411_572 temp412_573)))))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym"
"(syntax-disarm$1 partly-expanded-body_571)"
" phase_561))"
"(let-values() partly-expanded-body_571)"
"(let-values()"
"(let-values(((temp413_575)(list partly-expanded-body_571))"
"((s414_576) s_562)"
"((scopes-s415_577) scopes-s_558)"
"((phase416_578) phase_561)"
"((module-name-sym417_579) module-name-sym_557)"
"((temp418_580)(make-mb-ctx_563))"
"((temp419_581) #f))"
"(add-module-begin45.1"
" temp419_581"
" #t"
" temp413_575"
" s414_576"
" scopes-s415_577"
" phase416_578"
" module-name-sym417_579"
" temp418_580)))))))))"
"(let-values()"
"(let-values(((bodys420_582) bodys_556)"
"((s421_583) s_562)"
"((scopes-s422_584) scopes-s_558)"
"((phase423_585) phase_561)"
"((module-name-sym424_586) module-name-sym_557)"
"((temp425_587)(make-mb-ctx_563)))"
"(add-module-begin45.1"
" #f"
" #f"
" bodys420_582"
" s421_583"
" scopes-s422_584"
" phase423_585"
" module-name-sym424_586"
" temp425_587))))))"
"(add-enclosing-name-property mb_564 module-name-sym_557)))))))))))))"
"(define-values"
"(unpack35.1)"
"(lambda(given-kws_588 given-args_589 bodys33_590)"
"(let-values(((ctx24_591)(car given-args_589))"
"((given-kws_592)(cdr given-kws_588))"
"((given-args_593)(cdr given-args_589)))"
"(let-values(((m-ns23_594)(car given-args_593))"
"((given-kws_595)(cdr given-kws_592))"
"((given-args_596)(cdr given-args_593)))"
"(let-values(((module-name-sym21_597)(car given-args_596))"
"((given-kws_598)(cdr given-kws_595))"
"((given-args_599)(cdr given-args_596)))"
"(let-values(((phase25_600)(car given-args_599))"
"((given-kws_601)(cdr given-kws_598))"
"((given-args_602)(cdr given-args_599)))"
"(let-values(((s26_603)(car given-args_602))"
"((given-kws_604)(cdr given-kws_601))"
"((given-args_605)(cdr given-args_602)))"
"(let-values(((scopes-s22_606)(car given-args_605)))"
"(ensure-module-begin34.1"
" ctx24_591"
" m-ns23_594"
" module-name-sym21_597"
" phase25_600"
" s26_603"
" scopes-s22_606"
" bodys33_590)))))))))"
"(define-values"
"(ensure-module-begin36.1)"
"(lifted/2.1"
"(lambda(given-kws_607 given-argc_608)"
"(if(= given-argc_608 3)"
"(let-values(((l2_609) given-kws_607))"
"(if(pair? l2_609)"
"(if(eq?(car l2_609) '#:ctx)"
"(let-values(((l2_610)(cdr l2_609)))"
"(if(pair? l2_610)"
"(if(eq?(car l2_610) '#:m-ns)"
"(let-values(((l2_611)(cdr l2_610)))"
"(if(pair? l2_611)"
"(if(eq?(car l2_611) '#:module-name-sym)"
"(let-values(((l2_612)(cdr l2_611)))"
"(if(pair? l2_612)"
"(if(eq?(car l2_612) '#:phase)"
"(let-values(((l2_613)(cdr l2_612)))"
"(if(pair? l2_613)"
"(if(eq?(car l2_613) '#:s)"
"(let-values(((l2_614)(cdr l2_613)))"
"(if(pair? l2_614)"
"(if(eq?(car l2_614) '#:scopes-s)(null?(cdr l2_614)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_615 given-args_616 bodys_617)(unpack35.1 given-kws_615 given-args_616 bodys_617)))"
" '(#:ctx #:m-ns #:module-name-sym #:phase #:s #:scopes-s)"
" '(#:ctx #:m-ns #:module-name-sym #:phase #:s #:scopes-s)))"
"(define-values"
"(add-module-begin45.1)"
"(lambda(log-rename-one?37_618"
" log-rename-one?38_619"
" bodys39_620"
" s40_621"
" scopes-s41_622"
" phase42_623"
" module-name-sym43_624"
" mb-ctx44_625)"
"(let-values(((bodys_626) bodys39_620))"
"(let-values(((s_627) s40_621))"
"(let-values(((scopes-s_628) scopes-s41_622))"
"(let-values(((phase_629) phase42_623))"
"(let-values(((module-name-sym_630) module-name-sym43_624))"
"(let-values(((mb-ctx_631) mb-ctx44_625))"
"(let-values(((log-rename-one?_632)(if log-rename-one?38_619 log-rename-one?37_618 #t)))"
"(let-values()"
"(let-values(((disarmed-scopes-s_633)(syntax-disarm$1 scopes-s_628)))"
"(let-values(((mb-id_634)(datum->syntax$1 disarmed-scopes-s_633 '#%module-begin)))"
"(let-values((()"
"(begin"
"(if(let-values(((mb-id426_637) mb-id_634)((phase427_638) phase_629))"
"(resolve29.1 #f #f #f #f #f #f #f #f mb-id426_637 phase427_638))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                             \"no #%module-begin binding in the module's language\""
" s_627)))"
"(values))))"
"(let-values(((mb_635)"
"(datum->syntax$1 disarmed-scopes-s_633(list* mb-id_634 bodys_626) s_627)))"
"(let-values((()"
"(begin"
"(let-values(((obs_639)(expand-context-observer mb-ctx_631)))"
"(if obs_639"
"(let-values()"
"(let-values()(call-expand-observe obs_639 'tag mb_635)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if log-rename-one?_632"
"(let-values()"
"(let-values(((obs_640)(expand-context-observer mb-ctx_631)))"
"(if obs_640"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_640 'rename-one mb_635)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((partly-expanded-mb_636)"
"(let-values()"
"(let-values(((temp428_641)"
"(add-enclosing-name-property mb_635 module-name-sym_630))"
"((mb-ctx429_642) mb-ctx_631))"
"(expand5.1 #f #f temp428_641 mb-ctx429_642)))))"
"(begin"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-mb_636) phase_629))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                         \"expansion of #%module-begin is not a #%plain-module-begin form\""
" s_627"
" partly-expanded-mb_636)))"
" partly-expanded-mb_636))))))))))))))))))"
"(define-values"
"(add-enclosing-name-property)"
"(lambda(stx_672 module-name-sym_673)(syntax-property$1 stx_672 'enclosing-module-name module-name-sym_673)))"
"(define-values"
"(make-apply-module-scopes)"
"(lambda(inside-scope_674"
" outside-scope_675"
" init-ctx_676"
" keep-enclosing-scope-at-phase_677"
" self_678"
" enclosing-self_679"
" enclosing-mod_680)"
"(lambda(s_681)"
"(let-values()"
"(let-values(((s-without-enclosing_682)"
"(if keep-enclosing-scope-at-phase_677"
" s_681"
"(remove-use-site-scopes"
"(remove-scopes s_681(root-expand-context-module-scopes init-ctx_676))"
" init-ctx_676))))"
"(let-values(((s-with-edges_683)"
"(add-scope(add-scope s-without-enclosing_682 outside-scope_675) inside-scope_674)))"
"(let-values(((s-with-suitable-enclosing_684)"
"(if keep-enclosing-scope-at-phase_677"
"(let-values()"
"(let-values(((s-with-edges434_685) s-with-edges_683)"
"((enclosing-self435_686) enclosing-self_679)"
"((enclosing-mod436_687) enclosing-mod_680))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" s-with-edges434_685"
" enclosing-self435_686"
" enclosing-mod436_687"
" #f"
" #f)))"
"(let-values() s-with-edges_683))))"
"(let-values(((s-with-suitable-enclosing430_688) s-with-suitable-enclosing_684)"
"((temp431_689)(make-generic-self-module-path-index self_678))"
"((self432_690) self_678)"
"((temp433_691)(current-code-inspector)))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" s-with-suitable-enclosing430_688"
" temp431_689"
" self432_690"
" temp433_691"
" #t)))))))))"
"(define-values"
"(lifted/6.1 lifted/7.1 lifted/8.1 lifted/9.1 lifted/10.1)"
"(make-struct-type"
" 'partially-expand-bodys"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'partially-expand-bodys(case-lambda((self_692 bodys_693)(apply missing-kw self_692 bodys_693 null))))))"
"(current-inspector)"
"(case-lambda((self_694 bodys_695)(apply missing-kw self_694 bodys_695 null)))))"
"(define-values"
"(partially-expand-bodys81.1)"
"(lambda(all-scopes-stx56_696"
" compiled-submodules60_697"
" ctx50_698"
" declared-keywords58_699"
" declared-submodule-names59_700"
" defined-syms57_701"
" frame-id53_702"
" loop63_703"
" modules-being-compiled61_704"
" mpis-to-reset62_705"
" namespace51_706"
" need-eventually-defined55_707"
" phase49_708"
" requires-and-provides54_709"
" self52_710"
" tail?48_711"
" bodys80_712)"
"(let-values(((bodys_713) bodys80_712))"
"(let-values(((tail?_714) tail?48_711))"
"(let-values(((phase_715) phase49_708))"
"(let-values(((partial-body-ctx_716) ctx50_698))"
"(let-values(((m-ns_717) namespace51_706))"
"(let-values(((self_718) self52_710))"
"(let-values(((frame-id_719) frame-id53_702))"
"(let-values(((requires+provides_720) requires-and-provides54_709))"
"(let-values(((need-eventually-defined_721) need-eventually-defined55_707))"
"(let-values(((all-scopes-stx_722) all-scopes-stx56_696))"
"(let-values(((defined-syms_723) defined-syms57_701))"
"(let-values(((declared-keywords_724) declared-keywords58_699))"
"(let-values(((declared-submodule-names_725) declared-submodule-names59_700))"
"(let-values(((compiled-submodules_726) compiled-submodules60_697))"
"(let-values(((modules-being-compiled_727) modules-being-compiled61_704))"
"(let-values(((mpis-to-reset_728) mpis-to-reset62_705))"
"(let-values(((pass-1-and-2-loop_729) loop63_703))"
"(let-values()"
"(begin"
"(namespace-visit-available-modules! m-ns_717 phase_715)"
"((letrec-values(((loop_730)"
"(lambda(tail?_731 bodys_732)"
"(if(null? bodys_732)"
"(let-values()"
"(if tail?_731"
"(let-values()"
"(let-values(((bodys_733)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_716))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_716)))))"
"(if(null? bodys_733)"
" null"
"(loop_730"
" #t"
"(add-post-expansion-scope"
" bodys_733"
" partial-body-ctx_716)))))"
"(let-values() null)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_737)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_737"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_737"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_734)"
"(let-values()"
"(let-values(((temp437_738)"
"(car bodys_732))"
"((partial-body-ctx438_739)"
" partial-body-ctx_716))"
"(expand5.1"
" #f"
" #f"
" temp437_738"
" partial-body-ctx438_739)))))"
"(let-values(((disarmed-exp-body_735)"
"(syntax-disarm$1 exp-body_734)))"
"(let-values(((lifted-defns_736)"
"(get-and-clear-lifts!"
"(expand-context-lifts"
" partial-body-ctx_716))))"
"(begin"
"(if(null? lifted-defns_736)"
"(let-values()"
"(begin"
"(let-values(((obs_740)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_740"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_740"
" 'rename-list"
" lifted-defns_736)))"
"(void)))"
"(let-values(((obs_741)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_741"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_741"
" 'module-lift-loop"
"(append"
" lifted-defns_736"
"(cons"
" exp-body_734"
"(cdr bodys_732))))))"
"(void)))))"
"(let-values()"
"(let-values(((obs_742)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_742"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_742"
" 'module-lift-end-loop"
"(cons"
" exp-body_734"
"(cdr bodys_732)))))"
"(void)))))"
"(let-values(((obs_743)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_743"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_743"
" 'rename-one"
" exp-body_734)))"
"(void)))"
"(let-values(((finish_744)"
"(lambda()"
"(let-values(((tmp_745)"
"(core-form-sym"
" disarmed-exp-body_735"
" phase_715)))"
"(if(equal?"
" tmp_745"
" 'begin)"
"(let-values()"
"(let-values(((ok?_746"
" begin439_747"
" e440_748)"
"(let-values(((s_761)"
" disarmed-exp-body_735))"
"(let-values(((orig-s_762)"
" s_761))"
"(let-values(((begin439_763"
" e440_764)"
"(let-values(((s_765)"
"(if(syntax?$1"
" s_761)"
"(syntax-e$1"
" s_761)"
" s_761)))"
"(if(pair?"
" s_765)"
"(let-values(((begin441_766)"
"(let-values(((s_768)"
"(car"
" s_765)))"
" s_768))"
"((e442_767)"
"(let-values(((s_769)"
"(cdr"
" s_765)))"
"(let-values(((s_770)"
"(if(syntax?$1"
" s_769)"
"(syntax-e$1"
" s_769)"
" s_769)))"
"(let-values(((flat-s_771)"
"(to-syntax-list.1"
" s_770)))"
"(if(not"
" flat-s_771)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_762))"
"(let-values()"
" flat-s_771)))))))"
"(values"
" begin441_766"
" e442_767))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_762)))))"
"(values"
" #t"
" begin439_763"
" e440_764))))))"
"(let-values(((track_759)"
"(lambda(e_772)"
"(syntax-track-origin$1"
" e_772"
" exp-body_734))))"
"(let-values(((spliced-bodys_760)"
"(append"
"(map2"
" track_759"
" e440_748)"
"(cdr"
" bodys_732))))"
"(begin"
"(let-values(((obs_773)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_773"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_773"
" 'splice"
" spliced-bodys_760)))"
"(void)))"
"(loop_730"
" tail?_731"
" spliced-bodys_760))))))"
"(if(equal?"
" tmp_745"
" 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_789)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_789"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_789"
" 'enter-prim"
" exp-body_734)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_790)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_790"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_790"
" 'enter-prim-begin-for-syntax)))"
"(void)))"
"(values))))"
"(let-values(((ok?_774"
" begin-for-syntax443_775"
" e444_776)"
"(let-values(((s_791)"
" disarmed-exp-body_735))"
"(let-values(((orig-s_792)"
" s_791))"
"(let-values(((begin-for-syntax443_793"
" e444_794)"
"(let-values(((s_795)"
"(if(syntax?$1"
" s_791)"
"(syntax-e$1"
" s_791)"
" s_791)))"
"(if(pair?"
" s_795)"
"(let-values(((begin-for-syntax445_796)"
"(let-values(((s_798)"
"(car"
" s_795)))"
" s_798))"
"((e446_797)"
"(let-values(((s_799)"
"(cdr"
" s_795)))"
"(let-values(((s_800)"
"(if(syntax?$1"
" s_799)"
"(syntax-e$1"
" s_799)"
" s_799)))"
"(let-values(((flat-s_801)"
"(to-syntax-list.1"
" s_800)))"
"(if(not"
" flat-s_801)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_792))"
"(let-values()"
" flat-s_801)))))))"
"(values"
" begin-for-syntax445_796"
" e446_797))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_792)))))"
"(values"
" #t"
" begin-for-syntax443_793"
" e444_794))))))"
"(let-values(((nested-bodys_787)"
"(pass-1-and-2-loop_729"
" e444_776"
"(add1"
" phase_715))))"
"(let-values(((ct-m-ns_788)"
"(namespace->namespace-at-phase"
" m-ns_717"
"(add1"
" phase_715))))"
"(begin"
"(namespace-run-available-modules!"
" m-ns_717"
"(add1"
" phase_715))"
"(eval-nested-bodys"
" nested-bodys_787"
"(add1"
" phase_715)"
" ct-m-ns_788"
" self_718"
" partial-body-ctx_716)"
"(namespace-visit-available-modules!"
" m-ns_717"
" phase_715)"
"(let-values(((obs_802)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_802"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_802"
" 'exit-prim)))"
"(void)))"
"(cons"
"(semi-parsed-begin-for-syntax3.1"
" exp-body_734"
" nested-bodys_787)"
"(loop_730"
" tail?_731"
"(cdr"
" bodys_732))))))))))"
"(if(equal?"
" tmp_745"
" 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_821)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_821"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_821"
" 'enter-prim"
" exp-body_734)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_822)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_822"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_822"
" 'enter-prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_803"
" define-values447_804"
" id448_805"
" rhs449_806)"
"(let-values(((s_823)"
" disarmed-exp-body_735))"
"(let-values(((orig-s_824)"
" s_823))"
"(let-values(((define-values447_825"
" id448_826"
" rhs449_827)"
"(let-values(((s_828)"
"(if(syntax?$1"
" s_823)"
"(syntax-e$1"
" s_823)"
" s_823)))"
"(if(pair?"
" s_828)"
"(let-values(((define-values450_829)"
"(let-values(((s_832)"
"(car"
" s_828)))"
" s_832))"
"((id451_830"
" rhs452_831)"
"(let-values(((s_833)"
"(cdr"
" s_828)))"
"(let-values(((s_834)"
"(if(syntax?$1"
" s_833)"
"(syntax-e$1"
" s_833)"
" s_833)))"
"(if(pair?"
" s_834)"
"(let-values(((id453_835)"
"(let-values(((s_837)"
"(car"
" s_834)))"
"(let-values(((s_838)"
"(if(syntax?$1"
" s_837)"
"(syntax-e$1"
" s_837)"
" s_837)))"
"(let-values(((flat-s_839)"
"(to-syntax-list.1"
" s_838)))"
"(if(not"
" flat-s_839)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_824))"
"(let-values()"
"(let-values(((id_840)"
"(let-values(((lst_841)"
" flat-s_839))"
"(begin"
"(if(list?"
" lst_841)"
"(void)"
"(let-values()"
"(in-list"
" lst_841)))"
"((letrec-values(((for-loop_842)"
"(lambda(id_843"
" lst_844)"
"(if(pair?"
" lst_844)"
"(let-values(((s_845)"
"(unsafe-car"
" lst_844)))"
"(let-values(((id_846)"
"(let-values(((id_847)"
" id_843))"
"(let-values(((id_848)"
"(let-values()"
"(let-values(((id463_849)"
"(let-values()"
"(if(let-values(((or-part_850)"
"(if(syntax?$1"
" s_845)"
"(symbol?"
"(syntax-e$1"
" s_845))"
" #f)))"
"(if or-part_850"
" or-part_850"
"(symbol?"
" s_845)))"
" s_845"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_824"
" s_845)))))"
"(cons"
" id463_849"
" id_847)))))"
"(values"
" id_848)))))"
"(for-loop_842"
" id_846"
"(unsafe-cdr"
" lst_844))))"
" id_843))))"
" for-loop_842)"
" null"
" lst_841)))))"
"(alt-reverse"
" id_840))))))))"
"((rhs454_836)"
"(let-values(((s_851)"
"(cdr"
" s_834)))"
"(let-values(((s_852)"
"(if(syntax?$1"
" s_851)"
"(syntax-e$1"
" s_851)"
" s_851)))"
"(if(pair?"
" s_852)"
"(let-values(((rhs455_853)"
"(let-values(((s_854)"
"(car"
" s_852)))"
" s_854))"
"(()"
"(let-values(((s_855)"
"(cdr"
" s_852)))"
"(let-values(((s_856)"
"(if(syntax?$1"
" s_855)"
"(syntax-e$1"
" s_855)"
" s_855)))"
"(if(null?"
" s_856)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_824))))))"
"(values"
" rhs455_853))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_824))))))"
"(values"
" id453_835"
" rhs454_836))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_824))))))"
"(values"
" define-values450_829"
" id451_830"
" rhs452_831))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_824)))))"
"(values"
" #t"
" define-values447_825"
" id448_826"
" rhs449_827))))))"
"(let-values(((ids_819)"
"(remove-use-site-scopes"
" id448_805"
" partial-body-ctx_716)))"
"(let-values((()"
"(begin"
"(let-values(((ids456_857)"
" ids_819)"
"((phase457_858)"
" phase_715)"
"((exp-body458_859)"
" exp-body_734))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids456_857"
" phase457_858"
" exp-body458_859"
" #f"
" #f))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:723:10_860)"
" check-ids-unbound177.1)"
"((ids459_861)"
" ids_819)"
"((phase460_862)"
" phase_715)"
"((requires+provides461_863)"
" requires+provides_720)"
"((exp-body462_864)"
" exp-body_734))"
"(check-ids-unbound175.1"
" exp-body462_864"
" ids459_861"
" phase460_862"
" requires+provides461_863))"
"(values))))"
"(let-values(((syms_820)"
"(let-values(((ids464_866)"
" ids_819)"
"((defined-syms465_867)"
" defined-syms_723)"
"((self466_868)"
" self_718)"
"((phase467_869)"
" phase_715)"
"((all-scopes-stx468_870)"
" all-scopes-stx_722)"
"((frame-id469_871)"
" frame-id_719)"
"((requires+provides470_872)"
" requires+provides_720)"
"((exp-body471_873)"
" exp-body_734))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id469_871"
" exp-body471_873"
" #t"
" requires+provides470_872"
" #t"
" #f"
" #f"
" ids464_866"
" defined-syms465_867"
" self466_868"
" phase467_869"
" all-scopes-stx468_870))))"
"(begin"
"(add-defined-syms!"
" requires+provides_720"
" syms_820"
" phase_715)"
"(let-values(((obs_874)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_874"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_874"
" 'exit-prim)))"
"(void)))"
"(cons"
"(semi-parsed-define-values2.1"
" exp-body_734"
" syms_820"
" ids_819"
" rhs449_806)"
"(loop_730"
" tail?_731"
"(cdr"
" bodys_732))))))))))))"
"(if(equal?"
" tmp_745"
" 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_897)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_897"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_897"
" 'enter-prim"
" exp-body_734)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_898)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_898"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_898"
" 'enter-prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_875"
" define-syntaxes472_876"
" id473_877"
" rhs474_878)"
"(let-values(((s_899)"
" disarmed-exp-body_735))"
"(let-values(((orig-s_900)"
" s_899))"
"(let-values(((define-syntaxes472_901"
" id473_902"
" rhs474_903)"
"(let-values(((s_904)"
"(if(syntax?$1"
" s_899)"
"(syntax-e$1"
" s_899)"
" s_899)))"
"(if(pair?"
" s_904)"
"(let-values(((define-syntaxes475_905)"
"(let-values(((s_908)"
"(car"
" s_904)))"
" s_908))"
"((id476_906"
" rhs477_907)"
"(let-values(((s_909)"
"(cdr"
" s_904)))"
"(let-values(((s_910)"
"(if(syntax?$1"
" s_909)"
"(syntax-e$1"
" s_909)"
" s_909)))"
"(if(pair?"
" s_910)"
"(let-values(((id478_911)"
"(let-values(((s_913)"
"(car"
" s_910)))"
"(let-values(((s_914)"
"(if(syntax?$1"
" s_913)"
"(syntax-e$1"
" s_913)"
" s_913)))"
"(let-values(((flat-s_915)"
"(to-syntax-list.1"
" s_914)))"
"(if(not"
" flat-s_915)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_900))"
"(let-values()"
"(let-values(((id_916)"
"(let-values(((lst_917)"
" flat-s_915))"
"(begin"
"(if(list?"
" lst_917)"
"(void)"
"(let-values()"
"(in-list"
" lst_917)))"
"((letrec-values(((for-loop_918)"
"(lambda(id_919"
" lst_920)"
"(if(pair?"
" lst_920)"
"(let-values(((s_921)"
"(unsafe-car"
" lst_920)))"
"(let-values(((id_922)"
"(let-values(((id_923)"
" id_919))"
"(let-values(((id_924)"
"(let-values()"
"(let-values(((id488_925)"
"(let-values()"
"(if(let-values(((or-part_926)"
"(if(syntax?$1"
" s_921)"
"(symbol?"
"(syntax-e$1"
" s_921))"
" #f)))"
"(if or-part_926"
" or-part_926"
"(symbol?"
" s_921)))"
" s_921"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_900"
" s_921)))))"
"(cons"
" id488_925"
" id_923)))))"
"(values"
" id_924)))))"
"(for-loop_918"
" id_922"
"(unsafe-cdr"
" lst_920))))"
" id_919))))"
" for-loop_918)"
" null"
" lst_917)))))"
"(alt-reverse"
" id_916))))))))"
"((rhs479_912)"
"(let-values(((s_927)"
"(cdr"
" s_910)))"
"(let-values(((s_928)"
"(if(syntax?$1"
" s_927)"
"(syntax-e$1"
" s_927)"
" s_927)))"
"(if(pair?"
" s_928)"
"(let-values(((rhs480_929)"
"(let-values(((s_930)"
"(car"
" s_928)))"
" s_930))"
"(()"
"(let-values(((s_931)"
"(cdr"
" s_928)))"
"(let-values(((s_932)"
"(if(syntax?$1"
" s_931)"
"(syntax-e$1"
" s_931)"
" s_931)))"
"(if(null?"
" s_932)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_900))))))"
"(values"
" rhs480_929))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                         \"bad syntax\""
" orig-s_900))))))"
"(values"
" id478_911"
" rhs479_912))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_900))))))"
"(values"
" define-syntaxes475_905"
" id476_906"
" rhs477_907))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                 \"bad syntax\""
" orig-s_900)))))"
"(values"
" #t"
" define-syntaxes472_901"
" id473_902"
" rhs474_903))))))"
"(let-values(((ids_891)"
"(remove-use-site-scopes"
" id473_877"
" partial-body-ctx_716)))"
"(let-values((()"
"(begin"
"(let-values(((ids481_933)"
" ids_891)"
"((phase482_934)"
" phase_715)"
"((exp-body483_935)"
" exp-body_734))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids481_933"
" phase482_934"
" exp-body483_935"
" #f"
" #f))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:740:10_936)"
" check-ids-unbound177.1)"
"((ids484_937)"
" ids_891)"
"((phase485_938)"
" phase_715)"
"((requires+provides486_939)"
" requires+provides_720)"
"((exp-body487_940)"
" exp-body_734))"
"(check-ids-unbound175.1"
" exp-body487_940"
" ids484_937"
" phase485_938"
" requires+provides486_939))"
"(values))))"
"(let-values(((syms_892)"
"(let-values(((ids489_942)"
" ids_891)"
"((defined-syms490_943)"
" defined-syms_723)"
"((self491_944)"
" self_718)"
"((phase492_945)"
" phase_715)"
"((all-scopes-stx493_946)"
" all-scopes-stx_722)"
"((frame-id494_947)"
" frame-id_719)"
"((requires+provides495_948)"
" requires+provides_720)"
"((exp-body496_949)"
" exp-body_734)"
"((temp497_950)"
" #t))"
"(select-defined-syms-and-bind!16.1"
" temp497_950"
" #t"
" frame-id494_947"
" exp-body496_949"
" #t"
" requires+provides495_948"
" #t"
" #f"
" #f"
" ids489_942"
" defined-syms490_943"
" self491_944"
" phase492_945"
" all-scopes-stx493_946))))"
"(let-values((()"
"(begin"
"(add-defined-syms!"
" requires+provides_720"
" syms_892"
" phase_715)"
"(values))))"
"(let-values(((exp-rhs_893"
" parsed-rhs_894"
" vals_895)"
"(expand+eval-for-syntaxes-binding"
" rhs474_878"
" ids_891"
"(let-values(((v_951)"
" partial-body-ctx_716))"
"(let-values(((the-struct_952)"
" v_951))"
"(if(expand-context/outer?"
" the-struct_952)"
"(let-values(((need-eventually-defined498_953)"
" need-eventually-defined_721)"
"((inner499_954)"
"(root-expand-context/outer-inner"
" v_951)))"
"(expand-context/outer1.1"
" inner499_954"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_952)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_952)"
"(root-expand-context/outer-frame-id"
" the-struct_952)"
"(expand-context/outer-context"
" the-struct_952)"
"(expand-context/outer-env"
" the-struct_952)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_952)"
"(expand-context/outer-scopes"
" the-struct_952)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_952)"
"(expand-context/outer-binding-layer"
" the-struct_952)"
"(expand-context/outer-reference-records"
" the-struct_952)"
"(expand-context/outer-only-immediate?"
" the-struct_952)"
" need-eventually-defined498_953"
"(expand-context/outer-current-introduction-scopes"
" the-struct_952)"
"(expand-context/outer-name"
" the-struct_952)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                              \"expand-context/outer?\""
" the-struct_952)))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_955)"
" syms_892)"
"((lst_956)"
" vals_895)"
"((lst_957)"
" ids_891))"
"(begin"
"(if(list?"
" lst_955)"
"(void)"
"(let-values()"
"(in-list"
" lst_955)))"
"(if(list?"
" lst_956)"
"(void)"
"(let-values()"
"(in-list"
" lst_956)))"
"(if(list?"
" lst_957)"
"(void)"
"(let-values()"
"(in-list"
" lst_957)))"
"((letrec-values(((for-loop_958)"
"(lambda(fold-var_959"
" lst_960"
" lst_961"
" lst_962)"
"(if(if(pair?"
" lst_960)"
"(if(pair?"
" lst_961)"
"(pair?"
" lst_962)"
" #f)"
" #f)"
"(let-values(((sym_963)"
"(unsafe-car"
" lst_960))"
"((val_964)"
"(unsafe-car"
" lst_961))"
"((id_965)"
"(unsafe-car"
" lst_962)))"
"(let-values(((fold-var_966)"
"(let-values()"
"(let-values(((fold-var_968)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_964"
" id_965"
" phase_715)"
"(namespace-set-transformer!"
" m-ns_717"
" phase_715"
" sym_963"
" val_964)))"
"(void)))))"
"(values"
" fold-var_968)))))"
"(for-loop_958"
" fold-var_966"
"(unsafe-cdr"
" lst_960)"
"(unsafe-cdr"
" lst_961)"
"(unsafe-cdr"
" lst_962))))"
" fold-var_959))))"
" for-loop_958)"
"(void)"
" lst_955"
" lst_956"
" lst_957)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_969)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_969"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_969"
" 'exit-prim)))"
"(void)))"
"(values))))"
"(let-values(((parsed-body_896)"
"(parsed-define-syntaxes20.1"
"(keep-properties-only"
" exp-body_734)"
" ids_891"
" syms_892"
" parsed-rhs_894)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_716)"
" parsed-body_896"
"(expanded+parsed1.1"
"(let-values(((exp-body500_970)"
" exp-body_734)"
"((temp501_971)"
"(list"
" define-syntaxes472_876"
" ids_891"
" exp-rhs_893)))"
"(rebuild62.1"
" #f"
" #f"
" exp-body500_970"
" temp501_971))"
" parsed-body_896))"
"(loop_730"
" tail?_731"
"(cdr"
" bodys_732))))))))))))))))"
"(if(equal?"
" tmp_745"
" '#%require)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_986)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_986"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_986"
" 'enter-prim"
" exp-body_734)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_987)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_987"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_987"
" 'enter-prim-require)))"
"(void)))"
"(values))))"
"(let-values(((ready-body_972)"
"(remove-use-site-scopes"
" disarmed-exp-body_735"
" partial-body-ctx_716)))"
"(let-values(((ok?_973"
" #%require502_974"
" req503_975)"
"(let-values(((s_988)"
" ready-body_972))"
"(let-values(((orig-s_989)"
" s_988))"
"(let-values(((#%require502_990"
" req503_991)"
"(let-values(((s_992)"
"(if(syntax?$1"
" s_988)"
"(syntax-e$1"
" s_988)"
" s_988)))"
"(if(pair?"
" s_992)"
"(let-values(((#%require504_993)"
"(let-values(((s_995)"
"(car"
" s_992)))"
" s_995))"
"((req505_994)"
"(let-values(((s_996)"
"(cdr"
" s_992)))"
"(let-values(((s_997)"
"(if(syntax?$1"
" s_996)"
"(syntax-e$1"
" s_996)"
" s_996)))"
"(let-values(((flat-s_998)"
"(to-syntax-list.1"
" s_997)))"
"(if(not"
" flat-s_998)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_989))"
"(let-values()"
" flat-s_998)))))))"
"(values"
" #%require504_993"
" req505_994))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_989)))))"
"(values"
" #t"
" #%require502_990"
" req503_991))))))"
"(begin"
"(let-values(((temp506_1000)"
" req503_975)"
"((exp-body507_1001)"
" exp-body_734)"
"((self508_1002)"
" self_718)"
"((m-ns509_1003)"
" m-ns_717)"
"((phase510_1004)"
" phase_715)"
"((phase511_1005)"
" phase_715)"
"((requires+provides512_1006)"
" requires+provides_720)"
"((declared-submodule-names513_1007)"
" declared-submodule-names_725)"
"((temp514_1008)"
" 'module))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names513_1007"
" #t"
" #f"
" #f"
" phase511_1005"
" #t"
" #f"
" #f"
" self508_1002"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp514_1008"
" temp506_1000"
" exp-body507_1001"
" m-ns509_1003"
" phase510_1004"
" requires+provides512_1006))"
"(let-values(((obs_1009)"
"(expand-context-observer"
" partial-body-ctx_716)))"
"(if obs_1009"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1009"
" 'exit-prim)))"
"(void)))"
"(cons"
" exp-body_734"
"(loop_730"
" tail?_731"
"(cdr"
" bodys_732)))))))))"
"(if(equal?"
" tmp_745"
" '#%provide)"
"(let-values()"
"(cons"
" exp-body_734"
"(loop_730"
" tail?_731"
"(cdr"
" bodys_732))))"
"(if(equal?"
" tmp_745"
" 'module)"
"(let-values()"
"(let-values(((ready-body_1010)"
"(remove-use-site-scopes"
" exp-body_734"
" partial-body-ctx_716)))"
"(let-values(((submod_1011)"
"(let-values(((...er/expand/module.rkt:790:12_1012)"
" expand-submodule201.1)"
"((ready-body515_1013)"
" ready-body_1010)"
"((self516_1014)"
" self_718)"
"((partial-body-ctx517_1015)"
" partial-body-ctx_716)"
"((temp518_1016)"
" #f)"
"((declared-submodule-names519_1017)"
" declared-submodule-names_725)"
"((mpis-to-reset520_1018)"
" mpis-to-reset_728)"
"((compiled-submodules521_1019)"
" compiled-submodules_726)"
"((modules-being-compiled522_1020)"
" modules-being-compiled_727))"
"(expand-submodule199.1"
" compiled-submodules521_1019"
" declared-submodule-names519_1017"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp518_1016"
" #f"
" #f"
" modules-being-compiled522_1020"
" mpis-to-reset520_1018"
" ready-body515_1013"
" self516_1014"
" partial-body-ctx517_1015))))"
"(cons"
" submod_1011"
"(loop_730"
" tail?_731"
"(cdr"
" bodys_732))))))"
"(if(equal?"
" tmp_745"
" 'module*)"
"(let-values()"
"(cons"
" exp-body_734"
"(loop_730"
" tail?_731"
"(cdr"
" bodys_732))))"
"(if(equal?"
" tmp_745"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_1021"
" #%declare523_1022"
" kw524_1023)"
"(let-values(((s_1035)"
" disarmed-exp-body_735))"
"(let-values(((orig-s_1036)"
" s_1035))"
"(let-values(((#%declare523_1037"
" kw524_1038)"
"(let-values(((s_1039)"
"(if(syntax?$1"
" s_1035)"
"(syntax-e$1"
" s_1035)"
" s_1035)))"
"(if(pair?"
" s_1039)"
"(let-values(((#%declare525_1040)"
"(let-values(((s_1042)"
"(car"
" s_1039)))"
" s_1042))"
"((kw526_1041)"
"(let-values(((s_1043)"
"(cdr"
" s_1039)))"
"(let-values(((s_1044)"
"(if(syntax?$1"
" s_1043)"
"(syntax-e$1"
" s_1043)"
" s_1043)))"
"(let-values(((flat-s_1045)"
"(to-syntax-list.1"
" s_1044)))"
"(if(not"
" flat-s_1045)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_1036))"
"(let-values()"
" flat-s_1045)))))))"
"(values"
" #%declare525_1040"
" kw526_1041))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_1036)))))"
"(values"
" #t"
" #%declare523_1037"
" kw524_1038))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_1046)"
" kw524_1023))"
"(begin"
"(if(list?"
" lst_1046)"
"(void)"
"(let-values()"
"(in-list"
" lst_1046)))"
"((letrec-values(((for-loop_1047)"
"(lambda(fold-var_1048"
" lst_1049)"
"(if(pair?"
" lst_1049)"
"(let-values(((kw_1050)"
"(unsafe-car"
" lst_1049)))"
"(let-values(((fold-var_1051)"
"(let-values()"
"(let-values(((fold-var_1053)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(keyword?"
"(syntax-e$1"
" kw_1050))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"expected a keyword\""
" exp-body_734"
" kw_1050)))"
"(if(memq"
"(syntax-e$1"
" kw_1050)"
" '(#:cross-phase-persistent"
" #:empty-namespace))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"not an allowed declaration keyword\""
" exp-body_734"
" kw_1050)))"
"(if(hash-ref"
" declared-keywords_724"
"(syntax-e$1"
" kw_1050)"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"keyword declared multiple times\""
" exp-body_734"
" kw_1050))"
"(void))"
"(hash-set!"
" declared-keywords_724"
"(syntax-e$1"
" kw_1050)"
" kw_1050)))"
"(void)))))"
"(values"
" fold-var_1053)))))"
"(for-loop_1047"
" fold-var_1051"
"(unsafe-cdr"
" lst_1049))))"
" fold-var_1048))))"
" for-loop_1047)"
"(void)"
" lst_1046)))"
"(values))))"
"(let-values(((parsed-body_1034)"
"(parsed-#%declare22.1"
" exp-body_734)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_716)"
" parsed-body_1034"
"(expanded+parsed1.1"
" exp-body_734"
" parsed-body_1034))"
"(loop_730"
" tail?_731"
"(cdr"
" bodys_732)))))))"
"(let-values()"
"(cons"
" exp-body_734"
"(loop_730"
" tail?_731"
"(cdr"
" bodys_732)))))))))))))))))"
"(let-values(((l_1054)"
"(append"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" partial-body-ctx_716))"
" lifted-defns_736"
"(loop_730"
" #f"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" partial-body-ctx_716))))))"
"(if(null? l_1054)"
"(finish_744)"
"(append"
" l_1054"
"(finish_744)))))))))))))))"
" loop_730)"
" tail?_714"
" bodys_713))))))))))))))))))))))"
"(define-values"
"(unpack82.1)"
"(lambda(given-kws_1055 given-args_1056 bodys80_1057)"
"(let-values(((all-scopes-stx56_1058)(car given-args_1056))"
"((given-kws_1059)(cdr given-kws_1055))"
"((given-args_1060)(cdr given-args_1056)))"
"(let-values(((compiled-submodules60_1061)(car given-args_1060))"
"((given-kws_1062)(cdr given-kws_1059))"
"((given-args_1063)(cdr given-args_1060)))"
"(let-values(((ctx50_1064)(car given-args_1063))"
"((given-kws_1065)(cdr given-kws_1062))"
"((given-args_1066)(cdr given-args_1063)))"
"(let-values(((declared-keywords58_1067)(car given-args_1066))"
"((given-kws_1068)(cdr given-kws_1065))"
"((given-args_1069)(cdr given-args_1066)))"
"(let-values(((declared-submodule-names59_1070)(car given-args_1069))"
"((given-kws_1071)(cdr given-kws_1068))"
"((given-args_1072)(cdr given-args_1069)))"
"(let-values(((defined-syms57_1073)(car given-args_1072))"
"((given-kws_1074)(cdr given-kws_1071))"
"((given-args_1075)(cdr given-args_1072)))"
"(let-values(((frame-id53_1076)(car given-args_1075))"
"((given-kws_1077)(cdr given-kws_1074))"
"((given-args_1078)(cdr given-args_1075)))"
"(let-values(((loop63_1079)(car given-args_1078))"
"((given-kws_1080)(cdr given-kws_1077))"
"((given-args_1081)(cdr given-args_1078)))"
"(let-values(((modules-being-compiled61_1082)(car given-args_1081))"
"((given-kws_1083)(cdr given-kws_1080))"
"((given-args_1084)(cdr given-args_1081)))"
"(let-values(((mpis-to-reset62_1085)(car given-args_1084))"
"((given-kws_1086)(cdr given-kws_1083))"
"((given-args_1087)(cdr given-args_1084)))"
"(let-values(((namespace51_1088)(car given-args_1087))"
"((given-kws_1089)(cdr given-kws_1086))"
"((given-args_1090)(cdr given-args_1087)))"
"(let-values(((need-eventually-defined55_1091)(car given-args_1090))"
"((given-kws_1092)(cdr given-kws_1089))"
"((given-args_1093)(cdr given-args_1090)))"
"(let-values(((phase49_1094)(car given-args_1093))"
"((given-kws_1095)(cdr given-kws_1092))"
"((given-args_1096)(cdr given-args_1093)))"
"(let-values(((requires-and-provides54_1097)(car given-args_1096))"
"((given-kws_1098)(cdr given-kws_1095))"
"((given-args_1099)(cdr given-args_1096)))"
"(let-values(((self52_1100)(car given-args_1099))"
"((given-kws_1101)(cdr given-kws_1098))"
"((given-args_1102)(cdr given-args_1099)))"
"(let-values(((tail?48_1103)(car given-args_1102)))"
"(partially-expand-bodys81.1"
" all-scopes-stx56_1058"
" compiled-submodules60_1061"
" ctx50_1064"
" declared-keywords58_1067"
" declared-submodule-names59_1070"
" defined-syms57_1073"
" frame-id53_1076"
" loop63_1079"
" modules-being-compiled61_1082"
" mpis-to-reset62_1085"
" namespace51_1088"
" need-eventually-defined55_1091"
" phase49_1094"
" requires-and-provides54_1097"
" self52_1100"
" tail?48_1103"
" bodys80_1057)))))))))))))))))))"
"(define-values"
"(partially-expand-bodys83.1)"
"(lifted/7.1"
"(lambda(given-kws_1104 given-argc_1105)"
"(if(= given-argc_1105 3)"
"(let-values(((l2_1106) given-kws_1104))"
"(if(pair? l2_1106)"
"(if(eq?(car l2_1106) '#:all-scopes-stx)"
"(let-values(((l2_1107)(cdr l2_1106)))"
"(if(pair? l2_1107)"
"(if(eq?(car l2_1107) '#:compiled-submodules)"
"(let-values(((l2_1108)(cdr l2_1107)))"
"(if(pair? l2_1108)"
"(if(eq?(car l2_1108) '#:ctx)"
"(let-values(((l2_1109)(cdr l2_1108)))"
"(if(pair? l2_1109)"
"(if(eq?(car l2_1109) '#:declared-keywords)"
"(let-values(((l2_1110)(cdr l2_1109)))"
"(if(pair? l2_1110)"
"(if(eq?(car l2_1110) '#:declared-submodule-names)"
"(let-values(((l2_1111)(cdr l2_1110)))"
"(if(pair? l2_1111)"
"(if(eq?(car l2_1111) '#:defined-syms)"
"(let-values(((l2_1112)(cdr l2_1111)))"
"(if(pair? l2_1112)"
"(if(eq?(car l2_1112) '#:frame-id)"
"(let-values(((l2_1113)(cdr l2_1112)))"
"(if(pair? l2_1113)"
"(if(eq?(car l2_1113) '#:loop)"
"(let-values(((l2_1114)(cdr l2_1113)))"
"(if(pair? l2_1114)"
"(if(eq?(car l2_1114) '#:modules-being-compiled)"
"(let-values(((l2_1115)(cdr l2_1114)))"
"(if(pair? l2_1115)"
"(if(eq?(car l2_1115) '#:mpis-to-reset)"
"(let-values(((l2_1116)(cdr l2_1115)))"
"(if(pair? l2_1116)"
"(if(eq?(car l2_1116) '#:namespace)"
"(let-values(((l2_1117)(cdr l2_1116)))"
"(if(pair? l2_1117)"
"(if(eq?"
"(car l2_1117)"
" '#:need-eventually-defined)"
"(let-values(((l2_1118)(cdr l2_1117)))"
"(if(pair? l2_1118)"
"(if(eq?(car l2_1118) '#:phase)"
"(let-values(((l2_1119)"
"(cdr l2_1118)))"
"(if(pair? l2_1119)"
"(if(eq?"
"(car l2_1119)"
" '#:requires-and-provides)"
"(let-values(((l2_1120)"
"(cdr l2_1119)))"
"(if(pair? l2_1120)"
"(if(eq?"
"(car l2_1120)"
" '#:self)"
"(let-values(((l2_1121)"
"(cdr"
" l2_1120)))"
"(if(pair? l2_1121)"
"(if(eq?"
"(car l2_1121)"
" '#:tail?)"
"(null?"
"(cdr l2_1121))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_1122 given-args_1123 bodys_1124)(unpack82.1 given-kws_1122 given-args_1123 bodys_1124)))"
" '(#:all-scopes-stx"
" #:compiled-submodules"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:modules-being-compiled"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" '(#:all-scopes-stx"
" #:compiled-submodules"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:modules-being-compiled"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)))"
"(define-values"
"(make-wrap-as-definition)"
"(lambda(self_1125 frame-id_1126 inside-scope_1127 all-scopes-stx_1128 defined-syms_1129 requires+provides_1130)"
"(lambda(ids_1131 rhs_1132 phase_1133)"
"(let-values(((scoped-ids_1134)"
"(alt-reverse"
"(let-values(((lst_1137) ids_1131))"
"(begin"
"(if(list? lst_1137)(void)(let-values()(in-list lst_1137)))"
"((letrec-values(((for-loop_1138)"
"(lambda(fold-var_1139 lst_1140)"
"(if(pair? lst_1140)"
"(let-values(((id_1141)(unsafe-car lst_1140)))"
"(let-values(((fold-var_1142)"
"(let-values(((fold-var_1143) fold-var_1139))"
"(let-values(((fold-var_1144)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_1141"
" inside-scope_1127))"
" fold-var_1143))))"
"(values fold-var_1144)))))"
"(for-loop_1138 fold-var_1142(unsafe-cdr lst_1140))))"
" fold-var_1139))))"
" for-loop_1138)"
" null"
" lst_1137))))))"
"(let-values(((syms_1135)"
"(let-values(((scoped-ids527_1146) scoped-ids_1134)"
"((defined-syms528_1147) defined-syms_1129)"
"((self529_1148) self_1125)"
"((phase530_1149) phase_1133)"
"((all-scopes-stx531_1150) all-scopes-stx_1128)"
"((frame-id532_1151) frame-id_1126)"
"((requires+provides533_1152) requires+provides_1130))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id532_1151"
" #f"
" #f"
" requires+provides533_1152"
" #t"
" #f"
" #f"
" scoped-ids527_1146"
" defined-syms528_1147"
" self529_1148"
" phase530_1149"
" all-scopes-stx531_1150))))"
"(let-values(((s_1136)"
"(add-scope"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_1133) 'define-values)"
" scoped-ids_1134"
" rhs_1132))"
" inside-scope_1127)))"
"(values scoped-ids_1134(semi-parsed-define-values2.1 s_1136 syms_1135 scoped-ids_1134 rhs_1132))))))))"
"(define-values"
"(add-post-expansion-scope)"
"(lambda(bodys_1153 ctx_1154)"
"(let-values(((sc_1155)(root-expand-context-post-expansion-scope ctx_1154)))"
"(alt-reverse"
"(let-values(((lst_1156) bodys_1153))"
"(begin"
"(if(list? lst_1156)(void)(let-values()(in-list lst_1156)))"
"((letrec-values(((for-loop_1157)"
"(lambda(fold-var_1158 lst_1159)"
"(if(pair? lst_1159)"
"(let-values(((body_1160)(unsafe-car lst_1159)))"
"(let-values(((fold-var_1161)"
"(let-values(((fold-var_1162) fold-var_1158))"
"(let-values(((fold-var_1163)"
"(let-values()"
"(cons"
"(let-values()(add-scope body_1160 sc_1155))"
" fold-var_1162))))"
"(values fold-var_1163)))))"
"(for-loop_1157 fold-var_1161(unsafe-cdr lst_1159))))"
" fold-var_1158))))"
" for-loop_1157)"
" null"
" lst_1156)))))))"
"(define-values"
"(lifted/11.1 lifted/12.1 lifted/13.1 lifted/14.1 lifted/15.1)"
"(make-struct-type"
" 'finish-expanding-body-expressons"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'finish-expanding-body-expressons"
"(case-lambda"
"((self_1164 partially-expanded-bodys_1165)(apply missing-kw self_1164 partially-expanded-bodys_1165 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1166 partially-expanded-bodys_1167)(apply missing-kw self_1166 partially-expanded-bodys_1167 null)))))"
"(define-values"
"(finish-expanding-body-expressons101.1)"
"(lambda(compiled-submodules89_1168"
" ctx86_1169"
" declared-submodule-names88_1170"
" modules-being-compiled90_1171"
" mpis-to-reset91_1172"
" phase85_1173"
" self87_1174"
" tail?84_1175"
" partially-expanded-bodys100_1176)"
"(let-values(((partially-expanded-bodys_1177) partially-expanded-bodys100_1176))"
"(let-values(((tail?_1178) tail?84_1175))"
"(let-values(((phase_1179) phase85_1173))"
"(let-values(((body-ctx_1180) ctx86_1169))"
"(let-values(((self_1181) self87_1174))"
"(let-values(((declared-submodule-names_1182) declared-submodule-names88_1170))"
"(let-values(((compiled-submodules_1183) compiled-submodules89_1168))"
"(let-values(((modules-being-compiled_1184) modules-being-compiled90_1171))"
"(let-values(((mpis-to-reset_1185) mpis-to-reset91_1172))"
"(let-values()"
"((letrec-values(((loop_1186)"
"(lambda(tail?_1187 bodys_1188)"
"(if(null? bodys_1188)"
"(let-values()"
"(if tail?_1187"
"(let-values()"
"(let-values(((bodys_1189)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts body-ctx_1180))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts body-ctx_1180)))))"
"(if(null? bodys_1189) null(loop_1186 #t bodys_1189))))"
"(let-values() bodys_1188)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1195)"
"(expand-context-observer body-ctx_1180)))"
"(if obs_1195"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1195 'next)))"
"(void)))"
"(values))))"
"(let-values(((body_1190)(car bodys_1188)))"
"(let-values(((exp-body_1191)"
"(if(let-values(((or-part_1196)(parsed? body_1190)))"
"(if or-part_1196"
" or-part_1196"
"(let-values(((or-part_1197)"
"(expanded+parsed? body_1190)))"
"(if or-part_1197"
" or-part_1197"
"(semi-parsed-begin-for-syntax?"
" body_1190)))))"
"(let-values() body_1190)"
"(if(semi-parsed-define-values? body_1190)"
"(let-values()"
"(let-values(((ids_1198)"
"(semi-parsed-define-values-ids"
" body_1190)))"
"(let-values(((rhs-ctx_1199)"
"(as-named-context"
"(as-expression-context"
" body-ctx_1180)"
" ids_1198)))"
"(let-values(((exp-rhs_1200)"
"(let-values()"
"(let-values(((temp534_1204)"
"(semi-parsed-define-values-rhs"
" body_1190))"
"((rhs-ctx535_1205)"
" rhs-ctx_1199))"
"(expand5.1"
" #f"
" #f"
" temp534_1204"
" rhs-ctx535_1205)))))"
"(let-values(((syms_1201)"
"(semi-parsed-define-values-syms"
" body_1190)))"
"(let-values(((s_1202)"
"(semi-parsed-define-values-s"
" body_1190)))"
"(let-values(((comp-form_1203)"
"(parsed-define-values19.1"
"(keep-properties-only"
" s_1202)"
" ids_1198"
" syms_1201"
"(if(expand-context-to-parsed?"
" rhs-ctx_1199)"
" exp-rhs_1200"
"(let-values(((exp-rhs536_1206)"
" exp-rhs_1200)"
"((temp537_1207)"
"(as-to-parsed-context"
" rhs-ctx_1199)))"
"(expand5.1"
" #f"
" #f"
" exp-rhs536_1206"
" temp537_1207))))))"
"(if(expand-context-to-parsed?"
" rhs-ctx_1199)"
" comp-form_1203"
"(expanded+parsed1.1"
"(let-values(((disarmed-s_1208)"
"(syntax-disarm$1"
" s_1202)))"
"(let-values(((ok?_1209"
" define-values538_1210"
" _539_1211"
" _540_1212)"
"(let-values(((s_1225)"
" disarmed-s_1208))"
"(let-values(((orig-s_1226)"
" s_1225))"
"(let-values(((define-values538_1227"
" _539_1228"
" _540_1229)"
"(let-values(((s_1230)"
"(if(syntax?$1"
" s_1225)"
"(syntax-e$1"
" s_1225)"
" s_1225)))"
"(if(pair?"
" s_1230)"
"(let-values(((define-values541_1231)"
"(let-values(((s_1234)"
"(car"
" s_1230)))"
" s_1234))"
"((_542_1232"
" _543_1233)"
"(let-values(((s_1235)"
"(cdr"
" s_1230)))"
"(let-values(((s_1236)"
"(if(syntax?$1"
" s_1235)"
"(syntax-e$1"
" s_1235)"
" s_1235)))"
"(if(pair?"
" s_1236)"
"(let-values(((_544_1237)"
"(let-values(((s_1239)"
"(car"
" s_1236)))"
" s_1239))"
"((_545_1238)"
"(let-values(((s_1240)"
"(cdr"
" s_1236)))"
"(let-values(((s_1241)"
"(if(syntax?$1"
" s_1240)"
"(syntax-e$1"
" s_1240)"
" s_1240)))"
"(if(pair?"
" s_1241)"
"(let-values(((_546_1242)"
"(let-values(((s_1243)"
"(car"
" s_1241)))"
" s_1243))"
"(()"
"(let-values(((s_1244)"
"(cdr"
" s_1241)))"
"(let-values(((s_1245)"
"(if(syntax?$1"
" s_1244)"
"(syntax-e$1"
" s_1244)"
" s_1244)))"
"(if(null?"
" s_1245)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"bad syntax\""
" orig-s_1226))))))"
"(values"
" _546_1242))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                      \"bad syntax\""
" orig-s_1226))))))"
"(values"
" _544_1237"
" _545_1238))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                  \"bad syntax\""
" orig-s_1226))))))"
"(values"
" define-values541_1231"
" _542_1232"
" _543_1233))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_1226)))))"
"(values"
" #t"
" define-values538_1227"
" _539_1228"
" _540_1229))))))"
"(let-values(((s547_1246)"
" s_1202)"
"((temp548_1247)"
"(list"
" define-values538_1210"
" ids_1198"
" exp-rhs_1200)))"
"(rebuild62.1"
" #f"
" #f"
" s547_1246"
" temp548_1247))))"
" comp-form_1203)))))))))"
"(let-values()"
"(let-values(((disarmed-body_1248)"
"(syntax-disarm$1 body_1190)))"
"(let-values(((tmp_1249)"
"(core-form-sym"
" disarmed-body_1248"
" phase_1179)))"
"(if(if(equal? tmp_1249 '#%require)"
" #t"
"(if(equal? tmp_1249 '#%provide)"
" #t"
"(equal? tmp_1249 'module*)))"
"(let-values()(car bodys_1188))"
"(let-values()"
"(let-values()"
"(let-values(((exp-body_1250)"
"(let-values(((temp549_1251)"
"(car"
" bodys_1188))"
"((temp550_1252)"
"(as-expression-context"
" body-ctx_1180)))"
"(expand5.1"
" #f"
" #f"
" temp549_1251"
" temp550_1252))))"
"(if(expand-context-to-parsed?"
" body-ctx_1180)"
" exp-body_1250"
"(expanded+parsed1.1"
" exp-body_1250"
"(let-values(((exp-body551_1253)"
" exp-body_1250)"
"((temp552_1254)"
"(as-to-parsed-context"
" body-ctx_1180)))"
"(expand5.1"
" #f"
" #f"
" exp-body551_1253"
" temp552_1254)))))))))))))))"
"(let-values(((lifted-defns_1192)"
"(loop_1186"
" #f"
"(get-and-clear-lifts!"
"(expand-context-lifts body-ctx_1180)))))"
"(let-values(((lifted-requires_1193)"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts body-ctx_1180))))"
"(let-values(((lifted-modules_1194)"
"(let-values(((...er/expand/module.rkt:936:8_1255)"
" expand-non-module*-submodules216.1)"
"((temp553_1256)"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" body-ctx_1180)))"
"((phase554_1257) phase_1179)"
"((self555_1258) self_1181)"
"((body-ctx556_1259) body-ctx_1180)"
"((mpis-to-reset557_1260)"
" mpis-to-reset_1185)"
"((declared-submodule-names558_1261)"
" declared-submodule-names_1182)"
"((compiled-submodules559_1262)"
" compiled-submodules_1183)"
"((modules-being-compiled560_1263)"
" modules-being-compiled_1184))"
"(expand-non-module*-submodules214.1"
" compiled-submodules559_1262"
" declared-submodule-names558_1261"
" modules-being-compiled560_1263"
" mpis-to-reset557_1260"
" temp553_1256"
" phase554_1257"
" self555_1258"
" body-ctx556_1259))))"
"(begin"
"(if(null? lifted-defns_1192)"
"(let-values()"
"(let-values(((obs_1264)"
"(expand-context-observer"
" body-ctx_1180)))"
"(if obs_1264"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1264"
" 'module-lift-loop"
" lifted-defns_1192)))"
"(void))))"
"(let-values()"
"(let-values(((obs_1265)"
"(expand-context-observer"
" body-ctx_1180)))"
"(if obs_1265"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1265"
" 'module-lift-end-loop"
"(cons exp-body_1191(cdr bodys_1188)))))"
"(void)))))"
"(append"
" lifted-requires_1193"
" lifted-defns_1192"
" lifted-modules_1194"
"(cons"
" exp-body_1191"
"(loop_1186 tail?_1187(cdr bodys_1188))))))))))))))))"
" loop_1186)"
" tail?_1178"
" partially-expanded-bodys_1177)))))))))))))"
"(define-values"
"(unpack102.1)"
"(lambda(given-kws_1266 given-args_1267 partially-expanded-bodys100_1268)"
"(let-values(((compiled-submodules89_1269)(car given-args_1267))"
"((given-kws_1270)(cdr given-kws_1266))"
"((given-args_1271)(cdr given-args_1267)))"
"(let-values(((ctx86_1272)(car given-args_1271))"
"((given-kws_1273)(cdr given-kws_1270))"
"((given-args_1274)(cdr given-args_1271)))"
"(let-values(((declared-submodule-names88_1275)(car given-args_1274))"
"((given-kws_1276)(cdr given-kws_1273))"
"((given-args_1277)(cdr given-args_1274)))"
"(let-values(((modules-being-compiled90_1278)(car given-args_1277))"
"((given-kws_1279)(cdr given-kws_1276))"
"((given-args_1280)(cdr given-args_1277)))"
"(let-values(((mpis-to-reset91_1281)(car given-args_1280))"
"((given-kws_1282)(cdr given-kws_1279))"
"((given-args_1283)(cdr given-args_1280)))"
"(let-values(((phase85_1284)(car given-args_1283))"
"((given-kws_1285)(cdr given-kws_1282))"
"((given-args_1286)(cdr given-args_1283)))"
"(let-values(((self87_1287)(car given-args_1286))"
"((given-kws_1288)(cdr given-kws_1285))"
"((given-args_1289)(cdr given-args_1286)))"
"(let-values(((tail?84_1290)(car given-args_1289)))"
"(finish-expanding-body-expressons101.1"
" compiled-submodules89_1269"
" ctx86_1272"
" declared-submodule-names88_1275"
" modules-being-compiled90_1278"
" mpis-to-reset91_1281"
" phase85_1284"
" self87_1287"
" tail?84_1290"
" partially-expanded-bodys100_1268)))))))))))"
"(define-values"
"(finish-expanding-body-expressons103.1)"
"(lifted/12.1"
"(lambda(given-kws_1291 given-argc_1292)"
"(if(= given-argc_1292 3)"
"(let-values(((l2_1293) given-kws_1291))"
"(if(pair? l2_1293)"
"(if(eq?(car l2_1293) '#:compiled-submodules)"
"(let-values(((l2_1294)(cdr l2_1293)))"
"(if(pair? l2_1294)"
"(if(eq?(car l2_1294) '#:ctx)"
"(let-values(((l2_1295)(cdr l2_1294)))"
"(if(pair? l2_1295)"
"(if(eq?(car l2_1295) '#:declared-submodule-names)"
"(let-values(((l2_1296)(cdr l2_1295)))"
"(if(pair? l2_1296)"
"(if(eq?(car l2_1296) '#:modules-being-compiled)"
"(let-values(((l2_1297)(cdr l2_1296)))"
"(if(pair? l2_1297)"
"(if(eq?(car l2_1297) '#:mpis-to-reset)"
"(let-values(((l2_1298)(cdr l2_1297)))"
"(if(pair? l2_1298)"
"(if(eq?(car l2_1298) '#:phase)"
"(let-values(((l2_1299)(cdr l2_1298)))"
"(if(pair? l2_1299)"
"(if(eq?(car l2_1299) '#:self)"
"(let-values(((l2_1300)(cdr l2_1299)))"
"(if(pair? l2_1300)"
"(if(eq?(car l2_1300) '#:tail?)(null?(cdr l2_1300)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1301 given-args_1302 partially-expanded-bodys_1303)"
"(unpack102.1 given-kws_1301 given-args_1302 partially-expanded-bodys_1303)))"
" '(#:compiled-submodules"
" #:ctx"
" #:declared-submodule-names"
" #:modules-being-compiled"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
" '(#:compiled-submodules"
" #:ctx"
" #:declared-submodule-names"
" #:modules-being-compiled"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)))"
"(define-values"
"(check-defined-by-now)"
"(lambda(need-eventually-defined_1304 self_1305)"
"(let-values(((ht_1306) need-eventually-defined_1304))"
"(begin"
"(if((lambda(ht_1307)(hash? ht_1307)) ht_1306)(void)(let-values()(default-in-hash ht_1306)))"
"((letrec-values(((for-loop_1308)"
"(lambda(fold-var_1309 i_1310)"
"(if i_1310"
"(let-values(((phase_1311 l_1312)(hash-iterate-key+value ht_1306 i_1310)))"
"(let-values(((fold-var_1313)"
"(let-values()"
"(let-values(((fold-var_1315)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_1316) l_1312))"
"(begin"
"(if(list? lst_1316)"
"(void)"
"(let-values()(in-list lst_1316)))"
"((letrec-values(((for-loop_1317)"
"(lambda(fold-var_1318"
" lst_1319)"
"(if(pair? lst_1319)"
"(let-values(((id_1320)"
"(unsafe-car"
" lst_1319)))"
"(let-values(((fold-var_1321)"
"(let-values()"
"(let-values(((fold-var_1323)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1324)"
"(let-values(((id561_1325)"
" id_1320)"
"((phase562_1326)"
" phase_1311))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id561_1325"
" phase562_1326))))"
"(if(if b_1324"
"(if(module-binding?"
" b_1324)"
"(if(eq?"
"(module-binding-sym"
" b_1324)"
"(syntax-e$1"
" id_1320))"
"(eq?"
"(module-binding-module"
" b_1324)"
" self_1305)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"reference to an unbound identifier\""
" id_1320)))))"
"(void)))))"
"(values"
" fold-var_1323)))))"
"(for-loop_1317"
" fold-var_1321"
"(unsafe-cdr"
" lst_1319))))"
" fold-var_1318))))"
" for-loop_1317)"
"(void)"
" lst_1316))))"
"(void)))))"
"(values fold-var_1315)))))"
"(for-loop_1308 fold-var_1313(hash-iterate-next ht_1306 i_1310))))"
" fold-var_1309))))"
" for-loop_1308)"
"(void)"
"(hash-iterate-first ht_1306))))))"
"(define-values"
"(lifted/16.1 lifted/17.1 lifted/18.1 lifted/19.1 lifted/20.1)"
"(make-struct-type"
" 'resolve-provides"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'resolve-provides"
"(case-lambda"
"((self_1327 expression-expanded-bodys_1328)(apply missing-kw self_1327 expression-expanded-bodys_1328 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1329 expression-expanded-bodys_1330)(apply missing-kw self_1329 expression-expanded-bodys_1330 null)))))"
"(define-values"
"(resolve-provides117.1)"
"(lambda(ctx109_1331"
" declared-submodule-names105_1332"
" namespace106_1333"
" phase107_1334"
" requires-and-provides104_1335"
" self108_1336"
" expression-expanded-bodys116_1337)"
"(let-values(((expression-expanded-bodys_1338) expression-expanded-bodys116_1337))"
"(let-values(((requires+provides_1339) requires-and-provides104_1335))"
"(let-values(((declared-submodule-names_1340) declared-submodule-names105_1332))"
"(let-values(((m-ns_1341) namespace106_1333))"
"(let-values(((phase_1342) phase107_1334))"
"(let-values(((self_1343) self108_1336))"
"(let-values(((ctx_1344) ctx109_1331))"
"(let-values()"
"(let-values()"
"((letrec-values(((loop_1345)"
"(lambda(bodys_1346 phase_1347)"
"(if(null? bodys_1346)"
"(let-values() null)"
"(if(let-values(((or-part_1348)(parsed?(car bodys_1346))))"
"(if or-part_1348 or-part_1348(expanded+parsed?(car bodys_1346))))"
"(let-values()"
"(cons(car bodys_1346)(loop_1345(cdr bodys_1346) phase_1347)))"
"(if(semi-parsed-begin-for-syntax?(car bodys_1346))"
"(let-values()"
"(let-values(((nested-bodys_1349)"
"(loop_1345"
"(semi-parsed-begin-for-syntax-body(car bodys_1346))"
"(add1 phase_1347))))"
"(cons"
"(let-values(((the-struct_1350)(car bodys_1346)))"
"(if(semi-parsed-begin-for-syntax? the-struct_1350)"
"(let-values(((body563_1351) nested-bodys_1349))"
"(semi-parsed-begin-for-syntax3.1"
"(semi-parsed-begin-for-syntax-s the-struct_1350)"
" body563_1351))"
"(raise-argument-error"
" 'struct-copy"
"                                                          \"semi-parsed-begin-for-syntax?\""
" the-struct_1350)))"
"(loop_1345(cdr bodys_1346) phase_1347))))"
"(let-values()"
"(let-values(((disarmed-body_1352)"
"(syntax-disarm$1(car bodys_1346))))"
"(let-values(((tmp_1353)"
"(core-form-sym disarmed-body_1352 phase_1347)))"
"(if(equal? tmp_1353 '#%provide)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1369)"
"(expand-context-observer"
" ctx_1344)))"
"(if obs_1369"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1369"
" 'enter-prim"
"(car bodys_1346))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1370)"
"(expand-context-observer"
" ctx_1344)))"
"(if obs_1370"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1370"
" 'enter-prim-provide)))"
"(void)))"
"(values))))"
"(let-values(((ok?_1354 #%provide564_1355 spec565_1356)"
"(let-values(((s_1371) disarmed-body_1352))"
"(let-values(((orig-s_1372) s_1371))"
"(let-values(((#%provide564_1373"
" spec565_1374)"
"(let-values(((s_1375)"
"(if(syntax?$1"
" s_1371)"
"(syntax-e$1"
" s_1371)"
" s_1371)))"
"(if(pair? s_1375)"
"(let-values(((#%provide566_1376)"
"(let-values(((s_1378)"
"(car"
" s_1375)))"
" s_1378))"
"((spec567_1377)"
"(let-values(((s_1379)"
"(cdr"
" s_1375)))"
"(let-values(((s_1380)"
"(if(syntax?$1"
" s_1379)"
"(syntax-e$1"
" s_1379)"
" s_1379)))"
"(let-values(((flat-s_1381)"
"(to-syntax-list.1"
" s_1380)))"
"(if(not"
" flat-s_1381)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_1372))"
"(let-values()"
" flat-s_1381)))))))"
"(values"
" #%provide566_1376"
" spec567_1377))"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_1372)))))"
"(values"
" #t"
" #%provide564_1373"
" spec565_1374))))))"
"(let-values(((track-stxes_1367 specs_1368)"
"(parse-and-expand-provides!"
" spec565_1356"
"(car bodys_1346)"
" requires+provides_1339"
" self_1343"
" phase_1347"
"(let-values(((v_1382) ctx_1344))"
"(let-values(((the-struct_1383)"
" v_1382))"
"(if(expand-context/outer?"
" the-struct_1383)"
"(let-values(((context568_1384)"
" 'top-level)"
"((inner569_1385)"
"(let-values(((the-struct_1386)"
"(root-expand-context/outer-inner"
" v_1382)))"
"(if(expand-context/inner?"
" the-struct_1386)"
"(let-values(((phase570_1387)"
" phase_1347)"
"((namespace571_1388)"
"(namespace->namespace-at-phase"
" m-ns_1341"
" phase_1347))"
"((requires+provides572_1389)"
" requires+provides_1339)"
"((declared-submodule-names573_1390)"
" declared-submodule-names_1340))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_1386)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_1386)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_1386)"
"(root-expand-context/inner-defined-syms"
" the-struct_1386)"
"(root-expand-context/inner-counter"
" the-struct_1386)"
"(root-expand-context/inner-lift-key"
" the-struct_1386)"
"(expand-context/inner-to-parsed?"
" the-struct_1386)"
" phase570_1387"
" namespace571_1388"
"(expand-context/inner-user-env"
" the-struct_1386)"
"(expand-context/inner-just-once?"
" the-struct_1386)"
"(expand-context/inner-module-begin-k"
" the-struct_1386)"
"(expand-context/inner-allow-unbound?"
" the-struct_1386)"
"(expand-context/inner-in-local-expand?"
" the-struct_1386)"
"(expand-context/inner-stops"
" the-struct_1386)"
" declared-submodule-names573_1390"
"(expand-context/inner-lifts"
" the-struct_1386)"
"(expand-context/inner-lift-envs"
" the-struct_1386)"
"(expand-context/inner-module-lifts"
" the-struct_1386)"
"(expand-context/inner-require-lifts"
" the-struct_1386)"
"(expand-context/inner-to-module-lifts"
" the-struct_1386)"
" requires+provides572_1389"
"(expand-context/inner-observer"
" the-struct_1386)"
"(expand-context/inner-for-serializable?"
" the-struct_1386)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                        \"expand-context/inner?\""
" the-struct_1386)))))"
"(expand-context/outer1.1"
" inner569_1385"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_1383)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_1383)"
"(root-expand-context/outer-frame-id"
" the-struct_1383)"
" context568_1384"
"(expand-context/outer-env"
" the-struct_1383)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_1383)"
"(expand-context/outer-scopes"
" the-struct_1383)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_1383)"
"(expand-context/outer-binding-layer"
" the-struct_1383)"
"(expand-context/outer-reference-records"
" the-struct_1383)"
"(expand-context/outer-only-immediate?"
" the-struct_1383)"
"(expand-context/outer-need-eventually-defined"
" the-struct_1383)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_1383)"
"(expand-context/outer-name"
" the-struct_1383)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                      \"expand-context/outer?\""
" the-struct_1383)))))))"
"(begin"
"(let-values(((obs_1391)"
"(expand-context-observer ctx_1344)))"
"(if obs_1391"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1391 'exit-prim)))"
"(void)))"
"(if(expand-context-to-parsed? ctx_1344)"
"(let-values()"
"(loop_1345(cdr bodys_1346) phase_1347))"
"(let-values()"
"(cons"
"(syntax-track-origin*"
" track-stxes_1367"
"(let-values(((temp574_1392)(car bodys_1346))"
"((temp575_1393)"
"(list*"
" #%provide564_1355"
" specs_1368)))"
"(rebuild62.1"
" #f"
" #f"
" temp574_1392"
" temp575_1393)))"
"(loop_1345"
"(cdr bodys_1346)"
" phase_1347))))))))))"
"(let-values()"
"(cons"
"(car bodys_1346)"
"(loop_1345(cdr bodys_1346) phase_1347)))))))))))))"
" loop_1345)"
" expression-expanded-bodys_1338"
" phase_1342))))))))))))"
"(define-values"
"(unpack118.1)"
"(lambda(given-kws_1394 given-args_1395 expression-expanded-bodys116_1396)"
"(let-values(((ctx109_1397)(car given-args_1395))"
"((given-kws_1398)(cdr given-kws_1394))"
"((given-args_1399)(cdr given-args_1395)))"
"(let-values(((declared-submodule-names105_1400)(car given-args_1399))"
"((given-kws_1401)(cdr given-kws_1398))"
"((given-args_1402)(cdr given-args_1399)))"
"(let-values(((namespace106_1403)(car given-args_1402))"
"((given-kws_1404)(cdr given-kws_1401))"
"((given-args_1405)(cdr given-args_1402)))"
"(let-values(((phase107_1406)(car given-args_1405))"
"((given-kws_1407)(cdr given-kws_1404))"
"((given-args_1408)(cdr given-args_1405)))"
"(let-values(((requires-and-provides104_1409)(car given-args_1408))"
"((given-kws_1410)(cdr given-kws_1407))"
"((given-args_1411)(cdr given-args_1408)))"
"(let-values(((self108_1412)(car given-args_1411)))"
"(resolve-provides117.1"
" ctx109_1397"
" declared-submodule-names105_1400"
" namespace106_1403"
" phase107_1406"
" requires-and-provides104_1409"
" self108_1412"
" expression-expanded-bodys116_1396)))))))))"
"(define-values"
"(resolve-provides119.1)"
"(lifted/17.1"
"(lambda(given-kws_1413 given-argc_1414)"
"(if(= given-argc_1414 3)"
"(let-values(((l2_1415) given-kws_1413))"
"(if(pair? l2_1415)"
"(if(eq?(car l2_1415) '#:ctx)"
"(let-values(((l2_1416)(cdr l2_1415)))"
"(if(pair? l2_1416)"
"(if(eq?(car l2_1416) '#:declared-submodule-names)"
"(let-values(((l2_1417)(cdr l2_1416)))"
"(if(pair? l2_1417)"
"(if(eq?(car l2_1417) '#:namespace)"
"(let-values(((l2_1418)(cdr l2_1417)))"
"(if(pair? l2_1418)"
"(if(eq?(car l2_1418) '#:phase)"
"(let-values(((l2_1419)(cdr l2_1418)))"
"(if(pair? l2_1419)"
"(if(eq?(car l2_1419) '#:requires-and-provides)"
"(let-values(((l2_1420)(cdr l2_1419)))"
"(if(pair? l2_1420)"
"(if(eq?(car l2_1420) '#:self)(null?(cdr l2_1420)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1421 given-args_1422 expression-expanded-bodys_1423)"
"(unpack118.1 given-kws_1421 given-args_1422 expression-expanded-bodys_1423)))"
" '(#:ctx #:declared-submodule-names #:namespace #:phase #:requires-and-provides #:self)"
" '(#:ctx #:declared-submodule-names #:namespace #:phase #:requires-and-provides #:self)))"
"(define-values"
"(lifted/21.1 lifted/22.1 lifted/23.1 lifted/24.1 lifted/25.1)"
"(make-struct-type"
" 'declare-module-for-expansion"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'declare-module-for-expansion"
"(case-lambda"
"((self_1424 fully-expanded-bodys-except-post-submodules_1425)"
"(apply missing-kw self_1424 fully-expanded-bodys-except-post-submodules_1425 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1426 fully-expanded-bodys-except-post-submodules_1427)"
"(apply missing-kw self_1426 fully-expanded-bodys-except-post-submodules_1427 null)))))"
"(define-values"
"(declare-module-for-expansion141.1)"
"(lambda(ctx127_1428"
" enclosing125_1429"
" fill129_1430"
" module-name-id120_1431"
" modules-being-compiled128_1432"
" namespace123_1433"
" rebuild-s121_1434"
" requires-and-provides122_1435"
" root-ctx126_1436"
" self124_1437"
" fully-expanded-bodys-except-post-submodules140_1438)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1439)"
" fully-expanded-bodys-except-post-submodules140_1438))"
"(let-values(((module-name-id_1440) module-name-id120_1431))"
"(let-values(((rebuild-s_1441) rebuild-s121_1434))"
"(let-values(((requires+provides_1442) requires-and-provides122_1435))"
"(let-values(((m-ns_1443) namespace123_1433))"
"(let-values(((self_1444) self124_1437))"
"(let-values(((enclosing-self_1445) enclosing125_1429))"
"(let-values(((root-ctx_1446) root-ctx126_1436))"
"(let-values(((ctx_1447) ctx127_1428))"
"(let-values(((modules-being-compiled_1448) modules-being-compiled128_1432))"
"(let-values(((compiled-module-box_1449) fill129_1430))"
"(let-values()"
"(let-values(((requires_1450 provides_1451)"
"(extract-requires-and-provides requires+provides_1442 self_1444 self_1444)))"
"(let-values(((parsed-mod_1452)"
"(parsed-module25.1"
" rebuild-s_1441"
" #f"
" module-name-id_1440"
" self_1444"
" requires_1450"
" provides_1451"
"(requires+provides-all-bindings-simple? requires+provides_1442)"
"(root-expand-context-encode-for-module root-ctx_1446 self_1444 self_1444)"
"(parsed-only fully-expanded-bodys-except-post-submodules_1439)"
" #f"
"(hasheq))))"
"(let-values(((module-name_1453)"
"(1/module-path-index-resolve"
"(let-values(((or-part_1456) enclosing-self_1445))"
"(if or-part_1456 or-part_1456 self_1444)))))"
"(let-values(((compiled-module_1454)"
"(let-values(((parsed-mod576_1458) parsed-mod_1452)"
"((temp577_1459)"
"(let-values(((m-ns581_1464) m-ns_1443)"
"((enclosing-self582_1465)"
" enclosing-self_1445)"
"((temp583_1466)"
"(if enclosing-self_1445"
"(1/resolved-module-path-name"
" module-name_1453)"
" #f)))"
"(make-compile-context14.1"
" temp583_1466"
" #t"
" #f"
" #f"
" enclosing-self582_1465"
" #t"
" m-ns581_1464"
" #t"
" #f"
" #f"
" #f"
" #f)))"
"((temp578_1460)"
"(expand-context-for-serializable? ctx_1447))"
"((modules-being-compiled579_1461)"
" modules-being-compiled_1448)"
"((temp580_1462) #f))"
"(compile-module13.1"
" #f"
" #f"
" modules-being-compiled579_1461"
" #t"
" temp580_1462"
" #t"
" temp578_1460"
" #t"
" #f"
" #f"
" parsed-mod576_1458"
" temp577_1459))))"
"(let-values((()"
"(begin"
"(set-box! compiled-module-box_1449 compiled-module_1454)"
"(values))))"
"(let-values(((root-module-name_1455)"
"(resolved-module-path-root-name module-name_1453)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" m-ns_1443"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1455))"
"(let-values()"
"(let-values(((compiled-module584_1468) compiled-module_1454)"
"((temp585_1469) #f))"
"(eval-module8.1"
" #f"
" #f"
" #f"
" #f"
" temp585_1469"
" #t"
" compiled-module584_1468))))))))))))))))))))))))"
"(define-values"
"(unpack142.1)"
"(lambda(given-kws_1470 given-args_1471 fully-expanded-bodys-except-post-submodules140_1472)"
"(let-values(((ctx127_1473)(car given-args_1471))"
"((given-kws_1474)(cdr given-kws_1470))"
"((given-args_1475)(cdr given-args_1471)))"
"(let-values(((enclosing125_1476)(car given-args_1475))"
"((given-kws_1477)(cdr given-kws_1474))"
"((given-args_1478)(cdr given-args_1475)))"
"(let-values(((fill129_1479)(car given-args_1478))"
"((given-kws_1480)(cdr given-kws_1477))"
"((given-args_1481)(cdr given-args_1478)))"
"(let-values(((module-name-id120_1482)(car given-args_1481))"
"((given-kws_1483)(cdr given-kws_1480))"
"((given-args_1484)(cdr given-args_1481)))"
"(let-values(((modules-being-compiled128_1485)(car given-args_1484))"
"((given-kws_1486)(cdr given-kws_1483))"
"((given-args_1487)(cdr given-args_1484)))"
"(let-values(((namespace123_1488)(car given-args_1487))"
"((given-kws_1489)(cdr given-kws_1486))"
"((given-args_1490)(cdr given-args_1487)))"
"(let-values(((rebuild-s121_1491)(car given-args_1490))"
"((given-kws_1492)(cdr given-kws_1489))"
"((given-args_1493)(cdr given-args_1490)))"
"(let-values(((requires-and-provides122_1494)(car given-args_1493))"
"((given-kws_1495)(cdr given-kws_1492))"
"((given-args_1496)(cdr given-args_1493)))"
"(let-values(((root-ctx126_1497)(car given-args_1496))"
"((given-kws_1498)(cdr given-kws_1495))"
"((given-args_1499)(cdr given-args_1496)))"
"(let-values(((self124_1500)(car given-args_1499)))"
"(declare-module-for-expansion141.1"
" ctx127_1473"
" enclosing125_1476"
" fill129_1479"
" module-name-id120_1482"
" modules-being-compiled128_1485"
" namespace123_1488"
" rebuild-s121_1491"
" requires-and-provides122_1494"
" root-ctx126_1497"
" self124_1500"
" fully-expanded-bodys-except-post-submodules140_1472)))))))))))))"
"(define-values"
"(declare-module-for-expansion143.1)"
"(lifted/22.1"
"(lambda(given-kws_1501 given-argc_1502)"
"(if(= given-argc_1502 3)"
"(let-values(((l2_1503) given-kws_1501))"
"(if(pair? l2_1503)"
"(if(eq?(car l2_1503) '#:ctx)"
"(let-values(((l2_1504)(cdr l2_1503)))"
"(if(pair? l2_1504)"
"(if(eq?(car l2_1504) '#:enclosing)"
"(let-values(((l2_1505)(cdr l2_1504)))"
"(if(pair? l2_1505)"
"(if(eq?(car l2_1505) '#:fill)"
"(let-values(((l2_1506)(cdr l2_1505)))"
"(if(pair? l2_1506)"
"(if(eq?(car l2_1506) '#:module-name-id)"
"(let-values(((l2_1507)(cdr l2_1506)))"
"(if(pair? l2_1507)"
"(if(eq?(car l2_1507) '#:modules-being-compiled)"
"(let-values(((l2_1508)(cdr l2_1507)))"
"(if(pair? l2_1508)"
"(if(eq?(car l2_1508) '#:namespace)"
"(let-values(((l2_1509)(cdr l2_1508)))"
"(if(pair? l2_1509)"
"(if(eq?(car l2_1509) '#:rebuild-s)"
"(let-values(((l2_1510)(cdr l2_1509)))"
"(if(pair? l2_1510)"
"(if(eq?(car l2_1510) '#:requires-and-provides)"
"(let-values(((l2_1511)(cdr l2_1510)))"
"(if(pair? l2_1511)"
"(if(eq?(car l2_1511) '#:root-ctx)"
"(let-values(((l2_1512)(cdr l2_1511)))"
"(if(pair? l2_1512)"
"(if(eq?(car l2_1512) '#:self)"
"(null?(cdr l2_1512))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1513 given-args_1514 fully-expanded-bodys-except-post-submodules_1515)"
"(unpack142.1 given-kws_1513 given-args_1514 fully-expanded-bodys-except-post-submodules_1515)))"
" '(#:ctx"
" #:enclosing"
" #:fill"
" #:module-name-id"
" #:modules-being-compiled"
" #:namespace"
" #:rebuild-s"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
" '(#:ctx"
" #:enclosing"
" #:fill"
" #:module-name-id"
" #:modules-being-compiled"
" #:namespace"
" #:rebuild-s"
" #:requires-and-provides"
" #:root-ctx"
" #:self)))"
"(define-values"
"(attach-root-expand-context-properties)"
"(lambda(s_1516 root-ctx_1517 orig-self_1518 new-self_1519)"
"(let-values(((s_1520)"
"(syntax-property$1 s_1516 'module-body-context(root-expand-context-all-scopes-stx root-ctx_1517))))"
"(let-values(((s_1521)"
"(syntax-property$1"
" s_1520"
" 'module-body-inside-context"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope root-ctx_1517)))))"
" s_1521))))"
"(define-values"
"(lifted/26.1 lifted/27.1 lifted/28.1 lifted/29.1 lifted/30.1)"
"(make-struct-type"
" 'expand-post-submodules"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-post-submodules"
"(case-lambda"
"((self_1522 fully-expanded-bodys-except-post-submodules_1523)"
"(apply missing-kw self_1522 fully-expanded-bodys-except-post-submodules_1523 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1524 fully-expanded-bodys-except-post-submodules_1525)"
"(apply missing-kw self_1524 fully-expanded-bodys-except-post-submodules_1525 null)))))"
"(define-values"
"(expand-post-submodules167.1)"
"(lambda(all-scopes-s149_1526"
" compiled-submodules152_1527"
" ctx154_1528"
" declare-enclosing144_1529"
" declared-submodule-names151_1530"
" enclosing-is-cross-phase-persistent?148_1531"
" modules-being-compiled153_1532"
" mpis-to-reset150_1533"
" phase145_1534"
" requires-and-provides147_1535"
" self146_1536"
" fully-expanded-bodys-except-post-submodules166_1537)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1538)"
" fully-expanded-bodys-except-post-submodules166_1537))"
"(let-values(((declare-enclosing-module_1539) declare-enclosing144_1529))"
"(let-values(((phase_1540) phase145_1534))"
"(let-values(((self_1541) self146_1536))"
"(let-values(((requires+provides_1542) requires-and-provides147_1535))"
"(let-values(((enclosing-is-cross-phase-persistent?_1543) enclosing-is-cross-phase-persistent?148_1531))"
"(let-values(((all-scopes-s_1544) all-scopes-s149_1526))"
"(let-values(((mpis-to-reset_1545) mpis-to-reset150_1533))"
"(let-values(((declared-submodule-names_1546) declared-submodule-names151_1530))"
"(let-values(((compiled-submodules_1547) compiled-submodules152_1527))"
"(let-values(((modules-being-compiled_1548) modules-being-compiled153_1532))"
"(let-values(((submod-ctx_1549) ctx154_1528))"
"(let-values()"
"((letrec-values(((loop_1550)"
"(lambda(bodys_1551 phase_1552)"
"(if(null? bodys_1551)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_1553)(car bodys_1551)))"
"(if(semi-parsed-begin-for-syntax? body_1553)"
"(let-values()"
"(let-values(((body-s_1554)"
"(semi-parsed-begin-for-syntax-s body_1553)))"
"(let-values(((nested-bodys_1555)"
"(loop_1550"
"(semi-parsed-begin-for-syntax-body"
" body_1553)"
"(add1 phase_1552))))"
"(let-values(((parsed-bfs_1556)"
"(parsed-begin-for-syntax21.1"
"(keep-properties-only body-s_1554)"
"(parsed-only nested-bodys_1555))))"
"(cons"
"(if(expand-context-to-parsed? submod-ctx_1549)"
" parsed-bfs_1556"
"(expanded+parsed1.1"
"(let-values(((disarmed-body_1557)"
"(syntax-disarm$1 body-s_1554)))"
"(let-values(((ok?_1558"
" begin-for-syntax586_1559"
" _587_1560)"
"(let-values(((s_1571)"
" disarmed-body_1557))"
"(let-values(((orig-s_1572)"
" s_1571))"
"(let-values(((begin-for-syntax586_1573"
" _587_1574)"
"(let-values(((s_1575)"
"(if(syntax?$1"
" s_1571)"
"(syntax-e$1"
" s_1571)"
" s_1571)))"
"(if(pair?"
" s_1575)"
"(let-values(((begin-for-syntax588_1576)"
"(let-values(((s_1578)"
"(car"
" s_1575)))"
" s_1578))"
"((_589_1577)"
"(let-values(((s_1579)"
"(cdr"
" s_1575)))"
"(let-values(((s_1580)"
"(if(syntax?$1"
" s_1579)"
"(syntax-e$1"
" s_1579)"
" s_1579)))"
"(let-values(((flat-s_1581)"
"(to-syntax-list.1"
" s_1580)))"
"(if(not"
" flat-s_1581)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_1572))"
"(let-values()"
" flat-s_1581)))))))"
"(values"
" begin-for-syntax588_1576"
" _589_1577))"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_1572)))))"
"(values"
" #t"
" begin-for-syntax586_1573"
" _587_1574))))))"
"(let-values(((body-s590_1582) body-s_1554)"
"((temp591_1583)"
"(list*"
" begin-for-syntax586_1559"
"(syntax-only"
" nested-bodys_1555))))"
"(rebuild62.1"
" #f"
" #f"
" body-s590_1582"
" temp591_1583))))"
" parsed-bfs_1556))"
"(loop_1550(cdr bodys_1551) phase_1552))))))"
"(if(let-values(((or-part_1584)(parsed? body_1553)))"
"(if or-part_1584"
" or-part_1584"
"(expanded+parsed? body_1553)))"
"(let-values()"
"(cons body_1553(loop_1550(cdr bodys_1551) phase_1552)))"
"(let-values()"
"(let-values(((disarmed-body_1585)"
"(syntax-disarm$1(car bodys_1551))))"
"(let-values(((tmp_1586)"
"(core-form-sym"
" disarmed-body_1585"
" phase_1552)))"
"(if(equal? tmp_1586 'module*)"
"(let-values()"
"(let-values((()"
"(begin"
"(force"
" declare-enclosing-module_1539)"
"(values))))"
"(let-values(((ready-body_1587)"
"(remove-use-site-scopes"
"(car bodys_1551)"
" submod-ctx_1549)))"
"(let-values(((ok?_1588"
" module*592_1589"
" name593_1590"
" _594_1591)"
"(let-values(((s_1605)"
" disarmed-body_1585))"
"(if(let-values(((s_1606)"
"(if(syntax?$1"
" s_1605)"
"(syntax-e$1"
" s_1605)"
" s_1605)))"
"(if(pair? s_1606)"
"(if(let-values(((s_1607)"
"(car"
" s_1606)))"
" #t)"
"(let-values(((s_1608)"
"(cdr"
" s_1606)))"
"(let-values(((s_1609)"
"(if(syntax?$1"
" s_1608)"
"(syntax-e$1"
" s_1608)"
" s_1608)))"
"(if(pair?"
" s_1609)"
"(if(let-values(((s_1610)"
"(car"
" s_1609)))"
" #t)"
"(let-values(((s_1611)"
"(cdr"
" s_1609)))"
"(let-values(((s_1612)"
"(if(syntax?$1"
" s_1611)"
"(syntax-e$1"
" s_1611)"
" s_1611)))"
"(if(pair?"
" s_1612)"
"(if(let-values(((s_1613)"
"(car"
" s_1612)))"
"(let-values(((s_1614)"
"(if(syntax?$1"
" s_1613)"
"(syntax-e$1"
" s_1613)"
" s_1613)))"
"(eq?"
" #f"
" s_1614)))"
"(let-values(((s_1615)"
"(cdr"
" s_1612)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((module*592_1617"
" name593_1618"
" _594_1619)"
"(let-values(((s_1620)"
"(if(syntax?$1"
" s_1605)"
"(syntax-e$1"
" s_1605)"
" s_1605)))"
"(let-values(((module*595_1621)"
"(let-values(((s_1624)"
"(car"
" s_1620)))"
" s_1624))"
"((name596_1622"
" _597_1623)"
"(let-values(((s_1625)"
"(cdr"
" s_1620)))"
"(let-values(((s_1626)"
"(if(syntax?$1"
" s_1625)"
"(syntax-e$1"
" s_1625)"
" s_1625)))"
"(let-values(((name598_1627)"
"(let-values(((s_1629)"
"(car"
" s_1626)))"
" s_1629))"
"((_599_1628)"
"(let-values(((s_1630)"
"(cdr"
" s_1626)))"
"(let-values(((s_1631)"
"(if(syntax?$1"
" s_1630)"
"(syntax-e$1"
" s_1630)"
" s_1630)))"
"(let-values((()"
"(let-values(((s_1633)"
"(car"
" s_1631)))"
"(let-values(((s_1634)"
"(if(syntax?$1"
" s_1633)"
"(syntax-e$1"
" s_1633)"
" s_1633)))"
"(values))))"
"((_600_1632)"
"(let-values(((s_1635)"
"(cdr"
" s_1631)))"
" s_1635)))"
"(values"
" _600_1632))))))"
"(values"
" name598_1627"
" _599_1628))))))"
"(values"
" module*595_1621"
" name596_1622"
" _597_1623)))))"
"(values"
" #t"
" module*592_1617"
" name593_1618"
" _594_1619)))"
"(values #f #f #f #f)))))"
"(let-values(((submod_1604)"
"(if ok?_1588"
"(let-values()"
"(let-values(((neg-phase_1636)"
"(phase-"
" 0"
" phase_1552)))"
"(let-values(((shifted-s_1637)"
"(syntax-shift-phase-level$1"
" ready-body_1587"
" neg-phase_1636)))"
"(let-values(((submod_1638)"
"(let-values(((...er/expand/module.rkt:1143:17_1639)"
" expand-submodule201.1)"
"((shifted-s601_1640)"
" shifted-s_1637)"
"((self602_1641)"
" self_1541)"
"((submod-ctx603_1642)"
" submod-ctx_1549)"
"((temp604_1643)"
" #t)"
"((neg-phase605_1644)"
" neg-phase_1636)"
"((all-scopes-s606_1645)"
" all-scopes-s_1544)"
"((requires+provides607_1646)"
" requires+provides_1542)"
"((enclosing-is-cross-phase-persistent?608_1647)"
" enclosing-is-cross-phase-persistent?_1543)"
"((mpis-to-reset609_1648)"
" mpis-to-reset_1545)"
"((declared-submodule-names610_1649)"
" declared-submodule-names_1546)"
"((compiled-submodules611_1650)"
" compiled-submodules_1547)"
"((modules-being-compiled612_1651)"
" modules-being-compiled_1548))"
"(expand-submodule199.1"
" compiled-submodules611_1650"
" declared-submodule-names610_1649"
" all-scopes-s606_1645"
" #t"
" enclosing-is-cross-phase-persistent?608_1647"
" #t"
" requires+provides607_1646"
" #t"
" temp604_1643"
" neg-phase605_1644"
" #t"
" modules-being-compiled612_1651"
" mpis-to-reset609_1648"
" shifted-s601_1640"
" self602_1641"
" submod-ctx603_1642))))"
"(if(parsed?"
" submod_1638)"
"(let-values()"
" submod_1638)"
"(if(expanded+parsed?"
" submod_1638)"
"(let-values()"
"(let-values(((the-struct_1652)"
" submod_1638))"
"(if(expanded+parsed?"
" the-struct_1652)"
"(let-values(((s613_1653)"
"(syntax-shift-phase-level$1"
"(expanded+parsed-s"
" submod_1638)"
" phase_1552)))"
"(expanded+parsed1.1"
" s613_1653"
"(expanded+parsed-parsed"
" the-struct_1652)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                               \"expanded+parsed?\""
" the-struct_1652))))"
"(let-values()"
"(syntax-shift-phase-level$1"
" submod_1638"
" phase_1552))))))))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1160:15_1654)"
" expand-submodule201.1)"
"((ready-body614_1655)"
" ready-body_1587)"
"((self615_1656)"
" self_1541)"
"((submod-ctx616_1657)"
" submod-ctx_1549)"
"((temp617_1658)"
" #t)"
"((mpis-to-reset618_1659)"
" mpis-to-reset_1545)"
"((declared-submodule-names619_1660)"
" declared-submodule-names_1546)"
"((compiled-submodules620_1661)"
" compiled-submodules_1547)"
"((modules-being-compiled621_1662)"
" modules-being-compiled_1548))"
"(expand-submodule199.1"
" compiled-submodules620_1661"
" declared-submodule-names619_1660"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp617_1658"
" #f"
" #f"
" modules-being-compiled621_1662"
" mpis-to-reset618_1659"
" ready-body614_1655"
" self615_1656"
" submod-ctx616_1657))))))"
"(cons"
" submod_1604"
"(loop_1550"
"(cdr bodys_1551)"
" phase_1552)))))))"
"(let-values()"
"(cons"
"(car bodys_1551)"
"(loop_1550"
"(cdr bodys_1551)"
" phase_1552)))))))))))))))"
" loop_1550)"
" fully-expanded-bodys-except-post-submodules_1538"
" phase_1540))))))))))))))))"
"(define-values"
"(unpack168.1)"
"(lambda(given-kws_1663 given-args_1664 fully-expanded-bodys-except-post-submodules166_1665)"
"(let-values(((all-scopes-s149_1666)(car given-args_1664))"
"((given-kws_1667)(cdr given-kws_1663))"
"((given-args_1668)(cdr given-args_1664)))"
"(let-values(((compiled-submodules152_1669)(car given-args_1668))"
"((given-kws_1670)(cdr given-kws_1667))"
"((given-args_1671)(cdr given-args_1668)))"
"(let-values(((ctx154_1672)(car given-args_1671))"
"((given-kws_1673)(cdr given-kws_1670))"
"((given-args_1674)(cdr given-args_1671)))"
"(let-values(((declare-enclosing144_1675)(car given-args_1674))"
"((given-kws_1676)(cdr given-kws_1673))"
"((given-args_1677)(cdr given-args_1674)))"
"(let-values(((declared-submodule-names151_1678)(car given-args_1677))"
"((given-kws_1679)(cdr given-kws_1676))"
"((given-args_1680)(cdr given-args_1677)))"
"(let-values(((enclosing-is-cross-phase-persistent?148_1681)(car given-args_1680))"
"((given-kws_1682)(cdr given-kws_1679))"
"((given-args_1683)(cdr given-args_1680)))"
"(let-values(((modules-being-compiled153_1684)(car given-args_1683))"
"((given-kws_1685)(cdr given-kws_1682))"
"((given-args_1686)(cdr given-args_1683)))"
"(let-values(((mpis-to-reset150_1687)(car given-args_1686))"
"((given-kws_1688)(cdr given-kws_1685))"
"((given-args_1689)(cdr given-args_1686)))"
"(let-values(((phase145_1690)(car given-args_1689))"
"((given-kws_1691)(cdr given-kws_1688))"
"((given-args_1692)(cdr given-args_1689)))"
"(let-values(((requires-and-provides147_1693)(car given-args_1692))"
"((given-kws_1694)(cdr given-kws_1691))"
"((given-args_1695)(cdr given-args_1692)))"
"(let-values(((self146_1696)(car given-args_1695)))"
"(expand-post-submodules167.1"
" all-scopes-s149_1666"
" compiled-submodules152_1669"
" ctx154_1672"
" declare-enclosing144_1675"
" declared-submodule-names151_1678"
" enclosing-is-cross-phase-persistent?148_1681"
" modules-being-compiled153_1684"
" mpis-to-reset150_1687"
" phase145_1690"
" requires-and-provides147_1693"
" self146_1696"
" fully-expanded-bodys-except-post-submodules166_1665))))))))))))))"
"(define-values"
"(expand-post-submodules169.1)"
"(lifted/27.1"
"(lambda(given-kws_1697 given-argc_1698)"
"(if(= given-argc_1698 3)"
"(let-values(((l2_1699) given-kws_1697))"
"(if(pair? l2_1699)"
"(if(eq?(car l2_1699) '#:all-scopes-s)"
"(let-values(((l2_1700)(cdr l2_1699)))"
"(if(pair? l2_1700)"
"(if(eq?(car l2_1700) '#:compiled-submodules)"
"(let-values(((l2_1701)(cdr l2_1700)))"
"(if(pair? l2_1701)"
"(if(eq?(car l2_1701) '#:ctx)"
"(let-values(((l2_1702)(cdr l2_1701)))"
"(if(pair? l2_1702)"
"(if(eq?(car l2_1702) '#:declare-enclosing)"
"(let-values(((l2_1703)(cdr l2_1702)))"
"(if(pair? l2_1703)"
"(if(eq?(car l2_1703) '#:declared-submodule-names)"
"(let-values(((l2_1704)(cdr l2_1703)))"
"(if(pair? l2_1704)"
"(if(eq?(car l2_1704) '#:enclosing-is-cross-phase-persistent?)"
"(let-values(((l2_1705)(cdr l2_1704)))"
"(if(pair? l2_1705)"
"(if(eq?(car l2_1705) '#:modules-being-compiled)"
"(let-values(((l2_1706)(cdr l2_1705)))"
"(if(pair? l2_1706)"
"(if(eq?(car l2_1706) '#:mpis-to-reset)"
"(let-values(((l2_1707)(cdr l2_1706)))"
"(if(pair? l2_1707)"
"(if(eq?(car l2_1707) '#:phase)"
"(let-values(((l2_1708)(cdr l2_1707)))"
"(if(pair? l2_1708)"
"(if(eq?(car l2_1708) '#:requires-and-provides)"
"(let-values(((l2_1709)(cdr l2_1708)))"
"(if(pair? l2_1709)"
"(if(eq?(car l2_1709) '#:self)"
"(null?(cdr l2_1709))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1710 given-args_1711 fully-expanded-bodys-except-post-submodules_1712)"
"(unpack168.1 given-kws_1710 given-args_1711 fully-expanded-bodys-except-post-submodules_1712)))"
" '(#:all-scopes-s"
" #:compiled-submodules"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:modules-being-compiled"
" #:mpis-to-reset"
" #:phase"
" #:requires-and-provides"
" #:self)"
" '(#:all-scopes-s"
" #:compiled-submodules"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:modules-being-compiled"
" #:mpis-to-reset"
" #:phase"
" #:requires-and-provides"
" #:self)))"
"(define-values"
"(stop-at-module*?)"
"(lambda(ctx_1713)"
"(free-id-set-member?"
"(expand-context-stops ctx_1713)"
"(expand-context-phase ctx_1713)"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx 'module*)(expand-context-phase ctx_1713)))))"
"(define-values"
"(lifted/31.1 lifted/32.1 lifted/33.1 lifted/34.1 lifted/35.1)"
"(make-struct-type"
" 'check-ids-unbound"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'check-ids-unbound"
"(case-lambda"
"((self_1714 ids_1715 phase_1716 requires+provides_1717)"
"(apply missing-kw self_1714 ids_1715 phase_1716 requires+provides_1717 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1718 ids_1719 phase_1720 requires+provides_1721)"
"(apply missing-kw self_1718 ids_1719 phase_1720 requires+provides_1721 null)))))"
"(define-values"
"(check-ids-unbound175.1)"
"(lambda(in170_1722 ids172_1723 phase173_1724 requires+provides174_1725)"
"(let-values(((ids_1726) ids172_1723))"
"(let-values(((phase_1727) phase173_1724))"
"(let-values(((requires+provides_1728) requires+provides174_1725))"
"(let-values(((s_1729) in170_1722))"
"(let-values()"
"(let-values(((lst_1730) ids_1726))"
"(begin"
"(if(list? lst_1730)(void)(let-values()(in-list lst_1730)))"
"((letrec-values(((for-loop_1731)"
"(lambda(fold-var_1732 lst_1733)"
"(if(pair? lst_1733)"
"(let-values(((id_1734)(unsafe-car lst_1733)))"
"(let-values(((fold-var_1735)"
"(let-values()"
"(let-values(((fold-var_1737)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((requires+provides622_1739)"
" requires+provides_1728)"
"((id623_1740) id_1734)"
"((phase624_1741) phase_1727)"
"((s625_1742) s_1729)"
"((temp626_1743) 'module))"
"(check-not-defined87.1"
" #f"
" #f"
" #f"
" #f"
" s625_1742"
" #f"
" #f"
" #f"
" #f"
" temp626_1743"
" requires+provides622_1739"
" id623_1740"
" phase624_1741)))"
"(void)))))"
"(values fold-var_1737)))))"
"(for-loop_1731 fold-var_1735(unsafe-cdr lst_1733))))"
" fold-var_1732))))"
" for-loop_1731)"
"(void)"
" lst_1730))))))))))"
"(define-values"
"(unpack176.1)"
"(lambda(given-kws_1744 given-args_1745 ids172_1746 phase173_1747 requires+provides174_1748)"
"(let-values(((in170_1749)(car given-args_1745)))"
"(check-ids-unbound175.1 in170_1749 ids172_1746 phase173_1747 requires+provides174_1748))))"
"(define-values"
"(check-ids-unbound177.1)"
"(lifted/32.1"
"(lambda(given-kws_1750 given-argc_1751)"
"(if(= given-argc_1751 5)"
"(let-values(((l2_1752) given-kws_1750))"
"(if(pair? l2_1752)(if(eq?(car l2_1752) '#:in)(null?(cdr l2_1752)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1753 given-args_1754 ids_1755 phase_1756 requires+provides_1757)"
"(unpack176.1 given-kws_1753 given-args_1754 ids_1755 phase_1756 requires+provides_1757)))"
" '(#:in)"
" '(#:in)))"
"(define-values"
"(eval-nested-bodys)"
"(lambda(bodys_1758 phase_1759 m-ns_1760 self_1761 ctx_1762)"
"(let-values(((lst_1763) bodys_1758))"
"(begin"
"(if(list? lst_1763)(void)(let-values()(in-list lst_1763)))"
"((letrec-values(((for-loop_1764)"
"(lambda(fold-var_1765 lst_1766)"
"(if(pair? lst_1766)"
"(let-values(((body_1767)(unsafe-car lst_1766)))"
"(let-values(((fold-var_1768)"
"(let-values()"
"(let-values(((fold-var_1770)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_1771)"
"(if(expanded+parsed? body_1767)"
"(expanded+parsed-parsed body_1767)"
" body_1767)))"
"(if(parsed-define-values? p_1771)"
"(let-values()"
"(let-values(((ids_1772)"
"(parsed-define-values-ids"
" p_1771)))"
"(let-values(((vals_1773)"
"(eval-for-bindings"
" ids_1772"
"(parsed-define-values-rhs"
" p_1771)"
" phase_1759"
" m-ns_1760"
" ctx_1762)))"
"(let-values(((lst_1774) ids_1772)"
"((lst_1775)"
"(parsed-define-values-syms"
" p_1771))"
"((lst_1776) vals_1773))"
"(begin"
"(if(list? lst_1774)"
"(void)"
"(let-values()(in-list lst_1774)))"
"(if(list? lst_1775)"
"(void)"
"(let-values()(in-list lst_1775)))"
"(if(list? lst_1776)"
"(void)"
"(let-values()(in-list lst_1776)))"
"((letrec-values(((for-loop_1777)"
"(lambda(fold-var_1778"
" lst_1779"
" lst_1780"
" lst_1781)"
"(if(if(pair?"
" lst_1779)"
"(if(pair?"
" lst_1780)"
"(pair?"
" lst_1781)"
" #f)"
" #f)"
"(let-values(((id_1782)"
"(unsafe-car"
" lst_1779))"
"((sym_1783)"
"(unsafe-car"
" lst_1780))"
"((val_1784)"
"(unsafe-car"
" lst_1781)))"
"(let-values(((fold-var_1785)"
"(let-values()"
"(let-values(((fold-var_1787)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" m-ns_1760"
" phase_1759"
" sym_1783"
" val_1784))"
"(void)))))"
"(values"
" fold-var_1787)))))"
"(for-loop_1777"
" fold-var_1785"
"(unsafe-cdr"
" lst_1779)"
"(unsafe-cdr"
" lst_1780)"
"(unsafe-cdr"
" lst_1781))))"
" fold-var_1778))))"
" for-loop_1777)"
"(void)"
" lst_1774"
" lst_1775"
" lst_1776))))))"
"(if(let-values(((or-part_1788)"
"(parsed-define-syntaxes?"
" p_1771)))"
"(if or-part_1788"
" or-part_1788"
"(semi-parsed-begin-for-syntax? p_1771)))"
"(let-values()(void))"
"(if(let-values(((or-part_1789)"
"(parsed-#%declare? p_1771)))"
"(if or-part_1789"
" or-part_1789"
"(syntax?$1 p_1771)))"
"(let-values()(void))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
" ctx_1762"
" 1/current-namespace"
" m-ns_1760)"
"(let-values()"
"(eval-single-top"
"(compile-single"
" p_1771"
"(let-values(((m-ns627_1791)"
" m-ns_1760)"
"((phase628_1792)"
" phase_1759))"
"(make-compile-context14.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" m-ns627_1791"
" #t"
" phase628_1792"
" #t"
" #f"
" #f)))"
" m-ns_1760)))))))))"
"(void)))))"
"(values fold-var_1770)))))"
"(for-loop_1764 fold-var_1768(unsafe-cdr lst_1766))))"
" fold-var_1765))))"
" for-loop_1764)"
"(void)"
" lst_1763)))))"
"(define-values"
"(lifted/36.1 lifted/37.1 lifted/38.1 lifted/39.1 lifted/40.1)"
"(make-struct-type"
" 'expand-submodule"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-submodule"
"(case-lambda"
"((self_1793 s_1794 self_1795 ctx_1796)(apply missing-kw self_1793 s_1794 self_1795 ctx_1796 null))))))"
"(current-inspector)"
"(case-lambda((self_1797 s_1798 self_1799 ctx_1800)(apply missing-kw self_1797 s_1798 self_1799 ctx_1800 null)))))"
"(define-values"
"(expand-submodule199.1)"
"(lambda(compiled-submodules185_1801"
" declared-submodule-names184_1802"
" enclosing-all-scopes-stx182_1803"
" enclosing-all-scopes-stx191_1804"
" enclosing-is-cross-phase-persistent?181_1805"
" enclosing-is-cross-phase-persistent?190_1806"
" enclosing-requires+provides180_1807"
" enclosing-requires+provides189_1808"
" is-star?178_1809"
" keep-enclosing-scope-at-phase179_1810"
" keep-enclosing-scope-at-phase188_1811"
" modules-being-compiled186_1812"
" mpis-to-reset183_1813"
" s196_1814"
" self197_1815"
" ctx198_1816)"
"(let-values(((s_1817) s196_1814))"
"(let-values(((self_1818) self197_1815))"
"(let-values(((ctx_1819) ctx198_1816))"
"(let-values(((is-star?_1820) is-star?178_1809))"
"(let-values(((keep-enclosing-scope-at-phase_1821)"
"(if keep-enclosing-scope-at-phase188_1811 keep-enclosing-scope-at-phase179_1810 #f)))"
"(let-values(((enclosing-r+p_1822)"
"(if enclosing-requires+provides189_1808 enclosing-requires+provides180_1807 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_1823)"
"(if enclosing-is-cross-phase-persistent?190_1806"
" enclosing-is-cross-phase-persistent?181_1805"
" #f)))"
"(let-values(((enclosing-all-scopes-stx_1824)"
"(if enclosing-all-scopes-stx191_1804 enclosing-all-scopes-stx182_1803 #f)))"
"(let-values(((mpis-to-reset_1825) mpis-to-reset183_1813))"
"(let-values(((declared-submodule-names_1826) declared-submodule-names184_1802))"
"(let-values(((compiled-submodules_1827) compiled-submodules185_1801))"
"(let-values(((modules-being-compiled_1828) modules-being-compiled186_1812))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1851)(expand-context-observer ctx_1819)))"
"(if obs_1851"
"(let-values()"
"(let-values()(call-expand-observe obs_1851 'enter-prim s_1817)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1852)(expand-context-observer ctx_1819)))"
"(if obs_1852"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1852"
"(if is-star?_1820"
" 'enter-prim-submodule*"
" 'enter-prim-submodule))))"
"(void)))"
"(values))))"
"(let-values(((ok?_1829 module629_1830 name630_1831 _631_1832)"
"(let-values(((s_1853) s_1817))"
"(let-values(((orig-s_1854) s_1853))"
"(let-values(((module629_1855 name630_1856 _631_1857)"
"(let-values(((s_1858)"
"(if(syntax?$1 s_1853)"
"(syntax-e$1 s_1853)"
" s_1853)))"
"(if(pair? s_1858)"
"(let-values(((module632_1859)"
"(let-values(((s_1862)"
"(car s_1858)))"
" s_1862))"
"((name633_1860 _634_1861)"
"(let-values(((s_1863)"
"(cdr s_1858)))"
"(let-values(((s_1864)"
"(if(syntax?$1"
" s_1863)"
"(syntax-e$1"
" s_1863)"
" s_1863)))"
"(if(pair? s_1864)"
"(let-values(((name635_1865)"
"(let-values(((s_1867)"
"(car"
" s_1864)))"
" s_1867))"
"((_636_1866)"
"(let-values(((s_1868)"
"(cdr"
" s_1864)))"
" s_1868)))"
"(values"
" name635_1865"
" _636_1866))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_1854))))))"
"(values module632_1859 name633_1860 _634_1861))"
"(raise-syntax-error$1"
" #f"
"                                                                       \"bad syntax\""
" orig-s_1854)))))"
"(values #t module629_1855 name630_1856 _631_1857))))))"
"(let-values(((name_1845)(syntax-e$1 name630_1831)))"
"(let-values((()"
"(begin"
"(if(hash-ref declared-submodule-names_1826 name_1845 #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                           \"submodule already declared with the same name\""
" s_1817"
" name_1845))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
" declared-submodule-names_1826"
" name_1845"
"(syntax-e$1 module629_1830))"
"(values))))"
"(let-values(((submod_1846)"
"(let-values(((s637_1870) s_1817)"
"((temp638_1871)"
"(let-values(((v_1880) ctx_1819))"
"(let-values(((the-struct_1881) v_1880))"
"(if(expand-context/outer? the-struct_1881)"
"(let-values(((context647_1882) 'module)"
"((only-immediate?648_1883) #f)"
"((post-expansion-scope649_1884)"
" #f)"
"((inner650_1885)"
"(root-expand-context/outer-inner"
" v_1880)))"
"(expand-context/outer1.1"
" inner650_1885"
" post-expansion-scope649_1884"
"(root-expand-context/outer-use-site-scopes"
" the-struct_1881)"
"(root-expand-context/outer-frame-id"
" the-struct_1881)"
" context647_1882"
"(expand-context/outer-env"
" the-struct_1881)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_1881)"
"(expand-context/outer-scopes"
" the-struct_1881)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_1881)"
"(expand-context/outer-binding-layer"
" the-struct_1881)"
"(expand-context/outer-reference-records"
" the-struct_1881)"
" only-immediate?648_1883"
"(expand-context/outer-need-eventually-defined"
" the-struct_1881)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_1881)"
"(expand-context/outer-name"
" the-struct_1881)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                             \"expand-context/outer?\""
" the-struct_1881)))))"
"((self639_1872) self_1818)"
"((temp640_1873) #t)"
"((keep-enclosing-scope-at-phase641_1874)"
" keep-enclosing-scope-at-phase_1821)"
"((enclosing-all-scopes-stx642_1875)"
" enclosing-all-scopes-stx_1824)"
"((enclosing-r+p643_1876) enclosing-r+p_1822)"
"((enclosing-is-cross-phase-persistent?644_1877)"
" enclosing-is-cross-phase-persistent?_1823)"
"((mpis-to-reset645_1878) mpis-to-reset_1825)"
"((modules-being-compiled646_1879)"
" modules-being-compiled_1828))"
"(expand-module18.1"
" temp640_1873"
" #t"
" enclosing-all-scopes-stx642_1875"
" #t"
" enclosing-is-cross-phase-persistent?644_1877"
" #t"
" enclosing-r+p643_1876"
" #t"
" keep-enclosing-scope-at-phase641_1874"
" #t"
" modules-being-compiled646_1879"
" #t"
" mpis-to-reset645_1878"
" #t"
" s637_1870"
" temp638_1871"
" self639_1872))))"
"(let-values(((ns_1847)(expand-context-namespace ctx_1819)))"
"(let-values(((module-name_1848)(1/module-path-index-resolve self_1818)))"
"(let-values(((root-module-name_1849)"
"(resolved-module-path-root-name module-name_1848)))"
"(let-values(((compiled-submodule_1850)"
"(let-values(((temp651_1887)"
"(if(expanded+parsed? submod_1846)"
"(expanded+parsed-parsed submod_1846)"
" submod_1846))"
"((temp652_1888)"
"(let-values(((ns657_1894) ns_1847)"
"((self658_1895) self_1818)"
"((temp659_1896)"
"(1/resolved-module-path-name"
" module-name_1848)))"
"(make-compile-context14.1"
" temp659_1896"
" #t"
" #f"
" #f"
" self658_1895"
" #t"
" ns657_1894"
" #t"
" #f"
" #f"
" #f"
" #f)))"
"((temp653_1889) #t)"
"((temp654_1890)"
"(expand-context-for-serializable?"
" ctx_1819))"
"((modules-being-compiled655_1891)"
" modules-being-compiled_1828)"
"((temp656_1892) #f))"
"(compile-module13.1"
" temp653_1889"
" #t"
" modules-being-compiled655_1891"
" #t"
" temp656_1892"
" #t"
" temp654_1890"
" #t"
" #f"
" #f"
" temp651_1887"
" temp652_1888))))"
"(begin"
"(hash-set!"
" compiled-submodules_1827"
" name_1845"
"(cons is-star?_1820 compiled-submodule_1850))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_1847"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1849))"
"(let-values()"
"(let-values(((compiled-submodule660_1898)"
" compiled-submodule_1850)"
"((temp661_1899) #f))"
"(eval-module8.1"
" #f"
" #f"
" #f"
" #f"
" temp661_1899"
" #t"
" compiled-submodule660_1898))))"
"(let-values(((obs_1900)(expand-context-observer ctx_1819)))"
"(if obs_1900"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1900 'exit-prim submod_1846)))"
"(void)))"
"(if(not is-star?_1820)"
"(let-values() submod_1846)"
"(if(expanded+parsed? submod_1846)"
"(let-values()"
"(let-values(((the-struct_1901) submod_1846))"
"(if(expanded+parsed? the-struct_1901)"
"(let-values(((parsed662_1902)"
"(let-values(((the-struct_1903)"
"(expanded+parsed-parsed"
" submod_1846)))"
"(if(parsed-module? the-struct_1903)"
"(let-values(((star?663_1904) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_1903)"
" star?663_1904"
"(parsed-module-name-id"
" the-struct_1903)"
"(parsed-module-self"
" the-struct_1903)"
"(parsed-module-requires"
" the-struct_1903)"
"(parsed-module-provides"
" the-struct_1903)"
"(parsed-module-root-ctx-simple?"
" the-struct_1903)"
"(parsed-module-encoded-root-ctx"
" the-struct_1903)"
"(parsed-module-body"
" the-struct_1903)"
"(parsed-module-compiled-module"
" the-struct_1903)"
"(parsed-module-compiled-submodules"
" the-struct_1903)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                   \"parsed-module?\""
" the-struct_1903)))))"
"(expanded+parsed1.1"
"(expanded+parsed-s the-struct_1901)"
" parsed662_1902))"
"(raise-argument-error"
" 'struct-copy"
"                                                                 \"expanded+parsed?\""
" the-struct_1901))))"
"(let-values()"
"(let-values(((the-struct_1905) submod_1846))"
"(if(parsed-module? the-struct_1905)"
"(let-values(((star?664_1906) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_1905)"
" star?664_1906"
"(parsed-module-name-id the-struct_1905)"
"(parsed-module-self the-struct_1905)"
"(parsed-module-requires the-struct_1905)"
"(parsed-module-provides the-struct_1905)"
"(parsed-module-root-ctx-simple? the-struct_1905)"
"(parsed-module-encoded-root-ctx the-struct_1905)"
"(parsed-module-body the-struct_1905)"
"(parsed-module-compiled-module the-struct_1905)"
"(parsed-module-compiled-submodules the-struct_1905)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                 \"parsed-module?\""
" the-struct_1905)))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack200.1)"
"(lambda(given-kws_1907 given-args_1908 s196_1909 self197_1910 ctx198_1911)"
"(let-values(((compiled-submodules185_1912)(car given-args_1908))"
"((given-kws_1913)(cdr given-kws_1907))"
"((given-args_1914)(cdr given-args_1908)))"
"(let-values(((declared-submodule-names184_1915)(car given-args_1914))"
"((given-kws_1916)(cdr given-kws_1913))"
"((given-args_1917)(cdr given-args_1914)))"
"(let-values(((enclosing-all-scopes-stx191_1918)"
"(if(pair? given-kws_1916)(eq? '#:enclosing-all-scopes-stx(car given-kws_1916)) #f)))"
"(let-values(((enclosing-all-scopes-stx182_1919)"
"(if enclosing-all-scopes-stx191_1918(car given-args_1917)(void)))"
"((given-kws_1920)(if enclosing-all-scopes-stx191_1918(cdr given-kws_1916) given-kws_1916))"
"((given-args_1921)(if enclosing-all-scopes-stx191_1918(cdr given-args_1917) given-args_1917)))"
"(let-values(((enclosing-is-cross-phase-persistent?190_1922)"
"(if(pair? given-kws_1920)"
"(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_1920))"
" #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?181_1923)"
"(if enclosing-is-cross-phase-persistent?190_1922(car given-args_1921)(void)))"
"((given-kws_1924)"
"(if enclosing-is-cross-phase-persistent?190_1922(cdr given-kws_1920) given-kws_1920))"
"((given-args_1925)"
"(if enclosing-is-cross-phase-persistent?190_1922(cdr given-args_1921) given-args_1921)))"
"(let-values(((enclosing-requires+provides189_1926)"
"(if(pair? given-kws_1924)(eq? '#:enclosing-requires+provides(car given-kws_1924)) #f)))"
"(let-values(((enclosing-requires+provides180_1927)"
"(if enclosing-requires+provides189_1926(car given-args_1925)(void)))"
"((given-kws_1928)"
"(if enclosing-requires+provides189_1926(cdr given-kws_1924) given-kws_1924))"
"((given-args_1929)"
"(if enclosing-requires+provides189_1926(cdr given-args_1925) given-args_1925)))"
"(let-values(((is-star?178_1930)(car given-args_1929))"
"((given-kws_1931)(cdr given-kws_1928))"
"((given-args_1932)(cdr given-args_1929)))"
"(let-values(((keep-enclosing-scope-at-phase188_1933)"
"(if(pair? given-kws_1931)"
"(eq? '#:keep-enclosing-scope-at-phase(car given-kws_1931))"
" #f)))"
"(let-values(((keep-enclosing-scope-at-phase179_1934)"
"(if keep-enclosing-scope-at-phase188_1933(car given-args_1932)(void)))"
"((given-kws_1935)"
"(if keep-enclosing-scope-at-phase188_1933(cdr given-kws_1931) given-kws_1931))"
"((given-args_1936)"
"(if keep-enclosing-scope-at-phase188_1933(cdr given-args_1932) given-args_1932)))"
"(let-values(((modules-being-compiled186_1937)(car given-args_1936))"
"((given-kws_1938)(cdr given-kws_1935))"
"((given-args_1939)(cdr given-args_1936)))"
"(let-values(((mpis-to-reset183_1940)(car given-args_1939)))"
"(expand-submodule199.1"
" compiled-submodules185_1912"
" declared-submodule-names184_1915"
" enclosing-all-scopes-stx182_1919"
" enclosing-all-scopes-stx191_1918"
" enclosing-is-cross-phase-persistent?181_1923"
" enclosing-is-cross-phase-persistent?190_1922"
" enclosing-requires+provides180_1927"
" enclosing-requires+provides189_1926"
" is-star?178_1930"
" keep-enclosing-scope-at-phase179_1934"
" keep-enclosing-scope-at-phase188_1933"
" modules-being-compiled186_1937"
" mpis-to-reset183_1940"
" s196_1909"
" self197_1910"
" ctx198_1911))))))))))))))))"
"(define-values"
"(expand-submodule201.1)"
"(lifted/37.1"
"(lambda(given-kws_1941 given-argc_1942)"
"(if(= given-argc_1942 5)"
"(subsets?"
" '(#:compiled-submodules #:declared-submodule-names #:is-star? #:modules-being-compiled #:mpis-to-reset)"
" given-kws_1941"
" '(#:compiled-submodules"
" #:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:modules-being-compiled"
" #:mpis-to-reset))"
" #f))"
"(case-lambda"
"((given-kws_1943 given-args_1944 s_1945 self_1946 ctx_1947)"
"(unpack200.1 given-kws_1943 given-args_1944 s_1945 self_1946 ctx_1947)))"
" '(#:compiled-submodules #:declared-submodule-names #:is-star? #:modules-being-compiled #:mpis-to-reset)"
" '(#:compiled-submodules"
" #:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:modules-being-compiled"
" #:mpis-to-reset)))"
"(define-values"
"(lifted/41.1 lifted/42.1 lifted/43.1 lifted/44.1 lifted/45.1)"
"(make-struct-type"
" 'expand-non-module*-submodules"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-non-module*-submodules"
"(case-lambda"
"((self_1948 bodys_1949 phase_1950 self_1951 ctx_1952)"
"(apply missing-kw self_1948 bodys_1949 phase_1950 self_1951 ctx_1952 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1953 bodys_1954 phase_1955 self_1956 ctx_1957)"
"(apply missing-kw self_1953 bodys_1954 phase_1955 self_1956 ctx_1957 null)))))"
"(define-values"
"(expand-non-module*-submodules214.1)"
"(lambda(compiled-submodules204_1958"
" declared-submodule-names203_1959"
" modules-being-compiled205_1960"
" mpis-to-reset202_1961"
" bodys210_1962"
" phase211_1963"
" self212_1964"
" ctx213_1965)"
"(let-values(((bodys_1966) bodys210_1962))"
"(let-values(((phase_1967) phase211_1963))"
"(let-values(((self_1968) self212_1964))"
"(let-values(((ctx_1969) ctx213_1965))"
"(let-values(((mpis-to-reset_1970) mpis-to-reset202_1961))"
"(let-values(((declared-submodule-names_1971) declared-submodule-names203_1959))"
"(let-values(((compiled-submodules_1972) compiled-submodules204_1958))"
"(let-values(((modules-being-compiled_1973) modules-being-compiled205_1960))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_1974) bodys_1966))"
"(begin"
"(if(list? lst_1974)(void)(let-values()(in-list lst_1974)))"
"((letrec-values(((for-loop_1975)"
"(lambda(fold-var_1976 lst_1977)"
"(if(pair? lst_1977)"
"(let-values(((body_1978)(unsafe-car lst_1977)))"
"(let-values(((fold-var_1979)"
"(let-values(((fold-var_1980) fold-var_1976))"
"(let-values(((fold-var_1981)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((tmp_1982)"
"(core-form-sym"
"(syntax-disarm$1"
" body_1978)"
" phase_1967)))"
"(if(equal? tmp_1982 'module)"
"(let-values()"
"(let-values(((body665_1984)"
" body_1978)"
"((self666_1985)"
" self_1968)"
"((ctx667_1986)"
" ctx_1969)"
"((temp668_1987)"
" #f)"
"((mpis-to-reset669_1988)"
" mpis-to-reset_1970)"
"((declared-submodule-names670_1989)"
" declared-submodule-names_1971)"
"((compiled-submodules671_1990)"
" compiled-submodules_1972)"
"((modules-being-compiled672_1991)"
" modules-being-compiled_1973))"
"(expand-submodule199.1"
" compiled-submodules671_1990"
" declared-submodule-names670_1989"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp668_1987"
" #f"
" #f"
" modules-being-compiled672_1991"
" mpis-to-reset669_1988"
" body665_1984"
" self666_1985"
" ctx667_1986)))"
"(let-values() body_1978))))"
" fold-var_1980))))"
"(values fold-var_1981)))))"
"(for-loop_1975 fold-var_1979(unsafe-cdr lst_1977))))"
" fold-var_1976))))"
" for-loop_1975)"
" null"
" lst_1974)))))))))))))))"
"(define-values"
"(unpack215.1)"
"(lambda(given-kws_1992 given-args_1993 bodys210_1994 phase211_1995 self212_1996 ctx213_1997)"
"(let-values(((compiled-submodules204_1998)(car given-args_1993))"
"((given-kws_1999)(cdr given-kws_1992))"
"((given-args_2000)(cdr given-args_1993)))"
"(let-values(((declared-submodule-names203_2001)(car given-args_2000))"
"((given-kws_2002)(cdr given-kws_1999))"
"((given-args_2003)(cdr given-args_2000)))"
"(let-values(((modules-being-compiled205_2004)(car given-args_2003))"
"((given-kws_2005)(cdr given-kws_2002))"
"((given-args_2006)(cdr given-args_2003)))"
"(let-values(((mpis-to-reset202_2007)(car given-args_2006)))"
"(expand-non-module*-submodules214.1"
" compiled-submodules204_1998"
" declared-submodule-names203_2001"
" modules-being-compiled205_2004"
" mpis-to-reset202_2007"
" bodys210_1994"
" phase211_1995"
" self212_1996"
" ctx213_1997)))))))"
"(define-values"
"(expand-non-module*-submodules216.1)"
"(lifted/42.1"
"(lambda(given-kws_2008 given-argc_2009)"
"(if(= given-argc_2009 6)"
"(let-values(((l2_2010) given-kws_2008))"
"(if(pair? l2_2010)"
"(if(eq?(car l2_2010) '#:compiled-submodules)"
"(let-values(((l2_2011)(cdr l2_2010)))"
"(if(pair? l2_2011)"
"(if(eq?(car l2_2011) '#:declared-submodule-names)"
"(let-values(((l2_2012)(cdr l2_2011)))"
"(if(pair? l2_2012)"
"(if(eq?(car l2_2012) '#:modules-being-compiled)"
"(let-values(((l2_2013)(cdr l2_2012)))"
"(if(pair? l2_2013)(if(eq?(car l2_2013) '#:mpis-to-reset)(null?(cdr l2_2013)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_2014 given-args_2015 bodys_2016 phase_2017 self_2018 ctx_2019)"
"(unpack215.1 given-kws_2014 given-args_2015 bodys_2016 phase_2017 self_2018 ctx_2019)))"
" '(#:compiled-submodules #:declared-submodule-names #:modules-being-compiled #:mpis-to-reset)"
" '(#:compiled-submodules #:declared-submodule-names #:modules-being-compiled #:mpis-to-reset)))"
"(define-values"
"(lifted/46.1 lifted/47.1 lifted/48.1 lifted/49.1 lifted/50.1)"
"(make-struct-type"
" 'make-parse-lifted-require"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'make-parse-lifted-require"
"(case-lambda"
"((self_2020 m-ns_2021 self_2022 requires+provides_2023)"
"(apply missing-kw self_2020 m-ns_2021 self_2022 requires+provides_2023 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_2024 m-ns_2025 self_2026 requires+provides_2027)"
"(apply missing-kw self_2024 m-ns_2025 self_2026 requires+provides_2027 null)))))"
"(define-values"
"(make-parse-lifted-require222.1)"
"(lambda(declared-submodule-names217_2028 m-ns219_2029 self220_2030 requires+provides221_2031)"
"(let-values(((m-ns_2032) m-ns219_2029))"
"(let-values(((self_2033) self220_2030))"
"(let-values(((requires+provides_2034) requires+provides221_2031))"
"(let-values(((declared-submodule-names_2035) declared-submodule-names217_2028))"
"(let-values()"
"(lambda(s_2036 phase_2037)"
"(let-values(((ok?_2038 #%require673_2039 req674_2040)"
"(let-values(((s_2051)(syntax-disarm$1 s_2036)))"
"(let-values(((orig-s_2052) s_2051))"
"(let-values(((#%require673_2053 req674_2054)"
"(let-values(((s_2055)"
"(if(syntax?$1 s_2051)(syntax-e$1 s_2051) s_2051)))"
"(if(pair? s_2055)"
"(let-values(((#%require675_2056)"
"(let-values(((s_2058)(car s_2055))) s_2058))"
"((req676_2057)"
"(let-values(((s_2059)(cdr s_2055)))"
"(let-values(((s_2060)"
"(if(syntax?$1 s_2059)"
"(syntax-e$1 s_2059)"
" s_2059)))"
"(if(pair? s_2060)"
"(let-values(((req677_2061)"
"(let-values(((s_2062)"
"(car s_2060)))"
" s_2062))"
"(()"
"(let-values(((s_2063)"
"(cdr s_2060)))"
"(let-values(((s_2064)"
"(if(syntax?$1"
" s_2063)"
"(syntax-e$1"
" s_2063)"
" s_2063)))"
"(if(null? s_2064)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_2052))))))"
"(values req677_2061))"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_2052))))))"
"(values #%require675_2056 req676_2057))"
"                                                    (raise-syntax-error$1 #f \"bad syntax\" orig-s_2052)))))"
"(values #t #%require673_2053 req674_2054))))))"
"(let-values(((temp678_2066)(list req674_2040))"
"((s679_2067) s_2036)"
"((self680_2068) self_2033)"
"((m-ns681_2069) m-ns_2032)"
"((phase682_2070) phase_2037)"
"((phase683_2071) phase_2037)"
"((requires+provides684_2072) requires+provides_2034)"
"((declared-submodule-names685_2073) declared-submodule-names_2035)"
"((temp686_2074) 'require))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names685_2073"
" #t"
" #f"
" #f"
" phase683_2071"
" #t"
" #f"
" #f"
" self680_2068"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp686_2074"
" temp678_2066"
" s679_2067"
" m-ns681_2069"
" phase682_2070"
" requires+provides684_2072)))))))))))"
"(define-values"
"(unpack223.1)"
"(lambda(given-kws_2075 given-args_2076 m-ns219_2077 self220_2078 requires+provides221_2079)"
"(let-values(((declared-submodule-names217_2080)(car given-args_2076)))"
"(make-parse-lifted-require222.1"
" declared-submodule-names217_2080"
" m-ns219_2077"
" self220_2078"
" requires+provides221_2079))))"
"(define-values"
"(make-parse-lifted-require224.1)"
"(lifted/47.1"
"(lambda(given-kws_2081 given-argc_2082)"
"(if(= given-argc_2082 5)"
"(let-values(((l2_2083) given-kws_2081))"
"(if(pair? l2_2083)(if(eq?(car l2_2083) '#:declared-submodule-names)(null?(cdr l2_2083)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_2084 given-args_2085 m-ns_2086 self_2087 requires+provides_2088)"
"(unpack223.1 given-kws_2084 given-args_2085 m-ns_2086 self_2087 requires+provides_2088)))"
" '(#:declared-submodule-names)"
" '(#:declared-submodule-names)))"
"(void)"
"(void)"
"(define-values"
"(as-expand-time-top-level-bindings)"
"(lambda(ids_1 s_2 ctx_3)"
"(let-values(((top-level-bind-scope_4)(root-expand-context-top-level-bind-scope ctx_3)))"
"(let-values(((tl-ids_5)"
"(alt-reverse"
"(let-values(((lst_7) ids_1))"
"(begin"
"(if(list? lst_7)(void)(let-values()(in-list lst_7)))"
"((letrec-values(((for-loop_8)"
"(lambda(fold-var_9 lst_10)"
"(if(pair? lst_10)"
"(let-values(((id_11)(unsafe-car lst_10)))"
"(let-values(((fold-var_12)"
"(let-values(((fold-var_13) fold-var_9))"
"(let-values(((fold-var_14)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-use-site-scopes"
" id_11"
" ctx_3))"
" fold-var_13))))"
"(values fold-var_14)))))"
"(for-loop_8 fold-var_12(unsafe-cdr lst_10))))"
" fold-var_9))))"
" for-loop_8)"
" null"
" lst_7))))))"
"(let-values((()"
"(begin"
"(let-values(((tl-ids1_15) tl-ids_5)((temp2_16)(expand-context-phase ctx_3))((s3_17) s_2))"
"(check-no-duplicate-ids8.1 #f #f tl-ids1_15 temp2_16 s3_17 #f #f))"
"(values))))"
"(let-values(((tmp-bind-ids_6)"
"(alt-reverse"
"(let-values(((lst_18) tl-ids_5))"
"(begin"
"(if(list? lst_18)(void)(let-values()(in-list lst_18)))"
"((letrec-values(((for-loop_19)"
"(lambda(fold-var_20 lst_21)"
"(if(pair? lst_21)"
"(let-values(((id_22)(unsafe-car lst_21)))"
"(let-values(((fold-var_23)"
"(let-values(((fold-var_24) fold-var_20))"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_22"
" top-level-bind-scope_4))"
" fold-var_24))))"
"(values fold-var_25)))))"
"(for-loop_19 fold-var_23(unsafe-cdr lst_21))))"
" fold-var_20))))"
" for-loop_19)"
" null"
" lst_18))))))"
"(values tl-ids_5(select-defined-syms-and-bind!/ctx tmp-bind-ids_6 ctx_3))))))))"
"(void)"
"(void)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-values"
"(lambda(s_1 ctx_2)"
"(let-values((()"
"(begin"
"(let-values(((obs_23)(expand-context-observer ctx_2)))"
"(if obs_23"
"(let-values()(let-values()(call-expand-observe obs_23 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_2) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_1)))"
"(values))))"
"(let-values(((disarmed-s_3)(syntax-disarm$1 s_1)))"
"(let-values(((ok?_4 define-values1_5 id2_6 rhs3_7)"
"(let-values(((s_24) s_1))"
"(let-values(((orig-s_25) s_24))"
"(let-values(((define-values1_26 id2_27 rhs3_28)"
"(let-values(((s_29)(if(syntax?$1 s_24)(syntax-e$1 s_24) s_24)))"
"(if(pair? s_29)"
"(let-values(((define-values4_30)"
"(let-values(((s_33)(car s_29))) s_33))"
"((id5_31 rhs6_32)"
"(let-values(((s_34)(cdr s_29)))"
"(let-values(((s_35)"
"(if(syntax?$1 s_34)"
"(syntax-e$1 s_34)"
" s_34)))"
"(if(pair? s_35)"
"(let-values(((id7_36)"
"(let-values(((s_38)(car s_35)))"
"(let-values(((s_39)"
"(if(syntax?$1 s_38)"
"(syntax-e$1 s_38)"
" s_38)))"
"(let-values(((flat-s_40)"
"(to-syntax-list.1"
" s_39)))"
"(if(not flat-s_40)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_25))"
"(let-values()"
"(let-values(((id_41)"
"(let-values(((lst_42)"
" flat-s_40))"
"(begin"
"(if(list?"
" lst_42)"
"(void)"
"(let-values()"
"(in-list"
" lst_42)))"
"((letrec-values(((for-loop_43)"
"(lambda(id_44"
" lst_45)"
"(if(pair?"
" lst_45)"
"(let-values(((s_46)"
"(unsafe-car"
" lst_45)))"
"(let-values(((id_47)"
"(let-values(((id_48)"
" id_44))"
"(let-values(((id_49)"
"(let-values()"
"(let-values(((id10_50)"
"(let-values()"
"(if(let-values(((or-part_51)"
"(if(syntax?$1"
" s_46)"
"(symbol?"
"(syntax-e$1"
" s_46))"
" #f)))"
"(if or-part_51"
" or-part_51"
"(symbol?"
" s_46)))"
" s_46"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"not an identifier\""
" orig-s_25"
" s_46)))))"
"(cons"
" id10_50"
" id_48)))))"
"(values"
" id_49)))))"
"(for-loop_43"
" id_47"
"(unsafe-cdr"
" lst_45))))"
" id_44))))"
" for-loop_43)"
" null"
" lst_42)))))"
"(alt-reverse"
" id_41))))))))"
"((rhs8_37)"
"(let-values(((s_52)(cdr s_35)))"
"(let-values(((s_53)"
"(if(syntax?$1 s_52)"
"(syntax-e$1 s_52)"
" s_52)))"
"(if(pair? s_53)"
"(let-values(((rhs9_54)"
"(let-values(((s_55)"
"(car"
" s_53)))"
" s_55))"
"(()"
"(let-values(((s_56)"
"(cdr"
" s_53)))"
"(let-values(((s_57)"
"(if(syntax?$1"
" s_56)"
"(syntax-e$1"
" s_56)"
" s_56)))"
"(if(null?"
" s_57)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_25))))))"
"(values rhs9_54))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_25))))))"
"(values id7_36 rhs8_37))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_25))))))"
"(values define-values4_30 id5_31 rhs6_32))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_25)))))"
"(values #t define-values1_26 id2_27 rhs3_28))))))"
"(let-values(((ids_20 syms_21)(as-expand-time-top-level-bindings id2_6 s_1 ctx_2)))"
"(let-values(((exp-rhs_22)"
"(let-values(((temp11_58) rhs3_7)((temp12_59)(as-named-context ctx_2 ids_20)))"
"(expand5.1 #f #f temp11_58 temp12_59))))"
"(if(expand-context-to-parsed? ctx_2)"
"(parsed-define-values19.1 s_1 ids_20 syms_21 exp-rhs_22)"
"(let-values(((s13_60) s_1)((temp14_61)(list define-values1_5 ids_20 exp-rhs_22)))"
"(rebuild62.1 #f #f s13_60 temp14_61))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-syntaxes"
"(lambda(s_62 ctx_63)"
"(let-values((()"
"(begin"
"(let-values(((obs_84)(expand-context-observer ctx_63)))"
"(if obs_84"
"(let-values()(let-values()(call-expand-observe obs_84 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_85)(expand-context-observer ctx_63)))"
"(if obs_85(let-values()(let-values()(call-expand-observe obs_85 'prepare-env)))(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_63) 'top-level)"
"(void)"
"                             (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_62)))"
"(values))))"
"(let-values(((disarmed-s_64)(syntax-disarm$1 s_62)))"
"(let-values(((ok?_65 define-syntaxes15_66 id16_67 rhs17_68)"
"(let-values(((s_86) disarmed-s_64))"
"(let-values(((orig-s_87) s_86))"
"(let-values(((define-syntaxes15_88 id16_89 rhs17_90)"
"(let-values(((s_91)(if(syntax?$1 s_86)(syntax-e$1 s_86) s_86)))"
"(if(pair? s_91)"
"(let-values(((define-syntaxes18_92)"
"(let-values(((s_95)(car s_91))) s_95))"
"((id19_93 rhs20_94)"
"(let-values(((s_96)(cdr s_91)))"
"(let-values(((s_97)"
"(if(syntax?$1 s_96)"
"(syntax-e$1 s_96)"
" s_96)))"
"(if(pair? s_97)"
"(let-values(((id21_98)"
"(let-values(((s_100)(car s_97)))"
"(let-values(((s_101)"
"(if(syntax?$1"
" s_100)"
"(syntax-e$1"
" s_100)"
" s_100)))"
"(let-values(((flat-s_102)"
"(to-syntax-list.1"
" s_101)))"
"(if(not flat-s_102)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_87))"
"(let-values()"
"(let-values(((id_103)"
"(let-values(((lst_104)"
" flat-s_102))"
"(begin"
"(if(list?"
" lst_104)"
"(void)"
"(let-values()"
"(in-list"
" lst_104)))"
"((letrec-values(((for-loop_105)"
"(lambda(id_106"
" lst_107)"
"(if(pair?"
" lst_107)"
"(let-values(((s_108)"
"(unsafe-car"
" lst_107)))"
"(let-values(((id_109)"
"(let-values(((id_110)"
" id_106))"
"(let-values(((id_111)"
"(let-values()"
"(let-values(((id24_112)"
"(let-values()"
"(if(let-values(((or-part_113)"
"(if(syntax?$1"
" s_108)"
"(symbol?"
"(syntax-e$1"
" s_108))"
" #f)))"
"(if or-part_113"
" or-part_113"
"(symbol?"
" s_108)))"
" s_108"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"not an identifier\""
" orig-s_87"
" s_108)))))"
"(cons"
" id24_112"
" id_110)))))"
"(values"
" id_111)))))"
"(for-loop_105"
" id_109"
"(unsafe-cdr"
" lst_107))))"
" id_106))))"
" for-loop_105)"
" null"
" lst_104)))))"
"(alt-reverse"
" id_103))))))))"
"((rhs22_99)"
"(let-values(((s_114)(cdr s_97)))"
"(let-values(((s_115)"
"(if(syntax?$1"
" s_114)"
"(syntax-e$1"
" s_114)"
" s_114)))"
"(if(pair? s_115)"
"(let-values(((rhs23_116)"
"(let-values(((s_117)"
"(car"
" s_115)))"
" s_117))"
"(()"
"(let-values(((s_118)"
"(cdr"
" s_115)))"
"(let-values(((s_119)"
"(if(syntax?$1"
" s_118)"
"(syntax-e$1"
" s_118)"
" s_118)))"
"(if(null?"
" s_119)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                \"bad syntax\""
" orig-s_87))))))"
"(values rhs23_116))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_87))))))"
"(values id21_98 rhs22_99))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_87))))))"
"(values define-syntaxes18_92 id19_93 rhs20_94))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_87)))))"
"(values #t define-syntaxes15_88 id16_89 rhs17_90))))))"
"(let-values(((ids_81 syms_82)(as-expand-time-top-level-bindings id16_67 s_62 ctx_63)))"
"(let-values(((exp-rhs_83)"
"(let-values(((temp25_120) rhs17_68)((temp26_121)(as-named-context ctx_63 ids_81)))"
"(expand-transformer43.1 #f #f #f #f #f #f #f #f #f #f temp25_120 temp26_121))))"
"(if(expand-context-to-parsed? ctx_63)"
"(parsed-define-syntaxes20.1 s_62 ids_81 syms_82 exp-rhs_83)"
"(let-values(((s27_122) s_62)((temp28_123)(list define-syntaxes15_66 ids_81 exp-rhs_83)))"
"(rebuild62.1 #f #f s27_122 temp28_123)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin-for-syntax"
"     (lambda (s_124 ctx_125) (raise-syntax-error$1 #f \"not allowed in an expression position\" s_124))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%require"
"(lambda(s_126 ctx_127)"
"(let-values((()"
"(begin"
"(let-values(((obs_143)(expand-context-observer ctx_127)))"
"(if obs_143"
"(let-values()(let-values()(call-expand-observe obs_143 'prim-require)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_127) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"allowed only in a module or the top level\" s_126)))"
"(values))))"
"(let-values(((disarmed-s_128)(syntax-disarm$1 s_126)))"
"(let-values(((ok?_129 #%require29_130 req30_131)"
"(let-values(((s_144) disarmed-s_128))"
"(let-values(((orig-s_145) s_144))"
"(let-values(((#%require29_146 req30_147)"
"(let-values(((s_148)(if(syntax?$1 s_144)(syntax-e$1 s_144) s_144)))"
"(if(pair? s_148)"
"(let-values(((#%require31_149)"
"(let-values(((s_151)(car s_148))) s_151))"
"((req32_150)"
"(let-values(((s_152)(cdr s_148)))"
"(let-values(((s_153)"
"(if(syntax?$1 s_152)"
"(syntax-e$1 s_152)"
" s_152)))"
"(let-values(((flat-s_154)(to-syntax-list.1 s_153)))"
"(if(not flat-s_154)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_145))"
"(let-values() flat-s_154)))))))"
"(values #%require31_149 req32_150))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_145)))))"
"(values #t #%require29_146 req30_147))))))"
"(let-values(((sc_142)(new-scope 'macro)))"
"(begin"
"(let-values(((temp33_156)"
"(alt-reverse"
"(let-values(((lst_164) req30_131))"
"(begin"
"(if(list? lst_164)(void)(let-values()(in-list lst_164)))"
"((letrec-values(((for-loop_165)"
"(lambda(fold-var_166 lst_167)"
"(if(pair? lst_167)"
"(let-values(((req_168)(unsafe-car lst_167)))"
"(let-values(((fold-var_169)"
"(let-values(((fold-var_170) fold-var_166))"
"(let-values(((fold-var_171)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" req_168"
" sc_142))"
" fold-var_170))))"
"(values fold-var_171)))))"
"(for-loop_165 fold-var_169(unsafe-cdr lst_167))))"
" fold-var_166))))"
" for-loop_165)"
" null"
" lst_164)))))"
"((s34_157) s_126)"
"((temp35_158) #f)"
"((temp36_159)(expand-context-namespace ctx_127))"
"((temp37_160)(expand-context-phase ctx_127))"
"((temp38_161)(make-requires+provides #f))"
"((temp39_162) 'require)"
"((temp40_163) #t))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp40_163"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp35_158"
" #t"
" temp39_162"
" temp33_156"
" s34_157"
" temp36_159"
" temp37_160"
" temp38_161))"
"(if(expand-context-to-parsed? ctx_127)(parsed-require23.1 s_126) s_126))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%provide"
"(lambda(s_172 ctx_173)"
"(begin"
"(let-values(((obs_174)(expand-context-observer ctx_173)))"
"(if obs_174(let-values()(let-values()(call-expand-observe obs_174 'prim-provide)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_172)))))"
" print-values)"
"(void)"
"(void)"
"(define-values(ns)(make-namespace))"
"(call-with-values(lambda()(declare-core-module! ns)) print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp1_2) '#%main)((main-primitives2_3) main-primitives)((ns3_4) ns))"
"(declare-hash-based-module!39.1 ns3_4 #f #f #f #f #f #f #f #f temp1_2 main-primitives2_3)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp4_6) '#%utils)((utils-primitives5_7) utils-primitives)((ns6_8) ns))"
"(declare-hash-based-module!39.1 ns6_8 #f #f #f #f #f #f #f #f temp4_6 utils-primitives5_7)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp7_10) '#%place-struct)"
"((place-struct-primitives8_11) place-struct-primitives)"
"((ns9_12) ns)"
"((temp10_13) '(dynamic-place)))"
"(declare-hash-based-module!39.1 ns9_12 #f #f temp10_13 #t #f #f #f #f temp7_10 place-struct-primitives8_11)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp11_15) '#%boot)((boot-primitives12_16) boot-primitives)((ns13_17) ns))"
"(declare-hash-based-module!39.1 ns13_17 #f #f #f #f #f #f #f #f temp11_15 boot-primitives12_16)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((linklet-primitives_18)"
"(hash-remove(hash-remove linklet-primitives 'variable-reference?) 'variable-reference-constant?)))"
"(let-values(((temp25_20) '#%linklet)"
"((linklet-primitives26_21) linklet-primitives_18)"
"((ns27_22) ns)"
"((temp28_23) #t)"
"((temp29_24) #t))"
"(declare-hash-based-module!39.1"
" ns27_22"
" temp28_23"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp29_24"
" #t"
" temp25_20"
" linklet-primitives26_21))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp14_26) '#%expobs)((expobs-primitives15_27) expobs-primitives)((ns16_28) ns)((temp17_29) #t))"
"(declare-hash-based-module!39.1 ns16_28 #f #f #f #f temp17_29 #t #f #f temp14_26 expobs-primitives15_27)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((ns18_31) ns)"
"((eval19_32) 1/eval)"
"((temp20_33)"
"(let-values(((ht_34) main-primitives))"
"(begin"
"(if((lambda(ht_35)(hash? ht_35)) ht_34)(void)(let-values()(default-in-hash-keys ht_34)))"
"((letrec-values(((for-loop_36)"
"(lambda(table_37 i_38)"
"(if i_38"
"(let-values(((name_39)(hash-iterate-key ht_34 i_38)))"
"(let-values(((table_40)"
"(let-values(((table_41) table_37))"
"(let-values(((table_42)"
"(let-values()"
"(let-values(((key_43 val_44)"
"(let-values()"
"(values"
"(let-values() name_39)"
" #t))))"
"(hash-set table_41 key_43 val_44)))))"
"(values table_42)))))"
"(for-loop_36 table_40(hash-iterate-next ht_34 i_38))))"
" table_37))))"
" for-loop_36)"
" '#hash()"
"(hash-iterate-first ht_34))))))"
"(declare-kernel-module!6.1 eval19_32 temp20_33 ns18_31)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((lst_45) runtime-instances))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((name_49)(unsafe-car lst_48)))"
"(let-values(((fold-var_50)"
"(let-values(((fold-var_51) fold-var_47))"
"(if(eq? name_49 '#%kernel)"
" fold-var_51"
"(let-values()"
"(let-values(((fold-var_53)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((name30_55) name_49)"
"((ns31_56) ns)"
"((temp32_57)"
"(let-values(((or-part_58)"
"(eq?"
" name_49"
" '#%foreign)))"
"(if or-part_58"
" or-part_58"
"(let-values(((or-part_59)"
"(eq?"
" name_49"
" '#%futures)))"
"(if or-part_59"
" or-part_59"
"(eq?"
" name_49"
" '#%unsafe)))))))"
"(copy-runtime-module!24.1"
" #f"
" #f"
" #f"
" #f"
" ns31_56"
" #f"
" #f"
" temp32_57"
" #t"
" #f"
" #f"
" #f"
" #f"
" name30_55)))"
"(void)))))"
"(values fold-var_53)))))))"
"(for-loop_46 fold-var_50(unsafe-cdr lst_48))))"
" fold-var_47))))"
" for-loop_46)"
"(void)"
" lst_45))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp21_61) '#%builtin)"
"((temp22_62)(list* '#%place-struct '#%utils '#%boot '#%expobs '#%linklet runtime-instances))"
"((ns23_63) ns)"
"((temp24_64) #f))"
"(declare-reexporting-module!48.1 ns23_63 temp24_64 #t temp21_61 temp22_62)))"
" print-values)"
"(call-with-values(lambda()(1/current-namespace ns)) print-values)"
"(call-with-values(lambda()(1/dynamic-require ''#%kernel 0)) print-values)"
"(define-values(datum->kernel-syntax)(lambda(s_65)(1/datum->syntax core-stx s_65)))"
"(void))"
);

  EVAL_ONE_STR(
"(linklet"
"()"
"((1/module-path-index? module-path-index?)"
"(1/identifier-binding identifier-binding)"
"(1/module-declared? module-declared?)"
"(1/bound-identifier=? bound-identifier=?)"
"(1/module-path? module-path?)"
"(seal seal)"
"(1/syntax-shift-phase-level syntax-shift-phase-level)"
"(embedded-load embedded-load)"
"(1/syntax->datum syntax->datum)"
"(1/dynamic-require dynamic-require)"
"(1/namespace-attach-module-declaration namespace-attach-module-declaration)"
"(make-namespace make-namespace)"
"(1/resolved-module-path? resolved-module-path?)"
"(boot boot)"
"(1/current-namespace current-namespace)"
"(expand$1 expand)"
"(1/namespace-mapped-symbols namespace-mapped-symbols)"
"(1/namespace-attach-module namespace-attach-module)"
"(compile-to-linklets compile-to-linklets)"
"(1/module-compiled-indirect-exports module-compiled-indirect-exports)"
"(datum->kernel-syntax datum->kernel-syntax)"
"(identifier? identifier?)"
"(1/syntax-e syntax-e)"
"(1/syntax-debug-info syntax-debug-info)"
"(namespace->instance namespace->instance)"
"(1/namespace-module-identifier namespace-module-identifier)"
"(1/eval eval)"
"(1/namespace-require namespace-require)"
"(maybe-syntax->datum maybe-syntax->datum)"
"(maybe-raise-missing-module maybe-raise-missing-module)"
"(syntax?$1 syntax?)"
"(1/module-compiled-exports module-compiled-exports)"
"(1/module-path-index-join module-path-index-join)"
"(1/read-syntax read-syntax)"
"(syntax-property$1 syntax-property)"
"(1/module->language-info module->language-info)"
"(dynamic-require-reader dynamic-require-reader)"
"(1/namespace-syntax-introduce namespace-syntax-introduce)"
"(1/compile compile)"
"(1/datum->syntax datum->syntax))"
"(void)"
"(define-values"
"(qq-append)"
"  (lambda (a_106 b_107) (if (list? a_106) (append a_106 b_107) (raise-argument-error 'unquote-splicing \"list?\" a_106))))"
"(void)"
"(void)"
"(define-values(call/ec) call-with-escape-continuation)"
"(void)"
"(void)"
" (define-values (bad-list$1) (lambda (who_1 orig-l_2) (raise-mismatch-error who_1 \"not a proper list: \" orig-l_2)))"
"(define-values"
"(memq memv member)"
"(let-values()"
"(let-values()"
"(values"
"(let-values(((memq_12)"
"(lambda(v_13 orig-l_14)"
"((letrec-values(((loop_15)"
"(lambda(ls_16)"
"(if(null? ls_16)"
"(let-values() #f)"
"(if(not(pair? ls_16))"
"(let-values()(bad-list$1 'memq orig-l_14))"
"(if(eq? v_13(car ls_16))"
"(let-values() ls_16)"
"(let-values()(loop_15(cdr ls_16)))))))))"
" loop_15)"
" orig-l_14))))"
" memq_12)"
"(let-values(((memv_17)"
"(lambda(v_18 orig-l_19)"
"((letrec-values(((loop_20)"
"(lambda(ls_21)"
"(if(null? ls_21)"
"(let-values() #f)"
"(if(not(pair? ls_21))"
"(let-values()(bad-list$1 'memv orig-l_19))"
"(if(eqv? v_18(car ls_21))"
"(let-values() ls_21)"
"(let-values()(loop_20(cdr ls_21)))))))))"
" loop_20)"
" orig-l_19))))"
" memv_17)"
"(let-values(((default_22)"
"(let-values(((member_23)"
"(lambda(v_24 orig-l_25)"
"((letrec-values(((loop_26)"
"(lambda(ls_27)"
"(if(null? ls_27)"
"(let-values() #f)"
"(if(not(pair? ls_27))"
"(let-values()(bad-list$1 'member orig-l_25))"
"(if(equal? v_24(car ls_27))"
"(let-values() ls_27)"
"(let-values()(loop_26(cdr ls_27)))))))))"
" loop_26)"
" orig-l_25))))"
" member_23)))"
"(let-values(((member_28)"
"(case-lambda"
"((v_29 orig-l_30)(default_22 v_29 orig-l_30))"
"((v_31 orig-l_32 eq?_33)"
"(begin"
"(if(if(procedure? eq?_33)(procedure-arity-includes? eq?_33 2) #f)"
"(void)"
"                             (raise-argument-error 'member \"(procedure-arity-includes/c 2)\" eq?_33))"
"((let-values(((member_34)"
"(lambda(v_35 orig-l_36)"
"((letrec-values(((loop_37)"
"(lambda(ls_38)"
"(if(null? ls_38)"
"(let-values() #f)"
"(if(not(pair? ls_38))"
"(let-values()(bad-list$1 'member orig-l_36))"
"(if(eq?_33 v_35(car ls_38))"
"(let-values() ls_38)"
"(let-values()(loop_37(cdr ls_38)))))))))"
" loop_37)"
" orig-l_36))))"
" member_34)"
" v_31"
" orig-l_32))))))"
" member_28))))))"
"(void)"
"(void)"
"(define-values"
"(call-with-exception-handler)"
"(lambda(exnh_454 thunk_455)(begin0(with-continuation-mark exception-handler-key exnh_454(thunk_455))(void))))"
"(define-values"
"(hash-update hash-update! hash-has-key? hash-ref!)"
"(let-values(((not-there_456)(gensym)))"
"(let-values(((up_457)"
"(lambda(who_458 mut?_459 set_460 ht_461 key_462 xform_463 default_464)"
"(begin"
"(if(if(hash? ht_461)(if mut?_459(not(immutable? ht_461))(immutable? ht_461)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_458"
"                           (if mut?_459 \"(and/c hash? (not/c immutable?))\" \"(and/c hash? immutable?)\")"
" ht_461)))"
"(if(if(procedure? xform_463)(procedure-arity-includes? xform_463 1) #f)"
"(void)"
"                        (let-values () (raise-argument-error who_458 \"(any/c . -> . any/c)\" xform_463)))"
"(let-values(((v_465)(hash-ref ht_461 key_462 default_464)))"
"(if(eq? v_465 not-there_456)"
"                          (raise-mismatch-error who_458 \"no value found for key: \" key_462)"
"(set_460 ht_461 key_462(xform_463 v_465))))))))"
"(let-values(((hash-update_466)"
"(case-lambda"
"((ht_470 key_471 xform_472 default_473)"
"(up_457 'hash-update #f hash-set ht_470 key_471 xform_472 default_473))"
"((ht_474 key_475 xform_476)(hash-update ht_474 key_475 xform_476 not-there_456))))"
"((hash-update!_467)"
"(case-lambda"
"((ht_477 key_478 xform_479 default_480)"
"(up_457 'hash-update! #t hash-set! ht_477 key_478 xform_479 default_480))"
"((ht_481 key_482 xform_483)(hash-update! ht_481 key_482 xform_483 not-there_456))))"
"((hash-has-key?_468)"
"(lambda(ht_484 key_485)"
"(begin"
"(if(hash? ht_484)"
"(void)"
"                          (let-values () (raise-argument-error 'hash-has-key? \"hash?\" 0 ht_484 key_485)))"
"(not(eq? not-there_456(hash-ref ht_484 key_485 not-there_456))))))"
"((hash-ref!_469)"
"(lambda(ht_486 key_487 new_488)"
"(begin"
"(if(if(hash? ht_486)(not(immutable? ht_486)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'hash-ref!"
"                             \"(and/c hash? (not/c immutable?))\""
" 0"
" ht_486"
" key_487"
" new_488)))"
"(let-values(((v_489)(hash-ref ht_486 key_487 not-there_456)))"
"(if(eq? not-there_456 v_489)"
"(let-values(((n_490)(if(procedure? new_488)(new_488) new_488)))"
"(begin(hash-set! ht_486 key_487 n_490) n_490))"
" v_489))))))"
"(values hash-update_466 hash-update!_467 hash-has-key?_468 hash-ref!_469)))))"
"(void)"
"(void)"
"(define-values"
"(path-string?)"
"(lambda(s_1)"
"(let-values(((or-part_2)(path? s_1)))"
"(if or-part_2"
" or-part_2"
"(if(string? s_1)"
"(let-values(((or-part_3)(relative-path? s_1)))(if or-part_3 or-part_3(absolute-path? s_1)))"
" #f)))))"
"(define-values(bsbs)(string '#\\\\ '#\\\\))"
"(define-values"
"(normal-case-path)"
"(lambda(s_4)"
"(begin"
"(if(let-values(((or-part_5)(path-for-some-system? s_4)))(if or-part_5 or-part_5(path-string? s_4)))"
"(void)"
"        (let-values () (raise-argument-error 'normal-path-case \"(or/c path-for-some-system? path-string?)\" s_4)))"
"(if(if(path-for-some-system? s_4)(eq?(path-convention-type s_4) 'windows)(eq?(system-type) 'windows))"
"(let-values()"
"(let-values(((str_6)(if(string? s_4) s_4(bytes->string/locale(path->bytes s_4)))))"
"            (if (regexp-match? '#rx\"^[\\\\][\\\\][?][\\\\]\" str_6)"
"(if(string? s_4)(string->path s_4) s_4)"
"(let-values(((s_7)(string-locale-downcase str_6)))"
"(bytes->path"
"(string->bytes/locale"
"(regexp-replace*"
"                   '#rx\"/\""
"                   (if (regexp-match? '#rx\"[/\\\\][. ]+[/\\\\]*$\" s_7) s_7 (regexp-replace* '#rx\"[ .]+([/\\\\]*)$\" s_7 \"\\\\1\"))"
" bsbs))"
" 'windows)))))"
"(if(string? s_4)(let-values()(string->path s_4))(let-values() s_4))))))"
"(define-values"
"(check-extension-call)"
"(lambda(s_8 sfx_9 who_10)"
"(begin"
"(if(let-values(((or-part_11)(path-for-some-system? s_8)))(if or-part_11 or-part_11(path-string? s_8)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c path-for-some-system? path-string?)\" 0 s_8 sfx_9)))"
"(if(let-values(((or-part_12)(string? sfx_9)))(if or-part_12 or-part_12(bytes? sfx_9)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c string? bytes?)\" 1 s_8 sfx_9)))"
"(let-values(((base_13 name_14 dir?_15)(split-path s_8)))"
"(begin"
"(if(not base_13)"
"            (let-values () (raise-mismatch-error who_10 \"cannot add an extension to a root path: \" s_8))"
"(void))"
"(values base_13 name_14))))))"
"(define-values"
"(path-adjust-extension)"
"(lambda(name_16 sep_17 rest-bytes_18 s_19 sfx_20)"
"(let-values(((base_21 name_22)(check-extension-call s_19 sfx_20 name_16)))"
"(let-values(((bs_23)(path-element->bytes name_22)))"
"(let-values(((finish_24)"
"(lambda(i_25 sep_26 i2_27)"
"(bytes->path-element"
"(bytes-append"
"(subbytes bs_23 0 i_25)"
" sep_26"
"(rest-bytes_18 bs_23 i2_27)"
"(if(string? sfx_20)(string->bytes/locale sfx_20(char->integer '#\\?)) sfx_20))"
"(if(path-for-some-system? s_19)(path-convention-type s_19)(system-path-convention-type))))))"
"(let-values(((new-name_28)"
"(letrec-values(((loop_29)"
"(lambda(i_30)"
"(if(zero? i_30)"
"                                             (finish_24 (bytes-length bs_23) #\"\" (bytes-length bs_23))"
"(let-values(((i_31)(sub1 i_30)))"
"(if(if(not(zero? i_31))"
"(eq?(char->integer '#\\.)(bytes-ref bs_23 i_31))"
" #f)"
"(finish_24 i_31 sep_17(add1 i_31))"
"(loop_29 i_31)))))))"
"(loop_29(bytes-length bs_23)))))"
"(if(path-for-some-system? base_21)(build-path base_21 new-name_28) new-name_28)))))))"
"(define-values"
"(path-replace-extension)"
"  (lambda (s_32 sfx_33) (path-adjust-extension 'path-replace-extension #\"\" (lambda (bs_34 i_35) #\"\") s_32 sfx_33)))"
"(define-values"
"(path-add-extension)"
"  (lambda (s_36 sfx_37) (path-adjust-extension 'path-add-extension #\"_\" subbytes s_36 sfx_37)))"
"(define-values"
"(reroot-path)"
"(lambda(p_38 root_39)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_43)(path-string? p_38)))"
"(if or-part_43 or-part_43(path-for-some-system? p_38)))"
"(void)"
"(let-values()"
"                        (raise-argument-error 'reroot-path \"(or/c path-string? path-for-some-system?)\" 0 p_38 root_39)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_44)(path-string? root_39)))"
"(if or-part_44 or-part_44(path-for-some-system? root_39)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'reroot-path"
"                           \"(or/c path-string? path-for-some-system?)\""
" 1"
" p_38"
" root_39)))"
"(values))))"
"(let-values(((conv_40)"
"(if(path-for-some-system? p_38)(path-convention-type p_38)(system-path-convention-type))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_45)(complete-path? p_38)))"
"(if or-part_45 or-part_45(eq?(system-path-convention-type) conv_40)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                               \"path is not complete and not the platform's convention\""
"                               \"path\""
" p_38"
"                               \"platform convention type\""
"(system-path-convention-type))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?"
"(if(path-for-some-system? root_39)"
"(path-convention-type root_39)"
"(system-path-convention-type))"
" conv_40)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                 \"given paths use different conventions\""
"                                 \"path\""
" p_38"
"                                 \"root path\""
" root_39)))"
"(values))))"
"(let-values(((c-p_41)"
"(normal-case-path"
"(cleanse-path(if(complete-path? p_38) p_38(path->complete-path p_38))))))"
"(let-values(((bstr_42)(path->bytes c-p_41)))"
"(if(eq? conv_40 'unix)"
"(let-values()"
"                      (if (bytes=? bstr_42 #\"/\")"
"(if(path-for-some-system? root_39) root_39(string->path root_39))"
"(build-path root_39(bytes->path(subbytes(path->bytes c-p_41) 1) conv_40))))"
"(if(eq? conv_40 'windows)"
"(let-values()"
"(build-path"
" root_39"
"(bytes->path"
"                          (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\[a-z]:\" bstr_42)"
"(let-values()"
"                              (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4 5) #\"\\\\\" (subbytes bstr_42 6)))"
"                            (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                              (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                              (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                                (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                                (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\\" bstr_42)"
"                                  (let-values () (bytes-append #\"UNC\\\\\" (subbytes bstr_42 2)))"
"                                  (if (regexp-match? '#rx\"^[a-z]:\" bstr_42)"
"(let-values()(bytes-append(subbytes bstr_42 0 1)(subbytes bstr_42 2)))"
"(void))))))"
" conv_40)))"
"(void))))))))))))"
"(void)"
"(void)"
"(define-values"
"(path-list-string->path-list)"
"(let-values(((r_1)"
"(byte-regexp"
"(string->bytes/utf-8"
"                  (let-values (((sep_3) (if (eq? (system-type) 'windows) \";\" \":\")))"
"                    (format \"([^~a]*)~a(.*)\" sep_3 sep_3)))))"
"((cons-path_2)"
"(lambda(default_4 s_5 l_6)"
"                  (let-values (((s_7) (if (eq? (system-type) 'windows) (regexp-replace* '#rx#\"\\\"\" s_5 #\"\") s_5)))"
"                    (if (bytes=? s_7 #\"\") (append default_4 l_6) (cons (bytes->path s_7) l_6))))))"
"(lambda(s_8 default_9)"
"(begin"
"(if(let-values(((or-part_10)(bytes? s_8)))(if or-part_10 or-part_10(string? s_8)))"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(or/c bytes? string?)\" s_8)))"
"(if(if(list? default_9)(andmap path? default_9) #f)"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(listof path?)\" default_9)))"
"((letrec-values(((loop_11)"
"(lambda(s_12)"
"(let-values(((m_13)(regexp-match r_1 s_12)))"
"(if m_13"
"(cons-path_2 default_9(cadr m_13)(loop_11(caddr m_13)))"
"(cons-path_2 default_9 s_12 null))))))"
" loop_11)"
"(if(string? s_8)(string->bytes/utf-8 s_8) s_8))))))"
"(void)"
"(void)"
"(define-values"
"(find-executable-path)"
"(case-lambda"
"((program_1 libpath_2 reverse?_3)"
"(begin"
"(if(path-string? program_1)"
"(void)"
"        (let-values () (raise-argument-error 'find-executable-path \"path-string?\" program_1)))"
"(if(let-values(((or-part_4)(not libpath_2)))"
"(if or-part_4 or-part_4(if(path-string? libpath_2)(relative-path? libpath_2) #f)))"
"(void)"
"(let-values()"
"          (raise-argument-error 'find-executable-path \"(or/c #f (and/c path-string? relative-path?))\" libpath_2)))"
"(letrec-values(((found-exec_5)"
"(lambda(exec-name_6)"
"(if libpath_2"
"(let-values(((base_7 name_8 isdir?_9)(split-path exec-name_6)))"
"(let-values(((next_10)"
"(lambda()"
"(let-values(((resolved_11)(resolve-path exec-name_6)))"
"(if(equal? resolved_11 exec-name_6)"
"(let-values() #f)"
"(if(relative-path? resolved_11)"
"(let-values()(found-exec_5(build-path base_7 resolved_11)))"
"(let-values()(found-exec_5 resolved_11))))))))"
"(let-values(((or-part_12)(if reverse?_3(next_10) #f)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(if(path? base_7)"
"(let-values(((lib_14)(build-path base_7 libpath_2)))"
"(if(let-values(((or-part_15)(directory-exists? lib_14)))"
"(if or-part_15 or-part_15(file-exists? lib_14)))"
" lib_14"
" #f))"
" #f)))"
"(if or-part_13 or-part_13(if(not reverse?_3)(next_10) #f)))))))"
" exec-name_6))))"
"(if(if(relative-path? program_1)"
"(let-values(((base_16 name_17 dir?_18)(split-path program_1)))(eq? base_16 'relative))"
" #f)"
"          (let-values (((paths-str_19) (environment-variables-ref (current-environment-variables) #\"PATH\"))"
"((win-add_20)"
"                        (lambda (s_21) (if (eq? (system-type) 'windows) (cons (bytes->path #\".\") s_21) s_21))))"
"((letrec-values(((loop_22)"
"(lambda(paths_23)"
"(if(null? paths_23)"
" #f"
"(let-values(((base_24)(path->complete-path(car paths_23))))"
"(let-values(((name_25)(build-path base_24 program_1)))"
"(if(file-exists? name_25)(found-exec_5 name_25)(loop_22(cdr paths_23)))))))))"
" loop_22)"
"(win-add_20"
"(if paths-str_19(path-list-string->path-list(bytes->string/locale paths-str_19 '#\\?) null) null))))"
"(let-values(((p_26)(path->complete-path program_1)))(if(file-exists? p_26)(found-exec_5 p_26) #f))))))"
"((program_27 libpath_28)(find-executable-path program_27 libpath_28 #f))"
"((program_29)(find-executable-path program_29 #f #f))))"
"(void)"
"(void)"
"(define-values"
"(call-with-default-reading-parameterization)"
"(lambda(thunk_1)"
"(if(if(procedure? thunk_1)(procedure-arity-includes? thunk_1 0) #f)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-case-sensitive"
" #t"
" read-square-bracket-as-paren"
" #t"
" read-curly-brace-as-paren"
" #t"
" read-square-bracket-with-tag"
" #f"
" read-curly-brace-with-tag"
" #f"
" read-accept-box"
" #t"
" read-accept-compiled"
" #f"
" read-accept-bar-quote"
" #t"
" read-accept-graph"
" #t"
" read-decimal-as-inexact"
" #t"
" read-cdot"
" #f"
" read-accept-dot"
" #t"
" read-accept-infix-dot"
" #t"
" read-accept-quasiquote"
" #t"
" read-accept-reader"
" #f"
" read-accept-lang"
" #t"
" current-readtable"
" #f)"
"(let-values()(thunk_1)))"
"      (raise-argument-error 'call-with-default-reading-parameterization \"(procedure-arity-includes/c 0)\" thunk_1))))"
"(void)"
"(void)"
"(define-values"
"(find-main-collects)"
"(lambda()(cache-configuration 0(lambda()(exe-relative-path->complete-path(find-system-path 'collects-dir))))))"
"(define-values"
"(find-main-config)"
"(lambda()(cache-configuration 1(lambda()(exe-relative-path->complete-path(find-system-path 'config-dir))))))"
"(define-values"
"(exe-relative-path->complete-path)"
"(lambda(collects-path_1)"
"(if(complete-path? collects-path_1)"
"(let-values()(simplify-path collects-path_1))"
"(if(absolute-path? collects-path_1)"
"(let-values()"
"(let-values(((exec_2)"
"(path->complete-path"
"(find-executable-path(find-system-path 'exec-file))"
"(find-system-path 'orig-dir))))"
"(let-values(((base_3 name_4 dir?_5)(split-path exec_2)))"
"(simplify-path(path->complete-path collects-path_1 base_3)))))"
"(let-values()"
"(let-values(((p_6)(find-executable-path(find-system-path 'exec-file) collects-path_1 #t)))"
"(if p_6(simplify-path p_6) #f)))))))"
"(void)"
"(void)"
"(define-values"
"(-check-relpath)"
"(lambda(who_1 s_2)"
"(begin"
"      (if (path-string? s_2) (void) (let-values () (raise-argument-error who_1 \"path-string?\" s_2)))"
"(if(relative-path? s_2)"
"(void)"
"        (let-values () (raise-arguments-error who_1 \"invalid relative path\" \"path\" s_2))))))"
"(define-values"
"(-check-collection)"
"(lambda(who_3 collection_4 collection-path_5)"
"(begin(-check-relpath who_3 collection_4)(for-each(lambda(p_6)(-check-relpath who_3 p_6)) collection-path_5))))"
"(define-values"
"(-check-fail)"
"(lambda(who_7 fail_8)"
"(if(if(procedure? fail_8)(procedure-arity-includes? fail_8 1) #f)"
"(void)"
"      (let-values () (raise-argument-error who_7 \"(any/c . -> . any)\" fail_8)))))"
"(define-values"
"(collection-path)"
"(lambda(fail_9 collection_10 collection-path_11)"
"(begin"
"(-check-collection 'collection-path collection_10 collection-path_11)"
"(-check-fail 'collection-path fail_9)"
"(find-col-file fail_9 collection_10 collection-path_11 #f #f))))"
"(define-values"
"(collection-file-path)"
"(lambda(fail_12 check-compiled?_13 file-name_14 collection_15 collection-path_16)"
"(begin"
"(-check-relpath 'collection-file-path file-name_14)"
"(-check-collection 'collection-file-path collection_15 collection-path_16)"
"(-check-fail 'collection-file-path fail_12)"
"(find-col-file fail_12 collection_15 collection-path_16 file-name_14 check-compiled?_13))))"
"(define-values"
"(get-config-table)"
"(lambda(d_17)"
"    (let-values (((p_18) (if d_17 (build-path d_17 \"config.rktd\") #f)))"
"(let-values(((or-part_19)"
"(if p_18"
"(if(file-exists? p_18)"
"(with-input-from-file"
" p_18"
"(lambda()"
"(let-values(((v_20)(call-with-default-reading-parameterization read)))"
"(if(hash? v_20) v_20 #f))))"
" #f)"
" #f)))"
"(if or-part_19 or-part_19 '#hash())))))"
"(define-values"
"(get-installation-name)"
"(lambda(config-table_21)(hash-ref config-table_21 'installation-name(version))))"
"(define-values"
"(coerce-to-path)"
"(lambda(p_22)"
"(if(string? p_22)"
"(let-values()(collects-relative-path->complete-path(string->path p_22)))"
"(if(bytes? p_22)"
"(let-values()(collects-relative-path->complete-path(bytes->path p_22)))"
"(if(path? p_22)(let-values()(collects-relative-path->complete-path p_22))(let-values() p_22))))))"
"(define-values"
"(collects-relative-path->complete-path)"
"(lambda(p_23)"
"(if(complete-path? p_23)"
"(let-values() p_23)"
"(let-values()"
"(path->complete-path"
" p_23"
"(let-values(((or-part_24)(find-main-collects)))(if or-part_24 or-part_24(current-directory))))))))"
"(define-values"
"(add-config-search)"
"(lambda(ht_25 key_26 orig-l_27)"
"(let-values(((l_28)(hash-ref ht_25 key_26 #f)))"
"(if l_28"
"((letrec-values(((loop_29)"
"(lambda(l_30)"
"(if(null? l_30)"
"(let-values() null)"
"(if(not(car l_30))"
"(let-values()(append orig-l_27(loop_29(cdr l_30))))"
"(let-values()(cons(coerce-to-path(car l_30))(loop_29(cdr l_30)))))))))"
" loop_29)"
" l_28)"
" orig-l_27))))"
"(define-values"
"(find-library-collection-links)"
"(lambda()"
"(let-values(((ht_31)(get-config-table(find-main-config))))"
"(let-values(((lf_32)"
"(coerce-to-path"
"(let-values(((or-part_33)(hash-ref ht_31 'links-file #f)))"
"(if or-part_33"
" or-part_33"
"(build-path"
"(let-values(((or-part_34)(hash-ref ht_31 'share-dir #f)))"
"                            (if or-part_34 or-part_34 (build-path 'up \"share\")))"
"                          \"links.rktd\"))))))"
"(append"
"(list #f)"
"(if(if(use-user-specific-search-paths)(use-collection-link-paths) #f)"
"           (list (build-path (find-system-path 'addon-dir) (get-installation-name ht_31) \"links.rktd\"))"
" null)"
"(if(use-collection-link-paths)(add-config-search ht_31 'links-search-files(list lf_32)) null))))))"
"(define-values(links-cache)(make-weak-hash))"
"(define-values(stamp-prompt-tag)(make-continuation-prompt-tag 'stamp))"
"(define-values"
"(file->stamp)"
"(lambda(path_35 old-stamp_36)"
"(if(if old-stamp_36(if(cdr old-stamp_36)(not(sync/timeout 0(cdr old-stamp_36))) #f) #f)"
"(let-values() old-stamp_36)"
"(let-values()"
"(call-with-continuation-prompt"
"(lambda()"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(exn_37)"
"(abort-current-continuation"
" stamp-prompt-tag"
"(if(exn:fail:filesystem? exn_37)(lambda() #f)(lambda()(raise exn_37)))))"
"(let-values(((dir-evt_38)"
"(if(vector-ref(system-type 'fs-change) 2)"
"((letrec-values(((loop_39)"
"(lambda(path_40)"
"(let-values(((base_41 name_42 dir?_43)(split-path path_40)))"
"(if(path? base_41)"
"(if(directory-exists? base_41)"
"(filesystem-change-evt base_41(lambda() #f))"
"(loop_39 base_41))"
" #f)))))"
" loop_39)"
" path_35)"
" #f)))"
"(if(not(file-exists? path_35))"
"(cons #f dir-evt_38)"
"(let-values(((evt_44)"
"(if(vector-ref(system-type 'fs-change) 2)"
"(filesystem-change-evt path_35(lambda() #f))"
" #f)))"
"(begin"
"(if dir-evt_38(let-values()(filesystem-change-evt-cancel dir-evt_38))(void))"
"(cons"
"(let-values(((p_45)(open-input-file path_35)))"
"(dynamic-wind"
" void"
"(lambda()"
"(let-values(((bstr_46)(read-bytes 8192 p_45)))"
"(if(if(bytes? bstr_46)(>=(bytes-length bstr_46) 8192) #f)"
"(apply"
" bytes-append"
"(cons"
" bstr_46"
"((letrec-values(((loop_47)"
"(lambda()"
"(let-values(((bstr_48)(read-bytes 8192 p_45)))"
"(if(eof-object? bstr_48) null(cons bstr_48(loop_47)))))))"
" loop_47))))"
" bstr_46)))"
"(lambda()(close-input-port p_45))))"
" evt_44)))))))"
" stamp-prompt-tag)))))"
"(define-values"
"(no-file-stamp?)"
"(lambda(a_49)(let-values(((or-part_50)(not a_49)))(if or-part_50 or-part_50(not(car a_49))))))"
"(define-values"
"(get-linked-collections)"
"(lambda(links-path_51)"
"(call-with-escape-continuation"
"(lambda(esc_52)"
"(let-values(((make-handler_53)"
"(lambda(ts_54)"
"(lambda(exn_55)"
"(begin"
"(if(exn:fail? exn_55)"
"(let-values(((l_56)(current-logger)))"
"(if(log-level? l_56 'error)"
"(let-values()"
"(log-message"
" l_56"
" 'error"
"(format"
"                                     \"error reading collection links file ~s: ~a\""
" links-path_51"
"(exn-message exn_55))"
"(current-continuation-marks)))"
"(void)))"
"(void))"
"(if ts_54"
"(let-values()(hash-set! links-cache links-path_51(cons ts_54 '#hasheq())))"
"(void))"
"(if(exn:fail? exn_55)(esc_52(make-hasheq)) exn_55))))))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 #f)"
"(let-values(((links-stamp+cache_57)(hash-ref links-cache links-path_51 '(#f . #hasheq()))))"
"(let-values(((a-links-stamp_58)(car links-stamp+cache_57)))"
"(let-values(((ts_59)(file->stamp links-path_51 a-links-stamp_58)))"
"(if(not(equal? ts_59 a-links-stamp_58))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 ts_59)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(let-values(((v_60)"
"(if(no-file-stamp? ts_59)"
" null"
"(let-values(((p_61)(open-input-file links-path_51 'binary)))"
"(dynamic-wind"
" void"
"(lambda()"
"(begin0"
"(read p_61)"
"(if(eof-object?(read p_61))"
"(void)"
"                                               (let-values () (error \"expected a single S-expression\")))))"
"(lambda()(close-input-port p_61)))))))"
"(begin"
"(if(if(list? v_60)"
"(andmap"
"(lambda(p_62)"
"(if(list? p_62)"
"(if(let-values(((or-part_63)(= 2(length p_62))))"
"(if or-part_63 or-part_63(= 3(length p_62))))"
"(if(let-values(((or-part_64)(string?(car p_62))))"
"(if or-part_64"
" or-part_64"
"(let-values(((or-part_65)(eq? 'root(car p_62))))"
"(if or-part_65 or-part_65(eq? 'static-root(car p_62))))))"
"(if(path-string?(cadr p_62))"
"(let-values(((or-part_66)(null?(cddr p_62))))"
"(if or-part_66 or-part_66(regexp?(caddr p_62))))"
" #f)"
" #f)"
" #f)"
" #f))"
" v_60)"
" #f)"
"(void)"
"                            (let-values () (error \"ill-formed content\")))"
"(let-values(((ht_67)(make-hasheq))"
"((dir_68)"
"(let-values(((base_69 name_70 dir?_71)(split-path links-path_51))) base_69)))"
"(begin"
"(for-each"
"(lambda(p_72)"
"(if(let-values(((or-part_73)(null?(cddr p_72))))"
"(if or-part_73 or-part_73(regexp-match?(caddr p_72)(version))))"
"(let-values()"
"(let-values(((dir_74)(simplify-path(path->complete-path(cadr p_72) dir_68))))"
"(if(eq?(car p_72) 'static-root)"
"(let-values()"
"(for-each"
"(lambda(sub_75)"
"(if(directory-exists?(build-path dir_74 sub_75))"
"(let-values()"
"(let-values(((k_76)(string->symbol(path->string sub_75))))"
"(hash-set! ht_67 k_76(cons dir_74(hash-ref ht_67 k_76 null)))))"
"(void)))"
"(directory-list dir_74)))"
"(if(eq?(car p_72) 'root)"
"(let-values()"
"(begin"
"(if(hash-ref ht_67 #f #f)"
"(void)"
"(let-values()(hash-set! ht_67 #f null)))"
"(hash-for-each"
" ht_67"
"(lambda(k_77 v_78)(hash-set! ht_67 k_77(cons dir_74 v_78))))))"
"(let-values()"
"(let-values(((s_79)(string->symbol(car p_72))))"
"(hash-set!"
" ht_67"
" s_79"
"(cons(box dir_74)(hash-ref ht_67 s_79 null)))))))))"
"(void)))"
" v_60)"
"(hash-for-each ht_67(lambda(k_80 v_81)(hash-set! ht_67 k_80(reverse v_81))))"
"(hash-set! links-cache links-path_51(cons ts_59 ht_67))"
" ht_67)))))))"
"(cdr links-stamp+cache_57)))))))))))"
"(define-values"
"(normalize-collection-reference)"
"(lambda(collection_82 collection-path_83)"
"(if(string? collection_82)"
"(let-values()"
"        (let-values (((m_84) (regexp-match-positions '#rx\"/+\" collection_82)))"
"(if m_84"
"(if(=(caar m_84)(sub1(string-length collection_82)))"
"(let-values()(values(substring collection_82 0(caar m_84)) collection-path_83))"
"(let-values()"
"(values"
"(substring collection_82 0(caar m_84))"
"(cons(substring collection_82(cdar m_84)) collection-path_83))))"
"(values collection_82 collection-path_83))))"
"(let-values()"
"(let-values(((base_85 name_86 dir?_87)(split-path collection_82)))"
"(if(eq? base_85 'relative)"
"(values name_86 collection-path_83)"
"(normalize-collection-reference base_85(cons name_86 collection-path_83))))))))"
"(define-values"
"(find-col-file)"
"(lambda(fail_88 collection_89 collection-path_90 file-name_91 check-compiled?_92)"
"(let-values(((collection_93 collection-path_94)(normalize-collection-reference collection_89 collection-path_90)))"
"(let-values(((all-paths_95)"
"(let-values(((sym_96)"
"(string->symbol"
"(if(path? collection_93)(path->string collection_93) collection_93))))"
"((letrec-values(((loop_97)"
"(lambda(l_98)"
"(if(null? l_98)"
"(let-values() null)"
"(if(not(car l_98))"
"(let-values()"
"(append(current-library-collection-paths)(loop_97(cdr l_98))))"
"(if(hash?(car l_98))"
"(let-values()"
"(append"
"(map box(hash-ref(car l_98) sym_96 null))"
"(hash-ref(car l_98) #f null)"
"(loop_97(cdr l_98))))"
"(let-values()"
"(let-values(((ht_99)(get-linked-collections(car l_98))))"
"(append"
"(hash-ref ht_99 sym_96 null)"
"(hash-ref ht_99 #f null)"
"(loop_97(cdr l_98)))))))))))"
" loop_97)"
"(current-library-collection-links)))))"
"(let-values(((done_100)(lambda(p_104)(if file-name_91(build-path p_104 file-name_91) p_104))))"
"(let-values(((*build-path-rep_101)"
"(lambda(p_105 c_106)(if(path? p_105)(build-path p_105 c_106)(unbox p_105)))))"
"(let-values(((*directory-exists?_102)"
"(lambda(orig_107 p_108)(if(path? orig_107)(directory-exists? p_108) #t))))"
"(let-values(((to-string_103)(lambda(p_109)(if(path? p_109)(path->string p_109) p_109))))"
"((letrec-values(((cloop_110)"
"(lambda(paths_111 found-col_112)"
"(if(null? paths_111)"
"(if found-col_112"
"(done_100 found-col_112)"
"(let-values(((rest-coll_113)"
"(if(null? collection-path_94)"
"                                                        \"\""
"(apply"
" string-append"
"((letrec-values(((loop_114)"
"(lambda(cp_115)"
"(if(null?(cdr cp_115))"
"(list(to-string_103(car cp_115)))"
"(list*"
"(to-string_103(car cp_115))"
"                                                                                \"/\""
"(loop_114(cdr cp_115)))))))"
" loop_114)"
" collection-path_94)))))"
"(letrec-values(((filter_116)"
"(lambda(f_117 l_118)"
"(if(null? l_118)"
" null"
"(if(f_117(car l_118))"
"(cons(car l_118)(filter_116 f_117(cdr l_118)))"
"(filter_116 f_117(cdr l_118)))))))"
"(fail_88"
"(format"
"                                              \"collection not found\\n  collection: ~s\\n  in collection directories:~a~a\""
"(if(null? collection-path_94)"
"(to-string_103 collection_93)"
"                                                (string-append (to-string_103 collection_93) \"/\" rest-coll_113))"
"(apply"
" string-append"
"(map"
"                                                (lambda (p_119) (format \"\\n ~a ~a\" \" \" p_119))"
"(let-values(((len_120)(length all-paths_95))"
"((clen_121)(length(current-library-collection-paths))))"
"(if(<(- len_120 clen_121) 5)"
" all-paths_95"
"(append"
"(current-library-collection-paths)"
"(list"
"(format"
"                                                       \"... [~a additional linked and package directories]\""
"(- len_120 clen_121))))))))"
"(if(ormap box? all-paths_95)"
"(format"
"                                                 \"\\n   sub-collection: ~s\\n  in parent directories:~a\""
" rest-coll_113"
"(apply"
" string-append"
"(map"
"                                                   (lambda (p_122) (format \"\\n   ~a\" (unbox p_122)))"
"(filter_116 box? all-paths_95))))"
"                                                \"\"))))))"
"(let-values(((dir_123)(*build-path-rep_101(car paths_111) collection_93)))"
"(if(*directory-exists?_102(car paths_111) dir_123)"
"(let-values(((cpath_124)(apply build-path dir_123 collection-path_94)))"
"(if(if(null? collection-path_94) #t(directory-exists? cpath_124))"
"(if file-name_91"
"(if(let-values(((or-part_125)"
"(file-exists?/maybe-compiled"
" cpath_124"
" file-name_91"
" check-compiled?_92)))"
"(if or-part_125"
" or-part_125"
"(let-values(((alt-file-name_126)"
"(let-values(((file-name_127)"
"(if(path? file-name_91)"
"(path->string file-name_91)"
" file-name_91)))"
"(let-values(((len_128)"
"(string-length file-name_127)))"
"(if(>= len_128 4)"
"(if(string=?"
"                                                                                 \".rkt\""
"(substring"
" file-name_127"
"(- len_128 4)))"
"(string-append"
"(substring file-name_127 0(- len_128 4))"
"                                                                               \".ss\")"
" #f)"
" #f)))))"
"(if alt-file-name_126"
"(file-exists?/maybe-compiled"
" cpath_124"
" alt-file-name_126"
" check-compiled?_92)"
" #f))))"
"(done_100 cpath_124)"
"(cloop_110"
"(cdr paths_111)"
"(let-values(((or-part_129) found-col_112))"
"(if or-part_129 or-part_129 cpath_124))))"
"(done_100 cpath_124))"
"(cloop_110(cdr paths_111) found-col_112)))"
"(cloop_110(cdr paths_111) found-col_112)))))))"
" cloop_110)"
" all-paths_95"
" #f)))))))))"
"(define-values"
"(file-exists?/maybe-compiled)"
"(lambda(dir_130 path_131 check-compiled?_132)"
"(let-values(((or-part_133)(file-exists?(build-path dir_130 path_131))))"
"(if or-part_133"
" or-part_133"
"(if check-compiled?_132"
"          (let-values (((try-path_134) (path-add-extension path_131 #\".zo\"))"
"((modes_135)(use-compiled-file-paths))"
"((roots_136)(current-compiled-file-roots)))"
"(ormap"
"(lambda(d_137)"
"(ormap"
"(lambda(mode_138)"
"(file-exists?"
"(let-values(((p_139)(build-path dir_130 mode_138 try-path_134)))"
"(if(eq? d_137 'same)"
"(let-values() p_139)"
"(if(relative-path? d_137)"
"(let-values()(build-path p_139 d_137))"
"(let-values()(reroot-path p_139 d_137)))))))"
" modes_135))"
" roots_136))"
" #f)))))"
"(define-values"
"(find-library-collection-paths)"
"(case-lambda"
"(()(find-library-collection-paths null null))"
"((extra-collects-dirs_140)(find-library-collection-paths extra-collects-dirs_140 null))"
"((extra-collects-dirs_141 post-collects-dirs_142)"
"(let-values(((user-too?_143)(use-user-specific-search-paths))"
"((cons-if_144)(lambda(f_146 r_147)(if f_146(cons f_146 r_147) r_147)))"
"((config-table_145)(get-config-table(find-main-config))))"
"(path-list-string->path-list"
"(if user-too?_143"
"         (let-values (((c_148) (environment-variables-ref (current-environment-variables) #\"PLTCOLLECTS\")))"
"           (if c_148 (bytes->string/locale c_148 '#\\?) \"\"))"
"         \"\")"
"(add-config-search"
" config-table_145"
" 'collects-search-dirs"
"(cons-if_144"
"(if user-too?_143"
"           (build-path (find-system-path 'addon-dir) (get-installation-name config-table_145) \"collects\")"
" #f)"
"((letrec-values(((loop_149)"
"(lambda(l_150)"
"(if(null? l_150)"
" null"
"(let-values(((collects-path_151)(car l_150)))"
"(let-values(((v_152)(exe-relative-path->complete-path collects-path_151)))"
"(if v_152"
"(cons"
"(simplify-path(path->complete-path v_152(current-directory)))"
"(loop_149(cdr l_150)))"
"(loop_149(cdr l_150)))))))))"
" loop_149)"
"(append extra-collects-dirs_141(list(find-system-path 'collects-dir)) post-collects-dirs_142)))))))))"
"(void)"
"(void)"
"(define-values(load/use-compiled)(lambda(f_1)((current-load/use-compiled) f_1 #f)))"
"(define-values"
"(embedded-load)"
"(lambda(start_2 end_3 str_4)"
"(let-values(((s_5)"
"(if str_4"
" str_4"
"(let-values(((sp_6)(find-system-path 'exec-file)))"
"(let-values(((exe_7)(find-executable-path sp_6 #f)))"
"(let-values(((start_8)"
"(let-values(((or-part_9)(string->number start_2)))(if or-part_9 or-part_9 0))))"
"(let-values(((end_10)"
"(let-values(((or-part_11)(string->number end_3)))"
"(if or-part_11 or-part_11 0))))"
"(with-input-from-file"
" exe_7"
"(lambda()"
"(begin"
"(file-position(current-input-port) start_8)"
"(read-bytes(max 0(- end_10 start_8)))))))))))))"
"(let-values(((p_12)(open-input-bytes s_5)))"
"((letrec-values(((loop_13)"
"(lambda()"
"(let-values(((e_14)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-on-demand-source"
" #t)"
"(let-values()(read p_12)))))"
"(if(eof-object? e_14)(void)(let-values()(begin((current-eval) e_14)(loop_13))))))))"
" loop_13))))))"
"(void)"
"(void)"
"(define-values"
"(prop:keyword-impersonator keyword-impersonator? keyword-impersonator-ref)"
"(make-struct-type-property 'keyword-impersonator))"
"(define-values"
"(keyword-procedure-impersonator-of)"
"(lambda(v_1556)"
"(if(keyword-impersonator? v_1556)(let-values()((keyword-impersonator-ref v_1556) v_1556))(let-values() #f))))"
"(define-values"
"(struct:keyword-procedure mk-kw-proc keyword-procedure? keyword-procedure-ref keyword-procedure-set!)"
"(make-struct-type"
" 'keyword-procedure"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:checked-procedure #t)(cons prop:impersonator-of keyword-procedure-impersonator-of))"
"(current-inspector)"
" #f"
" '(0 1 2 3)))"
"(define-values(keyword-procedure-checker)(make-struct-field-accessor keyword-procedure-ref 0))"
"(define-values(keyword-procedure-proc)(make-struct-field-accessor keyword-procedure-ref 1))"
"(define-values(keyword-procedure-required)(make-struct-field-accessor keyword-procedure-ref 2))"
"(define-values(keyword-procedure-allowed)(make-struct-field-accessor keyword-procedure-ref 3))"
"(define-values"
"(struct:keyword-method make-km keyword-method? km-ref km-set!)"
"(make-struct-type 'procedure struct:keyword-procedure 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(generate-arity-string)"
"(lambda(proc_1557)"
"(let-values(((req_1558 allowed_1559)(procedure-keywords proc_1557))"
"((a_1560)(procedure-arity proc_1557))"
"((keywords-desc_1561)"
"(lambda(opt_1563 req_1564)"
"(format"
"                     \"~a with keyword~a~a\""
"                     (if (null? (cdr req_1564)) (format \"an ~aargument\" opt_1563) (format \"~aarguments\" opt_1563))"
"                     (if (null? (cdr req_1564)) \"\" \"s\")"
"(let-values(((tmp_1565)(length req_1564)))"
"(if(equal? tmp_1565 1)"
"                         (let-values () (format \" ~a\" (car req_1564)))"
"(if(equal? tmp_1565 2)"
"                           (let-values () (format \" ~a and ~a\" (car req_1564) (cadr req_1564)))"
"(let-values()"
"((letrec-values(((loop_1566)"
"(lambda(req_1567)"
"(if(null?(cdr req_1567))"
"                                                   (format \" and ~a\" (car req_1567))"
"                                                   (format \" ~a,~a\" (car req_1567) (loop_1566 (cdr req_1567)))))))"
" loop_1566)"
" req_1564))))))))"
"((method-adjust_1562)"
"(lambda(a_1568)"
"(if(let-values(((or-part_1569)(okm? proc_1557)))"
"(if or-part_1569 or-part_1569(keyword-method? proc_1557)))"
"(if(zero? a_1568) 0(sub1 a_1568))"
" a_1568))))"
"(string-append"
"(if(number? a_1560)"
"         (let-values () (let-values (((a_1570) (method-adjust_1562 a_1560))) (format \"~a\" a_1570)))"
"(if(arity-at-least? a_1560)"
"(let-values()"
"             (let-values (((a_1571) (method-adjust_1562 (arity-at-least-value a_1560)))) (format \"at least ~a\" a_1571)))"
"           (let-values () \"a different number\")))"
"       (if (null? req_1558) \"\" (format \" plus ~a\" (keywords-desc_1561 \"\" req_1558)))"
"(if allowed_1559"
"(let-values(((others_1572)"
"((letrec-values(((loop_1573)"
"(lambda(req_1574 allowed_1575)"
"(if(null? req_1574)"
"(let-values() allowed_1575)"
"(if(eq?(car req_1574)(car allowed_1575))"
"(let-values()(loop_1573(cdr req_1574)(cdr allowed_1575)))"
"(let-values()"
"(cons(car allowed_1575)(loop_1573 req_1574(cdr allowed_1575)))))))))"
" loop_1573)"
" req_1558"
" allowed_1559)))"
"           (if (null? others_1572) \"\" (format \" plus ~a\" (keywords-desc_1561 \"optional \" others_1572))))"
"         \" plus arbitrary keyword arguments\")))))"
"(define-values"
"(struct:okp make-optional-keyword-procedure okp? okp-ref okp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:arity-string generate-arity-string))"
"(current-inspector)"
" 0))"
"(define-values"
"(struct:okm make-optional-keyword-method okm? okm-ref okm-set!)"
"(make-struct-type 'procedure struct:okp 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(prop:named-keyword-procedure named-keyword-procedure? keyword-procedure-name+fail)"
"(make-struct-type-property 'named-keyword-procedure))"
"(define-values"
"(prop:procedure-accessor procedure-accessor? procedure-accessor-ref)"
"(make-struct-type-property"
" 'procedure"
"(lambda(v_1576 info-l_1577)"
"(if(exact-integer? v_1576)(make-struct-field-accessor(list-ref info-l_1577 3) v_1576) #f))))"
"(define-values"
"(new-prop:procedure new-procedure? new-procedure-ref)"
"(make-struct-type-property 'procedure #f(list(cons prop:procedure values)(cons prop:procedure-accessor values))))"
"(define-values"
"(struct:keyword-procedure/arity-error make-kp/ae kp/ae? kp/ae-ref kp/ae-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 0"
" 0"
" #f"
"(list(cons prop:arity-string generate-arity-string)(cons prop:incomplete-arity #t))))"
"(define-values"
"(make-keyword-procedure)"
"(case-lambda"
"((proc_1592)(make-keyword-procedure proc_1592(lambda args_1593(apply proc_1592 null null args_1593))))"
"((proc_1594 plain-proc_1595)"
"(make-optional-keyword-procedure"
"(make-keyword-checker null #f(procedure-arity proc_1594))"
" proc_1594"
" null"
" #f"
" plain-proc_1595))))"
"(define-values"
"(keyword-apply)"
"(lambda(proc_1596 kws_1597 kw-vals_1598 normal-args_1599 . normal-argss_1600)"
"(let-values(((type-error_1601)"
"(lambda(what_1602 which_1603)"
"(apply"
" raise-argument-error"
" 'keyword-apply"
" what_1602"
" which_1603"
" proc_1596"
" kws_1597"
" kw-vals_1598"
" normal-args_1599"
" normal-argss_1600))))"
"(begin"
"        (if (procedure? proc_1596) (void) (let-values () (type-error_1601 \"procedure?\" 0)))"
"((letrec-values(((loop_1604)"
"(lambda(ks_1605)"
"(if(null? ks_1605)"
"(let-values()(void))"
"(if(let-values(((or-part_1606)(not(pair? ks_1605))))"
"(if or-part_1606 or-part_1606(not(keyword?(car ks_1605)))))"
"                                (let-values () (type-error_1601 \"(listof keyword?)\" 1))"
"(if(null?(cdr ks_1605))"
"(let-values()(void))"
"(if(let-values(((or-part_1607)(not(pair?(cdr ks_1605)))))"
"(if or-part_1607 or-part_1607(not(keyword?(cadr ks_1605)))))"
"(let-values()(loop_1604(cdr ks_1605)))"
"(if(keyword<?(car ks_1605)(cadr ks_1605))"
"(let-values()(loop_1604(cdr ks_1605)))"
"(let-values()"
"                                        (type-error_1601 \"(and/c (listof? keyword?) sorted? distinct?)\" 1))))))))))"
" loop_1604)"
" kws_1597)"
"        (if (list? kw-vals_1598) (void) (let-values () (type-error_1601 \"list?\" 2)))"
"(if(=(length kws_1597)(length kw-vals_1598))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'keyword-apply"
"             \"keyword list length does not match value list length\""
"             \"keyword list length\""
"(length kws_1597)"
"             \"value list length\""
"(length kw-vals_1598)"
"             \"keyword list\""
" kws_1597"
"             \"value list\""
" kw-vals_1598)))"
"(let-values(((normal-args_1608)"
"((letrec-values(((loop_1609)"
"(lambda(normal-argss_1610 pos_1611)"
"(if(null?(cdr normal-argss_1610))"
"(let-values(((l_1612)(car normal-argss_1610)))"
"                                              (if (list? l_1612) l_1612 (type-error_1601 \"list?\" pos_1611)))"
"(cons"
"(car normal-argss_1610)"
"(loop_1609(cdr normal-argss_1610)(add1 pos_1611)))))))"
" loop_1609)"
"(cons normal-args_1599 normal-argss_1600)"
" 3)))"
"(if(null? kws_1597)"
"(apply proc_1596 normal-args_1608)"
"(apply"
"(keyword-procedure-extract/method kws_1597(+ 2(length normal-args_1608)) proc_1596 0)"
" kws_1597"
" kw-vals_1598"
" normal-args_1608)))))))"
"(define-values"
"(procedure-keywords)"
"(lambda(p_1613)"
"(if(keyword-procedure? p_1613)"
"(let-values()(values(keyword-procedure-required p_1613)(keyword-procedure-allowed p_1613)))"
"(if(procedure? p_1613)"
"(let-values()"
"(if(new-procedure? p_1613)"
"(let-values(((v_1614)(new-procedure-ref p_1613)))"
"(if(procedure? v_1614)"
"(procedure-keywords v_1614)"
"(let-values(((a_1615)(procedure-accessor-ref p_1613)))"
"(if a_1615(procedure-keywords(a_1615 p_1613))(values null null)))))"
"(values null null)))"
"        (let-values () (raise-argument-error 'procedure-keywords \"procedure?\" p_1613))))))"
"(define-values"
"(missing-kw)"
"(lambda(proc_1616 . args_1617)(apply(keyword-procedure-extract/method null 0 proc_1616 0) null null args_1617)))"
"(define-values"
"(check-kw-args)"
"(lambda(p_1618 kws_1619)"
"((letrec-values(((loop_1620)"
"(lambda(kws_1621 required_1622 allowed_1623)"
"(if(null? kws_1621)"
"(let-values()(if(null? required_1622)(values #f #f)(values(car required_1622) #f)))"
"(if(if(pair? required_1622)(eq?(car required_1622)(car kws_1621)) #f)"
"(let-values()"
"(loop_1620(cdr kws_1621)(cdr required_1622)(if allowed_1623(cdr allowed_1623) #f)))"
"(if(not allowed_1623)"
"(let-values()(loop_1620(cdr kws_1621) required_1622 #f))"
"(if(pair? allowed_1623)"
"(let-values()"
"(if(eq?(car allowed_1623)(car kws_1621))"
"(loop_1620(cdr kws_1621) required_1622(cdr allowed_1623))"
"(loop_1620 kws_1621 required_1622(cdr allowed_1623))))"
"(let-values()(values #f(car kws_1621))))))))))"
" loop_1620)"
" kws_1619"
"(keyword-procedure-required p_1618)"
"(keyword-procedure-allowed p_1618))))"
"(define-values"
"(make-keyword-checker)"
"(lambda(req-kws_1624 allowed-kws_1625 arity_1626)"
"(let-values()"
"(if(not allowed-kws_1625)"
"(let-values()"
"(if(null? req-kws_1624)"
"(let-values()"
"(if(integer? arity_1626)"
"(let-values()(lambda(kws_1637 a_1638)(= a_1638 arity_1626)))"
"(if(arity-at-least? arity_1626)"
"(let-values()"
"(let-values(((arity_1639)(arity-at-least-value arity_1626)))"
"(lambda(kws_1640 a_1641)(>= a_1641 arity_1639))))"
"(let-values()(lambda(kws_1642 a_1643)(arity-includes? arity_1626 a_1643))))))"
"(let-values()"
"(if(integer? arity_1626)"
"(let-values()"
"(lambda(kws_1644 a_1645)(if(subset?$1 req-kws_1624 kws_1644)(= a_1645 arity_1626) #f)))"
"(if(arity-at-least? arity_1626)"
"(let-values()"
"(let-values(((arity_1646)(arity-at-least-value arity_1626)))"
"(lambda(kws_1647 a_1648)(if(subset?$1 req-kws_1624 kws_1647)(>= a_1648 arity_1646) #f))))"
"(let-values()"
"(lambda(kws_1649 a_1650)"
"(if(subset?$1 req-kws_1624 kws_1649)(arity-includes? arity_1626 a_1650) #f))))))))"
"(if(null? allowed-kws_1625)"
"(let-values()"
"(if(integer? arity_1626)"
"(let-values()(lambda(kws_1651 a_1652)(if(null? kws_1651)(= a_1652 arity_1626) #f)))"
"(if(arity-at-least? arity_1626)"
"(let-values()"
"(let-values(((arity_1653)(arity-at-least-value arity_1626)))"
"(lambda(kws_1654 a_1655)(if(null? kws_1654)(>= a_1655 arity_1653) #f))))"
"(let-values()"
"(lambda(kws_1656 a_1657)(if(null? kws_1656)(arity-includes? arity_1626 a_1657) #f))))))"
"(let-values()"
"(if(null? req-kws_1624)"
"(let-values()"
"(if(integer? arity_1626)"
"(let-values()"
"(lambda(kws_1658 a_1659)(if(subset?$1 kws_1658 allowed-kws_1625)(= a_1659 arity_1626) #f)))"
"(if(arity-at-least? arity_1626)"
"(let-values()"
"(let-values(((arity_1660)(arity-at-least-value arity_1626)))"
"(lambda(kws_1661 a_1662)"
"(if(subset?$1 kws_1661 allowed-kws_1625)(>= a_1662 arity_1660) #f))))"
"(let-values()"
"(lambda(kws_1663 a_1664)"
"(if(subset?$1 kws_1663 allowed-kws_1625)(arity-includes? arity_1626 a_1664) #f))))))"
"(let-values()"
"(if(equal? req-kws_1624 allowed-kws_1625)"
"(if(integer? arity_1626)"
"(let-values()"
"(lambda(kws_1665 a_1666)"
"(if((letrec-values(((loop_1667)"
"(lambda(kws_1668 req-kws_1669)"
"(if(null? req-kws_1669)"
"(null? kws_1668)"
"(if(null? kws_1668)"
" #f"
"(if(eq?(car kws_1668)(car req-kws_1669))"
"(loop_1667(cdr kws_1668)(cdr req-kws_1669))"
" #f))))))"
" loop_1667)"
" kws_1665"
" req-kws_1624)"
"(= a_1666 arity_1626)"
" #f)))"
"(if(arity-at-least? arity_1626)"
"(let-values()"
"(let-values(((arity_1670)(arity-at-least-value arity_1626)))"
"(lambda(kws_1671 a_1672)"
"(if((letrec-values(((loop_1673)"
"(lambda(kws_1674 req-kws_1675)"
"(if(null? req-kws_1675)"
"(null? kws_1674)"
"(if(null? kws_1674)"
" #f"
"(if(eq?(car kws_1674)(car req-kws_1675))"
"(loop_1673(cdr kws_1674)(cdr req-kws_1675))"
" #f))))))"
" loop_1673)"
" kws_1671"
" req-kws_1624)"
"(>= a_1672 arity_1670)"
" #f))))"
"(let-values()"
"(lambda(kws_1676 a_1677)"
"(if((letrec-values(((loop_1678)"
"(lambda(kws_1679 req-kws_1680)"
"(if(null? req-kws_1680)"
"(null? kws_1679)"
"(if(null? kws_1679)"
" #f"
"(if(eq?(car kws_1679)(car req-kws_1680))"
"(loop_1678(cdr kws_1679)(cdr req-kws_1680))"
" #f))))))"
" loop_1678)"
" kws_1676"
" req-kws_1624)"
"(arity-includes? arity_1626 a_1677)"
" #f)))))"
"(if(integer? arity_1626)"
"(let-values()"
"(lambda(kws_1681 a_1682)"
"(if(subsets? req-kws_1624 kws_1681 allowed-kws_1625)(= a_1682 arity_1626) #f)))"
"(if(arity-at-least? arity_1626)"
"(let-values()"
"(let-values(((arity_1683)(arity-at-least-value arity_1626)))"
"(lambda(kws_1684 a_1685)"
"(if(subsets? req-kws_1624 kws_1684 allowed-kws_1625)(>= a_1685 arity_1683) #f))))"
"(let-values()"
"(lambda(kws_1686 a_1687)"
"(if(subsets? req-kws_1624 kws_1686 allowed-kws_1625)"
"(arity-includes? arity_1626 a_1687)"
" #f))))))))))))))"
"(define-values"
"(arity-includes?)"
"(lambda(arity_1688 a_1689)"
"(if(integer? arity_1688)"
"(let-values()(= arity_1688 a_1689))"
"(if(arity-at-least? arity_1688)"
"(let-values()(>= a_1689(arity-at-least-value a_1689)))"
"(let-values()(ormap(lambda(ar_1690)(arity-includes? ar_1690 a_1689)) arity_1688))))))"
"(define-values"
"(subset?$1)"
"(lambda(l1_1691 l2_1692)"
"(if(null? l1_1691)"
"(let-values() #t)"
"(if(null? l2_1692)"
"(let-values() #f)"
"(if(eq?(car l1_1691)(car l2_1692))"
"(let-values()(subset?$1(cdr l1_1691)(cdr l2_1692)))"
"(let-values()(subset?$1 l1_1691(cdr l2_1692))))))))"
"(define-values"
"(subsets?)"
"(lambda(l1_1693 l2_1694 l3_1695)"
"(if(null? l1_1693)"
"(let-values()(subset?$1 l2_1694 l3_1695))"
"(if(null? l2_1694)"
"(let-values() #f)"
"(if(null? l3_1695)"
"(let-values() #f)"
"(let-values()"
"(let-values(((v2_1696)(car l2_1694)))"
"(if(eq?(car l1_1693) v2_1696)"
"(let-values()(subsets?(cdr l1_1693)(cdr l2_1694)(cdr l3_1695)))"
"(if(eq? v2_1696(car l3_1695))"
"(let-values()(subsets? l1_1693(cdr l2_1694)(cdr l3_1695)))"
"(let-values()(subsets? l1_1693 l2_1694(cdr l3_1695))))))))))))"
"(define-values"
"(keyword-procedure-extract/method)"
"(lambda(kws_1697 n_1698 p_1699 method-n_1700)"
"(if(if(keyword-procedure? p_1699)((keyword-procedure-checker p_1699) kws_1697 n_1698) #f)"
"(keyword-procedure-proc p_1699)"
"(let-values(((p2_1701)"
"(if(not(keyword-procedure? p_1699))"
"(if(procedure? p_1699)"
"(let-values(((or-part_1702)"
"(if(new-procedure? p_1699)"
"(let-values(((a_1703)(procedure-accessor-ref p_1699)))"
"(if a_1703(a_1703 p_1699) #f))"
" #f)))"
"(if or-part_1702"
" or-part_1702"
"(let-values(((or-part_1704)(procedure-extract-target p_1699)))"
"(if or-part_1704 or-part_1704(if(new-procedure? p_1699) 'method #f)))))"
" #f)"
" #f)))"
"(if p2_1701"
"(if(eq? p2_1701 'method)"
"(let-values(((p3_1705)"
"(keyword-procedure-extract/method"
" kws_1697"
"(add1 n_1698)"
"(new-procedure-ref p_1699)"
"(add1 method-n_1700))))"
"(lambda(kws_1706 kw-args_1707 . args_1708)"
"(apply p3_1705 kws_1706 kw-args_1707(cons p_1699 args_1708))))"
"(keyword-procedure-extract/method kws_1697 n_1698 p2_1701 method-n_1700))"
"(lambda(kws_1709 kw-args_1710 . args_1711)"
"(let-values(((missing-kw_1712 extra-kw_1713)"
"(if(keyword-procedure? p_1699)(check-kw-args p_1699 kws_1709)(values #f(car kws_1709)))))"
"(let-values(((n_1714)"
"(let-values(((method-n_1717)"
"(+"
" method-n_1700"
"(if(let-values(((or-part_1718)(keyword-method? p_1699)))"
"(if or-part_1718 or-part_1718(okm? p_1699)))"
" 1"
" 0))))"
"(if(>= n_1698 method-n_1717)(- n_1698 method-n_1717) n_1698)))"
"((args-str_1715)"
"(if(if(null? args_1711)(null? kws_1709) #f)"
"                              \"\""
"(apply"
" string-append"
"                               \"\\n  arguments...:\""
"(append"
"                                (map (lambda (v_1719) (format \"\\n   ~e\" v_1719)) args_1711)"
"(map"
"                                 (lambda (kw_1720 kw-arg_1721) (format \"\\n   ~a ~e\" kw_1720 kw-arg_1721))"
" kws_1709"
" kw-args_1710)))))"
"((proc-name_1716)"
"(lambda(p_1722)"
"(let-values(((or-part_1723)"
"(if(named-keyword-procedure? p_1722)"
"(car(keyword-procedure-name+fail p_1722))"
" #f)))"
"(if or-part_1723"
" or-part_1723"
"(let-values(((or-part_1724)(object-name p_1722)))"
"(if or-part_1724 or-part_1724 p_1722)))))))"
"(raise"
"(exn:fail:contract"
"(if extra-kw_1713"
"(if(keyword-procedure? p_1699)"
"(format"
"(string-append"
"                        \"application: procedure does not expect an argument with given keyword\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  given keyword: ~a\""
"                        \"~a\")"
"(proc-name_1716 p_1699)"
" extra-kw_1713"
" args-str_1715)"
"(if(procedure? p_1699)"
"(format"
"(string-append"
"                          \"application: procedure does not accept keyword arguments\\n\""
"                          \"  procedure: ~a\""
"                          \"~a\")"
"(proc-name_1716 p_1699)"
" args-str_1715)"
"(format"
"(string-append"
"                          \"application: not a procedure;\\n\""
"                          \" expected a procedure that can be applied to arguments\\n\""
"                          \"  given: ~e\""
"                          \"~a\")"
" p_1699"
" args-str_1715)))"
"(if missing-kw_1712"
"(format"
"(string-append"
"                        \"application: required keyword argument not supplied\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  required keyword: ~a\""
"                        \"~a\")"
"(proc-name_1716 p_1699)"
" missing-kw_1712"
" args-str_1715)"
"(format"
"(string-append"
"                        \"application: no case matching ~a non-keyword argument~a\\n\""
"                        \"  procedure: ~a\""
"                        \"~a\")"
"(- n_1714 2)"
"                       (if (= 1 (- n_1714 2)) \"\" \"s\")"
"(proc-name_1716 p_1699)"
" args-str_1715)))"
"(current-continuation-marks)))))))))))"
"(void)"
"(void)"
"(define-values(print-values)(lambda vs_3(begin(for-each(current-print) vs_3)(apply values vs_3))))"
"(void)"
"(void)"
"(define-values"
"(alt-reverse)"
"(if(eval-jit-enabled)"
"(let-values(((reverse_1)"
"(lambda(l_2)"
"(begin"
"                      (if (list? l_2) (void) (raise-argument-error 'reverse \"list?\" l_2))"
"(letrec-values(((loop_3)"
"(lambda(a_4 l_5)(if(null? l_5) a_4(loop_3(cons(car l_5) a_4)(cdr l_5))))))"
"(loop_3 null l_2))))))"
" reverse_1)"
" reverse))"
"(void)"
"(void)"
"(define-values"
"(sort vector-sort vector-sort!)"
"(let-values()"
"(let-values(((precompiled-sorts_49)"
"(let-values(((sorts_119)(make-hasheq)))"
"(let-values()"
"(begin"
"(let-values(((sort-proc_135)"
"(lambda(A_136 n_137)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_177)(unsafe-fxrshift n_137 1)))"
"(let-values(((n/2+_178)(unsafe-fx- n_137 n/2-_177)))"
"(letrec-values(((copying-mergesort_214)"
"(lambda(Alo_215 Blo_216 n_217)"
"(if(unsafe-fx= n_217 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_136"
" Blo_216"
"(unsafe-vector-ref A_136 Alo_215)))"
"(if(unsafe-fx= n_217 2)"
"(let-values()"
"(let-values(((x_218)"
"(unsafe-vector-ref"
" A_136"
" Alo_215))"
"((y_219)"
"(unsafe-vector-ref"
" A_136"
"(unsafe-fx+ Alo_215 1))))"
"(if(unsafe-fl< y_219 x_218)"
"(begin"
"(unsafe-vector-set! A_136 Blo_216 y_219)"
"(unsafe-vector-set!"
" A_136"
"(unsafe-fx+ Blo_216 1)"
" x_218))"
"(begin"
"(unsafe-vector-set! A_136 Blo_216 x_218)"
"(unsafe-vector-set!"
" A_136"
"(unsafe-fx+ Blo_216 1)"
" y_219)))))"
"(if(unsafe-fx< n_217 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_136"
" Blo_216"
"(unsafe-vector-ref A_136 Alo_215))"
"((letrec-values(((iloop_220)"
"(lambda(i_221)"
"(if(unsafe-fx<"
" i_221"
" n_217)"
"(let-values()"
"(let-values(((ref-i_222)"
"(unsafe-vector-ref"
" A_136"
"(unsafe-fx+"
" Alo_215"
" i_221))))"
"((letrec-values(((jloop_223)"
"(lambda(j_224)"
"(let-values(((ref-j-1_225)"
"(unsafe-vector-ref"
" A_136"
"(unsafe-fx-"
" j_224"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_216"
" j_224)"
"(unsafe-fl<"
" ref-i_222"
" ref-j-1_225)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_136"
" j_224"
" ref-j-1_225)"
"(jloop_223"
"(unsafe-fx-"
" j_224"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_136"
" j_224"
" ref-i_222)"
"(iloop_220"
"(unsafe-fx+"
" i_221"
" 1))))))))"
" jloop_223)"
"(unsafe-fx+"
" Blo_216"
" i_221))))"
"(void)))))"
" iloop_220)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_226)"
"(unsafe-fxrshift n_217 1)))"
"(let-values(((n/2+_227)"
"(unsafe-fx- n_217 n/2-_226)))"
"(let-values(((Amid1_228)"
"(unsafe-fx+"
" Alo_215"
" n/2-_226))"
"((Amid2_229)"
"(unsafe-fx+"
" Alo_215"
" n/2+_227))"
"((Bmid1_230)"
"(unsafe-fx+"
" Blo_216"
" n/2-_226)))"
"(begin"
"(copying-mergesort_214"
" Amid1_228"
" Bmid1_230"
" n/2+_227)"
"(copying-mergesort_214"
" Alo_215"
" Amid2_229"
" n/2-_226)"
"(let-values(((b2_231)"
"(unsafe-fx+"
" Blo_216"
" n_217)))"
"((letrec-values(((loop_232)"
"(lambda(a1_233"
" b1_234"
" c1_235)"
"(let-values(((x_236)"
"(unsafe-vector-ref"
" A_136"
" a1_233))"
"((y_237)"
"(unsafe-vector-ref"
" A_136"
" b1_234)))"
"(if(not"
"(unsafe-fl<"
" y_237"
" x_236))"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_235"
" x_236)"
"(let-values(((a1_238)"
"(unsafe-fx+"
" a1_233"
" 1))"
"((c1_239)"
"(unsafe-fx+"
" c1_235"
" 1)))"
"(if(unsafe-fx<"
" c1_239"
" b1_234)"
"(let-values()"
"(loop_232"
" a1_238"
" b1_234"
" c1_239))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_235"
" y_237)"
"(let-values(((b1_240)"
"(unsafe-fx+"
" b1_234"
" 1))"
"((c1_241)"
"(unsafe-fx+"
" c1_235"
" 1)))"
"(if(unsafe-fx<="
" b2_231"
" b1_240)"
"((letrec-values(((loop_242)"
"(lambda(a1_243"
" c1_244)"
"(if(unsafe-fx<"
" c1_244"
" b1_240)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_244"
"(unsafe-vector-ref"
" A_136"
" a1_243))"
"(loop_242"
"(unsafe-fx+"
" a1_243"
" 1)"
"(unsafe-fx+"
" c1_244"
" 1))))"
"(void)))))"
" loop_242)"
" a1_233"
" c1_241)"
"(loop_232"
" a1_233"
" b1_240"
" c1_241)))))))))"
" loop_232)"
" Amid2_229"
" Bmid1_230"
" Blo_216)))))))))))))"
"(let-values(((Alo_245) 0)"
"((Amid1_246) n/2-_177)"
"((Amid2_247) n/2+_178)"
"((Ahi_248) n_137)"
"((B1lo_249) n_137))"
"(begin"
"(copying-mergesort_214 Amid1_246 B1lo_249 n/2+_178)"
"(if(zero? n/2-_177)"
"(void)"
"(let-values()"
"(copying-mergesort_214 Alo_245 Amid2_247 n/2-_177)))"
"(let-values(((b2_250) Ahi_248))"
"((letrec-values(((loop_251)"
"(lambda(a1_252 b1_253 c1_254)"
"(let-values(((x_255)"
"(unsafe-vector-ref"
" A_136"
" a1_252))"
"((y_256)"
"(unsafe-vector-ref"
" A_136"
" b1_253)))"
"(if(unsafe-fl< x_255 y_256)"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_254"
" x_255)"
"(let-values(((a1_257)"
"(unsafe-fx+ a1_252 1))"
"((c1_258)"
"(unsafe-fx+ c1_254 1)))"
"(if(unsafe-fx< c1_258 b1_253)"
"(let-values()"
"(loop_251 a1_257 b1_253 c1_258))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_254"
" y_256)"
"(let-values(((b1_259)"
"(unsafe-fx+ b1_253 1))"
"((c1_260)"
"(unsafe-fx+ c1_254 1)))"
"(if(unsafe-fx<= b2_250 b1_259)"
"((letrec-values(((loop_261)"
"(lambda(a1_262"
" c1_263)"
"(if(unsafe-fx<"
" c1_263"
" b1_259)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_136"
" c1_263"
"(unsafe-vector-ref"
" A_136"
" a1_262))"
"(loop_261"
"(unsafe-fx+"
" a1_262"
" 1)"
"(unsafe-fx+"
" c1_263"
" 1))))"
"(void)))))"
" loop_261)"
" a1_252"
" c1_260)"
"(loop_251"
" a1_252"
" b1_259"
" c1_260)))))))))"
" loop_251)"
" B1lo_249"
" Amid2_247"
" Alo_245))))))))))))"
"(begin"
"(hash-set! sorts_119 unsafe-fl< sort-proc_135)"
"(hash-set! sorts_119 unsafe-fl<= sort-proc_135)))"
"(let-values(((sort-proc_264)"
"(lambda(A_265 n_266)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_306)(unsafe-fxrshift n_266 1)))"
"(let-values(((n/2+_307)(unsafe-fx- n_266 n/2-_306)))"
"(letrec-values(((copying-mergesort_343)"
"(lambda(Alo_344 Blo_345 n_346)"
"(if(unsafe-fx= n_346 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_265"
" Blo_345"
"(unsafe-vector-ref A_265 Alo_344)))"
"(if(unsafe-fx= n_346 2)"
"(let-values()"
"(let-values(((x_347)"
"(unsafe-vector-ref"
" A_265"
" Alo_344))"
"((y_348)"
"(unsafe-vector-ref"
" A_265"
"(unsafe-fx+ Alo_344 1))))"
"(if(unsafe-fl> y_348 x_347)"
"(begin"
"(unsafe-vector-set! A_265 Blo_345 y_348)"
"(unsafe-vector-set!"
" A_265"
"(unsafe-fx+ Blo_345 1)"
" x_347))"
"(begin"
"(unsafe-vector-set! A_265 Blo_345 x_347)"
"(unsafe-vector-set!"
" A_265"
"(unsafe-fx+ Blo_345 1)"
" y_348)))))"
"(if(unsafe-fx< n_346 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_265"
" Blo_345"
"(unsafe-vector-ref A_265 Alo_344))"
"((letrec-values(((iloop_349)"
"(lambda(i_350)"
"(if(unsafe-fx<"
" i_350"
" n_346)"
"(let-values()"
"(let-values(((ref-i_351)"
"(unsafe-vector-ref"
" A_265"
"(unsafe-fx+"
" Alo_344"
" i_350))))"
"((letrec-values(((jloop_352)"
"(lambda(j_353)"
"(let-values(((ref-j-1_354)"
"(unsafe-vector-ref"
" A_265"
"(unsafe-fx-"
" j_353"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_345"
" j_353)"
"(unsafe-fl>"
" ref-i_351"
" ref-j-1_354)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_265"
" j_353"
" ref-j-1_354)"
"(jloop_352"
"(unsafe-fx-"
" j_353"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_265"
" j_353"
" ref-i_351)"
"(iloop_349"
"(unsafe-fx+"
" i_350"
" 1))))))))"
" jloop_352)"
"(unsafe-fx+"
" Blo_345"
" i_350))))"
"(void)))))"
" iloop_349)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_355)"
"(unsafe-fxrshift n_346 1)))"
"(let-values(((n/2+_356)"
"(unsafe-fx- n_346 n/2-_355)))"
"(let-values(((Amid1_357)"
"(unsafe-fx+"
" Alo_344"
" n/2-_355))"
"((Amid2_358)"
"(unsafe-fx+"
" Alo_344"
" n/2+_356))"
"((Bmid1_359)"
"(unsafe-fx+"
" Blo_345"
" n/2-_355)))"
"(begin"
"(copying-mergesort_343"
" Amid1_357"
" Bmid1_359"
" n/2+_356)"
"(copying-mergesort_343"
" Alo_344"
" Amid2_358"
" n/2-_355)"
"(let-values(((b2_360)"
"(unsafe-fx+"
" Blo_345"
" n_346)))"
"((letrec-values(((loop_361)"
"(lambda(a1_362"
" b1_363"
" c1_364)"
"(let-values(((x_365)"
"(unsafe-vector-ref"
" A_265"
" a1_362))"
"((y_366)"
"(unsafe-vector-ref"
" A_265"
" b1_363)))"
"(if(not"
"(unsafe-fl>"
" y_366"
" x_365))"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_364"
" x_365)"
"(let-values(((a1_367)"
"(unsafe-fx+"
" a1_362"
" 1))"
"((c1_368)"
"(unsafe-fx+"
" c1_364"
" 1)))"
"(if(unsafe-fx<"
" c1_368"
" b1_363)"
"(let-values()"
"(loop_361"
" a1_367"
" b1_363"
" c1_368))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_364"
" y_366)"
"(let-values(((b1_369)"
"(unsafe-fx+"
" b1_363"
" 1))"
"((c1_370)"
"(unsafe-fx+"
" c1_364"
" 1)))"
"(if(unsafe-fx<="
" b2_360"
" b1_369)"
"((letrec-values(((loop_371)"
"(lambda(a1_372"
" c1_373)"
"(if(unsafe-fx<"
" c1_373"
" b1_369)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_373"
"(unsafe-vector-ref"
" A_265"
" a1_372))"
"(loop_371"
"(unsafe-fx+"
" a1_372"
" 1)"
"(unsafe-fx+"
" c1_373"
" 1))))"
"(void)))))"
" loop_371)"
" a1_362"
" c1_370)"
"(loop_361"
" a1_362"
" b1_369"
" c1_370)))))))))"
" loop_361)"
" Amid2_358"
" Bmid1_359"
" Blo_345)))))))))))))"
"(let-values(((Alo_374) 0)"
"((Amid1_375) n/2-_306)"
"((Amid2_376) n/2+_307)"
"((Ahi_377) n_266)"
"((B1lo_378) n_266))"
"(begin"
"(copying-mergesort_343 Amid1_375 B1lo_378 n/2+_307)"
"(if(zero? n/2-_306)"
"(void)"
"(let-values()"
"(copying-mergesort_343 Alo_374 Amid2_376 n/2-_306)))"
"(let-values(((b2_379) Ahi_377))"
"((letrec-values(((loop_380)"
"(lambda(a1_381 b1_382 c1_383)"
"(let-values(((x_384)"
"(unsafe-vector-ref"
" A_265"
" a1_381))"
"((y_385)"
"(unsafe-vector-ref"
" A_265"
" b1_382)))"
"(if(unsafe-fl> x_384 y_385)"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_383"
" x_384)"
"(let-values(((a1_386)"
"(unsafe-fx+ a1_381 1))"
"((c1_387)"
"(unsafe-fx+ c1_383 1)))"
"(if(unsafe-fx< c1_387 b1_382)"
"(let-values()"
"(loop_380 a1_386 b1_382 c1_387))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_383"
" y_385)"
"(let-values(((b1_388)"
"(unsafe-fx+ b1_382 1))"
"((c1_389)"
"(unsafe-fx+ c1_383 1)))"
"(if(unsafe-fx<= b2_379 b1_388)"
"((letrec-values(((loop_390)"
"(lambda(a1_391"
" c1_392)"
"(if(unsafe-fx<"
" c1_392"
" b1_388)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_265"
" c1_392"
"(unsafe-vector-ref"
" A_265"
" a1_391))"
"(loop_390"
"(unsafe-fx+"
" a1_391"
" 1)"
"(unsafe-fx+"
" c1_392"
" 1))))"
"(void)))))"
" loop_390)"
" a1_381"
" c1_389)"
"(loop_380"
" a1_381"
" b1_388"
" c1_389)))))))))"
" loop_380)"
" B1lo_378"
" Amid2_376"
" Alo_374))))))))))))"
"(begin"
"(hash-set! sorts_119 unsafe-fl> sort-proc_264)"
"(hash-set! sorts_119 unsafe-fl>= sort-proc_264)))"
"(let-values(((sort-proc_393)"
"(lambda(A_394 n_395)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_435)(unsafe-fxrshift n_395 1)))"
"(let-values(((n/2+_436)(unsafe-fx- n_395 n/2-_435)))"
"(letrec-values(((copying-mergesort_472)"
"(lambda(Alo_473 Blo_474 n_475)"
"(if(unsafe-fx= n_475 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_394"
" Blo_474"
"(unsafe-vector-ref A_394 Alo_473)))"
"(if(unsafe-fx= n_475 2)"
"(let-values()"
"(let-values(((x_476)"
"(unsafe-vector-ref"
" A_394"
" Alo_473))"
"((y_477)"
"(unsafe-vector-ref"
" A_394"
"(unsafe-fx+ Alo_473 1))))"
"(if(unsafe-fx< y_477 x_476)"
"(begin"
"(unsafe-vector-set! A_394 Blo_474 y_477)"
"(unsafe-vector-set!"
" A_394"
"(unsafe-fx+ Blo_474 1)"
" x_476))"
"(begin"
"(unsafe-vector-set! A_394 Blo_474 x_476)"
"(unsafe-vector-set!"
" A_394"
"(unsafe-fx+ Blo_474 1)"
" y_477)))))"
"(if(unsafe-fx< n_475 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_394"
" Blo_474"
"(unsafe-vector-ref A_394 Alo_473))"
"((letrec-values(((iloop_478)"
"(lambda(i_479)"
"(if(unsafe-fx<"
" i_479"
" n_475)"
"(let-values()"
"(let-values(((ref-i_480)"
"(unsafe-vector-ref"
" A_394"
"(unsafe-fx+"
" Alo_473"
" i_479))))"
"((letrec-values(((jloop_481)"
"(lambda(j_482)"
"(let-values(((ref-j-1_483)"
"(unsafe-vector-ref"
" A_394"
"(unsafe-fx-"
" j_482"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_474"
" j_482)"
"(unsafe-fx<"
" ref-i_480"
" ref-j-1_483)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_394"
" j_482"
" ref-j-1_483)"
"(jloop_481"
"(unsafe-fx-"
" j_482"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_394"
" j_482"
" ref-i_480)"
"(iloop_478"
"(unsafe-fx+"
" i_479"
" 1))))))))"
" jloop_481)"
"(unsafe-fx+"
" Blo_474"
" i_479))))"
"(void)))))"
" iloop_478)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_484)"
"(unsafe-fxrshift n_475 1)))"
"(let-values(((n/2+_485)"
"(unsafe-fx- n_475 n/2-_484)))"
"(let-values(((Amid1_486)"
"(unsafe-fx+"
" Alo_473"
" n/2-_484))"
"((Amid2_487)"
"(unsafe-fx+"
" Alo_473"
" n/2+_485))"
"((Bmid1_488)"
"(unsafe-fx+"
" Blo_474"
" n/2-_484)))"
"(begin"
"(copying-mergesort_472"
" Amid1_486"
" Bmid1_488"
" n/2+_485)"
"(copying-mergesort_472"
" Alo_473"
" Amid2_487"
" n/2-_484)"
"(let-values(((b2_489)"
"(unsafe-fx+"
" Blo_474"
" n_475)))"
"((letrec-values(((loop_490)"
"(lambda(a1_491"
" b1_492"
" c1_493)"
"(let-values(((x_494)"
"(unsafe-vector-ref"
" A_394"
" a1_491))"
"((y_495)"
"(unsafe-vector-ref"
" A_394"
" b1_492)))"
"(if(not"
"(unsafe-fx<"
" y_495"
" x_494))"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_493"
" x_494)"
"(let-values(((a1_496)"
"(unsafe-fx+"
" a1_491"
" 1))"
"((c1_497)"
"(unsafe-fx+"
" c1_493"
" 1)))"
"(if(unsafe-fx<"
" c1_497"
" b1_492)"
"(let-values()"
"(loop_490"
" a1_496"
" b1_492"
" c1_497))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_493"
" y_495)"
"(let-values(((b1_498)"
"(unsafe-fx+"
" b1_492"
" 1))"
"((c1_499)"
"(unsafe-fx+"
" c1_493"
" 1)))"
"(if(unsafe-fx<="
" b2_489"
" b1_498)"
"((letrec-values(((loop_500)"
"(lambda(a1_501"
" c1_502)"
"(if(unsafe-fx<"
" c1_502"
" b1_498)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_502"
"(unsafe-vector-ref"
" A_394"
" a1_501))"
"(loop_500"
"(unsafe-fx+"
" a1_501"
" 1)"
"(unsafe-fx+"
" c1_502"
" 1))))"
"(void)))))"
" loop_500)"
" a1_491"
" c1_499)"
"(loop_490"
" a1_491"
" b1_498"
" c1_499)))))))))"
" loop_490)"
" Amid2_487"
" Bmid1_488"
" Blo_474)))))))))))))"
"(let-values(((Alo_503) 0)"
"((Amid1_504) n/2-_435)"
"((Amid2_505) n/2+_436)"
"((Ahi_506) n_395)"
"((B1lo_507) n_395))"
"(begin"
"(copying-mergesort_472 Amid1_504 B1lo_507 n/2+_436)"
"(if(zero? n/2-_435)"
"(void)"
"(let-values()"
"(copying-mergesort_472 Alo_503 Amid2_505 n/2-_435)))"
"(let-values(((b2_508) Ahi_506))"
"((letrec-values(((loop_509)"
"(lambda(a1_510 b1_511 c1_512)"
"(let-values(((x_513)"
"(unsafe-vector-ref"
" A_394"
" a1_510))"
"((y_514)"
"(unsafe-vector-ref"
" A_394"
" b1_511)))"
"(if(unsafe-fx< x_513 y_514)"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_512"
" x_513)"
"(let-values(((a1_515)"
"(unsafe-fx+ a1_510 1))"
"((c1_516)"
"(unsafe-fx+ c1_512 1)))"
"(if(unsafe-fx< c1_516 b1_511)"
"(let-values()"
"(loop_509 a1_515 b1_511 c1_516))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_512"
" y_514)"
"(let-values(((b1_517)"
"(unsafe-fx+ b1_511 1))"
"((c1_518)"
"(unsafe-fx+ c1_512 1)))"
"(if(unsafe-fx<= b2_508 b1_517)"
"((letrec-values(((loop_519)"
"(lambda(a1_520"
" c1_521)"
"(if(unsafe-fx<"
" c1_521"
" b1_517)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_394"
" c1_521"
"(unsafe-vector-ref"
" A_394"
" a1_520))"
"(loop_519"
"(unsafe-fx+"
" a1_520"
" 1)"
"(unsafe-fx+"
" c1_521"
" 1))))"
"(void)))))"
" loop_519)"
" a1_510"
" c1_518)"
"(loop_509"
" a1_510"
" b1_517"
" c1_518)))))))))"
" loop_509)"
" B1lo_507"
" Amid2_505"
" Alo_503))))))))))))"
"(begin"
"(hash-set! sorts_119 unsafe-fx< sort-proc_393)"
"(hash-set! sorts_119 unsafe-fx<= sort-proc_393)))"
"(let-values(((sort-proc_522)"
"(lambda(A_523 n_524)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_564)(unsafe-fxrshift n_524 1)))"
"(let-values(((n/2+_565)(unsafe-fx- n_524 n/2-_564)))"
"(letrec-values(((copying-mergesort_601)"
"(lambda(Alo_602 Blo_603 n_604)"
"(if(unsafe-fx= n_604 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_523"
" Blo_603"
"(unsafe-vector-ref A_523 Alo_602)))"
"(if(unsafe-fx= n_604 2)"
"(let-values()"
"(let-values(((x_605)"
"(unsafe-vector-ref"
" A_523"
" Alo_602))"
"((y_606)"
"(unsafe-vector-ref"
" A_523"
"(unsafe-fx+ Alo_602 1))))"
"(if(unsafe-fx> y_606 x_605)"
"(begin"
"(unsafe-vector-set! A_523 Blo_603 y_606)"
"(unsafe-vector-set!"
" A_523"
"(unsafe-fx+ Blo_603 1)"
" x_605))"
"(begin"
"(unsafe-vector-set! A_523 Blo_603 x_605)"
"(unsafe-vector-set!"
" A_523"
"(unsafe-fx+ Blo_603 1)"
" y_606)))))"
"(if(unsafe-fx< n_604 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_523"
" Blo_603"
"(unsafe-vector-ref A_523 Alo_602))"
"((letrec-values(((iloop_607)"
"(lambda(i_608)"
"(if(unsafe-fx<"
" i_608"
" n_604)"
"(let-values()"
"(let-values(((ref-i_609)"
"(unsafe-vector-ref"
" A_523"
"(unsafe-fx+"
" Alo_602"
" i_608))))"
"((letrec-values(((jloop_610)"
"(lambda(j_611)"
"(let-values(((ref-j-1_612)"
"(unsafe-vector-ref"
" A_523"
"(unsafe-fx-"
" j_611"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_603"
" j_611)"
"(unsafe-fx>"
" ref-i_609"
" ref-j-1_612)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_523"
" j_611"
" ref-j-1_612)"
"(jloop_610"
"(unsafe-fx-"
" j_611"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_523"
" j_611"
" ref-i_609)"
"(iloop_607"
"(unsafe-fx+"
" i_608"
" 1))))))))"
" jloop_610)"
"(unsafe-fx+"
" Blo_603"
" i_608))))"
"(void)))))"
" iloop_607)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_613)"
"(unsafe-fxrshift n_604 1)))"
"(let-values(((n/2+_614)"
"(unsafe-fx- n_604 n/2-_613)))"
"(let-values(((Amid1_615)"
"(unsafe-fx+"
" Alo_602"
" n/2-_613))"
"((Amid2_616)"
"(unsafe-fx+"
" Alo_602"
" n/2+_614))"
"((Bmid1_617)"
"(unsafe-fx+"
" Blo_603"
" n/2-_613)))"
"(begin"
"(copying-mergesort_601"
" Amid1_615"
" Bmid1_617"
" n/2+_614)"
"(copying-mergesort_601"
" Alo_602"
" Amid2_616"
" n/2-_613)"
"(let-values(((b2_618)"
"(unsafe-fx+"
" Blo_603"
" n_604)))"
"((letrec-values(((loop_619)"
"(lambda(a1_620"
" b1_621"
" c1_622)"
"(let-values(((x_623)"
"(unsafe-vector-ref"
" A_523"
" a1_620))"
"((y_624)"
"(unsafe-vector-ref"
" A_523"
" b1_621)))"
"(if(not"
"(unsafe-fx>"
" y_624"
" x_623))"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_622"
" x_623)"
"(let-values(((a1_625)"
"(unsafe-fx+"
" a1_620"
" 1))"
"((c1_626)"
"(unsafe-fx+"
" c1_622"
" 1)))"
"(if(unsafe-fx<"
" c1_626"
" b1_621)"
"(let-values()"
"(loop_619"
" a1_625"
" b1_621"
" c1_626))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_622"
" y_624)"
"(let-values(((b1_627)"
"(unsafe-fx+"
" b1_621"
" 1))"
"((c1_628)"
"(unsafe-fx+"
" c1_622"
" 1)))"
"(if(unsafe-fx<="
" b2_618"
" b1_627)"
"((letrec-values(((loop_629)"
"(lambda(a1_630"
" c1_631)"
"(if(unsafe-fx<"
" c1_631"
" b1_627)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_631"
"(unsafe-vector-ref"
" A_523"
" a1_630))"
"(loop_629"
"(unsafe-fx+"
" a1_630"
" 1)"
"(unsafe-fx+"
" c1_631"
" 1))))"
"(void)))))"
" loop_629)"
" a1_620"
" c1_628)"
"(loop_619"
" a1_620"
" b1_627"
" c1_628)))))))))"
" loop_619)"
" Amid2_616"
" Bmid1_617"
" Blo_603)))))))))))))"
"(let-values(((Alo_632) 0)"
"((Amid1_633) n/2-_564)"
"((Amid2_634) n/2+_565)"
"((Ahi_635) n_524)"
"((B1lo_636) n_524))"
"(begin"
"(copying-mergesort_601 Amid1_633 B1lo_636 n/2+_565)"
"(if(zero? n/2-_564)"
"(void)"
"(let-values()"
"(copying-mergesort_601 Alo_632 Amid2_634 n/2-_564)))"
"(let-values(((b2_637) Ahi_635))"
"((letrec-values(((loop_638)"
"(lambda(a1_639 b1_640 c1_641)"
"(let-values(((x_642)"
"(unsafe-vector-ref"
" A_523"
" a1_639))"
"((y_643)"
"(unsafe-vector-ref"
" A_523"
" b1_640)))"
"(if(unsafe-fx> x_642 y_643)"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_641"
" x_642)"
"(let-values(((a1_644)"
"(unsafe-fx+ a1_639 1))"
"((c1_645)"
"(unsafe-fx+ c1_641 1)))"
"(if(unsafe-fx< c1_645 b1_640)"
"(let-values()"
"(loop_638 a1_644 b1_640 c1_645))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_641"
" y_643)"
"(let-values(((b1_646)"
"(unsafe-fx+ b1_640 1))"
"((c1_647)"
"(unsafe-fx+ c1_641 1)))"
"(if(unsafe-fx<= b2_637 b1_646)"
"((letrec-values(((loop_648)"
"(lambda(a1_649"
" c1_650)"
"(if(unsafe-fx<"
" c1_650"
" b1_646)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_523"
" c1_650"
"(unsafe-vector-ref"
" A_523"
" a1_649))"
"(loop_648"
"(unsafe-fx+"
" a1_649"
" 1)"
"(unsafe-fx+"
" c1_650"
" 1))))"
"(void)))))"
" loop_648)"
" a1_639"
" c1_647)"
"(loop_638"
" a1_639"
" b1_646"
" c1_647)))))))))"
" loop_638)"
" B1lo_636"
" Amid2_634"
" Alo_632))))))))))))"
"(begin"
"(hash-set! sorts_119 unsafe-fx> sort-proc_522)"
"(hash-set! sorts_119 unsafe-fx>= sort-proc_522)))"
"(let-values(((sort-proc_651)"
"(lambda(A_652 n_653)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_693)(unsafe-fxrshift n_653 1)))"
"(let-values(((n/2+_694)(unsafe-fx- n_653 n/2-_693)))"
"(letrec-values(((copying-mergesort_730)"
"(lambda(Alo_731 Blo_732 n_733)"
"(if(unsafe-fx= n_733 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_652"
" Blo_732"
"(unsafe-vector-ref A_652 Alo_731)))"
"(if(unsafe-fx= n_733 2)"
"(let-values()"
"(let-values(((x_734)"
"(unsafe-vector-ref"
" A_652"
" Alo_731))"
"((y_735)"
"(unsafe-vector-ref"
" A_652"
"(unsafe-fx+ Alo_731 1))))"
"(if(< y_735 x_734)"
"(begin"
"(unsafe-vector-set! A_652 Blo_732 y_735)"
"(unsafe-vector-set!"
" A_652"
"(unsafe-fx+ Blo_732 1)"
" x_734))"
"(begin"
"(unsafe-vector-set! A_652 Blo_732 x_734)"
"(unsafe-vector-set!"
" A_652"
"(unsafe-fx+ Blo_732 1)"
" y_735)))))"
"(if(unsafe-fx< n_733 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_652"
" Blo_732"
"(unsafe-vector-ref A_652 Alo_731))"
"((letrec-values(((iloop_736)"
"(lambda(i_737)"
"(if(unsafe-fx<"
" i_737"
" n_733)"
"(let-values()"
"(let-values(((ref-i_738)"
"(unsafe-vector-ref"
" A_652"
"(unsafe-fx+"
" Alo_731"
" i_737))))"
"((letrec-values(((jloop_739)"
"(lambda(j_740)"
"(let-values(((ref-j-1_741)"
"(unsafe-vector-ref"
" A_652"
"(unsafe-fx-"
" j_740"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_732"
" j_740)"
"(<"
" ref-i_738"
" ref-j-1_741)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_652"
" j_740"
" ref-j-1_741)"
"(jloop_739"
"(unsafe-fx-"
" j_740"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_652"
" j_740"
" ref-i_738)"
"(iloop_736"
"(unsafe-fx+"
" i_737"
" 1))))))))"
" jloop_739)"
"(unsafe-fx+"
" Blo_732"
" i_737))))"
"(void)))))"
" iloop_736)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_742)"
"(unsafe-fxrshift n_733 1)))"
"(let-values(((n/2+_743)"
"(unsafe-fx- n_733 n/2-_742)))"
"(let-values(((Amid1_744)"
"(unsafe-fx+"
" Alo_731"
" n/2-_742))"
"((Amid2_745)"
"(unsafe-fx+"
" Alo_731"
" n/2+_743))"
"((Bmid1_746)"
"(unsafe-fx+"
" Blo_732"
" n/2-_742)))"
"(begin"
"(copying-mergesort_730"
" Amid1_744"
" Bmid1_746"
" n/2+_743)"
"(copying-mergesort_730"
" Alo_731"
" Amid2_745"
" n/2-_742)"
"(let-values(((b2_747)"
"(unsafe-fx+"
" Blo_732"
" n_733)))"
"((letrec-values(((loop_748)"
"(lambda(a1_749"
" b1_750"
" c1_751)"
"(let-values(((x_752)"
"(unsafe-vector-ref"
" A_652"
" a1_749))"
"((y_753)"
"(unsafe-vector-ref"
" A_652"
" b1_750)))"
"(if(not"
"(<"
" y_753"
" x_752))"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_751"
" x_752)"
"(let-values(((a1_754)"
"(unsafe-fx+"
" a1_749"
" 1))"
"((c1_755)"
"(unsafe-fx+"
" c1_751"
" 1)))"
"(if(unsafe-fx<"
" c1_755"
" b1_750)"
"(let-values()"
"(loop_748"
" a1_754"
" b1_750"
" c1_755))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_751"
" y_753)"
"(let-values(((b1_756)"
"(unsafe-fx+"
" b1_750"
" 1))"
"((c1_757)"
"(unsafe-fx+"
" c1_751"
" 1)))"
"(if(unsafe-fx<="
" b2_747"
" b1_756)"
"((letrec-values(((loop_758)"
"(lambda(a1_759"
" c1_760)"
"(if(unsafe-fx<"
" c1_760"
" b1_756)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_760"
"(unsafe-vector-ref"
" A_652"
" a1_759))"
"(loop_758"
"(unsafe-fx+"
" a1_759"
" 1)"
"(unsafe-fx+"
" c1_760"
" 1))))"
"(void)))))"
" loop_758)"
" a1_749"
" c1_757)"
"(loop_748"
" a1_749"
" b1_756"
" c1_757)))))))))"
" loop_748)"
" Amid2_745"
" Bmid1_746"
" Blo_732)))))))))))))"
"(let-values(((Alo_761) 0)"
"((Amid1_762) n/2-_693)"
"((Amid2_763) n/2+_694)"
"((Ahi_764) n_653)"
"((B1lo_765) n_653))"
"(begin"
"(copying-mergesort_730 Amid1_762 B1lo_765 n/2+_694)"
"(if(zero? n/2-_693)"
"(void)"
"(let-values()"
"(copying-mergesort_730 Alo_761 Amid2_763 n/2-_693)))"
"(let-values(((b2_766) Ahi_764))"
"((letrec-values(((loop_767)"
"(lambda(a1_768 b1_769 c1_770)"
"(let-values(((x_771)"
"(unsafe-vector-ref"
" A_652"
" a1_768))"
"((y_772)"
"(unsafe-vector-ref"
" A_652"
" b1_769)))"
"(if(< x_771 y_772)"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_770"
" x_771)"
"(let-values(((a1_773)"
"(unsafe-fx+ a1_768 1))"
"((c1_774)"
"(unsafe-fx+ c1_770 1)))"
"(if(unsafe-fx< c1_774 b1_769)"
"(let-values()"
"(loop_767 a1_773 b1_769 c1_774))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_770"
" y_772)"
"(let-values(((b1_775)"
"(unsafe-fx+ b1_769 1))"
"((c1_776)"
"(unsafe-fx+ c1_770 1)))"
"(if(unsafe-fx<= b2_766 b1_775)"
"((letrec-values(((loop_777)"
"(lambda(a1_778"
" c1_779)"
"(if(unsafe-fx<"
" c1_779"
" b1_775)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_652"
" c1_779"
"(unsafe-vector-ref"
" A_652"
" a1_778))"
"(loop_777"
"(unsafe-fx+"
" a1_778"
" 1)"
"(unsafe-fx+"
" c1_779"
" 1))))"
"(void)))))"
" loop_777)"
" a1_768"
" c1_776)"
"(loop_767"
" a1_768"
" b1_775"
" c1_776)))))))))"
" loop_767)"
" B1lo_765"
" Amid2_763"
" Alo_761))))))))))))"
"(begin(hash-set! sorts_119 < sort-proc_651)(hash-set! sorts_119 <= sort-proc_651)))"
"(let-values(((sort-proc_780)"
"(lambda(A_781 n_782)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_822)(unsafe-fxrshift n_782 1)))"
"(let-values(((n/2+_823)(unsafe-fx- n_782 n/2-_822)))"
"(letrec-values(((copying-mergesort_859)"
"(lambda(Alo_860 Blo_861 n_862)"
"(if(unsafe-fx= n_862 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_781"
" Blo_861"
"(unsafe-vector-ref A_781 Alo_860)))"
"(if(unsafe-fx= n_862 2)"
"(let-values()"
"(let-values(((x_863)"
"(unsafe-vector-ref"
" A_781"
" Alo_860))"
"((y_864)"
"(unsafe-vector-ref"
" A_781"
"(unsafe-fx+ Alo_860 1))))"
"(if(> y_864 x_863)"
"(begin"
"(unsafe-vector-set! A_781 Blo_861 y_864)"
"(unsafe-vector-set!"
" A_781"
"(unsafe-fx+ Blo_861 1)"
" x_863))"
"(begin"
"(unsafe-vector-set! A_781 Blo_861 x_863)"
"(unsafe-vector-set!"
" A_781"
"(unsafe-fx+ Blo_861 1)"
" y_864)))))"
"(if(unsafe-fx< n_862 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_781"
" Blo_861"
"(unsafe-vector-ref A_781 Alo_860))"
"((letrec-values(((iloop_865)"
"(lambda(i_866)"
"(if(unsafe-fx<"
" i_866"
" n_862)"
"(let-values()"
"(let-values(((ref-i_867)"
"(unsafe-vector-ref"
" A_781"
"(unsafe-fx+"
" Alo_860"
" i_866))))"
"((letrec-values(((jloop_868)"
"(lambda(j_869)"
"(let-values(((ref-j-1_870)"
"(unsafe-vector-ref"
" A_781"
"(unsafe-fx-"
" j_869"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_861"
" j_869)"
"(>"
" ref-i_867"
" ref-j-1_870)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_781"
" j_869"
" ref-j-1_870)"
"(jloop_868"
"(unsafe-fx-"
" j_869"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_781"
" j_869"
" ref-i_867)"
"(iloop_865"
"(unsafe-fx+"
" i_866"
" 1))))))))"
" jloop_868)"
"(unsafe-fx+"
" Blo_861"
" i_866))))"
"(void)))))"
" iloop_865)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_871)"
"(unsafe-fxrshift n_862 1)))"
"(let-values(((n/2+_872)"
"(unsafe-fx- n_862 n/2-_871)))"
"(let-values(((Amid1_873)"
"(unsafe-fx+"
" Alo_860"
" n/2-_871))"
"((Amid2_874)"
"(unsafe-fx+"
" Alo_860"
" n/2+_872))"
"((Bmid1_875)"
"(unsafe-fx+"
" Blo_861"
" n/2-_871)))"
"(begin"
"(copying-mergesort_859"
" Amid1_873"
" Bmid1_875"
" n/2+_872)"
"(copying-mergesort_859"
" Alo_860"
" Amid2_874"
" n/2-_871)"
"(let-values(((b2_876)"
"(unsafe-fx+"
" Blo_861"
" n_862)))"
"((letrec-values(((loop_877)"
"(lambda(a1_878"
" b1_879"
" c1_880)"
"(let-values(((x_881)"
"(unsafe-vector-ref"
" A_781"
" a1_878))"
"((y_882)"
"(unsafe-vector-ref"
" A_781"
" b1_879)))"
"(if(not"
"(>"
" y_882"
" x_881))"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_880"
" x_881)"
"(let-values(((a1_883)"
"(unsafe-fx+"
" a1_878"
" 1))"
"((c1_884)"
"(unsafe-fx+"
" c1_880"
" 1)))"
"(if(unsafe-fx<"
" c1_884"
" b1_879)"
"(let-values()"
"(loop_877"
" a1_883"
" b1_879"
" c1_884))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_880"
" y_882)"
"(let-values(((b1_885)"
"(unsafe-fx+"
" b1_879"
" 1))"
"((c1_886)"
"(unsafe-fx+"
" c1_880"
" 1)))"
"(if(unsafe-fx<="
" b2_876"
" b1_885)"
"((letrec-values(((loop_887)"
"(lambda(a1_888"
" c1_889)"
"(if(unsafe-fx<"
" c1_889"
" b1_885)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_889"
"(unsafe-vector-ref"
" A_781"
" a1_888))"
"(loop_887"
"(unsafe-fx+"
" a1_888"
" 1)"
"(unsafe-fx+"
" c1_889"
" 1))))"
"(void)))))"
" loop_887)"
" a1_878"
" c1_886)"
"(loop_877"
" a1_878"
" b1_885"
" c1_886)))))))))"
" loop_877)"
" Amid2_874"
" Bmid1_875"
" Blo_861)))))))))))))"
"(let-values(((Alo_890) 0)"
"((Amid1_891) n/2-_822)"
"((Amid2_892) n/2+_823)"
"((Ahi_893) n_782)"
"((B1lo_894) n_782))"
"(begin"
"(copying-mergesort_859 Amid1_891 B1lo_894 n/2+_823)"
"(if(zero? n/2-_822)"
"(void)"
"(let-values()"
"(copying-mergesort_859 Alo_890 Amid2_892 n/2-_822)))"
"(let-values(((b2_895) Ahi_893))"
"((letrec-values(((loop_896)"
"(lambda(a1_897 b1_898 c1_899)"
"(let-values(((x_900)"
"(unsafe-vector-ref"
" A_781"
" a1_897))"
"((y_901)"
"(unsafe-vector-ref"
" A_781"
" b1_898)))"
"(if(> x_900 y_901)"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_899"
" x_900)"
"(let-values(((a1_902)"
"(unsafe-fx+ a1_897 1))"
"((c1_903)"
"(unsafe-fx+ c1_899 1)))"
"(if(unsafe-fx< c1_903 b1_898)"
"(let-values()"
"(loop_896 a1_902 b1_898 c1_903))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_899"
" y_901)"
"(let-values(((b1_904)"
"(unsafe-fx+ b1_898 1))"
"((c1_905)"
"(unsafe-fx+ c1_899 1)))"
"(if(unsafe-fx<= b2_895 b1_904)"
"((letrec-values(((loop_906)"
"(lambda(a1_907"
" c1_908)"
"(if(unsafe-fx<"
" c1_908"
" b1_904)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_781"
" c1_908"
"(unsafe-vector-ref"
" A_781"
" a1_907))"
"(loop_906"
"(unsafe-fx+"
" a1_907"
" 1)"
"(unsafe-fx+"
" c1_908"
" 1))))"
"(void)))))"
" loop_906)"
" a1_897"
" c1_905)"
"(loop_896"
" a1_897"
" b1_904"
" c1_905)))))))))"
" loop_896)"
" B1lo_894"
" Amid2_892"
" Alo_890))))))))))))"
"(begin(hash-set! sorts_119 > sort-proc_780)(hash-set! sorts_119 >= sort-proc_780)))"
"(let-values(((sort-proc_909)"
"(lambda(A_910 n_911)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_951)(unsafe-fxrshift n_911 1)))"
"(let-values(((n/2+_952)(unsafe-fx- n_911 n/2-_951)))"
"(letrec-values(((copying-mergesort_988)"
"(lambda(Alo_989 Blo_990 n_991)"
"(if(unsafe-fx= n_991 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_910"
" Blo_990"
"(unsafe-vector-ref A_910 Alo_989)))"
"(if(unsafe-fx= n_991 2)"
"(let-values()"
"(let-values(((x_992)"
"(unsafe-vector-ref"
" A_910"
" Alo_989))"
"((y_993)"
"(unsafe-vector-ref"
" A_910"
"(unsafe-fx+ Alo_989 1))))"
"(if(string<? y_993 x_992)"
"(begin"
"(unsafe-vector-set! A_910 Blo_990 y_993)"
"(unsafe-vector-set!"
" A_910"
"(unsafe-fx+ Blo_990 1)"
" x_992))"
"(begin"
"(unsafe-vector-set! A_910 Blo_990 x_992)"
"(unsafe-vector-set!"
" A_910"
"(unsafe-fx+ Blo_990 1)"
" y_993)))))"
"(if(unsafe-fx< n_991 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_910"
" Blo_990"
"(unsafe-vector-ref A_910 Alo_989))"
"((letrec-values(((iloop_994)"
"(lambda(i_995)"
"(if(unsafe-fx<"
" i_995"
" n_991)"
"(let-values()"
"(let-values(((ref-i_996)"
"(unsafe-vector-ref"
" A_910"
"(unsafe-fx+"
" Alo_989"
" i_995))))"
"((letrec-values(((jloop_997)"
"(lambda(j_998)"
"(let-values(((ref-j-1_999)"
"(unsafe-vector-ref"
" A_910"
"(unsafe-fx-"
" j_998"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_990"
" j_998)"
"(string<?"
" ref-i_996"
" ref-j-1_999)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_910"
" j_998"
" ref-j-1_999)"
"(jloop_997"
"(unsafe-fx-"
" j_998"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_910"
" j_998"
" ref-i_996)"
"(iloop_994"
"(unsafe-fx+"
" i_995"
" 1))))))))"
" jloop_997)"
"(unsafe-fx+"
" Blo_990"
" i_995))))"
"(void)))))"
" iloop_994)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1000)"
"(unsafe-fxrshift n_991 1)))"
"(let-values(((n/2+_1001)"
"(unsafe-fx-"
" n_991"
" n/2-_1000)))"
"(let-values(((Amid1_1002)"
"(unsafe-fx+"
" Alo_989"
" n/2-_1000))"
"((Amid2_1003)"
"(unsafe-fx+"
" Alo_989"
" n/2+_1001))"
"((Bmid1_1004)"
"(unsafe-fx+"
" Blo_990"
" n/2-_1000)))"
"(begin"
"(copying-mergesort_988"
" Amid1_1002"
" Bmid1_1004"
" n/2+_1001)"
"(copying-mergesort_988"
" Alo_989"
" Amid2_1003"
" n/2-_1000)"
"(let-values(((b2_1005)"
"(unsafe-fx+"
" Blo_990"
" n_991)))"
"((letrec-values(((loop_1006)"
"(lambda(a1_1007"
" b1_1008"
" c1_1009)"
"(let-values(((x_1010)"
"(unsafe-vector-ref"
" A_910"
" a1_1007))"
"((y_1011)"
"(unsafe-vector-ref"
" A_910"
" b1_1008)))"
"(if(not"
"(string<?"
" y_1011"
" x_1010))"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1009"
" x_1010)"
"(let-values(((a1_1012)"
"(unsafe-fx+"
" a1_1007"
" 1))"
"((c1_1013)"
"(unsafe-fx+"
" c1_1009"
" 1)))"
"(if(unsafe-fx<"
" c1_1013"
" b1_1008)"
"(let-values()"
"(loop_1006"
" a1_1012"
" b1_1008"
" c1_1013))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1009"
" y_1011)"
"(let-values(((b1_1014)"
"(unsafe-fx+"
" b1_1008"
" 1))"
"((c1_1015)"
"(unsafe-fx+"
" c1_1009"
" 1)))"
"(if(unsafe-fx<="
" b2_1005"
" b1_1014)"
"((letrec-values(((loop_1016)"
"(lambda(a1_1017"
" c1_1018)"
"(if(unsafe-fx<"
" c1_1018"
" b1_1014)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1018"
"(unsafe-vector-ref"
" A_910"
" a1_1017))"
"(loop_1016"
"(unsafe-fx+"
" a1_1017"
" 1)"
"(unsafe-fx+"
" c1_1018"
" 1))))"
"(void)))))"
" loop_1016)"
" a1_1007"
" c1_1015)"
"(loop_1006"
" a1_1007"
" b1_1014"
" c1_1015)))))))))"
" loop_1006)"
" Amid2_1003"
" Bmid1_1004"
" Blo_990)))))))))))))"
"(let-values(((Alo_1019) 0)"
"((Amid1_1020) n/2-_951)"
"((Amid2_1021) n/2+_952)"
"((Ahi_1022) n_911)"
"((B1lo_1023) n_911))"
"(begin"
"(copying-mergesort_988 Amid1_1020 B1lo_1023 n/2+_952)"
"(if(zero? n/2-_951)"
"(void)"
"(let-values()"
"(copying-mergesort_988 Alo_1019 Amid2_1021 n/2-_951)))"
"(let-values(((b2_1024) Ahi_1022))"
"((letrec-values(((loop_1025)"
"(lambda(a1_1026 b1_1027 c1_1028)"
"(let-values(((x_1029)"
"(unsafe-vector-ref"
" A_910"
" a1_1026))"
"((y_1030)"
"(unsafe-vector-ref"
" A_910"
" b1_1027)))"
"(if(string<? x_1029 y_1030)"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1028"
" x_1029)"
"(let-values(((a1_1031)"
"(unsafe-fx+ a1_1026 1))"
"((c1_1032)"
"(unsafe-fx+ c1_1028 1)))"
"(if(unsafe-fx< c1_1032 b1_1027)"
"(let-values()"
"(loop_1025"
" a1_1031"
" b1_1027"
" c1_1032))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1028"
" y_1030)"
"(let-values(((b1_1033)"
"(unsafe-fx+ b1_1027 1))"
"((c1_1034)"
"(unsafe-fx+ c1_1028 1)))"
"(if(unsafe-fx<= b2_1024 b1_1033)"
"((letrec-values(((loop_1035)"
"(lambda(a1_1036"
" c1_1037)"
"(if(unsafe-fx<"
" c1_1037"
" b1_1033)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_910"
" c1_1037"
"(unsafe-vector-ref"
" A_910"
" a1_1036))"
"(loop_1035"
"(unsafe-fx+"
" a1_1036"
" 1)"
"(unsafe-fx+"
" c1_1037"
" 1))))"
"(void)))))"
" loop_1035)"
" a1_1026"
" c1_1034)"
"(loop_1025"
" a1_1026"
" b1_1033"
" c1_1034)))))))))"
" loop_1025)"
" B1lo_1023"
" Amid2_1021"
" Alo_1019))))))))))))"
"(begin"
"(hash-set! sorts_119 string<? sort-proc_909)"
"(hash-set! sorts_119 string<=? sort-proc_909)))"
"(let-values(((sort-proc_1038)"
"(lambda(A_1039 n_1040)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1080)(unsafe-fxrshift n_1040 1)))"
"(let-values(((n/2+_1081)(unsafe-fx- n_1040 n/2-_1080)))"
"(letrec-values(((copying-mergesort_1117)"
"(lambda(Alo_1118 Blo_1119 n_1120)"
"(if(unsafe-fx= n_1120 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1039"
" Blo_1119"
"(unsafe-vector-ref A_1039 Alo_1118)))"
"(if(unsafe-fx= n_1120 2)"
"(let-values()"
"(let-values(((x_1121)"
"(unsafe-vector-ref"
" A_1039"
" Alo_1118))"
"((y_1122)"
"(unsafe-vector-ref"
" A_1039"
"(unsafe-fx+ Alo_1118 1))))"
"(if(string>? y_1122 x_1121)"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" Blo_1119"
" y_1122)"
"(unsafe-vector-set!"
" A_1039"
"(unsafe-fx+ Blo_1119 1)"
" x_1121))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" Blo_1119"
" x_1121)"
"(unsafe-vector-set!"
" A_1039"
"(unsafe-fx+ Blo_1119 1)"
" y_1122)))))"
"(if(unsafe-fx< n_1120 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" Blo_1119"
"(unsafe-vector-ref A_1039 Alo_1118))"
"((letrec-values(((iloop_1123)"
"(lambda(i_1124)"
"(if(unsafe-fx<"
" i_1124"
" n_1120)"
"(let-values()"
"(let-values(((ref-i_1125)"
"(unsafe-vector-ref"
" A_1039"
"(unsafe-fx+"
" Alo_1118"
" i_1124))))"
"((letrec-values(((jloop_1126)"
"(lambda(j_1127)"
"(let-values(((ref-j-1_1128)"
"(unsafe-vector-ref"
" A_1039"
"(unsafe-fx-"
" j_1127"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1119"
" j_1127)"
"(string>?"
" ref-i_1125"
" ref-j-1_1128)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" j_1127"
" ref-j-1_1128)"
"(jloop_1126"
"(unsafe-fx-"
" j_1127"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" j_1127"
" ref-i_1125)"
"(iloop_1123"
"(unsafe-fx+"
" i_1124"
" 1))))))))"
" jloop_1126)"
"(unsafe-fx+"
" Blo_1119"
" i_1124))))"
"(void)))))"
" iloop_1123)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1129)"
"(unsafe-fxrshift n_1120 1)))"
"(let-values(((n/2+_1130)"
"(unsafe-fx-"
" n_1120"
" n/2-_1129)))"
"(let-values(((Amid1_1131)"
"(unsafe-fx+"
" Alo_1118"
" n/2-_1129))"
"((Amid2_1132)"
"(unsafe-fx+"
" Alo_1118"
" n/2+_1130))"
"((Bmid1_1133)"
"(unsafe-fx+"
" Blo_1119"
" n/2-_1129)))"
"(begin"
"(copying-mergesort_1117"
" Amid1_1131"
" Bmid1_1133"
" n/2+_1130)"
"(copying-mergesort_1117"
" Alo_1118"
" Amid2_1132"
" n/2-_1129)"
"(let-values(((b2_1134)"
"(unsafe-fx+"
" Blo_1119"
" n_1120)))"
"((letrec-values(((loop_1135)"
"(lambda(a1_1136"
" b1_1137"
" c1_1138)"
"(let-values(((x_1139)"
"(unsafe-vector-ref"
" A_1039"
" a1_1136))"
"((y_1140)"
"(unsafe-vector-ref"
" A_1039"
" b1_1137)))"
"(if(not"
"(string>?"
" y_1140"
" x_1139))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1138"
" x_1139)"
"(let-values(((a1_1141)"
"(unsafe-fx+"
" a1_1136"
" 1))"
"((c1_1142)"
"(unsafe-fx+"
" c1_1138"
" 1)))"
"(if(unsafe-fx<"
" c1_1142"
" b1_1137)"
"(let-values()"
"(loop_1135"
" a1_1141"
" b1_1137"
" c1_1142))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1138"
" y_1140)"
"(let-values(((b1_1143)"
"(unsafe-fx+"
" b1_1137"
" 1))"
"((c1_1144)"
"(unsafe-fx+"
" c1_1138"
" 1)))"
"(if(unsafe-fx<="
" b2_1134"
" b1_1143)"
"((letrec-values(((loop_1145)"
"(lambda(a1_1146"
" c1_1147)"
"(if(unsafe-fx<"
" c1_1147"
" b1_1143)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1147"
"(unsafe-vector-ref"
" A_1039"
" a1_1146))"
"(loop_1145"
"(unsafe-fx+"
" a1_1146"
" 1)"
"(unsafe-fx+"
" c1_1147"
" 1))))"
"(void)))))"
" loop_1145)"
" a1_1136"
" c1_1144)"
"(loop_1135"
" a1_1136"
" b1_1143"
" c1_1144)))))))))"
" loop_1135)"
" Amid2_1132"
" Bmid1_1133"
" Blo_1119)))))))))))))"
"(let-values(((Alo_1148) 0)"
"((Amid1_1149) n/2-_1080)"
"((Amid2_1150) n/2+_1081)"
"((Ahi_1151) n_1040)"
"((B1lo_1152) n_1040))"
"(begin"
"(copying-mergesort_1117 Amid1_1149 B1lo_1152 n/2+_1081)"
"(if(zero? n/2-_1080)"
"(void)"
"(let-values()"
"(copying-mergesort_1117 Alo_1148 Amid2_1150 n/2-_1080)))"
"(let-values(((b2_1153) Ahi_1151))"
"((letrec-values(((loop_1154)"
"(lambda(a1_1155 b1_1156 c1_1157)"
"(let-values(((x_1158)"
"(unsafe-vector-ref"
" A_1039"
" a1_1155))"
"((y_1159)"
"(unsafe-vector-ref"
" A_1039"
" b1_1156)))"
"(if(string>? x_1158 y_1159)"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1157"
" x_1158)"
"(let-values(((a1_1160)"
"(unsafe-fx+ a1_1155 1))"
"((c1_1161)"
"(unsafe-fx+ c1_1157 1)))"
"(if(unsafe-fx< c1_1161 b1_1156)"
"(let-values()"
"(loop_1154"
" a1_1160"
" b1_1156"
" c1_1161))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1157"
" y_1159)"
"(let-values(((b1_1162)"
"(unsafe-fx+ b1_1156 1))"
"((c1_1163)"
"(unsafe-fx+ c1_1157 1)))"
"(if(unsafe-fx<= b2_1153 b1_1162)"
"((letrec-values(((loop_1164)"
"(lambda(a1_1165"
" c1_1166)"
"(if(unsafe-fx<"
" c1_1166"
" b1_1162)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1039"
" c1_1166"
"(unsafe-vector-ref"
" A_1039"
" a1_1165))"
"(loop_1164"
"(unsafe-fx+"
" a1_1165"
" 1)"
"(unsafe-fx+"
" c1_1166"
" 1))))"
"(void)))))"
" loop_1164)"
" a1_1155"
" c1_1163)"
"(loop_1154"
" a1_1155"
" b1_1162"
" c1_1163)))))))))"
" loop_1154)"
" B1lo_1152"
" Amid2_1150"
" Alo_1148))))))))))))"
"(begin"
"(hash-set! sorts_119 string>? sort-proc_1038)"
"(hash-set! sorts_119 string>=? sort-proc_1038)))"
"(let-values(((sort-proc_1167)"
"(lambda(A_1168 n_1169)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1209)(unsafe-fxrshift n_1169 1)))"
"(let-values(((n/2+_1210)(unsafe-fx- n_1169 n/2-_1209)))"
"(letrec-values(((copying-mergesort_1246)"
"(lambda(Alo_1247 Blo_1248 n_1249)"
"(if(unsafe-fx= n_1249 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1168"
" Blo_1248"
"(unsafe-vector-ref A_1168 Alo_1247)))"
"(if(unsafe-fx= n_1249 2)"
"(let-values()"
"(let-values(((x_1250)"
"(unsafe-vector-ref"
" A_1168"
" Alo_1247))"
"((y_1251)"
"(unsafe-vector-ref"
" A_1168"
"(unsafe-fx+ Alo_1247 1))))"
"(if(string-ci<? y_1251 x_1250)"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" Blo_1248"
" y_1251)"
"(unsafe-vector-set!"
" A_1168"
"(unsafe-fx+ Blo_1248 1)"
" x_1250))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" Blo_1248"
" x_1250)"
"(unsafe-vector-set!"
" A_1168"
"(unsafe-fx+ Blo_1248 1)"
" y_1251)))))"
"(if(unsafe-fx< n_1249 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" Blo_1248"
"(unsafe-vector-ref A_1168 Alo_1247))"
"((letrec-values(((iloop_1252)"
"(lambda(i_1253)"
"(if(unsafe-fx<"
" i_1253"
" n_1249)"
"(let-values()"
"(let-values(((ref-i_1254)"
"(unsafe-vector-ref"
" A_1168"
"(unsafe-fx+"
" Alo_1247"
" i_1253))))"
"((letrec-values(((jloop_1255)"
"(lambda(j_1256)"
"(let-values(((ref-j-1_1257)"
"(unsafe-vector-ref"
" A_1168"
"(unsafe-fx-"
" j_1256"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1248"
" j_1256)"
"(string-ci<?"
" ref-i_1254"
" ref-j-1_1257)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" j_1256"
" ref-j-1_1257)"
"(jloop_1255"
"(unsafe-fx-"
" j_1256"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" j_1256"
" ref-i_1254)"
"(iloop_1252"
"(unsafe-fx+"
" i_1253"
" 1))))))))"
" jloop_1255)"
"(unsafe-fx+"
" Blo_1248"
" i_1253))))"
"(void)))))"
" iloop_1252)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1258)"
"(unsafe-fxrshift n_1249 1)))"
"(let-values(((n/2+_1259)"
"(unsafe-fx-"
" n_1249"
" n/2-_1258)))"
"(let-values(((Amid1_1260)"
"(unsafe-fx+"
" Alo_1247"
" n/2-_1258))"
"((Amid2_1261)"
"(unsafe-fx+"
" Alo_1247"
" n/2+_1259))"
"((Bmid1_1262)"
"(unsafe-fx+"
" Blo_1248"
" n/2-_1258)))"
"(begin"
"(copying-mergesort_1246"
" Amid1_1260"
" Bmid1_1262"
" n/2+_1259)"
"(copying-mergesort_1246"
" Alo_1247"
" Amid2_1261"
" n/2-_1258)"
"(let-values(((b2_1263)"
"(unsafe-fx+"
" Blo_1248"
" n_1249)))"
"((letrec-values(((loop_1264)"
"(lambda(a1_1265"
" b1_1266"
" c1_1267)"
"(let-values(((x_1268)"
"(unsafe-vector-ref"
" A_1168"
" a1_1265))"
"((y_1269)"
"(unsafe-vector-ref"
" A_1168"
" b1_1266)))"
"(if(not"
"(string-ci<?"
" y_1269"
" x_1268))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1267"
" x_1268)"
"(let-values(((a1_1270)"
"(unsafe-fx+"
" a1_1265"
" 1))"
"((c1_1271)"
"(unsafe-fx+"
" c1_1267"
" 1)))"
"(if(unsafe-fx<"
" c1_1271"
" b1_1266)"
"(let-values()"
"(loop_1264"
" a1_1270"
" b1_1266"
" c1_1271))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1267"
" y_1269)"
"(let-values(((b1_1272)"
"(unsafe-fx+"
" b1_1266"
" 1))"
"((c1_1273)"
"(unsafe-fx+"
" c1_1267"
" 1)))"
"(if(unsafe-fx<="
" b2_1263"
" b1_1272)"
"((letrec-values(((loop_1274)"
"(lambda(a1_1275"
" c1_1276)"
"(if(unsafe-fx<"
" c1_1276"
" b1_1272)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1276"
"(unsafe-vector-ref"
" A_1168"
" a1_1275))"
"(loop_1274"
"(unsafe-fx+"
" a1_1275"
" 1)"
"(unsafe-fx+"
" c1_1276"
" 1))))"
"(void)))))"
" loop_1274)"
" a1_1265"
" c1_1273)"
"(loop_1264"
" a1_1265"
" b1_1272"
" c1_1273)))))))))"
" loop_1264)"
" Amid2_1261"
" Bmid1_1262"
" Blo_1248)))))))))))))"
"(let-values(((Alo_1277) 0)"
"((Amid1_1278) n/2-_1209)"
"((Amid2_1279) n/2+_1210)"
"((Ahi_1280) n_1169)"
"((B1lo_1281) n_1169))"
"(begin"
"(copying-mergesort_1246 Amid1_1278 B1lo_1281 n/2+_1210)"
"(if(zero? n/2-_1209)"
"(void)"
"(let-values()"
"(copying-mergesort_1246 Alo_1277 Amid2_1279 n/2-_1209)))"
"(let-values(((b2_1282) Ahi_1280))"
"((letrec-values(((loop_1283)"
"(lambda(a1_1284 b1_1285 c1_1286)"
"(let-values(((x_1287)"
"(unsafe-vector-ref"
" A_1168"
" a1_1284))"
"((y_1288)"
"(unsafe-vector-ref"
" A_1168"
" b1_1285)))"
"(if(string-ci<? x_1287 y_1288)"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1286"
" x_1287)"
"(let-values(((a1_1289)"
"(unsafe-fx+ a1_1284 1))"
"((c1_1290)"
"(unsafe-fx+ c1_1286 1)))"
"(if(unsafe-fx< c1_1290 b1_1285)"
"(let-values()"
"(loop_1283"
" a1_1289"
" b1_1285"
" c1_1290))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1286"
" y_1288)"
"(let-values(((b1_1291)"
"(unsafe-fx+ b1_1285 1))"
"((c1_1292)"
"(unsafe-fx+ c1_1286 1)))"
"(if(unsafe-fx<= b2_1282 b1_1291)"
"((letrec-values(((loop_1293)"
"(lambda(a1_1294"
" c1_1295)"
"(if(unsafe-fx<"
" c1_1295"
" b1_1291)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1168"
" c1_1295"
"(unsafe-vector-ref"
" A_1168"
" a1_1294))"
"(loop_1293"
"(unsafe-fx+"
" a1_1294"
" 1)"
"(unsafe-fx+"
" c1_1295"
" 1))))"
"(void)))))"
" loop_1293)"
" a1_1284"
" c1_1292)"
"(loop_1283"
" a1_1284"
" b1_1291"
" c1_1292)))))))))"
" loop_1283)"
" B1lo_1281"
" Amid2_1279"
" Alo_1277))))))))))))"
"(begin"
"(hash-set! sorts_119 string-ci<? sort-proc_1167)"
"(hash-set! sorts_119 string-ci<=? sort-proc_1167)))"
"(let-values(((sort-proc_1296)"
"(lambda(A_1297 n_1298)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1338)(unsafe-fxrshift n_1298 1)))"
"(let-values(((n/2+_1339)(unsafe-fx- n_1298 n/2-_1338)))"
"(letrec-values(((copying-mergesort_1375)"
"(lambda(Alo_1376 Blo_1377 n_1378)"
"(if(unsafe-fx= n_1378 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1297"
" Blo_1377"
"(unsafe-vector-ref A_1297 Alo_1376)))"
"(if(unsafe-fx= n_1378 2)"
"(let-values()"
"(let-values(((x_1379)"
"(unsafe-vector-ref"
" A_1297"
" Alo_1376))"
"((y_1380)"
"(unsafe-vector-ref"
" A_1297"
"(unsafe-fx+ Alo_1376 1))))"
"(if(string-ci>? y_1380 x_1379)"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" Blo_1377"
" y_1380)"
"(unsafe-vector-set!"
" A_1297"
"(unsafe-fx+ Blo_1377 1)"
" x_1379))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" Blo_1377"
" x_1379)"
"(unsafe-vector-set!"
" A_1297"
"(unsafe-fx+ Blo_1377 1)"
" y_1380)))))"
"(if(unsafe-fx< n_1378 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" Blo_1377"
"(unsafe-vector-ref A_1297 Alo_1376))"
"((letrec-values(((iloop_1381)"
"(lambda(i_1382)"
"(if(unsafe-fx<"
" i_1382"
" n_1378)"
"(let-values()"
"(let-values(((ref-i_1383)"
"(unsafe-vector-ref"
" A_1297"
"(unsafe-fx+"
" Alo_1376"
" i_1382))))"
"((letrec-values(((jloop_1384)"
"(lambda(j_1385)"
"(let-values(((ref-j-1_1386)"
"(unsafe-vector-ref"
" A_1297"
"(unsafe-fx-"
" j_1385"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1377"
" j_1385)"
"(string-ci>?"
" ref-i_1383"
" ref-j-1_1386)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" j_1385"
" ref-j-1_1386)"
"(jloop_1384"
"(unsafe-fx-"
" j_1385"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" j_1385"
" ref-i_1383)"
"(iloop_1381"
"(unsafe-fx+"
" i_1382"
" 1))))))))"
" jloop_1384)"
"(unsafe-fx+"
" Blo_1377"
" i_1382))))"
"(void)))))"
" iloop_1381)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1387)"
"(unsafe-fxrshift n_1378 1)))"
"(let-values(((n/2+_1388)"
"(unsafe-fx-"
" n_1378"
" n/2-_1387)))"
"(let-values(((Amid1_1389)"
"(unsafe-fx+"
" Alo_1376"
" n/2-_1387))"
"((Amid2_1390)"
"(unsafe-fx+"
" Alo_1376"
" n/2+_1388))"
"((Bmid1_1391)"
"(unsafe-fx+"
" Blo_1377"
" n/2-_1387)))"
"(begin"
"(copying-mergesort_1375"
" Amid1_1389"
" Bmid1_1391"
" n/2+_1388)"
"(copying-mergesort_1375"
" Alo_1376"
" Amid2_1390"
" n/2-_1387)"
"(let-values(((b2_1392)"
"(unsafe-fx+"
" Blo_1377"
" n_1378)))"
"((letrec-values(((loop_1393)"
"(lambda(a1_1394"
" b1_1395"
" c1_1396)"
"(let-values(((x_1397)"
"(unsafe-vector-ref"
" A_1297"
" a1_1394))"
"((y_1398)"
"(unsafe-vector-ref"
" A_1297"
" b1_1395)))"
"(if(not"
"(string-ci>?"
" y_1398"
" x_1397))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1396"
" x_1397)"
"(let-values(((a1_1399)"
"(unsafe-fx+"
" a1_1394"
" 1))"
"((c1_1400)"
"(unsafe-fx+"
" c1_1396"
" 1)))"
"(if(unsafe-fx<"
" c1_1400"
" b1_1395)"
"(let-values()"
"(loop_1393"
" a1_1399"
" b1_1395"
" c1_1400))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1396"
" y_1398)"
"(let-values(((b1_1401)"
"(unsafe-fx+"
" b1_1395"
" 1))"
"((c1_1402)"
"(unsafe-fx+"
" c1_1396"
" 1)))"
"(if(unsafe-fx<="
" b2_1392"
" b1_1401)"
"((letrec-values(((loop_1403)"
"(lambda(a1_1404"
" c1_1405)"
"(if(unsafe-fx<"
" c1_1405"
" b1_1401)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1405"
"(unsafe-vector-ref"
" A_1297"
" a1_1404))"
"(loop_1403"
"(unsafe-fx+"
" a1_1404"
" 1)"
"(unsafe-fx+"
" c1_1405"
" 1))))"
"(void)))))"
" loop_1403)"
" a1_1394"
" c1_1402)"
"(loop_1393"
" a1_1394"
" b1_1401"
" c1_1402)))))))))"
" loop_1393)"
" Amid2_1390"
" Bmid1_1391"
" Blo_1377)))))))))))))"
"(let-values(((Alo_1406) 0)"
"((Amid1_1407) n/2-_1338)"
"((Amid2_1408) n/2+_1339)"
"((Ahi_1409) n_1298)"
"((B1lo_1410) n_1298))"
"(begin"
"(copying-mergesort_1375 Amid1_1407 B1lo_1410 n/2+_1339)"
"(if(zero? n/2-_1338)"
"(void)"
"(let-values()"
"(copying-mergesort_1375 Alo_1406 Amid2_1408 n/2-_1338)))"
"(let-values(((b2_1411) Ahi_1409))"
"((letrec-values(((loop_1412)"
"(lambda(a1_1413 b1_1414 c1_1415)"
"(let-values(((x_1416)"
"(unsafe-vector-ref"
" A_1297"
" a1_1413))"
"((y_1417)"
"(unsafe-vector-ref"
" A_1297"
" b1_1414)))"
"(if(string-ci>? x_1416 y_1417)"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1415"
" x_1416)"
"(let-values(((a1_1418)"
"(unsafe-fx+ a1_1413 1))"
"((c1_1419)"
"(unsafe-fx+ c1_1415 1)))"
"(if(unsafe-fx< c1_1419 b1_1414)"
"(let-values()"
"(loop_1412"
" a1_1418"
" b1_1414"
" c1_1419))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1415"
" y_1417)"
"(let-values(((b1_1420)"
"(unsafe-fx+ b1_1414 1))"
"((c1_1421)"
"(unsafe-fx+ c1_1415 1)))"
"(if(unsafe-fx<= b2_1411 b1_1420)"
"((letrec-values(((loop_1422)"
"(lambda(a1_1423"
" c1_1424)"
"(if(unsafe-fx<"
" c1_1424"
" b1_1420)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1297"
" c1_1424"
"(unsafe-vector-ref"
" A_1297"
" a1_1423))"
"(loop_1422"
"(unsafe-fx+"
" a1_1423"
" 1)"
"(unsafe-fx+"
" c1_1424"
" 1))))"
"(void)))))"
" loop_1422)"
" a1_1413"
" c1_1421)"
"(loop_1412"
" a1_1413"
" b1_1420"
" c1_1421)))))))))"
" loop_1412)"
" B1lo_1410"
" Amid2_1408"
" Alo_1406))))))))))))"
"(begin"
"(hash-set! sorts_119 string-ci>? sort-proc_1296)"
"(hash-set! sorts_119 string-ci>=? sort-proc_1296)))"
"(let-values(((sort-proc_1425)"
"(lambda(A_1426 n_1427)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1467)(unsafe-fxrshift n_1427 1)))"
"(let-values(((n/2+_1468)(unsafe-fx- n_1427 n/2-_1467)))"
"(letrec-values(((copying-mergesort_1504)"
"(lambda(Alo_1505 Blo_1506 n_1507)"
"(if(unsafe-fx= n_1507 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1426"
" Blo_1506"
"(unsafe-vector-ref A_1426 Alo_1505)))"
"(if(unsafe-fx= n_1507 2)"
"(let-values()"
"(let-values(((x_1508)"
"(unsafe-vector-ref"
" A_1426"
" Alo_1505))"
"((y_1509)"
"(unsafe-vector-ref"
" A_1426"
"(unsafe-fx+ Alo_1505 1))))"
"(if(char<? y_1509 x_1508)"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" Blo_1506"
" y_1509)"
"(unsafe-vector-set!"
" A_1426"
"(unsafe-fx+ Blo_1506 1)"
" x_1508))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" Blo_1506"
" x_1508)"
"(unsafe-vector-set!"
" A_1426"
"(unsafe-fx+ Blo_1506 1)"
" y_1509)))))"
"(if(unsafe-fx< n_1507 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" Blo_1506"
"(unsafe-vector-ref A_1426 Alo_1505))"
"((letrec-values(((iloop_1510)"
"(lambda(i_1511)"
"(if(unsafe-fx<"
" i_1511"
" n_1507)"
"(let-values()"
"(let-values(((ref-i_1512)"
"(unsafe-vector-ref"
" A_1426"
"(unsafe-fx+"
" Alo_1505"
" i_1511))))"
"((letrec-values(((jloop_1513)"
"(lambda(j_1514)"
"(let-values(((ref-j-1_1515)"
"(unsafe-vector-ref"
" A_1426"
"(unsafe-fx-"
" j_1514"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1506"
" j_1514)"
"(char<?"
" ref-i_1512"
" ref-j-1_1515)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" j_1514"
" ref-j-1_1515)"
"(jloop_1513"
"(unsafe-fx-"
" j_1514"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" j_1514"
" ref-i_1512)"
"(iloop_1510"
"(unsafe-fx+"
" i_1511"
" 1))))))))"
" jloop_1513)"
"(unsafe-fx+"
" Blo_1506"
" i_1511))))"
"(void)))))"
" iloop_1510)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1516)"
"(unsafe-fxrshift n_1507 1)))"
"(let-values(((n/2+_1517)"
"(unsafe-fx-"
" n_1507"
" n/2-_1516)))"
"(let-values(((Amid1_1518)"
"(unsafe-fx+"
" Alo_1505"
" n/2-_1516))"
"((Amid2_1519)"
"(unsafe-fx+"
" Alo_1505"
" n/2+_1517))"
"((Bmid1_1520)"
"(unsafe-fx+"
" Blo_1506"
" n/2-_1516)))"
"(begin"
"(copying-mergesort_1504"
" Amid1_1518"
" Bmid1_1520"
" n/2+_1517)"
"(copying-mergesort_1504"
" Alo_1505"
" Amid2_1519"
" n/2-_1516)"
"(let-values(((b2_1521)"
"(unsafe-fx+"
" Blo_1506"
" n_1507)))"
"((letrec-values(((loop_1522)"
"(lambda(a1_1523"
" b1_1524"
" c1_1525)"
"(let-values(((x_1526)"
"(unsafe-vector-ref"
" A_1426"
" a1_1523))"
"((y_1527)"
"(unsafe-vector-ref"
" A_1426"
" b1_1524)))"
"(if(not"
"(char<?"
" y_1527"
" x_1526))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1525"
" x_1526)"
"(let-values(((a1_1528)"
"(unsafe-fx+"
" a1_1523"
" 1))"
"((c1_1529)"
"(unsafe-fx+"
" c1_1525"
" 1)))"
"(if(unsafe-fx<"
" c1_1529"
" b1_1524)"
"(let-values()"
"(loop_1522"
" a1_1528"
" b1_1524"
" c1_1529))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1525"
" y_1527)"
"(let-values(((b1_1530)"
"(unsafe-fx+"
" b1_1524"
" 1))"
"((c1_1531)"
"(unsafe-fx+"
" c1_1525"
" 1)))"
"(if(unsafe-fx<="
" b2_1521"
" b1_1530)"
"((letrec-values(((loop_1532)"
"(lambda(a1_1533"
" c1_1534)"
"(if(unsafe-fx<"
" c1_1534"
" b1_1530)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1534"
"(unsafe-vector-ref"
" A_1426"
" a1_1533))"
"(loop_1532"
"(unsafe-fx+"
" a1_1533"
" 1)"
"(unsafe-fx+"
" c1_1534"
" 1))))"
"(void)))))"
" loop_1532)"
" a1_1523"
" c1_1531)"
"(loop_1522"
" a1_1523"
" b1_1530"
" c1_1531)))))))))"
" loop_1522)"
" Amid2_1519"
" Bmid1_1520"
" Blo_1506)))))))))))))"
"(let-values(((Alo_1535) 0)"
"((Amid1_1536) n/2-_1467)"
"((Amid2_1537) n/2+_1468)"
"((Ahi_1538) n_1427)"
"((B1lo_1539) n_1427))"
"(begin"
"(copying-mergesort_1504 Amid1_1536 B1lo_1539 n/2+_1468)"
"(if(zero? n/2-_1467)"
"(void)"
"(let-values()"
"(copying-mergesort_1504 Alo_1535 Amid2_1537 n/2-_1467)))"
"(let-values(((b2_1540) Ahi_1538))"
"((letrec-values(((loop_1541)"
"(lambda(a1_1542 b1_1543 c1_1544)"
"(let-values(((x_1545)"
"(unsafe-vector-ref"
" A_1426"
" a1_1542))"
"((y_1546)"
"(unsafe-vector-ref"
" A_1426"
" b1_1543)))"
"(if(char<? x_1545 y_1546)"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1544"
" x_1545)"
"(let-values(((a1_1547)"
"(unsafe-fx+ a1_1542 1))"
"((c1_1548)"
"(unsafe-fx+ c1_1544 1)))"
"(if(unsafe-fx< c1_1548 b1_1543)"
"(let-values()"
"(loop_1541"
" a1_1547"
" b1_1543"
" c1_1548))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1544"
" y_1546)"
"(let-values(((b1_1549)"
"(unsafe-fx+ b1_1543 1))"
"((c1_1550)"
"(unsafe-fx+ c1_1544 1)))"
"(if(unsafe-fx<= b2_1540 b1_1549)"
"((letrec-values(((loop_1551)"
"(lambda(a1_1552"
" c1_1553)"
"(if(unsafe-fx<"
" c1_1553"
" b1_1549)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1426"
" c1_1553"
"(unsafe-vector-ref"
" A_1426"
" a1_1552))"
"(loop_1551"
"(unsafe-fx+"
" a1_1552"
" 1)"
"(unsafe-fx+"
" c1_1553"
" 1))))"
"(void)))))"
" loop_1551)"
" a1_1542"
" c1_1550)"
"(loop_1541"
" a1_1542"
" b1_1549"
" c1_1550)))))))))"
" loop_1541)"
" B1lo_1539"
" Amid2_1537"
" Alo_1535))))))))))))"
"(begin"
"(hash-set! sorts_119 char<? sort-proc_1425)"
"(hash-set! sorts_119 char<=? sort-proc_1425)))"
"(let-values(((sort-proc_1554)"
"(lambda(A_1555 n_1556)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1596)(unsafe-fxrshift n_1556 1)))"
"(let-values(((n/2+_1597)(unsafe-fx- n_1556 n/2-_1596)))"
"(letrec-values(((copying-mergesort_1633)"
"(lambda(Alo_1634 Blo_1635 n_1636)"
"(if(unsafe-fx= n_1636 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1555"
" Blo_1635"
"(unsafe-vector-ref A_1555 Alo_1634)))"
"(if(unsafe-fx= n_1636 2)"
"(let-values()"
"(let-values(((x_1637)"
"(unsafe-vector-ref"
" A_1555"
" Alo_1634))"
"((y_1638)"
"(unsafe-vector-ref"
" A_1555"
"(unsafe-fx+ Alo_1634 1))))"
"(if(char>? y_1638 x_1637)"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" Blo_1635"
" y_1638)"
"(unsafe-vector-set!"
" A_1555"
"(unsafe-fx+ Blo_1635 1)"
" x_1637))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" Blo_1635"
" x_1637)"
"(unsafe-vector-set!"
" A_1555"
"(unsafe-fx+ Blo_1635 1)"
" y_1638)))))"
"(if(unsafe-fx< n_1636 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" Blo_1635"
"(unsafe-vector-ref A_1555 Alo_1634))"
"((letrec-values(((iloop_1639)"
"(lambda(i_1640)"
"(if(unsafe-fx<"
" i_1640"
" n_1636)"
"(let-values()"
"(let-values(((ref-i_1641)"
"(unsafe-vector-ref"
" A_1555"
"(unsafe-fx+"
" Alo_1634"
" i_1640))))"
"((letrec-values(((jloop_1642)"
"(lambda(j_1643)"
"(let-values(((ref-j-1_1644)"
"(unsafe-vector-ref"
" A_1555"
"(unsafe-fx-"
" j_1643"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1635"
" j_1643)"
"(char>?"
" ref-i_1641"
" ref-j-1_1644)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" j_1643"
" ref-j-1_1644)"
"(jloop_1642"
"(unsafe-fx-"
" j_1643"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" j_1643"
" ref-i_1641)"
"(iloop_1639"
"(unsafe-fx+"
" i_1640"
" 1))))))))"
" jloop_1642)"
"(unsafe-fx+"
" Blo_1635"
" i_1640))))"
"(void)))))"
" iloop_1639)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1645)"
"(unsafe-fxrshift n_1636 1)))"
"(let-values(((n/2+_1646)"
"(unsafe-fx-"
" n_1636"
" n/2-_1645)))"
"(let-values(((Amid1_1647)"
"(unsafe-fx+"
" Alo_1634"
" n/2-_1645))"
"((Amid2_1648)"
"(unsafe-fx+"
" Alo_1634"
" n/2+_1646))"
"((Bmid1_1649)"
"(unsafe-fx+"
" Blo_1635"
" n/2-_1645)))"
"(begin"
"(copying-mergesort_1633"
" Amid1_1647"
" Bmid1_1649"
" n/2+_1646)"
"(copying-mergesort_1633"
" Alo_1634"
" Amid2_1648"
" n/2-_1645)"
"(let-values(((b2_1650)"
"(unsafe-fx+"
" Blo_1635"
" n_1636)))"
"((letrec-values(((loop_1651)"
"(lambda(a1_1652"
" b1_1653"
" c1_1654)"
"(let-values(((x_1655)"
"(unsafe-vector-ref"
" A_1555"
" a1_1652))"
"((y_1656)"
"(unsafe-vector-ref"
" A_1555"
" b1_1653)))"
"(if(not"
"(char>?"
" y_1656"
" x_1655))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1654"
" x_1655)"
"(let-values(((a1_1657)"
"(unsafe-fx+"
" a1_1652"
" 1))"
"((c1_1658)"
"(unsafe-fx+"
" c1_1654"
" 1)))"
"(if(unsafe-fx<"
" c1_1658"
" b1_1653)"
"(let-values()"
"(loop_1651"
" a1_1657"
" b1_1653"
" c1_1658))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1654"
" y_1656)"
"(let-values(((b1_1659)"
"(unsafe-fx+"
" b1_1653"
" 1))"
"((c1_1660)"
"(unsafe-fx+"
" c1_1654"
" 1)))"
"(if(unsafe-fx<="
" b2_1650"
" b1_1659)"
"((letrec-values(((loop_1661)"
"(lambda(a1_1662"
" c1_1663)"
"(if(unsafe-fx<"
" c1_1663"
" b1_1659)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1663"
"(unsafe-vector-ref"
" A_1555"
" a1_1662))"
"(loop_1661"
"(unsafe-fx+"
" a1_1662"
" 1)"
"(unsafe-fx+"
" c1_1663"
" 1))))"
"(void)))))"
" loop_1661)"
" a1_1652"
" c1_1660)"
"(loop_1651"
" a1_1652"
" b1_1659"
" c1_1660)))))))))"
" loop_1651)"
" Amid2_1648"
" Bmid1_1649"
" Blo_1635)))))))))))))"
"(let-values(((Alo_1664) 0)"
"((Amid1_1665) n/2-_1596)"
"((Amid2_1666) n/2+_1597)"
"((Ahi_1667) n_1556)"
"((B1lo_1668) n_1556))"
"(begin"
"(copying-mergesort_1633 Amid1_1665 B1lo_1668 n/2+_1597)"
"(if(zero? n/2-_1596)"
"(void)"
"(let-values()"
"(copying-mergesort_1633 Alo_1664 Amid2_1666 n/2-_1596)))"
"(let-values(((b2_1669) Ahi_1667))"
"((letrec-values(((loop_1670)"
"(lambda(a1_1671 b1_1672 c1_1673)"
"(let-values(((x_1674)"
"(unsafe-vector-ref"
" A_1555"
" a1_1671))"
"((y_1675)"
"(unsafe-vector-ref"
" A_1555"
" b1_1672)))"
"(if(char>? x_1674 y_1675)"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1673"
" x_1674)"
"(let-values(((a1_1676)"
"(unsafe-fx+ a1_1671 1))"
"((c1_1677)"
"(unsafe-fx+ c1_1673 1)))"
"(if(unsafe-fx< c1_1677 b1_1672)"
"(let-values()"
"(loop_1670"
" a1_1676"
" b1_1672"
" c1_1677))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1673"
" y_1675)"
"(let-values(((b1_1678)"
"(unsafe-fx+ b1_1672 1))"
"((c1_1679)"
"(unsafe-fx+ c1_1673 1)))"
"(if(unsafe-fx<= b2_1669 b1_1678)"
"((letrec-values(((loop_1680)"
"(lambda(a1_1681"
" c1_1682)"
"(if(unsafe-fx<"
" c1_1682"
" b1_1678)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1555"
" c1_1682"
"(unsafe-vector-ref"
" A_1555"
" a1_1681))"
"(loop_1680"
"(unsafe-fx+"
" a1_1681"
" 1)"
"(unsafe-fx+"
" c1_1682"
" 1))))"
"(void)))))"
" loop_1680)"
" a1_1671"
" c1_1679)"
"(loop_1670"
" a1_1671"
" b1_1678"
" c1_1679)))))))))"
" loop_1670)"
" B1lo_1668"
" Amid2_1666"
" Alo_1664))))))))))))"
"(begin"
"(hash-set! sorts_119 char>? sort-proc_1554)"
"(hash-set! sorts_119 char>=? sort-proc_1554)))"
"(let-values(((sort-proc_1683)"
"(lambda(A_1684 n_1685)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1725)(unsafe-fxrshift n_1685 1)))"
"(let-values(((n/2+_1726)(unsafe-fx- n_1685 n/2-_1725)))"
"(letrec-values(((copying-mergesort_1762)"
"(lambda(Alo_1763 Blo_1764 n_1765)"
"(if(unsafe-fx= n_1765 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1684"
" Blo_1764"
"(unsafe-vector-ref A_1684 Alo_1763)))"
"(if(unsafe-fx= n_1765 2)"
"(let-values()"
"(let-values(((x_1766)"
"(unsafe-vector-ref"
" A_1684"
" Alo_1763))"
"((y_1767)"
"(unsafe-vector-ref"
" A_1684"
"(unsafe-fx+ Alo_1763 1))))"
"(if(keyword<? y_1767 x_1766)"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" Blo_1764"
" y_1767)"
"(unsafe-vector-set!"
" A_1684"
"(unsafe-fx+ Blo_1764 1)"
" x_1766))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" Blo_1764"
" x_1766)"
"(unsafe-vector-set!"
" A_1684"
"(unsafe-fx+ Blo_1764 1)"
" y_1767)))))"
"(if(unsafe-fx< n_1765 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" Blo_1764"
"(unsafe-vector-ref A_1684 Alo_1763))"
"((letrec-values(((iloop_1768)"
"(lambda(i_1769)"
"(if(unsafe-fx<"
" i_1769"
" n_1765)"
"(let-values()"
"(let-values(((ref-i_1770)"
"(unsafe-vector-ref"
" A_1684"
"(unsafe-fx+"
" Alo_1763"
" i_1769))))"
"((letrec-values(((jloop_1771)"
"(lambda(j_1772)"
"(let-values(((ref-j-1_1773)"
"(unsafe-vector-ref"
" A_1684"
"(unsafe-fx-"
" j_1772"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1764"
" j_1772)"
"(keyword<?"
" ref-i_1770"
" ref-j-1_1773)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" j_1772"
" ref-j-1_1773)"
"(jloop_1771"
"(unsafe-fx-"
" j_1772"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" j_1772"
" ref-i_1770)"
"(iloop_1768"
"(unsafe-fx+"
" i_1769"
" 1))))))))"
" jloop_1771)"
"(unsafe-fx+"
" Blo_1764"
" i_1769))))"
"(void)))))"
" iloop_1768)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1774)"
"(unsafe-fxrshift n_1765 1)))"
"(let-values(((n/2+_1775)"
"(unsafe-fx-"
" n_1765"
" n/2-_1774)))"
"(let-values(((Amid1_1776)"
"(unsafe-fx+"
" Alo_1763"
" n/2-_1774))"
"((Amid2_1777)"
"(unsafe-fx+"
" Alo_1763"
" n/2+_1775))"
"((Bmid1_1778)"
"(unsafe-fx+"
" Blo_1764"
" n/2-_1774)))"
"(begin"
"(copying-mergesort_1762"
" Amid1_1776"
" Bmid1_1778"
" n/2+_1775)"
"(copying-mergesort_1762"
" Alo_1763"
" Amid2_1777"
" n/2-_1774)"
"(let-values(((b2_1779)"
"(unsafe-fx+"
" Blo_1764"
" n_1765)))"
"((letrec-values(((loop_1780)"
"(lambda(a1_1781"
" b1_1782"
" c1_1783)"
"(let-values(((x_1784)"
"(unsafe-vector-ref"
" A_1684"
" a1_1781))"
"((y_1785)"
"(unsafe-vector-ref"
" A_1684"
" b1_1782)))"
"(if(not"
"(keyword<?"
" y_1785"
" x_1784))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1783"
" x_1784)"
"(let-values(((a1_1786)"
"(unsafe-fx+"
" a1_1781"
" 1))"
"((c1_1787)"
"(unsafe-fx+"
" c1_1783"
" 1)))"
"(if(unsafe-fx<"
" c1_1787"
" b1_1782)"
"(let-values()"
"(loop_1780"
" a1_1786"
" b1_1782"
" c1_1787))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1783"
" y_1785)"
"(let-values(((b1_1788)"
"(unsafe-fx+"
" b1_1782"
" 1))"
"((c1_1789)"
"(unsafe-fx+"
" c1_1783"
" 1)))"
"(if(unsafe-fx<="
" b2_1779"
" b1_1788)"
"((letrec-values(((loop_1790)"
"(lambda(a1_1791"
" c1_1792)"
"(if(unsafe-fx<"
" c1_1792"
" b1_1788)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1792"
"(unsafe-vector-ref"
" A_1684"
" a1_1791))"
"(loop_1790"
"(unsafe-fx+"
" a1_1791"
" 1)"
"(unsafe-fx+"
" c1_1792"
" 1))))"
"(void)))))"
" loop_1790)"
" a1_1781"
" c1_1789)"
"(loop_1780"
" a1_1781"
" b1_1788"
" c1_1789)))))))))"
" loop_1780)"
" Amid2_1777"
" Bmid1_1778"
" Blo_1764)))))))))))))"
"(let-values(((Alo_1793) 0)"
"((Amid1_1794) n/2-_1725)"
"((Amid2_1795) n/2+_1726)"
"((Ahi_1796) n_1685)"
"((B1lo_1797) n_1685))"
"(begin"
"(copying-mergesort_1762 Amid1_1794 B1lo_1797 n/2+_1726)"
"(if(zero? n/2-_1725)"
"(void)"
"(let-values()"
"(copying-mergesort_1762 Alo_1793 Amid2_1795 n/2-_1725)))"
"(let-values(((b2_1798) Ahi_1796))"
"((letrec-values(((loop_1799)"
"(lambda(a1_1800 b1_1801 c1_1802)"
"(let-values(((x_1803)"
"(unsafe-vector-ref"
" A_1684"
" a1_1800))"
"((y_1804)"
"(unsafe-vector-ref"
" A_1684"
" b1_1801)))"
"(if(keyword<? x_1803 y_1804)"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1802"
" x_1803)"
"(let-values(((a1_1805)"
"(unsafe-fx+ a1_1800 1))"
"((c1_1806)"
"(unsafe-fx+ c1_1802 1)))"
"(if(unsafe-fx< c1_1806 b1_1801)"
"(let-values()"
"(loop_1799"
" a1_1805"
" b1_1801"
" c1_1806))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1802"
" y_1804)"
"(let-values(((b1_1807)"
"(unsafe-fx+ b1_1801 1))"
"((c1_1808)"
"(unsafe-fx+ c1_1802 1)))"
"(if(unsafe-fx<= b2_1798 b1_1807)"
"((letrec-values(((loop_1809)"
"(lambda(a1_1810"
" c1_1811)"
"(if(unsafe-fx<"
" c1_1811"
" b1_1807)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1684"
" c1_1811"
"(unsafe-vector-ref"
" A_1684"
" a1_1810))"
"(loop_1809"
"(unsafe-fx+"
" a1_1810"
" 1)"
"(unsafe-fx+"
" c1_1811"
" 1))))"
"(void)))))"
" loop_1809)"
" a1_1800"
" c1_1808)"
"(loop_1799"
" a1_1800"
" b1_1807"
" c1_1808)))))))))"
" loop_1799)"
" B1lo_1797"
" Amid2_1795"
" Alo_1793))))))))))))"
"(hash-set! sorts_119 keyword<? sort-proc_1683))"
"(make-immutable-hasheq(hash-map sorts_119 cons)))))))"
"(let-values(((generic-sort_50)"
"(lambda(A_1812 less-than?_1813 n_1814)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1854)(unsafe-fxrshift n_1814 1)))"
"(let-values(((n/2+_1855)(unsafe-fx- n_1814 n/2-_1854)))"
"(letrec-values(((copying-mergesort_1891)"
"(lambda(Alo_1892 Blo_1893 n_1894)"
"(if(unsafe-fx= n_1894 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1812"
" Blo_1893"
"(unsafe-vector-ref A_1812 Alo_1892)))"
"(if(unsafe-fx= n_1894 2)"
"(let-values()"
"(let-values(((x_1895)(unsafe-vector-ref A_1812 Alo_1892))"
"((y_1896)"
"(unsafe-vector-ref"
" A_1812"
"(unsafe-fx+ Alo_1892 1))))"
"(if(less-than?_1813 y_1896 x_1895)"
"(begin"
"(unsafe-vector-set! A_1812 Blo_1893 y_1896)"
"(unsafe-vector-set! A_1812(unsafe-fx+ Blo_1893 1) x_1895))"
"(begin"
"(unsafe-vector-set! A_1812 Blo_1893 x_1895)"
"(unsafe-vector-set!"
" A_1812"
"(unsafe-fx+ Blo_1893 1)"
" y_1896)))))"
"(if(unsafe-fx< n_1894 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" Blo_1893"
"(unsafe-vector-ref A_1812 Alo_1892))"
"((letrec-values(((iloop_1897)"
"(lambda(i_1898)"
"(if(unsafe-fx< i_1898 n_1894)"
"(let-values()"
"(let-values(((ref-i_1899)"
"(unsafe-vector-ref"
" A_1812"
"(unsafe-fx+"
" Alo_1892"
" i_1898))))"
"((letrec-values(((jloop_1900)"
"(lambda(j_1901)"
"(let-values(((ref-j-1_1902)"
"(unsafe-vector-ref"
" A_1812"
"(unsafe-fx-"
" j_1901"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1893"
" j_1901)"
"(less-than?_1813"
" ref-i_1899"
" ref-j-1_1902)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" j_1901"
" ref-j-1_1902)"
"(jloop_1900"
"(unsafe-fx-"
" j_1901"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" j_1901"
" ref-i_1899)"
"(iloop_1897"
"(unsafe-fx+"
" i_1898"
" 1))))))))"
" jloop_1900)"
"(unsafe-fx+ Blo_1893 i_1898))))"
"(void)))))"
" iloop_1897)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1903)(unsafe-fxrshift n_1894 1)))"
"(let-values(((n/2+_1904)(unsafe-fx- n_1894 n/2-_1903)))"
"(let-values(((Amid1_1905)(unsafe-fx+ Alo_1892 n/2-_1903))"
"((Amid2_1906)(unsafe-fx+ Alo_1892 n/2+_1904))"
"((Bmid1_1907)"
"(unsafe-fx+ Blo_1893 n/2-_1903)))"
"(begin"
"(copying-mergesort_1891"
" Amid1_1905"
" Bmid1_1907"
" n/2+_1904)"
"(copying-mergesort_1891 Alo_1892 Amid2_1906 n/2-_1903)"
"(let-values(((b2_1908)(unsafe-fx+ Blo_1893 n_1894)))"
"((letrec-values(((loop_1909)"
"(lambda(a1_1910 b1_1911 c1_1912)"
"(let-values(((x_1913)"
"(unsafe-vector-ref"
" A_1812"
" a1_1910))"
"((y_1914)"
"(unsafe-vector-ref"
" A_1812"
" b1_1911)))"
"(if(not"
"(less-than?_1813"
" y_1914"
" x_1913))"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" c1_1912"
" x_1913)"
"(let-values(((a1_1915)"
"(unsafe-fx+"
" a1_1910"
" 1))"
"((c1_1916)"
"(unsafe-fx+"
" c1_1912"
" 1)))"
"(if(unsafe-fx<"
" c1_1916"
" b1_1911)"
"(let-values()"
"(loop_1909"
" a1_1915"
" b1_1911"
" c1_1916))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" c1_1912"
" y_1914)"
"(let-values(((b1_1917)"
"(unsafe-fx+"
" b1_1911"
" 1))"
"((c1_1918)"
"(unsafe-fx+"
" c1_1912"
" 1)))"
"(if(unsafe-fx<="
" b2_1908"
" b1_1917)"
"((letrec-values(((loop_1919)"
"(lambda(a1_1920"
" c1_1921)"
"(if(unsafe-fx<"
" c1_1921"
" b1_1917)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" c1_1921"
"(unsafe-vector-ref"
" A_1812"
" a1_1920))"
"(loop_1919"
"(unsafe-fx+"
" a1_1920"
" 1)"
"(unsafe-fx+"
" c1_1921"
" 1))))"
"(void)))))"
" loop_1919)"
" a1_1910"
" c1_1918)"
"(loop_1909"
" a1_1910"
" b1_1917"
" c1_1918)))))))))"
" loop_1909)"
" Amid2_1906"
" Bmid1_1907"
" Blo_1893)))))))))))))"
"(let-values(((Alo_1922) 0)"
"((Amid1_1923) n/2-_1854)"
"((Amid2_1924) n/2+_1855)"
"((Ahi_1925) n_1814)"
"((B1lo_1926) n_1814))"
"(begin"
"(copying-mergesort_1891 Amid1_1923 B1lo_1926 n/2+_1855)"
"(if(zero? n/2-_1854)"
"(void)"
"(let-values()(copying-mergesort_1891 Alo_1922 Amid2_1924 n/2-_1854)))"
"(let-values(((b2_1927) Ahi_1925))"
"((letrec-values(((loop_1928)"
"(lambda(a1_1929 b1_1930 c1_1931)"
"(let-values(((x_1932)(unsafe-vector-ref A_1812 a1_1929))"
"((y_1933)(unsafe-vector-ref A_1812 b1_1930)))"
"(if(less-than?_1813 x_1932 y_1933)"
"(begin"
"(unsafe-vector-set! A_1812 c1_1931 x_1932)"
"(let-values(((a1_1934)(unsafe-fx+ a1_1929 1))"
"((c1_1935)(unsafe-fx+ c1_1931 1)))"
"(if(unsafe-fx< c1_1935 b1_1930)"
"(let-values()(loop_1928 a1_1934 b1_1930 c1_1935))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_1812 c1_1931 y_1933)"
"(let-values(((b1_1936)(unsafe-fx+ b1_1930 1))"
"((c1_1937)(unsafe-fx+ c1_1931 1)))"
"(if(unsafe-fx<= b2_1927 b1_1936)"
"((letrec-values(((loop_1938)"
"(lambda(a1_1939 c1_1940)"
"(if(unsafe-fx< c1_1940 b1_1936)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1812"
" c1_1940"
"(unsafe-vector-ref"
" A_1812"
" a1_1939))"
"(loop_1938"
"(unsafe-fx+ a1_1939 1)"
"(unsafe-fx+ c1_1940 1))))"
"(void)))))"
" loop_1938)"
" a1_1929"
" c1_1937)"
"(loop_1928 a1_1929 b1_1936 c1_1937)))))))))"
" loop_1928)"
" B1lo_1926"
" Amid2_1924"
" Alo_1922))))))))))))"
"(let-values(((generic-sort/key_51)"
"(lambda(A_1941 less-than?_1942 n_1943 key_1944)"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_1984)(unsafe-fxrshift n_1943 1)))"
"(let-values(((n/2+_1985)(unsafe-fx- n_1943 n/2-_1984)))"
"(letrec-values(((copying-mergesort_2021)"
"(lambda(Alo_2022 Blo_2023 n_2024)"
"(if(unsafe-fx= n_2024 1)"
"(let-values()"
"(unsafe-vector-set!"
" A_1941"
" Blo_2023"
"(unsafe-vector-ref A_1941 Alo_2022)))"
"(if(unsafe-fx= n_2024 2)"
"(let-values()"
"(let-values(((x_2025)(unsafe-vector-ref A_1941 Alo_2022))"
"((y_2026)"
"(unsafe-vector-ref"
" A_1941"
"(unsafe-fx+ Alo_2022 1))))"
"(if(if key_1944"
"(less-than?_1942(key_1944 y_2026)(key_1944 x_2025))"
"(less-than?_1942 y_2026 x_2025))"
"(begin"
"(unsafe-vector-set! A_1941 Blo_2023 y_2026)"
"(unsafe-vector-set!"
" A_1941"
"(unsafe-fx+ Blo_2023 1)"
" x_2025))"
"(begin"
"(unsafe-vector-set! A_1941 Blo_2023 x_2025)"
"(unsafe-vector-set!"
" A_1941"
"(unsafe-fx+ Blo_2023 1)"
" y_2026)))))"
"(if(unsafe-fx< n_2024 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" Blo_2023"
"(unsafe-vector-ref A_1941 Alo_2022))"
"((letrec-values(((iloop_2027)"
"(lambda(i_2028)"
"(if(unsafe-fx< i_2028 n_2024)"
"(let-values()"
"(let-values(((ref-i_2029)"
"(unsafe-vector-ref"
" A_1941"
"(unsafe-fx+"
" Alo_2022"
" i_2028))))"
"((letrec-values(((jloop_2030)"
"(lambda(j_2031)"
"(let-values(((ref-j-1_2032)"
"(unsafe-vector-ref"
" A_1941"
"(unsafe-fx-"
" j_2031"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_2023"
" j_2031)"
"(if key_1944"
"(less-than?_1942"
"(key_1944"
" ref-i_2029)"
"(key_1944"
" ref-j-1_2032))"
"(less-than?_1942"
" ref-i_2029"
" ref-j-1_2032))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" j_2031"
" ref-j-1_2032)"
"(jloop_2030"
"(unsafe-fx-"
" j_2031"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" j_2031"
" ref-i_2029)"
"(iloop_2027"
"(unsafe-fx+"
" i_2028"
" 1))))))))"
" jloop_2030)"
"(unsafe-fx+ Blo_2023 i_2028))))"
"(void)))))"
" iloop_2027)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_2033)(unsafe-fxrshift n_2024 1)))"
"(let-values(((n/2+_2034)(unsafe-fx- n_2024 n/2-_2033)))"
"(let-values(((Amid1_2035)"
"(unsafe-fx+ Alo_2022 n/2-_2033))"
"((Amid2_2036)"
"(unsafe-fx+ Alo_2022 n/2+_2034))"
"((Bmid1_2037)"
"(unsafe-fx+ Blo_2023 n/2-_2033)))"
"(begin"
"(copying-mergesort_2021"
" Amid1_2035"
" Bmid1_2037"
" n/2+_2034)"
"(copying-mergesort_2021"
" Alo_2022"
" Amid2_2036"
" n/2-_2033)"
"(let-values(((b2_2038)"
"(unsafe-fx+ Blo_2023 n_2024)))"
"((letrec-values(((loop_2039)"
"(lambda(a1_2040 b1_2041 c1_2042)"
"(let-values(((x_2043)"
"(unsafe-vector-ref"
" A_1941"
" a1_2040))"
"((y_2044)"
"(unsafe-vector-ref"
" A_1941"
" b1_2041)))"
"(if(not"
"(if key_1944"
"(less-than?_1942"
"(key_1944 y_2044)"
"(key_1944 x_2043))"
"(less-than?_1942"
" y_2044"
" x_2043)))"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" c1_2042"
" x_2043)"
"(let-values(((a1_2045)"
"(unsafe-fx+"
" a1_2040"
" 1))"
"((c1_2046)"
"(unsafe-fx+"
" c1_2042"
" 1)))"
"(if(unsafe-fx<"
" c1_2046"
" b1_2041)"
"(let-values()"
"(loop_2039"
" a1_2045"
" b1_2041"
" c1_2046))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" c1_2042"
" y_2044)"
"(let-values(((b1_2047)"
"(unsafe-fx+"
" b1_2041"
" 1))"
"((c1_2048)"
"(unsafe-fx+"
" c1_2042"
" 1)))"
"(if(unsafe-fx<="
" b2_2038"
" b1_2047)"
"((letrec-values(((loop_2049)"
"(lambda(a1_2050"
" c1_2051)"
"(if(unsafe-fx<"
" c1_2051"
" b1_2047)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" c1_2051"
"(unsafe-vector-ref"
" A_1941"
" a1_2050))"
"(loop_2049"
"(unsafe-fx+"
" a1_2050"
" 1)"
"(unsafe-fx+"
" c1_2051"
" 1))))"
"(void)))))"
" loop_2049)"
" a1_2040"
" c1_2048)"
"(loop_2039"
" a1_2040"
" b1_2047"
" c1_2048)))))))))"
" loop_2039)"
" Amid2_2036"
" Bmid1_2037"
" Blo_2023)))))))))))))"
"(let-values(((Alo_2052) 0)"
"((Amid1_2053) n/2-_1984)"
"((Amid2_2054) n/2+_1985)"
"((Ahi_2055) n_1943)"
"((B1lo_2056) n_1943))"
"(begin"
"(copying-mergesort_2021 Amid1_2053 B1lo_2056 n/2+_1985)"
"(if(zero? n/2-_1984)"
"(void)"
"(let-values()(copying-mergesort_2021 Alo_2052 Amid2_2054 n/2-_1984)))"
"(let-values(((b2_2057) Ahi_2055))"
"((letrec-values(((loop_2058)"
"(lambda(a1_2059 b1_2060 c1_2061)"
"(let-values(((x_2062)(unsafe-vector-ref A_1941 a1_2059))"
"((y_2063)(unsafe-vector-ref A_1941 b1_2060)))"
"(if(if key_1944"
"(less-than?_1942"
"(key_1944 x_2062)"
"(key_1944 y_2063))"
"(less-than?_1942 x_2062 y_2063))"
"(begin"
"(unsafe-vector-set! A_1941 c1_2061 x_2062)"
"(let-values(((a1_2064)(unsafe-fx+ a1_2059 1))"
"((c1_2065)(unsafe-fx+ c1_2061 1)))"
"(if(unsafe-fx< c1_2065 b1_2060)"
"(let-values()"
"(loop_2058 a1_2064 b1_2060 c1_2065))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_1941 c1_2061 y_2063)"
"(let-values(((b1_2066)(unsafe-fx+ b1_2060 1))"
"((c1_2067)(unsafe-fx+ c1_2061 1)))"
"(if(unsafe-fx<= b2_2057 b1_2066)"
"((letrec-values(((loop_2068)"
"(lambda(a1_2069 c1_2070)"
"(if(unsafe-fx<"
" c1_2070"
" b1_2066)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1941"
" c1_2070"
"(unsafe-vector-ref"
" A_1941"
" a1_2069))"
"(loop_2068"
"(unsafe-fx+ a1_2069 1)"
"(unsafe-fx+"
" c1_2070"
" 1))))"
"(void)))))"
" loop_2068)"
" a1_2059"
" c1_2067)"
"(loop_2058 a1_2059 b1_2066 c1_2067)))))))))"
" loop_2058)"
" B1lo_2056"
" Amid2_2054"
" Alo_2052))))))))))))"
"(values"
"(case-lambda"
"((lst_2071 less-than?_2072)"
"(let-values(((n_2073)(length lst_2071)))"
"(let-values()"
"(if(unsafe-fx= n_2073 0)"
"(let-values() lst_2071)"
"(if((letrec-values(((loop_2097)"
"(lambda(last_2098 next_2099)"
"(let-values(((or-part_2100)(null? next_2099)))"
"(if or-part_2100"
" or-part_2100"
"(if(not(less-than?_2072(unsafe-car next_2099) last_2098))"
"(loop_2097(unsafe-car next_2099)(unsafe-cdr next_2099))"
" #f))))))"
" loop_2097)"
"(car lst_2071)"
"(cdr lst_2071))"
"(let-values() lst_2071)"
"(if(unsafe-fx<= n_2073 3)"
"(let-values()"
"(if(unsafe-fx= n_2073 1)"
"(let-values() lst_2071)"
"(if(unsafe-fx= n_2073 2)"
"(let-values()(list(cadr lst_2071)(car lst_2071)))"
"(let-values()"
"(let-values(((a_2101)(car lst_2071))"
"((b_2102)(cadr lst_2071))"
"((c_2103)(caddr lst_2071)))"
"(if(less-than?_2072 b_2102 a_2101)"
"(if(less-than?_2072 c_2103 b_2102)"
"(list c_2103 b_2102 a_2101)"
"(if(less-than?_2072 c_2103 a_2101)"
"(list b_2102 c_2103 a_2101)"
"(list b_2102 a_2101 c_2103)))"
"(if(less-than?_2072 c_2103 a_2101)"
"(list c_2103 a_2101 b_2102)"
"(list a_2101 c_2103 b_2102))))))))"
"(let-values()"
"(let-values(((vec_2104)(make-vector(+ n_2073(ceiling(/ n_2073 2))))))"
"(begin"
"((letrec-values(((loop_2105)"
"(lambda(i_2106 lst_2107)"
"(if(pair? lst_2107)"
"(let-values()"
"(begin"
"(vector-set! vec_2104 i_2106(car lst_2107))"
"(loop_2105(add1 i_2106)(cdr lst_2107))))"
"(void)))))"
" loop_2105)"
" 0"
" lst_2071)"
"(let-values(((precomp_2108)(hash-ref precompiled-sorts_49 less-than?_2072 #f)))"
"(if precomp_2108"
"(precomp_2108 vec_2104 n_2073)"
"(generic-sort_50 vec_2104 less-than?_2072 n_2073)))"
"((letrec-values(((loop_2109)"
"(lambda(i_2110 r_2111)"
"(let-values(((i_2112)(sub1 i_2110)))"
"(if(< i_2112 0)"
" r_2111"
"(loop_2109 i_2112(cons(vector-ref vec_2104 i_2112) r_2111)))))))"
" loop_2109)"
" n_2073"
" '()))))))))))"
"((lst_2113 less-than?_2114 getkey_2115)"
"(if(if getkey_2115(not(eq? values getkey_2115)) #f)"
"(sort lst_2113 less-than?_2114 getkey_2115 #f)"
"(sort lst_2113 less-than?_2114)))"
"((lst_2116 less-than?_2117 getkey_2118 cache-keys?_2119)"
"(if(if getkey_2118(not(eq? values getkey_2118)) #f)"
"(let-values(((n_2120)(length lst_2116)))"
"(let-values()"
"(if(unsafe-fx= n_2120 0)"
"(let-values() lst_2116)"
"(if cache-keys?_2119"
"(let-values()"
"(let-values(((vec_2135)(make-vector(+ n_2120(ceiling(/ n_2120 2))))))"
"(begin"
"((letrec-values(((loop_2136)"
"(lambda(i_2137 lst_2138)"
"(if(pair? lst_2138)"
"(let-values()"
"(let-values(((x_2139)(car lst_2138)))"
"(begin"
"(unsafe-vector-set!"
" vec_2135"
" i_2137"
"(cons(getkey_2118 x_2139) x_2139))"
"(loop_2136(unsafe-fx+ i_2137 1)(cdr lst_2138)))))"
"(void)))))"
" loop_2136)"
" 0"
" lst_2116)"
"(generic-sort/key_51 vec_2135 less-than?_2117 n_2120 unsafe-car)"
"((letrec-values(((loop_2140)"
"(lambda(i_2141 r_2142)"
"(let-values(((i_2143)(unsafe-fx- i_2141 1)))"
"(if(unsafe-fx< i_2143 0)"
" r_2142"
"(loop_2140"
" i_2143"
"(cons"
"(unsafe-cdr(unsafe-vector-ref vec_2135 i_2143))"
" r_2142)))))))"
" loop_2140)"
" n_2120"
" '()))))"
"(if((letrec-values(((loop_2144)"
"(lambda(last_2145 next_2146)"
"(let-values(((or-part_2147)(null? next_2146)))"
"(if or-part_2147"
" or-part_2147"
"(if(not"
"(if getkey_2118"
"(less-than?_2117"
"(getkey_2118(unsafe-car next_2146))"
"(getkey_2118 last_2145))"
"(less-than?_2117(unsafe-car next_2146) last_2145)))"
"(loop_2144(unsafe-car next_2146)(unsafe-cdr next_2146))"
" #f))))))"
" loop_2144)"
"(car lst_2116)"
"(cdr lst_2116))"
"(let-values() lst_2116)"
"(if(unsafe-fx<= n_2120 3)"
"(let-values()"
"(if(unsafe-fx= n_2120 1)"
"(let-values() lst_2116)"
"(if(unsafe-fx= n_2120 2)"
"(let-values()(list(cadr lst_2116)(car lst_2116)))"
"(let-values()"
"(let-values(((a_2148)(car lst_2116))"
"((b_2149)(cadr lst_2116))"
"((c_2150)(caddr lst_2116)))"
"(if(if getkey_2118"
"(less-than?_2117(getkey_2118 b_2149)(getkey_2118 a_2148))"
"(less-than?_2117 b_2149 a_2148))"
"(if(if getkey_2118"
"(less-than?_2117(getkey_2118 c_2150)(getkey_2118 b_2149))"
"(less-than?_2117 c_2150 b_2149))"
"(list c_2150 b_2149 a_2148)"
"(if(if getkey_2118"
"(less-than?_2117(getkey_2118 c_2150)(getkey_2118 a_2148))"
"(less-than?_2117 c_2150 a_2148))"
"(list b_2149 c_2150 a_2148)"
"(list b_2149 a_2148 c_2150)))"
"(if(if getkey_2118"
"(less-than?_2117(getkey_2118 c_2150)(getkey_2118 a_2148))"
"(less-than?_2117 c_2150 a_2148))"
"(list c_2150 a_2148 b_2149)"
"(list a_2148 c_2150 b_2149))))))))"
"(let-values()"
"(let-values(((vec_2151)(make-vector(+ n_2120(ceiling(/ n_2120 2))))))"
"(begin"
"((letrec-values(((loop_2152)"
"(lambda(i_2153 lst_2154)"
"(if(pair? lst_2154)"
"(let-values()"
"(begin"
"(vector-set! vec_2151 i_2153(car lst_2154))"
"(loop_2152(add1 i_2153)(cdr lst_2154))))"
"(void)))))"
" loop_2152)"
" 0"
" lst_2116)"
"(generic-sort/key_51 vec_2151 less-than?_2117 n_2120 getkey_2118)"
"((letrec-values(((loop_2155)"
"(lambda(i_2156 r_2157)"
"(let-values(((i_2158)(sub1 i_2156)))"
"(if(< i_2158 0)"
" r_2157"
"(loop_2155"
" i_2158"
"(cons(vector-ref vec_2151 i_2158) r_2157)))))))"
" loop_2155)"
" n_2120"
" '()))))))))))"
"(sort lst_2116 less-than?_2117))))"
"(case-lambda"
"((vec_2159 less-than?_2160 start_2161 end_2162)"
"(let-values(((n_2163)(- end_2162 start_2161)))"
"(let-values(((dst-vec_2195)(make-vector n_2163)))"
"(let-values(((dst-start_2196) 0))"
"(begin"
"(if(unsafe-fx= n_2163 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_2203)"
"(lambda(prev-val_2204 next-index_2205)"
"(let-values(((or-part_2206)(unsafe-fx= next-index_2205 end_2162)))"
"(if or-part_2206"
" or-part_2206"
"(let-values(((next-val_2207)"
"(unsafe-vector-ref vec_2159 next-index_2205)))"
"(if(not(less-than?_2160 next-val_2207 prev-val_2204))"
"(loop_2203 next-val_2207(unsafe-fx+ next-index_2205 1))"
" #f)))))))"
" loop_2203)"
"(unsafe-vector-ref vec_2159 start_2161)"
"(unsafe-fx+ start_2161 1))"
"(let-values()"
"(let-values()(vector-copy! dst-vec_2195 dst-start_2196 vec_2159 start_2161 end_2162)))"
"(if(unsafe-fx<= n_2163 3)"
"(let-values()"
"(begin"
"(let-values()(vector-copy! dst-vec_2195 dst-start_2196 vec_2159 start_2161 end_2162))"
"(if(unsafe-fx= n_2163 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_2163 2)"
"(let-values()"
"(let-values(((tmp_2208)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 0)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 1)))"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 1) tmp_2208))))"
"(let-values()"
"(let-values(((a_2209)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 0)))"
"((b_2210)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 1)))"
"((c_2211)"
"(unsafe-vector-ref dst-vec_2195(unsafe-fx+ dst-start_2196 2))))"
"(if(less-than?_2160 b_2210 a_2209)"
"(let-values()"
"(if(less-than?_2160 c_2211 b_2210)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 0) c_2211)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 2)"
" a_2209)))"
"(if(less-than?_2160 c_2211 a_2209)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 0)"
" b_2210)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 1)"
" c_2211)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 2)"
" a_2209)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 0)"
" b_2210)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 1)"
" a_2209))))))"
"(if(less-than?_2160 c_2211 a_2209)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 0) c_2211)"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 1) a_2209)"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 2) b_2210)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2195(unsafe-fx+ dst-start_2196 1) c_2211)"
"(unsafe-vector-set!"
" dst-vec_2195"
"(unsafe-fx+ dst-start_2196 2)"
" b_2210)))))))))))"
"(let-values()"
"(let-values(((work-vec_2212)(make-vector(+ n_2163(ceiling(/ n_2163 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2212 0 vec_2159 start_2161 end_2162)"
"(let-values(((precomp_2213)(hash-ref precompiled-sorts_49 less-than?_2160 #f)))"
"(if precomp_2213"
"(precomp_2213 work-vec_2212 n_2163)"
"(generic-sort_50 work-vec_2212 less-than?_2160 n_2163)))"
"(vector-copy! dst-vec_2195 dst-start_2196 work-vec_2212 0 n_2163)))))))"
" dst-vec_2195)))))"
"((vec_2214 less-than?_2215 start_2216 end_2217 getkey_2218 cache-keys?_2219)"
"(if(if getkey_2218(not(eq? values getkey_2218)) #f)"
"(let-values(((n_2220)(- end_2217 start_2216)))"
"(let-values(((dst-vec_2252)(make-vector n_2220)))"
"(let-values(((dst-start_2253) 0))"
"(begin"
"(if(unsafe-fx= n_2220 0)"
"(let-values()(void))"
"(if cache-keys?_2219"
"(let-values()"
"(let-values(((work-vec_2254)(make-vector(+ n_2220(ceiling(/ n_2220 2))) #t)))"
"(begin"
"((letrec-values(((loop_2255)"
"(lambda(i_2256)"
"(if(unsafe-fx< i_2256 n_2220)"
"(let-values()"
"(begin"
"(let-values(((x_2257)"
"(unsafe-vector-ref"
" vec_2214"
"(unsafe-fx+ i_2256 start_2216))))"
"(unsafe-vector-set!"
" work-vec_2254"
" i_2256"
"(cons(getkey_2218 x_2257) x_2257)))"
"(loop_2255(unsafe-fx+ i_2256 1))))"
"(void)))))"
" loop_2255)"
" 0)"
"(generic-sort/key_51 work-vec_2254 less-than?_2215 n_2220 unsafe-car)"
"((letrec-values(((loop_2258)"
"(lambda(i_2259)"
"(if(unsafe-fx< i_2259 n_2220)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ i_2259 dst-start_2253)"
"(unsafe-cdr(unsafe-vector-ref work-vec_2254 i_2259)))"
"(loop_2258(unsafe-fx+ i_2259 1))))"
"(void)))))"
" loop_2258)"
" 0))))"
"(if((letrec-values(((loop_2260)"
"(lambda(prev-val_2261 next-index_2262)"
"(let-values(((or-part_2263)(unsafe-fx= next-index_2262 end_2217)))"
"(if or-part_2263"
" or-part_2263"
"(let-values(((next-val_2264)"
"(unsafe-vector-ref vec_2214 next-index_2262)))"
"(if(not"
"(if getkey_2218"
"(less-than?_2215"
"(getkey_2218 next-val_2264)"
"(getkey_2218 prev-val_2261))"
"(less-than?_2215 next-val_2264 prev-val_2261)))"
"(loop_2260 next-val_2264(unsafe-fx+ next-index_2262 1))"
" #f)))))))"
" loop_2260)"
"(unsafe-vector-ref vec_2214 start_2216)"
"(unsafe-fx+ start_2216 1))"
"(let-values()"
"(let-values()(vector-copy! dst-vec_2252 dst-start_2253 vec_2214 start_2216 end_2217)))"
"(if(unsafe-fx<= n_2220 3)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-copy! dst-vec_2252 dst-start_2253 vec_2214 start_2216 end_2217))"
"(if(unsafe-fx= n_2220 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_2220 2)"
"(let-values()"
"(let-values(((tmp_2265)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 1)))"
"(unsafe-vector-set! dst-vec_2252(unsafe-fx+ dst-start_2253 1) tmp_2265))))"
"(let-values()"
"(let-values(((a_2266)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 0)))"
"((b_2267)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 1)))"
"((c_2268)"
"(unsafe-vector-ref dst-vec_2252(unsafe-fx+ dst-start_2253 2))))"
"(if(if getkey_2218"
"(less-than?_2215(getkey_2218 b_2267)(getkey_2218 a_2266))"
"(less-than?_2215 b_2267 a_2266))"
"(let-values()"
"(if(if getkey_2218"
"(less-than?_2215(getkey_2218 c_2268)(getkey_2218 b_2267))"
"(less-than?_2215 c_2268 b_2267))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
" c_2268)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 2)"
" a_2266)))"
"(if(if getkey_2218"
"(less-than?_2215(getkey_2218 c_2268)(getkey_2218 a_2266))"
"(less-than?_2215 c_2268 a_2266))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
" b_2267)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 1)"
" c_2268)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 2)"
" a_2266)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
" b_2267)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 1)"
" a_2266))))))"
"(if(if getkey_2218"
"(less-than?_2215(getkey_2218 c_2268)(getkey_2218 a_2266))"
"(less-than?_2215 c_2268 a_2266))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 0)"
" c_2268)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 1)"
" a_2266)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 2)"
" b_2267)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 1)"
" c_2268)"
"(unsafe-vector-set!"
" dst-vec_2252"
"(unsafe-fx+ dst-start_2253 2)"
" b_2267)))))))))))"
"(let-values()"
"(let-values(((work-vec_2269)(make-vector(+ n_2220(ceiling(/ n_2220 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2269 0 vec_2214 start_2216 end_2217)"
"(generic-sort/key_51 work-vec_2269 less-than?_2215 n_2220 getkey_2218)"
"(vector-copy! dst-vec_2252 dst-start_2253 work-vec_2269 0 n_2220))))))))"
" dst-vec_2252))))"
"(vector-sort vec_2214 less-than?_2215 start_2216 end_2217))))"
"(case-lambda"
"((vec_2270 less-than?_2271 start_2272 end_2273)"
"(let-values(((n_2274)(- end_2273 start_2272)))"
"(let-values(((dst-vec_2306) vec_2270))"
"(let-values(((dst-start_2307) start_2272))"
"(begin"
"(if(unsafe-fx= n_2274 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_2314)"
"(lambda(prev-val_2315 next-index_2316)"
"(let-values(((or-part_2317)(unsafe-fx= next-index_2316 end_2273)))"
"(if or-part_2317"
" or-part_2317"
"(let-values(((next-val_2318)"
"(unsafe-vector-ref vec_2270 next-index_2316)))"
"(if(not(less-than?_2271 next-val_2318 prev-val_2315))"
"(loop_2314 next-val_2318(unsafe-fx+ next-index_2316 1))"
" #f)))))))"
" loop_2314)"
"(unsafe-vector-ref vec_2270 start_2272)"
"(unsafe-fx+ start_2272 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_2274 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_2274 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_2274 2)"
"(let-values()"
"(let-values(((tmp_2319)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 0)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 1)))"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 1) tmp_2319))))"
"(let-values()"
"(let-values(((a_2320)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 0)))"
"((b_2321)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 1)))"
"((c_2322)"
"(unsafe-vector-ref dst-vec_2306(unsafe-fx+ dst-start_2307 2))))"
"(if(less-than?_2271 b_2321 a_2320)"
"(let-values()"
"(if(less-than?_2271 c_2322 b_2321)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 0) c_2322)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 2)"
" a_2320)))"
"(if(less-than?_2271 c_2322 a_2320)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 0)"
" b_2321)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 1)"
" c_2322)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 2)"
" a_2320)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 0)"
" b_2321)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 1)"
" a_2320))))))"
"(if(less-than?_2271 c_2322 a_2320)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 0) c_2322)"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 1) a_2320)"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 2) b_2321)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2306(unsafe-fx+ dst-start_2307 1) c_2322)"
"(unsafe-vector-set!"
" dst-vec_2306"
"(unsafe-fx+ dst-start_2307 2)"
" b_2321)))))))))))"
"(let-values()"
"(let-values(((work-vec_2323)(make-vector(+ n_2274(ceiling(/ n_2274 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2323 0 vec_2270 start_2272 end_2273)"
"(let-values(((precomp_2324)(hash-ref precompiled-sorts_49 less-than?_2271 #f)))"
"(if precomp_2324"
"(precomp_2324 work-vec_2323 n_2274)"
"(generic-sort_50 work-vec_2323 less-than?_2271 n_2274)))"
"(vector-copy! dst-vec_2306 dst-start_2307 work-vec_2323 0 n_2274)))))))"
"(void))))))"
"((vec_2325 less-than?_2326 start_2327 end_2328 getkey_2329 cache-keys?_2330)"
"(if(if getkey_2329(not(eq? values getkey_2329)) #f)"
"(let-values(((n_2331)(- end_2328 start_2327)))"
"(let-values(((dst-vec_2363) vec_2325))"
"(let-values(((dst-start_2364) start_2327))"
"(begin"
"(if(unsafe-fx= n_2331 0)"
"(let-values()(void))"
"(if cache-keys?_2330"
"(let-values()"
"(let-values(((work-vec_2365)(make-vector(+ n_2331(ceiling(/ n_2331 2))) #t)))"
"(begin"
"((letrec-values(((loop_2366)"
"(lambda(i_2367)"
"(if(unsafe-fx< i_2367 n_2331)"
"(let-values()"
"(begin"
"(let-values(((x_2368)"
"(unsafe-vector-ref"
" vec_2325"
"(unsafe-fx+ i_2367 start_2327))))"
"(unsafe-vector-set!"
" work-vec_2365"
" i_2367"
"(cons(getkey_2329 x_2368) x_2368)))"
"(loop_2366(unsafe-fx+ i_2367 1))))"
"(void)))))"
" loop_2366)"
" 0)"
"(generic-sort/key_51 work-vec_2365 less-than?_2326 n_2331 unsafe-car)"
"((letrec-values(((loop_2369)"
"(lambda(i_2370)"
"(if(unsafe-fx< i_2370 n_2331)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ i_2370 dst-start_2364)"
"(unsafe-cdr(unsafe-vector-ref work-vec_2365 i_2370)))"
"(loop_2369(unsafe-fx+ i_2370 1))))"
"(void)))))"
" loop_2369)"
" 0))))"
"(if((letrec-values(((loop_2371)"
"(lambda(prev-val_2372 next-index_2373)"
"(let-values(((or-part_2374)(unsafe-fx= next-index_2373 end_2328)))"
"(if or-part_2374"
" or-part_2374"
"(let-values(((next-val_2375)"
"(unsafe-vector-ref vec_2325 next-index_2373)))"
"(if(not"
"(if getkey_2329"
"(less-than?_2326"
"(getkey_2329 next-val_2375)"
"(getkey_2329 prev-val_2372))"
"(less-than?_2326 next-val_2375 prev-val_2372)))"
"(loop_2371 next-val_2375(unsafe-fx+ next-index_2373 1))"
" #f)))))))"
" loop_2371)"
"(unsafe-vector-ref vec_2325 start_2327)"
"(unsafe-fx+ start_2327 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_2331 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_2331 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_2331 2)"
"(let-values()"
"(let-values(((tmp_2376)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 1)))"
"(unsafe-vector-set! dst-vec_2363(unsafe-fx+ dst-start_2364 1) tmp_2376))))"
"(let-values()"
"(let-values(((a_2377)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 0)))"
"((b_2378)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 1)))"
"((c_2379)"
"(unsafe-vector-ref dst-vec_2363(unsafe-fx+ dst-start_2364 2))))"
"(if(if getkey_2329"
"(less-than?_2326(getkey_2329 b_2378)(getkey_2329 a_2377))"
"(less-than?_2326 b_2378 a_2377))"
"(let-values()"
"(if(if getkey_2329"
"(less-than?_2326(getkey_2329 c_2379)(getkey_2329 b_2378))"
"(less-than?_2326 c_2379 b_2378))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
" c_2379)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 2)"
" a_2377)))"
"(if(if getkey_2329"
"(less-than?_2326(getkey_2329 c_2379)(getkey_2329 a_2377))"
"(less-than?_2326 c_2379 a_2377))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
" b_2378)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 1)"
" c_2379)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 2)"
" a_2377)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
" b_2378)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 1)"
" a_2377))))))"
"(if(if getkey_2329"
"(less-than?_2326(getkey_2329 c_2379)(getkey_2329 a_2377))"
"(less-than?_2326 c_2379 a_2377))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 0)"
" c_2379)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 1)"
" a_2377)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 2)"
" b_2378)))"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 1)"
" c_2379)"
"(unsafe-vector-set!"
" dst-vec_2363"
"(unsafe-fx+ dst-start_2364 2)"
" b_2378)))))))))))"
"(let-values()"
"(let-values(((work-vec_2380)(make-vector(+ n_2331(ceiling(/ n_2331 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2380 0 vec_2325 start_2327 end_2328)"
"(generic-sort/key_51 work-vec_2380 less-than?_2326 n_2331 getkey_2329)"
"(vector-copy! dst-vec_2363 dst-start_2364 work-vec_2380 0 n_2331))))))))"
"(void)))))"
"(vector-sort! vec_2325 less-than?_2326 start_2327 end_2328))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:do-sequence make-do-sequence do-sequence? do-sequence-ref do-sequence-set!)"
"(make-struct-type 'sequence #f 1 0 #f))"
"(define-values"
"(prop:stream stream-via-prop? stream-ref)"
"(make-struct-type-property"
" 'stream"
"(lambda(v_2722 si_2723)"
"(begin"
"(if(if(vector? v_2722)"
"(if(= 3(vector-length v_2722))"
"(if(procedure?(vector-ref v_2722 0))"
"(if(procedure-arity-includes?(vector-ref v_2722 0) 1)"
"(if(procedure?(vector-ref v_2722 1))"
"(if(procedure-arity-includes?(vector-ref v_2722 1) 1)"
"(if(procedure?(vector-ref v_2722 2))(procedure-arity-includes?(vector-ref v_2722 2) 1) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:stream"
"(string-append"
"             \"(vector/c (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1))\")"
" v_2722)))"
"(vector->immutable-vector v_2722)))))"
"(define-values"
"(prop:gen-sequence sequence-via-prop? sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2724 si_2725)"
"(begin"
"(if(if(procedure? v_2724)(procedure-arity-includes? v_2724 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:sequence \"(procedure-arity-includes/c 1)\" v_2724)))"
" v_2724))))"
"(define-values"
"(prop:sequence :sequence? :sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2726 sinfo_2727)"
"(begin"
"(if(if(procedure? v_2726)(procedure-arity-includes? v_2726 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'sequence-property-guard \"(procedure-arity-includes/c 1)\" v_2726)))"
"(lambda(self_2728)"
"(let-values(((s_2729)(v_2726 self_2728)))"
"(begin"
"(if(sequence? s_2729)"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'sequence-generate"
"                  \"procedure (value of prop:sequence) produced a non-sequence: \""
" s_2729)))"
" s_2729)))))))"
"(define-values"
"(stream?)"
"(lambda(v_2730)"
"(let-values(((or-part_2731)(list? v_2730)))(if or-part_2731 or-part_2731(stream-via-prop? v_2730)))))"
"(define-values"
"(unsafe-stream-not-empty?)"
"(lambda(v_2732)"
"(if(null? v_2732)"
" #f"
"(let-values(((or-part_2733)(pair? v_2732)))"
"(if or-part_2733 or-part_2733(not((unsafe-vector-ref(stream-ref v_2732) 0) v_2732)))))))"
"(define-values"
"(unsafe-stream-first)"
"(lambda(v_2736)"
"(if(pair? v_2736)"
"(let-values()(car v_2736))"
"(let-values()((unsafe-vector-ref(stream-ref v_2736) 1) v_2736)))))"
"(define-values"
"(unsafe-stream-rest)"
"(lambda(v_2738)"
"(if(pair? v_2738)"
"(let-values()(cdr v_2738))"
"(let-values()"
"(let-values(((r_2739)((unsafe-vector-ref(stream-ref v_2738) 2) v_2738)))"
"(begin"
"(if(stream? r_2739)"
"(void)"
"              (let-values () (raise-mismatch-error 'stream-rest-guard \"result is not a stream: \" r_2739)))"
" r_2739))))))"
"(define-values"
"(sequence?)"
"(lambda(v_2741)"
"(let-values(((or-part_2742)(exact-nonnegative-integer? v_2741)))"
"(if or-part_2742"
" or-part_2742"
"(let-values(((or-part_2743)(do-sequence? v_2741)))"
"(if or-part_2743"
" or-part_2743"
"(let-values(((or-part_2744)(sequence-via-prop? v_2741)))"
"(if or-part_2744"
" or-part_2744"
"(let-values(((or-part_2745)(stream? v_2741)))"
"(if or-part_2745"
" or-part_2745"
"(let-values(((or-part_2746)(mpair? v_2741)))"
"(if or-part_2746"
" or-part_2746"
"(let-values(((or-part_2747)(vector? v_2741)))"
"(if or-part_2747"
" or-part_2747"
"(let-values(((or-part_2748)(flvector? v_2741)))"
"(if or-part_2748"
" or-part_2748"
"(let-values(((or-part_2749)(fxvector? v_2741)))"
"(if or-part_2749"
" or-part_2749"
"(let-values(((or-part_2750)(string? v_2741)))"
"(if or-part_2750"
" or-part_2750"
"(let-values(((or-part_2751)(bytes? v_2741)))"
"(if or-part_2751"
" or-part_2751"
"(let-values(((or-part_2752)(input-port? v_2741)))"
"(if or-part_2752"
" or-part_2752"
"(let-values(((or-part_2753)(hash? v_2741)))"
"(if or-part_2753"
" or-part_2753"
"(if(:sequence? v_2741)"
"(not(struct-type? v_2741))"
" #f)))))))))))))))))))))))))))"
"(define-values"
"(make-sequence)"
"(lambda(who_2754 v_2755)"
"(if(exact-nonnegative-integer? v_2755)"
"(let-values()(:integer-gen v_2755))"
"(if(do-sequence? v_2755)"
"(let-values()"
"(call-with-values"
"(lambda()((do-sequence-ref v_2755 0)))"
"(case-lambda"
"((pos->vals_2756 pos-next_2757 init_2758 pos-cont?_2759 val-cont?_2760 all-cont?_2761)"
"(values pos->vals_2756 #f pos-next_2757 init_2758 pos-cont?_2759 val-cont?_2760 all-cont?_2761))"
"((pos->vals_2762 pre-pos-next_2763 pos-next_2764 init_2765 pos-cont?_2766 val-cont?_2767 all-cont?_2768)"
"(values"
" pos->vals_2762"
" pre-pos-next_2763"
" pos-next_2764"
" init_2765"
" pos-cont?_2766"
" val-cont?_2767"
" all-cont?_2768)))))"
"(if(mpair? v_2755)"
"(let-values()(:mlist-gen v_2755))"
"(if(list? v_2755)"
"(let-values()(:list-gen v_2755))"
"(if(vector? v_2755)"
"(let-values()(:vector-gen v_2755 0(vector-length v_2755) 1))"
"(if(flvector? v_2755)"
"(let-values()(:flvector-gen v_2755 0(flvector-length v_2755) 1))"
"(if(fxvector? v_2755)"
"(let-values()(:fxvector-gen v_2755 0(fxvector-length v_2755) 1))"
"(if(string? v_2755)"
"(let-values()(:string-gen v_2755 0(string-length v_2755) 1))"
"(if(bytes? v_2755)"
"(let-values()(:bytes-gen v_2755 0(bytes-length v_2755) 1))"
"(if(input-port? v_2755)"
"(let-values()(:input-port-gen v_2755))"
"(if(hash? v_2755)"
"(let-values()(:hash-gen v_2755 hash-iterate-key+value hash-iterate-first hash-iterate-next))"
"(if(sequence-via-prop? v_2755)"
"(let-values()((sequence-ref v_2755) v_2755))"
"(if(:sequence? v_2755)"
"(let-values()(make-sequence who_2754((:sequence-ref v_2755) v_2755)))"
"(if(stream? v_2755)"
"(let-values()(:stream-gen v_2755))"
"(let-values()"
"(raise"
"(exn:fail:contract"
"(format"
"                                     \"for: expected a sequence for ~a, got something else: ~v\""
"(if(= 1(length who_2754))(car who_2754) who_2754)"
" v_2755)"
"(current-continuation-marks))))))))))))))))))))"
"(define-values"
"(struct:range make-range range? range-ref range-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2769)"
"(let-values(((cont?_2770)(range-ref v_2769 2)))(if cont?_2770(not(cont?_2770(range-ref v_2769 0))) #f)))"
"(lambda(v_2771)(range-ref v_2771 0))"
"(lambda(v_2772)"
"(make-range((range-ref v_2772 1)(range-ref v_2772 0))(range-ref v_2772 1)(range-ref v_2772 2)))))"
"(cons"
" prop:gen-sequence"
"(lambda(v_2773)(values values #f(range-ref v_2773 1)(range-ref v_2773 0)(range-ref v_2773 2) #f #f))))))"
"(define-values"
"(in-range)"
"(case-lambda"
"((b_2774)(in-range 0 b_2774 1))"
"((a_2775 b_2776)(in-range a_2775 b_2776 1))"
"((a_2777 b_2778 step_2779)"
"(begin"
"      (if (real? a_2777) (void) (let-values () (raise-argument-error 'in-range \"real?\" a_2777)))"
"      (if (real? b_2778) (void) (let-values () (raise-argument-error 'in-range \"real?\" b_2778)))"
"      (if (real? step_2779) (void) (let-values () (raise-argument-error 'in-range \"real?\" step_2779)))"
"(let-values(((cont?_2780)"
"(if(>= step_2779 0)(lambda(x_2781)(< x_2781 b_2778))(lambda(x_2782)(> x_2782 b_2778)))))"
"(let-values(((inc_2783)(lambda(x_2784)(+ x_2784 step_2779))))(make-range a_2777 inc_2783 cont?_2780)))))))"
"(define-values(:integer-gen)(lambda(v_2785)(values values #f add1 0(lambda(i_2786)(< i_2786 v_2785)) #f #f)))"
"(define-values"
"(in-naturals)"
"(case-lambda"
"(()(in-naturals 0))"
"((n_2787)"
"(begin"
"(if(if(integer? n_2787)(if(exact? n_2787)(>= n_2787 0) #f) #f)"
"(void)"
"        (let-values () (raise-argument-error 'in-naturals \"exact-nonnegative-integer?\" n_2787)))"
"(make-range n_2787 add1 #f)))))"
"(define-values"
"(struct:list-stream make-list-stream list-stream? list-stream-ref list-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2788)(not(pair?(list-stream-ref v_2788 0))))"
"(lambda(v_2789)(car(list-stream-ref v_2789 0)))"
"(lambda(v_2790)(make-list-stream(cdr(list-stream-ref v_2790 0))))))"
"(cons prop:gen-sequence(lambda(v_2791)(values car cdr values(list-stream-ref v_2791 0) pair? #f #f))))))"
"(define-values"
"(in-list)"
"(lambda(l_2792)"
"(begin"
"      (if (list? l_2792) (void) (let-values () (raise-argument-error 'in-list \"list?\" l_2792)))"
"(make-list-stream l_2792))))"
"(define-values(:list-gen)(lambda(l_2793)(values car cdr values l_2793 pair? #f #f)))"
"(define-values(:mlist-gen)(lambda(l_2795)(values mcar #f mcdr l_2795 mpair? #f #f)))"
"(define-values"
"(:input-port-gen)"
"(lambda(p_2797)(values read-byte #f values p_2797 #f(lambda(x_2798)(not(eof-object? x_2798))) #f)))"
"(define-values"
"(:stream-gen)"
"(lambda(l_2816)(values unsafe-stream-first unsafe-stream-rest values l_2816 unsafe-stream-not-empty? #f #f)))"
"(define-values"
"(:hash-gen)"
"(lambda(ht_2817 -get_2818 -first_2819 -next_2820)"
"(values"
"(lambda(pos_2821)(-get_2818 ht_2817 pos_2821))"
" #f"
"(lambda(pos_2822)(-next_2820 ht_2817 pos_2822))"
"(-first_2819 ht_2817)"
"(lambda(pos_2823) pos_2823)"
" #f"
" #f)))"
"(define-values"
"(default-in-hash)"
"(lambda(ht_2826)"
"(begin"
"(if((lambda(ht_2827)(hash? ht_2827)) ht_2826)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash \"hash?\" ht_2826)))"
"(make-do-sequence(lambda()(:hash-gen ht_2826 hash-iterate-key+value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash)"
"(lambda(ht_2830)"
"(begin"
"(if((lambda(ht_2831)(if(hash? ht_2831)(immutable? ht_2831) #f)) ht_2830)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash \"(and/c hash? immutable?)\" ht_2830)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2830"
" unsafe-immutable-hash-iterate-key+value"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-keys)"
"(lambda(ht_2834)"
"(begin"
"(if((lambda(ht_2835)(hash? ht_2835)) ht_2834)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-keys \"hash?\" ht_2834)))"
"(make-do-sequence(lambda()(:hash-gen ht_2834 hash-iterate-key hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash-keys)"
"(lambda(ht_2838)"
"(begin"
"(if((lambda(ht_2839)(if(hash? ht_2839)(immutable? ht_2839) #f)) ht_2838)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash-keys \"(and/c hash? immutable?)\" ht_2838)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2838"
" unsafe-immutable-hash-iterate-key"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-values)"
"(lambda(ht_2842)"
"(begin"
"(if((lambda(ht_2843)(hash? ht_2843)) ht_2842)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-values \"hash?\" ht_2842)))"
"(make-do-sequence(lambda()(:hash-gen ht_2842 hash-iterate-value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(check-ranges)"
"(lambda(who_2858 vec_2859 start_2860 stop_2861 step_2862 len_2863)"
"(begin"
"(if(if(exact-nonnegative-integer? start_2860)"
"(let-values(((or-part_2864)(< start_2860 len_2863)))"
"(if or-part_2864 or-part_2864(= len_2863 start_2860 stop_2861)))"
" #f)"
"(void)"
"        (let-values () (raise-range-error who_2858 \"vector\" \"starting \" start_2860 vec_2859 0 (sub1 len_2863))))"
"(if(if(exact-integer? stop_2861)(if(<= -1 stop_2861)(<= stop_2861 len_2863) #f) #f)"
"(void)"
"        (let-values () (raise-range-error who_2858 \"vector\" \"stopping \" stop_2861 vec_2859 -1 len_2863)))"
"(if(if(exact-integer? step_2862)(not(zero? step_2862)) #f)"
"(void)"
"        (let-values () (raise-argument-error who_2858 \"(and/c exact-integer? (not/c zero?))\" step_2862)))"
"(if(if(< start_2860 stop_2861)(< step_2862 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2858"
"           \"starting index less than stopping index, but given a negative step\""
"           \"starting index\""
" start_2860"
"           \"stopping index\""
" stop_2861"
"           \"step\""
" step_2862))"
"(void))"
"(if(if(< stop_2861 start_2860)(> step_2862 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2858"
"           \"starting index more than stopping index, but given a positive step\""
"           \"starting index\""
" start_2860"
"           \"stopping index\""
" stop_2861"
"           \"step\""
" step_2862))"
"(void)))))"
"(define-values"
"(normalise-inputs)"
"(lambda(who_2865 type-name_2866 vector?_2867 unsafe-vector-length_2868 vec_2869 start_2870 stop_2871 step_2872)"
"(begin"
"(if(vector?_2867 vec_2869)(void)(let-values()(raise-argument-error who_2865 type-name_2866 vec_2869)))"
"(let-values(((len_2873)(unsafe-vector-length_2868 vec_2869)))"
"(let-values(((stop*_2874)(if stop_2871 stop_2871 len_2873)))"
"(begin"
"(check-ranges who_2865 vec_2869 start_2870 stop*_2874 step_2872 len_2873)"
"(values vec_2869 start_2870 stop*_2874 step_2872)))))))"
"(define-values"
"(:vector-gen)"
"(lambda(v_2875 start_2876 stop_2877 step_2878)"
"(values"
"(lambda(i_2879)(unsafe-vector-ref v_2875 i_2879))"
" #f"
"(if(= step_2878 1) add1(lambda(i_2880)(+ i_2880 step_2878)))"
" start_2876"
"(if(> step_2878 0)(lambda(i_2881)(< i_2881 stop_2877))(lambda(i_2882)(> i_2882 stop_2877)))"
" #f"
" #f)))"
"(define-values"
"(in-vector)"
"(case-lambda"
"((v_2883)(in-vector v_2883 0 #f 1))"
"((v_2884 start_2885)(in-vector v_2884 start_2885 #f 1))"
"((v_2886 start_2887 stop_2888)(in-vector v_2886 start_2887 stop_2888 1))"
"((v_2889 start_2890 stop_2891 step_2892)"
"(let-values(((v_2893 start_2894 stop_2895 step_2896)"
"                  (normalise-inputs 'in-vector \"vector\" vector? vector-length v_2889 start_2890 stop_2891 step_2892)))"
"(make-do-sequence(lambda()(:vector-gen v_2893 start_2894 stop_2895 step_2896)))))))"
"(define-values"
"(:string-gen)"
"(lambda(v_2897 start_2898 stop_2899 step_2900)"
"(values"
"(lambda(i_2901)(string-ref v_2897 i_2901))"
" #f"
"(if(= step_2900 1) add1(lambda(i_2902)(+ i_2902 step_2900)))"
" start_2898"
"(if(> step_2900 0)(lambda(i_2903)(< i_2903 stop_2899))(lambda(i_2904)(> i_2904 stop_2899)))"
" #f"
" #f)))"
"(define-values"
"(in-string)"
"(case-lambda"
"((v_2905)(in-string v_2905 0 #f 1))"
"((v_2906 start_2907)(in-string v_2906 start_2907 #f 1))"
"((v_2908 start_2909 stop_2910)(in-string v_2908 start_2909 stop_2910 1))"
"((v_2911 start_2912 stop_2913 step_2914)"
"(let-values(((v_2915 start_2916 stop_2917 step_2918)"
"                  (normalise-inputs 'in-string \"string\" string? string-length v_2911 start_2912 stop_2913 step_2914)))"
"(make-do-sequence(lambda()(:string-gen v_2915 start_2916 stop_2917 step_2918)))))))"
"(define-values"
"(:bytes-gen)"
"(lambda(v_2919 start_2920 stop_2921 step_2922)"
"(values"
"(lambda(i_2923)(unsafe-bytes-ref v_2919 i_2923))"
" #f"
"(if(= step_2922 1) add1(lambda(i_2924)(+ i_2924 step_2922)))"
" start_2920"
"(if(> step_2922 0)(lambda(i_2925)(< i_2925 stop_2921))(lambda(i_2926)(> i_2926 stop_2921)))"
" #f"
" #f)))"
"(define-values"
"(in-bytes)"
"(case-lambda"
"((v_2927)(in-bytes v_2927 0 #f 1))"
"((v_2928 start_2929)(in-bytes v_2928 start_2929 #f 1))"
"((v_2930 start_2931 stop_2932)(in-bytes v_2930 start_2931 stop_2932 1))"
"((v_2933 start_2934 stop_2935 step_2936)"
"(let-values(((v_2937 start_2938 stop_2939 step_2940)"
"                  (normalise-inputs 'in-bytes \"bytes\" bytes? bytes-length v_2933 start_2934 stop_2935 step_2936)))"
"(make-do-sequence(lambda()(:bytes-gen v_2937 start_2938 stop_2939 step_2940)))))))"
"(define-values"
"(:flvector-gen)"
"(lambda(v_2941 start_2942 stop_2943 step_2944)"
"(values"
"(lambda(i_2945)(unsafe-flvector-ref v_2941 i_2945))"
" #f"
"(if(= step_2944 1) add1(lambda(i_2946)(+ i_2946 step_2944)))"
" start_2942"
"(if(> step_2944 0)(lambda(i_2947)(< i_2947 stop_2943))(lambda(i_2948)(> i_2948 stop_2943)))"
" #f"
" #f)))"
"(define-values"
"(:fxvector-gen)"
"(lambda(v_2949 start_2950 stop_2951 step_2952)"
"(values"
"(lambda(i_2953)(unsafe-fxvector-ref v_2949 i_2953))"
" #f"
"(if(= step_2952 1) add1(lambda(i_2954)(+ i_2954 step_2952)))"
" start_2950"
"(if(> step_2952 0)(lambda(i_2955)(< i_2955 stop_2951))(lambda(i_2956)(> i_2956 stop_2951)))"
" #f"
" #f)))"
"(define-values"
"(in-value)"
"(lambda(v_2998)"
"(make-do-sequence"
"(lambda()(values(lambda(pos_2999) v_2998)(lambda(pos_3000) #f) #t(lambda(pos_3001) pos_3001) #f #f)))))"
"(define-values"
"(struct:do-stream make-do-stream do-stream? do-stream-ref do-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_3138)((do-stream-ref v_3138 0)))"
"(lambda(v_3139)((do-stream-ref v_3139 1)))"
"(lambda(v_3140)((do-stream-ref v_3140 2))))))))"
"(define-values"
"(grow-vector)"
"(lambda(vec_3186)"
"(let-values(((n_3187)(vector-length vec_3186)))"
"(let-values(((new-vec_3188)(make-vector(* 2 n_3187))))"
"(begin(vector-copy! new-vec_3188 0 vec_3186 0 n_3187) new-vec_3188)))))"
"(define-values"
"(shrink-vector)"
"(lambda(vec_3189 i_3190)"
"(let-values(((new-vec_3191)(make-vector i_3190)))"
"(begin(vector-copy! new-vec_3191 0 vec_3189 0 i_3190) new-vec_3191))))"
"(void)"
"(void)"
"(define-values"
"(map2)"
"(let-values(((map_1)"
"(case-lambda"
"((f_2 l_3)"
"(if(if(procedure? f_2)(if(procedure-arity-includes? f_2 1)(list? l_3) #f) #f)"
"((letrec-values(((loop_4)"
"(lambda(l_5)"
"(if(null? l_5)"
"(let-values() null)"
"(let-values()"
"(let-values(((r_6)(cdr l_5)))(cons(f_2(car l_5))(loop_4 r_6))))))))"
" loop_4)"
" l_3)"
"(map f_2 l_3)))"
"((f_7 l1_8 l2_9)"
"(if(if(procedure? f_7)"
"(if(procedure-arity-includes? f_7 2)"
"(if(list? l1_8)(if(list? l2_9)(=(length l1_8)(length l2_9)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_10)"
"(lambda(l1_11 l2_12)"
"(if(null? l1_11)"
"(let-values() null)"
"(let-values()"
"(let-values(((r1_13)(cdr l1_11))((r2_14)(cdr l2_12)))"
"(cons(f_7(car l1_11)(car l2_12))(loop_10 r1_13 r2_14))))))))"
" loop_10)"
" l1_8"
" l2_9)"
"(map f_7 l1_8 l2_9)))"
"((f_15 l_16 . args_17)(apply map f_15 l_16 args_17)))))"
" map_1))"
"(define-values"
"(for-each2)"
"(let-values(((for-each_18)"
"(case-lambda"
"((f_19 l_20)"
"(if(if(procedure? f_19)(if(procedure-arity-includes? f_19 1)(list? l_20) #f) #f)"
"((letrec-values(((loop_21)"
"(lambda(l_22)"
"(if(null? l_22)"
"(let-values()(void))"
"(let-values()"
"(let-values(((r_23)(cdr l_22)))"
"(begin(f_19(car l_22))(loop_21 r_23))))))))"
" loop_21)"
" l_20)"
"(for-each f_19 l_20)))"
"((f_24 l1_25 l2_26)"
"(if(if(procedure? f_24)"
"(if(procedure-arity-includes? f_24 2)"
"(if(list? l1_25)(if(list? l2_26)(=(length l1_25)(length l2_26)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_27)"
"(lambda(l1_28 l2_29)"
"(if(null? l1_28)"
"(let-values()(void))"
"(let-values()"
"(let-values(((r1_30)(cdr l1_28))((r2_31)(cdr l2_29)))"
"(begin(f_24(car l1_28)(car l2_29))(loop_27 r1_30 r2_31))))))))"
" loop_27)"
" l1_25"
" l2_26)"
"(for-each f_24 l1_25 l2_26)))"
"((f_32 l_33 . args_34)(apply for-each f_32 l_33 args_34)))))"
" for-each_18))"
"(define-values"
"(andmap2)"
"(let-values(((andmap_35)"
"(case-lambda"
"((f_36 l_37)"
"(if(if(procedure? f_36)(if(procedure-arity-includes? f_36 1)(list? l_37) #f) #f)"
"(if(null? l_37)"
" #t"
"((letrec-values(((loop_38)"
"(lambda(l_39)"
"(if(null?(cdr l_39))"
"(let-values()(f_36(car l_39)))"
"(let-values()"
"(let-values(((r_40)(cdr l_39)))"
"(if(f_36(car l_39))(loop_38 r_40) #f)))))))"
" loop_38)"
" l_37))"
"(andmap f_36 l_37)))"
"((f_41 l1_42 l2_43)"
"(if(if(procedure? f_41)"
"(if(procedure-arity-includes? f_41 2)"
"(if(list? l1_42)(if(list? l2_43)(=(length l1_42)(length l2_43)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_42)"
" #t"
"((letrec-values(((loop_44)"
"(lambda(l1_45 l2_46)"
"(if(null?(cdr l1_45))"
"(let-values()(f_41(car l1_45)(car l2_46)))"
"(let-values()"
"(let-values(((r1_47)(cdr l1_45))((r2_48)(cdr l2_46)))"
"(if(f_41(car l1_45)(car l2_46))(loop_44 r1_47 r2_48) #f)))))))"
" loop_44)"
" l1_42"
" l2_43))"
"(andmap f_41 l1_42 l2_43)))"
"((f_49 l_50 . args_51)(apply andmap f_49 l_50 args_51)))))"
" andmap_35))"
"(define-values"
"(ormap2)"
"(let-values(((ormap_52)"
"(case-lambda"
"((f_53 l_54)"
"(if(if(procedure? f_53)(if(procedure-arity-includes? f_53 1)(list? l_54) #f) #f)"
"(if(null? l_54)"
" #f"
"((letrec-values(((loop_55)"
"(lambda(l_56)"
"(if(null?(cdr l_56))"
"(let-values()(f_53(car l_56)))"
"(let-values()"
"(let-values(((r_57)(cdr l_56)))"
"(let-values(((or-part_58)(f_53(car l_56))))"
"(if or-part_58 or-part_58(loop_55 r_57)))))))))"
" loop_55)"
" l_54))"
"(ormap f_53 l_54)))"
"((f_59 l1_60 l2_61)"
"(if(if(procedure? f_59)"
"(if(procedure-arity-includes? f_59 2)"
"(if(list? l1_60)(if(list? l2_61)(=(length l1_60)(length l2_61)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_60)"
" #f"
"((letrec-values(((loop_62)"
"(lambda(l1_63 l2_64)"
"(if(null?(cdr l1_63))"
"(let-values()(f_59(car l1_63)(car l2_64)))"
"(let-values()"
"(let-values(((r1_65)(cdr l1_63))((r2_66)(cdr l2_64)))"
"(let-values(((or-part_67)(f_59(car l1_63)(car l2_64))))"
"(if or-part_67 or-part_67(loop_62 r1_65 r2_66)))))))))"
" loop_62)"
" l1_60"
" l2_61))"
"(ormap f_59 l1_60 l2_61)))"
"((f_68 l_69 . args_70)(apply ormap f_68 l_69 args_70)))))"
" ormap_52))"
"(void)"
"(void)"
"(void)"
"(void)"
"(define-values"
"(new-apply-proc)"
"(make-keyword-procedure"
"(lambda(kws_21 kw-args_22 proc_23 args_24 . rest_25)"
"(keyword-apply proc_23 kws_21 kw-args_22(apply list* args_24 rest_25)))"
" apply))"
"(define-values"
"(new-keyword-apply)"
"(make-keyword-procedure"
"(lambda(kws_26 kw-args_27 proc_28 orig-kws_29 orig-kw-args_30 args_31 . rest_32)"
"(let-values(((kws_33 kw-args_34)"
"((letrec-values(((loop_35)"
"(lambda(kws_36 kw-args_37 kws2_38 kw-args2_39 swapped?_40)"
"(if(null? kws_36)"
"(let-values()(values kws2_38 kw-args2_39))"
"(if(null? kws2_38)"
"(let-values()(values kws_36 kw-args_37))"
"(if(keyword<?(car kws_36)(car kws2_38))"
"(let-values()"
"(let-values(((res-kws_41 res-kw-args_42)"
"(loop_35"
"(cdr kws_36)"
"(cdr kw-args_37)"
" kws2_38"
" kw-args2_39"
" #f)))"
"(values"
"(cons(car kws_36) res-kws_41)"
"(cons(car kw-args_37) res-kw-args_42))))"
"(if swapped?_40"
"(let-values()"
"(raise-mismatch-error"
" 'keyword-apply"
"                                                  \"keyword duplicated in list and direct keyword arguments: \""
"(car kws_36)))"
"(let-values()(loop_35 kws2_38 kw-args2_39 kws_36 kw-args_37 #t)))))))))"
" loop_35)"
" kws_26"
" kw-args_27"
" orig-kws_29"
" orig-kw-args_30"
" #f)))"
"(keyword-apply proc_28 kws_33 kw-args_34(apply list* args_31 rest_32))))"
" keyword-apply))"
"(void)"
"(void)"
"(define-values"
"(hash-keys)"
"(lambda(h_1)"
"((letrec-values(((loop_2)"
"(lambda(pos_3)"
"(if pos_3(cons(hash-iterate-key h_1 pos_3)(loop_2(hash-iterate-next h_1 pos_3))) null))))"
" loop_2)"
"(hash-iterate-first h_1))))"
"(void)"
"(void)"
"(define-values"
"(sort7.1)"
"(lambda(cache-keys?2_1 cache-keys?4_2 key1_3 key3_4 lst5_5 less?6_6)"
"(let-values(((lst_7) lst5_5))"
"(let-values(((less?_8) less?6_6))"
"(let-values(((getkey_9)(if key3_4 key1_3 #f)))"
"(let-values(((cache-keys?_10)(if cache-keys?4_2 cache-keys?2_1 #f)))"
"(let-values()"
"(begin"
"                (if (list? lst_7) (void) (let-values () (raise-argument-error 'sort \"list?\" lst_7)))"
"(if(if(procedure? less?_8)(procedure-arity-includes? less?_8 2) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'sort \"(any/c any/c . -> . any/c)\" less?_8)))"
"(if(if getkey_9(not(if(procedure? getkey_9)(procedure-arity-includes? getkey_9 1) #f)) #f)"
"                  (let-values () (raise-argument-error 'sort \"(any/c . -> . any/c)\" getkey_9))"
"(void))"
"(if getkey_9(sort lst_7 less?_8 getkey_9 cache-keys?_10)(sort lst_7 less?_8))))))))))"
" (define-values (bad-list) (lambda (who_76 orig-l_77) (raise-mismatch-error who_76 \"not a proper list: \" orig-l_77)))"
"(define-values"
"(bad-item)"
"  (lambda (who_78 a_79 orig-l_80) (raise-mismatch-error who_78 \"non-pair found in list: \" a_79 \" in \" orig-l_80)))"
"(define-values"
"(1/assq 1/assv 1/assoc assf)"
"(let-values()"
"(let-values()"
"(let-values(((assq_97)"
"(lambda(x_101 l_102)"
"((letrec-values(((loop_103)"
"(lambda(l_104 t_105)"
"(if(pair? l_104)"
"(let-values()"
"(let-values(((a_106)(unsafe-car l_104)))"
"(if(pair? a_106)"
"(if(eq? x_101(unsafe-car a_106))"
" a_106"
"(let-values(((l_107)(unsafe-cdr l_104)))"
"(if(pair? l_107)"
"(let-values()"
"(let-values(((a_108)(unsafe-car l_107)))"
"(if(pair? a_108)"
"(if(eq? x_101(unsafe-car a_108))"
" a_108"
"(let-values(((t_109)(unsafe-cdr t_105))"
"((l_110)(unsafe-cdr l_107)))"
"(if(eq? l_110 t_109)"
"(bad-list 'assq l_102)"
"(loop_103 l_110 t_109))))"
"(bad-item 'assq a_108 l_102))))"
"(if(null? l_107)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102))))))"
"(bad-item 'assq a_106 l_102))))"
"(if(null? l_104)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102)))))))"
" loop_103)"
" l_102"
" l_102)))"
"((assv_98)"
"(lambda(x_111 l_112)"
"((letrec-values(((loop_113)"
"(lambda(l_114 t_115)"
"(if(pair? l_114)"
"(let-values()"
"(let-values(((a_116)(unsafe-car l_114)))"
"(if(pair? a_116)"
"(if(eqv? x_111(unsafe-car a_116))"
" a_116"
"(let-values(((l_117)(unsafe-cdr l_114)))"
"(if(pair? l_117)"
"(let-values()"
"(let-values(((a_118)(unsafe-car l_117)))"
"(if(pair? a_118)"
"(if(eqv? x_111(unsafe-car a_118))"
" a_118"
"(let-values(((t_119)(unsafe-cdr t_115))"
"((l_120)(unsafe-cdr l_117)))"
"(if(eq? l_120 t_119)"
"(bad-list 'assv l_112)"
"(loop_113 l_120 t_119))))"
"(bad-item 'assv a_118 l_112))))"
"(if(null? l_117)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112))))))"
"(bad-item 'assv a_116 l_112))))"
"(if(null? l_114)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112)))))))"
" loop_113)"
" l_112"
" l_112)))"
"((assoc_99)"
"(case-lambda"
"((x_121 l_122)"
"((letrec-values(((loop_123)"
"(lambda(l_124 t_125)"
"(if(pair? l_124)"
"(let-values()"
"(let-values(((a_126)(unsafe-car l_124)))"
"(if(pair? a_126)"
"(if(equal? x_121(unsafe-car a_126))"
" a_126"
"(let-values(((l_127)(unsafe-cdr l_124)))"
"(if(pair? l_127)"
"(let-values()"
"(let-values(((a_128)(unsafe-car l_127)))"
"(if(pair? a_128)"
"(if(equal? x_121(unsafe-car a_128))"
" a_128"
"(let-values(((t_129)(unsafe-cdr t_125))"
"((l_130)(unsafe-cdr l_127)))"
"(if(eq? l_130 t_129)"
"(bad-list 'assoc l_122)"
"(loop_123 l_130 t_129))))"
"(bad-item 'assoc a_128 l_122))))"
"(if(null? l_127)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122))))))"
"(bad-item 'assoc a_126 l_122))))"
"(if(null? l_124)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122)))))))"
" loop_123)"
" l_122"
" l_122))"
"((x_131 l_132 is-equal?_133)"
"(begin"
"(if(if(procedure? is-equal?_133)(procedure-arity-includes? is-equal?_133 2) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assoc \"(any/c any/c . -> . any/c)\" is-equal?_133)))"
"((letrec-values(((loop_134)"
"(lambda(l_135 t_136)"
"(if(pair? l_135)"
"(let-values()"
"(let-values(((a_137)(unsafe-car l_135)))"
"(if(pair? a_137)"
"(if(is-equal?_133 x_131(unsafe-car a_137))"
" a_137"
"(let-values(((l_138)(unsafe-cdr l_135)))"
"(if(pair? l_138)"
"(let-values()"
"(let-values(((a_139)(unsafe-car l_138)))"
"(if(pair? a_139)"
"(if(is-equal?_133 x_131(unsafe-car a_139))"
" a_139"
"(let-values(((t_140)(unsafe-cdr t_136))"
"((l_141)(unsafe-cdr l_138)))"
"(if(eq? l_141 t_140)"
"(bad-list 'assoc l_132)"
"(loop_134 l_141 t_140))))"
"(bad-item 'assoc a_139 l_132))))"
"(if(null? l_138)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132))))))"
"(bad-item 'assoc a_137 l_132))))"
"(if(null? l_135)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132)))))))"
" loop_134)"
" l_132"
" l_132)))))"
"((assf_100)"
"(lambda(f_142 l_143)"
"(begin"
"(if(if(procedure? f_142)(procedure-arity-includes? f_142 1) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assf \"(any/c any/c . -> . any/c)\" f_142)))"
"((letrec-values(((loop_144)"
"(lambda(l_145 t_146)"
"(if(pair? l_145)"
"(let-values()"
"(let-values(((a_147)(unsafe-car l_145)))"
"(if(pair? a_147)"
"(if((lambda(__148 a_149)(f_142 a_149)) #f(unsafe-car a_147))"
" a_147"
"(let-values(((l_150)(unsafe-cdr l_145)))"
"(if(pair? l_150)"
"(let-values()"
"(let-values(((a_151)(unsafe-car l_150)))"
"(if(pair? a_151)"
"(if((lambda(__152 a_153)(f_142 a_153))"
" #f"
"(unsafe-car a_151))"
" a_151"
"(let-values(((t_154)(unsafe-cdr t_146))"
"((l_155)(unsafe-cdr l_150)))"
"(if(eq? l_155 t_154)"
"(bad-list 'assf l_143)"
"(loop_144 l_155 t_154))))"
"(bad-item 'assf a_151 l_143))))"
"(if(null? l_150)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143))))))"
"(bad-item 'assf a_147 l_143))))"
"(if(null? l_145)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143)))))))"
" loop_144)"
" l_143"
" l_143)))))"
"(values assq_97 assv_98 assoc_99 assf_100)))))"
"(define-values"
"(filter)"
"(lambda(f_195 list_196)"
"(begin"
"(if(if(procedure? f_195)(procedure-arity-includes? f_195 1) #f)"
"(void)"
"        (let-values () (raise-argument-error 'filter \"(any/c . -> . any/c)\" f_195)))"
"      (if (list? list_196) (void) (let-values () (raise-argument-error 'filter \"list?\" list_196)))"
"((letrec-values(((loop_197)"
"(lambda(l_198 result_199)"
"(if(null? l_198)"
"(alt-reverse result_199)"
"(loop_197(cdr l_198)(if(f_195(car l_198))(cons(car l_198) result_199) result_199))))))"
" loop_197)"
" list_196"
" null))))"
"(void)"
"(void)"
"(define-values"
"(make-regexp-tweaker)"
"(lambda(tweaker_61)"
"(let-values(((t_62)(make-hash)))"
"(lambda(rx_63 n_64)"
"(let-values(((run-tweak_110)"
"(lambda()"
"(if(pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_111)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_112)(regexp? tweaked_111)))"
"(if or-part_112 or-part_112(byte-regexp? tweaked_111)))"
" tweaked_111"
"(pregexp(if(bytes? tweaked_111)(bytes->string/utf-8 tweaked_111) tweaked_111)))))"
"(if(regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_113)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_114)(regexp? tweaked_113)))"
"(if or-part_114 or-part_114(byte-regexp? tweaked_113)))"
" tweaked_113"
"(regexp(if(bytes? tweaked_113)(bytes->string/utf-8 tweaked_113) tweaked_113)))))"
"(if(byte-pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_115)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_116)(regexp? tweaked_115)))"
"(if or-part_116 or-part_116(byte-regexp? tweaked_115)))"
" tweaked_115"
"(byte-pregexp"
"(if(bytes? tweaked_115) tweaked_115(string->bytes/utf-8 tweaked_115))))))"
"(if(byte-regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_117)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_118)(regexp? tweaked_117)))"
"(if or-part_118 or-part_118(byte-regexp? tweaked_117)))"
" tweaked_117"
"(byte-regexp"
"(if(bytes? tweaked_117) tweaked_117(string->bytes/utf-8 tweaked_117))))))"
"(if(string? rx_63)"
"(let-values()"
"(let-values(((tweaked_119)(tweaker_61((lambda(x_120) x_120) rx_63) n_64)))"
"(if(let-values(((or-part_121)(regexp? tweaked_119)))"
"(if or-part_121 or-part_121(byte-regexp? tweaked_119)))"
" tweaked_119"
"(regexp"
"(if(bytes? tweaked_119)(bytes->string/utf-8 tweaked_119) tweaked_119)))))"
"(if(bytes? rx_63)"
"(let-values()"
"(let-values(((tweaked_122)(tweaker_61((lambda(x_123) x_123) rx_63) n_64)))"
"(if(let-values(((or-part_124)(regexp? tweaked_122)))"
"(if or-part_124 or-part_124(byte-regexp? tweaked_122)))"
" tweaked_122"
"(byte-regexp"
"(if(bytes? tweaked_122) tweaked_122(string->bytes/utf-8 tweaked_122))))))"
"(let-values()"
"(raise-argument-error"
" 'regexp-tweaker"
"                                       \"(or/c regexp? byte-regexp? string? bytes?)\""
" rx_63)))))))))))"
"(let-values(((key_125)(cons n_64 rx_63)))"
"(let-values(((or-part_126)(hash-ref t_62 key_125 #f)))"
"(if or-part_126"
" or-part_126"
"(let-values(((rx*_127)(run-tweak_110)))(begin(hash-set! t_62 key_125 rx*_127) rx*_127))))))))))"
"(define-values"
"(no-empty-edge-matches)"
"(make-regexp-tweaker"
"(lambda(rx_172 n_173)"
"(if(bytes? rx_172)"
"       (bytes-append #\"(?:\" rx_172 #\")(?<=\" (make-bytes n_173 (char->integer '#\\.)) #\")\")"
"       (format \"(?:~a)(?<=~a)\" rx_172 (make-bytes n_173 (char->integer '#\\.)))))))"
"(void)"
"(void)"
" (define-values (binary-or-text-desc) \"(or/c 'binary 'text)\")"
"(define-values"
"(open-input-file6.1)"
"(lambda(for-module?2_1 for-module?4_2 mode1_3 mode3_4 path5_5)"
"(let-values(((path_6) path5_5))"
"(let-values(((mode_7)(if mode3_4 mode1_3 'binary)))"
"(let-values(((for-module?_8)(if for-module?4_2 for-module?2_1 #f)))"
"(let-values()"
"(begin"
"(if(path-string? path_6)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-file \"path-string?\" path_6)))"
"(if(memq mode_7 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-file binary-or-text-desc mode_7)))"
"(open-input-file path_6 mode_7(if for-module?_8 'module 'none)))))))))"
"(define-values"
"(call-with-input-file*61.1)"
"(lambda(mode57_199 mode58_200 path59_201 proc60_202)"
"(let-values(((path_203) path59_201))"
"(let-values(((proc_204) proc60_202))"
"(let-values(((mode_205)(if mode58_200 mode57_199 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_203)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"path-string?\" path_203)))"
"(if(if(procedure? proc_204)(procedure-arity-includes? proc_204 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"(input-port? . -> . any)\" proc_204)))"
"(if(memq mode_205 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file* binary-or-text-desc mode_205)))"
"(let-values(((p_206)(open-input-file path_203 mode_205)))"
"(dynamic-wind void(lambda()(proc_204 p_206))(lambda()(close-input-port p_206)))))))))))"
"(void)"
"(void)"
"(define-values(the-empty-hash) '#hash())"
"(define-values(the-empty-hasheq) '#hasheq())"
"(define-values(the-empty-hasheqv) '#hasheqv())"
"(define-values"
"(set)"
"(case-lambda"
"(() the-empty-hash)"
"(l_71"
"(let-values(((lst_72) l_71))"
"(begin"
"(if(list? lst_72)(void)(let-values()(in-list lst_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(s_74 lst_75)"
"(if(pair? lst_75)"
"(let-values(((e_76)(unsafe-car lst_75))((rest_77)(unsafe-cdr lst_75)))"
"(let-values(((s_78)"
"(let-values(((s_79) s_74))"
"(let-values(((s_80)(let-values()(hash-set s_79 e_76 #t))))"
"(values s_80)))))"
"(if(not #f)(for-loop_73 s_78 rest_77) s_78)))"
" s_74))))"
" for-loop_73)"
" the-empty-hash"
" lst_72))))))"
"(define-values"
"(seteq)"
"(case-lambda"
"(() the-empty-hasheq)"
"(l_81"
"(let-values(((lst_82) l_81))"
"(begin"
"(if(list? lst_82)(void)(let-values()(in-list lst_82)))"
"((letrec-values(((for-loop_83)"
"(lambda(s_84 lst_85)"
"(if(pair? lst_85)"
"(let-values(((e_86)(unsafe-car lst_85))((rest_87)(unsafe-cdr lst_85)))"
"(let-values(((s_88)"
"(let-values(((s_89) s_84))"
"(let-values(((s_90)(let-values()(hash-set s_89 e_86 #t))))"
"(values s_90)))))"
"(if(not #f)(for-loop_83 s_88 rest_87) s_88)))"
" s_84))))"
" for-loop_83)"
" the-empty-hasheq"
" lst_82))))))"
"(define-values(seteqv)(lambda() the-empty-hasheqv))"
"(define-values(set?)(lambda(s_91)(hash? s_91)))"
"(define-values(set-empty?)(lambda(s_92)(zero?(hash-count s_92))))"
"(define-values(set-member?)(lambda(s_93 e_94)(hash-ref s_93 e_94 #f)))"
"(define-values(set-count)(lambda(s_95)(hash-count s_95)))"
"(define-values(set-add)(lambda(s_96 e_97)(hash-set s_96 e_97 #t)))"
"(define-values(set-remove)(lambda(s_98 e_99)(hash-remove s_98 e_99)))"
"(define-values(set-first)(lambda(s_100)(hash-iterate-key s_100(hash-iterate-first s_100))))"
"(define-values(subset?)(lambda(s1_101 s2_102)(hash-keys-subset? s1_101 s2_102)))"
"(define-values"
"(set=?)"
"(lambda(s1_103 s2_104)"
"(let-values(((or-part_105)(eq? s1_103 s2_104)))"
"(if or-part_105"
" or-part_105"
"(if(=(hash-count s1_103)(hash-count s2_104))(hash-keys-subset? s1_103 s2_104) #f)))))"
"(define-values"
"(set-subtract)"
"(lambda(s1_106 s2_107)"
"(let-values(((ht_108) s2_107))"
"(begin"
"(if((lambda(ht_109)(if(hash? ht_109)(immutable? ht_109) #f)) ht_108)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_108)))"
"((letrec-values(((for-loop_110)"
"(lambda(s1_111 i_112)"
"(if i_112"
"(let-values(((k_113)(unsafe-immutable-hash-iterate-key ht_108 i_112)))"
"(let-values(((s1_114)"
"(let-values(((s1_115) s1_111))"
"(let-values(((s1_116)(let-values()(hash-remove s1_115 k_113))))"
"(values s1_116)))))"
"(if(not #f)"
"(for-loop_110 s1_114(unsafe-immutable-hash-iterate-next ht_108 i_112))"
" s1_114)))"
" s1_111))))"
" for-loop_110)"
" s1_106"
"(unsafe-immutable-hash-iterate-first ht_108))))))"
"(define-values"
"(set-union)"
"(lambda(s1_117 s2_118)"
"(if(<(set-count s1_117)(set-count s2_118))"
"(set-union s2_118 s1_117)"
"(let-values(((ht_119) s2_118))"
"(begin"
"(if((lambda(ht_120)(if(hash? ht_120)(immutable? ht_120) #f)) ht_119)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_119)))"
"((letrec-values(((for-loop_121)"
"(lambda(s1_122 i_123)"
"(if i_123"
"(let-values(((k_124)(unsafe-immutable-hash-iterate-key ht_119 i_123)))"
"(let-values(((s1_125)"
"(let-values(((s1_126) s1_122))"
"(let-values(((s1_127)(let-values()(hash-set s1_126 k_124 #t))))"
"(values s1_127)))))"
"(if(not #f)"
"(for-loop_121 s1_125(unsafe-immutable-hash-iterate-next ht_119 i_123))"
" s1_125)))"
" s1_122))))"
" for-loop_121)"
" s1_117"
"(unsafe-immutable-hash-iterate-first ht_119)))))))"
"(define-values"
"(set-intersect)"
"(lambda(s1_128 s2_129)"
"(if(<(set-count s1_128)(set-count s2_129))"
"(set-intersect s2_129 s1_128)"
"(let-values(((ht_130) s2_129))"
"(begin"
"(if((lambda(ht_131)(if(hash? ht_131)(immutable? ht_131) #f)) ht_130)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_130)))"
"((letrec-values(((for-loop_132)"
"(lambda(s_133 i_134)"
"(if i_134"
"(let-values(((k_135)(unsafe-immutable-hash-iterate-key ht_130 i_134)))"
"(let-values(((s_136)"
"(let-values(((s_137) s_133))"
"(let-values(((s_138)"
"(let-values()"
"(if(hash-ref s1_128 k_135 #f)"
" s_137"
"(hash-remove s_137 k_135)))))"
"(values s_138)))))"
"(if(not #f)"
"(for-loop_132 s_136(unsafe-immutable-hash-iterate-next ht_130 i_134))"
" s_136)))"
" s_133))))"
" for-loop_132)"
" s2_129"
"(unsafe-immutable-hash-iterate-first ht_130)))))))"
"(define-values"
"(set-partition)"
"(lambda(s_139 pred_140 empty-y-set_141 empty-n-set_142)"
"(let-values(((ht_143) s_139))"
"(begin"
"(if((lambda(ht_144)(if(hash? ht_144)(immutable? ht_144) #f)) ht_143)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_143)))"
"((letrec-values(((for-loop_145)"
"(lambda(y_146 n_147 i_148)"
"(if i_148"
"(let-values(((v_149)(unsafe-immutable-hash-iterate-key ht_143 i_148)))"
"(let-values(((y_150 n_151)"
"(let-values(((y_152) y_146)((n_153) n_147))"
"(let-values(((y_154 n_155)"
"(let-values()"
"(if(pred_140 v_149)"
"(values(set-add y_152 v_149) n_153)"
"(values y_152(set-add n_153 v_149))))))"
"(values y_154 n_155)))))"
"(if(not #f)"
"(for-loop_145 y_150 n_151(unsafe-immutable-hash-iterate-next ht_143 i_148))"
"(values y_150 n_151))))"
"(values y_146 n_147)))))"
" for-loop_145)"
" empty-y-set_141"
" empty-n-set_142"
"(unsafe-immutable-hash-iterate-first ht_143))))))"
"(define-values"
"(set->list)"
"(lambda(s_156)"
"(let-values(((ht_157) s_156))"
"(begin"
"(if((lambda(ht_158)(if(hash? ht_158)(immutable? ht_158) #f)) ht_157)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_157)))"
"((letrec-values(((for-loop_159)"
"(lambda(i_160)"
"(if i_160"
"(let-values(((k_161)(unsafe-immutable-hash-iterate-key ht_157 i_160)))"
"(let-values(((post-guard-var_162)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_163)(let-values()(let-values() k_161))))"
"(let-values(((result_164)"
"(if(post-guard-var_162)"
"(for-loop_159(unsafe-immutable-hash-iterate-next ht_157 i_160))"
" null)))"
"(cons elem_163 result_164))))))"
" null))))"
" for-loop_159)"
"(unsafe-immutable-hash-iterate-first ht_157))))))"
"(define-values"
"(list->set)"
"(lambda(l_165)"
"(let-values(((lst_166) l_165))"
"(begin"
"(if(list? lst_166)(void)(let-values()(in-list lst_166)))"
"((letrec-values(((for-loop_167)"
"(lambda(table_168 lst_169)"
"(if(pair? lst_169)"
"(let-values(((k_170)(unsafe-car lst_169))((rest_171)(unsafe-cdr lst_169)))"
"(let-values(((table_172)"
"(let-values(((table_173) table_168))"
"(let-values(((table_174)"
"(let-values()"
"(let-values(((key_175 val_176)"
"(let-values()"
"(values(let-values() k_170) #t))))"
"(hash-set table_173 key_175 val_176)))))"
"(values table_174)))))"
"(if(not #f)(for-loop_167 table_172 rest_171) table_172)))"
" table_168))))"
" for-loop_167)"
" '#hash()"
" lst_166)))))"
"(define-values"
"(list->seteq)"
"(lambda(l_177)"
"(let-values(((lst_178) l_177))"
"(begin"
"(if(list? lst_178)(void)(let-values()(in-list lst_178)))"
"((letrec-values(((for-loop_179)"
"(lambda(table_180 lst_181)"
"(if(pair? lst_181)"
"(let-values(((k_182)(unsafe-car lst_181))((rest_183)(unsafe-cdr lst_181)))"
"(let-values(((table_184)"
"(let-values(((table_185) table_180))"
"(let-values(((table_186)"
"(let-values()"
"(let-values(((key_187 val_188)"
"(let-values()"
"(values(let-values() k_182) #t))))"
"(hash-set table_185 key_187 val_188)))))"
"(values table_186)))))"
"(if(not #f)(for-loop_179 table_184 rest_183) table_184)))"
" table_180))))"
" for-loop_179)"
" '#hasheq()"
" lst_178)))))"
"(void)"
"(void)"
"(define-values(prop:serialize serialize? serialize-ref)(make-struct-type-property 'serialize))"
"(define-values"
"(prop:serialize-fill! serialize-fill!? serialize-fill!-ref)"
"(make-struct-type-property 'serialize-fill!))"
"(define-values(prop:reach-scopes reach-scopes? reach-scopes-ref)(make-struct-type-property 'reach-scopes))"
"(define-values"
"(prop:scope-with-bindings scope-with-bindings? scope-with-bindings-ref)"
"(make-struct-type-property 'scope-with-bindings))"
"(define-values"
"(prop:binding-reach-scopes binding-reach-scopes? binding-reach-scopes-ref)"
"(make-struct-type-property 'binding-reach-scopes))"
"(void)"
"(void)"
"(define-values"
"(1/module-path?)"
"(lambda(v_1)"
"(let-values(((or-part_2)(if(pair? v_1)(if(eq?(car v_1) 'submod)(submodule-module-path? v_1) #f) #f)))"
"(if or-part_2 or-part_2(root-module-path? v_1)))))"
"(define-values"
"(root-module-path?)"
"(lambda(v_3)"
"(let-values(((or-part_4)(path? v_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(if(string? v_3)(string-module-path? v_3) #f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(if(symbol? v_3)(symbol-module-path? v_3) #f)))"
"(if or-part_6"
" or-part_6"
"(if(pair? v_3)"
"(let-values(((tmp_7)(car v_3)))"
"(if(equal? tmp_7 'quote)"
"(let-values()(if(pair?(cdr v_3))(if(symbol?(cadr v_3))(null?(cddr v_3)) #f) #f))"
"(if(equal? tmp_7 'lib)"
"(let-values()(lib-module-path? v_3))"
"(if(equal? tmp_7 'file)"
"(let-values()"
"(if(pair?(cdr v_3))"
"(if(string?(cadr v_3))(if(path-string?(cadr v_3))(null?(cddr v_3)) #f) #f)"
" #f))"
"(if(equal? tmp_7 'planet)(let-values()(planet-module-path? v_3))(let-values() #f))))))"
" #f)))))))))"
"(define-values"
"(submodule-module-path?)"
"(lambda(v_8)"
"(if(pair?(cdr v_8))"
"(if(list? v_8)"
"        (if (let-values (((or-part_9) (equal? (cadr v_8) \"..\")))"
"(if or-part_9"
" or-part_9"
"                (let-values (((or-part_10) (equal? (cadr v_8) \".\")))"
"(if or-part_10 or-part_10(root-module-path?(cadr v_8))))))"
"(let-values(((lst_11)(cddr v_8)))"
"(begin"
"(if(list? lst_11)(void)(let-values()(in-list lst_11)))"
"((letrec-values(((for-loop_12)"
"(lambda(result_13 lst_14)"
"(if(pair? lst_14)"
"(let-values(((e_15)(unsafe-car lst_14))((rest_16)(unsafe-cdr lst_14)))"
"(let-values(((result_17)"
"(let-values()"
"(let-values(((result_19)"
"(let-values()"
"(let-values()"
"                                                                        (let-values (((or-part_20) (equal? e_15 \"..\")))"
"(if or-part_20 or-part_20(symbol? e_15)))))))"
"(values result_19)))))"
"(if(if(not((lambda x_21(not result_17)) e_15))(not #f) #f)"
"(for-loop_12 result_17 rest_16)"
" result_17)))"
" result_13))))"
" for-loop_12)"
" #t"
" lst_11)))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(string-module-path?)"
"(lambda(v_22)"
"(let-values(((v13_24) v_22)((temp14_25) #t)((temp15_26) #t)((temp16_27) #t))"
"(module-path-string?10.1 temp14_25 #t temp16_27 #t #f #f temp15_26 #t v13_24))))"
"(define-values"
"(symbol-module-path?)"
"(lambda(v_28)"
"(let-values(((temp17_29)(symbol->string v_28)))(module-path-string?10.1 #f #f #f #f #f #f #f #f temp17_29))))"
"(define-values"
"(lib-module-path?)"
"(lambda(v_30)"
"(if(list? v_30)"
"(if(pair?(cdr v_30))"
"((letrec-values(((loop_31)"
"(lambda(v_32 first?_33)"
"(let-values(((or-part_34)(null? v_32)))"
"(if or-part_34"
" or-part_34"
"(if(string?(car v_32))"
"(if(let-values(((temp18_36)(car v_32))"
"((first?19_37) first?_33)"
"((first?20_38) first?_33))"
"(module-path-string?10.1 #f #f first?20_38 #t #f #f first?19_37 #t temp18_36))"
"(loop_31(cdr v_32) #f)"
" #f)"
" #f))))))"
" loop_31)"
"(cdr v_30)"
" #t)"
" #f)"
" #f)))"
"(define-values"
"(planet-module-path?)"
"(lambda(v_39)"
"(if(list? v_39)"
"(let-values(((tmp_40)(length v_39)))"
"(if(equal? tmp_40 1)"
"(let-values() #f)"
"(if(equal? tmp_40 2)"
"(let-values()"
"(let-values(((e_41)(cadr v_39)))"
"(if(string? e_41)"
"(let-values()"
"(let-values(((e21_43) e_41)((temp22_44) #t)((temp23_45) #t))"
"(module-path-string?10.1 #f #f temp23_45 #t temp22_44 #t #f #f e21_43)))"
"(if(symbol? e_41)"
"(let-values()"
"(let-values(((temp24_47)(symbol->string e_41))((temp25_48) #t))"
"(module-path-string?10.1 #f #f #f #f temp25_48 #t #f #f temp24_47)))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((file_49)(cadr v_39)))"
"(let-values(((pkg_50)(caddr v_39)))"
"(let-values(((subs_51)(cdddr v_39)))"
"(if file_49"
"(if(let-values(((file26_53) file_49)((temp27_54) #t)((temp28_55) #t))"
"(module-path-string?10.1 #f #f temp28_55 #t #f #f temp27_54 #t file26_53))"
"(if(if(list? pkg_50)"
"(if(<= 2(length pkg_50) 4)"
"(if(planet-user/pkg-string?(car pkg_50))"
"(if(planet-user/pkg-string?(cadr pkg_50))"
"(let-values(((or-part_56)(null?(cddr pkg_50))))"
"(if or-part_56"
" or-part_56"
"(let-values(((or-part_57)(planet-version-number?(caddr pkg_50))))"
"(if or-part_57"
" or-part_57"
"(let-values(((or-part_58)(null?(cddr pkg_50))))"
"(if or-part_58"
" or-part_58"
"(planet-version-minor-spec?(cadddr pkg_50))))))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values(((lst_59) subs_51))"
"(begin"
"(if(list? lst_59)(void)(let-values()(in-list lst_59)))"
"((letrec-values(((for-loop_60)"
"(lambda(result_61 lst_62)"
"(if(pair? lst_62)"
"(let-values(((sub_63)(unsafe-car lst_62))"
"((rest_64)(unsafe-cdr lst_62)))"
"(let-values(((result_65)"
"(let-values()"
"(let-values(((result_67)"
"(let-values()"
"(let-values()"
"(let-values(((sub29_68)"
" sub_63))"
"(module-path-string?10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sub29_68))))))"
"(values result_67)))))"
"(if(if(not((lambda x_69(not result_65)) sub_63))"
"(not #f)"
" #f)"
"(for-loop_60 result_65 rest_64)"
" result_65)))"
" result_61))))"
" for-loop_60)"
" #t"
" lst_59)))"
" #f)"
" #f)"
" #f))))))))"
" #f)))"
"(define-values(planet-version-number?)(lambda(v_70)(exact-nonnegative-integer? v_70)))"
"(define-values"
"(planet-version-minor-spec?)"
"(lambda(v_71)"
"(let-values(((or-part_72)(planet-version-number? v_71)))"
"(if or-part_72"
" or-part_72"
"(if(pair? v_71)"
"(if(list? v_71)"
"(if(= 2(length v_71))"
"(let-values(((tmp_73)(car v_71)))"
"(if(if(equal? tmp_73 '=) #t(if(equal? tmp_73 '+) #t(equal? tmp_73 '-)))"
"(let-values()(planet-version-number?(cadr v_71)))"
"(let-values()(if(planet-version-number?(car v_71))(planet-version-number?(cadr v_71)) #f))))"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(module-path-string?10.1)"
"(lambda(dots-dir-ok?2_74"
" dots-dir-ok?6_75"
" file-end-ok?4_76"
" file-end-ok?8_77"
" for-planet?1_78"
" for-planet?5_79"
" just-file-ok?3_80"
" just-file-ok?7_81"
" v9_82)"
"(let-values(((v_83) v9_82))"
"(let-values(((for-planet?_84)(if for-planet?5_79 for-planet?1_78 #f)))"
"(let-values(((dots-dir-ok?_85)(if dots-dir-ok?6_75 dots-dir-ok?2_74 #f)))"
"(let-values(((just-file-ok?_86)(if just-file-ok?7_81 just-file-ok?3_80 #f)))"
"(let-values(((file-end-ok?_87)(if file-end-ok?8_77 file-end-ok?4_76 #f)))"
"(let-values()"
"(let-values(((len_88)(string-length v_83)))"
"(if(positive? len_88)"
"(if(not(char=? '#\\/(string-ref v_83 0)))"
"(if(not(char=? '#\\/(string-ref v_83(sub1 len_88))))"
"(let-values(((start-package-version-pos_89 end-package-version-pos_90)"
"(if for-planet?_84(check-planet-part v_83 len_88)(values 0 0))))"
"(if start-package-version-pos_89"
"((letrec-values(((loop_91)"
"(lambda(i_92 prev-was-slash?_93 saw-slash?_94 saw-dot?_95)"
"(if(not(zero? i_92))"
"(let-values()"
"(let-values(((c_96)(string-ref v_83 i_92)))"
"(if(char=? c_96 '#\\/)"
"(let-values()"
"(if(not prev-was-slash?_93)"
"(loop_91(sub1 i_92) #t #t saw-dot?_95)"
" #f))"
"(if(char=? c_96 '#\\.)"
"(let-values()"
"(if(if(<(add1 i_92) len_88)"
"(if(not(char=?(string-ref v_83(add1 i_92)) '#\\/))"
"(not(char=?(string-ref v_83(add1 i_92)) '#\\.))"
" #f)"
" #f)"
"(if(not saw-slash?_94)"
"(loop_91(sub1 i_92) #f saw-slash?_94 #t)"
" #f)"
"(loop_91(sub1 i_92) #f saw-slash?_94 saw-dot?_95)))"
"(if(let-values(((or-part_97)(plain-char? c_96)))"
"(if or-part_97"
" or-part_97"
"(if(char=? c_96 '#\\%)"
"(if(<(+ i_92 2) len_88)"
"(hex-sequence? v_83(add1 i_92))"
" #f)"
" #f)))"
"(let-values()"
"(loop_91(sub1 i_92) #f saw-slash?_94 saw-dot?_95))"
"(if(if(>= i_92 start-package-version-pos_89)"
"(< i_92 end-package-version-pos_90)"
" #f)"
"(let-values()"
"(loop_91(sub1 i_92) #f saw-slash?_94 saw-dot?_95))"
"(let-values() #f)))))))"
"(let-values()"
"(if(not"
"(if(not just-file-ok?_86)"
"(if saw-dot?_95(not saw-slash?_94) #f)"
" #f))"
"(let-values(((or-part_98) dots-dir-ok?_85))"
"(if or-part_98"
" or-part_98"
"((letrec-values(((loop_99)"
"(lambda(i_100)"
"(if(= i_100 len_88)"
"(let-values() #t)"
"(if(char=?"
"(string-ref v_83 i_100)"
" '#\\.)"
"(let-values()"
"(if(not"
"(let-values(((or-part_101)"
"(="
" len_88"
"(add1 i_100))))"
"(if or-part_101"
" or-part_101"
"(char=?"
"(string-ref"
" v_83"
"(add1 i_100))"
" '#\\/))))"
"(if(not"
"(if(char=?"
"(string-ref"
" v_83"
"(add1 i_100))"
" '#\\.)"
"(let-values(((or-part_102)"
"(="
" len_88"
"(+"
" i_100"
" 2))))"
"(if or-part_102"
" or-part_102"
"(char=?"
"(string-ref"
" v_83"
"(+ i_100 2))"
" '#\\/)))"
" #f))"
"(loop_99"
"((letrec-values(((loop_103)"
"(lambda(i_104)"
"(if(char=?"
" '#\\."
"(string-ref"
" v_83"
" i_104))"
"(loop_103"
"(add1"
" i_104))"
" i_104))))"
" loop_103)"
" i_100))"
" #f)"
" #f))"
"(let-values()"
"(loop_99(add1 i_100))))))))"
" loop_99)"
" 0)))"
" #f))))))"
" loop_91)"
"(sub1 len_88)"
" #f"
"(not file-end-ok?_87)"
" #f)"
" #f))"
" #f)"
" #f)"
" #f))))))))))"
"(define-values"
"(planet-user/pkg-string?)"
"(lambda(v_137)"
"(if(string? v_137)"
"(let-values(((len_138)(string-length v_137)))"
"(if(positive? len_138)"
"(let-values(((vec_139 len_140)"
"(let-values(((vec_142) v_137))"
"(begin"
"(if(string? vec_142)(void)(let-values()(in-string vec_142)))"
"(values vec_142(string-length vec_142)))))"
"((start_141) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_141)(void)(let-values()(in-naturals start_141)))"
"((letrec-values(((for-loop_143)"
"(lambda(result_144 pos_145 pos_146)"
"(if(if(unsafe-fx< pos_145 len_140) #t #f)"
"(let-values(((c_147)(string-ref vec_139 pos_145))((i_148) pos_146))"
"(let-values(((result_149)"
"(let-values()"
"(let-values(((result_151)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_152)"
"(plain-char? c_147)))"
"(if or-part_152"
" or-part_152"
"(let-values(((or-part_153)"
"(char=? '#\\. c_147)))"
"(if or-part_153"
" or-part_153"
"(if(char=? '#\\% c_147)"
"(if(< i_148(- len_138 2))"
"(hex-sequence? v_137(add1 i_148))"
" #f)"
" #f)))))))))"
"(values result_151)))))"
"(if(if(not((lambda x_154(not result_149)) c_147))"
"(if(not((lambda x_155(not result_149)) i_148))(not #f) #f)"
" #f)"
"(for-loop_143 result_149(unsafe-fx+ 1 pos_145)(+ pos_146 1))"
" result_149)))"
" result_144))))"
" for-loop_143)"
" #t"
" 0"
" start_141)))"
" #f))"
" #f)))"
"(define-values"
"(plain-char?)"
"(lambda(c_156)"
"(let-values(((or-part_157)(char<=? '#\\a c_156 '#\\z)))"
"(if or-part_157"
" or-part_157"
"(let-values(((or-part_158)(char<=? '#\\A c_156 '#\\Z)))"
"(if or-part_158"
" or-part_158"
"(let-values(((or-part_159)(char<=? '#\\0 c_156 '#\\9)))"
"(if or-part_159"
" or-part_159"
"(let-values(((or-part_160)(char=? '#\\- c_156)))"
"(if or-part_160"
" or-part_160"
"(let-values(((or-part_161)(char=? '#\\_ c_156)))"
"(if or-part_161 or-part_161(char=? '#\\+ c_156)))))))))))))"
"(define-values"
"(hex-sequence?)"
"(lambda(s_162 i_163)"
"(let-values(((c1_164)(string-ref s_162 i_163)))"
"(let-values(((c2_165)(string-ref s_162(add1 i_163))))"
"(if(hex-char? c1_164)"
"(if(hex-char? c2_165)"
"(let-values(((c_166)(integer->char(+(*(hex-char->integer c1_164) 16)(hex-char->integer c2_165)))))"
"(not(plain-char? c_166)))"
" #f)"
" #f)))))"
"(define-values"
"(hex-char?)"
"(lambda(c_167)"
"(let-values(((or-part_168)(char<=? '#\\a c_167 '#\\f)))(if or-part_168 or-part_168(char<=? '#\\0 c_167 '#\\9)))))"
"(define-values"
"(hex-char->integer)"
"(lambda(c_169)"
"(if(char<=? '#\\a c_169 '#\\f)"
"(let-values()(-(char->integer c_169)(+ 10(char->integer '#\\a))))"
"(if(char<=? '#\\A c_169 '#\\F)"
"(let-values()(-(char->integer c_169)(+ 10(char->integer '#\\A))))"
"(let-values()(-(char->integer c_169)(char->integer '#\\0)))))))"
"(define-values"
"(check-planet-part)"
"(lambda(v_170 len_171)"
"(let-values(((start-package-version-pos_172 end-package-version-pos_173 colon1-pos_174 colon2-pos_175)"
"((letrec-values(((loop_176)"
"(lambda(j_177"
" start-package-version-pos_178"
" end-package-version-pos_179"
" colon1-pos_180"
" colon2-pos_181)"
"(if(= j_177 len_171)"
"(let-values()"
"(values"
" start-package-version-pos_178"
"(let-values(((or-part_182) end-package-version-pos_179))"
"(if or-part_182 or-part_182 j_177))"
" colon1-pos_180"
" colon2-pos_181))"
"(let-values()"
"(let-values(((tmp_183)(string-ref v_170 j_177)))"
"(if(equal? tmp_183 '#\\/)"
"(let-values()"
"(loop_176"
"(add1 j_177)"
"(let-values(((or-part_184) start-package-version-pos_178))"
"(if or-part_184 or-part_184(add1 j_177)))"
"(if start-package-version-pos_178"
"(let-values(((or-part_185) end-package-version-pos_179))"
"(if or-part_185 or-part_185 j_177))"
" #f)"
" colon1-pos_180"
" colon2-pos_181))"
"(if(equal? tmp_183 '#\\:)"
"(let-values()"
"(if colon2-pos_181"
"(let-values()(values #f #f #f #f))"
"(if colon1-pos_180"
"(let-values()"
"(loop_176"
"(add1 j_177)"
" start-package-version-pos_178"
" end-package-version-pos_179"
" colon1-pos_180"
" j_177))"
"(let-values()"
"(loop_176"
"(add1 j_177)"
" start-package-version-pos_178"
" end-package-version-pos_179"
" j_177"
" #f)))))"
"(let-values()"
"(loop_176"
"(add1 j_177)"
" start-package-version-pos_178"
" end-package-version-pos_179"
" colon1-pos_180"
" colon2-pos_181))))))))))"
" loop_176)"
" 0"
" #f"
" #f"
" #f"
" #f)))"
"(if(if start-package-version-pos_172"
"(if(> end-package-version-pos_173 start-package-version-pos_172)"
"(let-values(((or-part_186)(not colon2-pos_175)))"
"(if or-part_186 or-part_186(<(add1 colon2-pos_175) end-package-version-pos_173)))"
" #f)"
" #f)"
"(let-values()"
"(if colon1-pos_174"
"(let-values()"
"(let-values(((colon1-end_187)"
"(let-values(((or-part_188) colon2-pos_175))"
"(if or-part_188 or-part_188 end-package-version-pos_173))))"
"(if(if(integer-sequence? v_170(add1 colon1-pos_174) colon1-end_187)"
"(let-values(((or-part_189)(not colon2-pos_175)))"
"(if or-part_189"
" or-part_189"
"(let-values(((tmp_190)(string-ref v_170(add1 colon2-pos_175))))"
"(if(equal? tmp_190 '#\\=)"
"(let-values()(integer-sequence? v_170(+ 2 colon2-pos_175) end-package-version-pos_173))"
"(if(if(equal? tmp_190 '#\\>) #t(equal? tmp_190 '#\\<))"
"(let-values()"
"(if(if(<(+ 2 colon2-pos_175) end-package-version-pos_173)"
"(char=? '#\\=(string-ref v_170(+ colon2-pos_175 2)))"
" #f)"
"(let-values()"
"(integer-sequence? v_170(+ 3 colon2-pos_175) end-package-version-pos_173))"
"(let-values()"
"(integer-sequence? v_170(+ 2 colon2-pos_175) end-package-version-pos_173))))"
"(let-values()"
"(integer-range-sequence?"
" v_170"
"(add1 colon2-pos_175)"
" end-package-version-pos_173)))))))"
" #f)"
"(let-values()(values colon1-pos_174 end-package-version-pos_173))"
"(let-values()(values #f #f)))))"
"(let-values()(values 0 0))))"
"(let-values()(values #f #f))))))"
"(define-values"
"(integer-sequence?)"
"(lambda(s_191 start_192 end_193)"
"(if(< start_192 end_193)"
"(let-values(((start_194) start_192)((end_195) end_193)((inc_196) 1))"
"(begin"
"(if(if(real? start_194)(if(real? end_195)(real? inc_196) #f) #f)"
"(void)"
"(let-values()(in-range start_194 end_195 inc_196)))"
"((letrec-values(((for-loop_197)"
"(lambda(result_198 pos_199)"
"(if(< pos_199 end_195)"
"(let-values(((i_200) pos_199))"
"(let-values(((result_201)"
"(let-values()"
"(let-values(((result_203)"
"(let-values()"
"(let-values()"
"(char<=? '#\\0(string-ref s_191 i_200) '#\\9)))))"
"(values result_203)))))"
"(if(if(not((lambda x_204(not result_201)) i_200))(not #f) #f)"
"(for-loop_197 result_201(+ pos_199 inc_196))"
" result_201)))"
" result_198))))"
" for-loop_197)"
" #t"
" start_194)))"
" #f)))"
"(define-values"
"(integer-range-sequence?)"
"(lambda(s_205 start_206 end_207)"
"(if(< start_206 end_207)"
"(if(let-values(((start_208) start_206)((end_209) end_207)((inc_210) 1))"
"(begin"
"(if(if(real? start_208)(if(real? end_209)(real? inc_210) #f) #f)"
"(void)"
"(let-values()(in-range start_208 end_209 inc_210)))"
"((letrec-values(((for-loop_211)"
"(lambda(result_212 pos_213)"
"(if(< pos_213 end_209)"
"(let-values(((i_214) pos_213))"
"(let-values(((result_215)"
"(let-values()"
"(let-values(((result_217)"
"(let-values()"
"(let-values()"
"(let-values(((c_218)(string-ref s_205 i_214)))"
"(let-values(((or-part_219)"
"(char=? c_218 '#\\-)))"
"(if or-part_219"
" or-part_219"
"(char<=? '#\\0 c_218 '#\\9))))))))"
"(values result_217)))))"
"(if(if(not((lambda x_220(not result_215)) i_214))(not #f) #f)"
"(for-loop_211 result_215(+ pos_213 inc_210))"
" result_215)))"
" result_212))))"
" for-loop_211)"
" #t"
" start_208)))"
"(>="
" 1"
"(let-values(((start_221) start_206)((end_222) end_207)((inc_223) 1))"
"(begin"
"(if(if(real? start_221)(if(real? end_222)(real? inc_223) #f) #f)"
"(void)"
"(let-values()(in-range start_221 end_222 inc_223)))"
"((letrec-values(((for-loop_224)"
"(lambda(result_225 pos_226)"
"(if(< pos_226 end_222)"
"(let-values(((i_227) pos_226))"
"(let-values(((result_228)"
"(let-values(((result_229) result_225))"
"(let-values(((result_230)"
"(let-values()"
"(+"
" result_229"
"(let-values()"
"(if(char=?(string-ref s_205 i_227) '#\\-)"
" 1"
" 0))))))"
"(values result_230)))))"
"(if(not #f)(for-loop_224 result_228(+ pos_226 inc_223)) result_228)))"
" result_225))))"
" for-loop_224)"
" 0"
" start_221))))"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:weak-intern-table weak-intern-table1.1 weak-intern-table? weak-intern-table-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'weak-intern-table"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'weak-intern-table)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'box))))"
"(define-values"
"(struct:table table2.1 table? table-ht table-count table-prune-at)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()(make-struct-type 'table #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'table)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'ht)"
"(make-struct-field-accessor -ref_24 1 'count)"
"(make-struct-field-accessor -ref_24 2 'prune-at))))"
"(define-values(make-weak-intern-table)(lambda()(weak-intern-table1.1(box(table2.1(hasheqv) 0 128)))))"
"(define-values"
"(weak-intern!)"
"(lambda(tt_51 v_52)"
"(let-values(((b_53)(weak-intern-table-box tt_51)))"
"(let-values(((t_54)(unbox b_53)))"
"(let-values(((code_55)(equal-hash-code v_52)))"
"(let-values(((vals_56)(hash-ref(table-ht t_54) code_55 null)))"
"(let-values(((or-part_57)"
"(let-values(((lst_58) vals_56))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((b_62)(unsafe-car lst_61))"
"((rest_63)(unsafe-cdr lst_61)))"
"(let-values(((result_64)"
"(let-values()"
"(let-values(((result_66)"
"(let-values()"
"(let-values()"
"(let-values(((bv_67)"
"(weak-box-value"
" b_62)))"
"(if(equal? bv_67 v_52)"
" bv_67"
" #f))))))"
"(values result_66)))))"
"(if(if(not((lambda x_68 result_64) b_62))(not #f) #f)"
"(for-loop_59 result_64 rest_63)"
" result_64)))"
" result_60))))"
" for-loop_59)"
" #f"
" lst_58)))))"
"(if or-part_57"
" or-part_57"
"(let-values(((pruned-t_69)(if(=(table-count t_54)(table-prune-at t_54))(prune-table t_54) t_54)))"
"(let-values(((ht_70)(table-ht pruned-t_69)))"
"(let-values(((new-t_71)"
"(table2.1"
"(hash-set ht_70 code_55(cons(make-weak-box v_52)(hash-ref ht_70 code_55 null)))"
"(add1(table-count pruned-t_69))"
"(table-prune-at pruned-t_69))))"
"(let-values(((or-part_72)(if(box-cas! b_53 t_54 new-t_71) v_52 #f)))"
"(if or-part_72 or-part_72(weak-intern! tt_51 v_52))))))))))))))"
"(define-values"
"(prune-table)"
"(lambda(t_73)"
"(let-values(((new-ht_74)"
"(let-values(((ht_76)(table-ht t_73)))"
"(begin"
"(if((lambda(ht_77)(hash? ht_77)) ht_76)(void)(let-values()(default-in-hash ht_76)))"
"((letrec-values(((for-loop_78)"
"(lambda(table_79 i_80)"
"(if i_80"
"(let-values(((k_81 vals_82)(hash-iterate-key+value ht_76 i_80)))"
"(let-values(((table_83)"
"(let-values(((new-vals_84)"
"(let-values(((lst_85) vals_82))"
"(begin"
"(if(list? lst_85)"
"(void)"
"(let-values()(in-list lst_85)))"
"((letrec-values(((for-loop_86)"
"(lambda(lst_87)"
"(if(pair? lst_87)"
"(let-values(((b_88)"
"(unsafe-car"
" lst_87))"
"((rest_89)"
"(unsafe-cdr"
" lst_87)))"
"(let-values(((post-guard-var_90)"
"(lambda()"
" #t)))"
"(let-values()"
"(if(weak-box-value"
" b_88)"
"(let-values()"
"(let-values(((elem_91)"
"(let-values()"
"(let-values()"
" b_88))))"
"(let-values(((result_92)"
"(if(post-guard-var_90)"
"(for-loop_86"
" rest_89)"
" null)))"
"(cons"
" elem_91"
" result_92))))"
"(if(post-guard-var_90)"
"(for-loop_86"
" rest_89)"
" null)))))"
" null))))"
" for-loop_86)"
" lst_85)))))"
"(begin"
" #t"
"((letrec-values(((for-loop_93)"
"(lambda(table_94)"
"(let-values()"
"(let-values(((table_95)"
"(let-values(((table_96)"
" table_94))"
"(if(pair?"
" new-vals_84)"
"(let-values(((table_97)"
" table_96))"
"(let-values(((table_98)"
"(let-values()"
"(let-values(((key_99"
" val_100)"
"(let-values()"
"(values"
" k_81"
" new-vals_84))))"
"(hash-set"
" table_97"
" key_99"
" val_100)))))"
"(values"
" table_98)))"
" table_96))))"
" table_95)))))"
" for-loop_93)"
" table_79)))))"
"(if(not #f)"
"(for-loop_78 table_83(hash-iterate-next ht_76 i_80))"
" table_83)))"
" table_79))))"
" for-loop_78)"
" '#hash()"
"(hash-iterate-first ht_76))))))"
"(let-values(((count_75)"
"(let-values(((ht_101) new-ht_74))"
"(begin"
"(if((lambda(ht_102)(hash? ht_102)) ht_101)(void)(let-values()(default-in-hash ht_101)))"
"((letrec-values(((for-loop_103)"
"(lambda(result_104 i_105)"
"(if i_105"
"(let-values(((k_106 vals_107)(hash-iterate-key+value ht_101 i_105)))"
"(let-values(((result_108)"
"(let-values(((result_109) result_104))"
"(let-values(((result_110)"
"(let-values()"
"(+"
" result_109"
"(let-values()(length vals_107))))))"
"(values result_110)))))"
"(if(not #f)"
"(for-loop_103 result_108(hash-iterate-next ht_101 i_105))"
" result_108)))"
" result_104))))"
" for-loop_103)"
" 0"
"(hash-iterate-first ht_101))))))"
"(table2.1 new-ht_74 count_75(max 128(* 2 count_75)))))))"
"(void)"
"(void)"
"(define-values"
"(struct:resolved-module-path resolved-module-path1.1 1/resolved-module-path? 1/resolved-module-path-name)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'resolved-module-path"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(r_34 ser-push!_35 state_36)"
"(begin"
"(ser-push!_35 'tag '#:resolved-module-path)"
"(ser-push!_35(1/resolved-module-path-name r_34)))))"
"(cons"
" prop:custom-write"
"(lambda(r_37 port_38 mode_39)"
"(begin"
"                           (if mode_39 (let-values () (write-string \"#<resolved-module-path:\" port_38)) (void))"
"                           (fprintf port_38 \"~a\" (format-resolved-module-path-name (1/resolved-module-path-name r_37)))"
"                           (if mode_39 (let-values () (write-string \">\" port_38)) (void)))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_40 b_41 eql?_42)"
"(eql?_42(1/resolved-module-path-name a_40)(1/resolved-module-path-name b_41)))"
"(lambda(a_43 hash-code_44)(hash-code_44(1/resolved-module-path-name a_43)))"
"(lambda(a_45 hash-code_46)(hash-code_46(1/resolved-module-path-name a_45))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'resolved-module-path)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'name))))"
"(define-values"
"(format-resolved-module-path-name)"
"(lambda(p_48)"
"(if(path? p_48)"
"      (let-values () (string-append \"\\\"\" (path->string p_48) \"\\\"\"))"
"(if(symbol? p_48)"
"        (let-values () (format \"'~s\" p_48))"
"(let-values()"
"(format"
"           \"(submod ~a~a)\""
"(format-resolved-module-path-name(car p_48))"
"(apply"
" string-append"
"(let-values(((lst_49)(cdr p_48)))"
"(begin"
"(if(list? lst_49)(void)(let-values()(in-list lst_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(lst_51)"
"(if(pair? lst_51)"
"(let-values(((i_52)(unsafe-car lst_51))((rest_53)(unsafe-cdr lst_51)))"
"(let-values(((post-guard-var_54)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_55)"
"                                                          (let-values () (let-values () (format \" ~s\" i_52)))))"
"(let-values(((result_56)"
"(if(post-guard-var_54)(for-loop_50 rest_53) null)))"
"(cons elem_55 result_56))))))"
" null))))"
" for-loop_50)"
" lst_49))))))))))"
"(define-values"
"(resolved-module-path-root-name)"
"(lambda(r_57)"
"(let-values(((name_58)(1/resolved-module-path-name r_57)))(if(pair? name_58)(car name_58) name_58))))"
"(define-values(resolved-module-paths)(make-weak-intern-table))"
"(define-values"
"(1/make-resolved-module-path)"
"(lambda(p_59)"
"(begin"
"(if(let-values(((or-part_60)(symbol? p_59)))"
"(if or-part_60"
" or-part_60"
"(let-values(((or-part_61)(if(path? p_59)(complete-path? p_59) #f)))"
"(if or-part_61"
" or-part_61"
"(if(pair? p_59)"
"(if(pair?(cdr p_59))"
"(if(list? p_59)"
"(if(let-values(((or-part_62)(symbol?(car p_59))))"
"(if or-part_62 or-part_62(if(path?(car p_59))(complete-path?(car p_59)) #f)))"
"(let-values(((lst_63)(cdr p_59)))"
"(begin"
"(if(list? lst_63)(void)(let-values()(in-list lst_63)))"
"((letrec-values(((for-loop_64)"
"(lambda(result_65 lst_66)"
"(if(pair? lst_66)"
"(let-values(((s_67)(unsafe-car lst_66))"
"((rest_68)(unsafe-cdr lst_66)))"
"(let-values(((result_69)"
"(let-values()"
"(let-values(((result_71)"
"(let-values()"
"(let-values()(symbol? s_67)))))"
"(values result_71)))))"
"(if(if(not((lambda x_72(not result_69)) s_67))(not #f) #f)"
"(for-loop_64 result_69 rest_68)"
" result_69)))"
" result_65))))"
" for-loop_64)"
" #t"
" lst_63)))"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-resolved-module-path"
"(string-append"
"            \"(or/c symbol?\\n\""
"            \"      (and/c path? complete-path?)\\n\""
"            \"      (cons/c (or/c symbol?\\n\""
"            \"                    (and/c path? complete-path?))\\n\""
"            \"              (non-empty-listof symbol?)))\")"
" p_59)))"
"(weak-intern! resolved-module-paths(resolved-module-path1.1 p_59)))))"
"(define-values"
"(resolved-module-path->module-path)"
"(lambda(r_73)"
"(let-values(((name_74)(1/resolved-module-path-name r_73)))"
"(let-values(((root-name_75)(if(pair? name_74)(car name_74) name_74)))"
"(let-values(((root-mod-path_76)(if(path? root-name_75) root-name_75(list 'quote root-name_75))))"
"(if(pair? name_74)(list* 'submod root-mod-path_76(cdr name_74)) root-mod-path_76))))))"
"(define-values"
"(struct:module-path-index"
" module-path-index2.1"
" 1/module-path-index?"
" module-path-index-path"
" module-path-index-base"
" module-path-index-resolved"
" module-path-index-shift-cache"
" set-module-path-index-resolved!"
" set-module-path-index-shift-cache!)"
"(let-values(((struct:_77 make-_78 ?_79 -ref_80 -set!_81)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(r_133 port_134 mode_135)"
"(begin"
"                           (write-string \"#<module-path-index\" port_134)"
"(if(top-level-module-path-index? r_133)"
"                             (let-values () (fprintf port_134 \":top-level\"))"
"(if(module-path-index-path r_133)"
"(let-values()"
"(let-values(((l_136)"
"((letrec-values(((loop_137)"
"(lambda(r_138)"
"(if(not r_138)"
"(let-values() null)"
"(if(1/resolved-module-path? r_138)"
"                                                                       (let-values () (list \"+\" (format \"~a\" r_138)))"
"(if(module-path-index-path r_138)"
"(let-values()"
"(cons"
"(format"
"                                                                             \"~.s\""
"(module-path-index-path r_138))"
"(loop_137(module-path-index-base r_138))))"
"(if(module-path-index-resolved r_138)"
"(let-values()"
"(list"
"                                                                              \"+\""
"(format"
"                                                                               \"~a\""
"(module-path-index-resolved r_138))))"
"(let-values() null))))))))"
" loop_137)"
" r_133)))"
"(fprintf"
" port_134"
"                                    \":~.a\""
"(apply"
" string-append"
"(car l_136)"
"(let-values(((lst_139)(cdr l_136)))"
"(begin"
"(if(list? lst_139)(void)(let-values()(in-list lst_139)))"
"((letrec-values(((for-loop_140)"
"(lambda(lst_141)"
"(if(pair? lst_141)"
"(let-values(((i_142)(unsafe-car lst_141))"
"((rest_143)(unsafe-cdr lst_141)))"
"(let-values(((post-guard-var_144)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_145)"
"(let-values()"
"(let-values()"
"                                                                                       (format \" ~a\" i_142)))))"
"(let-values(((result_146)"
"(if(post-guard-var_144)"
"(for-loop_140 rest_143)"
" null)))"
"(cons elem_145 result_146))))))"
" null))))"
" for-loop_140)"
" lst_139)))))))"
"(if(module-path-index-resolved r_133)"
"                                 (let-values () (fprintf port_134 \"=~a\" (module-path-index-resolved r_133)))"
"(void))))"
"                           (write-string \">\" port_134))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_147 b_148 eql?_149)"
"(if(eql?_149(module-path-index-path a_147)(module-path-index-path b_148))"
"(eql?_149(module-path-index-base a_147)(module-path-index-base b_148))"
" #f))"
"(lambda(a_150 hash-code_151)"
"(+"
"(hash-code_151(module-path-index-path a_150))"
"(hash-code_151(module-path-index-base a_150))))"
"(lambda(a_152 hash-code_153)"
"(+"
"(hash-code_153(module-path-index-path a_152))"
"(hash-code_153(module-path-index-base a_152)))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index)))))"
"(values"
" struct:_77"
" make-_78"
" ?_79"
"(make-struct-field-accessor -ref_80 0 'path)"
"(make-struct-field-accessor -ref_80 1 'base)"
"(make-struct-field-accessor -ref_80 2 'resolved)"
"(make-struct-field-accessor -ref_80 3 'shift-cache)"
"(make-struct-field-mutator -set!_81 2 'resolved)"
"(make-struct-field-mutator -set!_81 3 'shift-cache))))"
"(define-values"
"(deserialize-module-path-index)"
"(case-lambda"
"((path_154 base_155)(1/module-path-index-join path_154 base_155))"
"((name_156)(make-self-module-path-index(1/make-resolved-module-path name_156)))"
"(() top-level-module-path-index)))"
"(define-values"
"(1/module-path-index-resolve)"
"(let-values(((module-path-index-resolve6_157)"
"(lambda(mpi5_158 load?3_159 load?4_160)"
"(let-values(((mpi_161) mpi5_158))"
"(let-values(((load?_162)(if load?4_160 load?3_159 #f)))"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_161)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-path-index-resolve \"module-path-index?\" mpi_161)))"
"(let-values(((or-part_163)(module-path-index-resolved mpi_161)))"
"(if or-part_163"
" or-part_163"
"(let-values(((mod-name_164)"
"((1/current-module-name-resolver)"
"(module-path-index-path mpi_161)"
"(module-path-index-resolve/maybe"
"(module-path-index-base mpi_161)"
" load?_162)"
" #f"
" load?_162)))"
"(begin"
"(if(1/resolved-module-path? mod-name_164)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-resolve"
"                                       \"current module name resolver's result is not a resolved module path\""
"                                       \"result\""
" mod-name_164)))"
"(set-module-path-index-resolved! mpi_161 mod-name_164)"
" mod-name_164)))))))))))"
"(case-lambda"
"((mpi_165)(module-path-index-resolve6_157 mpi_165 #f #f))"
"((mpi_166 load?3_167)(module-path-index-resolve6_157 mpi_166 load?3_167 #t)))))"
"(define-values"
"(module-path-index-unresolve)"
"(lambda(mpi_168)"
"(if(module-path-index-resolved mpi_168)"
"(let-values()"
"(let-values(((path_169 base_170)(1/module-path-index-split mpi_168)))"
"(1/module-path-index-join path_169 base_170)))"
"(let-values() mpi_168))))"
"(define-values"
"(1/module-path-index-join)"
"(let-values(((module-path-index-join12_171)"
"(lambda(mod-path10_172 base11_173 submod8_174 submod9_175)"
"(let-values(((mod-path_176) mod-path10_172))"
"(let-values(((base_177) base11_173))"
"(let-values(((submod_178)(if submod9_175 submod8_174 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_179)(not mod-path_176)))"
"(if or-part_179 or-part_179(1/module-path? mod-path_176)))"
"(void)"
"(let-values()"
"                                (raise-argument-error 'module-path-index-join \"(or/c #f module-path?)\" mod-path_176)))"
"(if(let-values(((or-part_180)(not base_177)))"
"(if or-part_180"
" or-part_180"
"(let-values(((or-part_181)(1/resolved-module-path? base_177)))"
"(if or-part_181 or-part_181(1/module-path-index? base_177)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f resolved-module-path? module-path-index?)\""
" base_177)))"
"(if(let-values(((or-part_182)(not submod_178)))"
"(if or-part_182"
" or-part_182"
"(if(pair? submod_178)(if(list? submod_178)(andmap2 symbol? submod_178) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f (non-empty-listof symbol?))\""
" submod_178)))"
"(if(if(not mod-path_176) base_177 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f path with non-#f base\""
"                                 \"given base\""
" base_177))"
"(void))"
"(if(if submod_178 mod-path_176 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f submodule list with non-#f module path\""
"                                 \"given module path\""
" mod-path_176"
"                                 \"given submodule list\""
" submod_178))"
"(void))"
"(if submod_178"
"(let-values()"
"(make-self-module-path-index"
"(1/make-resolved-module-path(cons generic-module-name submod_178))))"
"(let-values()"
"(let-values(((keep-base_183)"
"((letrec-values(((loop_184)"
"(lambda(mod-path_185)"
"(if(path? mod-path_185)"
"(let-values() #f)"
"(if(if(pair? mod-path_185)"
"(eq? 'quote(car mod-path_185))"
" #f)"
"(let-values() #f)"
"(if(symbol? mod-path_185)"
"(let-values() #f)"
"(if(if(pair? mod-path_185)"
"(eq? 'submod(car mod-path_185))"
" #f)"
"(let-values()(loop_184(cadr mod-path_185)))"
"(let-values() base_177))))))))"
" loop_184)"
" mod-path_176)))"
"(module-path-index2.1 mod-path_176 keep-base_183 #f #f))))))))))))"
"(case-lambda"
"((mod-path_186 base_187)(module-path-index-join12_171 mod-path_186 base_187 #f #f))"
"((mod-path_188 base_189 submod8_190)(module-path-index-join12_171 mod-path_188 base_189 submod8_190 #t)))))"
"(define-values"
"(module-path-index-resolve/maybe)"
"(lambda(base_191 load?_192)"
"(if(1/module-path-index? base_191)(1/module-path-index-resolve base_191 load?_192) base_191)))"
"(define-values"
"(1/module-path-index-split)"
"(lambda(mpi_193)"
"(begin"
"(if(1/module-path-index? mpi_193)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-split \"module-path-index?\" mpi_193)))"
"(values(module-path-index-path mpi_193)(module-path-index-base mpi_193)))))"
"(define-values"
"(1/module-path-index-submodule)"
"(lambda(mpi_194)"
"(begin"
"(if(1/module-path-index? mpi_194)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-submodule \"module-path-index?\" mpi_194)))"
"(if(not(module-path-index-path mpi_194))"
"(let-values(((r_195)(module-path-index-resolved mpi_194)))"
"(if r_195(let-values(((p_196)(1/resolved-module-path-name r_195)))(if(pair? p_196)(cdr p_196) #f)) #f))"
" #f))))"
"(define-values"
"(make-self-module-path-index)"
"(case-lambda"
"((name_197)(module-path-index2.1 #f #f name_197 #f))"
"((name_198 enclosing_199)"
"(make-self-module-path-index"
"(let-values(((name23_200) name_198)"
"((temp24_201)(if enclosing_199(1/module-path-index-resolve enclosing_199) #f)))"
"(build-module-name18.1 #f #f name23_200 temp24_201))))))"
"(define-values(generic-self-mpis)(make-weak-hash))"
"(define-values(generic-module-name) '|expanded module|)"
"(define-values"
"(make-generic-self-module-path-index)"
"(lambda(self_202)"
"(let-values(((r_203)(resolved-module-path-to-generic-resolved-module-path(module-path-index-resolved self_202))))"
"(let-values(((or-part_204)"
"(let-values(((e_205)(hash-ref generic-self-mpis r_203 #f)))"
"(if e_205(ephemeron-value e_205) #f))))"
"(if or-part_204"
" or-part_204"
"(let-values(((mpi_206)(module-path-index2.1 #f #f r_203 #f)))"
"(begin(hash-set! generic-self-mpis r_203(make-ephemeron r_203 mpi_206)) mpi_206)))))))"
"(define-values"
"(resolved-module-path-to-generic-resolved-module-path)"
"(lambda(r_207)"
"(let-values(((name_208)(1/resolved-module-path-name r_207)))"
"(1/make-resolved-module-path"
"(if(symbol? name_208) generic-module-name(cons generic-module-name(cdr name_208)))))))"
"(define-values"
"(imitate-generic-module-path-index!)"
"(lambda(mpi_209)"
"(let-values(((r_210)(module-path-index-resolved mpi_209)))"
"(if r_210"
"(let-values()"
"(set-module-path-index-resolved! mpi_209(resolved-module-path-to-generic-resolved-module-path r_210)))"
"(void)))))"
"(define-values"
"(module-path-index-shift)"
"(lambda(mpi_211 from-mpi_212 to-mpi_213)"
"(if(eq? mpi_211 from-mpi_212)"
"(let-values() to-mpi_213)"
"(let-values()"
"(let-values(((base_214)(module-path-index-base mpi_211)))"
"(if(not base_214)"
"(let-values() mpi_211)"
"(let-values()"
"(let-values(((shifted-base_215)(module-path-index-shift base_214 from-mpi_212 to-mpi_213)))"
"(if(eq? shifted-base_215 base_214)"
"(let-values() mpi_211)"
"(let-values(((c1_216)(shift-cache-ref(module-path-index-shift-cache shifted-base_215) mpi_211)))"
"(if c1_216"
" c1_216"
"(let-values()"
"(let-values(((shifted-mpi_217)"
"(module-path-index2.1(module-path-index-path mpi_211) shifted-base_215 #f #f)))"
"(begin"
"(shift-cache-set!(module-path-index-shift-cache! shifted-base_215) mpi_211 shifted-mpi_217)"
" shifted-mpi_217))))))))))))))"
"(define-values"
"(module-path-index-shift-cache!)"
"(lambda(mpi_218)"
"(let-values(((or-part_219)"
"(let-values(((cache_220)(module-path-index-shift-cache mpi_218)))"
"(if cache_220(if(weak-box-value cache_220) cache_220 #f) #f))))"
"(if or-part_219"
" or-part_219"
"(let-values(((cache_221)(make-weak-box(box '#hasheq()))))"
"(begin(set-module-path-index-shift-cache! mpi_218 cache_221) cache_221))))))"
"(define-values"
"(shift-cache-ref)"
"(lambda(cache_222 v_223)"
"(if cache_222"
"(let-values(((b_224)(weak-box-value cache_222)))(if b_224(hash-ref(unbox b_224) v_223 #f) #f))"
" #f)))"
"(define-values"
"(shift-cache-set!)"
"(lambda(cache_225 v_226 r_227)"
"(let-values(((b_228)(weak-box-value cache_225)))"
"(if b_228(let-values()(set-box! b_228(hash-set(unbox b_228) v_226 r_227)))(void)))))"
"(define-values(top-level-module-path-index)(make-self-module-path-index(1/make-resolved-module-path 'top-level)))"
"(define-values(top-level-module-path-index?)(lambda(mpi_229)(eq? top-level-module-path-index mpi_229)))"
"(define-values"
"(core-module-name-resolver)"
"(case-lambda"
"((name_232 from-namespace_233)(void))"
"((p_234 enclosing_235 source-stx-stx_236 load?_237)"
"(begin"
"(if(1/module-path? p_234)"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"module-path?\" p_234)))"
"(if(let-values(((or-part_238)(not enclosing_235)))"
"(if or-part_238 or-part_238(1/resolved-module-path? enclosing_235)))"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"resolved-module-path?\" enclosing_235)))"
"(if(if(list? p_234)(if(=(length p_234) 2)(if(eq? 'quote(car p_234))(symbol?(cadr p_234)) #f) #f) #f)"
"(let-values()(1/make-resolved-module-path(cadr p_234)))"
"        (if (if (list? p_234) (if (eq? 'submod (car p_234)) (equal? \"..\" (cadr p_234)) #f) #f)"
"(let-values()"
"(let-values(((lst_239)(cdr p_234)))"
"(begin"
"(if(list? lst_239)(void)(let-values()(in-list lst_239)))"
"((letrec-values(((for-loop_240)"
"(lambda(enclosing_241 lst_242)"
"(if(pair? lst_242)"
"(let-values(((s_243)(unsafe-car lst_242))((rest_244)(unsafe-cdr lst_242)))"
"(let-values(((enclosing_245)"
"(let-values(((enclosing_246) enclosing_241))"
"(let-values(((enclosing_247)"
"(let-values()"
"(let-values(((s25_249) s_243)"
"((enclosing26_250) enclosing_246)"
"((p27_251) p_234))"
"(build-module-name18.1"
" p27_251"
" #t"
" s25_249"
" enclosing26_250)))))"
"(values enclosing_247)))))"
"(if(not #f)(for-loop_240 enclosing_245 rest_244) enclosing_245)))"
" enclosing_241))))"
" for-loop_240)"
" enclosing_235"
" lst_239))))"
"          (if (if (list? p_234) (if (eq? 'submod (car p_234)) (equal? \".\" (cadr p_234)) #f) #f)"
"(let-values()"
"(let-values(((lst_252)(cddr p_234)))"
"(begin"
"(if(list? lst_252)(void)(let-values()(in-list lst_252)))"
"((letrec-values(((for-loop_253)"
"(lambda(enclosing_254 lst_255)"
"(if(pair? lst_255)"
"(let-values(((s_256)(unsafe-car lst_255))((rest_257)(unsafe-cdr lst_255)))"
"(let-values(((enclosing_258)"
"(let-values(((enclosing_259) enclosing_254))"
"(let-values(((enclosing_260)"
"(let-values()"
"(let-values(((s28_262) s_256)"
"((enclosing29_263) enclosing_259)"
"((p30_264) p_234))"
"(build-module-name18.1"
" p30_264"
" #t"
" s28_262"
" enclosing29_263)))))"
"(values enclosing_260)))))"
"(if(not #f)(for-loop_253 enclosing_258 rest_257) enclosing_258)))"
" enclosing_254))))"
" for-loop_253)"
" enclosing_235"
" lst_252))))"
"(if(if(list? p_234)(eq? 'submod(car p_234)) #f)"
"(let-values()"
"(let-values(((base_265)((1/current-module-name-resolver)(cadr p_234) enclosing_235 #f #f)))"
"(let-values(((lst_266)(cddr p_234)))"
"(begin"
"(if(list? lst_266)(void)(let-values()(in-list lst_266)))"
"((letrec-values(((for-loop_267)"
"(lambda(enclosing_268 lst_269)"
"(if(pair? lst_269)"
"(let-values(((s_270)(unsafe-car lst_269))"
"((rest_271)(unsafe-cdr lst_269)))"
"(let-values(((enclosing_272)"
"(let-values(((enclosing_273) enclosing_268))"
"(let-values(((enclosing_274)"
"(let-values()"
"(let-values(((s31_276) s_270)"
"((enclosing32_277)"
" enclosing_273)"
"((p33_278) p_234))"
"(build-module-name18.1"
" p33_278"
" #t"
" s31_276"
" enclosing32_277)))))"
"(values enclosing_274)))))"
"(if(not #f)(for-loop_267 enclosing_272 rest_271) enclosing_272)))"
" enclosing_268))))"
" for-loop_267)"
" base_265"
" lst_266)))))"
"              (let-values () (error 'core-module-name-resolver \"not a supported module path: ~v\" p_234))))))))))"
"(define-values"
"(build-module-name18.1)"
"(lambda(original14_279 original15_280 name16_281 enclosing17_282)"
"(let-values(((name_283) name16_281))"
"(let-values(((enclosing_284) enclosing17_282))"
"(let-values(((orig-name_285)(if original15_280 original14_279 name_283)))"
"(let-values()"
"(let-values(((enclosing-module-name_286)"
"(if enclosing_284(1/resolved-module-path-name enclosing_284) #f)))"
"(1/make-resolved-module-path"
"(if(not enclosing-module-name_286)"
"(let-values() name_283)"
"(if(symbol? enclosing-module-name_286)"
"(let-values()(list enclosing-module-name_286 name_283))"
"                   (if (equal? name_283 \"..\")"
"(let-values()"
"(if(symbol? enclosing-module-name_286)"
"                         (let-values () (error \"too many \\\"..\\\"s:\" orig-name_285))"
"(if(= 2(length enclosing-module-name_286))"
"(let-values()(car enclosing-module-name_286))"
"(let-values()(alt-reverse(cdr(alt-reverse enclosing-module-name_286)))))))"
"(let-values()(append enclosing-module-name_286(list name_283))))))))))))))"
"(define-values"
"(1/current-module-name-resolver)"
"(make-parameter"
" core-module-name-resolver"
"(lambda(v_304)"
"(begin"
"(if(if(procedure? v_304)(if(procedure-arity-includes? v_304 2)(procedure-arity-includes? v_304 4) #f) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-name-resolver"
"            \"(and/c (procedure-arity-includes/c 2) (procedure-arity-includes/c 4))\""
" v_304)))"
" v_304))))"
"(define-values"
"(1/current-module-declare-name)"
"(make-parameter"
" #f"
"(lambda(r_305)"
"(begin"
"(if(let-values(((or-part_306)(not r_305)))(if or-part_306 or-part_306(1/resolved-module-path? r_305)))"
"(void)"
"         (let-values () (raise-argument-error 'current-module-declare-name \"(or/c #f resolved-module-path?)\" r_305)))"
" r_305))))"
"(define-values"
"(1/current-module-declare-source)"
"(make-parameter"
" #f"
"(lambda(s_307)"
"(begin"
"(if(let-values(((or-part_308)(not s_307)))"
"(if or-part_308"
" or-part_308"
"(let-values(((or-part_309)(symbol? s_307)))"
"(if or-part_309 or-part_309(if(path? s_307)(complete-path? s_307) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-declare-source"
"            \"(or/c #f symbol? (and/c path? complete-path?))\""
" s_307)))"
" s_307))))"
"(define-values"
"(substitute-module-declare-name)"
"(lambda(default-name_310)"
"(let-values(((current-name_311)(1/current-module-declare-name)))"
"(let-values(((root-name_312)"
"(if current-name_311"
"(resolved-module-path-root-name current-name_311)"
"(if(pair? default-name_310)(car default-name_310) default-name_310))))"
"(1/make-resolved-module-path"
"(if(pair? default-name_310)(cons root-name_312(cdr default-name_310)) root-name_312))))))"
"(void)"
"(void)"
"(define-values"
"(force/composable)"
"(lambda(root_98)"
"(let-values(((v_99)(unsafe-struct-ref root_98 0)))"
"(if(procedure? v_99)"
"(let-values()"
"(begin"
"(unsafe-struct-set! root_98 0(make-running(object-name v_99)))"
"(call-with-exception-handler"
"(lambda(e_100)(begin(unsafe-struct-set! root_98 0(make-reraise e_100)) e_100))"
"(lambda()"
"((letrec-values(((loop_101)"
"(lambda(v_102)"
"(if(composable-promise? v_102)"
"(let-values()"
"(let-values(((v*_103)(unsafe-struct-ref v_102 0)))"
"(begin"
"(unsafe-struct-set! v_102 0 root_98)"
"(if(procedure? v*_103)"
"(let-values()(loop_101(v*_103)))"
"(if(pair? v*_103)"
"(let-values()"
"(begin(unsafe-struct-set! root_98 0 v*_103)(unsafe-car v*_103)))"
"(let-values()(loop_101 v*_103)))))))"
"(if(promise? v_102)"
"(let-values()(begin(unsafe-struct-set! root_98 0 v_102)(force v_102)))"
"(let-values()(begin(unsafe-struct-set! root_98 0(list v_102)) v_102)))))))"
" loop_101)"
"(v_99))))))"
"(if(pair? v_99)"
"(let-values()(if(null?(unsafe-cdr v_99))(unsafe-car v_99)(apply values v_99)))"
"(if(composable-promise? v_99)"
"(let-values()(force/composable v_99))"
"(if(null? v_99)"
"(let-values()(values))"
"(if(promise? v_99)"
"(let-values()(force v_99))"
"                (let-values () (error 'force \"composable promise with invalid contents: ~e\" v_99))))))))))"
"(define-values"
"(reify-result)"
"(lambda(v_104)"
"(if(pair? v_104)"
"(let-values()(if(null?(unsafe-cdr v_104))(unsafe-car v_104)(apply values v_104)))"
"(if(null? v_104)"
"(let-values()(values))"
"(if(reraise? v_104)"
"(let-values()(v_104))"
"          (let-values () (error 'force \"promise with invalid contents: ~e\" v_104)))))))"
"(define-values"
"(force/generic)"
"(lambda(promise_105)"
"(reify-result"
"(let-values(((v_106)(unsafe-struct-ref promise_105 0)))"
"(if(procedure? v_106)"
"(begin"
"(unsafe-struct-set! promise_105 0(make-running(object-name v_106)))"
"(call-with-exception-handler"
"(lambda(e_107)(begin(unsafe-struct-set! promise_105 0(make-reraise e_107)) e_107))"
"(lambda()"
"(let-values(((vs_108)(call-with-values v_106 list)))"
"(begin(unsafe-struct-set! promise_105 0 vs_108) vs_108)))))"
" v_106)))))"
"(define-values"
"(force)"
"(lambda(promise_109)(if(promise? promise_109)((promise-forcer promise_109) promise_109) promise_109)))"
"(define-values"
"(promise-printer)"
"(lambda(promise_110 port_111 write?_112)"
"((letrec-values(((loop_113)"
"(lambda(v_114)"
"(if(reraise? v_114)"
"(let-values()"
"(let-values(((r_115)(reraise-val v_114)))"
"(if(exn? r_115)"
"(fprintf"
" port_111"
"                                 (if write?_112 \"#<promise!exn!~s>\" \"#<promise!exn!~a>\")"
"(exn-message r_115))"
"                                (fprintf port_111 (if write?_112 \"#<promise!raise!~s>\" \"#<promise!raise!~a>\") r_115))))"
"(if(running? v_114)"
"(let-values()"
"(let-values(((r_116)(running-name v_114)))"
"(if r_116"
"                                  (fprintf port_111 \"#<promise:!running!~a>\" r_116)"
"                                  (fprintf port_111 \"#<promise:!running>\"))))"
"(if(procedure? v_114)"
"(let-values()"
"(let-values(((c1_117)(object-name v_114)))"
"(if c1_117"
"                                    ((lambda (n_118) (fprintf port_111 \"#<promise:~a>\" n_118)) c1_117)"
"                                    (let-values () (display \"#<promise>\" port_111)))))"
"(if(promise? v_114)"
"(let-values()(loop_113(unsafe-struct-ref v_114 0)))"
"(if(null? v_114)"
"                                  (let-values () (fprintf port_111 \"#<promise!(values)>\"))"
"(if(null?(cdr v_114))"
"(let-values()"
"                                      (fprintf port_111 (if write?_112 \"#<promise!~s>\" \"#<promise!~a>\") (car v_114)))"
"(let-values()"
"(begin"
"                                        (display \"#<promise!(values\" port_111)"
"                                        (let-values (((fmt_119) (if write?_112 \" ~s\" \" ~a\")))"
"(for-each(lambda(x_120)(fprintf port_111 fmt_119 x_120)) v_114))"
"                                        (display \")>\" port_111))))))))))))"
" loop_113)"
"(unsafe-struct-ref promise_110 0))))"
"(define-values"
"(prop:force promise-forcer)"
"(let-values(((prop_121 pred?_122 get_123)"
"(make-struct-type-property"
" 'forcer"
"(lambda(v_124 info_125)"
"(begin"
"(if(if(procedure? v_124)(procedure-arity-includes? v_124 1) #f)"
"(void)"
"                       (let-values () (raise-argument-error 'prop:force \"(any/c . -> . any)\" v_124)))"
" v_124))"
" null"
" #t)))"
"(values prop_121 get_123)))"
"(define-values"
"(struct:promise make-promise promise? promise-val set-promise-val!)"
"(let-values(((struct:_126 make-_127 ?_128 -ref_129 -set!_130)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:force force/generic)(cons prop:custom-write promise-printer))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise)))))"
"(values"
" struct:_126"
" make-_127"
" ?_128"
"(make-struct-field-accessor -ref_129 0 'val)"
"(make-struct-field-mutator -set!_130 0 'val))))"
"(define-values"
"(struct:composable-promise make-composable-promise composable-promise?)"
"(let-values(((struct:_146 make-_147 ?_148 -ref_149 -set!_150)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'composable-promise"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force force/composable))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'composable-promise)))))"
"(values struct:_146 make-_147 ?_148)))"
"(define-values(delay) make-promise)"
"(define-values"
"(struct:reraise make-reraise reraise? reraise-val)"
"(let-values(((struct:_161 make-_162 ?_163 -ref_164 -set!_165)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'reraise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:procedure(lambda(this_182)(raise(reraise-val this_182)))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'reraise)))))"
"(values struct:_161 make-_162 ?_163(make-struct-field-accessor -ref_164 0 'val))))"
"(define-values"
"(struct:running make-running running? running-name)"
"(let-values(((struct:_183 make-_184 ?_185 -ref_186 -set!_187)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(this_208 port_209 write?_210)"
"                         (fprintf port_209 (if write?_210 \"#<running:~s>\" \"#<running:~a>\") (running-name this_208))))"
"(cons"
" prop:procedure"
"(lambda(this_211)"
"(let-values(((name_212)(running-name this_211)))"
"(if name_212"
"                             (error 'force \"reentrant promise `~.s'\" name_212)"
"                             (error 'force \"reentrant promise\"))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running)))))"
"(values struct:_183 make-_184 ?_185(make-struct-field-accessor -ref_186 0 'name))))"
"(void)"
"(void)"
"(define-values"
"(struct:promise/name make-promise/name promise/name?)"
"(let-values(((struct:_8 make-_9 ?_10 -ref_11 -set!_12)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/name"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_24)((unsafe-struct-ref p_24 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/name)))))"
"(values struct:_8 make-_9 ?_10)))"
"(define-values"
"(struct:promise/strict make-promise/strict promise/strict?)"
"(let-values(((struct:_25 make-_26 ?_27 -ref_28 -set!_29)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/strict"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_41)(reify-result(unsafe-struct-ref p_41 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/strict)))))"
"(values struct:_25 make-_26 ?_27)))"
"(define-values"
"(struct:running-thread make-running-thread running-thread? running-thread-thread)"
"(let-values(((struct:_43 make-_44 ?_45 -ref_46 -set!_47)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running-thread"
" struct:running"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running-thread)))))"
"(values struct:_43 make-_44 ?_45(make-struct-field-accessor -ref_46 0 'thread))))"
"(define-values"
"(struct:syncinfo"
" make-syncinfo"
" syncinfo?"
" syncinfo-thunk"
" syncinfo-done-evt"
" syncinfo-done-sema"
" syncinfo-access-sema"
" set-syncinfo-thunk!)"
"(let-values(((struct:_63 make-_64 ?_65 -ref_66 -set!_67)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syncinfo #f 4 0 #f null(current-inspector) #f '(1 2 3) #f 'syncinfo)))))"
"(values"
" struct:_63"
" make-_64"
" ?_65"
"(make-struct-field-accessor -ref_66 0 'thunk)"
"(make-struct-field-accessor -ref_66 1 'done-evt)"
"(make-struct-field-accessor -ref_66 2 'done-sema)"
"(make-struct-field-accessor -ref_66 3 'access-sema)"
"(make-struct-field-mutator -set!_67 0 'thunk))))"
"(define-values"
"(struct:promise/sync make-promise/sync promise/sync?)"
"(let-values(((struct:_98 make-_99 ?_100 -ref_101 -set!_102)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/sync"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_127)"
"(let-values(((v_128)(unsafe-struct-ref p_127 0)))"
"(wrap-evt(if(syncinfo? v_128)(syncinfo-done-evt v_128) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_129)"
"(let-values(((v_130)(unsafe-struct-ref p_129 0)))"
"(reify-result"
"(if(not(syncinfo? v_130))"
"(let-values() v_130)"
"(if(running-thread?(syncinfo-thunk v_130))"
"(let-values()"
"(let-values(((r_131)(syncinfo-thunk v_130)))"
"(if(eq?(running-thread-thread r_131)(current-thread))"
"(r_131)"
"(begin(sync(syncinfo-done-evt v_130))(unsafe-struct-ref p_129 0)))))"
"(let-values()"
"(begin"
"(call-with-semaphore"
"(syncinfo-access-sema v_130)"
"(lambda(p_132 v_133)"
"(let-values(((thunk_134)(syncinfo-thunk v_133)))"
"(let-values(((done_135)(syncinfo-done-sema v_133)))"
"(if(running-thread? thunk_134)"
"(void)"
"(let-values()"
"(begin"
"(set-syncinfo-thunk!"
" v_133"
"(make-running-thread(object-name thunk_134)(current-thread)))"
"(call-with-exception-handler"
"(lambda(e_136)"
"(begin"
"(unsafe-struct-set! p_132 0(make-reraise e_136))"
"(semaphore-post done_135)"
" e_136))"
"(lambda()"
"(begin"
"(unsafe-struct-set! p_132 0(call-with-values thunk_134 list))"
"(semaphore-post done_135))))))))))"
" #f"
" p_129"
" v_130)"
"(unsafe-struct-ref p_129 0)))))))))"
"(cons"
" prop:custom-write"
"(lambda(p_137 port_138 write?_139)"
"(let-values(((v_140)(unsafe-struct-ref p_137 0)))"
"(promise-printer"
"(if(syncinfo? v_140)(make-promise(syncinfo-thunk v_140)) p_137)"
" port_138"
" write?_139)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/sync)))))"
"(values struct:_98 make-_99 ?_100)))"
"(define-values"
"(struct:promise/thread make-promise/thread promise/thread?)"
"(let-values(((struct:_143 make-_144 ?_145 -ref_146 -set!_147)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/thread"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_164)"
"(let-values(((v_165)(unsafe-struct-ref p_164 0)))"
"(wrap-evt(if(running? v_165)(running-thread-thread v_165) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_166)"
"(let-values(((v_167)(unsafe-struct-ref p_166 0)))"
"(reify-result"
"(if(running-thread? v_167)"
"(let-values(((t_168)(running-thread-thread v_167)))"
"(let-values((()(begin(thread-wait t_168)(values))))"
"(let-values(((v_169)(unsafe-struct-ref p_166 0)))"
"(if(running-thread? v_169)"
"(error"
" 'force"
"                                       \"promise's thread terminated ~a\\n  promise: ~e\""
"                                       \"without result or exception\""
" p_166)"
" v_169))))"
" v_167))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/thread)))))"
"(values struct:_143 make-_144 ?_145)))"
"(define-values"
"(struct:promise/idle make-promise/idle promise/idle?)"
"(let-values(((struct:_177 make-_178 ?_179 -ref_180 -set!_181)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/idle"
" struct:promise/thread"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:force"
"(lambda(p_195)"
"(let-values(((v_196)(unsafe-struct-ref p_195 0)))"
"(reify-result"
"(if(procedure? v_196)"
"(let-values(((controller_197)"
"(if(running-thread? v_196)(running-thread-thread v_196)(v_196))))"
"(begin"
"(thread-send controller_197 'force!)"
"(thread-wait controller_197)"
"(unsafe-struct-ref p_195 0)))"
" v_196))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/idle)))))"
"(values struct:_177 make-_178 ?_179)))"
"(void)"
"(void)"
"(define-values"
"(phase?)"
"(lambda(v_1)(let-values(((or-part_2)(not v_1)))(if or-part_2 or-part_2(exact-integer? v_1)))))"
"(define-values(phase+)(lambda(a_3 b_4)(if a_3(if b_4(+ a_3 b_4) #f) #f)))"
"(define-values(phase-)(lambda(a_5 b_6)(if a_5(if b_6(- a_5 b_6) #f) #f)))"
"(define-values"
"(phase<?)"
"(lambda(a_7 b_8)(if(not b_8)(let-values() #f)(if(not a_7)(let-values() #t)(let-values()(< a_7 b_8))))))"
"(define-values(zero-phase?)(lambda(a_9)(eq? a_9 0)))"
"(define-values(label-phase?)(lambda(a_10)(not a_10)))"
" (define-values (phase?-string) \"(or/c exact-integer? #f)\")"
"(void)"
"(void)"
"(define-values"
"(struct:serialize-state"
" serialize-state1.1"
" serialize-state?"
" serialize-state-reachable-scopes"
" serialize-state-bindings-intern"
" serialize-state-bulk-bindings-intern"
" serialize-state-scopes"
" serialize-state-shifted-multi-scopes"
" serialize-state-mpi-shifts"
" serialize-state-context-triples"
" serialize-state-props"
" serialize-state-interned-props"
" serialize-state-syntax-context"
" serialize-state-sharing-syntaxes)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'serialize-state"
" #f"
" 11"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10)"
" #f"
" 'serialize-state)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'reachable-scopes)"
"(make-struct-field-accessor -ref_4 1 'bindings-intern)"
"(make-struct-field-accessor -ref_4 2 'bulk-bindings-intern)"
"(make-struct-field-accessor -ref_4 3 'scopes)"
"(make-struct-field-accessor -ref_4 4 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 5 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 6 'context-triples)"
"(make-struct-field-accessor -ref_4 7 'props)"
"(make-struct-field-accessor -ref_4 8 'interned-props)"
"(make-struct-field-accessor -ref_4 9 'syntax-context)"
"(make-struct-field-accessor -ref_4 10 'sharing-syntaxes))))"
"(define-values"
"(make-serialize-state)"
"(lambda(reachable-scopes_71)"
"(serialize-state1.1"
" reachable-scopes_71"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(make-hash)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(box null)"
"(make-hasheq))))"
"(define-values"
"(intern-scopes)"
"(lambda(scs_72 state_73)"
"(let-values(((or-part_74)(hash-ref(serialize-state-scopes state_73) scs_72 #f)))"
"(if or-part_74 or-part_74(begin(hash-set!(serialize-state-scopes state_73) scs_72 scs_72) scs_72)))))"
"(define-values"
"(intern-shifted-multi-scopes)"
"(lambda(sms_75 state_76)"
"(let-values(((or-part_77)(hash-ref(serialize-state-shifted-multi-scopes state_76) sms_75 #f)))"
"(if or-part_77"
" or-part_77"
"(begin(hash-set!(serialize-state-shifted-multi-scopes state_76) sms_75 sms_75) sms_75)))))"
"(define-values"
"(intern-mpi-shifts)"
"(lambda(mpi-shifts_78 state_79)"
"(if(null? mpi-shifts_78)"
"(let-values() null)"
"(let-values()"
"(let-values(((tail_80)(intern-mpi-shifts(cdr mpi-shifts_78) state_79)))"
"(let-values(((tail-table_81)"
"(let-values(((or-part_82)(hash-ref(serialize-state-mpi-shifts state_79) tail_80 #f)))"
"(if or-part_82"
" or-part_82"
"(let-values(((ht_83)(make-hasheq)))"
"(begin(hash-set!(serialize-state-mpi-shifts state_79) tail_80 ht_83) ht_83))))))"
"(let-values(((or-part_84)(hash-ref tail-table_81(car mpi-shifts_78) #f)))"
"(if or-part_84"
" or-part_84"
"(let-values(((v_85)(cons(car mpi-shifts_78) tail_80)))"
"(begin(hash-set! tail-table_81(car mpi-shifts_78) v_85) v_85))))))))))"
"(define-values"
"(intern-context-triple)"
"(lambda(scs_86 sms_87 mpi-shifts_88 state_89)"
"(let-values(((scs-ht_90)"
"(let-values(((or-part_92)(hash-ref(serialize-state-context-triples state_89) scs_86 #f)))"
"(if or-part_92"
" or-part_92"
"(let-values(((ht_93)(make-hasheq)))"
"(begin(hash-set!(serialize-state-context-triples state_89) scs_86 ht_93) ht_93))))))"
"(let-values(((sms-ht_91)"
"(let-values(((or-part_94)(hash-ref scs-ht_90 sms_87 #f)))"
"(if or-part_94"
" or-part_94"
"(let-values(((ht_95)(make-hasheq)))(begin(hash-set! scs-ht_90 sms_87 ht_95) ht_95))))))"
"(let-values(((or-part_96)(hash-ref sms-ht_91 mpi-shifts_88 #f)))"
"(if or-part_96"
" or-part_96"
"(let-values(((vec_97)(vector-immutable scs_86 sms_87 mpi-shifts_88)))"
"(begin(hash-set! sms-ht_91 mpi-shifts_88 vec_97) vec_97))))))))"
"(define-values"
"(intern-properties)"
"(lambda(all-props_98 get-preserved-props_99 state_100)"
"(let-values(((v_101)(hash-ref(serialize-state-props state_100) all-props_98 'no)))"
"(if(eq? v_101 'no)"
"(let-values()"
"(let-values(((preserved-props_102)(get-preserved-props_99)))"
"(let-values(((p_103)"
"(if(zero?(hash-count preserved-props_102))"
"(let-values() #f)"
"(let-values(((c1_104)"
"(hash-ref(serialize-state-interned-props state_100) preserved-props_102 #f)))"
"(if c1_104"
"((lambda(p_105) p_105) c1_104)"
"(let-values()"
"(begin"
"(hash-set!"
"(serialize-state-interned-props state_100)"
" preserved-props_102"
" preserved-props_102)"
" preserved-props_102)))))))"
"(begin(hash-set!(serialize-state-props state_100) all-props_98 p_103) p_103))))"
"(let-values() v_101)))))"
"(define-values"
"(push-syntax-context!)"
"(lambda(state_106 v_107)"
"(let-values(((b_108)(serialize-state-syntax-context state_106)))(set-box! b_108(cons v_107(unbox b_108))))))"
"(define-values"
"(get-syntax-context)"
"(lambda(state_109)"
"(let-values(((b_110)(serialize-state-syntax-context state_109)))"
"(if(null?(unbox b_110)) #f(car(unbox b_110))))))"
"(define-values"
"(pop-syntax-context!)"
"(lambda(state_111)"
"(let-values(((b_112)(serialize-state-syntax-context state_111)))(set-box! b_112(cdr(unbox b_112))))))"
"(void)"
"(void)"
"(define-values"
"(immutable-prefab-struct-key)"
"(lambda(v_1)(let-values(((k_2)(prefab-struct-key v_1)))(if k_2(if(all-fields-immutable? k_2) k_2 #f) #f))))"
"(define-values"
"(all-fields-immutable?)"
"(lambda(k_3)"
"(let-values(((or-part_4)(symbol? k_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(null? k_3)))"
"(if or-part_5"
" or-part_5"
"(let-values(((rk_6)(cdr k_3)))"
"(let-values(((rk_7)(if(if(pair? rk_6)(exact-integer?(car rk_6)) #f)(cdr rk_6) rk_6)))"
"(let-values(((rk_8)"
"(if(if(pair? rk_7)(pair?(car rk_7)) #f)"
"(if(zero?(caar rk_7))(cdr rk_7)(cons '#(1)(cdr rk_7)))"
" rk_7)))"
"(if(if(pair? rk_8)(vector?(car rk_8)) #f)"
"(if(zero?(vector-length(car rk_8)))(all-fields-immutable?(cdr rk_8)) #f)"
"(all-fields-immutable? rk_8)))))))))))"
"(void)"
"(void)"
"(define-values"
"(datum-map-slow)"
"(lambda(tail?_28 s_29 f_30 seen_31)"
"((letrec-values(((loop_32)"
"(lambda(tail?_33 s_34 prev-seen_35)"
"(let-values(((seen_36)"
"(if(if prev-seen_35(datum-has-elements? s_34) #f)"
"(let-values()"
"(if(hash-ref prev-seen_35 s_34 #f)"
"(let-values()((hash-ref prev-seen_35 'cycle-fail) s_34))"
"(let-values()(hash-set prev-seen_35 s_34 #t))))"
"(let-values() prev-seen_35))))"
"(if(null? s_34)"
"(let-values()(f_30 tail?_33 s_34))"
"(if(pair? s_34)"
"(let-values()"
"(f_30 tail?_33(cons(loop_32 #f(car s_34) seen_36)(loop_32 #t(cdr s_34) seen_36))))"
"(if(let-values(((or-part_37)(symbol? s_34)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(boolean? s_34)))"
"(if or-part_38 or-part_38(number? s_34)))))"
"(let-values()(f_30 #f s_34))"
"(if(vector? s_34)"
"(let-values()"
"(f_30"
" #f"
"(vector->immutable-vector"
"(let-values(((len_39)(vector-length s_34)))"
"(begin"
"(if(exact-nonnegative-integer? len_39)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_39)))"
"(let-values(((v_40)(make-vector len_39 0)))"
"(begin"
"(if(zero? len_39)"
"(void)"
"(let-values()"
"(let-values(((vec_41 len_42)"
"(let-values(((vec_43) s_34))"
"(begin"
"(if(vector? vec_43)"
"(void)"
"(let-values()(in-vector vec_43)))"
"(values vec_43(unsafe-vector-length vec_43))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_44)"
"(lambda(i_45 pos_46)"
"(if(unsafe-fx< pos_46 len_42)"
"(let-values(((e_47)"
"(unsafe-vector-ref"
" vec_41"
" pos_46)))"
"(let-values(((i_48)"
"(let-values(((i_49) i_45))"
"(let-values(((i_50)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_40"
" i_49"
"(let-values()"
"(loop_32"
" #f"
" e_47"
" seen_36)))"
"(unsafe-fx+"
" 1"
" i_49)))))"
"(values i_50)))))"
"(if(if(not"
"((lambda x_51"
"(unsafe-fx= i_48 len_39))"
" e_47))"
"(not #f)"
" #f)"
"(for-loop_44"
" i_48"
"(unsafe-fx+ 1 pos_46))"
" i_48)))"
" i_45))))"
" for-loop_44)"
" 0"
" 0)))))"
" v_40)))))))"
"(if(box? s_34)"
"(let-values()(f_30 #f(box-immutable(loop_32 #f(unbox s_34) seen_36))))"
"(let-values(((c1_52)(immutable-prefab-struct-key s_34)))"
"(if c1_52"
"((lambda(key_53)"
"(f_30"
" #f"
"(apply"
" make-prefab-struct"
" key_53"
"(let-values(((v*_54 start*_55 stop*_56 step*_57)"
"(normalise-inputs"
" 'in-vector"
"                                                            \"vector\""
"(lambda(x_58)(vector? x_58))"
"(lambda(x_59)(unsafe-vector-length x_59))"
"(struct->vector s_34)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_60)"
"(lambda(idx_61)"
"(if(unsafe-fx< idx_61 stop*_56)"
"(let-values(((e_62)"
"(unsafe-vector-ref v*_54 idx_61)))"
"(let-values(((post-guard-var_63)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_64)"
"(let-values()"
"(let-values()"
"(loop_32"
" #f"
" e_62"
" seen_36)))))"
"(let-values(((result_65)"
"(if(post-guard-var_63)"
"(for-loop_60"
"(unsafe-fx+ idx_61 1))"
" null)))"
"(cons elem_64 result_65))))))"
" null))))"
" for-loop_60)"
" start*_55))))))"
" c1_52)"
"(if(if(hash? s_34)(immutable? s_34) #f)"
"(let-values()"
"(if(hash-eq? s_34)"
"(let-values()"
"(f_30"
" #f"
"(let-values(((ht_66) s_34))"
"(begin"
"(if((lambda(ht_67)(hash? ht_67)) ht_66)"
"(void)"
"(let-values()(default-in-hash ht_66)))"
"((letrec-values(((for-loop_68)"
"(lambda(table_69 i_70)"
"(if i_70"
"(let-values(((k_71 v_72)"
"(hash-iterate-key+value"
" ht_66"
" i_70)))"
"(let-values(((table_73)"
"(let-values(((table_74)"
" table_69))"
"(let-values(((table_75)"
"(let-values()"
"(let-values(((key_76"
" val_77)"
"(let-values()"
"(values"
" k_71"
"(loop_32"
" #f"
" v_72"
" seen_36)))))"
"(hash-set"
" table_74"
" key_76"
" val_77)))))"
"(values table_75)))))"
"(if(not #f)"
"(for-loop_68"
" table_73"
"(hash-iterate-next ht_66 i_70))"
" table_73)))"
" table_69))))"
" for-loop_68)"
" '#hasheq()"
"(hash-iterate-first ht_66))))))"
"(if(hash-eqv? s_34)"
"(let-values()"
"(f_30"
" #f"
"(let-values(((ht_78) s_34))"
"(begin"
"(if((lambda(ht_79)(hash? ht_79)) ht_78)"
"(void)"
"(let-values()(default-in-hash ht_78)))"
"((letrec-values(((for-loop_80)"
"(lambda(table_81 i_82)"
"(if i_82"
"(let-values(((k_83 v_84)"
"(hash-iterate-key+value"
" ht_78"
" i_82)))"
"(let-values(((table_85)"
"(let-values(((table_86)"
" table_81))"
"(let-values(((table_87)"
"(let-values()"
"(let-values(((key_88"
" val_89)"
"(let-values()"
"(values"
" k_83"
"(loop_32"
" #f"
" v_84"
" seen_36)))))"
"(hash-set"
" table_86"
" key_88"
" val_89)))))"
"(values table_87)))))"
"(if(not #f)"
"(for-loop_80"
" table_85"
"(hash-iterate-next ht_78 i_82))"
" table_85)))"
" table_81))))"
" for-loop_80)"
" '#hasheqv()"
"(hash-iterate-first ht_78))))))"
"(let-values()"
"(f_30"
" #f"
"(let-values(((ht_90) s_34))"
"(begin"
"(if((lambda(ht_91)(hash? ht_91)) ht_90)"
"(void)"
"(let-values()(default-in-hash ht_90)))"
"((letrec-values(((for-loop_92)"
"(lambda(table_93 i_94)"
"(if i_94"
"(let-values(((k_95 v_96)"
"(hash-iterate-key+value"
" ht_90"
" i_94)))"
"(let-values(((table_97)"
"(let-values(((table_98)"
" table_93))"
"(let-values(((table_99)"
"(let-values()"
"(let-values(((key_100"
" val_101)"
"(let-values()"
"(values"
" k_95"
"(loop_32"
" #f"
" v_96"
" seen_36)))))"
"(hash-set"
" table_98"
" key_100"
" val_101)))))"
"(values table_99)))))"
"(if(not #f)"
"(for-loop_92"
" table_97"
"(hash-iterate-next ht_90 i_94))"
" table_97)))"
" table_93))))"
" for-loop_92)"
" '#hash()"
"(hash-iterate-first ht_90)))))))))"
"(let-values()(f_30 #f s_34))))))))))))))"
" loop_32)"
" tail?_28"
" s_29"
" seen_31)))"
"(define-values"
"(datum-has-elements?)"
"(lambda(d_102)"
"(let-values(((or-part_103)(pair? d_102)))"
"(if or-part_103"
" or-part_103"
"(let-values(((or-part_104)(vector? d_102)))"
"(if or-part_104"
" or-part_104"
"(let-values(((or-part_105)(box? d_102)))"
"(if or-part_105"
" or-part_105"
"(let-values(((or-part_106)(immutable-prefab-struct-key d_102)))"
"(if or-part_106"
" or-part_106"
"(if(hash? d_102)(if(immutable? d_102)(positive?(hash-count d_102)) #f) #f)))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:preserved-property-value"
" preserved-property-value1.1"
" preserved-property-value?"
" preserved-property-value-content)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'preserved-property-value"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'preserved-property-value)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'content))))"
"(define-values"
"(plain-property-value)"
"(lambda(v_21)(if(preserved-property-value? v_21)(preserved-property-value-content v_21) v_21)))"
"(define-values"
"(check-value-to-preserve)"
"(lambda(v_23 syntax?_24)"
"(let-values(((s_25) v_23)"
"((f_26)"
"(lambda(tail?_28 v_29)"
"(begin"
"(if(let-values(((or-part_30)(null? v_29)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(boolean? v_29)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)(symbol? v_29)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)(number? v_29)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_34)(char? v_29)))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35)(string? v_29)))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36)(bytes? v_29)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(regexp? v_29)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(syntax?_24 v_29)))"
"(if or-part_38"
" or-part_38"
"(let-values(((or-part_39)(pair? v_29)))"
"(if or-part_39"
" or-part_39"
"(let-values(((or-part_40)(vector? v_29)))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(box? v_29)))"
"(if or-part_41"
" or-part_41"
"(let-values(((or-part_42)(hash? v_29)))"
"(if or-part_42"
" or-part_42"
"(immutable-prefab-struct-key"
" v_29)))))))))))))))))))))))))))"
"(void)"
"(let-values()"
"                          (raise-arguments-error 'write \"disallowed value in preserved syntax property\" \"value\" v_29)))"
" v_29)))"
"((seen_27) disallow-cycles$1))"
"((letrec-values(((loop_43)"
"(lambda(tail?_44 s_45 prev-depth_46)"
"(let-values(((depth_47)(add1 prev-depth_46)))"
"(if(if seen_27(> depth_47 32) #f)"
"(let-values()"
"(datum-map-slow tail?_44 s_45(lambda(tail?_48 s_49)(f_26 tail?_48 s_49)) seen_27))"
"(if(null? s_45)"
"(let-values()(f_26 tail?_44 s_45))"
"(if(pair? s_45)"
"(let-values()"
"(f_26"
" tail?_44"
"(cons(loop_43 #f(car s_45) depth_47)(loop_43 #t(cdr s_45) depth_47))))"
"(if(let-values(((or-part_50)(symbol? s_45)))"
"(if or-part_50"
" or-part_50"
"(let-values(((or-part_51)(boolean? s_45)))"
"(if or-part_51 or-part_51(number? s_45)))))"
"(let-values()(f_26 #f s_45))"
"(if(let-values(((or-part_52)(vector? s_45)))"
"(if or-part_52"
" or-part_52"
"(let-values(((or-part_53)(box? s_45)))"
"(if or-part_53"
" or-part_53"
"(let-values(((or-part_54)(prefab-struct-key s_45)))"
"(if or-part_54 or-part_54(hash? s_45)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_44"
" s_45"
"(lambda(tail?_55 s_56)(f_26 tail?_55 s_56))"
" seen_27))"
"(let-values()(f_26 #f s_45)))))))))))"
" loop_43)"
" #f"
" s_25"
" 0))))"
"(define-values"
"(disallow-cycles$1)"
"(hash"
" 'cycle-fail"
"   (lambda (v_57) (raise-arguments-error 'write \"disallowed cycle in preserved syntax property\" \"at\" v_57))))"
"(void)"
"(void)"
"(define-values(tamper-tainted?)(lambda(v_1)(symbol? v_1)))"
"(define-values(tamper-armed?)(lambda(v_2)(set? v_2)))"
"(define-values(tamper-clean?)(lambda(v_3)(not v_3)))"
"(define-values"
"(tamper-tainted-for-content)"
"(lambda(v_4)(if(datum-has-elements? v_4) 'tainted/need-propagate 'tainted)))"
"(define-values(serialize-tamper)(lambda(t_5)(if(tamper-armed? t_5) 'armed t_5)))"
"(define-values(current-arm-inspectors)(make-parameter(seteq)))"
"(define-values(deserialize-tamper)(lambda(t_6)(if(eq? t_6 'armed)(current-arm-inspectors) t_6)))"
"(void)"
"(void)"
"(define-values"
"(struct:syntax"
" syntax1.1"
" syntax?$1"
" syntax-content"
" syntax-scopes"
" syntax-shifted-multi-scopes"
" syntax-scope-propagations"
" syntax-mpi-shifts"
" syntax-srcloc"
" syntax-props"
" syntax-inspector"
" syntax-tamper"
" set-syntax-content!"
" set-syntax-scope-propagations!"
" set-syntax-tamper!)"
"(let-values(((struct:_65 make-_66 ?_67 -ref_68 -set!_69)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax"
" #f"
" 9"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(s_165 reach_166)"
"(let-values(((prop_167)(syntax-scope-propagations s_165)))"
"(begin"
"(reach_166(if prop_167((propagation-ref prop_167) s_165)(syntax-content s_165)))"
"(reach_166(syntax-scopes s_165))"
"(reach_166(syntax-shifted-multi-scopes s_165))"
"(let-values(((ht_168)(syntax-props s_165)))"
"(begin"
"(if((lambda(ht_169)(if(hash? ht_169)(immutable? ht_169) #f)) ht_168)"
"(void)"
"(let-values()(default-in-immutable-hash ht_168)))"
"((letrec-values(((for-loop_170)"
"(lambda(i_171)"
"(if i_171"
"(let-values(((k_172 v_173)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_168"
" i_171)))"
"(let-values((()"
"(let-values()"
"(if(preserved-property-value? v_173)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(reach_166"
"(plain-property-value"
" v_173)))"
"(values)))))"
"(values)))"
"(values)))))"
"(if(not #f)"
"(for-loop_170"
"(unsafe-immutable-hash-iterate-next ht_168 i_171))"
"(values))))"
"(values)))))"
" for-loop_170)"
"(unsafe-immutable-hash-iterate-first ht_168))))"
"(void)))))"
"(cons"
" prop:serialize"
"(lambda(s_174 ser-push!_175 state_176)"
"(let-values(((prop_177)(syntax-scope-propagations s_174)))"
"(let-values(((content_178)"
"(if prop_177((propagation-ref prop_177) s_174)(syntax-content s_174))))"
"(let-values(((properties_179)"
"(intern-properties"
"(syntax-props s_174)"
"(lambda()"
"(let-values(((ht_180)(syntax-props s_174)))"
"(begin"
"(if((lambda(ht_181)(hash? ht_181)) ht_180)"
"(void)"
"(let-values()(default-in-hash ht_180)))"
"((letrec-values(((for-loop_182)"
"(lambda(table_183 i_184)"
"(if i_184"
"(let-values(((k_185 v_186)"
"(hash-iterate-key+value"
" ht_180"
" i_184)))"
"(let-values(((table_187)"
"(let-values(((table_188)"
" table_183))"
"(if(preserved-property-value?"
" v_186)"
"(let-values(((table_189)"
" table_188))"
"(let-values(((table_190)"
"(let-values()"
"(let-values(((key_191"
" val_192)"
"(let-values()"
"(values"
" k_185"
"(check-value-to-preserve"
"(plain-property-value"
" v_186)"
" syntax?$1)))))"
"(hash-set"
" table_189"
" key_191"
" val_192)))))"
"(values table_190)))"
" table_188))))"
"(if(not #f)"
"(for-loop_182"
" table_187"
"(hash-iterate-next ht_180 i_184))"
" table_187)))"
" table_183))))"
" for-loop_182)"
" '#hasheq()"
"(hash-iterate-first ht_180)))))"
" state_176)))"
"(let-values(((tamper_193)(serialize-tamper(syntax-tamper s_174))))"
"(let-values(((context-triple_194)"
"(intern-context-triple"
"(intern-scopes(syntax-scopes s_174) state_176)"
"(intern-shifted-multi-scopes"
"(syntax-shifted-multi-scopes s_174)"
" state_176)"
"(intern-mpi-shifts(syntax-mpi-shifts s_174) state_176)"
" state_176)))"
"(let-values(((stx-state_195)(get-syntax-context state_176)))"
"(if(let-values(((or-part_196) properties_179))"
"(if or-part_196 or-part_196 tamper_193))"
"(let-values()"
"(begin"
"(ser-push!_175 'tag '#:syntax+props)"
"(push-syntax-context! state_176 #f)"
"(ser-push!_175 content_178)"
"(pop-syntax-context! state_176)"
"(ser-push!_175 'reference context-triple_194)"
"(ser-push!_175 'reference(syntax-srcloc s_174))"
"(ser-push!_175 properties_179)"
"(ser-push!_175 tamper_193)"
"(if stx-state_195"
"(let-values()(set-syntax-state-all-sharing?! stx-state_195 #f))"
"(void))))"
"(let-values()"
"(let-values(((sharing-mode_197)"
"(hash-ref"
"(serialize-state-sharing-syntaxes state_176)"
" s_174"
" 'unknown)))"
"(begin"
"(if(eq? sharing-mode_197 'share)"
"(let-values()"
"(begin"
"(ser-push!_175 'tag '#:datum->syntax)"
"(ser-push!_175(syntax->datum$1 s_174))))"
"(if(eq? sharing-mode_197 'unknown)"
"(let-values()"
"(let-values((()(begin(ser-push!_175 'tag '#:syntax)(values))))"
"(let-values(((this-state_198)"
"(if(no-pair-syntax-in-cdr? content_178)"
"(syntax-state19.1"
" #t"
" context-triple_194"
"(syntax-srcloc s_174))"
" #f)))"
"(let-values((()"
"(begin"
"(push-syntax-context! state_176 this-state_198)"
"(values))))"
"(let-values((()(begin(ser-push!_175 content_178)(values))))"
"(let-values((()"
"(begin"
"(pop-syntax-context! state_176)"
"(values))))"
"(let-values(((new-sharing-mode_199)"
"(if(if this-state_198"
"(syntax-state-all-sharing?"
" this-state_198)"
" #f)"
" 'share"
" 'none)))"
"(begin"
"(hash-set!"
"(serialize-state-sharing-syntaxes state_176)"
" s_174"
"(if(datum-has-elements? content_178)"
" new-sharing-mode_199"
" 'none))"
"(if(if stx-state_195"
"(eq? new-sharing-mode_199 'none)"
" #f)"
"(let-values()"
"(set-syntax-state-all-sharing?! stx-state_195 #f))"
"(void))))))))))"
"(let-values()"
"(begin"
"(ser-push!_175 'tag '#:syntax)"
"(push-syntax-context! state_176 #f)"
"(ser-push!_175 content_178)"
"(pop-syntax-context! state_176)))))"
"(ser-push!_175 'reference context-triple_194)"
"(ser-push!_175 'reference(syntax-srcloc s_174))"
"(if stx-state_195"
"(let-values()"
"(if(if(eq?"
" context-triple_194"
"(syntax-state-context-triple stx-state_195))"
"(equal?"
"(syntax-srcloc s_174)"
"(syntax-state-srcloc stx-state_195))"
" #f)"
"(void)"
"(let-values()(set-syntax-state-all-sharing?! stx-state_195 #f))))"
"(void))))))))))))))"
"(cons"
" prop:custom-write"
"(lambda(s_200 port_201 mode_202)"
"                         (let-values ((() (begin (write-string \"#<syntax\" port_201) (values))))"
"(let-values(((srcloc_203)(syntax-srcloc s_200)))"
"(begin"
"(if srcloc_203"
"(let-values()"
"(let-values(((srcloc-str_204)(srcloc->string srcloc_203)))"
"(if srcloc-str_204"
"                                       (let-values () (fprintf port_201 \":~a\" srcloc-str_204))"
"(void))))"
"(void))"
"                               (fprintf port_201 \" ~.s\" (syntax->datum$1 s_200))"
"                               (write-string \">\" port_201)))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'syntax)))))"
"(values"
" struct:_65"
" make-_66"
" ?_67"
"(make-struct-field-accessor -ref_68 0 'content)"
"(make-struct-field-accessor -ref_68 1 'scopes)"
"(make-struct-field-accessor -ref_68 2 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_68 3 'scope-propagations)"
"(make-struct-field-accessor -ref_68 4 'mpi-shifts)"
"(make-struct-field-accessor -ref_68 5 'srcloc)"
"(make-struct-field-accessor -ref_68 6 'props)"
"(make-struct-field-accessor -ref_68 7 'inspector)"
"(make-struct-field-accessor -ref_68 8 'tamper)"
"(make-struct-field-mutator -set!_69 0 'content)"
"(make-struct-field-mutator -set!_69 3 'scope-propagations)"
"(make-struct-field-mutator -set!_69 8 'tamper))))"
"(define-values(prop:propagation propagation?$1 propagation-ref)(make-struct-type-property 'propagation))"
"(define-values(empty-scopes)(seteq))"
"(define-values(empty-shifted-multi-scopes)(seteq))"
"(define-values(empty-mpi-shifts) null)"
"(define-values(empty-props) '#hasheq())"
"(define-values"
"(empty-syntax)"
"(syntax1.1 #f empty-scopes empty-shifted-multi-scopes #f empty-mpi-shifts #f empty-props #f #f))"
"(define-values(identifier?)(lambda(s_205)(if(syntax?$1 s_205)(symbol?(syntax-content s_205)) #f)))"
"(define-values"
"(syntax->datum$1)"
"(lambda(s_206)"
"(let-values(((s_207) s_206)"
"((f_208)(lambda(tail?_212 x_213) x_213))"
"((d->s_209)(lambda(s_214 d_215) d_215))"
"((s-e_210) syntax-content)"
"((seen_211) #f))"
"((letrec-values(((loop_216)"
"(lambda(s_217)"
"(let-values(((s_218) s_217)"
"((f_219)"
"(lambda(tail?_221 v_222)"
"(if(syntax?$1 v_222)"
"(let-values()(d->s_209 v_222(loop_216(s-e_210 v_222))))"
"(let-values()(f_208 tail?_221 v_222)))))"
"((seen_220) seen_211))"
"((letrec-values(((loop_223)"
"(lambda(tail?_224 s_225 prev-depth_226)"
"(let-values(((depth_227)(add1 prev-depth_226)))"
"(if(if seen_220(> depth_227 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_224"
" s_225"
"(lambda(tail?_228 s_229)(f_219 tail?_228 s_229))"
" seen_220))"
"(if(null? s_225)"
"(let-values()(f_219 tail?_224 s_225))"
"(if(pair? s_225)"
"(let-values()"
"(f_219"
" tail?_224"
"(cons"
"(loop_223 #f(car s_225) depth_227)"
"(loop_223 #t(cdr s_225) depth_227))))"
"(if(let-values(((or-part_230)(symbol? s_225)))"
"(if or-part_230"
" or-part_230"
"(let-values(((or-part_231)(boolean? s_225)))"
"(if or-part_231 or-part_231(number? s_225)))))"
"(let-values()(f_219 #f s_225))"
"(if(let-values(((or-part_232)(vector? s_225)))"
"(if or-part_232"
" or-part_232"
"(let-values(((or-part_233)(box? s_225)))"
"(if or-part_233"
" or-part_233"
"(let-values(((or-part_234)"
"(prefab-struct-key s_225)))"
"(if or-part_234 or-part_234(hash? s_225)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_224"
" s_225"
"(lambda(tail?_235 s_236)(f_219 tail?_235 s_236))"
" seen_220))"
"(let-values()(f_219 #f s_225)))))))))))"
" loop_223)"
" #f"
" s_218"
" 0)))))"
" loop_216)"
" s_207))))"
"(define-values"
"(datum->syntax$1)"
"(let-values(((datum->syntax8_237)"
"(lambda(stx-c6_238 s7_239 stx-l2_240 stx-p3_241 stx-l4_242 stx-p5_243)"
"(let-values(((stx-c_244) stx-c6_238))"
"(let-values(((s_245) s7_239))"
"(let-values(((stx-l_246)(if stx-l4_242 stx-l2_240 #f)))"
"(let-values(((stx-p_247)(if stx-p5_243 stx-p3_241 #f)))"
"(let-values()"
"(let-values(((wrap_248)"
"(lambda(content_249)"
"(syntax1.1"
" content_249"
"(if stx-c_244(syntax-scopes stx-c_244) empty-scopes)"
"(if stx-c_244"
"(syntax-shifted-multi-scopes stx-c_244)"
" empty-shifted-multi-scopes)"
" #f"
"(if stx-c_244(syntax-mpi-shifts stx-c_244) empty-mpi-shifts)"
"(if stx-l_246(syntax-srcloc stx-l_246) #f)"
"(if stx-p_247(syntax-props stx-p_247) empty-props)"
"(if stx-c_244(syntax-inspector stx-c_244) #f)"
"(if stx-c_244"
"(if(syntax-tamper stx-c_244)"
"(tamper-tainted-for-content content_249)"
" #f)"
" #f)))))"
"(let-values(((s_250) s_245)"
"((f_251)(lambda(tail?_254 x_255)(if tail?_254 x_255(wrap_248 x_255))))"
"((s->_252)(lambda(s_256) s_256))"
"((seen_253) disallow-cycles))"
"(let-values(((s_257) s_250)"
"((f_258)"
"(lambda(tail?_260 v_261)"
"(if(syntax?$1 v_261)"
"(let-values()(s->_252 v_261))"
"(let-values()(f_251 tail?_260 v_261)))))"
"((seen_259) seen_253))"
"((letrec-values(((loop_262)"
"(lambda(tail?_263 s_264 prev-depth_265)"
"(let-values(((depth_266)(add1 prev-depth_265)))"
"(if(if seen_259(> depth_266 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_263"
" s_264"
"(lambda(tail?_267 s_268)(f_258 tail?_267 s_268))"
" seen_259))"
"(if(null? s_264)"
"(let-values()(f_258 tail?_263 s_264))"
"(if(pair? s_264)"
"(let-values()"
"(f_258"
" tail?_263"
"(cons"
"(loop_262 #f(car s_264) depth_266)"
"(loop_262 #t(cdr s_264) depth_266))))"
"(if(let-values(((or-part_269)(symbol? s_264)))"
"(if or-part_269"
" or-part_269"
"(let-values(((or-part_270)(boolean? s_264)))"
"(if or-part_270 or-part_270(number? s_264)))))"
"(let-values()(f_258 #f s_264))"
"(if(let-values(((or-part_271)(vector? s_264)))"
"(if or-part_271"
" or-part_271"
"(let-values(((or-part_272)(box? s_264)))"
"(if or-part_272"
" or-part_272"
"(let-values(((or-part_273)"
"(prefab-struct-key s_264)))"
"(if or-part_273"
" or-part_273"
"(hash? s_264)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_263"
" s_264"
"(lambda(tail?_274 s_275)(f_258 tail?_274 s_275))"
" seen_259))"
"(let-values()(f_258 #f s_264)))))))))))"
" loop_262)"
" #f"
" s_257"
" 0))))))))))))"
"(case-lambda"
"((stx-c_276 s_277)(datum->syntax8_237 stx-c_276 s_277 #f #f #f #f))"
"((stx-c_278 s_279 stx-l_280 stx-p3_281)(datum->syntax8_237 stx-c_278 s_279 stx-l_280 stx-p3_281 #t #t))"
"((stx-c_282 s_283 stx-l2_284)(datum->syntax8_237 stx-c_282 s_283 stx-l2_284 #f #t #f)))))"
"(define-values"
"(disallow-cycles)"
"(hasheq"
" 'cycle-fail"
"   (lambda (s_285) (raise-arguments-error 'datum->syntax \"cannot create syntax from cyclic datum\" s_285))))"
"(define-values"
"(struct:syntax-state"
" syntax-state19.1"
" syntax-state?"
" syntax-state-all-sharing?"
" syntax-state-context-triple"
" syntax-state-srcloc"
" set-syntax-state-all-sharing?!)"
"(let-values(((struct:_286 make-_287 ?_288 -ref_289 -set!_290)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syntax-state #f 3 0 #f null(current-inspector) #f '(1 2) #f 'syntax-state)))))"
"(values"
" struct:_286"
" make-_287"
" ?_288"
"(make-struct-field-accessor -ref_289 0 'all-sharing?)"
"(make-struct-field-accessor -ref_289 1 'context-triple)"
"(make-struct-field-accessor -ref_289 2 'srcloc)"
"(make-struct-field-mutator -set!_290 0 'all-sharing?))))"
"(define-values"
"(no-pair-syntax-in-cdr?)"
"(lambda(content_316)"
"(if(pair? content_316)"
"(let-values()"
"((letrec-values(((loop_317)"
"(lambda(content_318)"
"(if(if(syntax?$1 content_318)(pair?(syntax-content content_318)) #f)"
"(let-values() #f)"
"(if(pair? content_318)"
"(let-values()(loop_317(cdr content_318)))"
"(let-values() #t))))))"
" loop_317)"
"(cdr content_316)))"
"(let-values() #t))))"
"(define-values"
"(deserialize-syntax)"
"(lambda(content_319 context-triple_320 srcloc_321 props_322 tamper_323 inspector_324)"
"(syntax1.1"
" content_319"
"(vector-ref context-triple_320 0)"
"(vector-ref context-triple_320 1)"
" #f"
"(vector-ref context-triple_320 2)"
" srcloc_321"
"(if props_322"
"(let-values(((ht_325) props_322))"
"(begin"
"(if((lambda(ht_326)(if(hash? ht_326)(immutable? ht_326) #f)) ht_325)"
"(void)"
"(let-values()(default-in-immutable-hash ht_325)))"
"((letrec-values(((for-loop_327)"
"(lambda(table_328 i_329)"
"(if i_329"
"(let-values(((k_330 v_331)(unsafe-immutable-hash-iterate-key+value ht_325 i_329)))"
"(let-values(((table_332)"
"(let-values(((table_333) table_328))"
"(let-values(((table_334)"
"(let-values()"
"(let-values(((key_335 val_336)"
"(let-values()"
"(values"
" k_330"
"(preserved-property-value1.1"
" v_331)))))"
"(hash-set table_333 key_335 val_336)))))"
"(values table_334)))))"
"(if(not #f)"
"(for-loop_327 table_332(unsafe-immutable-hash-iterate-next ht_325 i_329))"
" table_332)))"
" table_328))))"
" for-loop_327)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_325))))"
" empty-props)"
" inspector_324"
"(deserialize-tamper tamper_323))))"
"(define-values"
"(deserialize-datum->syntax)"
"(lambda(content_337 context-triple_338 srcloc_339 inspector_340)"
"(let-values(((s_341)(deserialize-syntax #f context-triple_338 srcloc_339 #f #f inspector_340)))"
"(datum->syntax$1 s_341 content_337 s_341 s_341))))"
"(void)"
"(void)"
"(define-values(empty-binding-table) '#hasheq())"
"(define-values"
"(struct:table-with-bulk-bindings"
" table-with-bulk-bindings1.1"
" table-with-bulk-bindings?"
" table-with-bulk-bindings-syms"
" table-with-bulk-bindings-syms/serialize"
" table-with-bulk-bindings-bulk-bindings)"
"(let-values(((struct:_19 make-_20 ?_21 -ref_22 -set!_23)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'table-with-bulk-bindings"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(twbb_52 ser-push!_53 state_54)"
"(begin"
"(ser-push!_53 'tag '#:table-with-bulk-bindings)"
"(ser-push!_53(table-with-bulk-bindings-syms/serialize twbb_52))"
"(ser-push!_53(table-with-bulk-bindings-bulk-bindings twbb_52))))))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'table-with-bulk-bindings)))))"
"(values"
" struct:_19"
" make-_20"
" ?_21"
"(make-struct-field-accessor -ref_22 0 'syms)"
"(make-struct-field-accessor -ref_22 1 'syms/serialize)"
"(make-struct-field-accessor -ref_22 2 'bulk-bindings))))"
"(define-values"
"(deserialize-table-with-bulk-bindings)"
"(lambda(syms_55 bulk-bindings_56)(table-with-bulk-bindings1.1 syms_55 syms_55 bulk-bindings_56)))"
"(define-values"
"(struct:bulk-binding-at bulk-binding-at2.1 bulk-binding-at? bulk-binding-at-scopes bulk-binding-at-bulk)"
"(let-values(((struct:_57 make-_58 ?_59 -ref_60 -set!_61)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-at"
" #f"
" 2"
" 0"
" #f"
"(list"
"                      (cons prop:reach-scopes (lambda (sms_87 reach_88) (error \"shouldn't get here\")))"
"(cons"
" prop:serialize"
"(lambda(bba_89 ser-push!_90 state_91)"
"(begin"
"(ser-push!_90 'tag '#:bulk-binding-at)"
"(ser-push!_90(bulk-binding-at-scopes bba_89))"
"(ser-push!_90(bulk-binding-at-bulk bba_89))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-at)))))"
"(values"
" struct:_57"
" make-_58"
" ?_59"
"(make-struct-field-accessor -ref_60 0 'scopes)"
"(make-struct-field-accessor -ref_60 1 'bulk))))"
"(define-values(deserialize-bulk-binding-at)(lambda(scopes_92 bulk_93)(bulk-binding-at2.1 scopes_92 bulk_93)))"
"(define-values(prop:bulk-binding bulk-binding?$1 bulk-binding-ref)(make-struct-type-property 'bulk-binding))"
"(define-values"
"(struct:bulk-binding-class"
" bulk-binding-class3.1"
" bulk-binding-class?"
" bulk-binding-class-get-symbols"
" bulk-binding-class-create)"
"(let-values(((struct:_94 make-_95 ?_96 -ref_97 -set!_98)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-class"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-class)))))"
"(values"
" struct:_94"
" make-_95"
" ?_96"
"(make-struct-field-accessor -ref_97 0 'get-symbols)"
"(make-struct-field-accessor -ref_97 1 'create))))"
"(define-values"
"(bulk-binding-symbols)"
"(lambda(b_119 s_120 extra-shifts_121)"
"((bulk-binding-class-get-symbols(bulk-binding-ref b_119))"
" b_119"
"(append extra-shifts_121(if s_120(syntax-mpi-shifts s_120) null)))))"
"(define-values(bulk-binding-create)(lambda(b_122)(bulk-binding-class-create(bulk-binding-ref b_122))))"
"(define-values(binding-table-empty?)(lambda(bt_123)(if(hash? bt_123)(zero?(hash-count bt_123)) #f)))"
"(define-values"
"(binding-table-add)"
"(lambda(bt_124 scopes_125 sym_126 binding_127 just-for-nominal?_128)"
"(if(hash? bt_124)"
"(let-values()(hash-set bt_124 sym_126(hash-set(hash-ref bt_124 sym_126 '#hash()) scopes_125 binding_127)))"
"(let-values()"
"(let-values(((new-syms_129)"
"(binding-table-add"
"(table-with-bulk-bindings-syms bt_124)"
" scopes_125"
" sym_126"
" binding_127"
" just-for-nominal?_128)))"
"(let-values(((new-syms/serialize_130)"
"(if just-for-nominal?_128"
"(let-values()(table-with-bulk-bindings-syms/serialize bt_124))"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_124)"
"(table-with-bulk-bindings-syms/serialize bt_124))"
"(let-values() new-syms_129)"
"(let-values()"
"(binding-table-add"
"(table-with-bulk-bindings-syms/serialize bt_124)"
" scopes_125"
" sym_126"
" binding_127"
" #f))))))"
"(let-values(((the-struct_131) bt_124))"
"(if(table-with-bulk-bindings? the-struct_131)"
"(let-values(((syms7_132) new-syms_129)((syms/serialize8_133) new-syms/serialize_130))"
"(table-with-bulk-bindings1.1"
" syms7_132"
" syms/serialize8_133"
"(table-with-bulk-bindings-bulk-bindings the-struct_131)))"
"                (raise-argument-error 'struct-copy \"table-with-bulk-bindings?\" the-struct_131)))))))))"
"(define-values"
"(binding-table-add-bulk)"
"(lambda(bt_134 scopes_135 bulk_136)"
"(if(table-with-bulk-bindings? bt_134)"
"(let-values()"
"(let-values(((new-syms_137)"
"(remove-matching-bindings(table-with-bulk-bindings-syms bt_134) scopes_135 bulk_136)))"
"(let-values(((new-syms/serialize_138)"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_134)"
"(table-with-bulk-bindings-syms/serialize bt_134))"
" new-syms_137"
"(remove-matching-bindings"
"(table-with-bulk-bindings-syms/serialize bt_134)"
" scopes_135"
" bulk_136))))"
"(table-with-bulk-bindings1.1"
" new-syms_137"
" new-syms/serialize_138"
"(cons(bulk-binding-at2.1 scopes_135 bulk_136)(table-with-bulk-bindings-bulk-bindings bt_134))))))"
"(let-values()(binding-table-add-bulk(table-with-bulk-bindings1.1 bt_134 bt_134 null) scopes_135 bulk_136)))))"
"(define-values"
"(remove-matching-bindings)"
"(lambda(syms_139 scopes_140 bulk_141)"
"(let-values(((bulk-symbols_142)(bulk-binding-symbols bulk_141 #f null)))"
"(if(<(hash-count syms_139)(hash-count bulk-symbols_142))"
"(let-values()"
"(let-values(((ht_143) syms_139))"
"(begin"
"(if((lambda(ht_144)(if(hash? ht_144)(immutable? ht_144) #f)) ht_143)"
"(void)"
"(let-values()(default-in-immutable-hash ht_143)))"
"((letrec-values(((for-loop_145)"
"(lambda(syms_146 i_147)"
"(if i_147"
"(let-values(((sym_148 sym-bindings_149)"
"(unsafe-immutable-hash-iterate-key+value ht_143 i_147)))"
"(let-values(((syms_150)"
"(let-values(((syms_151) syms_146))"
"(let-values(((syms_152)"
"(let-values()"
"(if(hash-ref bulk-symbols_142 sym_148 #f)"
"(remove-matching-binding"
" syms_151"
" sym_148"
" sym-bindings_149"
" scopes_140)"
" syms_151))))"
"(values syms_152)))))"
"(if(not #f)"
"(for-loop_145 syms_150(unsafe-immutable-hash-iterate-next ht_143 i_147))"
" syms_150)))"
" syms_146))))"
" for-loop_145)"
" syms_139"
"(unsafe-immutable-hash-iterate-first ht_143)))))"
"(let-values()"
"(let-values(((ht_153) bulk-symbols_142))"
"(begin"
"(if((lambda(ht_154)(if(hash? ht_154)(immutable? ht_154) #f)) ht_153)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_153)))"
"((letrec-values(((for-loop_155)"
"(lambda(syms_156 i_157)"
"(if i_157"
"(let-values(((sym_158)(unsafe-immutable-hash-iterate-key ht_153 i_157)))"
"(let-values(((syms_159)"
"(let-values(((syms_160) syms_156))"
"(let-values(((syms_161)"
"(let-values()"
"(let-values(((sym-bindings_162)"
"(hash-ref syms_160 sym_158 #f)))"
"(if sym-bindings_162"
"(remove-matching-binding"
" syms_160"
" sym_158"
" sym-bindings_162"
" scopes_140)"
" syms_160)))))"
"(values syms_161)))))"
"(if(not #f)"
"(for-loop_155 syms_159(unsafe-immutable-hash-iterate-next ht_153 i_157))"
" syms_159)))"
" syms_156))))"
" for-loop_155)"
" syms_139"
"(unsafe-immutable-hash-iterate-first ht_153)))))))))"
"(define-values"
"(remove-matching-binding)"
"(lambda(syms_163 sym_164 sym-bindings_165 scopes_166)"
"(hash-set syms_163 sym_164(hash-remove sym-bindings_165 scopes_166))))"
"(define-values"
"(binding-table-symbols)"
"(lambda(table_167 scs_168 s_169 extra-shifts_170)"
"(let-values(((ht_171 bulk-bindings_172)"
"(if(hash? table_167)"
"(values table_167 null)"
"(values"
"(table-with-bulk-bindings-syms table_167)"
"(table-with-bulk-bindings-bulk-bindings table_167)))))"
"(set-union"
"(let-values(((ht_173) ht_171))"
"(begin"
"(if((lambda(ht_174)(hash? ht_174)) ht_173)(void)(let-values()(default-in-hash ht_173)))"
"((letrec-values(((for-loop_175)"
"(lambda(table_176 i_177)"
"(if i_177"
"(let-values(((sym_178 at-sym_179)(hash-iterate-key+value ht_173 i_177)))"
"(let-values(((table_180)"
"(let-values(((table_181) table_176))"
"(if(let-values(((ht_182) at-sym_179))"
"(begin"
"(if((lambda(ht_183)(hash? ht_183)) ht_182)"
"(void)"
"(let-values()(default-in-hash-keys ht_182)))"
"((letrec-values(((for-loop_184)"
"(lambda(result_185 i_186)"
"(if i_186"
"(let-values(((an-scs_187)"
"(hash-iterate-key"
" ht_182"
" i_186)))"
"(let-values(((result_188)"
"(let-values()"
"(let-values(((result_190)"
"(let-values()"
"(let-values()"
"(subset?"
" an-scs_187"
" scs_168)))))"
"(values"
" result_190)))))"
"(if(if(not"
"((lambda x_191 result_188)"
" an-scs_187))"
"(not #f)"
" #f)"
"(for-loop_184"
" result_188"
"(hash-iterate-next"
" ht_182"
" i_186))"
" result_188)))"
" result_185))))"
" for-loop_184)"
" #f"
"(hash-iterate-first ht_182))))"
"(let-values(((table_192) table_181))"
"(let-values(((table_193)"
"(let-values()"
"(let-values(((key_194 val_195)"
"(let-values()"
"(values"
"(let-values() sym_178)"
" #t))))"
"(hash-set table_192 key_194 val_195)))))"
"(values table_193)))"
" table_181))))"
"(if(not #f)(for-loop_175 table_180(hash-iterate-next ht_173 i_177)) table_180)))"
" table_176))))"
" for-loop_175)"
" '#hasheq()"
"(hash-iterate-first ht_173))))"
"(let-values(((lst_196) bulk-bindings_172))"
"(begin"
"(if(list? lst_196)(void)(let-values()(in-list lst_196)))"
"((letrec-values(((for-loop_197)"
"(lambda(table_198 lst_199)"
"(if(pair? lst_199)"
"(let-values(((bba_200)(unsafe-car lst_199))((rest_201)(unsafe-cdr lst_199)))"
"(let-values(((table_202)"
"(let-values(((table_203) table_198))"
"(if(subset?(bulk-binding-at-scopes bba_200) scs_168)"
"(let-values(((ht_204)"
"(bulk-binding-symbols"
"(bulk-binding-at-bulk bba_200)"
" s_169"
" extra-shifts_170)))"
"(begin"
"(if((lambda(ht_205)(hash? ht_205)) ht_204)"
"(void)"
"(let-values()(default-in-hash-keys ht_204)))"
"((letrec-values(((for-loop_206)"
"(lambda(table_207 i_208)"
"(if i_208"
"(let-values(((sym_209)"
"(hash-iterate-key"
" ht_204"
" i_208)))"
"(let-values(((table_210)"
"(let-values(((table_211)"
" table_207))"
"(let-values(((table_212)"
"(let-values()"
"(let-values(((key_213"
" val_214)"
"(let-values()"
"(values"
"(let-values()"
" sym_209)"
" #t))))"
"(hash-set"
" table_211"
" key_213"
" val_214)))))"
"(values"
" table_212)))))"
"(if(not #f)"
"(for-loop_206"
" table_210"
"(hash-iterate-next ht_204 i_208))"
" table_210)))"
" table_207))))"
" for-loop_206)"
" table_203"
"(hash-iterate-first ht_204))))"
" table_203))))"
"(if(not #f)(for-loop_197 table_202 rest_201) table_202)))"
" table_198))))"
" for-loop_197)"
" '#hasheq()"
" lst_196)))))))"
"(define-values"
"(binding-table-prune-to-reachable)"
"(lambda(bt_215 state_216)"
"(let-values(((or-part_217)(hash-ref(serialize-state-bindings-intern state_216) bt_215 #f)))"
"(if or-part_217"
" or-part_217"
"(let-values(((reachable-scopes_218)(serialize-state-reachable-scopes state_216)))"
"(let-values(((new-syms_219)"
"(let-values(((ht_222)"
"(if(hash? bt_215) bt_215(table-with-bulk-bindings-syms/serialize bt_215))))"
"(begin"
"(if((lambda(ht_223)(if(hash? ht_223)(immutable? ht_223) #f)) ht_222)"
"(void)"
"(let-values()(default-in-immutable-hash ht_222)))"
"((letrec-values(((for-loop_224)"
"(lambda(table_225 i_226)"
"(if i_226"
"(let-values(((sym_227 bindings-for-sym_228)"
"(unsafe-immutable-hash-iterate-key+value ht_222 i_226)))"
"(let-values(((table_229)"
"(let-values(((new-bindings-for-sym_230)"
"(let-values(((ht_231)"
" bindings-for-sym_228))"
"(begin"
"(if((lambda(ht_232)"
"(if(hash? ht_232)"
"(immutable? ht_232)"
" #f))"
" ht_231)"
"(void)"
"(let-values()"
"(default-in-immutable-hash"
" ht_231)))"
"((letrec-values(((for-loop_233)"
"(lambda(table_234"
" i_235)"
"(if i_235"
"(let-values(((scopes_236"
" binding_237)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_231"
" i_235)))"
"(let-values(((table_238)"
"(let-values(((table_239)"
" table_234))"
"(if(subset?"
" scopes_236"
" reachable-scopes_218)"
"(let-values(((table_240)"
" table_239))"
"(let-values(((table_241)"
"(let-values()"
"(let-values(((key_242"
" val_243)"
"(let-values()"
"(values"
"(intern-scopes"
" scopes_236"
" state_216)"
" binding_237))))"
"(hash-set"
" table_240"
" key_242"
" val_243)))))"
"(values"
" table_241)))"
" table_239))))"
"(if(not"
" #f)"
"(for-loop_233"
" table_238"
"(unsafe-immutable-hash-iterate-next"
" ht_231"
" i_235))"
" table_238)))"
" table_234))))"
" for-loop_233)"
" '#hash()"
"(unsafe-immutable-hash-iterate-first"
" ht_231))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_244)"
"(lambda(table_245)"
"(let-values()"
"(let-values(((table_246)"
"(let-values(((table_247)"
" table_245))"
"(if(positive?"
"(hash-count"
" new-bindings-for-sym_230))"
"(let-values(((table_248)"
" table_247))"
"(let-values(((table_249)"
"(let-values()"
"(let-values(((key_250"
" val_251)"
"(let-values()"
"(values"
" sym_227"
" new-bindings-for-sym_230))))"
"(hash-set"
" table_248"
" key_250"
" val_251)))))"
"(values"
" table_249)))"
" table_247))))"
" table_246)))))"
" for-loop_244)"
" table_225)))))"
"(if(not #f)"
"(for-loop_224"
" table_229"
"(unsafe-immutable-hash-iterate-next ht_222 i_226))"
" table_229)))"
" table_225))))"
" for-loop_224)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_222))))))"
"(let-values(((new-bulk-bindings_220)"
"(if(hash? bt_215)"
" null"
"(let-values(((lst_252)(table-with-bulk-bindings-bulk-bindings bt_215)))"
"(begin"
"(if(list? lst_252)(void)(let-values()(in-list lst_252)))"
"((letrec-values(((for-loop_253)"
"(lambda(lst_254)"
"(if(pair? lst_254)"
"(let-values(((bba_255)(unsafe-car lst_254))"
"((rest_256)(unsafe-cdr lst_254)))"
"(let-values(((post-guard-var_257)(lambda() #t)))"
"(let-values()"
"(if(subset?"
"(bulk-binding-at-scopes bba_255)"
" reachable-scopes_218)"
"(let-values()"
"(let-values(((elem_258)"
"(let-values()"
"(let-values()"
"(let-values(((the-struct_259)"
" bba_255))"
"(if(bulk-binding-at?"
" the-struct_259)"
"(let-values(((scopes9_260)"
"(intern-scopes"
"(bulk-binding-at-scopes"
" bba_255)"
" state_216)))"
"(bulk-binding-at2.1"
" scopes9_260"
"(bulk-binding-at-bulk"
" the-struct_259)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                       \"bulk-binding-at?\""
" the-struct_259)))))))"
"(let-values(((result_261)"
"(if(post-guard-var_257)"
"(for-loop_253 rest_256)"
" null)))"
"(cons elem_258 result_261))))"
"(if(post-guard-var_257)(for-loop_253 rest_256) null)))))"
" null))))"
" for-loop_253)"
" lst_252))))))"
"(let-values(((new-bt_221)"
"(if(pair? new-bulk-bindings_220)"
"(table-with-bulk-bindings1.1 new-syms_219 new-syms_219 new-bulk-bindings_220)"
" new-syms_219)))"
"(begin"
"(hash-set!(serialize-state-bulk-bindings-intern state_216) bt_215 new-bt_221)"
" new-bt_221)))))))))"
"(define-values"
"(binding-table-register-reachable)"
"(lambda(bt_262 reachable-scopes_263 reach_264 register-trigger_265)"
"(begin"
"(let-values(((ht_266)(if(hash? bt_262) bt_262(table-with-bulk-bindings-syms/serialize bt_262))))"
"(begin"
"(if((lambda(ht_267)(if(hash? ht_267)(immutable? ht_267) #f)) ht_266)"
"(void)"
"(let-values()(default-in-immutable-hash ht_266)))"
"((letrec-values(((for-loop_268)"
"(lambda(i_269)"
"(if i_269"
"(let-values(((sym_270 bindings-for-sym_271)"
"(unsafe-immutable-hash-iterate-key+value ht_266 i_269)))"
"(let-values((()"
"(let-values(((ht_272) bindings-for-sym_271))"
"(begin"
"(if((lambda(ht_273)(if(hash? ht_273)(immutable? ht_273) #f))"
" ht_272)"
"(void)"
"(let-values()(default-in-immutable-hash ht_272)))"
"((letrec-values(((for-loop_274)"
"(lambda(i_275)"
"(if i_275"
"(let-values(((scopes_276 binding_277)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_272"
" i_275)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(scopes-register-reachable"
" scopes_276"
" binding_277"
" reachable-scopes_263"
" reach_264"
" register-trigger_265))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_274"
"(unsafe-immutable-hash-iterate-next"
" ht_272"
" i_275))"
"(values))))"
"(values)))))"
" for-loop_274)"
"(unsafe-immutable-hash-iterate-first ht_272))))))"
"(if(not #f)"
"(for-loop_268(unsafe-immutable-hash-iterate-next ht_266 i_269))"
"(values))))"
"(values)))))"
" for-loop_268)"
"(unsafe-immutable-hash-iterate-first ht_266))))"
"(void))))"
"(define-values"
"(scopes-register-reachable)"
"(lambda(scopes_278 binding_279 reachable-scopes_280 reach_281 register-trigger_282)"
"(let-values(((v_283)"
"(if(binding-reach-scopes? binding_279)((binding-reach-scopes-ref binding_279) binding_279) #f)))"
"(if v_283"
"(let-values()"
"(if(subset? scopes_278 reachable-scopes_280)"
"(let-values()(reach_281 v_283))"
"(let-values()"
"(begin"
"(let-values(((ht_284) scopes_278))"
"(begin"
"(if((lambda(ht_285)(if(hash? ht_285)(immutable? ht_285) #f)) ht_284)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_284)))"
"((letrec-values(((for-loop_286)"
"(lambda(i_287)"
"(if i_287"
"(let-values(((sc_288)(unsafe-immutable-hash-iterate-key ht_284 i_287)))"
"(let-values((()"
"(let-values()"
"(if(set-member? reachable-scopes_280 sc_288)"
"(values)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(register-trigger_282 sc_288 v_283))"
"(values)))))"
"(values)))))))"
"(if(not #f)"
"(for-loop_286(unsafe-immutable-hash-iterate-next ht_284 i_287))"
"(values))))"
"(values)))))"
" for-loop_286)"
"(unsafe-immutable-hash-iterate-first ht_284))))"
"(void)))))"
"(void)))))"
"(void)"
"(void)"
"(define-values"
"(propagate-taint!)"
"(lambda(s_1)"
"(if(eq?(syntax-tamper s_1) 'tainted/need-propagate)"
"(let-values()"
"(begin(set-syntax-content! s_1(taint-content(syntax-content s_1)))(set-syntax-tamper! s_1 'tainted)))"
"(void))))"
"(define-values"
"(taint-content)"
"(lambda(d_2)"
"(let-values(((s_3) d_2)"
"((f_4)(lambda(tail?_7 x_8) x_8))"
"((s->_5)"
"(lambda(sub-s_9)"
"(if(tamper-tainted?(syntax-tamper sub-s_9))"
"(let-values() sub-s_9)"
"(let-values()"
"(let-values(((the-struct_10) sub-s_9))"
"(if(syntax?$1 the-struct_10)"
"(let-values(((tamper6_11)(tamper-tainted-for-content(syntax-content sub-s_9))))"
"(syntax1.1"
"(syntax-content the-struct_10)"
"(syntax-scopes the-struct_10)"
"(syntax-shifted-multi-scopes the-struct_10)"
"(syntax-scope-propagations the-struct_10)"
"(syntax-mpi-shifts the-struct_10)"
"(syntax-srcloc the-struct_10)"
"(syntax-props the-struct_10)"
"(syntax-inspector the-struct_10)"
" tamper6_11))"
"                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_10)))))))"
"((seen_6) #f))"
"(let-values(((s_12) s_3)"
"((f_13)"
"(lambda(tail?_15 v_16)"
"(if(syntax?$1 v_16)(let-values()(s->_5 v_16))(let-values()(f_4 tail?_15 v_16)))))"
"((seen_14) seen_6))"
"((letrec-values(((loop_17)"
"(lambda(tail?_18 s_19 prev-depth_20)"
"(let-values(((depth_21)(add1 prev-depth_20)))"
"(if(if seen_14(> depth_21 32) #f)"
"(let-values()"
"(datum-map-slow tail?_18 s_19(lambda(tail?_22 s_23)(f_13 tail?_22 s_23)) seen_14))"
"(if(null? s_19)"
"(let-values()(f_13 tail?_18 s_19))"
"(if(pair? s_19)"
"(let-values()"
"(f_13"
" tail?_18"
"(cons(loop_17 #f(car s_19) depth_21)(loop_17 #t(cdr s_19) depth_21))))"
"(if(let-values(((or-part_24)(symbol? s_19)))"
"(if or-part_24"
" or-part_24"
"(let-values(((or-part_25)(boolean? s_19)))"
"(if or-part_25 or-part_25(number? s_19)))))"
"(let-values()(f_13 #f s_19))"
"(if(let-values(((or-part_26)(vector? s_19)))"
"(if or-part_26"
" or-part_26"
"(let-values(((or-part_27)(box? s_19)))"
"(if or-part_27"
" or-part_27"
"(let-values(((or-part_28)(prefab-struct-key s_19)))"
"(if or-part_28 or-part_28(hash? s_19)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_18"
" s_19"
"(lambda(tail?_29 s_30)(f_13 tail?_29 s_30))"
" seen_14))"
"(let-values()(f_13 #f s_19)))))))))))"
" loop_17)"
" #f"
" s_12"
" 0)))))"
"(define-values(syntax-tainted?$1)(lambda(s_31)(tamper-tainted?(syntax-tamper s_31))))"
"(define-values(syntax-clean?)(lambda(s_32)(tamper-clean?(syntax-tamper s_32))))"
"(define-values"
"(syntax-arm$1)"
"(lambda(s_33 insp_34)"
"(let-values(((t_35)(syntax-tamper s_33)))"
"(if(tamper-tainted? t_35)"
"(let-values() s_33)"
"(if(if t_35"
"(let-values(((or-part_36)(set-member? t_35 insp_34)))"
"(if or-part_36"
" or-part_36"
"(let-values(((ht_37) t_35))"
"(begin"
"(if((lambda(ht_38)(if(hash? ht_38)(immutable? ht_38) #f)) ht_37)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_37)))"
"((letrec-values(((for-loop_39)"
"(lambda(result_40 i_41)"
"(if i_41"
"(let-values(((already-insp_42)"
"(unsafe-immutable-hash-iterate-key ht_37 i_41)))"
"(let-values(((result_43)"
"(let-values()"
"(let-values(((result_45)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same?"
" already-insp_42"
" insp_34)))))"
"(values result_45)))))"
"(if(if(not((lambda x_46 result_43) already-insp_42))(not #f) #f)"
"(for-loop_39"
" result_43"
"(unsafe-immutable-hash-iterate-next ht_37 i_41))"
" result_43)))"
" result_40))))"
" for-loop_39)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_37))))))"
" #f)"
"(let-values() s_33)"
"(let-values()"
"(let-values(((the-struct_47) s_33))"
"(if(syntax?$1 the-struct_47)"
"(let-values(((tamper7_48)(set-add(if t_35(remove-inferior t_35 insp_34)(seteq)) insp_34)))"
"(syntax1.1"
"(syntax-content the-struct_47)"
"(syntax-scopes the-struct_47)"
"(syntax-shifted-multi-scopes the-struct_47)"
"(syntax-scope-propagations the-struct_47)"
"(syntax-mpi-shifts the-struct_47)"
"(syntax-srcloc the-struct_47)"
"(syntax-props the-struct_47)"
"(syntax-inspector the-struct_47)"
" tamper7_48))"
"                (raise-argument-error 'struct-copy \"syntax?\" the-struct_47)))))))))"
"(define-values"
"(remove-inferior)"
"(lambda(t_49 insp_50)"
"(let-values(((ht_51) t_49))"
"(begin"
"(if((lambda(ht_52)(if(hash? ht_52)(immutable? ht_52) #f)) ht_51)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_51)))"
"((letrec-values(((for-loop_53)"
"(lambda(table_54 i_55)"
"(if i_55"
"(let-values(((already-insp_56)(unsafe-immutable-hash-iterate-key ht_51 i_55)))"
"(let-values(((table_57)"
"(let-values(((table_58) table_54))"
"(if(inspector-superior-or-same? insp_50 already-insp_56)"
" table_58"
"(let-values(((table_59) table_58))"
"(let-values(((table_60)"
"(let-values()"
"(let-values(((key_61 val_62)"
"(let-values()"
"(values"
"(let-values() already-insp_56)"
" #t))))"
"(hash-set table_59 key_61 val_62)))))"
"(values table_60)))))))"
"(if(not #f)"
"(for-loop_53 table_57(unsafe-immutable-hash-iterate-next ht_51 i_55))"
" table_57)))"
" table_54))))"
" for-loop_53)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_51))))))"
"(define-values"
"(syntax-disarm$1)"
"(let-values(((syntax-disarm4_63)"
"(lambda(s3_64 insp1_65 insp2_66)"
"(let-values(((s_67) s3_64))"
"(let-values(((insp_68)(if insp2_66 insp1_65 #f)))"
"(let-values()"
"(let-values(((t_69)(syntax-tamper s_67)))"
"(if(not(tamper-armed? t_69))"
"(let-values() s_67)"
"(if(not insp_68)"
"(let-values()"
"(let-values(((the-struct_70) s_67))"
"(if(syntax?$1 the-struct_70)"
"(let-values(((tamper8_71) #f))"
"(syntax1.1"
"(syntax-content the-struct_70)"
"(syntax-scopes the-struct_70)"
"(syntax-shifted-multi-scopes the-struct_70)"
"(syntax-scope-propagations the-struct_70)"
"(syntax-mpi-shifts the-struct_70)"
"(syntax-srcloc the-struct_70)"
"(syntax-props the-struct_70)"
"(syntax-inspector the-struct_70)"
" tamper8_71))"
"                                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_70))))"
"(let-values()"
"(let-values(((new-t_72)(remove-inferior t_69 insp_68)))"
"(let-values(((the-struct_73) s_67))"
"(if(syntax?$1 the-struct_73)"
"(let-values(((tamper9_74)(if(not(set-empty? new-t_72)) new-t_72 #f)))"
"(syntax1.1"
"(syntax-content the-struct_73)"
"(syntax-scopes the-struct_73)"
"(syntax-shifted-multi-scopes the-struct_73)"
"(syntax-scope-propagations the-struct_73)"
"(syntax-mpi-shifts the-struct_73)"
"(syntax-srcloc the-struct_73)"
"(syntax-props the-struct_73)"
"(syntax-inspector the-struct_73)"
" tamper9_74))"
"                                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_73))))))))))))))"
"(case-lambda((s_75)(syntax-disarm4_63 s_75 #f #f))((s_76 insp1_77)(syntax-disarm4_63 s_76 insp1_77 #t)))))"
"(define-values"
"(syntax-rearm$1)"
"(lambda(s_78 from-s_79)"
"(let-values(((t_80)(syntax-tamper s_78)))"
"(if(tamper-tainted? t_80)"
"(let-values() s_78)"
"(let-values()"
"(let-values(((from-t_81)(syntax-tamper from-s_79)))"
"(if(tamper-clean? from-t_81)"
"(let-values() s_78)"
"(if(tamper-tainted? from-t_81)"
"(let-values()"
"(let-values(((the-struct_82) s_78))"
"(if(syntax?$1 the-struct_82)"
"(let-values(((tamper10_83)(tamper-tainted-for-content(syntax-content s_78))))"
"(syntax1.1"
"(syntax-content the-struct_82)"
"(syntax-scopes the-struct_82)"
"(syntax-shifted-multi-scopes the-struct_82)"
"(syntax-scope-propagations the-struct_82)"
"(syntax-mpi-shifts the-struct_82)"
"(syntax-srcloc the-struct_82)"
"(syntax-props the-struct_82)"
"(syntax-inspector the-struct_82)"
" tamper10_83))"
"                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_82))))"
"(if(tamper-clean? t_80)"
"(let-values()"
"(let-values(((the-struct_84) s_78))"
"(if(syntax?$1 the-struct_84)"
"(let-values(((tamper11_85) from-t_81))"
"(syntax1.1"
"(syntax-content the-struct_84)"
"(syntax-scopes the-struct_84)"
"(syntax-shifted-multi-scopes the-struct_84)"
"(syntax-scope-propagations the-struct_84)"
"(syntax-mpi-shifts the-struct_84)"
"(syntax-srcloc the-struct_84)"
"(syntax-props the-struct_84)"
"(syntax-inspector the-struct_84)"
" tamper11_85))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_84))))"
"(let-values()"
"(let-values(((the-struct_86) s_78))"
"(if(syntax?$1 the-struct_86)"
"(let-values(((tamper12_87)"
"(let-values(((ht_88) from-t_81))"
"(begin"
"(if((lambda(ht_89)(if(hash? ht_89)(immutable? ht_89) #f)) ht_88)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_88)))"
"((letrec-values(((for-loop_90)"
"(lambda(t_91 i_92)"
"(if i_92"
"(let-values(((from-i_93)"
"(unsafe-immutable-hash-iterate-key"
" ht_88"
" i_92)))"
"(let-values(((t_94)"
"(let-values(((t_95) t_91))"
"(let-values(((t_96)"
"(let-values()"
"(if(set-member?"
" t_95"
" from-i_93)"
"(let-values() t_95)"
"(if(any-superior?"
" t_95"
" from-i_93)"
"(let-values()"
" t_95)"
"(let-values()"
"(set-add"
"(set-add"
"(remove-inferior"
" t_95"
" from-i_93)"
" from-i_93))))))))"
"(values t_96)))))"
"(if(not #f)"
"(for-loop_90"
" t_94"
"(unsafe-immutable-hash-iterate-next ht_88 i_92))"
" t_94)))"
" t_91))))"
" for-loop_90)"
" t_80"
"(unsafe-immutable-hash-iterate-first ht_88))))))"
"(syntax1.1"
"(syntax-content the-struct_86)"
"(syntax-scopes the-struct_86)"
"(syntax-shifted-multi-scopes the-struct_86)"
"(syntax-scope-propagations the-struct_86)"
"(syntax-mpi-shifts the-struct_86)"
"(syntax-srcloc the-struct_86)"
"(syntax-props the-struct_86)"
"(syntax-inspector the-struct_86)"
" tamper12_87))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_86)))))))))))))"
"(define-values"
"(syntax-taint$1)"
"(lambda(s_97)"
"(if(tamper-tainted?(syntax-tamper s_97))"
" s_97"
"(let-values(((the-struct_98) s_97))"
"(if(syntax?$1 the-struct_98)"
"(let-values(((tamper13_99)(tamper-tainted-for-content(syntax-content s_97))))"
"(syntax1.1"
"(syntax-content the-struct_98)"
"(syntax-scopes the-struct_98)"
"(syntax-shifted-multi-scopes the-struct_98)"
"(syntax-scope-propagations the-struct_98)"
"(syntax-mpi-shifts the-struct_98)"
"(syntax-srcloc the-struct_98)"
"(syntax-props the-struct_98)"
"(syntax-inspector the-struct_98)"
" tamper13_99))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_98))))))"
"(define-values"
"(any-superior?)"
"(lambda(t_100 from-i_101)"
"(let-values(((ht_102) t_100))"
"(begin"
"(if((lambda(ht_103)(if(hash? ht_103)(immutable? ht_103) #f)) ht_102)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_102)))"
"((letrec-values(((for-loop_104)"
"(lambda(result_105 i_106)"
"(if i_106"
"(let-values(((i_107)(unsafe-immutable-hash-iterate-key ht_102 i_106)))"
"(let-values(((result_108)"
"(let-values()"
"(let-values(((result_110)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same? i_107 from-i_101)))))"
"(values result_110)))))"
"(if(if(not((lambda x_111 result_108) i_107))(not #f) #f)"
"(for-loop_104 result_108(unsafe-immutable-hash-iterate-next ht_102 i_106))"
" result_108)))"
" result_105))))"
" for-loop_104)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_102))))))"
"(define-values"
"(inspector-superior-or-same?)"
"(lambda(sup-i_112 i_113)"
"(let-values(((or-part_114)(eq? sup-i_112 i_113)))"
"(if or-part_114 or-part_114(inspector-superior? sup-i_112 i_113)))))"
"(void)"
"(void)"
"(define-values"
"(struct:fallback fallback1.1 fallback? fallback-search-list)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'fallback #f 1 0 #f null 'prefab #f '(0) #f 'fallback)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'search-list))))"
"(define-values"
"(fallback-first)"
"(lambda(smss_21)(if(fallback? smss_21)(car(fallback-search-list smss_21)) smss_21)))"
"(define-values"
"(fallback-rest)"
"(lambda(smss_22)"
"(let-values(((l_23)(cdr(fallback-search-list smss_22))))(if(null?(cdr l_23))(car l_23)(fallback1.1 l_23)))))"
"(define-values"
"(fallback-push)"
"(lambda(smss_24 smss/maybe-fallback_25)"
"(fallback1.1"
"(cons"
" smss_24"
"(if(fallback? smss/maybe-fallback_25)"
"(fallback-search-list smss/maybe-fallback_25)"
"(list smss/maybe-fallback_25))))))"
"(define-values"
"(fallback-update-first)"
"(lambda(smss_26 f_27)"
"(if(fallback? smss_26)"
"(let-values(((l_28)(fallback-search-list smss_26)))(fallback1.1(cons(f_27(car l_28))(cdr l_28))))"
"(f_27 smss_26))))"
"(define-values"
"(fallback-map)"
"(lambda(smss_29 f_30)"
"(if(fallback? smss_29)"
"(fallback1.1"
"(let-values(((lst_31)(fallback-search-list smss_29)))"
"(begin"
"(if(list? lst_31)(void)(let-values()(in-list lst_31)))"
"((letrec-values(((for-loop_32)"
"(lambda(lst_33)"
"(if(pair? lst_33)"
"(let-values(((smss_34)(unsafe-car lst_33))((rest_35)(unsafe-cdr lst_33)))"
"(let-values(((post-guard-var_36)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_37)(let-values()(let-values()(f_30 smss_34)))))"
"(let-values(((result_38)(if(post-guard-var_36)(for-loop_32 rest_35) null)))"
"(cons elem_37 result_38))))))"
" null))))"
" for-loop_32)"
" lst_31))))"
"(f_30 smss_29))))"
"(define-values"
"(fallback->list)"
"(lambda(smss_39)(if(fallback? smss_39)(fallback-search-list smss_39)(list smss_39))))"
"(void)"
"(void)"
"(define-values(cache)(box(make-weak-box #f)))"
"(define-values"
"(clear-resolve-cache!)"
"(case-lambda"
"((sym_16)"
"(let-values(((c_17)(weak-box-value(unbox cache))))(if c_17(let-values()(hash-remove! c_17 sym_16))(void))))"
"(()(let-values(((c_18)(weak-box-value(unbox cache))))(if c_18(let-values()(hash-clear! c_18))(void))))))"
"(define-values"
"(struct:entry entry1.1 entry? entry-scs entry-smss entry-phase entry-binding)"
"(let-values(((struct:_19 make-_20 ?_21 -ref_22 -set!_23)"
"(let-values()"
"(let-values()"
"(make-struct-type 'entry #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'entry)))))"
"(values"
" struct:_19"
" make-_20"
" ?_21"
"(make-struct-field-accessor -ref_22 0 'scs)"
"(make-struct-field-accessor -ref_22 1 'smss)"
"(make-struct-field-accessor -ref_22 2 'phase)"
"(make-struct-field-accessor -ref_22 3 'binding))))"
"(define-values"
"(resolve-cache-get)"
"(lambda(sym_54 phase_55 scs_56 smss_57)"
"(let-values(((c_58)(weak-box-value(unbox cache))))"
"(if c_58"
"(let-values(((v_59)(hash-ref c_58 sym_54 #f)))"
"(if v_59"
"(if(eqv? phase_55(entry-phase v_59))"
"(if(set=? scs_56(entry-scs v_59))(if(set=? smss_57(entry-smss v_59))(entry-binding v_59) #f) #f)"
" #f)"
" #f))"
" #f))))"
"(define-values"
"(resolve-cache-set!)"
"(lambda(sym_60 phase_61 scs_62 smss_63 b_64)"
"(let-values(((wb_65)(unbox cache)))"
"(let-values(((c_66)(weak-box-value wb_65)))"
"(if(not c_66)"
"(let-values()"
"(begin"
"(box-cas! cache wb_65(make-weak-box(make-hasheq)))"
"(resolve-cache-set! sym_60 phase_61 scs_62 smss_63 b_64)))"
"(let-values()(hash-set! c_66 sym_60(entry1.1 scs_62 smss_63 phase_61 b_64))))))))"
"(define-values(NUM-CACHE-SLOTS) 8)"
"(define-values(cached-sets)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-sets-pos) 0)"
"(define-values(cached-hashes)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-hashes-pos) 0)"
"(define-values"
"(cache-or-reuse-set)"
"(lambda(s_67)"
"(let-values(((vec_68)"
"(let-values(((or-part_69)(weak-box-value cached-sets)))"
"(if or-part_69"
" or-part_69"
"(let-values(((vec_70)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-sets(make-weak-box vec_70)) vec_70))))))"
"(let-values(((or-part_71)"
"(let-values(((vec_72 len_73)"
"(let-values(((vec_74) vec_68))"
"(begin"
"(if(vector? vec_74)(void)(let-values()(in-vector vec_74)))"
"(values vec_74(unsafe-vector-length vec_74))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_75)"
"(lambda(result_76 pos_77)"
"(if(unsafe-fx< pos_77 len_73)"
"(let-values(((s2_78)(unsafe-vector-ref vec_72 pos_77)))"
"(let-values(((result_79)"
"(let-values()"
"(let-values(((result_81)"
"(let-values()"
"(let-values()"
"(if s2_78"
"(if(set=? s_67 s2_78) s2_78 #f)"
" #f)))))"
"(values result_81)))))"
"(if(if(not((lambda x_82 result_79) s2_78))(not #f) #f)"
"(for-loop_75 result_79(unsafe-fx+ 1 pos_77))"
" result_79)))"
" result_76))))"
" for-loop_75)"
" #f"
" 0)))))"
"(if or-part_71"
" or-part_71"
"(begin"
"(vector-set! vec_68 cached-sets-pos s_67)"
"(set! cached-sets-pos(modulo(add1 cached-sets-pos) NUM-CACHE-SLOTS))"
" s_67))))))"
"(define-values"
"(cache-or-reuse-hash)"
"(lambda(s_83)"
"(let-values(((vec_84)"
"(let-values(((or-part_85)(weak-box-value cached-hashes)))"
"(if or-part_85"
" or-part_85"
"(let-values(((vec_86)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-hashes(make-weak-box vec_86)) vec_86))))))"
"(let-values(((or-part_87)"
"(let-values(((vec_88 len_89)"
"(let-values(((vec_90) vec_84))"
"(begin"
"(if(vector? vec_90)(void)(let-values()(in-vector vec_90)))"
"(values vec_90(unsafe-vector-length vec_90))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_91)"
"(lambda(result_92 pos_93)"
"(if(unsafe-fx< pos_93 len_89)"
"(let-values(((s2_94)(unsafe-vector-ref vec_88 pos_93)))"
"(let-values(((result_95)"
"(let-values()"
"(let-values(((result_97)"
"(let-values()"
"(let-values()"
"(if s2_94"
"(if(equal? s_83 s2_94) s2_94 #f)"
" #f)))))"
"(values result_97)))))"
"(if(if(not((lambda x_98 result_95) s2_94))(not #f) #f)"
"(for-loop_91 result_95(unsafe-fx+ 1 pos_93))"
" result_95)))"
" result_92))))"
" for-loop_91)"
" #f"
" 0)))))"
"(if or-part_87"
" or-part_87"
"(begin"
"(vector-set! vec_84 cached-hashes-pos s_83)"
"(set! cached-hashes-pos(modulo(add1 cached-hashes-pos) NUM-CACHE-SLOTS))"
" s_83))))))"
"(void)"
"(void)"
"(define-values"
"(struct:scope scope1.1 scope? scope-id scope-kind scope-binding-table set-scope-binding-table!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'scope"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:scope-with-bindings"
"(lambda(s_46 reachable-scopes_47 reach_48 register-trigger_49)"
"(binding-table-register-reachable"
"(scope-binding-table s_46)"
" reachable-scopes_47"
" reach_48"
" register-trigger_49)))"
"(cons prop:reach-scopes(lambda(s_50 reach_51)(void)))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_52 ser-push!_53 state_54)"
"(if(binding-table-empty?(scope-binding-table s_52))"
"(let-values()(ser-push!_53 'tag #f))"
"(let-values()"
"(begin"
"(ser-push!_53 'tag '#:scope-fill!)"
"(ser-push!_53"
"(binding-table-prune-to-reachable(scope-binding-table s_52) state_54)))))))"
"(cons"
" prop:serialize"
"(lambda(s_55 ser-push!_56 state_57)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_57) s_55)"
"(void)"
"                             (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(if(eq? s_55 top-level-common-scope)"
"(let-values()(ser-push!_56 'tag '#:scope))"
"(let-values()"
"(begin(ser-push!_56 'tag '#:scope+kind)(ser-push!_56(scope-kind s_55))))))))"
"(cons"
" prop:custom-write"
"(lambda(sc_58 port_59 mode_60)"
"(begin"
"                           (write-string \"#<scope:\" port_59)"
"(display(scope-id sc_58) port_59)"
"                           (write-string \":\" port_59)"
"(display(scope-kind sc_58) port_59)"
"                           (write-string \">\" port_59)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'scope)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'id)"
"(make-struct-field-accessor -ref_4 1 'kind)"
"(make-struct-field-accessor -ref_4 2 'binding-table)"
"(make-struct-field-mutator -set!_5 2 'binding-table))))"
"(define-values"
"(deserialize-scope)"
"(case-lambda"
"(() top-level-common-scope)"
"((kind_61)(scope1.1(new-deserialize-scope-id!) kind_61 empty-binding-table))))"
"(define-values(deserialize-scope-fill!)(lambda(s_62 bt_63)(set-scope-binding-table! s_62 bt_63)))"
"(define-values"
"(struct:multi-scope"
" multi-scope2.1"
" multi-scope?"
" multi-scope-id"
" multi-scope-name"
" multi-scope-scopes"
" multi-scope-shifted"
" multi-scope-label-shifted)"
"(let-values(((struct:_64 make-_65 ?_66 -ref_67 -set!_68)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'multi-scope"
" #f"
" 5"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(ms_109 reach_110)(reach_110(multi-scope-scopes ms_109))))"
"(cons"
" prop:serialize"
"(lambda(ms_111 ser-push!_112 state_113)"
"(begin"
"(ser-push!_112 'tag '#:multi-scope)"
"(ser-push!_112(multi-scope-name ms_111))"
"(ser-push!_112(multi-scope-scopes ms_111))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'multi-scope)))))"
"(values"
" struct:_64"
" make-_65"
" ?_66"
"(make-struct-field-accessor -ref_67 0 'id)"
"(make-struct-field-accessor -ref_67 1 'name)"
"(make-struct-field-accessor -ref_67 2 'scopes)"
"(make-struct-field-accessor -ref_67 3 'shifted)"
"(make-struct-field-accessor -ref_67 4 'label-shifted))))"
"(define-values"
"(deserialize-multi-scope)"
"(lambda(name_114 scopes_115)"
"(multi-scope2.1(new-deserialize-scope-id!) name_114 scopes_115(box(hasheqv))(box(hash)))))"
"(define-values"
"(struct:representative-scope"
" representative-scope3.1"
" representative-scope?"
" representative-scope-owner"
" representative-scope-phase"
" set-representative-scope-owner!"
" set-representative-scope-phase!)"
"(let-values(((struct:_116 make-_117 ?_118 -ref_119 -set!_120)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'representative-scope"
" struct:scope"
" 2"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(s_152 reach_153)(reach_153(representative-scope-owner s_152))))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_154 ser-push!_155 state_156)"
"(begin"
"(ser-push!_155 'tag '#:representative-scope-fill!)"
"(ser-push!_155(binding-table-prune-to-reachable(scope-binding-table s_154) state_156))"
"(ser-push!_155(representative-scope-owner s_154)))))"
"(cons"
" prop:serialize"
"(lambda(s_157 ser-push!_158 state_159)"
"(begin"
"(ser-push!_158 'tag '#:representative-scope)"
"(ser-push!_158(scope-kind s_157))"
"(ser-push!_158(representative-scope-phase s_157)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_160 port_161 mode_162)"
"(begin"
"                           (write-string \"#<scope:\" port_161)"
"(display(scope-id sc_160) port_161)"
"(if(representative-scope-owner sc_160)"
"(let-values()"
"(begin"
"                                 (write-string \"=\" port_161)"
"(display(multi-scope-id(representative-scope-owner sc_160)) port_161)))"
"(void))"
"                           (write-string \"@\" port_161)"
"(display(representative-scope-phase sc_160) port_161)"
"                           (write-string \">\" port_161)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'representative-scope)))))"
"(values"
" struct:_116"
" make-_117"
" ?_118"
"(make-struct-field-accessor -ref_119 0 'owner)"
"(make-struct-field-accessor -ref_119 1 'phase)"
"(make-struct-field-mutator -set!_120 0 'owner)"
"(make-struct-field-mutator -set!_120 1 'phase))))"
"(define-values"
"(deserialize-representative-scope)"
"(lambda(kind_163 phase_164)"
"(let-values(((v_165)(representative-scope3.1(new-deserialize-scope-id!) kind_163 #f #f phase_164))) v_165)))"
"(define-values"
"(deserialize-representative-scope-fill!)"
"(lambda(s_166 bt_167 owner_168)"
"(begin(deserialize-scope-fill! s_166 bt_167)(set-representative-scope-owner! s_166 owner_168))))"
"(define-values"
"(struct:shifted-multi-scope"
" shifted-multi-scope4.1"
" shifted-multi-scope?"
" shifted-multi-scope-phase"
" shifted-multi-scope-multi-scope)"
"(let-values(((struct:_169 make-_170 ?_171 -ref_172 -set!_173)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-multi-scope"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(sms_202 reach_203)(reach_203(shifted-multi-scope-multi-scope sms_202))))"
"(cons"
" prop:serialize"
"(lambda(sms_204 ser-push!_205 state_206)"
"(begin"
"(ser-push!_205 'tag '#:shifted-multi-scope)"
"(ser-push!_205(shifted-multi-scope-phase sms_204))"
"(ser-push!_205(shifted-multi-scope-multi-scope sms_204)))))"
"(cons"
" prop:custom-write"
"(lambda(sms_207 port_208 mode_209)"
"(begin"
"                           (write-string \"#<scope:\" port_208)"
"(display(multi-scope-id(shifted-multi-scope-multi-scope sms_207)) port_208)"
"                           (write-string \"@\" port_208)"
"(display(shifted-multi-scope-phase sms_207) port_208)"
"                           (write-string \">\" port_208)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'shifted-multi-scope)))))"
"(values"
" struct:_169"
" make-_170"
" ?_171"
"(make-struct-field-accessor -ref_172 0 'phase)"
"(make-struct-field-accessor -ref_172 1 'multi-scope))))"
"(define-values"
"(deserialize-shifted-multi-scope)"
"(lambda(phase_210 multi-scope_211)(intern-shifted-multi-scope phase_210 multi-scope_211)))"
"(define-values"
"(intern-shifted-multi-scope)"
"(lambda(phase_212 multi-scope_213)"
"(letrec-values(((transaction-loop_214)"
"(lambda(boxed-table_215 key_216 make_217)"
"(let-values(((or-part_218)(hash-ref(unbox boxed-table_215) phase_212 #f)))"
"(if or-part_218"
" or-part_218"
"(let-values(((val_219)(make_217)))"
"(let-values(((current_220)(unbox boxed-table_215)))"
"(let-values(((next_221)(hash-set current_220 key_216 val_219)))"
"(if(box-cas! boxed-table_215 current_220 next_221)"
" val_219"
"(transaction-loop_214 boxed-table_215 key_216 make_217))))))))))"
"(if(phase? phase_212)"
"(let-values()"
"(let-values(((or-part_222)(hash-ref(unbox(multi-scope-shifted multi-scope_213)) phase_212 #f)))"
"(if or-part_222"
" or-part_222"
"(transaction-loop_214"
"(multi-scope-shifted multi-scope_213)"
" phase_212"
"(lambda()(shifted-multi-scope4.1 phase_212 multi-scope_213))))))"
"(let-values()"
"(let-values(((or-part_223)(hash-ref(unbox(multi-scope-label-shifted multi-scope_213)) phase_212 #f)))"
"(if or-part_223"
" or-part_223"
"(transaction-loop_214"
"(multi-scope-label-shifted multi-scope_213)"
" phase_212"
"(lambda()(shifted-multi-scope4.1 phase_212 multi-scope_213))))))))))"
"(define-values"
"(struct:shifted-to-label-phase shifted-to-label-phase5.1 shifted-to-label-phase? shifted-to-label-phase-from)"
"(let-values(((struct:_224 make-_225 ?_226 -ref_227 -set!_228)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-to-label-phase"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'shifted-to-label-phase)))))"
"(values struct:_224 make-_225 ?_226(make-struct-field-accessor -ref_227 0 'from))))"
"(define-values(id-counter) 0)"
"(define-values(new-scope-id!)(lambda()(begin(set! id-counter(add1 id-counter)) id-counter)))"
"(define-values(new-deserialize-scope-id!)(lambda()(-(new-scope-id!))))"
"(define-values(top-level-common-scope)(scope1.1 0 'module empty-binding-table))"
"(define-values(new-scope)(lambda(kind_244)(scope1.1(new-scope-id!) kind_244 empty-binding-table)))"
"(define-values"
"(new-multi-scope)"
"(let-values(((new-multi-scope8_245)"
"(lambda(name6_246 name7_247)"
"(let-values(((name_248)(if name7_247 name6_246 #f)))"
"(let-values()"
"(intern-shifted-multi-scope"
" 0"
"(multi-scope2.1(new-scope-id!) name_248(make-hasheqv)(box(hasheqv))(box(hash)))))))))"
"(case-lambda(()(new-multi-scope8_245 #f #f))((name6_249)(new-multi-scope8_245 name6_249 #t)))))"
"(define-values"
"(multi-scope-to-scope-at-phase)"
"(lambda(ms_250 phase_251)"
"(let-values(((or-part_252)(hash-ref(multi-scope-scopes ms_250) phase_251 #f)))"
"(if or-part_252"
" or-part_252"
"(let-values(((s_253)(representative-scope3.1(new-scope-id!) 'module empty-binding-table ms_250 phase_251)))"
"(begin(hash-set!(multi-scope-scopes ms_250) phase_251 s_253) s_253))))))"
"(define-values(scope>?)(lambda(sc1_254 sc2_255)(>(scope-id sc1_254)(scope-id sc2_255))))"
"(define-values(scope<?)(lambda(sc1_256 sc2_257)(<(scope-id sc1_256)(scope-id sc2_257))))"
"(define-values"
"(shifted-multi-scope<?)"
"(lambda(sms1_258 sms2_259)"
"(let-values(((ms1_260)(shifted-multi-scope-multi-scope sms1_258)))"
"(let-values(((ms2_261)(shifted-multi-scope-multi-scope sms2_259)))"
"(if(eq? ms1_260 ms2_261)"
"(let-values(((p1_262)(shifted-multi-scope-phase sms1_258))((p2_263)(shifted-multi-scope-phase sms2_259)))"
"(if(shifted-to-label-phase? p1_262)"
"(let-values()"
"(if(shifted-to-label-phase? p2_263)"
"(let-values()(phase<?(shifted-to-label-phase-from p1_262)(shifted-to-label-phase-from p2_263)))"
"(let-values() #f)))"
"(if(shifted-to-label-phase? p2_263)(let-values() #t)(let-values()(phase<? p1_262 p2_263)))))"
"(<(multi-scope-id ms1_260)(multi-scope-id ms2_261)))))))"
"(define-values"
"(apply-scope)"
"(lambda(s_264 sc_265 op_266 prop-op_267)"
"(if(shifted-multi-scope? sc_265)"
"(let-values(((the-struct_268) s_264))"
"(if(syntax?$1 the-struct_268)"
"(let-values(((shifted-multi-scopes37_269)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_264)"
"(lambda(smss_271)(op_266(fallback-first smss_271) sc_265))))"
"((scope-propagations38_270)"
"(if(datum-has-elements?(syntax-content s_264))"
"(prop-op_267"
"(syntax-scope-propagations s_264)"
" sc_265"
"(syntax-scopes s_264)"
"(syntax-shifted-multi-scopes s_264)"
"(syntax-mpi-shifts s_264))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_268)"
"(syntax-scopes the-struct_268)"
" shifted-multi-scopes37_269"
" scope-propagations38_270"
"(syntax-mpi-shifts the-struct_268)"
"(syntax-srcloc the-struct_268)"
"(syntax-props the-struct_268)"
"(syntax-inspector the-struct_268)"
"(syntax-tamper the-struct_268)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_268)))"
"(let-values(((the-struct_272) s_264))"
"(if(syntax?$1 the-struct_272)"
"(let-values(((scopes39_273)(op_266(syntax-scopes s_264) sc_265))"
"((scope-propagations40_274)"
"(if(datum-has-elements?(syntax-content s_264))"
"(prop-op_267"
"(syntax-scope-propagations s_264)"
" sc_265"
"(syntax-scopes s_264)"
"(syntax-shifted-multi-scopes s_264)"
"(syntax-mpi-shifts s_264))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_272)"
" scopes39_273"
"(syntax-shifted-multi-scopes the-struct_272)"
" scope-propagations40_274"
"(syntax-mpi-shifts the-struct_272)"
"(syntax-srcloc the-struct_272)"
"(syntax-props the-struct_272)"
"(syntax-inspector the-struct_272)"
"(syntax-tamper the-struct_272)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_272))))))"
"(define-values"
"(syntax-e/no-taint)"
"(lambda(s_275)"
"(let-values((()(begin(propagate-taint! s_275)(values))))"
"(let-values(((prop_276)(syntax-scope-propagations s_275)))"
"(if prop_276"
"(let-values(((new-content_277)"
"(let-values(((s_278)(syntax-content s_275))"
"((f_279)(lambda(tail?_282 x_283) x_283))"
"((s->_280)"
"(lambda(sub-s_284)"
"(let-values(((the-struct_285) sub-s_284))"
"(if(syntax?$1 the-struct_285)"
"(let-values(((scopes41_286)"
"(propagation-apply prop_276(syntax-scopes sub-s_284) s_275))"
"((shifted-multi-scopes42_287)"
"(propagation-apply-shifted"
" prop_276"
"(syntax-shifted-multi-scopes sub-s_284)"
" s_275))"
"((mpi-shifts43_288)"
"(propagation-apply-mpi-shifts"
" prop_276"
"(syntax-mpi-shifts sub-s_284)"
" s_275))"
"((inspector44_289)"
"(propagation-apply-inspector"
" prop_276"
"(syntax-inspector sub-s_284)))"
"((scope-propagations45_290)"
"(propagation-merge"
" prop_276"
"(syntax-scope-propagations sub-s_284)"
"(syntax-scopes sub-s_284)"
"(syntax-shifted-multi-scopes sub-s_284)"
"(syntax-mpi-shifts sub-s_284))))"
"(syntax1.1"
"(syntax-content the-struct_285)"
" scopes41_286"
" shifted-multi-scopes42_287"
" scope-propagations45_290"
" mpi-shifts43_288"
"(syntax-srcloc the-struct_285)"
"(syntax-props the-struct_285)"
" inspector44_289"
"(syntax-tamper the-struct_285)))"
"                                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_285)))))"
"((seen_281) #f))"
"(let-values(((s_291) s_278)"
"((f_292)"
"(lambda(tail?_294 v_295)"
"(if(syntax?$1 v_295)"
"(let-values()(s->_280 v_295))"
"(let-values()(f_279 tail?_294 v_295)))))"
"((seen_293) seen_281))"
"((letrec-values(((loop_296)"
"(lambda(tail?_297 s_298 prev-depth_299)"
"(let-values(((depth_300)(add1 prev-depth_299)))"
"(if(if seen_293(> depth_300 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_297"
" s_298"
"(lambda(tail?_301 s_302)(f_292 tail?_301 s_302))"
" seen_293))"
"(if(null? s_298)"
"(let-values()(f_292 tail?_297 s_298))"
"(if(pair? s_298)"
"(let-values()"
"(f_292"
" tail?_297"
"(cons"
"(loop_296 #f(car s_298) depth_300)"
"(loop_296 #t(cdr s_298) depth_300))))"
"(if(let-values(((or-part_303)(symbol? s_298)))"
"(if or-part_303"
" or-part_303"
"(let-values(((or-part_304)(boolean? s_298)))"
"(if or-part_304 or-part_304(number? s_298)))))"
"(let-values()(f_292 #f s_298))"
"(if(let-values(((or-part_305)(vector? s_298)))"
"(if or-part_305"
" or-part_305"
"(let-values(((or-part_306)(box? s_298)))"
"(if or-part_306"
" or-part_306"
"(let-values(((or-part_307)"
"(prefab-struct-key s_298)))"
"(if or-part_307 or-part_307(hash? s_298)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_297"
" s_298"
"(lambda(tail?_308 s_309)(f_292 tail?_308 s_309))"
" seen_293))"
"(let-values()(f_292 #f s_298)))))))))))"
" loop_296)"
" #f"
" s_291"
" 0)))))"
"(begin"
"(set-syntax-content! s_275 new-content_277)"
"(set-syntax-scope-propagations! s_275 #f)"
" new-content_277))"
"(syntax-content s_275))))))"
"(define-values"
"(syntax-e$1)"
"(lambda(s_310)"
"(let-values(((content_311)(syntax-e/no-taint s_310)))"
"(if(not(tamper-armed?(syntax-tamper s_310)))"
"(let-values() content_311)"
"(if(datum-has-elements? content_311)"
"(let-values()(taint-content content_311))"
"(let-values() content_311))))))"
"(define-values"
"(generalize-scope)"
"(lambda(sc_312)"
"(if(representative-scope? sc_312)"
"(intern-shifted-multi-scope(representative-scope-phase sc_312)(representative-scope-owner sc_312))"
" sc_312)))"
"(define-values"
"(add-scope)"
"(lambda(s_313 sc_314)(apply-scope s_313(generalize-scope sc_314) set-add propagation-add)))"
"(define-values"
"(add-scopes)"
"(lambda(s_315 scs_316)"
"(let-values(((lst_317) scs_316))"
"(begin"
"(if(list? lst_317)(void)(let-values()(in-list lst_317)))"
"((letrec-values(((for-loop_318)"
"(lambda(s_319 lst_320)"
"(if(pair? lst_320)"
"(let-values(((sc_321)(unsafe-car lst_320))((rest_322)(unsafe-cdr lst_320)))"
"(let-values(((s_323)"
"(let-values(((s_324) s_319))"
"(let-values(((s_325)(let-values()(add-scope s_324 sc_321))))"
"(values s_325)))))"
"(if(not #f)(for-loop_318 s_323 rest_322) s_323)))"
" s_319))))"
" for-loop_318)"
" s_315"
" lst_317)))))"
"(define-values"
"(remove-scope)"
"(lambda(s_326 sc_327)(apply-scope s_326(generalize-scope sc_327) set-remove propagation-remove)))"
"(define-values"
"(remove-scopes)"
"(lambda(s_328 scs_329)"
"(let-values(((lst_330) scs_329))"
"(begin"
"(if(list? lst_330)(void)(let-values()(in-list lst_330)))"
"((letrec-values(((for-loop_331)"
"(lambda(s_332 lst_333)"
"(if(pair? lst_333)"
"(let-values(((sc_334)(unsafe-car lst_333))((rest_335)(unsafe-cdr lst_333)))"
"(let-values(((s_336)"
"(let-values(((s_337) s_332))"
"(let-values(((s_338)(let-values()(remove-scope s_337 sc_334))))"
"(values s_338)))))"
"(if(not #f)(for-loop_331 s_336 rest_335) s_336)))"
" s_332))))"
" for-loop_331)"
" s_328"
" lst_330)))))"
"(define-values"
"(set-flip)"
"(lambda(s_339 e_340)(if(set-member? s_339 e_340)(set-remove s_339 e_340)(set-add s_339 e_340))))"
"(define-values"
"(flip-scope)"
"(lambda(s_341 sc_342)(apply-scope s_341(generalize-scope sc_342) set-flip propagation-flip)))"
"(define-values"
"(flip-scopes)"
"(lambda(s_343 scs_344)"
"(let-values(((lst_345) scs_344))"
"(begin"
"(if(list? lst_345)(void)(let-values()(in-list lst_345)))"
"((letrec-values(((for-loop_346)"
"(lambda(s_347 lst_348)"
"(if(pair? lst_348)"
"(let-values(((sc_349)(unsafe-car lst_348))((rest_350)(unsafe-cdr lst_348)))"
"(let-values(((s_351)"
"(let-values(((s_352) s_347))"
"(let-values(((s_353)(let-values()(flip-scope s_352 sc_349))))"
"(values s_353)))))"
"(if(not #f)(for-loop_346 s_351 rest_350) s_351)))"
" s_347))))"
" for-loop_346)"
" s_343"
" lst_345)))))"
"(define-values"
"(push-scope)"
"(lambda(s_354 sms_355)"
"(let-values(((smss/maybe-fallbacks46_356) #f))"
"(let-values(((prev-result_357) #f))"
"(let-values(((push_358)"
"(lambda(smss/maybe-fallbacks_359)"
"(if(eq? smss/maybe-fallbacks46_356 smss/maybe-fallbacks_359)"
"(let-values() prev-result_357)"
"(let-values()"
"(let-values(((r_360)"
"(let-values()"
"(let-values(((smss_361)(fallback-first smss/maybe-fallbacks_359)))"
"(if(set-empty? smss_361)"
"(let-values()(set-add smss_361 sms_355))"
"(if(set-member? smss_361 sms_355)"
"(let-values() smss/maybe-fallbacks_359)"
"(let-values()"
"(fallback-push"
"(set-add smss_361 sms_355)"
" smss/maybe-fallbacks_359))))))))"
"(begin"
"(set! smss/maybe-fallbacks46_356 smss/maybe-fallbacks_359)"
"(set! prev-result_357 r_360)"
" r_360)))))))"
"(let-values(((s_362) s_354)"
"((f_363)(lambda(tail?_367 x_368) x_368))"
"((d->s_364)"
"(lambda(s_369 d_370)"
"(let-values(((the-struct_371) s_369))"
"(if(syntax?$1 the-struct_371)"
"(let-values(((content47_372) d_370)"
"((shifted-multi-scopes48_373)"
"(push_358(syntax-shifted-multi-scopes s_369))))"
"(syntax1.1"
" content47_372"
"(syntax-scopes the-struct_371)"
" shifted-multi-scopes48_373"
"(syntax-scope-propagations the-struct_371)"
"(syntax-mpi-shifts the-struct_371)"
"(syntax-srcloc the-struct_371)"
"(syntax-props the-struct_371)"
"(syntax-inspector the-struct_371)"
"(syntax-tamper the-struct_371)))"
"                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_371)))))"
"((s-e_365) syntax-e/no-taint)"
"((seen_366) #f))"
"((letrec-values(((loop_374)"
"(lambda(s_375)"
"(let-values(((s_376) s_375)"
"((f_377)"
"(lambda(tail?_379 v_380)"
"(if(syntax?$1 v_380)"
"(let-values()(d->s_364 v_380(loop_374(s-e_365 v_380))))"
"(let-values()(f_363 tail?_379 v_380)))))"
"((seen_378) seen_366))"
"((letrec-values(((loop_381)"
"(lambda(tail?_382 s_383 prev-depth_384)"
"(let-values(((depth_385)(add1 prev-depth_384)))"
"(if(if seen_378(> depth_385 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_382"
" s_383"
"(lambda(tail?_386 s_387)(f_377 tail?_386 s_387))"
" seen_378))"
"(if(null? s_383)"
"(let-values()(f_377 tail?_382 s_383))"
"(if(pair? s_383)"
"(let-values()"
"(f_377"
" tail?_382"
"(cons"
"(loop_381 #f(car s_383) depth_385)"
"(loop_381 #t(cdr s_383) depth_385))))"
"(if(let-values(((or-part_388)(symbol? s_383)))"
"(if or-part_388"
" or-part_388"
"(let-values(((or-part_389)(boolean? s_383)))"
"(if or-part_389 or-part_389(number? s_383)))))"
"(let-values()(f_377 #f s_383))"
"(if(let-values(((or-part_390)(vector? s_383)))"
"(if or-part_390"
" or-part_390"
"(let-values(((or-part_391)(box? s_383)))"
"(if or-part_391"
" or-part_391"
"(let-values(((or-part_392)"
"(prefab-struct-key s_383)))"
"(if or-part_392"
" or-part_392"
"(hash? s_383)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_382"
" s_383"
"(lambda(tail?_393 s_394)(f_377 tail?_393 s_394))"
" seen_378))"
"(let-values()(f_377 #f s_383)))))))))))"
" loop_381)"
" #f"
" s_376"
" 0)))))"
" loop_374)"
" s_362)))))))"
"(define-values"
"(struct:propagation"
" propagation10.1"
" propagation?"
" propagation-prev-scs"
" propagation-prev-smss"
" propagation-scope-ops"
" propagation-prev-mss"
" propagation-add-mpi-shifts"
" propagation-inspector)"
"(let-values(((struct:_395 make-_396 ?_397 -ref_398 -set!_399)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'propagation"
" #f"
" 6"
" 0"
" #f"
"(list(cons prop:propagation syntax-e$1))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'propagation)))))"
"(values"
" struct:_395"
" make-_396"
" ?_397"
"(make-struct-field-accessor -ref_398 0 'prev-scs)"
"(make-struct-field-accessor -ref_398 1 'prev-smss)"
"(make-struct-field-accessor -ref_398 2 'scope-ops)"
"(make-struct-field-accessor -ref_398 3 'prev-mss)"
"(make-struct-field-accessor -ref_398 4 'add-mpi-shifts)"
"(make-struct-field-accessor -ref_398 5 'inspector))))"
"(define-values"
"(propagation-add)"
"(lambda(prop_440 sc_441 prev-scs_442 prev-smss_443 prev-mss_444)"
"(if prop_440"
"(let-values(((the-struct_445) prop_440))"
"(if(propagation? the-struct_445)"
"(let-values(((scope-ops50_446)(hash-set(propagation-scope-ops prop_440) sc_441 'add)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_445)"
"(propagation-prev-smss the-struct_445)"
" scope-ops50_446"
"(propagation-prev-mss the-struct_445)"
"(propagation-add-mpi-shifts the-struct_445)"
"(propagation-inspector the-struct_445)))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_445)))"
"(propagation10.1 prev-scs_442 prev-smss_443(hasheq sc_441 'add) prev-mss_444 #f #f))))"
"(define-values"
"(propagation-remove)"
"(lambda(prop_447 sc_448 prev-scs_449 prev-smss_450 prev-mss_451)"
"(if prop_447"
"(let-values(((the-struct_452) prop_447))"
"(if(propagation? the-struct_452)"
"(let-values(((scope-ops51_453)(hash-set(propagation-scope-ops prop_447) sc_448 'remove)))"
"(propagation10.1"
"(propagation-prev-scs the-struct_452)"
"(propagation-prev-smss the-struct_452)"
" scope-ops51_453"
"(propagation-prev-mss the-struct_452)"
"(propagation-add-mpi-shifts the-struct_452)"
"(propagation-inspector the-struct_452)))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_452)))"
"(propagation10.1 prev-scs_449 prev-smss_450(hasheq sc_448 'remove) prev-mss_451 #f #f))))"
"(define-values"
"(propagation-flip)"
"(lambda(prop_454 sc_455 prev-scs_456 prev-smss_457 prev-mss_458)"
"(if prop_454"
"(let-values(((ops_459)(propagation-scope-ops prop_454)))"
"(let-values(((current-op_460)(hash-ref ops_459 sc_455 #f)))"
"(if(if(eq? current-op_460 'flip)"
"(if(= 1(hash-count ops_459))"
"(if(not(propagation-inspector prop_454))(not(propagation-add-mpi-shifts prop_454)) #f)"
" #f)"
" #f)"
"(let-values() #f)"
"(let-values()"
"(let-values(((the-struct_461) prop_454))"
"(if(propagation? the-struct_461)"
"(let-values(((scope-ops52_462)"
"(if(eq? current-op_460 'flip)"
"(hash-remove ops_459 sc_455)"
"(hash-set"
" ops_459"
" sc_455"
"(let-values(((tmp_463) current-op_460))"
"(if(equal? tmp_463 'add)"
"(let-values() 'remove)"
"(if(equal? tmp_463 'remove)(let-values() 'add)(let-values() 'flip))))))))"
"(propagation10.1"
"(propagation-prev-scs the-struct_461)"
"(propagation-prev-smss the-struct_461)"
" scope-ops52_462"
"(propagation-prev-mss the-struct_461)"
"(propagation-add-mpi-shifts the-struct_461)"
"(propagation-inspector the-struct_461)))"
"                  (raise-argument-error 'struct-copy \"propagation?\" the-struct_461)))))))"
"(propagation10.1 prev-scs_456 prev-smss_457(hasheq sc_455 'flip) prev-mss_458 #f #f))))"
"(define-values"
"(propagation-mpi-shift)"
"(lambda(prop_464 add_465 inspector_466 prev-scs_467 prev-smss_468 prev-mss_469)"
"(if prop_464"
"(let-values(((the-struct_470) prop_464))"
"(if(propagation? the-struct_470)"
"(let-values(((add-mpi-shifts53_471)"
"(let-values(((base-add_473)(propagation-add-mpi-shifts prop_464)))"
"(if(if add_465 base-add_473 #f)"
"(lambda(mss_474)(add_465(base-add_473 mss_474)))"
"(let-values(((or-part_475) add_465))(if or-part_475 or-part_475 base-add_473)))))"
"((inspector54_472)"
"(let-values(((or-part_476)(propagation-inspector prop_464)))"
"(if or-part_476 or-part_476 inspector_466))))"
"(propagation10.1"
"(propagation-prev-scs the-struct_470)"
"(propagation-prev-smss the-struct_470)"
"(propagation-scope-ops the-struct_470)"
"(propagation-prev-mss the-struct_470)"
" add-mpi-shifts53_471"
" inspector54_472))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_470)))"
"(propagation10.1 prev-scs_467 prev-smss_468 '#hasheq() prev-mss_469 add_465 inspector_466))))"
"(define-values"
"(propagation-apply)"
"(lambda(prop_477 scs_478 parent-s_479)"
"(if(eq?(propagation-prev-scs prop_477) scs_478)"
"(let-values()(syntax-scopes parent-s_479))"
"(let-values()"
"(let-values(((new-scs_480)"
"(let-values(((ht_481)(propagation-scope-ops prop_477)))"
"(begin"
"(if((lambda(ht_482)(if(hash? ht_482)(immutable? ht_482) #f)) ht_481)"
"(void)"
"(let-values()(default-in-immutable-hash ht_481)))"
"((letrec-values(((for-loop_483)"
"(lambda(scs_484 i_485)"
"(if i_485"
"(let-values(((sc_486 op_487)"
"(unsafe-immutable-hash-iterate-key+value ht_481 i_485)))"
"(let-values(((scs_488)"
"(let-values(((scs_489) scs_484))"
"(if(not(shifted-multi-scope? sc_486))"
"(let-values(((scs_490) scs_489))"
"(let-values(((scs_491)"
"(let-values()"
"(let-values(((tmp_492) op_487))"
"(if(equal? tmp_492 'add)"
"(let-values()"
"(set-add scs_490 sc_486))"
"(if(equal? tmp_492 'remove)"
"(let-values()"
"(set-remove"
" scs_490"
" sc_486))"
"(let-values()"
"(set-flip"
" scs_490"
" sc_486))))))))"
"(values scs_491)))"
" scs_489))))"
"(if(not #f)"
"(for-loop_483"
" scs_488"
"(unsafe-immutable-hash-iterate-next ht_481 i_485))"
" scs_488)))"
" scs_484))))"
" for-loop_483)"
" scs_478"
"(unsafe-immutable-hash-iterate-first ht_481))))))"
"(if(set=? new-scs_480(syntax-scopes parent-s_479))"
"(syntax-scopes parent-s_479)"
"(cache-or-reuse-set new-scs_480)))))))"
"(define-values"
"(propagation-apply-shifted)"
"(lambda(prop_493 smss_494 parent-s_495)"
"(if(eq?(propagation-prev-smss prop_493) smss_494)"
"(let-values()(syntax-shifted-multi-scopes parent-s_495))"
"(let-values()"
"(let-values(((new-smss_496)"
"(let-values(((ht_498)(propagation-scope-ops prop_493)))"
"(begin"
"(if((lambda(ht_499)(if(hash? ht_499)(immutable? ht_499) #f)) ht_498)"
"(void)"
"(let-values()(default-in-immutable-hash ht_498)))"
"((letrec-values(((for-loop_500)"
"(lambda(smss_501 i_502)"
"(if i_502"
"(let-values(((sms_503 op_504)"
"(unsafe-immutable-hash-iterate-key+value ht_498 i_502)))"
"(let-values(((smss_505)"
"(let-values(((smss_506) smss_501))"
"(if(shifted-multi-scope? sms_503)"
"(let-values(((smss_507) smss_506))"
"(let-values(((smss_508)"
"(let-values()"
"(fallback-update-first"
" smss_507"
"(lambda(smss_509)"
"(let-values(((tmp_510)"
" op_504))"
"(if(equal? tmp_510 'add)"
"(let-values()"
"(set-add"
" smss_509"
" sms_503))"
"(if(equal?"
" tmp_510"
" 'remove)"
"(let-values()"
"(set-remove"
" smss_509"
" sms_503))"
"(let-values()"
"(set-flip"
" smss_509"
" sms_503))))))))))"
"(values smss_508)))"
" smss_506))))"
"(if(not #f)"
"(for-loop_500"
" smss_505"
"(unsafe-immutable-hash-iterate-next ht_498 i_502))"
" smss_505)))"
" smss_501))))"
" for-loop_500)"
" smss_494"
"(unsafe-immutable-hash-iterate-first ht_498))))))"
"(let-values(((parent-smss_497)(syntax-shifted-multi-scopes parent-s_495)))"
"(if(if(set? new-smss_496)(if(set? parent-smss_497)(set=? new-smss_496 parent-smss_497) #f) #f)"
" parent-smss_497"
"(cache-or-reuse-hash new-smss_496))))))))"
"(define-values"
"(propagation-apply-mpi-shifts)"
"(lambda(prop_511 mss_512 parent-s_513)"
"(if(eq?(propagation-prev-mss prop_511) mss_512)"
"(let-values()(syntax-mpi-shifts parent-s_513))"
"(let-values()"
"(let-values(((add_514)(propagation-add-mpi-shifts prop_511)))(if add_514(add_514 mss_512) mss_512))))))"
"(define-values"
"(propagation-apply-inspector)"
"(lambda(prop_515 i_516)"
"(let-values(((or-part_517) i_516))(if or-part_517 or-part_517(propagation-inspector prop_515)))))"
"(define-values"
"(propagation-merge)"
"(lambda(prop_518 base-prop_519 prev-scs_520 prev-smss_521 prev-mss_522)"
"(if(not base-prop_519)"
"(let-values()"
"(if(if(eq?(propagation-prev-scs prop_518) prev-scs_520)"
"(if(eq?(propagation-prev-smss prop_518) prev-smss_521)"
"(eq?(propagation-prev-mss prop_518) prev-mss_522)"
" #f)"
" #f)"
"(let-values() prop_518)"
"(let-values()"
"(propagation10.1"
" prev-scs_520"
" prev-smss_521"
"(propagation-scope-ops prop_518)"
" prev-mss_522"
"(propagation-add-mpi-shifts prop_518)"
"(propagation-inspector prop_518)))))"
"(let-values()"
"(let-values(((new-ops_523)"
"(let-values(((ht_526)(propagation-scope-ops prop_518)))"
"(begin"
"(if((lambda(ht_527)(if(hash? ht_527)(immutable? ht_527) #f)) ht_526)"
"(void)"
"(let-values()(default-in-immutable-hash ht_526)))"
"((letrec-values(((for-loop_528)"
"(lambda(ops_529 i_530)"
"(if i_530"
"(let-values(((sc_531 op_532)"
"(unsafe-immutable-hash-iterate-key+value ht_526 i_530)))"
"(let-values(((ops_533)"
"(let-values(((ops_534) ops_529))"
"(let-values(((ops_535)"
"(let-values()"
"(let-values(((tmp_536) op_532))"
"(if(equal? tmp_536 'add)"
"(let-values()"
"(hash-set ops_534 sc_531 'add))"
"(if(equal? tmp_536 'remove)"
"(let-values()"
"(hash-set"
" ops_534"
" sc_531"
" 'remove))"
"(let-values()"
"(let-values(((current-op_537)"
"(hash-ref"
" ops_534"
" sc_531"
" #f)))"
"(let-values(((tmp_538)"
" current-op_537))"
"(if(equal? tmp_538 'add)"
"(let-values()"
"(hash-set"
" ops_534"
" sc_531"
" 'remove))"
"(if(equal?"
" tmp_538"
" 'remove)"
"(let-values()"
"(hash-set"
" ops_534"
" sc_531"
" 'add))"
"(if(equal?"
" tmp_538"
" 'flip)"
"(let-values()"
"(hash-remove"
" ops_534"
" sc_531))"
"(let-values()"
"(hash-set"
" ops_534"
" sc_531"
" 'flip))))))))))))))"
"(values ops_535)))))"
"(if(not #f)"
"(for-loop_528"
" ops_533"
"(unsafe-immutable-hash-iterate-next ht_526 i_530))"
" ops_533)))"
" ops_529))))"
" for-loop_528)"
"(propagation-scope-ops base-prop_519)"
"(unsafe-immutable-hash-iterate-first ht_526))))))"
"(let-values(((add_524)(propagation-add-mpi-shifts prop_518)))"
"(let-values(((base-add_525)(propagation-add-mpi-shifts base-prop_519)))"
"(if(if(zero?(hash-count new-ops_523))"
"(if(not add_524)"
"(if(not base-add_525)"
"(if(not(propagation-inspector prop_518))(not(propagation-inspector base-prop_519)) #f)"
" #f)"
" #f)"
" #f)"
" #f"
"(let-values(((the-struct_539) base-prop_519))"
"(if(propagation? the-struct_539)"
"(let-values(((scope-ops55_540) new-ops_523)"
"((add-mpi-shifts56_541)"
"(if(if add_524 base-add_525 #f)"
"(lambda(mss_543)(add_524(base-add_525 mss_543)))"
"(let-values(((or-part_544) add_524))(if or-part_544 or-part_544 base-add_525))))"
"((inspector57_542)"
"(let-values(((or-part_545)(propagation-inspector base-prop_519)))"
"(if or-part_545 or-part_545(propagation-inspector prop_518)))))"
"(propagation10.1"
"(propagation-prev-scs the-struct_539)"
"(propagation-prev-smss the-struct_539)"
" scope-ops55_540"
"(propagation-prev-mss the-struct_539)"
" add-mpi-shifts56_541"
" inspector57_542))"
"                    (raise-argument-error 'struct-copy \"propagation?\" the-struct_539)))))))))))"
"(define-values"
"(shift-multi-scope)"
"(lambda(sms_546 delta_547)"
"(if(zero-phase? delta_547)"
"(let-values() sms_546)"
"(if(label-phase? delta_547)"
"(let-values()"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_546))"
"(let-values() #f)"
"(let-values()"
"(intern-shifted-multi-scope"
"(shifted-to-label-phase5.1(phase- 0(shifted-multi-scope-phase sms_546)))"
"(shifted-multi-scope-multi-scope sms_546)))))"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_546))"
"(let-values() sms_546)"
"(let-values()"
"(intern-shifted-multi-scope"
"(phase+ delta_547(shifted-multi-scope-phase sms_546))"
"(shifted-multi-scope-multi-scope sms_546))))))))"
"(define-values"
"(syntax-shift-phase-level$1)"
"(lambda(s_548 phase_549)"
"(if(eqv? phase_549 0)"
" s_548"
"(let-values()"
"(let-values(((smss58_550) #f))"
"(let-values(((prev-result_551) #f))"
"(let-values(((shift-all_552)"
"(lambda(smss_553)"
"(if(eq? smss58_550 smss_553)"
"(let-values() prev-result_551)"
"(let-values()"
"(let-values(((r_554)"
"(let-values()"
"(fallback-map"
" smss_553"
"(lambda(smss_555)"
"(let-values(((ht_556) smss_555))"
"(begin"
"(if((lambda(ht_557)(if(hash? ht_557)(immutable? ht_557) #f))"
" ht_556)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_556)))"
"((letrec-values(((for-loop_558)"
"(lambda(table_559 i_560)"
"(if i_560"
"(let-values(((sms_561)"
"(unsafe-immutable-hash-iterate-key"
" ht_556"
" i_560)))"
"(let-values(((table_562)"
"(let-values(((new-sms_563)"
"(shift-multi-scope"
" sms_561"
" phase_549)))"
"(begin"
" #t"
"((letrec-values(((for-loop_564)"
"(lambda(table_565)"
"(let-values()"
"(let-values(((table_566)"
"(let-values(((table_567)"
" table_565))"
"(if new-sms_563"
"(let-values(((table_568)"
" table_567))"
"(let-values(((table_569)"
"(let-values()"
"(let-values(((key_570"
" val_571)"
"(let-values()"
"(values"
"(let-values()"
" new-sms_563)"
" #t))))"
"(hash-set"
" table_568"
" key_570"
" val_571)))))"
"(values"
" table_569)))"
" table_567))))"
" table_566)))))"
" for-loop_564)"
" table_559)))))"
"(if(not #f)"
"(for-loop_558"
" table_562"
"(unsafe-immutable-hash-iterate-next"
" ht_556"
" i_560))"
" table_562)))"
" table_559))))"
" for-loop_558)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_556)))))))))"
"(begin(set! smss58_550 smss_553)(set! prev-result_551 r_554) r_554)))))))"
"(let-values(((s_572) s_548)"
"((f_573)(lambda(tail?_577 d_578) d_578))"
"((d->s_574)"
"(lambda(s_579 d_580)"
"(let-values(((the-struct_581) s_579))"
"(if(syntax?$1 the-struct_581)"
"(let-values(((content59_582) d_580)"
"((shifted-multi-scopes60_583)"
"(shift-all_552(syntax-shifted-multi-scopes s_579))))"
"(syntax1.1"
" content59_582"
"(syntax-scopes the-struct_581)"
" shifted-multi-scopes60_583"
"(syntax-scope-propagations the-struct_581)"
"(syntax-mpi-shifts the-struct_581)"
"(syntax-srcloc the-struct_581)"
"(syntax-props the-struct_581)"
"(syntax-inspector the-struct_581)"
"(syntax-tamper the-struct_581)))"
"                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_581)))))"
"((s-e_575) syntax-e/no-taint)"
"((seen_576) #f))"
"((letrec-values(((loop_584)"
"(lambda(s_585)"
"(let-values(((s_586) s_585)"
"((f_587)"
"(lambda(tail?_589 v_590)"
"(if(syntax?$1 v_590)"
"(let-values()(d->s_574 v_590(loop_584(s-e_575 v_590))))"
"(let-values()(f_573 tail?_589 v_590)))))"
"((seen_588) seen_576))"
"((letrec-values(((loop_591)"
"(lambda(tail?_592 s_593 prev-depth_594)"
"(let-values(((depth_595)(add1 prev-depth_594)))"
"(if(if seen_588(> depth_595 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_592"
" s_593"
"(lambda(tail?_596 s_597)(f_587 tail?_596 s_597))"
" seen_588))"
"(if(null? s_593)"
"(let-values()(f_587 tail?_592 s_593))"
"(if(pair? s_593)"
"(let-values()"
"(f_587"
" tail?_592"
"(cons"
"(loop_591 #f(car s_593) depth_595)"
"(loop_591 #t(cdr s_593) depth_595))))"
"(if(let-values(((or-part_598)(symbol? s_593)))"
"(if or-part_598"
" or-part_598"
"(let-values(((or-part_599)(boolean? s_593)))"
"(if or-part_599"
" or-part_599"
"(number? s_593)))))"
"(let-values()(f_587 #f s_593))"
"(if(let-values(((or-part_600)(vector? s_593)))"
"(if or-part_600"
" or-part_600"
"(let-values(((or-part_601)(box? s_593)))"
"(if or-part_601"
" or-part_601"
"(let-values(((or-part_602)"
"(prefab-struct-key"
" s_593)))"
"(if or-part_602"
" or-part_602"
"(hash? s_593)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_592"
" s_593"
"(lambda(tail?_603 s_604)"
"(f_587 tail?_603 s_604))"
" seen_588))"
"(let-values()(f_587 #f s_593)))))))))))"
" loop_591)"
" #f"
" s_586"
" 0)))))"
" loop_584)"
" s_572)))))))))"
"(define-values"
"(syntax-swap-scopes)"
"(lambda(s_605 src-scopes_606 dest-scopes_607)"
"(if(equal? src-scopes_606 dest-scopes_607)"
" s_605"
"(let-values(((src-smss_608 src-scs_609)"
"(set-partition"
"(let-values(((ht_612) src-scopes_606))"
"(begin"
"(if((lambda(ht_613)(if(hash? ht_613)(immutable? ht_613) #f)) ht_612)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_612)))"
"((letrec-values(((for-loop_614)"
"(lambda(table_615 i_616)"
"(if i_616"
"(let-values(((sc_617)(unsafe-immutable-hash-iterate-key ht_612 i_616)))"
"(let-values(((table_618)"
"(let-values(((table_619) table_615))"
"(let-values(((table_620)"
"(let-values()"
"(let-values(((key_621 val_622)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_617))"
" #t))))"
"(hash-set"
" table_619"
" key_621"
" val_622)))))"
"(values table_620)))))"
"(if(not #f)"
"(for-loop_614"
" table_618"
"(unsafe-immutable-hash-iterate-next ht_612 i_616))"
" table_618)))"
" table_615))))"
" for-loop_614)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_612))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq)))"
"((dest-smss_610 dest-scs_611)"
"(set-partition"
"(let-values(((ht_623) dest-scopes_607))"
"(begin"
"(if((lambda(ht_624)(if(hash? ht_624)(immutable? ht_624) #f)) ht_623)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_623)))"
"((letrec-values(((for-loop_625)"
"(lambda(table_626 i_627)"
"(if i_627"
"(let-values(((sc_628)(unsafe-immutable-hash-iterate-key ht_623 i_627)))"
"(let-values(((table_629)"
"(let-values(((table_630) table_626))"
"(let-values(((table_631)"
"(let-values()"
"(let-values(((key_632 val_633)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_628))"
" #t))))"
"(hash-set"
" table_630"
" key_632"
" val_633)))))"
"(values table_631)))))"
"(if(not #f)"
"(for-loop_625"
" table_629"
"(unsafe-immutable-hash-iterate-next ht_623 i_627))"
" table_629)))"
" table_626))))"
" for-loop_625)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_623))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq))))"
"(let-values(((scs61_634) #f))"
"(let-values(((prev-result_635) #f))"
"(let-values(((swap-scs_636)"
"(lambda(scs_640)"
"(if(eq? scs61_634 scs_640)"
"(let-values() prev-result_635)"
"(let-values()"
"(let-values(((r_641)"
"(let-values()"
"(if(subset? src-scs_609 scs_640)"
"(set-union(set-subtract scs_640 src-scs_609) dest-scs_611)"
" scs_640))))"
"(begin(set! scs61_634 scs_640)(set! prev-result_635 r_641) r_641)))))))"
"(let-values(((smss62_637) #f))"
"(let-values(((prev-result_638) #f))"
"(let-values(((swap-smss_639)"
"(lambda(smss_642)"
"(if(eq? smss62_637 smss_642)"
"(let-values() prev-result_638)"
"(let-values()"
"(let-values(((r_643)"
"(let-values()"
"(fallback-update-first"
" smss_642"
"(lambda(smss_644)"
"(if(subset? src-smss_608 smss_644)"
"(set-union"
"(set-subtract smss_644 src-smss_608)"
" dest-smss_610)"
" smss_644))))))"
"(begin(set! smss62_637 smss_642)(set! prev-result_638 r_643) r_643)))))))"
"(let-values(((s_645) s_605)"
"((f_646)(lambda(tail?_650 d_651) d_651))"
"((d->s_647)"
"(lambda(s_652 d_653)"
"(let-values(((the-struct_654) s_652))"
"(if(syntax?$1 the-struct_654)"
"(let-values(((content63_655) d_653)"
"((scopes64_656)(swap-scs_636(syntax-scopes s_652)))"
"((shifted-multi-scopes65_657)"
"(swap-smss_639(syntax-shifted-multi-scopes s_652))))"
"(syntax1.1"
" content63_655"
" scopes64_656"
" shifted-multi-scopes65_657"
"(syntax-scope-propagations the-struct_654)"
"(syntax-mpi-shifts the-struct_654)"
"(syntax-srcloc the-struct_654)"
"(syntax-props the-struct_654)"
"(syntax-inspector the-struct_654)"
"(syntax-tamper the-struct_654)))"
"                                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_654)))))"
"((s-e_648) syntax-e/no-taint)"
"((seen_649) #f))"
"((letrec-values(((loop_658)"
"(lambda(s_659)"
"(let-values(((s_660) s_659)"
"((f_661)"
"(lambda(tail?_663 v_664)"
"(if(syntax?$1 v_664)"
"(let-values()(d->s_647 v_664(loop_658(s-e_648 v_664))))"
"(let-values()(f_646 tail?_663 v_664)))))"
"((seen_662) seen_649))"
"((letrec-values(((loop_665)"
"(lambda(tail?_666 s_667 prev-depth_668)"
"(let-values(((depth_669)(add1 prev-depth_668)))"
"(if(if seen_662(> depth_669 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_666"
" s_667"
"(lambda(tail?_670 s_671)"
"(f_661 tail?_670 s_671))"
" seen_662))"
"(if(null? s_667)"
"(let-values()(f_661 tail?_666 s_667))"
"(if(pair? s_667)"
"(let-values()"
"(f_661"
" tail?_666"
"(cons"
"(loop_665 #f(car s_667) depth_669)"
"(loop_665 #t(cdr s_667) depth_669))))"
"(if(let-values(((or-part_672)"
"(symbol? s_667)))"
"(if or-part_672"
" or-part_672"
"(let-values(((or-part_673)"
"(boolean? s_667)))"
"(if or-part_673"
" or-part_673"
"(number? s_667)))))"
"(let-values()(f_661 #f s_667))"
"(if(let-values(((or-part_674)"
"(vector? s_667)))"
"(if or-part_674"
" or-part_674"
"(let-values(((or-part_675)"
"(box? s_667)))"
"(if or-part_675"
" or-part_675"
"(let-values(((or-part_676)"
"(prefab-struct-key"
" s_667)))"
"(if or-part_676"
" or-part_676"
"(hash? s_667)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_666"
" s_667"
"(lambda(tail?_677 s_678)"
"(f_661 tail?_677 s_678))"
" seen_662))"
"(let-values()(f_661 #f s_667)))))))))))"
" loop_665)"
" #f"
" s_660"
" 0)))))"
" loop_658)"
" s_645))))))))))))"
"(define-values"
"(syntax-scope-set)"
"(lambda(s_679 phase_680)"
"(scope-set-at-fallback s_679(fallback-first(syntax-shifted-multi-scopes s_679)) phase_680)))"
"(define-values"
"(scope-set-at-fallback)"
"(lambda(s_681 smss_682 phase_683)"
"(let-values(((ht_684) smss_682))"
"(begin"
"(if((lambda(ht_685)(if(hash? ht_685)(immutable? ht_685) #f)) ht_684)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_684)))"
"((letrec-values(((for-loop_686)"
"(lambda(scopes_687 i_688)"
"(if i_688"
"(let-values(((sms_689)(unsafe-immutable-hash-iterate-key ht_684 i_688)))"
"(let-values(((scopes_690)"
"(let-values(((scopes_691) scopes_687))"
"(if(let-values(((or-part_692)(label-phase? phase_683)))"
"(if or-part_692"
" or-part_692"
"(not"
"(shifted-to-label-phase?"
"(shifted-multi-scope-phase sms_689)))))"
"(let-values(((scopes_693) scopes_691))"
"(let-values(((scopes_694)"
"(let-values()"
"(set-add"
" scopes_693"
"(multi-scope-to-scope-at-phase"
"(shifted-multi-scope-multi-scope sms_689)"
"(let-values(((ph_695)"
"(shifted-multi-scope-phase"
" sms_689)))"
"(if(shifted-to-label-phase? ph_695)"
"(shifted-to-label-phase-from ph_695)"
"(phase- ph_695 phase_683))))))))"
"(values scopes_694)))"
" scopes_691))))"
"(if(not #f)"
"(for-loop_686 scopes_690(unsafe-immutable-hash-iterate-next ht_684 i_688))"
" scopes_690)))"
" scopes_687))))"
" for-loop_686)"
"(syntax-scopes s_681)"
"(unsafe-immutable-hash-iterate-first ht_684))))))"
"(define-values"
"(find-max-scope)"
"(lambda(scopes_696)"
"(begin"
"      (if (set-empty? scopes_696) (let-values () (error \"cannot bind in empty scope set\")) (void))"
"(let-values(((ht_697) scopes_696))"
"(begin"
"(if((lambda(ht_698)(if(hash? ht_698)(immutable? ht_698) #f)) ht_697)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_697)))"
"((letrec-values(((for-loop_699)"
"(lambda(max-sc_700 i_701)"
"(if i_701"
"(let-values(((sc_702)(unsafe-immutable-hash-iterate-key ht_697 i_701)))"
"(let-values(((max-sc_703)"
"(let-values(((max-sc_704) max-sc_700))"
"(let-values(((max-sc_705)"
"(let-values()"
"(if(scope>? sc_702 max-sc_704) sc_702 max-sc_704))))"
"(values max-sc_705)))))"
"(if(not #f)"
"(for-loop_699 max-sc_703(unsafe-immutable-hash-iterate-next ht_697 i_701))"
" max-sc_703)))"
" max-sc_700))))"
" for-loop_699)"
"(set-first scopes_696)"
"(unsafe-immutable-hash-iterate-first ht_697)))))))"
"(define-values"
"(add-binding-in-scopes!16.1)"
"(lambda(just-for-nominal?11_706 just-for-nominal?12_707 scopes13_708 sym14_709 binding15_710)"
"(let-values(((scopes_711) scopes13_708))"
"(let-values(((sym_712) sym14_709))"
"(let-values(((binding_713) binding15_710))"
"(let-values(((just-for-nominal?_714)(if just-for-nominal?12_707 just-for-nominal?11_706 #f)))"
"(let-values()"
"(let-values(((max-sc_715)(find-max-scope scopes_711)))"
"(let-values(((bt_716)"
"(binding-table-add"
"(scope-binding-table max-sc_715)"
" scopes_711"
" sym_712"
" binding_713"
" just-for-nominal?_714)))"
"(begin(set-scope-binding-table! max-sc_715 bt_716)(clear-resolve-cache! sym_712)))))))))))"
"(define-values"
"(add-bulk-binding-in-scopes!)"
"(lambda(scopes_737 bulk-binding_738)"
"(let-values(((max-sc_739)(find-max-scope scopes_737)))"
"(let-values(((bt_740)(binding-table-add-bulk(scope-binding-table max-sc_739) scopes_737 bulk-binding_738)))"
"(begin(set-scope-binding-table! max-sc_739 bt_740)(clear-resolve-cache!))))))"
"(define-values"
"(syntax-any-macro-scopes?)"
"(lambda(s_742)"
"(let-values(((ht_743)(syntax-scopes s_742)))"
"(begin"
"(if((lambda(ht_744)(if(hash? ht_744)(immutable? ht_744) #f)) ht_743)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_743)))"
"((letrec-values(((for-loop_745)"
"(lambda(result_746 i_747)"
"(if i_747"
"(let-values(((sc_748)(unsafe-immutable-hash-iterate-key ht_743 i_747)))"
"(let-values(((result_749)"
"(let-values()"
"(let-values(((result_751)"
"(let-values()"
"(let-values()(eq?(scope-kind sc_748) 'macro)))))"
"(values result_751)))))"
"(if(if(not((lambda x_752 result_749) sc_748))(not #f) #f)"
"(for-loop_745 result_749(unsafe-immutable-hash-iterate-next ht_743 i_747))"
" result_749)))"
" result_746))))"
" for-loop_745)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_743))))))"
"(define-values"
"(resolve29.1)"
"(lambda(ambiguous-value19_753"
" ambiguous-value23_754"
" exactly?20_755"
" exactly?24_756"
" extra-shifts22_757"
" extra-shifts26_758"
" get-scopes?21_759"
" get-scopes?25_760"
" s27_761"
" phase28_762)"
"(let-values(((s_763) s27_761))"
"(let-values(((phase_764) phase28_762))"
"(let-values(((ambiguous-value_765)(if ambiguous-value23_754 ambiguous-value19_753 #f)))"
"(let-values(((exactly?_766)(if exactly?24_756 exactly?20_755 #f)))"
"(let-values(((get-scopes?_767)(if get-scopes?25_760 get-scopes?21_759 #f)))"
"(let-values(((extra-shifts_768)(if extra-shifts26_758 extra-shifts22_757 null)))"
"(let-values()"
"(let-values(((sym_769)(syntax-content s_763)))"
"((letrec-values(((fallback-loop_770)"
"(lambda(smss_771)"
"(let-values(((c1_772)"
"(if(not exactly?_766)"
"(if(not get-scopes?_767)"
"(resolve-cache-get"
" sym_769"
" phase_764"
"(syntax-scopes s_763)"
"(fallback-first smss_771))"
" #f)"
" #f)))"
"(if c1_772"
"((lambda(b_773) b_773) c1_772)"
"(let-values()"
"(let-values(((scopes_774)"
"(scope-set-at-fallback"
" s_763"
"(fallback-first smss_771)"
" phase_764)))"
"(let-values(((best-scopes_775 best-binding_776)"
"(let-values(((ht_777) scopes_774))"
"(begin"
"(if((lambda(ht_778)"
"(if(hash? ht_778)(immutable? ht_778) #f))"
" ht_777)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys ht_777)))"
"((letrec-values(((for-loop_779)"
"(lambda(best-scopes_780"
" best-binding_781"
" i_782)"
"(if i_782"
"(let-values(((sc_783)"
"(unsafe-immutable-hash-iterate-key"
" ht_777"
" i_782)))"
"(let-values(((best-scopes_784"
" best-binding_785)"
"(let-values(((ht_786"
" bulk-bindings_787)"
"(let-values(((table_790)"
"(scope-binding-table"
" sc_783)))"
"(if(hash?"
" table_790)"
"(values"
"(hash-ref"
" table_790"
" sym_769"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_790)"
" sym_769"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_790)))))"
"((s_788)"
" s_763)"
"((extra-shifts_789)"
" extra-shifts_768))"
"(begin"
" #t"
"((letrec-values(((for-loop_791)"
"(lambda(best-scopes_792"
" best-binding_793"
" i_794)"
"(if(not"
"(null?"
" i_794))"
"(let-values(((b-scopes_795)"
"(if(pair?"
" i_794)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_794)))"
"(let-values()"
"(hash-iterate-key"
" ht_786"
" i_794))))"
"((binding_796)"
"(if(pair?"
" i_794)"
"(let-values()"
"(let-values(((bulk_797)"
"(bulk-binding-at-bulk"
"(car"
" i_794))))"
"(let-values(((b-info_798)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_797"
" s_788"
" extra-shifts_789)"
" sym_769"
" #f)))"
"(if b-info_798"
"((bulk-binding-create"
" bulk_797)"
" bulk_797"
" b-info_798"
" sym_769)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_786"
" i_794)))))"
"(let-values(((best-scopes_799"
" best-binding_800)"
"(let-values(((best-scopes_801)"
" best-scopes_792)"
"((best-binding_802)"
" best-binding_793))"
"(if(if b-scopes_795"
"(if binding_796"
"(subset?"
" b-scopes_795"
" scopes_774)"
" #f)"
" #f)"
"(let-values(((best-scopes_803)"
" best-scopes_801)"
"((best-binding_804)"
" best-binding_802))"
"(let-values(((best-scopes_805"
" best-binding_806)"
"(let-values()"
"(if(pair?"
" best-scopes_803)"
"(let-values()"
"(if(let-values(((lst_807)"
" best-scopes_803))"
"(begin"
"(if(list?"
" lst_807)"
"(void)"
"(let-values()"
"(in-list"
" lst_807)))"
"((letrec-values(((for-loop_808)"
"(lambda(result_809"
" lst_810)"
"(if(pair?"
" lst_810)"
"(let-values(((amb-scopes_811)"
"(unsafe-car"
" lst_810))"
"((rest_812)"
"(unsafe-cdr"
" lst_810)))"
"(let-values(((result_813)"
"(let-values()"
"(let-values(((result_815)"
"(let-values()"
"(let-values()"
"(subset?"
" amb-scopes_811"
" b-scopes_795)))))"
"(values"
" result_815)))))"
"(if(if(not"
"((lambda x_816"
"(not"
" result_813))"
" amb-scopes_811))"
"(not"
" #f)"
" #f)"
"(for-loop_808"
" result_813"
" rest_812)"
" result_813)))"
" result_809))))"
" for-loop_808)"
" #t"
" lst_807)))"
"(let-values()"
"(values"
" b-scopes_795"
" binding_796))"
"(let-values()"
"(values"
"(cons"
" b-scopes_795"
" best-scopes_803)"
" #f))))"
"(if(not"
" best-scopes_803)"
"(let-values()"
"(values"
" b-scopes_795"
" binding_796))"
"(if(subset?"
" b-scopes_795"
" best-scopes_803)"
"(let-values()"
"(values"
" best-scopes_803"
" best-binding_804))"
"(if(subset?"
" best-scopes_803"
" b-scopes_795)"
"(let-values()"
"(values"
" b-scopes_795"
" binding_796))"
"(let-values()"
"(values"
"(list"
" best-scopes_803"
" b-scopes_795)"
" #f)))))))))"
"(values"
" best-scopes_805"
" best-binding_806)))"
"(values"
" best-scopes_801"
" best-binding_802)))))"
"(if(not"
" #f)"
"(for-loop_791"
" best-scopes_799"
" best-binding_800"
"(if(pair?"
" i_794)"
"(let-values()"
"(cdr"
" i_794))"
"(let-values()"
"(let-values(((or-part_817)"
"(hash-iterate-next"
" ht_786"
" i_794)))"
"(if or-part_817"
" or-part_817"
" bulk-bindings_787)))))"
"(values"
" best-scopes_799"
" best-binding_800))))"
"(values"
" best-scopes_792"
" best-binding_793)))))"
" for-loop_791)"
" best-scopes_780"
" best-binding_781"
"(let-values(((or-part_818)"
"(hash-iterate-first"
" ht_786)))"
"(if or-part_818"
" or-part_818"
" bulk-bindings_787)))))))"
"(if(not #f)"
"(for-loop_779"
" best-scopes_784"
" best-binding_785"
"(unsafe-immutable-hash-iterate-next"
" ht_777"
" i_782))"
"(values"
" best-scopes_784"
" best-binding_785))))"
"(values"
" best-scopes_780"
" best-binding_781)))))"
" for-loop_779)"
" #f"
" #f"
"(unsafe-immutable-hash-iterate-first ht_777))))))"
"(if(pair? best-scopes_775)"
"(let-values()"
"(if(fallback? smss_771)"
"(fallback-loop_770(fallback-rest smss_771))"
" ambiguous-value_765))"
"(if best-scopes_775"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_769"
" phase_764"
"(syntax-scopes s_763)"
"(fallback-first smss_771)"
" best-binding_776)"
"(if(let-values(((or-part_819)(not exactly?_766)))"
"(if or-part_819"
" or-part_819"
"(eqv?"
"(set-count scopes_774)"
"(set-count best-scopes_775))))"
"(if get-scopes?_767 best-scopes_775 best-binding_776)"
" #f)))"
"(let-values()"
"(if(fallback? smss_771)"
"(fallback-loop_770(fallback-rest smss_771))"
" #f))))))))))))"
" fallback-loop_770)"
"(syntax-shifted-multi-scopes s_763))))))))))))"
"(define-values"
"(bound-identifier=?$1)"
"(lambda(a_855 b_856 phase_857)"
"(if(eq?(syntax-e$1 a_855)(syntax-e$1 b_856))"
"(equal?(syntax-scope-set a_855 phase_857)(syntax-scope-set b_856 phase_857))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(syntax-property$1)"
"(case-lambda"
"((s_1 key_2)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_1)))"
"(values))))"
"(let-values(((v_3)(hash-ref(syntax-props s_1) key_2 #f)))(plain-property-value v_3))))"
"((s_4 key_5 val_6)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_4)))"
"(values))))"
"(let-values(((pval_7)(if(eq? key_5 'paren-shape)(preserved-property-value1.1 val_6) val_6)))"
"(let-values(((the-struct_8) s_4))"
"(if(syntax?$1 the-struct_8)"
"(let-values(((props1_9)(hash-set(syntax-props s_4) key_5 pval_7)))"
"(syntax1.1"
"(syntax-content the-struct_8)"
"(syntax-scopes the-struct_8)"
"(syntax-shifted-multi-scopes the-struct_8)"
"(syntax-scope-propagations the-struct_8)"
"(syntax-mpi-shifts the-struct_8)"
"(syntax-srcloc the-struct_8)"
" props1_9"
"(syntax-inspector the-struct_8)"
"(syntax-tamper the-struct_8)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_8))))))"
"((s_10 key_11 val_12 preserved?_13)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_10)))"
"(values))))"
"(let-values((()"
"(begin"
"(if preserved?_13"
"(let-values()"
"(if(if(symbol? key_11)(symbol-interned? key_11) #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-property"
"                               \"key for a perserved property must be an interned symbol\""
"                               \"given key\""
" key_11"
"                               \"given value\""
" val_12))))"
"(void))"
"(values))))"
"(let-values(((pval_14)(if preserved?_13(preserved-property-value1.1 val_12) val_12)))"
"(let-values(((the-struct_15) s_10))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((props2_16)(hash-set(syntax-props s_10) key_11 pval_14)))"
"(syntax1.1"
"(syntax-content the-struct_15)"
"(syntax-scopes the-struct_15)"
"(syntax-shifted-multi-scopes the-struct_15)"
"(syntax-scope-propagations the-struct_15)"
"(syntax-mpi-shifts the-struct_15)"
"(syntax-srcloc the-struct_15)"
" props2_16"
"(syntax-inspector the-struct_15)"
"(syntax-tamper the-struct_15)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_15)))))))))"
"(define-values"
"(1/syntax-property-preserved?)"
"(lambda(s_17 key_18)"
"(begin"
"      (if (syntax?$1 s_17) (void) (let-values () (raise-argument-error 'syntax-property-preserved \"syntax?\" s_17)))"
"(if(if(symbol? key_18)(symbol-interned? key_18) #f)"
"(void)"
"        (let-values () (raise-argument-error 'syntax-property \"(and/c symbol? symbol-interned?)\" key_18)))"
"(preserved-property-value?(hash-ref(syntax-props s_17) key_18 #f)))))"
"(define-values"
"(1/syntax-property-symbol-keys)"
"(lambda(s_19)"
"(begin"
"      (if (syntax?$1 s_19) (void) (let-values () (raise-argument-error 'syntax-property-symbol-keys \"syntax\" s_19)))"
"(let-values(((ht_20)(syntax-props s_19)))"
"(begin"
"(if((lambda(ht_21)(if(hash? ht_21)(immutable? ht_21) #f)) ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(i_23)"
"(if i_23"
"(let-values(((k_24 v_25)(unsafe-immutable-hash-iterate-key+value ht_20 i_23)))"
"(let-values(((post-guard-var_26)(lambda() #t)))"
"(let-values()"
"(if(if(symbol? k_24)(symbol-interned? k_24) #f)"
"(let-values()"
"(let-values(((elem_27)(let-values()(let-values() k_24))))"
"(let-values(((result_28)"
"(if(post-guard-var_26)"
"(for-loop_22"
"(unsafe-immutable-hash-iterate-next ht_20 i_23))"
" null)))"
"(cons elem_27 result_28))))"
"(if(post-guard-var_26)"
"(for-loop_22(unsafe-immutable-hash-iterate-next ht_20 i_23))"
" null)))))"
" null))))"
" for-loop_22)"
"(unsafe-immutable-hash-iterate-first ht_20)))))))"
"(define-values"
"(syntax-property-remove)"
"(lambda(s_29 key_30)"
"(if(hash-ref(syntax-props s_29) key_30 #f)"
"(let-values(((the-struct_31) s_29))"
"(if(syntax?$1 the-struct_31)"
"(let-values(((props3_32)(hash-remove(syntax-props s_29) key_30)))"
"(syntax1.1"
"(syntax-content the-struct_31)"
"(syntax-scopes the-struct_31)"
"(syntax-shifted-multi-scopes the-struct_31)"
"(syntax-scope-propagations the-struct_31)"
"(syntax-mpi-shifts the-struct_31)"
"(syntax-srcloc the-struct_31)"
" props3_32"
"(syntax-inspector the-struct_31)"
"(syntax-tamper the-struct_31)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_31)))"
" s_29)))"
"(void)"
"(void)"
"(define-values"
"(struct:full-binding full-binding1.1 full-binding? full-binding-frame-id full-binding-free=id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-binding"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:binding-reach-scopes(lambda(b_27)(binding-free=id b_27))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'full-binding)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'frame-id)"
"(make-struct-field-accessor -ref_4 1 'free=id))))"
"(define-values(binding-frame-id)(lambda(b_28)(if(full-binding? b_28)(full-binding-frame-id b_28) #f)))"
"(define-values(binding-free=id)(lambda(b_29)(if(full-binding? b_29)(full-binding-free=id b_29) #f)))"
"(void)"
"(void)"
"(define-values"
"(make-module-binding22.1)"
"(lambda(extra-inspector8_1"
" extra-inspector17_2"
" extra-nominal-bindings9_3"
" extra-nominal-bindings18_4"
" frame-id6_5"
" frame-id15_6"
" free=id7_7"
" free=id16_8"
" nominal-module2_9"
" nominal-module11_10"
" nominal-phase3_11"
" nominal-phase12_12"
" nominal-require-phase5_13"
" nominal-require-phase14_14"
" nominal-sym4_15"
" nominal-sym13_16"
" wrt1_17"
" wrt10_18"
" module19_19"
" phase20_20"
" sym21_21)"
"(let-values(((module_22) module19_19))"
"(let-values(((phase_23) phase20_20))"
"(let-values(((sym_24) sym21_21))"
"(let-values(((wrt-sym_25)(if wrt10_18 wrt1_17 sym_24)))"
"(let-values(((nominal-module_26)(if nominal-module11_10 nominal-module2_9 module_22)))"
"(let-values(((nominal-phase_27)(if nominal-phase12_12 nominal-phase3_11 phase_23)))"
"(let-values(((nominal-sym_28)(if nominal-sym13_16 nominal-sym4_15 sym_24)))"
"(let-values(((nominal-require-phase_29)(if nominal-require-phase14_14 nominal-require-phase5_13 0)))"
"(let-values(((frame-id_30)(if frame-id15_6 frame-id6_5 #f)))"
"(let-values(((free=id_31)(if free=id16_8 free=id7_7 #f)))"
"(let-values(((extra-inspector_32)(if extra-inspector17_2 extra-inspector8_1 #f)))"
"(let-values(((extra-nominal-bindings_33)"
"(if extra-nominal-bindings18_4 extra-nominal-bindings9_3 null)))"
"(let-values()"
"(if(let-values(((or-part_34) frame-id_30))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35) free=id_31))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36) extra-inspector_32))"
"(if or-part_36"
" or-part_36"
"(not"
"(if(eqv? nominal-phase_27 phase_23)"
"(if(eq? nominal-sym_28 sym_24)"
"(if(eqv? nominal-require-phase_29 0)"
"(null? extra-nominal-bindings_33)"
" #f)"
" #f)"
" #f))))))))"
"(let-values()"
"(full-module-binding51.1"
" frame-id_30"
" free=id_31"
" module_22"
" phase_23"
" sym_24"
" nominal-module_26"
" nominal-phase_27"
" nominal-sym_28"
" nominal-require-phase_29"
" extra-inspector_32"
" extra-nominal-bindings_33))"
"(let-values()"
"(simple-module-binding52.1"
" module_22"
" phase_23"
" sym_24"
" nominal-module_26))))))))))))))))))"
"(define-values"
"(module-binding-update48.1)"
"(lambda(extra-inspector34_105"
" extra-inspector45_106"
" extra-nominal-bindings35_107"
" extra-nominal-bindings46_108"
" frame-id32_109"
" frame-id43_110"
" free=id33_111"
" free=id44_112"
" module25_113"
" module36_114"
" nominal-module28_115"
" nominal-module39_116"
" nominal-phase29_117"
" nominal-phase40_118"
" nominal-require-phase31_119"
" nominal-require-phase42_120"
" nominal-sym30_121"
" nominal-sym41_122"
" phase26_123"
" phase37_124"
" sym27_125"
" sym38_126"
" b47_127)"
"(let-values(((b_128) b47_127))"
"(let-values(((module_129)(if module36_114 module25_113(module-binding-module b_128))))"
"(let-values(((phase_130)(if phase37_124 phase26_123(module-binding-phase b_128))))"
"(let-values(((sym_131)(if sym38_126 sym27_125(module-binding-sym b_128))))"
"(let-values(((nominal-module_132)"
"(if nominal-module39_116 nominal-module28_115(module-binding-nominal-module b_128))))"
"(let-values(((nominal-phase_133)"
"(if nominal-phase40_118 nominal-phase29_117(module-binding-nominal-phase b_128))))"
"(let-values(((nominal-sym_134)"
"(if nominal-sym41_122 nominal-sym30_121(module-binding-nominal-sym b_128))))"
"(let-values(((nominal-require-phase_135)"
"(if nominal-require-phase42_120"
" nominal-require-phase31_119"
"(module-binding-nominal-require-phase b_128))))"
"(let-values(((frame-id_136)(if frame-id43_110 frame-id32_109(binding-frame-id b_128))))"
"(let-values(((free=id_137)(if free=id44_112 free=id33_111(binding-free=id b_128))))"
"(let-values(((extra-inspector_138)"
"(if extra-inspector45_106"
" extra-inspector34_105"
"(module-binding-extra-inspector b_128))))"
"(let-values(((extra-nominal-bindings_139)"
"(if extra-nominal-bindings46_108"
" extra-nominal-bindings35_107"
"(module-binding-extra-nominal-bindings b_128))))"
"(let-values()"
"(let-values(((module53_141) module_129)"
"((phase54_142) phase_130)"
"((sym55_143) sym_131)"
"((nominal-module56_144) nominal-module_132)"
"((nominal-phase57_145) nominal-phase_133)"
"((nominal-sym58_146) nominal-sym_134)"
"((nominal-require-phase59_147) nominal-require-phase_135)"
"((frame-id60_148) frame-id_136)"
"((free=id61_149) free=id_137)"
"((extra-inspector62_150) extra-inspector_138)"
"((extra-nominal-bindings63_151) extra-nominal-bindings_139))"
"(make-module-binding22.1"
" extra-inspector62_150"
" #t"
" extra-nominal-bindings63_151"
" #t"
" frame-id60_148"
" #t"
" free=id61_149"
" #t"
" nominal-module56_144"
" #t"
" nominal-phase57_145"
" #t"
" nominal-require-phase59_147"
" #t"
" nominal-sym58_146"
" #t"
" #f"
" #f"
" module53_141"
" phase54_142"
" sym55_143)))))))))))))))))"
"(define-values"
"(module-binding?)"
"(lambda(b_226)"
"(let-values(((or-part_227)(simple-module-binding? b_226)))"
"(if or-part_227 or-part_227(full-module-binding? b_226)))))"
"(define-values"
"(struct:full-module-binding"
" full-module-binding51.1"
" full-module-binding?"
" full-module-binding-module"
" full-module-binding-phase"
" full-module-binding-sym"
" full-module-binding-nominal-module"
" full-module-binding-nominal-phase"
" full-module-binding-nominal-sym"
" full-module-binding-nominal-require-phase"
" full-module-binding-extra-inspector"
" full-module-binding-extra-nominal-bindings)"
"(let-values(((struct:_228 make-_229 ?_230 -ref_231 -set!_232)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-module-binding"
" struct:full-binding"
" 9"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_295 ser-push!_296 state_297)"
"(let-values(((simplified-b_298)"
"(if(full-binding-frame-id b_295)"
"(let-values(((b65_300) b_295)((temp66_301) #f))"
"(module-binding-update48.1"
" #f"
" #f"
" #f"
" #f"
" temp66_301"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b65_300))"
" b_295)))"
"(if(full-module-binding? simplified-b_298)"
"(let-values()"
"(begin"
"(ser-push!_296 'tag '#:module-binding)"
"(ser-push!_296(full-module-binding-module b_295))"
"(ser-push!_296(full-module-binding-sym b_295))"
"(ser-push!_296(full-module-binding-phase b_295))"
"(ser-push!_296(full-module-binding-nominal-module b_295))"
"(ser-push!_296(full-module-binding-nominal-phase b_295))"
"(ser-push!_296(full-module-binding-nominal-sym b_295))"
"(ser-push!_296(full-module-binding-nominal-require-phase b_295))"
"(ser-push!_296(full-binding-free=id b_295))"
"(if(full-module-binding-extra-inspector b_295)"
"(ser-push!_296 'tag '#:inspector)"
"(ser-push!_296 #f))"
"(ser-push!_296(full-module-binding-extra-nominal-bindings b_295))))"
"(let-values()(ser-push!_296 simplified-b_298)))))))"
" #f"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'full-module-binding)))))"
"(values"
" struct:_228"
" make-_229"
" ?_230"
"(make-struct-field-accessor -ref_231 0 'module)"
"(make-struct-field-accessor -ref_231 1 'phase)"
"(make-struct-field-accessor -ref_231 2 'sym)"
"(make-struct-field-accessor -ref_231 3 'nominal-module)"
"(make-struct-field-accessor -ref_231 4 'nominal-phase)"
"(make-struct-field-accessor -ref_231 5 'nominal-sym)"
"(make-struct-field-accessor -ref_231 6 'nominal-require-phase)"
"(make-struct-field-accessor -ref_231 7 'extra-inspector)"
"(make-struct-field-accessor -ref_231 8 'extra-nominal-bindings))))"
"(define-values"
"(struct:simple-module-binding"
" simple-module-binding52.1"
" simple-module-binding?"
" simple-module-binding-module"
" simple-module-binding-phase"
" simple-module-binding-sym"
" simple-module-binding-nominal-module)"
"(let-values(((struct:_302 make-_303 ?_304 -ref_305 -set!_306)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'simple-module-binding"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_340 ser-push!_341 state_342)"
"(begin"
"(ser-push!_341 'tag '#:simple-module-binding)"
"(ser-push!_341(simple-module-binding-module b_340))"
"(ser-push!_341(simple-module-binding-sym b_340))"
"(ser-push!_341(simple-module-binding-phase b_340))"
"(ser-push!_341(simple-module-binding-nominal-module b_340))))))"
" #f"
" #f"
" '(0 1 2 3)"
" #f"
" 'simple-module-binding)))))"
"(values"
" struct:_302"
" make-_303"
" ?_304"
"(make-struct-field-accessor -ref_305 0 'module)"
"(make-struct-field-accessor -ref_305 1 'phase)"
"(make-struct-field-accessor -ref_305 2 'sym)"
"(make-struct-field-accessor -ref_305 3 'nominal-module))))"
"(define-values"
"(deserialize-full-module-binding)"
"(lambda(module_343"
" sym_344"
" phase_345"
" nominal-module_346"
" nominal-phase_347"
" nominal-sym_348"
" nominal-require-phase_349"
" free=id_350"
" extra-inspector_351"
" extra-nominal-bindings_352)"
"(let-values(((module68_354) module_343)"
"((phase69_355) phase_345)"
"((sym70_356) sym_344)"
"((nominal-module71_357) nominal-module_346)"
"((nominal-phase72_358) nominal-phase_347)"
"((nominal-sym73_359) nominal-sym_348)"
"((nominal-require-phase74_360) nominal-require-phase_349)"
"((free=id75_361) free=id_350)"
"((extra-inspector76_362) extra-inspector_351)"
"((extra-nominal-bindings77_363) extra-nominal-bindings_352))"
"(make-module-binding22.1"
" extra-inspector76_362"
" #t"
" extra-nominal-bindings77_363"
" #t"
" #f"
" #f"
" free=id75_361"
" #t"
" nominal-module71_357"
" #t"
" nominal-phase72_358"
" #t"
" nominal-require-phase74_360"
" #t"
" nominal-sym73_359"
" #t"
" #f"
" #f"
" module68_354"
" phase69_355"
" sym70_356))))"
"(define-values"
"(deserialize-simple-module-binding)"
"(lambda(module_364 sym_365 phase_366 nominal-module_367)"
"(simple-module-binding52.1 module_364 phase_366 sym_365 nominal-module_367)))"
"(define-values"
"(module-binding-module)"
"(lambda(b_368)"
"(if(simple-module-binding? b_368)(simple-module-binding-module b_368)(full-module-binding-module b_368))))"
"(define-values"
"(module-binding-phase)"
"(lambda(b_369)"
"(if(simple-module-binding? b_369)(simple-module-binding-phase b_369)(full-module-binding-phase b_369))))"
"(define-values"
"(module-binding-sym)"
"(lambda(b_370)"
"(if(simple-module-binding? b_370)(simple-module-binding-sym b_370)(full-module-binding-sym b_370))))"
"(define-values"
"(module-binding-nominal-module)"
"(lambda(b_371)"
"(if(simple-module-binding? b_371)"
"(simple-module-binding-nominal-module b_371)"
"(full-module-binding-nominal-module b_371))))"
"(define-values"
"(module-binding-nominal-phase)"
"(lambda(b_372)"
"(if(simple-module-binding? b_372)(simple-module-binding-phase b_372)(full-module-binding-nominal-phase b_372))))"
"(define-values"
"(module-binding-nominal-sym)"
"(lambda(b_373)"
"(if(simple-module-binding? b_373)(simple-module-binding-sym b_373)(full-module-binding-nominal-sym b_373))))"
"(define-values"
"(module-binding-nominal-require-phase)"
"(lambda(b_374)(if(simple-module-binding? b_374) 0(full-module-binding-nominal-require-phase b_374))))"
"(define-values"
"(module-binding-extra-inspector)"
"(lambda(b_375)(if(simple-module-binding? b_375) #f(full-module-binding-extra-inspector b_375))))"
"(define-values"
"(module-binding-extra-nominal-bindings)"
"(lambda(b_376)(if(simple-module-binding? b_376) null(full-module-binding-extra-nominal-bindings b_376))))"
"(void)"
"(void)"
"(define-values"
"(local-binding?)"
"(lambda(b_1)(let-values(((or-part_2)(full-local-binding? b_1)))(if or-part_2 or-part_2(symbol? b_1)))))"
"(define-values"
"(struct:full-local-binding full-local-binding1.1 full-local-binding? full-local-binding-key)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-local-binding"
" struct:full-binding"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_26 ser-push!_27 state_28)"
"(begin"
"(ser-push!_27 'tag '#:local-binding)"
"(ser-push!_27(full-local-binding-key b_26))"
"(ser-push!_27(full-binding-free=id b_26))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'full-local-binding)))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'key))))"
"(define-values"
"(deserialize-full-local-binding)"
"(lambda(key_29 free=id_30)(full-local-binding1.1 #f free=id_30 key_29)))"
"(define-values"
"(make-local-binding7.1)"
"(lambda(frame-id2_31 frame-id4_32 free=id3_33 free=id5_34 key6_35)"
"(let-values(((key_36) key6_35))"
"(let-values(((frame-id_37)(if frame-id4_32 frame-id2_31 #f)))"
"(let-values(((free=id_38)(if free=id5_34 free=id3_33 #f)))"
"(let-values()"
"(if(if(not frame-id_37)(not free=id_38) #f)"
"(let-values() key_36)"
"(let-values()(full-local-binding1.1 frame-id_37 free=id_38 key_36)))))))))"
"(define-values"
"(local-binding-update17.1)"
"(lambda(frame-id11_59 frame-id14_60 free=id12_61 free=id15_62 key10_63 key13_64 b16_65)"
"(let-values(((b_66) b16_65))"
"(let-values(((key_67)(if key13_64 key10_63(local-binding-key b_66))))"
"(let-values(((frame-id_68)(if frame-id14_60 frame-id11_59(binding-frame-id b_66))))"
"(let-values(((free=id_69)(if free=id15_62 free=id12_61(binding-free=id b_66))))"
"(let-values()"
"(let-values(((key21_71) key_67)((frame-id22_72) frame-id_68)((free=id23_73) free=id_69))"
"(make-local-binding7.1 frame-id22_72 #t free=id23_73 #t key21_71)))))))))"
"(define-values"
"(local-binding-key)"
"(lambda(b_100)(if(full-local-binding? b_100)(full-local-binding-key b_100) b_100)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:rename-transformer 1/rename-transformer? rename-transformer-value)"
"(make-struct-type-property"
" 'rename-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)(exact-nonnegative-integer? v_1)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(identifier? v_1)))"
"(if or-part_5 or-part_5(if(procedure? v_1)(procedure-arity-includes? v_1 1) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:rename-transformer"
"(string-append"
"                           \"(or/c exact-nonnegative-integer?\\n\""
"                           \"      identifier?\\n\""
"                           \"      (procedure-arity-includes? proc 1))\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(identifier? v_1)"
"(let-values()(lambda(t_6) v_1))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_7)"
"(let-values(((val_8)(ref_3 t_7 v_1)))(if(identifier? val_8) val_8(datum->syntax$1 #f '?)))))"
"(let-values()"
"(lambda(t_9)"
"(let-values(((id_10)(v_1 t_9)))"
"(begin"
"(if(identifier? id_10)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'prop:rename-transformer"
"                            \"contract violation for given value; expected an identifier\""
"                            \"given\""
" id_10)))"
" id_10))))))))))))"
"(define-values"
"(1/make-rename-transformer)"
"(let-values()"
"(let-values(((struct:rename-transformer_11 rename-transformer1_12 rename-transformer?_13 rename-transformer-id_14)"
"(let-values(((struct:_16 make-_17 ?_18 -ref_19 -set!_20)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'rename-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:rename-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'rename-transformer)))))"
"(values struct:_16 make-_17 ?_18(make-struct-field-accessor -ref_19 0 'id)))))"
"(lambda(id_36)"
"(begin"
"(if(identifier? id_36)"
"(void)"
"            (let-values () (raise-argument-error 'make-rename-transformer \"identifier?\" id_36)))"
"(rename-transformer1_12 id_36))))))"
"(define-values(1/rename-transformer-target)(lambda(t_37)((rename-transformer-value t_37) t_37)))"
"(void)"
"(void)"
"(define-values"
"(free-identifier=?$1)"
"(lambda(a_1 b_2 a-phase_3 b-phase_4)"
"(let-values(((ab_5)"
"(let-values(((a47_8) a_1)((a-phase48_9) a-phase_3)((temp49_10) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp49_10 #t a47_8 a-phase48_9))))"
"(let-values(((bb_6)"
"(let-values(((b50_12) b_2)((b-phase51_13) b-phase_4)((temp52_14) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp52_14 #t b50_12 b-phase51_13))))"
"(if(let-values(((or-part_15)(symbol? ab_5)))(if or-part_15 or-part_15(symbol? bb_6)))"
"(let-values()(eq? ab_5 bb_6))"
"(let-values()(same-binding? ab_5 bb_6)))))))"
"(define-values"
"(same-binding?)"
"(lambda(ab_16 bb_17)"
"(if(module-binding? ab_16)"
"(let-values()"
"(if(module-binding? bb_17)"
"(if(eq?(module-binding-sym ab_16)(module-binding-sym bb_17))"
"(if(eqv?(module-binding-phase ab_16)(module-binding-phase bb_17))"
"(eq?"
"(1/module-path-index-resolve(module-binding-module ab_16))"
"(1/module-path-index-resolve(module-binding-module bb_17)))"
" #f)"
" #f)"
" #f))"
"(if(local-binding? ab_16)"
"(let-values()(if(local-binding? bb_17)(eq?(local-binding-key ab_16)(local-binding-key bb_17)) #f))"
"        (let-values () (error \"bad binding\" ab_16))))))"
"(define-values"
"(same-binding-nominals?)"
"(lambda(ab_18 bb_19)"
"(if(eq?"
"(1/module-path-index-resolve(module-binding-nominal-module ab_18))"
"(1/module-path-index-resolve(module-binding-nominal-module bb_19)))"
"(if(eqv?(module-binding-nominal-require-phase ab_18)(module-binding-nominal-require-phase bb_19))"
"(eqv?(module-binding-nominal-sym ab_18)(module-binding-nominal-sym bb_19))"
" #f)"
" #f)))"
"(define-values"
"(identifier-binding-symbol$1)"
"(lambda(id_20 phase_21)"
"(let-values(((b_22)"
"(let-values(((id53_24) id_20)((phase54_25) phase_21)((temp55_26) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp55_26 #t id53_24 phase54_25))))"
"(if(symbol? b_22)"
"(let-values() b_22)"
"(if(module-binding? b_22)"
"(let-values()(module-binding-sym b_22))"
"(if(local-binding? b_22)(let-values()(local-binding-key b_22))(let-values()(syntax-e$1 id_20))))))))"
"(define-values"
"(identifier-binding$1)"
"(let-values(((identifier-binding5_27)"
"(lambda(id3_28 phase4_29 top-level-symbol?1_30 top-level-symbol?2_31)"
"(let-values(((id_32) id3_28))"
"(let-values(((phase_33) phase4_29))"
"(let-values(((top-level-symbol?_34)(if top-level-symbol?2_31 top-level-symbol?1_30 #f)))"
"(let-values()"
"(let-values(((b_35)"
"(let-values(((id56_36) id_32)((phase57_37) phase_33))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f #f #f id56_36 phase57_37))))"
"(if(module-binding? b_35)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_35))"
"(if top-level-symbol?_34(list(module-binding-nominal-sym b_35)) #f)"
"(list"
"(module-binding-module b_35)"
"(module-binding-sym b_35)"
"(module-binding-nominal-module b_35)"
"(module-binding-nominal-sym b_35)"
"(module-binding-phase b_35)"
"(module-binding-nominal-require-phase b_35)"
"(module-binding-nominal-phase b_35))))"
"(if(local-binding? b_35)(let-values() 'lexical)(let-values() #f)))))))))))"
"(case-lambda"
"((id_38 phase_39)(identifier-binding5_27 id_38 phase_39 #f #f))"
"((id_40 phase_41 top-level-symbol?1_42)(identifier-binding5_27 id_40 phase_41 top-level-symbol?1_42 #t)))))"
"(define-values"
"(maybe-install-free=id!)"
"(lambda(val_43 id_44 phase_45)"
"(if(1/rename-transformer? val_43)"
"(let-values()"
"(let-values(((free=id_46)(1/rename-transformer-target val_43)))"
"(if(syntax-property$1 free=id_46 'not-free-identifier=?)"
"(void)"
"(let-values()"
"(let-values(((b_47)"
"(let-values(((id61_49) id_44)((phase62_50) phase_45)((temp63_51) #t)((temp64_52) #t))"
"(resolve+shift30.1 #f #f temp63_51 #t #f #f temp64_52 #t #f #f id61_49 phase62_50))))"
"(let-values(((temp58_53)(syntax-scope-set id_44 phase_45))"
"((temp59_54)(syntax-e$1 id_44))"
"((temp60_55)(binding-set-free=id b_47 free=id_46)))"
"(add-binding-in-scopes!16.1 #f #f temp58_53 temp59_54 temp60_55)))))))"
"(void))))"
"(define-values"
"(binding-set-free=id)"
"(lambda(b_56 free=id_57)"
"(if(module-binding? b_56)"
"(let-values()"
"(let-values(((b65_59) b_56)((free=id66_60) free=id_57))"
"(module-binding-update48.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" free=id66_60"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b65_59)))"
"(if(local-binding? b_56)"
"(let-values()"
"(let-values(((b67_62) b_56)((free=id68_63) free=id_57))"
"(local-binding-update17.1 #f #f free=id68_63 #t #f #f b67_62)))"
"        (let-values () (error \"bad binding for free=id:\" b_56))))))"
"(define-values"
"(struct:non-source-shift non-source-shift7.1 non-source-shift? non-source-shift-from non-source-shift-to)"
"(let-values(((struct:_64 make-_65 ?_66 -ref_67 -set!_68)"
"(let-values()"
"(let-values()"
"(make-struct-type 'non-source-shift #f 2 0 #f null 'prefab #f '(0 1) #f 'non-source-shift)))))"
"(values"
" struct:_64"
" make-_65"
" ?_66"
"(make-struct-field-accessor -ref_67 0 'from)"
"(make-struct-field-accessor -ref_67 1 'to))))"
"(define-values(shift-from)(lambda(s_89)(if(pair? s_89)(car s_89)(non-source-shift-from s_89))))"
"(define-values(shift-to)(lambda(s_90)(if(pair? s_90)(cdr s_90)(non-source-shift-to s_90))))"
"(define-values"
"(syntax-module-path-index-shift15.1)"
"(lambda(non-source?8_91 non-source?9_92 s12_93 from-mpi13_94 to-mpi14_95 inspector10_96 inspector11_97)"
"(let-values(((s_98) s12_93))"
"(let-values(((from-mpi_99) from-mpi13_94))"
"(let-values(((to-mpi_100) to-mpi14_95))"
"(let-values(((inspector_101)(if inspector11_97 inspector10_96 #f)))"
"(let-values(((non-source?_102)(if non-source?9_92 non-source?8_91 #f)))"
"(let-values()"
"(if(eq? from-mpi_99 to-mpi_100)"
"(let-values()(if inspector_101(syntax-set-inspector s_98 inspector_101) s_98))"
"(let-values()"
"(let-values(((shift_103)"
"(if non-source?_102"
"(non-source-shift7.1 from-mpi_99 to-mpi_100)"
"(cons from-mpi_99 to-mpi_100))))"
"(let-values(((the-struct_104) s_98))"
"(if(syntax?$1 the-struct_104)"
"(let-values(((mpi-shifts70_105)(cons shift_103(syntax-mpi-shifts s_98)))"
"((inspector71_106)"
"(let-values(((or-part_108)(syntax-inspector s_98)))"
"(if or-part_108 or-part_108 inspector_101)))"
"((scope-propagations72_107)"
"(if(datum-has-elements?(syntax-content s_98))"
"(propagation-mpi-shift"
"(syntax-scope-propagations s_98)"
"(lambda(s_109)(cons shift_103 s_109))"
" inspector_101"
"(syntax-scopes s_98)"
"(syntax-shifted-multi-scopes s_98)"
"(syntax-mpi-shifts s_98))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_104)"
"(syntax-scopes the-struct_104)"
"(syntax-shifted-multi-scopes the-struct_104)"
" scope-propagations72_107"
" mpi-shifts70_105"
"(syntax-srcloc the-struct_104)"
"(syntax-props the-struct_104)"
" inspector71_106"
"(syntax-tamper the-struct_104)))"
"                          (raise-argument-error 'struct-copy \"syntax?\" the-struct_104))))))))))))))"
"(define-values"
"(unpack16.1$5)"
"(lambda(given-kws_110 given-args_111 s12_112 from-mpi13_113 to-mpi14_114 inspector10_115 inspector11_116)"
"(let-values(((non-source?9_117)(pair? given-kws_110)))"
"(let-values(((non-source?8_118)(if non-source?9_117(car given-args_111)(void))))"
"(syntax-module-path-index-shift15.1"
" non-source?8_118"
" non-source?9_117"
" s12_112"
" from-mpi13_113"
" to-mpi14_114"
" inspector10_115"
" inspector11_116)))))"
"(define-values"
"(syntax-module-path-index-shift17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_119 given-argc_120)"
"(if(if(>= given-argc_120 5)(<= given-argc_120 6) #f)"
"(let-values(((l1_121) given-kws_119))"
"(let-values(((l1_122)(if(null? l1_121) l1_121(if(eq?(car l1_121) '#:non-source?)(cdr l1_121) l1_121))))"
"(null? l1_122)))"
" #f))"
"(case-lambda"
"((given-kws_123 given-args_124 s_125 from-mpi_126 to-mpi_127)"
"(unpack16.1$5 given-kws_123 given-args_124 s_125 from-mpi_126 to-mpi_127 #f #f))"
"((given-kws_128 given-args_129 s_130 from-mpi_131 to-mpi_132 inspector10_133)"
"(unpack16.1$5 given-kws_128 given-args_129 s_130 from-mpi_131 to-mpi_132 inspector10_133 #t)))"
" null"
" '(#:non-source?)"
"(let-values(((syntax-module-path-index-shift_134)"
"(case-lambda"
"((s_135 from-mpi_136 to-mpi_137)(unpack16.1$5 null null s_135 from-mpi_136 to-mpi_137 #f #f))"
"((s_138 from-mpi_139 to-mpi_140 inspector10_141)"
"(unpack16.1$5 null null s_138 from-mpi_139 to-mpi_140 inspector10_141 #t)))))"
" syntax-module-path-index-shift_134)))"
"(define-values"
"(resolve+shift30.1)"
"(lambda(ambiguous-value18_142"
" ambiguous-value23_143"
" exactly?19_144"
" exactly?24_145"
" extra-shifts22_146"
" extra-shifts27_147"
" immediate?20_148"
" immediate?25_149"
" unbound-sym?21_150"
" unbound-sym?26_151"
" s28_152"
" phase29_153)"
"(let-values(((s_154) s28_152))"
"(let-values(((phase_155) phase29_153))"
"(let-values(((ambiguous-value_156)(if ambiguous-value23_143 ambiguous-value18_142 #f)))"
"(let-values(((exactly?_157)(if exactly?24_145 exactly?19_144 #f)))"
"(let-values(((immediate?_158)(if immediate?25_149 immediate?20_148 exactly?_157)))"
"(let-values(((unbound-sym?_159)(if unbound-sym?26_151 unbound-sym?21_150 #f)))"
"(let-values(((extra-shifts_160)(if extra-shifts27_147 extra-shifts22_146 null)))"
"(let-values()"
"(let-values(((immediate-b_161)"
"(let-values(((s73_164) s_154)"
"((phase74_165) phase_155)"
"((ambiguous-value75_166) ambiguous-value_156)"
"((exactly?76_167) exactly?_157)"
"((extra-shifts77_168) extra-shifts_160))"
"(resolve29.1"
" ambiguous-value75_166"
" #t"
" exactly?76_167"
" #t"
" extra-shifts77_168"
" #t"
" #f"
" #f"
" s73_164"
" phase74_165))))"
"(let-values(((b_162)"
"(if(if immediate-b_161"
"(if(not immediate?_158)(binding-free=id immediate-b_161) #f)"
" #f)"
"(let-values(((temp78_170)(binding-free=id immediate-b_161))"
"((phase79_171) phase_155)"
"((temp80_172)(append extra-shifts_160(syntax-mpi-shifts s_154)))"
"((ambiguous-value81_173) ambiguous-value_156)"
"((exactly?82_174) exactly?_157)"
"((unbound-sym?83_175) unbound-sym?_159))"
"(resolve+shift30.1"
" ambiguous-value81_173"
" #t"
" exactly?82_174"
" #t"
" temp80_172"
" #t"
" #f"
" #f"
" unbound-sym?83_175"
" #t"
" temp78_170"
" phase79_171))"
" immediate-b_161)))"
"(if(module-binding? b_162)"
"(let-values()"
"(let-values(((mpi-shifts_176)(syntax-mpi-shifts s_154)))"
"(if(null? mpi-shifts_176)"
"(let-values() b_162)"
"(let-values()"
"(let-values(((mod_177)(module-binding-module b_162)))"
"(let-values(((shifted-mod_178)(apply-syntax-shifts mod_177 mpi-shifts_176)))"
"(let-values(((nominal-mod_179)(module-binding-nominal-module b_162)))"
"(let-values(((shifted-nominal-mod_180)"
"(if(eq? mod_177 nominal-mod_179)"
" shifted-mod_178"
"(apply-syntax-shifts nominal-mod_179 mpi-shifts_176))))"
"(if(if(eq? mod_177 shifted-mod_178)"
"(if(eq? nominal-mod_179 shifted-nominal-mod_180)"
"(if(not(binding-free=id b_162))"
"(null?(module-binding-extra-nominal-bindings b_162))"
" #f)"
" #f)"
" #f)"
" b_162"
"(let-values(((b84_182) b_162)"
"((shifted-mod85_183) shifted-mod_178)"
"((shifted-nominal-mod86_184) shifted-nominal-mod_180)"
"((temp87_185)"
"(if(binding-free=id b_162)"
"(let-values(((temp89_187)(binding-free=id b_162))"
"((s90_188) s_154))"
"(syntax-transfer-shifts39.1"
" #f"
" #f"
" temp89_187"
" s90_188"
" #f"
" #f))"
" #f))"
"((temp88_186)"
"(let-values(((lst_189)"
"(module-binding-extra-nominal-bindings b_162)))"
"(begin"
"(if(list? lst_189)"
"(void)"
"(let-values()(in-list lst_189)))"
"((letrec-values(((for-loop_190)"
"(lambda(lst_191)"
"(if(pair? lst_191)"
"(let-values(((b_192)"
"(unsafe-car lst_191))"
"((rest_193)"
"(unsafe-cdr lst_191)))"
"(let-values(((post-guard-var_194)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_195)"
"(let-values()"
"(let-values()"
"(apply-syntax-shifts-to-binding"
" b_192"
" mpi-shifts_176)))))"
"(let-values(((result_196)"
"(if(post-guard-var_194)"
"(for-loop_190"
" rest_193)"
" null)))"
"(cons"
" elem_195"
" result_196))))))"
" null))))"
" for-loop_190)"
" lst_189)))))"
"(module-binding-update48.1"
" #f"
" #f"
" temp88_186"
" #t"
" #f"
" #f"
" temp87_185"
" #t"
" shifted-mod85_183"
" #t"
" shifted-nominal-mod86_184"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b84_182)))))))))))"
"(if(if(not b_162) unbound-sym?_159 #f)"
"(let-values()(syntax-e$1 s_154))"
"(let-values() b_162)))))))))))))))"
"(define-values"
"(apply-syntax-shifts)"
"(lambda(mpi_238 shifts_239)"
"(if(null? shifts_239)"
"(let-values() mpi_238)"
"(let-values()"
"(let-values(((shifted-mpi_240)(apply-syntax-shifts mpi_238(cdr shifts_239))))"
"(let-values(((shift_241)(car shifts_239)))"
"(module-path-index-shift shifted-mpi_240(shift-from shift_241)(shift-to shift_241))))))))"
"(define-values"
"(apply-syntax-shifts-to-binding)"
"(lambda(b_242 shifts_243)"
"(if(null? shifts_243)"
"(let-values() b_242)"
"(let-values()"
"(let-values(((shifted-b_244)(apply-syntax-shifts-to-binding b_242(cdr shifts_243))))"
"(let-values(((shift_245)(car shifts_243)))"
"(binding-module-path-index-shift shifted-b_244(shift-from shift_245)(shift-to shift_245))))))))"
"(define-values"
"(binding-module-path-index-shift)"
"(lambda(b_248 from-mpi_249 to-mpi_250)"
"(if(module-binding? b_248)"
"(let-values()"
"(let-values(((b91_252) b_248)"
"((temp92_253)(module-path-index-shift(module-binding-module b_248) from-mpi_249 to-mpi_250))"
"((temp93_254)"
"(module-path-index-shift(module-binding-nominal-module b_248) from-mpi_249 to-mpi_250))"
"((temp94_255)"
"(let-values(((lst_256)(module-binding-extra-nominal-bindings b_248)))"
"(begin"
"(if(list? lst_256)(void)(let-values()(in-list lst_256)))"
"((letrec-values(((for-loop_257)"
"(lambda(lst_258)"
"(if(pair? lst_258)"
"(let-values(((b_259)(unsafe-car lst_258))"
"((rest_260)(unsafe-cdr lst_258)))"
"(let-values(((post-guard-var_261)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_262)"
"(let-values()"
"(let-values()"
"(binding-module-path-index-shift"
" b_259"
" from-mpi_249"
" to-mpi_250)))))"
"(let-values(((result_263)"
"(if(post-guard-var_261)"
"(for-loop_257 rest_260)"
" null)))"
"(cons elem_262 result_263))))))"
" null))))"
" for-loop_257)"
" lst_256)))))"
"(module-binding-update48.1"
" #f"
" #f"
" temp94_255"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp92_253"
" #t"
" temp93_254"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b91_252)))"
"(let-values() b_248))))"
"(define-values"
"(syntax-transfer-shifts39.1)"
"(lambda(non-source?33_264 non-source?34_265 to-s37_266 from-s38_267 inspector35_268 inspector36_269)"
"(let-values(((to-s_270) to-s37_266))"
"(let-values(((from-s_271) from-s38_267))"
"(let-values(((inspector_272)(if inspector36_269 inspector35_268 #f)))"
"(let-values(((non-source?_273)(if non-source?34_265 non-source?33_264 #f)))"
"(let-values()"
"(let-values(((shifts_274)(syntax-mpi-shifts from-s_271)))"
"(if(if(null? shifts_274) inspector_272 #f)"
"(let-values()(syntax-set-inspector to-s_270 inspector_272))"
"(let-values()"
"(let-values(((lst_275)(alt-reverse shifts_274))((start_276) 0))"
"(begin"
"(if(list? lst_275)(void)(let-values()(in-list lst_275)))"
"(if(exact-nonnegative-integer? start_276)(void)(let-values()(in-naturals start_276)))"
"((letrec-values(((for-loop_277)"
"(lambda(s_278 lst_279 pos_280)"
"(if(if(pair? lst_279) #t #f)"
"(let-values(((shift_281)(unsafe-car lst_279))"
"((rest_282)(unsafe-cdr lst_279))"
"((i_283) pos_280))"
"(let-values(((s_284)"
"(let-values(((s_285) s_278))"
"(let-values(((s_286)"
"(let-values()"
"(let-values(((s95_288) s_285)"
"((temp96_289)"
"(shift-from shift_281))"
"((temp97_290)"
"(shift-to shift_281))"
"((temp98_291)"
"(if(zero? i_283)"
" inspector_272"
" #f))"
"((non-source?99_292)"
" non-source?_273))"
"(syntax-module-path-index-shift15.1"
" non-source?99_292"
" #t"
" s95_288"
" temp96_289"
" temp97_290"
" temp98_291"
" #t)))))"
"(values s_286)))))"
"(if(not #f)(for-loop_277 s_284 rest_282(+ pos_280 1)) s_284)))"
" s_278))))"
" for-loop_277)"
" to-s_270"
" lst_275"
" start_276)))))))))))))"
"(define-values"
"(syntax-set-inspector)"
"(lambda(s_320 insp_321)"
"(let-values(((the-struct_322) s_320))"
"(if(syntax?$1 the-struct_322)"
"(let-values(((inspector100_323)"
"(let-values(((or-part_325)(syntax-inspector s_320)))(if or-part_325 or-part_325 insp_321)))"
"((scope-propagations101_324)"
"(if(datum-has-elements?(syntax-content s_320))"
"(propagation-mpi-shift"
"(syntax-scope-propagations s_320)"
" #f"
" insp_321"
"(syntax-scopes s_320)"
"(syntax-shifted-multi-scopes s_320)"
"(syntax-mpi-shifts s_320))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_322)"
"(syntax-scopes the-struct_322)"
"(syntax-shifted-multi-scopes the-struct_322)"
" scope-propagations101_324"
"(syntax-mpi-shifts the-struct_322)"
"(syntax-srcloc the-struct_322)"
"(syntax-props the-struct_322)"
" inspector100_323"
"(syntax-tamper the-struct_322)))"
"        (raise-argument-error 'struct-copy \"syntax?\" the-struct_322)))))"
"(define-values"
"(1/syntax-source-module)"
"(let-values(((syntax-source-module45_326)"
"(lambda(s44_327 source?42_328 source?43_329)"
"(let-values(((s_330) s44_327))"
"(let-values(((source?_331)(if source?43_329 source?42_328 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_330)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" s_330)))"
"(let-values(((lst_332)(alt-reverse(syntax-mpi-shifts s_330))))"
"(begin"
"(if(list? lst_332)(void)(let-values()(in-list lst_332)))"
"((letrec-values(((for-loop_333)"
"(lambda(result_334 lst_335)"
"(if(pair? lst_335)"
"(let-values(((shift_336)(unsafe-car lst_335))"
"((rest_337)(unsafe-cdr lst_335)))"
"(let-values(((result_338)"
"(let-values(((result_339) result_334))"
"(if(non-source-shift? shift_336)"
" result_339"
"(let-values()"
"(let-values(((result_341)"
"(let-values()"
"(let-values()"
"(let-values(((from-mpi_342)"
"(car"
" shift_336)))"
"(let-values(((path_343"
" base_344)"
"(1/module-path-index-split"
" from-mpi_342)))"
"(if(not path_343)"
"(if(module-path-index-resolved"
" from-mpi_342)"
"(apply-syntax-shifts"
" from-mpi_342"
"(syntax-mpi-shifts"
" s_330))"
" #f)"
" #f)))))))"
"(values result_341)))))))"
"(if(if(not((lambda x_345 result_338) shift_336))(not #f) #f)"
"(for-loop_333 result_338 rest_337)"
" result_338)))"
" result_334))))"
" for-loop_333)"
" #f"
" lst_332))))))))))"
"(case-lambda"
"((s_346)(syntax-source-module45_326 s_346 #f #f))"
"((s_347 source?42_348)(syntax-source-module45_326 s_347 source?42_348 #t)))))"
"(define-values"
"(1/identifier-prune-to-source-module)"
"(lambda(id_349)"
"(begin"
"(if(identifier? id_349)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-prune-to-source-module \"identifier?\" id_349)))"
"(let-values(((the-struct_350)(datum->syntax$1 #f(syntax-e$1 id_349) id_349 id_349)))"
"(if(syntax?$1 the-struct_350)"
"(let-values(((mpi-shifts102_351)(syntax-mpi-shifts id_349)))"
"(syntax1.1"
"(syntax-content the-struct_350)"
"(syntax-scopes the-struct_350)"
"(syntax-shifted-multi-scopes the-struct_350)"
"(syntax-scope-propagations the-struct_350)"
" mpi-shifts102_351"
"(syntax-srcloc the-struct_350)"
"(syntax-props the-struct_350)"
"(syntax-inspector the-struct_350)"
"(syntax-tamper the-struct_350)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_350))))))"
"(void)"
"(void)"
"(define-values(built-in-symbols)(make-hasheq))"
"(define-values(register-built-in-symbol!)(lambda(s_1)(hash-set! built-in-symbols s_1 #t)))"
"(define-values(built-in-symbol?)(lambda(s_2)(hash-ref built-in-symbols s_2 #f)))"
"(define-values"
"(make-built-in-symbol!)"
"(lambda(s_3)"
"    (let-values (((built-in-s_4) (string->symbol (format \".~s\" s_3))))"
"(begin(register-built-in-symbol! built-in-s_4) built-in-s_4))))"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(lambda case-lambda"
" if"
" begin"
" begin0"
" let-values"
" letrec-values"
" set!"
" quote"
" with-continuation-mark"
" #%variable-reference)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(check-not-undefined"
" instance-variable-box"
" variable-reference"
" variable-reference?"
" variable-reference->instance"
" variable-reference-constant?)))"
" print-values)"
"(void)"
"(void)"
"(define-values(phase-shift-id)(make-built-in-symbol! 'phase))"
"(define-values(dest-phase-id)(make-built-in-symbol! 'dest-phase))"
"(define-values(ns-id)(make-built-in-symbol! 'namespace))"
"(define-values(self-id)(make-built-in-symbol! 'self))"
"(define-values(syntax-literals-id)(make-built-in-symbol! 'syntax-literals))"
"(define-values(get-syntax-literal!-id)(make-built-in-symbol! 'get-syntax-literal!))"
"(define-values(bulk-binding-registry-id)(make-built-in-symbol! 'bulk-binding-registry))"
"(define-values(inspector-id)(make-built-in-symbol! 'inspector))"
"(define-values(deserialize-syntax-id)(make-built-in-symbol! 'deserialize-syntax))"
"(define-values(deserialized-syntax-vector-id)(make-built-in-symbol! 'deserialized-syntax-vector))"
"(define-values(set-transformer!-id)(make-built-in-symbol! 'set-transformer!))"
"(define-values(top-level-bind!-id)(make-built-in-symbol! 'top-level-bind!))"
"(define-values(top-level-require!-id)(make-built-in-symbol! 'top-level-require!))"
"(void)"
"(void)"
"(define-values"
"(struct:provided provided1.1 provided? provided-binding provided-protected? provided-syntax?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'provided"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(p_34 ser-push!_35 state_36)"
"(begin"
"(ser-push!_35 'tag '#:provided)"
"(ser-push!_35(provided-binding p_34))"
"(ser-push!_35(provided-protected? p_34))"
"(ser-push!_35(provided-syntax? p_34))))))"
" #f"
" #f"
" '(0 1 2)"
" #f"
" 'provided)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'binding)"
"(make-struct-field-accessor -ref_4 1 'protected?)"
"(make-struct-field-accessor -ref_4 2 'syntax?))))"
"(define-values(provided-as-binding)(lambda(v_37)(if(provided? v_37)(provided-binding v_37) v_37)))"
"(define-values(provided-as-protected?)(lambda(v_38)(if(provided? v_38)(provided-protected? v_38) #f)))"
"(define-values(provided-as-transformer?)(lambda(v_39)(if(provided? v_39)(provided-syntax? v_39) #f)))"
"(define-values"
"(deserialize-provided)"
"(lambda(binding_40 protected?_41 syntax?_42)(provided1.1 binding_40 protected?_41 syntax?_42)))"
"(void)"
"(void)"
"(define-values"
"(provide-binding-to-require-binding11.1)"
"(lambda(mpi2_12 phase-shift4_13 provide-phase-level3_14 self1_15 binding/p9_16 sym10_17)"
"(let-values(((binding/p_18) binding/p9_16))"
"(let-values(((sym_19) sym10_17))"
"(let-values(((self_20) self1_15))"
"(let-values(((mpi_21) mpi2_12))"
"(let-values(((provide-phase-level_22) provide-phase-level3_14))"
"(let-values(((phase-shift_23) phase-shift4_13))"
"(let-values()"
"(let-values(((binding_24)(provided-as-binding binding/p_18)))"
"(let-values(((from-mod_25)(module-binding-module binding_24)))"
"(let-values(((binding17_27) binding_24)"
"((temp18_28)(module-path-index-shift from-mod_25 self_20 mpi_21))"
"((mpi19_29) mpi_21)"
"((provide-phase-level20_30) provide-phase-level_22)"
"((sym21_31) sym_19)"
"((phase-shift22_32) phase-shift_23)"
"((temp23_33) #f)"
"((temp24_34)"
"(if(not(provided-as-protected? binding/p_18))"
"(module-binding-extra-inspector binding_24)"
" #f))"
"((null25_35) null))"
"(module-binding-update48.1"
" temp24_34"
" #t"
" null25_35"
" #t"
" temp23_33"
" #t"
" #f"
" #f"
" temp18_28"
" #t"
" mpi19_29"
" #t"
" provide-phase-level20_30"
" #t"
" phase-shift22_32"
" #t"
" sym21_31"
" #t"
" #f"
" #f"
" #f"
" #f"
" binding17_27)))))))))))))"
"(define-values"
"(struct:bulk-binding"
" bulk-binding14.1"
" bulk-binding?"
" bulk-binding-provides"
" bulk-binding-prefix"
" bulk-binding-excepts"
" bulk-binding-self"
" bulk-binding-mpi"
" bulk-binding-provide-phase-level"
" bulk-binding-phase-shift"
" bulk-binding-bulk-binding-registry"
" set-bulk-binding-provides!"
" set-bulk-binding-self!)"
"(let-values(((struct:_60 make-_61 ?_62 -ref_63 -set!_64)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding"
" #f"
" 8"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_152 ser-push!_153 reachable-scopes_154)"
"(begin"
"(ser-push!_153 'tag '#:bulk-binding)"
"(ser-push!_153(bulk-binding-prefix b_152))"
"(ser-push!_153(bulk-binding-excepts b_152))"
"(ser-push!_153(bulk-binding-mpi b_152))"
"(ser-push!_153(bulk-binding-provide-phase-level b_152))"
"(ser-push!_153(bulk-binding-phase-shift b_152))"
"(ser-push!_153 'tag '#:bulk-binding-registry))))"
"(cons"
" prop:bulk-binding"
"(bulk-binding-class3.1"
"(lambda(b_155 mpi-shifts_156)"
"(let-values(((or-part_157)(bulk-binding-provides b_155)))"
"(if or-part_157"
" or-part_157"
"(let-values(((mod-name_158)"
"(1/module-path-index-resolve"
"(apply-syntax-shifts(bulk-binding-mpi b_155) mpi-shifts_156))))"
"(let-values((()"
"(begin"
"(if(bulk-binding-bulk-binding-registry b_155)"
"(void)"
"(let-values()"
"(error"
"                                                     \"namespace mismatch: no bulk-binding registry available:\""
" mod-name_158)))"
"(values))))"
"(let-values(((table_159)"
"(bulk-binding-registry-table"
"(bulk-binding-bulk-binding-registry b_155))))"
"(let-values(((bulk-provide_160)(hash-ref table_159 mod-name_158 #f)))"
"(let-values((()"
"(begin"
"(if bulk-provide_160"
"(void)"
"(let-values()"
"(error"
"                                                           \"namespace mismatch: bulk bindings not found in registry for module:\""
" mod-name_158)))"
"(values))))"
"(let-values((()"
"(begin"
"(set-bulk-binding-self!"
" b_155"
"(bulk-provide-self bulk-provide_160))"
"(values))))"
"(let-values(((provides_161)"
"(hash-ref"
"(bulk-provide-provides bulk-provide_160)"
"(bulk-binding-provide-phase-level b_155))))"
"(let-values(((excepts_162)(bulk-binding-excepts b_155)))"
"(let-values(((prefix_163)(bulk-binding-prefix b_155)))"
"(let-values(((adjusted-provides_164)"
"(if(let-values(((or-part_165) prefix_163))"
"(if or-part_165"
" or-part_165"
"(positive?(hash-count excepts_162))))"
"(let-values()"
"(let-values(((ht_166) provides_161))"
"(begin"
"(if((lambda(ht_167)(hash? ht_167)) ht_166)"
"(void)"
"(let-values()(default-in-hash ht_166)))"
"((letrec-values(((for-loop_168)"
"(lambda(table_169 i_170)"
"(if i_170"
"(let-values(((sym_171"
" val_172)"
"(hash-iterate-key+value"
" ht_166"
" i_170)))"
"(let-values(((table_173)"
"(let-values(((table_174)"
" table_169))"
"(if(hash-ref"
" excepts_162"
" sym_171"
" #f)"
" table_174"
"(let-values(((table_175)"
" table_174))"
"(let-values(((table_176)"
"(let-values()"
"(let-values(((key_177"
" val_178)"
"(let-values()"
"(values"
"(if prefix_163"
"(string->symbol"
"(format"
"                                                                                                                                                       \"~a~a\""
" prefix_163"
" sym_171))"
" sym_171)"
" val_172))))"
"(hash-set"
" table_175"
" key_177"
" val_178)))))"
"(values"
" table_176)))))))"
"(if(not #f)"
"(for-loop_168"
" table_173"
"(hash-iterate-next"
" ht_166"
" i_170))"
" table_173)))"
" table_169))))"
" for-loop_168)"
" '#hash()"
"(hash-iterate-first ht_166)))))"
"(let-values() provides_161))))"
"(begin"
"(set-bulk-binding-provides! b_155 adjusted-provides_164)"
" adjusted-provides_164))))))))))))))"
"(lambda(b_179 binding_180 sym_181)"
"(let-values(((binding27_183) binding_180)"
"((temp28_184)"
"(if(bulk-binding-prefix b_179)"
"(string->symbol"
"(substring"
"(symbol->string sym_181)"
"(string-length(symbol->string(bulk-binding-prefix b_179)))))"
" sym_181))"
"((temp29_185)(bulk-binding-self b_179))"
"((temp30_186)(bulk-binding-mpi b_179))"
"((temp31_187)(bulk-binding-provide-phase-level b_179))"
"((temp32_188)(bulk-binding-phase-shift b_179)))"
"(provide-binding-to-require-binding11.1"
" temp30_186"
" temp32_188"
" temp31_187"
" temp29_185"
" binding27_183"
" temp28_184))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'bulk-binding)))))"
"(values"
" struct:_60"
" make-_61"
" ?_62"
"(make-struct-field-accessor -ref_63 0 'provides)"
"(make-struct-field-accessor -ref_63 1 'prefix)"
"(make-struct-field-accessor -ref_63 2 'excepts)"
"(make-struct-field-accessor -ref_63 3 'self)"
"(make-struct-field-accessor -ref_63 4 'mpi)"
"(make-struct-field-accessor -ref_63 5 'provide-phase-level)"
"(make-struct-field-accessor -ref_63 6 'phase-shift)"
"(make-struct-field-accessor -ref_63 7 'bulk-binding-registry)"
"(make-struct-field-mutator -set!_64 0 'provides)"
"(make-struct-field-mutator -set!_64 3 'self))))"
"(define-values"
"(deserialize-bulk-binding)"
"(lambda(prefix_189 excepts_190 mpi_191 provide-phase-level_192 phase-shift_193 bulk-binding-registry_194)"
"(bulk-binding14.1"
" #f"
" prefix_189"
" excepts_190"
" #f"
" mpi_191"
" provide-phase-level_192"
" phase-shift_193"
" bulk-binding-registry_194)))"
"(define-values"
"(struct:bulk-provide bulk-provide15.1 bulk-provide? bulk-provide-self bulk-provide-provides)"
"(let-values(((struct:_195 make-_196 ?_197 -ref_198 -set!_199)"
"(let-values()"
"(let-values()"
"(make-struct-type 'bulk-provide #f 2 0 #f null(current-inspector) #f '(0 1) #f 'bulk-provide)))))"
"(values"
" struct:_195"
" make-_196"
" ?_197"
"(make-struct-field-accessor -ref_198 0 'self)"
"(make-struct-field-accessor -ref_198 1 'provides))))"
"(define-values"
"(struct:bulk-binding-registry bulk-binding-registry16.1 bulk-binding-registry? bulk-binding-registry-table)"
"(let-values(((struct:_220 make-_221 ?_222 -ref_223 -set!_224)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-registry"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'bulk-binding-registry)))))"
"(values struct:_220 make-_221 ?_222(make-struct-field-accessor -ref_223 0 'table))))"
"(define-values(make-bulk-binding-registry)(lambda()(bulk-binding-registry16.1(make-hasheq))))"
"(define-values"
"(register-bulk-provide!)"
"(lambda(bulk-binding-registry_240 mod-name_241 self_242 provides_243)"
"(hash-set!"
"(bulk-binding-registry-table bulk-binding-registry_240)"
" mod-name_241"
"(bulk-provide15.1 self_242 provides_243))))"
"(void)"
"(void)"
"(define-values(generate-lift-key)(lambda()(gensym 'lift)))"
"(void)"
"(void)"
"(define-values"
"(struct:root-expand-context/outer"
" root-expand-context/outer1.1"
" root-expand-context/outer?"
" root-expand-context/outer-inner"
" root-expand-context/outer-post-expansion-scope"
" root-expand-context/outer-use-site-scopes"
" root-expand-context/outer-frame-id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context/outer"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'root-expand-context/outer)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'inner)"
"(make-struct-field-accessor -ref_4 1 'post-expansion-scope)"
"(make-struct-field-accessor -ref_4 2 'use-site-scopes)"
"(make-struct-field-accessor -ref_4 3 'frame-id))))"
"(define-values"
"(struct:root-expand-context/inner"
" root-expand-context/inner2.1"
" root-expand-context/inner?"
" root-expand-context/inner-module-scopes"
" root-expand-context/inner-top-level-bind-scope"
" root-expand-context/inner-all-scopes-stx"
" root-expand-context/inner-defined-syms"
" root-expand-context/inner-counter"
" root-expand-context/inner-lift-key)"
"(let-values(((struct:_36 make-_37 ?_38 -ref_39 -set!_40)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context/inner"
" #f"
" 6"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'root-expand-context/inner)))))"
"(values"
" struct:_36"
" make-_37"
" ?_38"
"(make-struct-field-accessor -ref_39 0 'module-scopes)"
"(make-struct-field-accessor -ref_39 1 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_39 2 'all-scopes-stx)"
"(make-struct-field-accessor -ref_39 3 'defined-syms)"
"(make-struct-field-accessor -ref_39 4 'counter)"
"(make-struct-field-accessor -ref_39 5 'lift-key))))"
"(define-values"
"(root-expand-context/make)"
"(lambda(module-scopes_82"
" post-expansion-scope_83"
" top-level-bind-scope_84"
" all-scopes-stx_85"
" use-site-scopes_86"
" defined-syms_87"
" frame-id_88"
" counter_89"
" lift-key_90)"
"(root-expand-context/outer1.1"
"(root-expand-context/inner2.1"
" module-scopes_82"
" top-level-bind-scope_84"
" all-scopes-stx_85"
" defined-syms_87"
" counter_89"
" lift-key_90)"
" post-expansion-scope_83"
" use-site-scopes_86"
" frame-id_88)))"
"(define-values"
"(root-expand-context-post-expansion-scope)"
"(lambda(v_91)(root-expand-context/outer-post-expansion-scope v_91)))"
"(define-values(root-expand-context-use-site-scopes)(lambda(v_92)(root-expand-context/outer-use-site-scopes v_92)))"
"(define-values(root-expand-context-frame-id)(lambda(v_93)(root-expand-context/outer-frame-id v_93)))"
"(define-values"
"(root-expand-context-module-scopes)"
"(lambda(v_94)(root-expand-context/inner-module-scopes(root-expand-context/outer-inner v_94))))"
"(define-values"
"(root-expand-context-top-level-bind-scope)"
"(lambda(v_95)(root-expand-context/inner-top-level-bind-scope(root-expand-context/outer-inner v_95))))"
"(define-values"
"(root-expand-context-all-scopes-stx)"
"(lambda(v_96)(root-expand-context/inner-all-scopes-stx(root-expand-context/outer-inner v_96))))"
"(define-values"
"(root-expand-context-defined-syms)"
"(lambda(v_97)(root-expand-context/inner-defined-syms(root-expand-context/outer-inner v_97))))"
"(define-values"
"(root-expand-context-counter)"
"(lambda(v_98)(root-expand-context/inner-counter(root-expand-context/outer-inner v_98))))"
"(define-values"
"(root-expand-context-lift-key)"
"(lambda(v_99)(root-expand-context/inner-lift-key(root-expand-context/outer-inner v_99))))"
"(define-values"
"(make-root-expand-context11.1)"
"(lambda(all-scopes-stx6_100"
" all-scopes-stx10_101"
" initial-scopes3_102"
" initial-scopes7_103"
" outside-scope4_104"
" outside-scope8_105"
" post-expansion-scope5_106"
" post-expansion-scope9_107)"
"(let-values(((initial-scopes_108)(if initial-scopes7_103 initial-scopes3_102 null)))"
"(let-values(((outside-scope_109)(if outside-scope8_105 outside-scope4_104 top-level-common-scope)))"
"(let-values(((post-expansion-scope_110)"
"(if post-expansion-scope9_107 post-expansion-scope5_106(new-multi-scope 'top-level))))"
"(let-values(((all-scopes-stx_111)(if all-scopes-stx10_101 all-scopes-stx6_100 #f)))"
"(let-values()"
"(let-values(((module-scopes_112)(list* post-expansion-scope_110 outside-scope_109 initial-scopes_108)))"
"(root-expand-context/make"
" module-scopes_112"
" post-expansion-scope_110"
"(new-scope 'module)"
"(let-values(((or-part_113) all-scopes-stx_111))"
"(if or-part_113 or-part_113(add-scopes empty-syntax module-scopes_112)))"
"(box null)"
"(make-hasheqv)"
"                 (string->uninterned-symbol \"root-frame\")"
"(box 0)"
"(generate-lift-key))))))))))"
"(define-values"
"(root-expand-context-encode-for-module)"
"(lambda(ctx_143 orig-self_144 new-self_145)"
"(datum->syntax$1"
" #f"
"(vector"
"(add-scopes empty-syntax(root-expand-context-module-scopes ctx_143))"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope ctx_143))"
"(let-values(((temp16_146)(root-expand-context-all-scopes-stx ctx_143))"
"((orig-self17_147) orig-self_144)"
"((new-self18_148) new-self_145))"
"(syntax-module-path-index-shift15.1 #f #f temp16_146 orig-self17_147 new-self18_148 #f #f))"
"(add-scopes empty-syntax(unbox(root-expand-context-use-site-scopes ctx_143)))"
"(let-values(((ht_149)(root-expand-context-defined-syms ctx_143)))"
"(begin"
"(if((lambda(ht_150)(hash? ht_150)) ht_149)(void)(let-values()(default-in-hash ht_149)))"
"((letrec-values(((for-loop_151)"
"(lambda(table_152 i_153)"
"(if i_153"
"(let-values(((phase_154 ht_155)(hash-iterate-key+value ht_149 i_153)))"
"(let-values(((table_156)"
"(let-values(((table_157) table_152))"
"(let-values(((table_158)"
"(let-values()"
"(let-values(((key_159 val_160)"
"(let-values()"
"(values phase_154 ht_155))))"
"(hash-set table_157 key_159 val_160)))))"
"(values table_158)))))"
"(if(not #f)(for-loop_151 table_156(hash-iterate-next ht_149 i_153)) table_156)))"
" table_152))))"
" for-loop_151)"
" '#hasheqv()"
"(hash-iterate-first ht_149))))"
"(root-expand-context-frame-id ctx_143)"
"(unbox(root-expand-context-counter ctx_143))))))"
"(define-values"
"(root-expand-context-decode-for-module)"
"(lambda(vec-s_161)"
"(let-values(((vec_162)(if(syntax?$1 vec-s_161)(syntax-e$1 vec-s_161) #f)))"
"(begin"
"(if(if(vector? vec_162)"
"(if(=(vector-length vec_162) 7)"
"(if(syntax?$1(vector-ref vec_162 0))"
"(if(syntax-with-one-scope?(vector-ref vec_162 1))"
"(if(syntax?$1(vector-ref vec_162 2))"
"(if(syntax?$1(vector-ref vec_162 3))"
"(if(defined-syms-hash?(syntax-e$1(vector-ref vec_162 4)))"
"(if(symbol?(syntax-e$1(vector-ref vec_162 5)))"
"(exact-nonnegative-integer?(syntax-e$1(vector-ref vec_162 6)))"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"          (let-values () (error 'root-expand-context-decode-for-module \"bad encoding: ~s\" vec-s_161)))"
"(root-expand-context/make"
"(extract-scope-list(vector-ref vec_162 0))"
"(extract-scope(vector-ref vec_162 1))"
"(new-scope 'module)"
"(vector-ref vec_162 2)"
"(box(extract-scope-list(vector-ref vec_162 3)))"
"(unpack-defined-syms(vector-ref vec_162 4))"
"(syntax-e$1(vector-ref vec_162 5))"
"(box(syntax-e$1(vector-ref vec_162 6)))"
"(generate-lift-key))))))"
"(define-values"
"(defined-syms-hash?)"
"(lambda(v_163)"
"(let-values(((ht_164) v_163))"
"(begin"
"(if((lambda(ht_165)(hash? ht_165)) ht_164)(void)(let-values()(default-in-hash ht_164)))"
"((letrec-values(((for-loop_166)"
"(lambda(result_167 i_168)"
"(if i_168"
"(let-values(((phase_169 ht-s_170)(hash-iterate-key+value ht_164 i_168)))"
"(let-values(((result_171)"
"(let-values()"
"(let-values(((result_173)"
"(let-values()"
"(let-values()"
"(if(phase? phase_169)"
"(if(hash?(syntax-e$1 ht-s_170))"
"(let-values(((ht_174)(syntax-e$1 ht-s_170)))"
"(begin"
"(if((lambda(ht_175)(hash? ht_175)) ht_174)"
"(void)"
"(let-values()(default-in-hash ht_174)))"
"((letrec-values(((for-loop_176)"
"(lambda(result_177 i_178)"
"(if i_178"
"(let-values(((sym_179"
" id_180)"
"(hash-iterate-key+value"
" ht_174"
" i_178)))"
"(let-values(((result_181)"
"(let-values()"
"(let-values(((result_183)"
"(let-values()"
"(let-values()"
"(if(symbol?"
" sym_179)"
"(identifier?"
" id_180)"
" #f)))))"
"(values"
" result_183)))))"
"(if(if(not"
"((lambda x_184"
"(not"
" result_181))"
" sym_179"
" id_180))"
"(not #f)"
" #f)"
"(for-loop_176"
" result_181"
"(hash-iterate-next"
" ht_174"
" i_178))"
" result_181)))"
" result_177))))"
" for-loop_176)"
" #t"
"(hash-iterate-first ht_174))))"
" #f)"
" #f)))))"
"(values result_173)))))"
"(if(if(not((lambda x_185(not result_171)) phase_169 ht-s_170))(not #f) #f)"
"(for-loop_166 result_171(hash-iterate-next ht_164 i_168))"
" result_171)))"
" result_167))))"
" for-loop_166)"
" #t"
"(hash-iterate-first ht_164))))))"
"(define-values"
"(extract-scope-list)"
"(lambda(stx_186)(map2 generalize-scope(set->list(syntax-scope-set stx_186 0)))))"
"(define-values"
"(syntax-with-one-scope?)"
"(lambda(stx_187)(if(syntax?$1 stx_187)(= 1(set-count(syntax-scope-set stx_187 0))) #f)))"
"(define-values"
"(extract-scope)"
"(lambda(stx_188)(let-values(((s_189)(syntax-scope-set stx_188 0)))(generalize-scope(set-first s_189)))))"
"(define-values"
"(unpack-defined-syms)"
"(lambda(v_190)"
"(hash-copy"
"(let-values(((ht_191)(syntax-e$1 v_190)))"
"(begin"
"(if((lambda(ht_192)(hash? ht_192)) ht_191)(void)(let-values()(default-in-hash ht_191)))"
"((letrec-values(((for-loop_193)"
"(lambda(table_194 i_195)"
"(if i_195"
"(let-values(((phase_196 ht-s_197)(hash-iterate-key+value ht_191 i_195)))"
"(let-values(((table_198)"
"(let-values(((table_199) table_194))"
"(let-values(((table_200)"
"(let-values()"
"(let-values(((key_201 val_202)"
"(let-values()"
"(values"
" phase_196"
"(hash-copy"
"(let-values(((ht_203)"
"(syntax-e$1 ht-s_197)))"
"(begin"
"(if((lambda(ht_204)"
"(hash? ht_204))"
" ht_203)"
"(void)"
"(let-values()"
"(default-in-hash ht_203)))"
"((letrec-values(((for-loop_205)"
"(lambda(table_206"
" i_207)"
"(if i_207"
"(let-values(((sym_208"
" id_209)"
"(hash-iterate-key+value"
" ht_203"
" i_207)))"
"(let-values(((table_210)"
"(let-values(((table_211)"
" table_206))"
"(let-values(((table_212)"
"(let-values()"
"(let-values(((key_213"
" val_214)"
"(let-values()"
"(values"
" sym_208"
" id_209))))"
"(hash-set"
" table_211"
" key_213"
" val_214)))))"
"(values"
" table_212)))))"
"(if(not"
" #f)"
"(for-loop_205"
" table_210"
"(hash-iterate-next"
" ht_203"
" i_207))"
" table_210)))"
" table_206))))"
" for-loop_205)"
" '#hash()"
"(hash-iterate-first"
" ht_203)))))))))"
"(hash-set table_199 key_201 val_202)))))"
"(values table_200)))))"
"(if(not #f)(for-loop_193 table_198(hash-iterate-next ht_191 i_195)) table_198)))"
" table_194))))"
" for-loop_193)"
" '#hasheqv()"
"(hash-iterate-first ht_191)))))))"
"(void)"
"(void)"
"(define-values"
"(linklet-primitive-table)"
"(let-values(((or-part_14)(primitive-table '#%bootstrap-linklet)))"
"(if or-part_14 or-part_14(primitive-table '#%linklet))))"
"(define-values(1/primitive-table)(hash-ref linklet-primitive-table 'primitive-table #f))"
"(define-values(1/primitive->compiled-position)(hash-ref linklet-primitive-table 'primitive->compiled-position #f))"
"(define-values(1/compiled-position->primitive)(hash-ref linklet-primitive-table 'compiled-position->primitive #f))"
"(define-values(1/linklet?)(hash-ref linklet-primitive-table 'linklet? #f))"
"(define-values(1/compile-linklet)(hash-ref linklet-primitive-table 'compile-linklet #f))"
"(define-values(1/recompile-linklet)(hash-ref linklet-primitive-table 'recompile-linklet #f))"
"(define-values(1/eval-linklet)(hash-ref linklet-primitive-table 'eval-linklet #f))"
"(define-values(1/instantiate-linklet)(hash-ref linklet-primitive-table 'instantiate-linklet #f))"
"(define-values(1/linklet-import-variables)(hash-ref linklet-primitive-table 'linklet-import-variables #f))"
"(define-values(1/linklet-export-variables)(hash-ref linklet-primitive-table 'linklet-export-variables #f))"
"(define-values(1/instance?)(hash-ref linklet-primitive-table 'instance? #f))"
"(define-values(1/make-instance)(hash-ref linklet-primitive-table 'make-instance #f))"
"(define-values(1/instance-name)(hash-ref linklet-primitive-table 'instance-name #f))"
"(define-values(1/instance-data)(hash-ref linklet-primitive-table 'instance-data #f))"
"(define-values(1/instance-variable-names)(hash-ref linklet-primitive-table 'instance-variable-names #f))"
"(define-values(1/instance-variable-value)(hash-ref linklet-primitive-table 'instance-variable-value #f))"
"(define-values(1/instance-set-variable-value!)(hash-ref linklet-primitive-table 'instance-set-variable-value! #f))"
"(define-values(1/instance-unset-variable!)(hash-ref linklet-primitive-table 'instance-unset-variable! #f))"
"(define-values(1/linklet-directory?)(hash-ref linklet-primitive-table 'linklet-directory? #f))"
"(define-values(1/hash->linklet-directory)(hash-ref linklet-primitive-table 'hash->linklet-directory #f))"
"(define-values(1/linklet-directory->hash)(hash-ref linklet-primitive-table 'linklet-directory->hash #f))"
"(define-values(1/linklet-bundle?)(hash-ref linklet-primitive-table 'linklet-bundle? #f))"
"(define-values(1/hash->linklet-bundle)(hash-ref linklet-primitive-table 'hash->linklet-bundle #f))"
"(define-values(1/linklet-bundle->hash)(hash-ref linklet-primitive-table 'linklet-bundle->hash #f))"
"(define-values(1/variable-reference?)(hash-ref linklet-primitive-table 'variable-reference? #f))"
"(define-values(1/variable-reference->instance)(hash-ref linklet-primitive-table 'variable-reference->instance #f))"
"(define-values(1/variable-reference-constant?)(hash-ref linklet-primitive-table 'variable-reference-constant? #f))"
"(call-with-values"
"(lambda()"
"(if 1/variable-reference-constant?"
"(void)"
"      (let-values () (error \"broken '#%linklet primitive table; maybe you need to use \\\"bootstrap-run.rkt\\\"\"))))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(struct:module-registry module-registry1.1 module-registry? module-registry-declarations module-registry-lock-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-registry"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-registry)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'declarations)"
"(make-struct-field-accessor -ref_4 1 'lock-box))))"
"(define-values(make-module-registry)(lambda()(module-registry1.1(make-hasheq)(box #f))))"
"(define-values"
"(registry-call-with-lock)"
"(lambda(r_26 proc_27)"
"(let-values(((lock-box_28)(module-registry-lock-box r_26)))"
"((letrec-values(((loop_29)"
"(lambda()"
"(let-values(((v_30)(unbox lock-box_28)))"
"(if(let-values(((or-part_31)(not v_30)))"
"(if or-part_31 or-part_31(sync/timeout 0(car v_30)(cdr v_30))))"
"(let-values()"
"(let-values(((sema_32)(make-semaphore)))"
"(let-values(((lock_33)(cons(semaphore-peek-evt sema_32)(current-thread))))"
"((dynamic-wind"
" void"
"(lambda()"
"(if(box-cas! lock-box_28 v_30 lock_33)"
"(let-values()(begin(proc_27) void))"
"(let-values() loop_29)))"
"(lambda()(semaphore-post sema_32)))))))"
"(if(eq?(current-thread)(cdr v_30))"
"(let-values()(proc_27))"
"(let-values()(begin(sync(car v_30)(cdr v_30))(loop_29)))))))))"
" loop_29)))))"
"(void)"
"(void)"
"(define-values"
"(struct:namespace"
" namespace1.1"
" 1/namespace?"
" namespace-mpi"
" namespace-source-name"
" namespace-root-expand-ctx"
" namespace-phase"
" namespace-0-phase"
" namespace-phase-to-namespace"
" namespace-phase-level-to-definitions"
" 1/namespace-module-registry"
" namespace-bulk-binding-registry"
" namespace-submodule-declarations"
" namespace-root-namespace"
" namespace-declaration-inspector"
" namespace-inspector"
" namespace-available-module-instances"
" namespace-module-instances"
" set-namespace-inspector!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'namespace"
" #f"
" 15"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(ns_97 port_98 mode_99)"
"                         (let-values ((() (begin (write-string \"#<namespace\" port_98) (values))))"
"(let-values(((n_100)(namespace-source-name ns_97)))"
"(let-values((()"
"(begin"
"(if n_100"
"                                               (let-values () (fprintf port_98 \":~a\" (namespace->name ns_97)))"
"(void))"
"(values))))"
"(let-values(((0-phase_101)(namespace-0-phase ns_97)))"
"(let-values(((phase-level_102)(phase-(namespace-phase ns_97) 0-phase_101)))"
"(begin"
"(if(zero-phase? phase-level_102)"
"(void)"
"                                       (let-values () (fprintf port_98 \":~s\" phase-level_102)))"
"(if(zero-phase? 0-phase_101)"
"(void)"
"(let-values()"
"                                         (fprintf port_98 \"~a~s\" (if (positive? 0-phase_101) \"+\" \"\") 0-phase_101)))"
"                                     (write-string \">\" port_98))))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 13 14)"
" #f"
" 'namespace)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'mpi)"
"(make-struct-field-accessor -ref_4 1 'source-name)"
"(make-struct-field-accessor -ref_4 2 'root-expand-ctx)"
"(make-struct-field-accessor -ref_4 3 'phase)"
"(make-struct-field-accessor -ref_4 4 '0-phase)"
"(make-struct-field-accessor -ref_4 5 'phase-to-namespace)"
"(make-struct-field-accessor -ref_4 6 'phase-level-to-definitions)"
"(make-struct-field-accessor -ref_4 7 'module-registry)"
"(make-struct-field-accessor -ref_4 8 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 9 'submodule-declarations)"
"(make-struct-field-accessor -ref_4 10 'root-namespace)"
"(make-struct-field-accessor -ref_4 11 'declaration-inspector)"
"(make-struct-field-accessor -ref_4 12 'inspector)"
"(make-struct-field-accessor -ref_4 13 'available-module-instances)"
"(make-struct-field-accessor -ref_4 14 'module-instances)"
"(make-struct-field-mutator -set!_5 12 'inspector))))"
"(define-values"
"(struct:definitions definitions2.1 definitions? definitions-variables definitions-transformers)"
"(let-values(((struct:_103 make-_104 ?_105 -ref_106 -set!_107)"
"(let-values()"
"(let-values()"
"(make-struct-type 'definitions #f 2 0 #f null(current-inspector) #f '(0 1) #f 'definitions)))))"
"(values"
" struct:_103"
" make-_104"
" ?_105"
"(make-struct-field-accessor -ref_106 0 'variables)"
"(make-struct-field-accessor -ref_106 1 'transformers))))"
"(define-values(make-namespace)(lambda()(let-values()(new-namespace9.1 #f #f #f #f #f #f))))"
"(define-values"
"(new-namespace9.1)"
"(lambda(register?4_128"
" register?6_129"
" root-expand-ctx3_130"
" root-expand-ctx5_131"
" share-from-ns7_132"
" share-from-ns8_133)"
"(let-values(((share-from-ns_134)(if share-from-ns8_133 share-from-ns7_132 #f)))"
"(let-values(((root-expand-ctx_135)"
"(if root-expand-ctx5_131"
" root-expand-ctx3_130"
"(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f)))))"
"(let-values(((register?_136)(if register?6_129 register?4_128 #t)))"
"(let-values()"
"(let-values(((phase_137)(if share-from-ns_134(namespace-phase share-from-ns_134) 0)))"
"(let-values(((ns_138)"
"(namespace1.1"
" top-level-module-path-index"
" #f"
"(box root-expand-ctx_135)"
" phase_137"
" phase_137"
"(make-hasheqv)"
"(make-hasheqv)"
"(if share-from-ns_134"
"(1/namespace-module-registry share-from-ns_134)"
"(make-module-registry))"
"(if share-from-ns_134"
"(namespace-bulk-binding-registry share-from-ns_134)"
"(make-bulk-binding-registry))"
"(make-hasheq)"
"(if share-from-ns_134"
"(let-values(((or-part_139)(namespace-root-namespace share-from-ns_134)))"
"(if or-part_139 or-part_139 share-from-ns_134))"
" #f)"
" #f"
"(make-inspector(current-code-inspector))"
"(if share-from-ns_134"
"(namespace-available-module-instances share-from-ns_134)"
"(make-hasheqv))"
"(if share-from-ns_134(namespace-module-instances share-from-ns_134)(make-hasheqv)))))"
"(begin"
"(if register?_136"
"(let-values()(hash-set!(namespace-phase-to-namespace ns_138) phase_137 ns_138))"
"(void))"
" ns_138)))))))))"
"(define-values"
"(1/current-namespace)"
"(make-parameter"
"(make-namespace)"
"(lambda(v_163)"
"(begin"
"       (if (1/namespace? v_163) (void) (let-values () (raise-argument-error 'current-namespace \"namespace?\" v_163)))"
" v_163))))"
"(define-values(namespace-get-root-expand-ctx)(lambda(ns_164)(force(unbox(namespace-root-expand-ctx ns_164)))))"
"(define-values"
"(namespace-set-root-expand-ctx!)"
"(lambda(ns_165 root-ctx_166)(set-box!(namespace-root-expand-ctx ns_165) root-ctx_166)))"
"(define-values"
"(namespace->module)"
"(lambda(ns_167 name_168)"
"(let-values(((or-part_169)(hash-ref(namespace-submodule-declarations ns_167) name_168 #f)))"
"(if or-part_169"
" or-part_169"
"(hash-ref(module-registry-declarations(1/namespace-module-registry ns_167)) name_168 #f)))))"
"(define-values"
"(namespace->namespace-at-phase)"
"(lambda(ns_170 phase_171)"
"(let-values(((or-part_172)(hash-ref(namespace-phase-to-namespace ns_170) phase_171 #f)))"
"(if or-part_172"
" or-part_172"
"(let-values(((p-ns_173)"
"(let-values(((the-struct_174) ns_170))"
"(if(1/namespace? the-struct_174)"
"(let-values(((phase22_175) phase_171))"
"(namespace1.1"
"(namespace-mpi the-struct_174)"
"(namespace-source-name the-struct_174)"
"(namespace-root-expand-ctx the-struct_174)"
" phase22_175"
"(namespace-0-phase the-struct_174)"
"(namespace-phase-to-namespace the-struct_174)"
"(namespace-phase-level-to-definitions the-struct_174)"
"(1/namespace-module-registry the-struct_174)"
"(namespace-bulk-binding-registry the-struct_174)"
"(namespace-submodule-declarations the-struct_174)"
"(namespace-root-namespace the-struct_174)"
"(namespace-declaration-inspector the-struct_174)"
"(namespace-inspector the-struct_174)"
"(namespace-available-module-instances the-struct_174)"
"(namespace-module-instances the-struct_174)))"
"                          (raise-argument-error 'struct-copy \"namespace?\" the-struct_174)))))"
"(begin(hash-set!(namespace-phase-to-namespace ns_170) phase_171 p-ns_173) p-ns_173))))))"
"(define-values"
"(namespace->name)"
"(lambda(ns_176)"
"(let-values(((n_177)(namespace-source-name ns_176)))"
"(let-values(((s_178)"
"(if(not n_177)"
"(let-values() 'top-level)"
"(if(symbol? n_177)"
"                        (let-values () (format \"'~s\" n_177))"
"                        (let-values () (string-append \"\\\"\" (path->string n_177) \"\\\"\"))))))"
"(let-values(((r_179)(1/resolved-module-path-name(1/module-path-index-resolve(namespace-mpi ns_176)))))"
"          (if (pair? r_179) (string-append \"(submod \" s_178 \" \" (substring (format \"~s\" (cdr r_179)) 1)) s_178))))))"
"(define-values"
"(namespace->definitions)"
"(lambda(ns_180 phase-level_181)"
"(let-values(((d_182)(hash-ref(namespace-phase-level-to-definitions ns_180) phase-level_181 #f)))"
"(let-values(((or-part_183) d_182))"
"(if or-part_183"
" or-part_183"
"(let-values()"
"(let-values(((p-ns_184)"
"(namespace->namespace-at-phase ns_180(phase+(namespace-0-phase ns_180) phase-level_181))))"
"(let-values(((d_185)"
"(definitions2.1(1/make-instance(namespace->name p-ns_184) p-ns_184)(make-hasheq))))"
"(begin(hash-set!(namespace-phase-level-to-definitions ns_180) phase-level_181 d_185) d_185)))))))))"
"(define-values"
"(namespace-set-variable!)"
"(let-values(((namespace-set-variable!18_186)"
"(lambda(ns14_187 phase-level15_188 name16_189 val17_190 as-constant?12_191 as-constant?13_192)"
"(let-values(((ns_193) ns14_187))"
"(let-values(((phase-level_194) phase-level15_188))"
"(let-values(((name_195) name16_189))"
"(let-values(((val_196) val17_190))"
"(let-values(((as-constant?_197)(if as-constant?13_192 as-constant?12_191 #f)))"
"(let-values()"
"(let-values(((d_198)(namespace->definitions ns_193 phase-level_194)))"
"(1/instance-set-variable-value!"
"(definitions-variables d_198)"
" name_195"
" val_196"
"(if as-constant?_197 'constant #f))))))))))))"
"(case-lambda"
"((ns_199 phase-level_200 name_201 val_202)"
"(namespace-set-variable!18_186 ns_199 phase-level_200 name_201 val_202 #f #f))"
"((ns_203 phase-level_204 name_205 val_206 as-constant?12_207)"
"(namespace-set-variable!18_186 ns_203 phase-level_204 name_205 val_206 as-constant?12_207 #t)))))"
"(define-values"
"(namespace-set-consistent!)"
"(lambda(ns_208 phase-level_209 name_210 val_211)"
"(let-values(((d_212)(namespace->definitions ns_208 phase-level_209)))"
"(1/instance-set-variable-value!(definitions-variables d_212) name_210 val_211 'consistent))))"
"(define-values"
"(namespace-unset-variable!)"
"(lambda(ns_213 phase-level_214 name_215)"
"(let-values(((d_216)(namespace->definitions ns_213 phase-level_214)))"
"(1/instance-unset-variable!(definitions-variables d_216) name_215))))"
"(define-values"
"(namespace-set-transformer!)"
"(lambda(ns_217 phase-level_218 name_219 val_220)"
"(let-values(((d_221)(namespace->definitions ns_217(add1 phase-level_218))))"
"(hash-set!(definitions-transformers d_221) name_219 val_220))))"
"(define-values"
"(namespace-unset-transformer!)"
"(lambda(ns_222 phase-level_223 name_224)"
"(let-values(((d_225)(namespace->definitions ns_222(add1 phase-level_223))))"
"(hash-remove!(definitions-transformers d_225) name_224))))"
"(define-values"
"(namespace-get-variable)"
"(lambda(ns_226 phase-level_227 name_228 fail-k_229)"
"(let-values(((d_230)(namespace->definitions ns_226 phase-level_227)))"
"(1/instance-variable-value(definitions-variables d_230) name_228 fail-k_229))))"
"(define-values"
"(namespace-get-transformer)"
"(lambda(ns_231 phase-level_232 name_233 fail-k_234)"
"(let-values(((d_235)(namespace->definitions ns_231(add1 phase-level_232))))"
"(hash-ref(definitions-transformers d_235) name_233 fail-k_234))))"
"(define-values"
"(namespace->instance)"
"(lambda(ns_236 phase-shift_237)(definitions-variables(namespace->definitions ns_236 phase-shift_237))))"
"(define-values"
"(namespace-same-instance?)"
"(lambda(a-ns_238 b-ns_239)"
"(eq?"
"(hash-ref(namespace-phase-level-to-definitions a-ns_238) 0 'no-a)"
"(hash-ref(namespace-phase-level-to-definitions b-ns_239) 0 'no-b))))"
"(void)"
"(void)"
"(define-values(original-property-sym)(gensym 'original))"
"(void)"
"(void)"
"(define-values"
"(syntax->list$1)"
"(lambda(s_1)"
"(let-values(((l_2)"
"((letrec-values(((loop_3)"
"(lambda(s_4)"
"(if(pair? s_4)"
"(let-values()(cons(car s_4)(loop_3(cdr s_4))))"
"(if(syntax?$1 s_4)"
"(let-values()(loop_3(syntax-e$1 s_4)))"
"(let-values() s_4))))))"
" loop_3)"
" s_1)))"
"(if(list? l_2) l_2 #f))))"
"(void)"
"(void)"
"(define-values(missing$1)(gensym))"
"(define-values"
"(syntax-track-origin$1)"
"(let-values(((syntax-track-origin5_1)"
"(lambda(new-stx3_2 old-stx4_3 id1_4 id2_5)"
"(let-values(((new-stx_6) new-stx3_2))"
"(let-values(((old-stx_7) old-stx4_3))"
"(let-values(((id_8)"
"(if id2_5"
" id1_4"
"(if(identifier? old-stx_7)"
" old-stx_7"
"(let-values(((v_9)(syntax-e/no-taint old-stx_7)))"
"(if(pair? v_9)(car v_9) #f))))))"
"(let-values()"
"(let-values(((old-props_10)(syntax-props old-stx_7)))"
"(if(zero?(hash-count old-props_10))"
"(let-values()"
"(if id_8"
"(syntax-property$1"
" new-stx_6"
" 'origin"
"(cons id_8(hash-ref(syntax-props new-stx_6) 'origin null)))"
" new-stx_6))"
"(let-values()"
"(let-values(((new-props_11)(syntax-props new-stx_6)))"
"(if(zero?(hash-count new-props_11))"
"(let-values()"
"(if id_8"
"(let-values()"
"(let-values(((old-origin_12)"
"(plain-property-value"
"(hash-ref old-props_10 'origin missing$1))))"
"(let-values(((origin_13)"
"(if(eq? old-origin_12 missing$1)"
"(list id_8)"
"(cons id_8 old-origin_12))))"
"(let-values(((the-struct_14) new-stx_6))"
"(if(syntax?$1 the-struct_14)"
"(let-values(((props7_15)(hash-set old-props_10 'origin origin_13)))"
"(syntax1.1"
"(syntax-content the-struct_14)"
"(syntax-scopes the-struct_14)"
"(syntax-shifted-multi-scopes the-struct_14)"
"(syntax-scope-propagations the-struct_14)"
"(syntax-mpi-shifts the-struct_14)"
"(syntax-srcloc the-struct_14)"
" props7_15"
"(syntax-inspector the-struct_14)"
"(syntax-tamper the-struct_14)))"
"                                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_14))))))"
"(let-values()"
"(let-values(((the-struct_16) new-stx_6))"
"(if(syntax?$1 the-struct_16)"
"(let-values(((props8_17) old-props_10))"
"(syntax1.1"
"(syntax-content the-struct_16)"
"(syntax-scopes the-struct_16)"
"(syntax-shifted-multi-scopes the-struct_16)"
"(syntax-scope-propagations the-struct_16)"
"(syntax-mpi-shifts the-struct_16)"
"(syntax-srcloc the-struct_16)"
" props8_17"
"(syntax-inspector the-struct_16)"
"(syntax-tamper the-struct_16)))"
"                                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_16))))))"
"(let-values()"
"(let-values(((old-props-with-origin_18)"
"(if id_8"
"(hash-set"
" old-props_10"
" 'origin"
"(cons id_8(hash-ref old-props_10 'origin null)))"
" old-props_10)))"
"(let-values(((updated-props_19)"
"(if(<"
"(hash-count old-props-with-origin_18)"
"(hash-count new-props_11))"
"(let-values()"
"(let-values(((ht_20) old-props-with-origin_18))"
"(begin"
"(if((lambda(ht_21)"
"(if(hash? ht_21)(immutable? ht_21) #f))"
" ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(new-props_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_20"
" i_24)))"
"(let-values(((new-props_27)"
"(let-values(((new-props_28)"
" new-props_23))"
"(let-values(((new-props_29)"
"(let-values()"
"(let-values(((new-v_30)"
"(hash-ref"
" new-props_28"
" k_25"
" missing$1)))"
"(hash-set"
" new-props_28"
" k_25"
"(if(eq?"
" new-v_30"
" missing$1)"
" v_26"
"(cons/preserve"
" new-v_30"
" v_26)))))))"
"(values"
" new-props_29)))))"
"(if(not #f)"
"(for-loop_22"
" new-props_27"
"(unsafe-immutable-hash-iterate-next"
" ht_20"
" i_24))"
" new-props_27)))"
" new-props_23))))"
" for-loop_22)"
" new-props_11"
"(unsafe-immutable-hash-iterate-first ht_20)))))"
"(let-values()"
"(let-values(((ht_31) new-props_11))"
"(begin"
"(if((lambda(ht_32)"
"(if(hash? ht_32)(immutable? ht_32) #f))"
" ht_31)"
"(void)"
"(let-values()(default-in-immutable-hash ht_31)))"
"((letrec-values(((for-loop_33)"
"(lambda(old-props_34 i_35)"
"(if i_35"
"(let-values(((k_36 v_37)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_31"
" i_35)))"
"(let-values(((old-props_38)"
"(let-values(((old-props_39)"
" old-props_34))"
"(let-values(((old-props_40)"
"(let-values()"
"(let-values(((old-v_41)"
"(hash-ref"
" old-props_39"
" k_36"
" missing$1)))"
"(hash-set"
" old-props_39"
" k_36"
"(if(eq?"
" old-v_41"
" missing$1)"
" v_37"
"(cons/preserve"
" v_37"
" old-v_41)))))))"
"(values"
" old-props_40)))))"
"(if(not #f)"
"(for-loop_33"
" old-props_38"
"(unsafe-immutable-hash-iterate-next"
" ht_31"
" i_35))"
" old-props_38)))"
" old-props_34))))"
" for-loop_33)"
" old-props-with-origin_18"
"(unsafe-immutable-hash-iterate-first ht_31))))))))"
"(let-values(((the-struct_42) new-stx_6))"
"(if(syntax?$1 the-struct_42)"
"(let-values(((props9_43) updated-props_19))"
"(syntax1.1"
"(syntax-content the-struct_42)"
"(syntax-scopes the-struct_42)"
"(syntax-shifted-multi-scopes the-struct_42)"
"(syntax-scope-propagations the-struct_42)"
"(syntax-mpi-shifts the-struct_42)"
"(syntax-srcloc the-struct_42)"
" props9_43"
"(syntax-inspector the-struct_42)"
"(syntax-tamper the-struct_42)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"syntax?\""
" the-struct_42))))))))))))))))))"
"(case-lambda"
"((new-stx_44 old-stx_45)(syntax-track-origin5_1 new-stx_44 old-stx_45 #f #f))"
"((new-stx_46 old-stx_47 id1_48)(syntax-track-origin5_1 new-stx_46 old-stx_47 id1_48 #t)))))"
"(define-values"
"(cons/preserve)"
"(lambda(a_49 b_50)"
"(if(let-values(((or-part_51)(preserved-property-value? a_49)))"
"(if or-part_51 or-part_51(preserved-property-value? b_50)))"
"(preserved-property-value1.1(cons(plain-property-value a_49)(plain-property-value b_50)))"
"(cons a_49 b_50))))"
"(define-values"
"(syntax-track-origin*)"
"(lambda(old-stxes_52 new-stx_53)"
"(let-values(((lst_54) old-stxes_52))"
"(begin"
"(if(list? lst_54)(void)(let-values()(in-list lst_54)))"
"((letrec-values(((for-loop_55)"
"(lambda(new-stx_56 lst_57)"
"(if(pair? lst_57)"
"(let-values(((old-stx_58)(unsafe-car lst_57))((rest_59)(unsafe-cdr lst_57)))"
"(let-values(((new-stx_60)"
"(let-values(((new-stx_61) new-stx_56))"
"(let-values(((new-stx_62)"
"(let-values()"
"(syntax-track-origin$1 new-stx_61 old-stx_58))))"
"(values new-stx_62)))))"
"(if(not #f)(for-loop_55 new-stx_60 rest_59) new-stx_60)))"
" new-stx_56))))"
" for-loop_55)"
" new-stx_53"
" lst_54)))))"
"(void)"
"(void)"
"(define-values"
"(1/struct:exn:fail:syntax make-exn:fail:syntax$1 1/exn:fail:syntax? 1/exn:fail:syntax-exprs)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax"
" struct:exn:fail"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:exn:srclocs"
"(lambda(e_28)(filter values(map2 syntax-srcloc(1/exn:fail:syntax-exprs e_28))))))"
" #f"
" #f"
" '(0)"
"(lambda(str_29 cm_30 exprs_31 info_32)"
"(begin"
"(if(if(list? exprs_31)(andmap2 syntax?$1 exprs_31) #f)"
"(void)"
"                           (let-values () (raise-argument-error 'exn:fail:syntax \"(listof syntax?)\" exprs_31)))"
"(values str_29 cm_30 exprs_31)))"
" 'exn:fail:syntax)))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'exprs))))"
"(define-values"
"(1/struct:exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1 1/exn:fail:syntax:unbound?)"
"(let-values(((struct:_33 make-_34 ?_35 -ref_36 -set!_37)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:unbound"
" 1/struct:exn:fail:syntax"
" 0"
" 0"
" #f"
" null"
" #f"
" #f"
" '()"
" #f"
" 'exn:fail:syntax:unbound)))))"
"(values struct:_33 make-_34 ?_35)))"
"(define-values"
"(raise-syntax-error$1)"
"(let-values(((raise-syntax-error11_48)"
"(lambda(given-name9_49"
" message10_50"
" expr1_51"
" sub-expr2_52"
" extra-sources3_53"
" message-suffix4_54"
" expr5_55"
" sub-expr6_56"
" extra-sources7_57"
" message-suffix8_58)"
"(let-values(((given-name_59) given-name9_49))"
"(let-values(((message_60) message10_50))"
"(let-values(((expr_61)(if expr5_55 expr1_51 #f)))"
"(let-values(((sub-expr_62)(if sub-expr6_56 sub-expr2_52 #f)))"
"(let-values(((extra-sources_63)(if extra-sources7_57 extra-sources3_53 null)))"
"                            (let-values (((message-suffix_64) (if message-suffix8_58 message-suffix4_54 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax$1"
" given-name_59"
" message_60"
" expr_61"
" sub-expr_62"
" extra-sources_63"
" message-suffix_64)))))))))))"
"(case-lambda"
"((given-name_65 message_66)(raise-syntax-error11_48 given-name_65 message_66 #f #f #f #f #f #f #f #f))"
"((given-name_67 message_68 expr_69 sub-expr_70 extra-sources_71 message-suffix4_72)"
"(raise-syntax-error11_48"
" given-name_67"
" message_68"
" expr_69"
" sub-expr_70"
" extra-sources_71"
" message-suffix4_72"
" #t"
" #t"
" #t"
" #t))"
"((given-name_73 message_74 expr_75 sub-expr_76 extra-sources3_77)"
"(raise-syntax-error11_48 given-name_73 message_74 expr_75 sub-expr_76 extra-sources3_77 #f #t #t #t #f))"
"((given-name_78 message_79 expr_80 sub-expr2_81)"
"(raise-syntax-error11_48 given-name_78 message_79 expr_80 sub-expr2_81 #f #f #t #t #f #f))"
"((given-name_82 message_83 expr1_84)"
"(raise-syntax-error11_48 given-name_82 message_83 expr1_84 #f #f #f #t #f #f #f)))))"
"(define-values"
"(raise-unbound-syntax-error)"
"(let-values(((raise-unbound-syntax-error23_85)"
"(lambda(given-name21_86"
" message22_87"
" expr13_88"
" sub-expr14_89"
" extra-sources15_90"
" message-suffix16_91"
" expr17_92"
" sub-expr18_93"
" extra-sources19_94"
" message-suffix20_95)"
"(let-values(((given-name_96) given-name21_86))"
"(let-values(((message_97) message22_87))"
"(let-values(((expr_98)(if expr17_92 expr13_88 #f)))"
"(let-values(((sub-expr_99)(if sub-expr18_93 sub-expr14_89 #f)))"
"(let-values(((extra-sources_100)(if extra-sources19_94 extra-sources15_90 null)))"
"                            (let-values (((message-suffix_101) (if message-suffix20_95 message-suffix16_91 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax:unbound$1"
" given-name_96"
" message_97"
" expr_98"
" sub-expr_99"
" extra-sources_100"
" message-suffix_101)))))))))))"
"(case-lambda"
"((given-name_102 message_103)(raise-unbound-syntax-error23_85 given-name_102 message_103 #f #f #f #f #f #f #f #f))"
"((given-name_104 message_105 expr_106 sub-expr_107 extra-sources_108 message-suffix16_109)"
"(raise-unbound-syntax-error23_85"
" given-name_104"
" message_105"
" expr_106"
" sub-expr_107"
" extra-sources_108"
" message-suffix16_109"
" #t"
" #t"
" #t"
" #t))"
"((given-name_110 message_111 expr_112 sub-expr_113 extra-sources15_114)"
"(raise-unbound-syntax-error23_85"
" given-name_110"
" message_111"
" expr_112"
" sub-expr_113"
" extra-sources15_114"
" #f"
" #t"
" #t"
" #t"
" #f))"
"((given-name_115 message_116 expr_117 sub-expr14_118)"
"(raise-unbound-syntax-error23_85 given-name_115 message_116 expr_117 sub-expr14_118 #f #f #t #t #f #f))"
"((given-name_119 message_120 expr13_121)"
"(raise-unbound-syntax-error23_85 given-name_119 message_120 expr13_121 #f #f #f #t #f #f #f)))))"
"(define-values"
"(do-raise-syntax-error)"
"(lambda(exn:fail:syntax_122 given-name_123 message_124 expr_125 sub-expr_126 extra-sources_127 message-suffix_128)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_133)(not given-name_123)))"
"(if or-part_133 or-part_133(symbol? given-name_123)))"
"(void)"
"                      (let-values () (raise-argument-error 'raise-syntax-error \"(or/c symbol? #f)\" given-name_123)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message_124)"
"(void)"
"                        (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message_124)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(list? extra-sources_127)(andmap2 syntax?$1 extra-sources_127) #f)"
"(void)"
"(let-values()"
"                            (raise-argument-error 'raise-syntax-error \"(listof syntax?)\" extra-sources_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message-suffix_128)"
"(void)"
"                            (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message-suffix_128)))"
"(values))))"
"(let-values(((name_129)"
"(format"
"                           \"~a\""
"(let-values(((or-part_134) given-name_123))"
"(if or-part_134"
" or-part_134"
"(let-values(((or-part_135)(extract-form-name expr_125)))"
"(if or-part_135 or-part_135 '?)))))))"
"(let-values(((at-message_130)"
"(let-values(((or-part_136)"
"(if sub-expr_126"
"(if(error-print-source-location)"
"                                              (format \"\\n  at: ~.s\" (syntax->datum$1 (datum->syntax$1 #f sub-expr_126)))"
" #f)"
" #f)))"
"                              (if or-part_136 or-part_136 \"\"))))"
"(let-values(((in-message_131)"
"(let-values(((or-part_137)"
"(if expr_125"
"(if(error-print-source-location)"
"                                                (format \"\\n  in: ~.s\" (syntax->datum$1 (datum->syntax$1 #f expr_125)))"
" #f)"
" #f)))"
"                                (if or-part_137 or-part_137 \"\"))))"
"(let-values(((src-loc-str_132)"
"(let-values(((or-part_138)(extract-source-location sub-expr_126)))"
"(if or-part_138"
" or-part_138"
"(let-values(((or-part_139)(extract-source-location expr_125)))"
"                                      (if or-part_139 or-part_139 \"\"))))))"
"(raise"
"(exn:fail:syntax_122"
"(string-append"
" src-loc-str_132"
" name_129"
"                       \": \""
" message_124"
" at-message_130"
" in-message_131"
" message-suffix_128)"
"(current-continuation-marks)"
"(map2"
" syntax-taint$1"
"(if(let-values(((or-part_140) sub-expr_126))(if or-part_140 or-part_140 expr_125))"
"(cons"
"(datum->syntax$1"
" #f"
"(let-values(((or-part_141) sub-expr_126))(if or-part_141 or-part_141 expr_125)))"
" extra-sources_127)"
" extra-sources_127))))))))))))))"
"(define-values"
"(extract-form-name)"
"(lambda(s_142)"
"(if(syntax?$1 s_142)"
"(let-values()"
"(let-values(((e_143)(syntax-e$1 s_142)))"
"(if(symbol? e_143)"
"(let-values() e_143)"
"(if(if(pair? e_143)(identifier?(car e_143)) #f)"
"(let-values()(syntax-e$1(car e_143)))"
"(let-values() #f)))))"
"(let-values() #f))))"
"(define-values"
"(extract-source-location)"
"(lambda(s_144)"
"(if(syntax?$1 s_144)"
"(if(syntax-srcloc s_144)"
"        (let-values (((str_145) (srcloc->string (syntax-srcloc s_144)))) (if str_145 (string-append str_145 \": \") #f))"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:module-use module-use1.1 module-use? module-use-module module-use-phase)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'module-use #f 2 0 #f null #f #f '(0 1) #f 'module-use)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module)"
"(make-struct-field-accessor -ref_4 1 'phase))))"
"(void)"
"(void)"
"(define-values"
"(struct:module"
" module1.1"
" module?"
" module-source-name"
" module-self"
" module-requires"
" module-provides"
" module-access"
" module-language-info"
" module-min-phase-level"
" module-max-phase-level"
" module-phase-level-linklet-info-callback"
" module-prepare-instance"
" module-instantiate-phase"
" module-primitive?"
" module-predefined?$1"
" module-cross-phase-persistent?"
" module-no-protected?"
" module-inspector"
" module-submodule-names"
" module-supermodule-name"
" module-get-all-variables"
" set-module-access!)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module"
" #f"
" 19"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18)"
" #f"
" 'module)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'source-name)"
"(make-struct-field-accessor -ref_24 1 'self)"
"(make-struct-field-accessor -ref_24 2 'requires)"
"(make-struct-field-accessor -ref_24 3 'provides)"
"(make-struct-field-accessor -ref_24 4 'access)"
"(make-struct-field-accessor -ref_24 5 'language-info)"
"(make-struct-field-accessor -ref_24 6 'min-phase-level)"
"(make-struct-field-accessor -ref_24 7 'max-phase-level)"
"(make-struct-field-accessor -ref_24 8 'phase-level-linklet-info-callback)"
"(make-struct-field-accessor -ref_24 9 'prepare-instance)"
"(make-struct-field-accessor -ref_24 10 'instantiate-phase)"
"(make-struct-field-accessor -ref_24 11 'primitive?)"
"(make-struct-field-accessor -ref_24 12 'predefined?)"
"(make-struct-field-accessor -ref_24 13 'cross-phase-persistent?)"
"(make-struct-field-accessor -ref_24 14 'no-protected?)"
"(make-struct-field-accessor -ref_24 15 'inspector)"
"(make-struct-field-accessor -ref_24 16 'submodule-names)"
"(make-struct-field-accessor -ref_24 17 'supermodule-name)"
"(make-struct-field-accessor -ref_24 18 'get-all-variables)"
"(make-struct-field-mutator -set!_25 4 'access))))"
"(define-values"
"(struct:module-linklet-info"
" module-linklet-info2.1"
" module-linklet-info?"
" module-linklet-info-linklet-or-instance"
" module-linklet-info-module-uses"
" module-linklet-info-self)"
"(let-values(((struct:_131 make-_132 ?_133 -ref_134 -set!_135)"
"(let-values()"
"(let-values()"
"(make-struct-type 'module-linklet-info #f 3 0 #f null #f #f '(0 1 2) #f 'module-linklet-info)))))"
"(values"
" struct:_131"
" make-_132"
" ?_133"
"(make-struct-field-accessor -ref_134 0 'linklet-or-instance)"
"(make-struct-field-accessor -ref_134 1 'module-uses)"
"(make-struct-field-accessor -ref_134 2 'self))))"
"(define-values"
"(make-module37.1)"
"(lambda(cross-phase-persistent?15_163"
" cross-phase-persistent?32_164"
" get-all-variables19_165"
" get-all-variables36_166"
" instantiate-phase-callback9_167"
" language-info12_168"
" language-info29_169"
" max-phase-level8_170"
" max-phase-level25_171"
" min-phase-level7_172"
" min-phase-level24_173"
" no-protected?16_174"
" no-protected?33_175"
" phase-level-linklet-info-callback11_176"
" phase-level-linklet-info-callback28_177"
" predefined?14_178"
" predefined?31_179"
" prepare-instance-callback10_180"
" prepare-instance-callback27_181"
" primitive?13_182"
" primitive?30_183"
" provides6_184"
" requires5_185"
" requires22_186"
" self4_187"
" source-name3_188"
" source-name20_189"
" submodule-names17_190"
" submodule-names34_191"
" supermodule-name18_192"
" supermodule-name35_193)"
"(let-values(((source-name_194)(if source-name20_189 source-name3_188 #f)))"
"(let-values(((self_195) self4_187))"
"(let-values(((requires_196)(if requires22_186 requires5_185 null)))"
"(let-values(((provides_197) provides6_184))"
"(let-values(((min-phase-level_198)(if min-phase-level24_173 min-phase-level7_172 0)))"
"(let-values(((max-phase-level_199)(if max-phase-level25_171 max-phase-level8_170 0)))"
"(let-values(((instantiate-phase_200) instantiate-phase-callback9_167))"
"(let-values(((prepare-instance_201)"
"(if prepare-instance-callback27_181 prepare-instance-callback10_180 void)))"
"(let-values(((phase-level-linklet-info-callback_202)"
"(if phase-level-linklet-info-callback28_177"
" phase-level-linklet-info-callback11_176"
"(lambda(phase-level_203 ns_204) #f))))"
"(let-values(((language-info_205)(if language-info29_169 language-info12_168 #f)))"
"(let-values(((primitive?_206)(if primitive?30_183 primitive?13_182 #f)))"
"(let-values(((predefined?_207)(if predefined?31_179 predefined?14_178 #f)))"
"(let-values(((cross-phase-persistent?_208)"
"(if cross-phase-persistent?32_164"
" cross-phase-persistent?15_163"
" primitive?_206)))"
"(let-values(((no-protected?_209)(if no-protected?33_175 no-protected?16_174 #f)))"
"(let-values(((submodule-names_210)"
"(if submodule-names34_191 submodule-names17_190 null)))"
"(let-values(((supermodule-name_211)"
"(if supermodule-name35_193 supermodule-name18_192 #f)))"
"(let-values(((get-all-variables_212)"
"(if get-all-variables36_166"
" get-all-variables19_165"
"(lambda() null))))"
"(let-values()"
"(module1.1"
" source-name_194"
" self_195"
" requires_196"
" provides_197"
" #f"
" language-info_205"
" min-phase-level_198"
" max-phase-level_199"
" phase-level-linklet-info-callback_202"
" prepare-instance_201"
" instantiate-phase_200"
" primitive?_206"
" predefined?_207"
" cross-phase-persistent?_208"
" no-protected?_209"
"(current-code-inspector)"
" submodule-names_210"
" supermodule-name_211"
" get-all-variables_212)))))))))))))))))))))"
"(define-values"
"(struct:module-instance"
" module-instance40.1"
" module-instance?"
" module-instance-namespace"
" module-instance-module"
" module-instance-shifted-requires"
" module-instance-phase-level-to-state"
" module-instance-made-available?"
" module-instance-attached?"
" module-instance-data-box"
" set-module-instance-shifted-requires!"
" set-module-instance-made-available?!"
" set-module-instance-attached?!)"
"(let-values(((struct:_282 make-_283 ?_284 -ref_285 -set!_286)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-instance"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 3 6)"
" #f"
" 'module-instance)))))"
"(values"
" struct:_282"
" make-_283"
" ?_284"
"(make-struct-field-accessor -ref_285 0 'namespace)"
"(make-struct-field-accessor -ref_285 1 'module)"
"(make-struct-field-accessor -ref_285 2 'shifted-requires)"
"(make-struct-field-accessor -ref_285 3 'phase-level-to-state)"
"(make-struct-field-accessor -ref_285 4 'made-available?)"
"(make-struct-field-accessor -ref_285 5 'attached?)"
"(make-struct-field-accessor -ref_285 6 'data-box)"
"(make-struct-field-mutator -set!_286 2 'shifted-requires)"
"(make-struct-field-mutator -set!_286 4 'made-available?)"
"(make-struct-field-mutator -set!_286 5 'attached?))))"
"(define-values"
"(make-module-instance)"
"(lambda(m-ns_332 m_333)(module-instance40.1 m-ns_332 m_333 #f(make-hasheqv) #f #f(box #f))))"
"(define-values"
"(make-module-namespace48.1)"
"(lambda(for-submodule?43_338 mpi41_339 root-expand-context42_340 ns47_341)"
"(let-values(((ns_342) ns47_341))"
"(let-values(((name-mpi_343) mpi41_339))"
"(let-values(((root-expand-ctx_344) root-expand-context42_340))"
"(let-values(((for-submodule?_345) for-submodule?43_338))"
"(let-values()"
"(let-values(((phase_346) 0))"
"(let-values(((name_347)(1/module-path-index-resolve name-mpi_343)))"
"(let-values(((m-ns_348)"
"(let-values(((the-struct_350)"
"(let-values(((ns158_352) ns_342)"
"((root-expand-ctx159_353) root-expand-ctx_344)"
"((temp160_354) #f))"
"(new-namespace9.1"
" temp160_354"
" #t"
" root-expand-ctx159_353"
" #t"
" ns158_352"
" #t))))"
"(if(1/namespace? the-struct_350)"
"(let-values(((mpi150_355) name-mpi_343)"
"((source-name151_356)(resolved-module-path-root-name name_347))"
"((phase152_357) phase_346)"
"((0-phase153_358) phase_346)"
"((submodule-declarations154_359)"
"(if for-submodule?_345"
"(namespace-submodule-declarations ns_342)"
"(make-hash)))"
"((available-module-instances155_360)(make-hasheqv))"
"((module-instances156_361)(make-hasheqv))"
"((declaration-inspector157_362)(current-code-inspector)))"
"(namespace1.1"
" mpi150_355"
" source-name151_356"
"(namespace-root-expand-ctx the-struct_350)"
" phase152_357"
" 0-phase153_358"
"(namespace-phase-to-namespace the-struct_350)"
"(namespace-phase-level-to-definitions the-struct_350)"
"(1/namespace-module-registry the-struct_350)"
"(namespace-bulk-binding-registry the-struct_350)"
" submodule-declarations154_359"
"(namespace-root-namespace the-struct_350)"
" declaration-inspector157_362"
"(namespace-inspector the-struct_350)"
" available-module-instances155_360"
" module-instances156_361))"
"                                    (raise-argument-error 'struct-copy \"namespace?\" the-struct_350)))))"
"(let-values((()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_348) phase_346 m-ns_348)"
"(values))))"
"(let-values(((at-phase_349)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances m-ns_348) phase_346 at-phase_349)"
"(hash-set! at-phase_349 name_347(make-module-instance m-ns_348 #f))"
" m-ns_348)))))))))))))"
"(define-values"
"(declare-module!56.1)"
"(lambda(with-submodules?51_381 with-submodules?52_382 ns53_383 m54_384 mod-name55_385)"
"(let-values(((ns_386) ns53_383))"
"(let-values(((m_387) m54_384))"
"(let-values(((mod-name_388) mod-name55_385))"
"(let-values(((with-submodules?_389)(if with-submodules?52_382 with-submodules?51_381 #t)))"
"(let-values()"
"(let-values(((prior-m_390)"
"(if with-submodules?_389"
"(hash-ref"
"(module-registry-declarations(1/namespace-module-registry ns_386))"
" mod-name_388"
" #f)"
" #f)))"
"(let-values(((prior-mi_391)"
"(if prior-m_390"
"(if(not(eq? m_387 prior-m_390))"
"(let-values(((ns161_392) ns_386)"
"((mod-name162_393) mod-name_388)"
"((temp163_394)(namespace-phase ns_386)))"
"(namespace->module-instance68.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns161_392"
" mod-name162_393"
" temp163_394))"
" #f)"
" #f)))"
"(begin"
"(if(if prior-m_390(not(eq? m_387 prior-m_390)) #f)"
"(let-values()(check-redeclaration-ok prior-m_390 prior-mi_391 mod-name_388))"
"(void))"
"(hash-set!"
"(if with-submodules?_389"
"(module-registry-declarations(1/namespace-module-registry ns_386))"
"(namespace-submodule-declarations ns_386))"
" mod-name_388"
" m_387)"
"(if with-submodules?_389"
"(let-values()"
"(register-bulk-provide!"
"(namespace-bulk-binding-registry ns_386)"
" mod-name_388"
"(module-self m_387)"
"(module-provides m_387)))"
"(void))"
"((1/current-module-name-resolver) mod-name_388 #f)"
"(if prior-mi_391"
"(let-values()"
"(let-values(((m-ns_395)(module-instance-namespace prior-mi_391)))"
"(let-values(((states_396)(module-instance-phase-level-to-state prior-mi_391)))"
"(let-values(((phase_397)(namespace-phase ns_386)))"
"(let-values(((visit?_398)(eq? 'started(hash-ref states_396(add1 phase_397) #f))))"
"(let-values(((run?_399)(eq? 'started(hash-ref states_396 phase_397 #f))))"
"(let-values(((at-phase_400)"
"(hash-ref(namespace-module-instances ns_386) phase_397)))"
"(begin"
"(hash-set! at-phase_400 mod-name_388(make-module-instance m-ns_395 m_387))"
"(if visit?_398"
"(let-values()"
"(let-values(((ns164_401) ns_386)"
"((temp165_402)(namespace-mpi m-ns_395))"
"((phase166_403) phase_397))"
"(namespace-module-visit!102.1 #f #f ns164_401 temp165_402 phase166_403)))"
"(void))"
"(if run?_399"
"(let-values()"
"(let-values(((ns167_404) ns_386)"
"((temp168_405)(namespace-mpi m-ns_395))"
"((phase169_406) phase_397))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns167_404"
" temp168_405"
" phase169_406)))"
"(void))))))))))"
"(void))))))))))))"
"(define-values"
"(check-redeclaration-ok)"
"(lambda(prior-m_427 prior-mi_428 mod-name_429)"
"(begin"
"(if(module-cross-phase-persistent? prior-m_427)"
"(let-values()"
"          (raise-arguments-error 'module \"cannot redeclare cross-phase persistent module\" \"module name\" mod-name_429))"
"(void))"
"(if(if prior-mi_428"
"(let-values(((or-part_430)(module-instance-attached? prior-mi_428)))"
"(if or-part_430"
" or-part_430"
"(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector(module-instance-namespace prior-mi_428))))))"
" #f)"
"(let-values()"
"          (raise-arguments-error 'module \"current code inspector cannot redeclare module\" \"module name\" mod-name_429))"
"(void)))))"
"(define-values"
"(raise-unknown-module-error)"
"  (lambda (who_431 mod-name_432) (raise-arguments-error who_431 \"unknown module\" \"module name\" mod-name_432)))"
"(define-values"
"(namespace->module-linklet-info)"
"(lambda(ns_433 name_434 phase-level_435)"
"(let-values(((m_436)(namespace->module ns_433 name_434)))"
"(if m_436((module-phase-level-linklet-info-callback m_436) phase-level_435 ns_433) #f))))"
"(define-values"
"(namespace->module-instance68.1)"
"(lambda(check-available-at-phase-level60_437"
" check-available-at-phase-level63_438"
" complain-on-failure?59_439"
" complain-on-failure?62_440"
" unavailable-callback61_441"
" unavailable-callback64_442"
" ns65_443"
" name66_444"
" 0-phase67_445)"
"(let-values(((ns_446) ns65_443))"
"(let-values(((name_447) name66_444))"
"(let-values(((0-phase_448) 0-phase67_445))"
"(let-values(((complain-on-failure?_449)(if complain-on-failure?62_440 complain-on-failure?59_439 #f)))"
"(let-values(((check-available-at-phase-level_450)"
"(if check-available-at-phase-level63_438 check-available-at-phase-level60_437 #f)))"
"(let-values(((unavailable-callback_451)(if unavailable-callback64_442 unavailable-callback61_441 void)))"
"(let-values()"
"(let-values(((mi_452)"
"(let-values(((or-part_453)"
"(hash-ref"
"(hash-ref(namespace-module-instances ns_446) 0-phase_448 '#hasheq())"
" name_447"
" #f)))"
"(if or-part_453"
" or-part_453"
"(let-values(((or-part_454)"
"(let-values(((c-ns_455)"
"(let-values(((or-part_456)"
"(namespace-root-namespace ns_446)))"
"(if or-part_456 or-part_456 ns_446))))"
"(hash-ref(namespace-module-instances c-ns_455) name_447 #f))))"
"(if or-part_454"
" or-part_454"
"(if complain-on-failure?_449"
"                                          (error \"no module instance found:\" name_447 0-phase_448)"
" #f)))))))"
"(if(if mi_452 check-available-at-phase-level_450 #f)"
"(check-availablilty mi_452 check-available-at-phase-level_450 unavailable-callback_451)"
" mi_452)))))))))))"
"(define-values"
"(namespace-install-module-namespace!)"
"(lambda(ns_489 name_490 0-phase_491 m_492 existing-m-ns_493)"
"(let-values(((m-ns_494)"
"(let-values(((the-struct_496) ns_489))"
"(if(1/namespace? the-struct_496)"
"(let-values(((mpi170_497)(namespace-mpi existing-m-ns_493))"
"((source-name171_498)(namespace-source-name existing-m-ns_493))"
"((root-expand-ctx172_499)(namespace-root-expand-ctx existing-m-ns_493))"
"((phase173_500)(namespace-phase existing-m-ns_493))"
"((0-phase174_501)(namespace-0-phase existing-m-ns_493))"
"((phase-to-namespace175_502)(make-hasheqv))"
"((phase-level-to-definitions176_503)"
"(if(module-cross-phase-persistent? m_492)"
"(namespace-phase-level-to-definitions existing-m-ns_493)"
"(make-hasheqv)))"
"((declaration-inspector177_504)(module-inspector m_492))"
"((inspector178_505)(namespace-inspector existing-m-ns_493)))"
"(namespace1.1"
" mpi170_497"
" source-name171_498"
" root-expand-ctx172_499"
" phase173_500"
" 0-phase174_501"
" phase-to-namespace175_502"
" phase-level-to-definitions176_503"
"(1/namespace-module-registry the-struct_496)"
"(namespace-bulk-binding-registry the-struct_496)"
"(namespace-submodule-declarations the-struct_496)"
"(namespace-root-namespace the-struct_496)"
" declaration-inspector177_504"
" inspector178_505"
"(namespace-available-module-instances the-struct_496)"
"(namespace-module-instances the-struct_496)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_496)))))"
"(let-values(((mi_495)(make-module-instance m-ns_494 m_492)))"
"(if(module-cross-phase-persistent? m_492)"
"(let-values()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_494) 0 m-ns_494)"
"(hash-set!(namespace-phase-level-to-definitions m-ns_494) 0(namespace->definitions existing-m-ns_493 0))"
"(hash-set!(namespace-phase-to-namespace m-ns_494) 1(namespace->namespace-at-phase m-ns_494 1))"
"(hash-set!(namespace-phase-level-to-definitions m-ns_494) 1(namespace->definitions existing-m-ns_493 1))"
"(hash-set!"
"(namespace-module-instances"
"(let-values(((or-part_506)(namespace-root-namespace ns_489)))(if or-part_506 or-part_506 ns_489)))"
" name_490"
" mi_495)"
"(hash-set!(module-instance-phase-level-to-state mi_495) 0 'started)))"
"(let-values()"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_494) 0-phase_491 m-ns_494)(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
"(namespace-phase-level-to-definitions m-ns_494)"
" 0"
"(namespace->definitions existing-m-ns_493 0))"
"(values))))"
"(let-values((()(begin(hash-set!(module-instance-phase-level-to-state mi_495) 0 'started)(values))))"
"(let-values(((at-phase_507)"
"(let-values(((or-part_508)"
"(hash-ref(namespace-module-instances ns_489) 0-phase_491 #f)))"
"(if or-part_508"
" or-part_508"
"(let-values(((at-phase_509)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_489) 0-phase_491 at-phase_509)"
" at-phase_509))))))"
"(hash-set! at-phase_507 name_490 mi_495)))))))))))"
"(define-values"
"(namespace-create-module-instance!)"
"(lambda(ns_510 name_511 0-phase_512 m_513 mpi_514)"
"(let-values(((m-ns_515)"
"(let-values(((the-struct_517) ns_510))"
"(if(1/namespace? the-struct_517)"
"(let-values(((mpi179_518) mpi_514)"
"((source-name180_519)"
"(let-values(((or-part_527)(module-source-name m_513)))"
"(if or-part_527"
" or-part_527"
"(resolved-module-path-root-name(1/module-path-index-resolve mpi_514)))))"
"((root-expand-ctx181_520)(box #f))"
"((phase182_521) 0-phase_512)"
"((0-phase183_522) 0-phase_512)"
"((phase-to-namespace184_523)(make-hasheqv))"
"((phase-level-to-definitions185_524)(make-hasheqv))"
"((declaration-inspector186_525)(module-inspector m_513))"
"((inspector187_526)(make-inspector(module-inspector m_513))))"
"(namespace1.1"
" mpi179_518"
" source-name180_519"
" root-expand-ctx181_520"
" phase182_521"
" 0-phase183_522"
" phase-to-namespace184_523"
" phase-level-to-definitions185_524"
"(1/namespace-module-registry the-struct_517)"
"(namespace-bulk-binding-registry the-struct_517)"
"(namespace-submodule-declarations the-struct_517)"
"(namespace-root-namespace the-struct_517)"
" declaration-inspector186_525"
" inspector187_526"
"(namespace-available-module-instances the-struct_517)"
"(namespace-module-instances the-struct_517)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_517)))))"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_515) 0-phase_512 m-ns_515)(values))))"
"(let-values(((mi_516)(make-module-instance m-ns_515 m_513)))"
"(begin"
"(if(module-cross-phase-persistent? m_513)"
"(hash-set!(namespace-module-instances ns_510) name_511 mi_516)"
"(let-values(((at-phase_528)"
"(let-values(((or-part_529)(hash-ref(namespace-module-instances ns_510) 0-phase_512 #f)))"
"(if or-part_529"
" or-part_529"
"(let-values(((at-phase_530)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_510) 0-phase_512 at-phase_530)"
" at-phase_530))))))"
"(hash-set! at-phase_528 name_511 mi_516)))"
" mi_516))))))"
"(define-values"
"(check-availablilty)"
"(lambda(mi_531 check-available-at-phase-level_532 unavailable-callback_533)"
"(let-values(((m_534)(module-instance-module mi_531)))"
"(if(if m_534"
"(if(<="
"(module-min-phase-level m_534)"
"(add1 check-available-at-phase-level_532)"
"(module-max-phase-level m_534))"
"(not"
"(hash-ref(module-instance-phase-level-to-state mi_531)(add1 check-available-at-phase-level_532) #f))"
" #f)"
" #f)"
"(unavailable-callback_533 mi_531)"
" mi_531))))"
"(define-values"
"(namespace->module-namespace80.1)"
"(lambda(check-available-at-phase-level72_535"
" check-available-at-phase-level75_536"
" complain-on-failure?71_537"
" complain-on-failure?74_538"
" unavailable-callback73_539"
" unavailable-callback76_540"
" ns77_541"
" name78_542"
" 0-phase79_543)"
"(let-values(((ns_544) ns77_541))"
"(let-values(((name_545) name78_542))"
"(let-values(((0-phase_546) 0-phase79_543))"
"(let-values(((complain-on-failure?_547)(if complain-on-failure?74_538 complain-on-failure?71_537 #f)))"
"(let-values(((check-available-at-phase-level_548)"
"(if check-available-at-phase-level75_536 check-available-at-phase-level72_535 #f)))"
"(let-values(((unavailable-callback_549)(if unavailable-callback76_540 unavailable-callback73_539 void)))"
"(let-values()"
"(let-values(((mi_550)"
"(let-values(((ns188_552) ns_544)"
"((name189_553) name_545)"
"((0-phase190_554) 0-phase_546)"
"((complain-on-failure?191_555) complain-on-failure?_547)"
"((check-available-at-phase-level192_556)"
" check-available-at-phase-level_548)"
"((unavailable-callback193_557) unavailable-callback_549))"
"(namespace->module-instance68.1"
" check-available-at-phase-level192_556"
" #t"
" complain-on-failure?191_555"
" #t"
" unavailable-callback193_557"
" #t"
" ns188_552"
" name189_553"
" 0-phase190_554))))"
"(if mi_550(module-instance-namespace mi_550) #f)))))))))))"
"(define-values"
"(namespace-record-module-instance-attached!)"
"(lambda(ns_590 mod-name_591 phase_592)"
"(let-values(((mi_593)"
"(let-values(((ns194_594) ns_590)((mod-name195_595) mod-name_591)((phase196_596) phase_592))"
"(namespace->module-instance68.1 #f #f #f #f #f #f ns194_594 mod-name195_595 phase196_596))))"
"(set-module-instance-attached?! mi_593 #t))))"
"(define-values"
"(namespace-module-instantiate!94.1)"
"(lambda(otherwise-available?85_597"
" otherwise-available?89_598"
" run-phase83_599"
" run-phase87_600"
" seen86_601"
" seen90_602"
" skip-run?84_603"
" skip-run?88_604"
" ns91_605"
" mpi92_606"
" instance-phase93_607)"
"(let-values(((ns_608) ns91_605))"
"(let-values(((mpi_609) mpi92_606))"
"(let-values(((instance-phase_610) instance-phase93_607))"
"(let-values(((run-phase_611)(if run-phase87_600 run-phase83_599(namespace-phase ns_608))))"
"(let-values(((skip-run?_612)(if skip-run?88_604 skip-run?84_603 #f)))"
"(let-values(((otherwise-available?_613)(if otherwise-available?89_598 otherwise-available?85_597 #t)))"
"(let-values(((seen_614)(if seen90_602 seen86_601 '#hasheq())))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/module-path-index? mpi_609)"
"(void)"
"                                      (let-values () (error \"not a module path index:\" mpi_609)))"
"(values))))"
"(let-values(((name_615)(1/module-path-index-resolve mpi_609 #t)))"
"(let-values(((m_616)(namespace->module ns_608 name_615)))"
"(let-values((()"
"(begin"
"(if m_616"
"(void)"
"(let-values()(raise-unknown-module-error 'instantiate name_615)))"
"(values))))"
"(let-values(((instantiate!_617)"
"(lambda(instance-phase_618 run-phase_619 ns_620)"
"(let-values(((mi_621)"
"(let-values(((or-part_622)"
"(let-values(((ns203_623) ns_620)"
"((name204_624) name_615)"
"((instance-phase205_625)"
" instance-phase_618))"
"(namespace->module-instance68.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns203_623"
" name204_624"
" instance-phase205_625))))"
"(if or-part_622"
" or-part_622"
"(namespace-create-module-instance!"
" ns_620"
" name_615"
" instance-phase_618"
" m_616"
" mpi_609)))))"
"(let-values(((...namespace/module.rkt:356:4_626)"
" run-module-instance!125.1)"
"((mi197_627) mi_621)"
"((ns198_628) ns_620)"
"((run-phase199_629) run-phase_619)"
"((skip-run?200_630) skip-run?_612)"
"((otherwise-available?201_631) otherwise-available?_613)"
"((seen202_632) seen_614))"
"(run-module-instance!123.1"
" otherwise-available?201_631"
" run-phase199_629"
" seen202_632"
" #t"
" skip-run?200_630"
" mi197_627"
" ns198_628))))))"
"(if(module-cross-phase-persistent? m_616)"
"(let-values()"
"(instantiate!_617"
" 0"
" 0"
"(let-values(((or-part_633)(namespace-root-namespace ns_608)))"
"(if or-part_633 or-part_633 ns_608))))"
"(let-values()"
"(instantiate!_617 instance-phase_610 run-phase_611 ns_608))))))))))))))))))"
"(define-values"
"(namespace-module-visit!102.1)"
"(lambda(visit-phase97_672 visit-phase98_673 ns99_674 mpi100_675 instance-phase101_676)"
"(let-values(((ns_677) ns99_674))"
"(let-values(((mpi_678) mpi100_675))"
"(let-values(((instance-phase_679) instance-phase101_676))"
"(let-values(((visit-phase_680)(if visit-phase98_673 visit-phase97_672(namespace-phase ns_677))))"
"(let-values()"
"(let-values(((ns206_682) ns_677)"
"((mpi207_683) mpi_678)"
"((instance-phase208_684) instance-phase_679)"
"((temp209_685)(add1 visit-phase_680)))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" temp209_685"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns206_682"
" mpi207_683"
" instance-phase208_684)))))))))"
"(define-values"
"(namespace-module-make-available!110.1)"
"(lambda(visit-phase105_706 visit-phase106_707 ns107_708 mpi108_709 instance-phase109_710)"
"(let-values(((ns_711) ns107_708))"
"(let-values(((mpi_712) mpi108_709))"
"(let-values(((instance-phase_713) instance-phase109_710))"
"(let-values(((visit-phase_714)(if visit-phase106_707 visit-phase105_706(namespace-phase ns_711))))"
"(let-values()"
"(let-values(((ns210_716) ns_711)"
"((mpi211_717) mpi_712)"
"((instance-phase212_718) instance-phase_713)"
"((temp213_719)(add1 visit-phase_714))"
"((temp214_720) #t))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" temp213_719"
" #t"
" #f"
" #f"
" temp214_720"
" #t"
" ns210_716"
" mpi211_717"
" instance-phase212_718)))))))))"
"(define-values"
"(lifted/11.1$5 lifted/12.1$5 lifted/13.1$5 lifted/14.1$5 lifted/15.1$5)"
"(make-struct-type"
" 'run-module-instance!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'run-module-instance!"
"(case-lambda((self_741 mi_742 ns_743)(apply missing-kw self_741 mi_742 ns_743 null))))))"
"(current-inspector)"
"(case-lambda((self_744 mi_745 ns_746)(apply missing-kw self_744 mi_745 ns_746 null)))))"
"(define-values"
"(run-module-instance!123.1)"
"(lambda(otherwise-available?115_747 run-phase113_748 seen116_749 seen120_750 skip-run?114_751 mi121_752 ns122_753)"
"(let-values(((mi_754) mi121_752))"
"(let-values(((ns_755) ns122_753))"
"(let-values(((run-phase_756) run-phase113_748))"
"(let-values(((skip-run?_757) skip-run?114_751))"
"(let-values(((otherwise-available?_758) otherwise-available?115_747))"
"(let-values(((seen_759)(if seen120_750 seen116_749 '#hasheq())))"
"(let-values()"
"(let-values()"
"(let-values(((m-ns_760)(module-instance-namespace mi_754)))"
"(let-values(((instance-phase_761)(namespace-0-phase m-ns_760)))"
"(let-values(((run-phase-level_762)(phase- run-phase_756 instance-phase_761)))"
"(if(if(let-values(((or-part_763) skip-run?_757))"
"(if or-part_763"
" or-part_763"
"(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state mi_754)"
" run-phase-level_762"
" #f))))"
"(let-values(((or-part_764)(not otherwise-available?_758)))"
"(if or-part_764 or-part_764(module-instance-made-available? mi_754)))"
" #f)"
"(void)"
"(let-values()"
"(let-values(((m_765)(module-instance-module mi_754)))"
"(let-values(((mpi_766)(namespace-mpi m-ns_760)))"
"(let-values(((phase-shift_767) instance-phase_761))"
"(let-values(((bulk-binding-registry_768)"
"(namespace-bulk-binding-registry m-ns_760)))"
"(begin"
"(if(hash-ref seen_759 mi_754 #f)"
"(let-values()"
"                                            (error 'require \"import cycle detected during module instantiation\"))"
"(void))"
"(if(module-instance-shifted-requires mi_754)"
"(void)"
"(let-values()"
"(set-module-instance-shifted-requires!"
" mi_754"
"(let-values(((lst_769)(module-requires m_765)))"
"(begin"
"(if(list? lst_769)(void)(let-values()(in-list lst_769)))"
"((letrec-values(((for-loop_770)"
"(lambda(lst_771)"
"(if(pair? lst_771)"
"(let-values(((phase+mpis_772)"
"(unsafe-car lst_771))"
"((rest_773)(unsafe-cdr lst_771)))"
"(let-values(((post-guard-var_774)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_775)"
"(let-values()"
"(let-values()"
"(cons"
"(car phase+mpis_772)"
"(let-values(((lst_776)"
"(cdr"
" phase+mpis_772)))"
"(begin"
"(if(list? lst_776)"
"(void)"
"(let-values()"
"(in-list"
" lst_776)))"
"((letrec-values(((for-loop_777)"
"(lambda(lst_778)"
"(if(pair?"
" lst_778)"
"(let-values(((req-mpi_779)"
"(unsafe-car"
" lst_778))"
"((rest_780)"
"(unsafe-cdr"
" lst_778)))"
"(let-values(((post-guard-var_781)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_782)"
"(let-values()"
"(let-values()"
"(module-path-index-unresolve"
"(module-path-index-shift"
" req-mpi_779"
"(module-self"
" m_765)"
" mpi_766))))))"
"(let-values(((result_783)"
"(if(post-guard-var_781)"
"(for-loop_777"
" rest_780)"
" null)))"
"(cons"
" elem_782"
" result_783))))))"
" null))))"
" for-loop_777)"
" lst_776))))))))"
"(let-values(((result_784)"
"(if(post-guard-var_774)"
"(for-loop_770 rest_773)"
" null)))"
"(cons elem_775 result_784))))))"
" null))))"
" for-loop_770)"
" lst_769))))))"
"(let-values(((lst_785)(module-instance-shifted-requires mi_754)))"
"(begin"
"(if(list? lst_785)(void)(let-values()(in-list lst_785)))"
"((letrec-values(((for-loop_786)"
"(lambda(lst_787)"
"(if(pair? lst_787)"
"(let-values(((phase+mpis_788)(unsafe-car lst_787))"
"((rest_789)(unsafe-cdr lst_787)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((req-phase_790)"
"(car"
" phase+mpis_788)))"
"(begin"
"(let-values(((lst_791)"
"(cdr"
" phase+mpis_788)))"
"(begin"
"(if(list?"
" lst_791)"
"(void)"
"(let-values()"
"(in-list"
" lst_791)))"
"((letrec-values(((for-loop_792)"
"(lambda(lst_793)"
"(if(pair?"
" lst_793)"
"(let-values(((req-mpi_794)"
"(unsafe-car"
" lst_793))"
"((rest_795)"
"(unsafe-cdr"
" lst_793)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ns215_797)"
" ns_755)"
"((req-mpi216_798)"
" req-mpi_794)"
"((temp217_799)"
"(phase+"
" instance-phase_761"
" req-phase_790))"
"((run-phase218_800)"
" run-phase_756)"
"((skip-run?219_801)"
" skip-run?_757)"
"((otherwise-available?220_802)"
" otherwise-available?_758)"
"((temp221_803)"
"(hash-set"
" seen_759"
" mi_754"
" #t)))"
"(namespace-module-instantiate!94.1"
" otherwise-available?220_802"
" #t"
" run-phase218_800"
" #t"
" temp221_803"
" #t"
" skip-run?219_801"
" #t"
" ns215_797"
" req-mpi216_798"
" temp217_799)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_792"
" rest_795)"
"(values))))"
"(values)))))"
" for-loop_792)"
" lst_791)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_786 rest_789)(values))))"
"(values)))))"
" for-loop_786)"
" lst_785)))"
"(void)"
"(if(label-phase? instance-phase_761)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((start_804)(module-max-phase-level m_765))"
"((end_805)(sub1(module-min-phase-level m_765)))"
"((inc_806) -1))"
"(begin"
"(if(if(real? start_804)(if(real? end_805)(real? inc_806) #f) #f)"
"(void)"
"(let-values()(in-range start_804 end_805 inc_806)))"
"((letrec-values(((for-loop_807)"
"(lambda(pos_808)"
"(if(> pos_808 end_805)"
"(let-values(((phase-level_809) pos_808))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_810)"
"(phase+"
" phase-level_809"
" phase-shift_767)))"
"(if(if(not"
" skip-run?_757)"
"(eqv?"
" phase_810"
" run-phase_756)"
" #f)"
"(let-values()"
"(if(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_754)"
" phase-level_809"
" #f))"
"(void)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_754)"
" phase-level_809"
" 'started)"
"(values))))"
"(let-values((()"
"(begin"
"(void"
"(namespace->definitions"
" m-ns_760"
" phase-level_809))"
"(values))))"
"(let-values(((p-ns_811)"
"(namespace->namespace-at-phase"
" m-ns_760"
" phase_810)))"
"(let-values(((insp_812)"
"(module-inspector"
" m_765)))"
"(let-values(((data-box_813)"
"(module-instance-data-box"
" mi_754)))"
"(let-values(((prep_814)"
"(module-prepare-instance"
" m_765)))"
"(let-values(((go_815)"
"(module-instantiate-phase"
" m_765)))"
"(begin"
"(prep_814"
" data-box_813"
" p-ns_811"
" phase-shift_767"
" mpi_766"
" bulk-binding-registry_768"
" insp_812)"
"(go_815"
" data-box_813"
" p-ns_811"
" phase-shift_767"
" phase-level_809"
" mpi_766"
" bulk-binding-registry_768"
" insp_812))))))))))))"
"(if(if otherwise-available?_758"
"(if(not"
"(negative?"
" run-phase_756))"
"(not"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_754)"
" phase-level_809"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(namespace-available-module-instances"
" ns_755)"
" phase_810"
"(lambda(l_816)"
"(cons"
" mi_754"
" l_816))"
" null)"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_754)"
" phase-level_809"
" 'available)))"
"(void)))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_807(+ pos_808 inc_806))"
"(values))))"
"(values)))))"
" for-loop_807)"
" start_804)))"
"(void))))"
"(if otherwise-available?_758"
"(let-values()(set-module-instance-made-available?! mi_754 #t))"
"(void))"
"(if skip-run?_757"
"(void)"
"(let-values()"
"(hash-set!"
"(module-instance-phase-level-to-state mi_754)"
" run-phase-level_762"
" 'started)))))))))))))))))))))))"
"(define-values"
"(unpack124.1)"
"(lambda(given-kws_817 given-args_818 mi121_819 ns122_820)"
"(let-values(((otherwise-available?115_821)(car given-args_818))"
"((given-kws_822)(cdr given-kws_817))"
"((given-args_823)(cdr given-args_818)))"
"(let-values(((run-phase113_824)(car given-args_823))"
"((given-kws_825)(cdr given-kws_822))"
"((given-args_826)(cdr given-args_823)))"
"(let-values(((seen120_827)(if(pair? given-kws_825)(eq? '#:seen(car given-kws_825)) #f)))"
"(let-values(((seen116_828)(if seen120_827(car given-args_826)(void)))"
"((given-kws_829)(if seen120_827(cdr given-kws_825) given-kws_825))"
"((given-args_830)(if seen120_827(cdr given-args_826) given-args_826)))"
"(let-values(((skip-run?114_831)(car given-args_830)))"
"(run-module-instance!123.1"
" otherwise-available?115_821"
" run-phase113_824"
" seen116_828"
" seen120_827"
" skip-run?114_831"
" mi121_819"
" ns122_820))))))))"
"(define-values"
"(run-module-instance!125.1)"
"(lifted/12.1$5"
"(lambda(given-kws_832 given-argc_833)"
"(if(= given-argc_833 4)"
"(subsets?"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" given-kws_832"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?))"
" #f))"
"(case-lambda((given-kws_834 given-args_835 mi_836 ns_837)(unpack124.1 given-kws_834 given-args_835 mi_836 ns_837)))"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)))"
"(define-values"
"(namespace-visit-available-modules!)"
"(let-values(((namespace-visit-available-modules!129_838)"
"(lambda(ns128_839 run-phase126_840 run-phase127_841)"
"(let-values(((ns_842) ns128_839))"
"(let-values(((run-phase_843)(if run-phase127_841 run-phase126_840(namespace-phase ns_842))))"
"(let-values()(namespace-run-available-modules! ns_842(add1 run-phase_843))))))))"
"(case-lambda"
"((ns_844)(namespace-visit-available-modules!129_838 ns_844 #f #f))"
"((ns_845 run-phase126_846)(namespace-visit-available-modules!129_838 ns_845 run-phase126_846 #t)))))"
"(define-values"
"(namespace-run-available-modules!)"
"(let-values(((namespace-run-available-modules!134_847)"
"(lambda(ns133_848 run-phase131_849 run-phase132_850)"
"(let-values(((ns_851) ns133_848))"
"(let-values(((run-phase_852)(if run-phase132_850 run-phase131_849(namespace-phase ns_851))))"
"(let-values()"
"(if(null?(hash-ref(namespace-available-module-instances ns_851) run-phase_852 null))"
"(void)"
"(let-values()"
"(registry-call-with-lock"
"(1/namespace-module-registry ns_851)"
"(lambda()"
"((letrec-values(((loop_853)"
"(lambda()"
"(let-values(((mis_854)"
"(hash-ref"
"(namespace-available-module-instances ns_851)"
" run-phase_852"
" null)))"
"(if(null? mis_854)"
"(void)"
"(let-values()"
"(begin"
"(hash-set!"
"(namespace-available-module-instances ns_851)"
" run-phase_852"
" null)"
"(let-values(((lst_855)(alt-reverse mis_854)))"
"(begin"
"(if(list? lst_855)"
"(void)"
"(let-values()(in-list lst_855)))"
"((letrec-values(((for-loop_856)"
"(lambda(lst_857)"
"(if(pair? lst_857)"
"(let-values(((mi_858)"
"(unsafe-car lst_857))"
"((rest_859)"
"(unsafe-cdr"
" lst_857)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mi222_861)"
" mi_858)"
"((ns223_862)"
" ns_851)"
"((run-phase224_863)"
" run-phase_852)"
"((temp225_864)"
" #f)"
"((temp226_865)"
" #f))"
"(run-module-instance!123.1"
" temp226_865"
" run-phase224_863"
" #f"
" #f"
" temp225_864"
" mi222_861"
" ns223_862)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_856 rest_859)"
"(values))))"
"(values)))))"
" for-loop_856)"
" lst_855)))"
"(void)"
"(loop_853))))))))"
" loop_853))))))))))))"
"(case-lambda"
"((ns_866)(namespace-run-available-modules!134_847 ns_866 #f #f))"
"((ns_867 run-phase131_868)(namespace-run-available-modules!134_847 ns_867 run-phase131_868 #t)))))"
"(define-values"
"(namespace-primitive-module-visit!)"
"(lambda(ns_869 name_870)"
"(let-values(((mi_871)(hash-ref(namespace-module-instances ns_869)(1/make-resolved-module-path name_870))))"
"(let-values(((mi227_873) mi_871)((ns228_874) ns_869)((temp229_875) 1)((temp230_876) #f)((temp231_877) #t))"
"(run-module-instance!123.1 temp231_877 temp229_875 #f #f temp230_876 mi227_873 ns228_874)))))"
"(define-values"
"(namespace-module-use->module+linklet-instances144.1)"
"(lambda(phase-shift138_884 shift-from136_885 shift-from139_886 shift-to137_887 shift-to140_888 ns142_889 mu143_890)"
"(let-values(((ns_891) ns142_889))"
"(let-values(((mu_892) mu143_890))"
"(let-values(((shift-from_893)(if shift-from139_886 shift-from136_885 #f)))"
"(let-values(((shift-to_894)(if shift-to140_888 shift-to137_887 #f)))"
"(let-values(((phase-shift_895) phase-shift138_884))"
"(let-values()"
"(let-values(((mod_896)(module-use-module mu_892)))"
"(let-values(((mi_897)"
"(let-values(((ns232_901) ns_891)"
"((temp233_902)"
"(1/module-path-index-resolve"
"(if shift-from_893"
"(module-path-index-shift mod_896 shift-from_893 shift-to_894)"
" mod_896)))"
"((phase-shift234_903) phase-shift_895)"
"((temp235_904) #t))"
"(namespace->module-instance68.1"
" #f"
" #f"
" temp235_904"
" #t"
" #f"
" #f"
" ns232_901"
" temp233_902"
" phase-shift234_903))))"
"(let-values(((m-ns_898)(module-instance-namespace mi_897)))"
"(let-values(((d_899)"
"(hash-ref"
"(namespace-phase-level-to-definitions m-ns_898)"
"(module-use-phase mu_892)"
" #f)))"
"(if d_899"
"(values mi_897(definitions-variables d_899))"
"                          (error \"namespace mismatch: phase level not found\" mu_892))))))))))))))"
"(define-values"
"(module-compute-access!)"
"(lambda(m_924)"
"(let-values(((access_925)"
"(let-values(((ht_926)(module-provides m_924)))"
"(begin"
"(if((lambda(ht_927)(hash? ht_927)) ht_926)(void)(let-values()(default-in-hash ht_926)))"
"((letrec-values(((for-loop_928)"
"(lambda(table_929 i_930)"
"(if i_930"
"(let-values(((phase_931 at-phase_932)"
"(hash-iterate-key+value ht_926 i_930)))"
"(let-values(((table_933)"
"(let-values(((table_934) table_929))"
"(let-values(((table_935)"
"(let-values()"
"(let-values(((key_936 val_937)"
"(let-values()"
"(values"
" phase_931"
"(let-values(((ht_938)"
" at-phase_932))"
"(begin"
"(if((lambda(ht_939)"
"(hash?"
" ht_939))"
" ht_938)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_938)))"
"((letrec-values(((for-loop_940)"
"(lambda(table_941"
" i_942)"
"(if i_942"
"(let-values(((sym_943"
" binding/p_944)"
"(hash-iterate-key+value"
" ht_938"
" i_942)))"
"(let-values(((table_945)"
"(let-values(((table_946)"
" table_941))"
"(let-values(((table_947)"
"(let-values()"
"(let-values(((key_948"
" val_949)"
"(let-values()"
"(values"
"(module-binding-sym"
"(provided-as-binding"
" binding/p_944))"
"(if(provided-as-protected?"
" binding/p_944)"
" 'protected"
" 'provided)))))"
"(hash-set"
" table_946"
" key_948"
" val_949)))))"
"(values"
" table_947)))))"
"(if(not"
" #f)"
"(for-loop_940"
" table_945"
"(hash-iterate-next"
" ht_938"
" i_942))"
" table_945)))"
" table_941))))"
" for-loop_940)"
" '#hash()"
"(hash-iterate-first"
" ht_938))))))))"
"(hash-set table_934 key_936 val_937)))))"
"(values table_935)))))"
"(if(not #f)"
"(for-loop_928 table_933(hash-iterate-next ht_926 i_930))"
" table_933)))"
" table_929))))"
" for-loop_928)"
" '#hasheqv()"
"(hash-iterate-first ht_926))))))"
"(begin(set-module-access! m_924 access_925) access_925))))"
"(void)"
"(void)"
"(define-values"
"(binding->module-instance)"
"(lambda(b_1 ns_2 phase_3 id_4)"
"(let-values(((at-phase_5)(phase- phase_3(module-binding-phase b_1))))"
"(let-values(((mi_6)"
"(let-values(((ns1_8) ns_2)"
"((temp2_9)(1/module-path-index-resolve(module-binding-module b_1)))"
"((at-phase3_10) at-phase_5)"
"((temp4_11)(module-binding-phase b_1))"
"((temp5_12)(lambda(mi_13) 'unavailable)))"
"(namespace->module-instance68.1 temp4_11 #t #f #f temp5_12 #t ns1_8 temp2_9 at-phase3_10))))"
"(begin"
"(if(eq? mi_6 'unavailable)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(format"
"(string-append"
"                 \"module mismatch;\\n\""
"                 \" attempted to use a module that is not available\\n\""
"                 \"  possible cause:\\n\""
"                 \"   using (dynamic-require .... #f)\\n\""
"                 \"   but need (dynamic-require .... 0)\\n\""
"                 \"  module: ~s\\n\""
"                 \"  phase: ~s\")"
"(module-binding-module b_1)"
"(phase+ at-phase_5(module-binding-phase b_1)))"
" id_4))"
"(void))"
"(if mi_6"
"(void)"
"(let-values()"
"(error"
" 'expand"
"(string-append"
"                \"namespace mismatch; cannot locate module instance\\n\""
"                \"  module: ~s\\n\""
"                \"  use phase: ~a\\n\""
"                \"  definition phase: ~a\\n\""
"                \"  for identifier: ~s\")"
"(module-binding-module b_1)"
" phase_3"
"(module-binding-phase b_1)"
" id_4)))"
" mi_6)))))"
"(void)"
"(void)"
"(define-values"
"(check-access)"
"(lambda(b_1 mi_2 id_3 in-s_4 what_5)"
"(let-values(((m_6)(module-instance-module mi_2)))"
"(if(if m_6(not(module-no-protected? m_6)) #f)"
"(let-values()"
"(let-values(((access_7)"
"(let-values(((or-part_9)(module-access m_6)))"
"(if or-part_9 or-part_9(module-compute-access! m_6)))))"
"(let-values(((a_8)"
"(hash-ref"
"(hash-ref access_7(module-binding-phase b_1) '#hasheq())"
"(module-binding-sym b_1)"
" 'unexported)))"
"(if(let-values(((or-part_10)(eq? a_8 'unexported)))(if or-part_10 or-part_10(eq? a_8 'protected)))"
"(let-values()"
"(if(let-values(((or-part_11)"
"(inspector-superior?"
"(let-values(((or-part_12)(syntax-inspector id_3)))"
"(if or-part_12 or-part_12(current-code-inspector)))"
"(namespace-inspector(module-instance-namespace mi_2)))))"
"(if or-part_11"
" or-part_11"
"(if(module-binding-extra-inspector b_1)"
"(inspector-superior?"
"(module-binding-extra-inspector b_1)"
"(namespace-inspector(module-instance-namespace mi_2)))"
" #f)))"
"(void)"
"(let-values()"
"(let-values(((complain-id_13)"
"(let-values(((c-id_14)"
"(let-values(((or-part_15) in-s_4))"
"(if or-part_15 or-part_15(module-binding-sym b_1)))))"
"(if(not"
"(eq?"
"(if(syntax?$1 c-id_14)(syntax-content c-id_14) c-id_14)"
"(syntax-content id_3)))"
" c-id_14"
" #f))))"
"(raise-syntax-error$1"
" #f"
"(format"
"                          \"access disallowed by code inspector to ~a ~a\\n  from module: ~a\""
" a_8"
" what_5"
"(1/module-path-index-resolve(namespace-mpi(module-instance-namespace mi_2))))"
" complain-id_13"
" id_3"
" null)))))"
"(void)))))"
"(void)))))"
"(define-values"
"(resolve+shift/extra-inspector)"
"(lambda(id_16 phase_17 ns_18)"
"((letrec-values(((loop_19)"
"(lambda(id_20 in-s_21)"
"(let-values(((b_22)"
"(let-values(((id1_24) id_20)((phase2_25) phase_17)((temp3_26) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f temp3_26 #t #f #f id1_24 phase2_25))))"
"(let-values(((c1_27)(binding-free=id b_22)))"
"(if c1_27"
"((lambda(next-id_28)"
"(let-values((()"
"(begin"
"(if(if(module-binding? b_22)"
"(not(top-level-module-path-index?(module-binding-module b_22)))"
" #f)"
"(let-values()"
"(let-values(((mi_30)"
"(binding->module-instance"
" b_22"
" ns_18"
" phase_17"
" id_20)))"
"                                                       (check-access b_22 mi_30 id_20 in-s_21 \"provided binding\")))"
"(void))"
"(values))))"
"(let-values(((next-b_29)"
"(loop_19"
" next-id_28"
"(let-values(((or-part_31) in-s_21))"
"(if or-part_31 or-part_31 id_20)))))"
"(if(if(module-binding? next-b_29)"
"(if(not(module-binding-extra-inspector next-b_29))"
"(syntax-inspector id_20)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((next-b4_33) next-b_29)((temp5_34)(syntax-inspector id_20)))"
"(module-binding-update48.1"
" temp5_34"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" next-b4_33)))"
"(let-values() next-b_29)))))"
" c1_27)"
"(let-values() b_22)))))))"
" loop_19)"
" id_16"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:set!-transformer 1/set!-transformer? set!-transformer-value)"
"(make-struct-type-property"
" 'set!-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)"
"(if(procedure? v_1)"
"(let-values(((or-part_5)(procedure-arity-includes? v_1 1)))"
"(if or-part_5 or-part_5(procedure-arity-includes? v_1 2)))"
" #f)))"
"(if or-part_4 or-part_4(exact-nonnegative-integer? v_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:set!-transformer"
"(string-append"
"                           \"(or/c (procedure-arity-includes? proc 1)\\n\""
"                           \"      (procedure-arity-includes? proc 2)\\n\""
"                           \"      exact-nonnegative-integer?)\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_6)"
"(let-values(((p_7)(ref_3 t_6 v_1)))"
"(if(if(procedure? p_7)(procedure-arity-includes? p_7 1) #f)"
" p_7"
"                     (lambda (s_8) (error \"bad syntax:\" s_8))))))"
"(let-values()(lambda(t_9) v_1)))))))))"
"(define-values"
"(1/make-set!-transformer)"
"(let-values()"
"(let-values(((struct:set!-transformer_10 set!-transformer1_11 set!-transformer?_12 set!-transformer-proc_13)"
"(let-values(((struct:_15 make-_16 ?_17 -ref_18 -set!_19)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'set!-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:set!-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'set!-transformer)))))"
"(values struct:_15 make-_16 ?_17(make-struct-field-accessor -ref_18 0 'proc)))))"
"(lambda(proc_35)"
"(begin"
"(if(if(procedure? proc_35)(procedure-arity-includes? proc_35 1) #f)"
"(void)"
"            (let-values () (raise-argument-error 'make-set!-transformer \"(procedure-arity-includes/c 1)\" proc_35)))"
"(set!-transformer1_11 proc_35))))))"
"(define-values"
"(1/set!-transformer-procedure)"
"(lambda(t_36)"
"(let-values(((v_37)((set!-transformer-value t_36) t_36)))"
"(if(procedure-arity-includes? v_37 1) v_37(lambda(s_38)(v_37 t_36 s_38))))))"
"(void)"
"(void)"
"(define-values(empty-env) '#hasheq())"
"(define-values(env-extend)(lambda(env_6 key_7 val_8)(hash-set env_6 key_7 val_8)))"
"(define-values(variable)(gensym 'variable))"
"(define-values"
"(variable?)"
"(lambda(t_9)(let-values(((or-part_10)(eq? t_9 variable)))(if or-part_10 or-part_10(local-variable? t_9)))))"
"(define-values"
"(struct:local-variable local-variable1.1 local-variable? local-variable-id)"
"(let-values(((struct:_11 make-_12 ?_13 -ref_14 -set!_15)"
"(let-values()"
"(let-values()"
"(make-struct-type 'local-variable #f 1 0 #f null(current-inspector) #f '(0) #f 'local-variable)))))"
"(values struct:_11 make-_12 ?_13(make-struct-field-accessor -ref_14 0 'id))))"
"(define-values"
"(substitute-variable6.1)"
"(lambda(no-stops?2_37 id4_38 t5_39)"
"(let-values(((id_40) id4_38))"
"(let-values(((t_41) t5_39))"
"(let-values(((no-stops?_42) no-stops?2_37))"
"(let-values()"
"(if(if no-stops?_42(local-variable? t_41) #f)"
"(let-values(((bind-id_43)(local-variable-id t_41)))"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 bind-id_43)(syntax-e$1 bind-id_43) id_40 id_40)"
" id_40))"
" id_40)))))))"
"(define-values(missing)(gensym 'missing))"
"(define-values"
"(transformer?)"
"(lambda(t_57)"
"(let-values(((or-part_58)(procedure? t_57)))"
"(if or-part_58"
" or-part_58"
"(let-values(((or-part_59)(1/set!-transformer? t_57)))"
"(if or-part_59 or-part_59(1/rename-transformer? t_57)))))))"
"(define-values"
"(transformer->procedure)"
"(lambda(t_60)"
"(if(1/set!-transformer? t_60)"
"(let-values()(1/set!-transformer-procedure t_60))"
"(if(1/rename-transformer? t_60)(let-values()(lambda(s_61) s_61))(let-values() t_60)))))"
"(define-values"
"(struct:core-form core-form9.1 core-form? core-form-expander core-form-name)"
"(let-values(((struct:_62 make-_63 ?_64 -ref_65 -set!_66)"
"(let-values()"
"(let-values()(make-struct-type 'core-form #f 2 0 #f null #f #f '(0 1) #f 'core-form)))))"
"(values"
" struct:_62"
" make-_63"
" ?_64"
"(make-struct-field-accessor -ref_65 0 'expander)"
"(make-struct-field-accessor -ref_65 1 'name))))"
"(define-values"
"(add-binding!17.1)"
"(lambda(in10_87 in12_88 just-for-nominal?11_89 just-for-nominal?13_90 id14_91 binding15_92 phase16_93)"
"(let-values(((id_94) id14_91))"
"(let-values(((binding_95) binding15_92))"
"(let-values(((phase_96) phase16_93))"
"(let-values(((in-s_97)(if in12_88 in10_87 #f)))"
"(let-values(((just-for-nominal?_98)(if just-for-nominal?13_90 just-for-nominal?11_89 #f)))"
"(let-values()"
"(begin"
"(check-id-taint id_94 in-s_97)"
"(let-values(((temp53_100)(syntax-scope-set id_94 phase_96))"
"((temp54_101)(syntax-e$1 id_94))"
"((binding55_102) binding_95)"
"((just-for-nominal?56_103) just-for-nominal?_98))"
"(add-binding-in-scopes!16.1"
" just-for-nominal?56_103"
" #t"
" temp53_100"
" temp54_101"
" binding55_102)))))))))))"
"(define-values"
"(add-bulk-binding!25.1)"
"(lambda(in20_130 in21_131 s22_132 binding23_133 phase24_134)"
"(let-values(((s_135) s22_132))"
"(let-values(((binding_136) binding23_133))"
"(let-values(((phase_137) phase24_134))"
"(let-values(((in-s_138)(if in21_131 in20_130 #f)))"
"(let-values()"
"(begin"
"(if(syntax-tainted?$1 s_135)"
"                  (let-values () (raise-syntax-error$1 #f \"cannot bind from tainted syntax\" in-s_138 s_135))"
"(void))"
"(add-bulk-binding-in-scopes!(syntax-scope-set s_135 phase_137) binding_136)))))))))"
"(define-values"
"(add-local-binding!35.1)"
"(lambda(frame-id28_159 frame-id30_160 in29_161 in31_162 id32_163 phase33_164 counter34_165)"
"(let-values(((id_166) id32_163))"
"(let-values(((phase_167) phase33_164))"
"(let-values(((counter_168) counter34_165))"
"(let-values(((frame-id_169)(if frame-id30_160 frame-id28_159 #f)))"
"(let-values(((in-s_170)(if in31_162 in29_161 #f)))"
"(let-values()"
"(let-values((()(begin(check-id-taint id_166 in-s_170)(values))))"
"(let-values((()(begin(set-box! counter_168(add1(unbox counter_168)))(values))))"
"(let-values(((key_171)"
"                                  (string->uninterned-symbol (format \"~a_~a\" (syntax-e$1 id_166) (unbox counter_168)))))"
"(begin"
"(let-values(((temp57_172)(syntax-scope-set id_166 phase_167))"
"((temp58_173)(syntax-e$1 id_166))"
"((temp59_174)"
"(let-values(((key60_176) key_171)((frame-id61_177) frame-id_169))"
"(make-local-binding7.1 frame-id61_177 #t #f #f key60_176))))"
"(add-binding-in-scopes!16.1 #f #f temp57_172 temp58_173 temp59_174))"
" key_171))))))))))))"
"(define-values"
"(check-id-taint)"
"(lambda(id_204 in-s_205)"
"(if(syntax-tainted?$1 id_204)"
"      (let-values () (raise-syntax-error$1 #f \"cannot bind tainted identifier\" in-s_205 id_204))"
"(void))))"
"(define-values"
"(binding-lookup48.1)"
"(lambda(in38_206"
" in40_207"
" out-of-context-as-variable?39_208"
" out-of-context-as-variable?41_209"
" b42_210"
" env43_211"
" lift-envs44_212"
" ns45_213"
" phase46_214"
" id47_215)"
"(let-values(((b_216) b42_210))"
"(let-values(((env_217) env43_211))"
"(let-values(((lift-envs_218) lift-envs44_212))"
"(let-values(((ns_219) ns45_213))"
"(let-values(((phase_220) phase46_214))"
"(let-values(((id_221) id47_215))"
"(let-values(((in-s_222)(if in40_207 in38_206 #f)))"
"(let-values(((out-of-context-as-variable?_223)"
"(if out-of-context-as-variable?41_209 out-of-context-as-variable?39_208 #f)))"
"(let-values()"
"(if(module-binding? b_216)"
"(let-values()"
"(let-values(((top-level?_224)(top-level-module-path-index?(module-binding-module b_216))))"
"(let-values(((mi_225)"
"(if(not top-level?_224)"
"(binding->module-instance b_216 ns_219 phase_220 id_221)"
" #f)))"
"(let-values(((m_226)(if mi_225(module-instance-module mi_225) #f)))"
"(let-values(((primitive?_227)(if m_226(module-primitive? m_226) #f)))"
"(let-values(((m-ns_228)"
"(if top-level?_224"
" ns_219"
"(if mi_225(module-instance-namespace mi_225) #f))))"
"(let-values((()(begin(check-taint id_221)(values))))"
"(let-values(((t_229)"
"(namespace-get-transformer"
" m-ns_228"
"(module-binding-phase b_216)"
"(module-binding-sym b_216)"
" variable)))"
"(let-values((()"
"(begin"
"(if mi_225"
"(let-values()"
"(check-access"
" b_216"
" mi_225"
" id_221"
" in-s_222"
"                                                             (if t_229 \"transformer\" \"variable\")))"
"(void))"
"(values))))"
"(let-values(((insp_230)"
"(if mi_225"
"(if(module-instance-module mi_225)"
"(module-inspector(module-instance-module mi_225))"
" #f)"
" #f)))"
"(values t_229 primitive?_227 insp_230)))))))))))"
"(if(local-binding? b_216)"
"(let-values()"
"(let-values(((t_231)(hash-ref env_217(local-binding-key b_216) missing)))"
"(if(eq? t_231 missing)"
"(let-values()"
"(values"
"(let-values(((or-part_232)"
"(let-values(((lst_233) lift-envs_218))"
"(begin"
"(if(list? lst_233)(void)(let-values()(in-list lst_233)))"
"((letrec-values(((for-loop_234)"
"(lambda(result_235 lst_236)"
"(if(pair? lst_236)"
"(let-values(((lift-env_237)"
"(unsafe-car lst_236))"
"((rest_238)"
"(unsafe-cdr lst_236)))"
"(let-values(((result_239)"
"(let-values()"
"(let-values(((result_241)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(unbox"
" lift-env_237)"
"(local-binding-key"
" b_216)"
" #f)))))"
"(values result_241)))))"
"(if(if(not"
"((lambda x_242 result_239)"
" lift-env_237))"
"(not #f)"
" #f)"
"(for-loop_234 result_239 rest_238)"
" result_239)))"
" result_235))))"
" for-loop_234)"
" #f"
" lst_233)))))"
"(if or-part_232"
" or-part_232"
"(if out-of-context-as-variable?_223"
" variable"
"                                         (error \"identifier used out of context:\" id_221))))"
" #f"
" #f))"
"(let-values()(begin(check-taint id_221)(values t_231 #f #f))))))"
"                          (let-values () (error \"internal error: unknown binding for lookup:\" b_216)))))))))))))))"
"(define-values"
"(check-taint)"
"(lambda(id_278)"
"(if(syntax-tainted?$1 id_278)"
"      (let-values () (raise-syntax-error$1 #f \"cannot use identifier tainted by macro transformation\" id_278))"
"(void))))"
"(void)"
"(void)"
"(define-values(cons~)(lambda(a_13 b_14)(if(null? b_14) a_13(cons a_13 b_14))))"
"(void)"
"(void)"
"(define-values"
"(free-id-set)"
"(lambda(phase_1 ids_2)"
"(let-values(((lst_3) ids_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(ht_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((id_7)(unsafe-car lst_6))((rest_8)(unsafe-cdr lst_6)))"
"(let-values(((ht_9)"
"(let-values(((ht_10) ht_5))"
"(let-values(((ht_11)"
"(let-values()"
"(let-values(((sym_12)"
"(identifier-binding-symbol$1"
" id_7"
" phase_1)))"
"(hash-set"
" ht_10"
" sym_12"
"(cons~ id_7(hash-ref ht_10 sym_12 null)))))))"
"(values ht_11)))))"
"(if(not #f)(for-loop_4 ht_9 rest_8) ht_9)))"
" ht_5))))"
" for-loop_4)"
" '#hasheq()"
" lst_3)))))"
"(define-values(empty-free-id-set)(free-id-set 0 null))"
"(define-values"
"(free-id-set-member?)"
"(lambda(fs_13 phase_14 given-id_15)"
"(if(zero?(hash-count fs_13))"
" #f"
"(let-values(((lst_16)(hash-ref fs_13(identifier-binding-symbol$1 given-id_15 phase_14) null)))"
"(begin"
"(void)"
"((letrec-values(((for-loop_17)"
"(lambda(result_18 lst_19)"
"(if(not(null? lst_19))"
"(let-values(((id_20)(if(pair? lst_19)(car lst_19) lst_19))"
"((rest_21)(if(pair? lst_19)(cdr lst_19) null)))"
"(let-values(((result_22)"
"(let-values()"
"(let-values(((result_24)"
"(let-values()"
"(let-values()"
"(free-identifier=?$1"
" id_20"
" given-id_15"
" phase_14"
" phase_14)))))"
"(values result_24)))))"
"(if(if(not((lambda x_25 result_22) id_20))(not #f) #f)"
"(for-loop_17 result_22 rest_21)"
" result_22)))"
" result_18))))"
" for-loop_17)"
" #f"
" lst_16))))))"
"(define-values"
"(free-id-set-empty-or-just-module*?)"
"(lambda(fs_26)(let-values(((c_27)(hash-count fs_26)))(<= c_27 1))))"
"(void)"
"(void)"
"(define-values"
"(struct:expand-context/outer"
" expand-context/outer1.1"
" expand-context/outer?"
" expand-context/outer-context"
" expand-context/outer-env"
" expand-context/outer-post-expansion-scope-action"
" expand-context/outer-scopes"
" expand-context/outer-def-ctx-scopes"
" expand-context/outer-binding-layer"
" expand-context/outer-reference-records"
" expand-context/outer-only-immediate?"
" expand-context/outer-need-eventually-defined"
" expand-context/outer-current-introduction-scopes"
" expand-context/outer-name)"
"(let-values(((struct:_6 make-_7 ?_8 -ref_9 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context/outer"
" struct:root-expand-context/outer"
" 11"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10)"
" #f"
" 'expand-context/outer)))))"
"(values"
" struct:_6"
" make-_7"
" ?_8"
"(make-struct-field-accessor -ref_9 0 'context)"
"(make-struct-field-accessor -ref_9 1 'env)"
"(make-struct-field-accessor -ref_9 2 'post-expansion-scope-action)"
"(make-struct-field-accessor -ref_9 3 'scopes)"
"(make-struct-field-accessor -ref_9 4 'def-ctx-scopes)"
"(make-struct-field-accessor -ref_9 5 'binding-layer)"
"(make-struct-field-accessor -ref_9 6 'reference-records)"
"(make-struct-field-accessor -ref_9 7 'only-immediate?)"
"(make-struct-field-accessor -ref_9 8 'need-eventually-defined)"
"(make-struct-field-accessor -ref_9 9 'current-introduction-scopes)"
"(make-struct-field-accessor -ref_9 10 'name))))"
"(define-values"
"(struct:expand-context/inner"
" expand-context/inner2.1"
" expand-context/inner?"
" expand-context/inner-to-parsed?"
" expand-context/inner-phase"
" expand-context/inner-namespace"
" expand-context/inner-user-env"
" expand-context/inner-just-once?"
" expand-context/inner-module-begin-k"
" expand-context/inner-allow-unbound?"
" expand-context/inner-in-local-expand?"
" expand-context/inner-stops"
" expand-context/inner-declared-submodule-names"
" expand-context/inner-lifts"
" expand-context/inner-lift-envs"
" expand-context/inner-module-lifts"
" expand-context/inner-require-lifts"
" expand-context/inner-to-module-lifts"
" expand-context/inner-requires+provides"
" expand-context/inner-observer"
" expand-context/inner-for-serializable?)"
"(let-values(((struct:_76 make-_77 ?_78 -ref_79 -set!_80)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context/inner"
" struct:root-expand-context/inner"
" 18"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)"
" #f"
" 'expand-context/inner)))))"
"(values"
" struct:_76"
" make-_77"
" ?_78"
"(make-struct-field-accessor -ref_79 0 'to-parsed?)"
"(make-struct-field-accessor -ref_79 1 'phase)"
"(make-struct-field-accessor -ref_79 2 'namespace)"
"(make-struct-field-accessor -ref_79 3 'user-env)"
"(make-struct-field-accessor -ref_79 4 'just-once?)"
"(make-struct-field-accessor -ref_79 5 'module-begin-k)"
"(make-struct-field-accessor -ref_79 6 'allow-unbound?)"
"(make-struct-field-accessor -ref_79 7 'in-local-expand?)"
"(make-struct-field-accessor -ref_79 8 'stops)"
"(make-struct-field-accessor -ref_79 9 'declared-submodule-names)"
"(make-struct-field-accessor -ref_79 10 'lifts)"
"(make-struct-field-accessor -ref_79 11 'lift-envs)"
"(make-struct-field-accessor -ref_79 12 'module-lifts)"
"(make-struct-field-accessor -ref_79 13 'require-lifts)"
"(make-struct-field-accessor -ref_79 14 'to-module-lifts)"
"(make-struct-field-accessor -ref_79 15 'requires+provides)"
"(make-struct-field-accessor -ref_79 16 'observer)"
"(make-struct-field-accessor -ref_79 17 'for-serializable?))))"
"(define-values"
"(expand-context/make)"
"(lambda(module-scopes_182"
" post-expansion-scope_183"
" top-level-bind-scope_184"
" all-scopes-stx_185"
" use-site-scopes_186"
" defined-syms_187"
" frame-id_188"
" counter_189"
" lift-key_190"
" to-parsed?_191"
" context_192"
" phase_193"
" namespace_194"
" env_195"
" user-env_196"
" post-expansion-scope-action_197"
" scopes_198"
" def-ctx-scopes_199"
" binding-layer_200"
" reference-records_201"
" only-immediate?_202"
" just-once?_203"
" module-begin-k_204"
" need-eventually-defined_205"
" allow-unbound?_206"
" in-local-expand?_207"
" stops_208"
" current-introduction-scopes_209"
" declared-submodule-names_210"
" lifts_211"
" lift-envs_212"
" module-lifts_213"
" require-lifts_214"
" to-module-lifts_215"
" requires+provides_216"
" name_217"
" observer_218"
" for-serializable?_219)"
"(expand-context/outer1.1"
"(expand-context/inner2.1"
" module-scopes_182"
" top-level-bind-scope_184"
" all-scopes-stx_185"
" defined-syms_187"
" counter_189"
" lift-key_190"
" to-parsed?_191"
" phase_193"
" namespace_194"
" user-env_196"
" just-once?_203"
" module-begin-k_204"
" allow-unbound?_206"
" in-local-expand?_207"
" stops_208"
" declared-submodule-names_210"
" lifts_211"
" lift-envs_212"
" module-lifts_213"
" require-lifts_214"
" to-module-lifts_215"
" requires+provides_216"
" observer_218"
" for-serializable?_219)"
" post-expansion-scope_183"
" use-site-scopes_186"
" frame-id_188"
" context_192"
" env_195"
" post-expansion-scope-action_197"
" scopes_198"
" def-ctx-scopes_199"
" binding-layer_200"
" reference-records_201"
" only-immediate?_202"
" need-eventually-defined_205"
" current-introduction-scopes_209"
" name_217)))"
"(define-values(expand-context-context)(lambda(v_220)(expand-context/outer-context v_220)))"
"(define-values(expand-context-env)(lambda(v_221)(expand-context/outer-env v_221)))"
"(define-values"
"(expand-context-post-expansion-scope-action)"
"(lambda(v_222)(expand-context/outer-post-expansion-scope-action v_222)))"
"(define-values(expand-context-scopes)(lambda(v_223)(expand-context/outer-scopes v_223)))"
"(define-values(expand-context-def-ctx-scopes)(lambda(v_224)(expand-context/outer-def-ctx-scopes v_224)))"
"(define-values(expand-context-binding-layer)(lambda(v_225)(expand-context/outer-binding-layer v_225)))"
"(define-values(expand-context-reference-records)(lambda(v_226)(expand-context/outer-reference-records v_226)))"
"(define-values(expand-context-only-immediate?)(lambda(v_227)(expand-context/outer-only-immediate? v_227)))"
"(define-values"
"(expand-context-need-eventually-defined)"
"(lambda(v_228)(expand-context/outer-need-eventually-defined v_228)))"
"(define-values"
"(expand-context-current-introduction-scopes)"
"(lambda(v_229)(expand-context/outer-current-introduction-scopes v_229)))"
"(define-values(expand-context-name)(lambda(v_230)(expand-context/outer-name v_230)))"
"(define-values"
"(expand-context-to-parsed?)"
"(lambda(v_231)(expand-context/inner-to-parsed?(root-expand-context/outer-inner v_231))))"
"(define-values"
"(expand-context-phase)"
"(lambda(v_232)(expand-context/inner-phase(root-expand-context/outer-inner v_232))))"
"(define-values"
"(expand-context-namespace)"
"(lambda(v_233)(expand-context/inner-namespace(root-expand-context/outer-inner v_233))))"
"(define-values"
"(expand-context-user-env)"
"(lambda(v_234)(expand-context/inner-user-env(root-expand-context/outer-inner v_234))))"
"(define-values"
"(expand-context-just-once?)"
"(lambda(v_235)(expand-context/inner-just-once?(root-expand-context/outer-inner v_235))))"
"(define-values"
"(expand-context-module-begin-k)"
"(lambda(v_236)(expand-context/inner-module-begin-k(root-expand-context/outer-inner v_236))))"
"(define-values"
"(expand-context-allow-unbound?)"
"(lambda(v_237)(expand-context/inner-allow-unbound?(root-expand-context/outer-inner v_237))))"
"(define-values"
"(expand-context-in-local-expand?)"
"(lambda(v_238)(expand-context/inner-in-local-expand?(root-expand-context/outer-inner v_238))))"
"(define-values"
"(expand-context-stops)"
"(lambda(v_239)(expand-context/inner-stops(root-expand-context/outer-inner v_239))))"
"(define-values"
"(expand-context-declared-submodule-names)"
"(lambda(v_240)(expand-context/inner-declared-submodule-names(root-expand-context/outer-inner v_240))))"
"(define-values"
"(expand-context-lifts)"
"(lambda(v_241)(expand-context/inner-lifts(root-expand-context/outer-inner v_241))))"
"(define-values"
"(expand-context-lift-envs)"
"(lambda(v_242)(expand-context/inner-lift-envs(root-expand-context/outer-inner v_242))))"
"(define-values"
"(expand-context-module-lifts)"
"(lambda(v_243)(expand-context/inner-module-lifts(root-expand-context/outer-inner v_243))))"
"(define-values"
"(expand-context-require-lifts)"
"(lambda(v_244)(expand-context/inner-require-lifts(root-expand-context/outer-inner v_244))))"
"(define-values"
"(expand-context-to-module-lifts)"
"(lambda(v_245)(expand-context/inner-to-module-lifts(root-expand-context/outer-inner v_245))))"
"(define-values"
"(expand-context-requires+provides)"
"(lambda(v_246)(expand-context/inner-requires+provides(root-expand-context/outer-inner v_246))))"
"(define-values"
"(expand-context-observer)"
"(lambda(v_247)(expand-context/inner-observer(root-expand-context/outer-inner v_247))))"
"(define-values"
"(expand-context-for-serializable?)"
"(lambda(v_248)(expand-context/inner-for-serializable?(root-expand-context/outer-inner v_248))))"
"(define-values"
"(make-expand-context8.1)"
"(lambda(for-serializable?4_249 for-serializable?6_250 to-parsed?3_251 to-parsed?5_252 ns7_253)"
"(let-values(((ns_254) ns7_253))"
"(let-values(((to-parsed?_255)(if to-parsed?5_252 to-parsed?3_251 #f)))"
"(let-values(((for-serializable?_256)(if for-serializable?6_250 for-serializable?4_249 #f)))"
"(let-values()"
"(let-values(((root-ctx_257)(namespace-get-root-expand-ctx ns_254)))"
"(expand-context/make"
"(root-expand-context-module-scopes root-ctx_257)"
"(root-expand-context-post-expansion-scope root-ctx_257)"
"(root-expand-context-top-level-bind-scope root-ctx_257)"
"(root-expand-context-all-scopes-stx root-ctx_257)"
"(root-expand-context-use-site-scopes root-ctx_257)"
"(root-expand-context-defined-syms root-ctx_257)"
"(root-expand-context-frame-id root-ctx_257)"
"(root-expand-context-counter root-ctx_257)"
"(root-expand-context-lift-key root-ctx_257)"
" to-parsed?_255"
" 'top-level"
"(namespace-phase ns_254)"
" ns_254"
" empty-env"
" '#hasheq()"
" push-scope"
" null"
" #f"
"(root-expand-context-frame-id root-ctx_257)"
" null"
" #f"
" #f"
" #f"
" #f"
" #t"
" #f"
" empty-free-id-set"
" null"
" '#hasheq()"
" #f"
" '()"
" #f"
" #f"
" #f"
" #f"
" #f"
"(current-expand-observe)"
" for-serializable?_256))))))))"
"(define-values"
"(copy-root-expand-context)"
"(lambda(ctx_278 root-ctx_279)"
"(let-values(((v_280) ctx_278))"
"(let-values(((the-struct_281) v_280))"
"(if(expand-context/outer? the-struct_281)"
"(let-values(((post-expansion-scope26_282)(root-expand-context-post-expansion-scope root-ctx_279))"
"((use-site-scopes27_283)(root-expand-context-use-site-scopes root-ctx_279))"
"((frame-id28_284)(root-expand-context-frame-id root-ctx_279))"
"((binding-layer29_285)(root-expand-context-frame-id root-ctx_279))"
"((inner30_286)"
"(let-values(((the-struct_287)(root-expand-context/outer-inner v_280)))"
"(if(expand-context/inner? the-struct_287)"
"(let-values(((module-scopes31_288)(root-expand-context-module-scopes root-ctx_279))"
"((top-level-bind-scope32_289)"
"(root-expand-context-top-level-bind-scope root-ctx_279))"
"((all-scopes-stx33_290)(root-expand-context-all-scopes-stx root-ctx_279))"
"((defined-syms34_291)(root-expand-context-defined-syms root-ctx_279))"
"((counter35_292)(root-expand-context-counter root-ctx_279))"
"((lift-key36_293)(root-expand-context-lift-key root-ctx_279)))"
"(expand-context/inner2.1"
" module-scopes31_288"
" top-level-bind-scope32_289"
" all-scopes-stx33_290"
" defined-syms34_291"
" counter35_292"
" lift-key36_293"
"(expand-context/inner-to-parsed? the-struct_287)"
"(expand-context/inner-phase the-struct_287)"
"(expand-context/inner-namespace the-struct_287)"
"(expand-context/inner-user-env the-struct_287)"
"(expand-context/inner-just-once? the-struct_287)"
"(expand-context/inner-module-begin-k the-struct_287)"
"(expand-context/inner-allow-unbound? the-struct_287)"
"(expand-context/inner-in-local-expand? the-struct_287)"
"(expand-context/inner-stops the-struct_287)"
"(expand-context/inner-declared-submodule-names the-struct_287)"
"(expand-context/inner-lifts the-struct_287)"
"(expand-context/inner-lift-envs the-struct_287)"
"(expand-context/inner-module-lifts the-struct_287)"
"(expand-context/inner-require-lifts the-struct_287)"
"(expand-context/inner-to-module-lifts the-struct_287)"
"(expand-context/inner-requires+provides the-struct_287)"
"(expand-context/inner-observer the-struct_287)"
"(expand-context/inner-for-serializable? the-struct_287)))"
"                            (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_287)))))"
"(expand-context/outer1.1"
" inner30_286"
" post-expansion-scope26_282"
" use-site-scopes27_283"
" frame-id28_284"
"(expand-context/outer-context the-struct_281)"
"(expand-context/outer-env the-struct_281)"
"(expand-context/outer-post-expansion-scope-action the-struct_281)"
"(expand-context/outer-scopes the-struct_281)"
"(expand-context/outer-def-ctx-scopes the-struct_281)"
" binding-layer29_285"
"(expand-context/outer-reference-records the-struct_281)"
"(expand-context/outer-only-immediate? the-struct_281)"
"(expand-context/outer-need-eventually-defined the-struct_281)"
"(expand-context/outer-current-introduction-scopes the-struct_281)"
"(expand-context/outer-name the-struct_281)))"
"          (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_281))))))"
"(define-values(current-expand-context)(make-parameter #f))"
"(define-values"
"(get-current-expand-context15.1)"
"(lambda(fail-ok?11_294 fail-ok?12_295 who13_296 who14_297)"
"(let-values(((who_298)(if who14_297 who13_296 'unexpected)))"
"(let-values(((fail-ok?_299)(if fail-ok?12_295 fail-ok?11_294 #f)))"
"(let-values()"
"(let-values(((or-part_300)(force(current-expand-context))))"
"(if or-part_300"
" or-part_300"
"              (if fail-ok?_299 #f (raise-arguments-error who_298 \"not currently expanding\")))))))))"
"(define-values"
"(current-expand-observe)"
"(make-parameter"
" #f"
"(lambda(v_318)"
"(begin"
"(if(let-values(((or-part_319)(not v_318)))"
"(if or-part_319 or-part_319(if(procedure? v_318)(procedure-arity-includes? v_318 2) #f)))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-expand-observe \"(or/c (procedure-arity-includes/c 2) #f)\" v_318)))"
" v_318))))"
"(define-values"
"(as-expression-context)"
"(lambda(ctx_320)"
"(if(if(eq? 'expression(expand-context-context ctx_320))(not(expand-context-name ctx_320)) #f)"
"(let-values() ctx_320)"
"(let-values()"
"(let-values(((v_321) ctx_320))"
"(let-values(((the-struct_322) v_321))"
"(if(expand-context/outer? the-struct_322)"
"(let-values(((context37_323) 'expression)"
"((name38_324) #f)"
"((post-expansion-scope39_325) #f)"
"((inner40_326)(root-expand-context/outer-inner v_321)))"
"(expand-context/outer1.1"
" inner40_326"
" post-expansion-scope39_325"
"(root-expand-context/outer-use-site-scopes the-struct_322)"
"(root-expand-context/outer-frame-id the-struct_322)"
" context37_323"
"(expand-context/outer-env the-struct_322)"
"(expand-context/outer-post-expansion-scope-action the-struct_322)"
"(expand-context/outer-scopes the-struct_322)"
"(expand-context/outer-def-ctx-scopes the-struct_322)"
"(expand-context/outer-binding-layer the-struct_322)"
"(expand-context/outer-reference-records the-struct_322)"
"(expand-context/outer-only-immediate? the-struct_322)"
"(expand-context/outer-need-eventually-defined the-struct_322)"
"(expand-context/outer-current-introduction-scopes the-struct_322)"
" name38_324))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_322))))))))"
"(define-values"
"(as-begin-expression-context)"
"(lambda(ctx_327)"
"(if(not(expand-context-name ctx_327))"
"(let-values() ctx_327)"
"(let-values()"
"(let-values(((v_328) ctx_327))"
"(let-values(((the-struct_329) v_328))"
"(if(expand-context/outer? the-struct_329)"
"(let-values(((name41_330) #f)((inner42_331)(root-expand-context/outer-inner v_328)))"
"(expand-context/outer1.1"
" inner42_331"
"(root-expand-context/outer-post-expansion-scope the-struct_329)"
"(root-expand-context/outer-use-site-scopes the-struct_329)"
"(root-expand-context/outer-frame-id the-struct_329)"
"(expand-context/outer-context the-struct_329)"
"(expand-context/outer-env the-struct_329)"
"(expand-context/outer-post-expansion-scope-action the-struct_329)"
"(expand-context/outer-scopes the-struct_329)"
"(expand-context/outer-def-ctx-scopes the-struct_329)"
"(expand-context/outer-binding-layer the-struct_329)"
"(expand-context/outer-reference-records the-struct_329)"
"(expand-context/outer-only-immediate? the-struct_329)"
"(expand-context/outer-need-eventually-defined the-struct_329)"
"(expand-context/outer-current-introduction-scopes the-struct_329)"
" name41_330))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_329))))))))"
"(define-values"
"(as-tail-context21.1)"
"(lambda(wrt18_336 ctx20_337)"
"(let-values(((ctx_338) ctx20_337))"
"(let-values(((wrt-ctx_339) wrt18_336))"
"(let-values()"
"(if(expand-context-name wrt-ctx_339)"
"(let-values()"
"(let-values(((v_340) ctx_338))"
"(let-values(((the-struct_341) v_340))"
"(if(expand-context/outer? the-struct_341)"
"(let-values(((name43_342)(expand-context-name wrt-ctx_339))"
"((inner44_343)(root-expand-context/outer-inner v_340)))"
"(expand-context/outer1.1"
" inner44_343"
"(root-expand-context/outer-post-expansion-scope the-struct_341)"
"(root-expand-context/outer-use-site-scopes the-struct_341)"
"(root-expand-context/outer-frame-id the-struct_341)"
"(expand-context/outer-context the-struct_341)"
"(expand-context/outer-env the-struct_341)"
"(expand-context/outer-post-expansion-scope-action the-struct_341)"
"(expand-context/outer-scopes the-struct_341)"
"(expand-context/outer-def-ctx-scopes the-struct_341)"
"(expand-context/outer-binding-layer the-struct_341)"
"(expand-context/outer-reference-records the-struct_341)"
"(expand-context/outer-only-immediate? the-struct_341)"
"(expand-context/outer-need-eventually-defined the-struct_341)"
"(expand-context/outer-current-introduction-scopes the-struct_341)"
" name43_342))"
"                    (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_341)))))"
"(let-values() ctx_338)))))))"
"(define-values"
"(as-named-context)"
"(lambda(ctx_354 ids_355)"
"(if(if(pair? ids_355)(null?(cdr ids_355)) #f)"
"(let-values()"
"(let-values(((v_356) ctx_354))"
"(let-values(((the-struct_357) v_356))"
"(if(expand-context/outer? the-struct_357)"
"(let-values(((name45_358)(car ids_355))((inner46_359)(root-expand-context/outer-inner v_356)))"
"(expand-context/outer1.1"
" inner46_359"
"(root-expand-context/outer-post-expansion-scope the-struct_357)"
"(root-expand-context/outer-use-site-scopes the-struct_357)"
"(root-expand-context/outer-frame-id the-struct_357)"
"(expand-context/outer-context the-struct_357)"
"(expand-context/outer-env the-struct_357)"
"(expand-context/outer-post-expansion-scope-action the-struct_357)"
"(expand-context/outer-scopes the-struct_357)"
"(expand-context/outer-def-ctx-scopes the-struct_357)"
"(expand-context/outer-binding-layer the-struct_357)"
"(expand-context/outer-reference-records the-struct_357)"
"(expand-context/outer-only-immediate? the-struct_357)"
"(expand-context/outer-need-eventually-defined the-struct_357)"
"(expand-context/outer-current-introduction-scopes the-struct_357)"
" name45_358))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_357)))))"
"(let-values() ctx_354))))"
"(define-values"
"(as-to-parsed-context)"
"(lambda(ctx_360)"
"(let-values(((v_361) ctx_360))"
"(let-values(((the-struct_362) v_361))"
"(if(expand-context/outer? the-struct_362)"
"(let-values(((inner47_363)"
"(let-values(((the-struct_364)(root-expand-context/outer-inner v_361)))"
"(if(expand-context/inner? the-struct_364)"
"(let-values(((to-parsed?48_365) #t))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_364)"
"(root-expand-context/inner-top-level-bind-scope the-struct_364)"
"(root-expand-context/inner-all-scopes-stx the-struct_364)"
"(root-expand-context/inner-defined-syms the-struct_364)"
"(root-expand-context/inner-counter the-struct_364)"
"(root-expand-context/inner-lift-key the-struct_364)"
" to-parsed?48_365"
"(expand-context/inner-phase the-struct_364)"
"(expand-context/inner-namespace the-struct_364)"
"(expand-context/inner-user-env the-struct_364)"
"(expand-context/inner-just-once? the-struct_364)"
"(expand-context/inner-module-begin-k the-struct_364)"
"(expand-context/inner-allow-unbound? the-struct_364)"
"(expand-context/inner-in-local-expand? the-struct_364)"
"(expand-context/inner-stops the-struct_364)"
"(expand-context/inner-declared-submodule-names the-struct_364)"
"(expand-context/inner-lifts the-struct_364)"
"(expand-context/inner-lift-envs the-struct_364)"
"(expand-context/inner-module-lifts the-struct_364)"
"(expand-context/inner-require-lifts the-struct_364)"
"(expand-context/inner-to-module-lifts the-struct_364)"
"(expand-context/inner-requires+provides the-struct_364)"
"(expand-context/inner-observer the-struct_364)"
"(expand-context/inner-for-serializable? the-struct_364)))"
"                            (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_364)))))"
"(expand-context/outer1.1"
" inner47_363"
"(root-expand-context/outer-post-expansion-scope the-struct_362)"
"(root-expand-context/outer-use-site-scopes the-struct_362)"
"(root-expand-context/outer-frame-id the-struct_362)"
"(expand-context/outer-context the-struct_362)"
"(expand-context/outer-env the-struct_362)"
"(expand-context/outer-post-expansion-scope-action the-struct_362)"
"(expand-context/outer-scopes the-struct_362)"
"(expand-context/outer-def-ctx-scopes the-struct_362)"
"(expand-context/outer-binding-layer the-struct_362)"
"(expand-context/outer-reference-records the-struct_362)"
"(expand-context/outer-only-immediate? the-struct_362)"
"(expand-context/outer-need-eventually-defined the-struct_362)"
"(expand-context/outer-current-introduction-scopes the-struct_362)"
"(expand-context/outer-name the-struct_362)))"
"          (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_362))))))"
"(void)"
"(void)"
"(define-values"
"(to-syntax-list.1)"
"(lambda(s_290)"
"(if(list? s_290)"
"(let-values() s_290)"
"(if(pair? s_290)"
"(let-values()(let-values(((r_291)(to-syntax-list.1(cdr s_290))))(if r_291(cons(car s_290) r_291) #f)))"
"(if(syntax?$1 s_290)(let-values()(to-syntax-list.1(syntax-e$1 s_290)))(let-values() #f))))))"
"(void)"
"(void)"
"(define-values(core-scope)(new-multi-scope))"
"(define-values(core-stx)(add-scope empty-syntax core-scope))"
"(define-values(core-module-name)(1/make-resolved-module-path '#%core))"
"(define-values(core-mpi)(1/module-path-index-join ''#%core #f))"
"(define-values(id-cache-0)(make-hasheq))"
"(define-values(id-cache-1)(make-hasheq))"
"(define-values"
"(core-id)"
"(lambda(sym_1 phase_2)"
"(if(eqv? phase_2 0)"
"(let-values()"
"(let-values(((or-part_3)(hash-ref id-cache-0 sym_1 #f)))"
"(if or-part_3"
" or-part_3"
"(let-values(((s_4)(datum->syntax$1 core-stx sym_1)))(begin(hash-set! id-cache-0 sym_1 s_4) s_4)))))"
"(if(eq? phase_2 1)"
"(let-values()"
"(let-values(((or-part_5)(hash-ref id-cache-1 sym_1 #f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((s_6)(datum->syntax$1(syntax-shift-phase-level$1 core-stx 1) sym_1)))"
"(begin(hash-set! id-cache-1 sym_1 s_6) s_6)))))"
"(let-values()(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_2) sym_1))))))"
"(define-values(core-forms) '#hasheq())"
"(define-values(core-primitives) '#hasheq())"
"(define-values"
"(add-core-form!)"
"(lambda(sym_7 proc_8)(begin(add-core-binding! sym_7)(set! core-forms(hash-set core-forms sym_7 proc_8)))))"
"(define-values"
"(add-core-primitive!)"
"(lambda(sym_9 val_10)"
"(begin(add-core-binding! sym_9)(set! core-primitives(hash-set core-primitives sym_9 val_10)))))"
"(define-values"
"(add-core-binding!)"
"(lambda(sym_11)"
"(let-values(((temp1_12)(datum->syntax$1 core-stx sym_11))"
"((temp2_13)"
"(let-values(((core-mpi4_15) core-mpi)((temp5_16) 0)((sym6_17) sym_11))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi4_15"
" temp5_16"
" sym6_17)))"
"((temp3_14) 0))"
"(add-binding!17.1 #f #f #f #f temp1_12 temp2_13 temp3_14))))"
"(define-values"
"(declare-core-module!)"
"(lambda(ns_18)"
"(let-values(((ns7_19) ns_18)"
"((temp8_20)"
"(let-values(((temp10_23) #t)"
"((temp11_24) #t)"
"((temp12_25) #t)"
"((core-mpi13_26) core-mpi)"
"((temp14_27)"
"(hasheqv"
" 0"
"(let-values(((lst_30)(list core-primitives core-forms))((lst_31) '(#f #t)))"
"(begin"
"(if(list? lst_30)(void)(let-values()(in-list lst_30)))"
"(if(list? lst_31)(void)(let-values()(in-list lst_31)))"
"((letrec-values(((for-loop_32)"
"(lambda(table_33 lst_34 lst_35)"
"(if(if(pair? lst_34)(pair? lst_35) #f)"
"(let-values(((syms_36)(unsafe-car lst_34))"
"((rest_37)(unsafe-cdr lst_34))"
"((syntax?_38)(unsafe-car lst_35))"
"((rest_39)(unsafe-cdr lst_35)))"
"(let-values(((table_40)"
"(let-values(((table_41) table_33))"
"(let-values(((ht_42) syms_36))"
"(begin"
"(if((lambda(ht_43)(hash? ht_43))"
" ht_42)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_42)))"
"((letrec-values(((for-loop_44)"
"(lambda(table_45"
" i_46)"
"(if i_46"
"(let-values(((sym_47)"
"(hash-iterate-key"
" ht_42"
" i_46)))"
"(let-values(((table_48)"
"(let-values(((table_49)"
" table_45))"
"(let-values(((table_50)"
"(let-values()"
"(let-values(((key_51"
" val_52)"
"(let-values()"
"(let-values(((b_53)"
"(let-values(((core-mpi17_54)"
" core-mpi)"
"((temp18_55)"
" 0)"
"((sym19_56)"
" sym_47))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi17_54"
" temp18_55"
" sym19_56))))"
"(values"
" sym_47"
"(if syntax?_38"
"(provided1.1"
" b_53"
" #f"
" #t)"
" b_53))))))"
"(hash-set"
" table_49"
" key_51"
" val_52)))))"
"(values"
" table_50)))))"
"(if(not #f)"
"(for-loop_44"
" table_48"
"(hash-iterate-next"
" ht_42"
" i_46))"
" table_48)))"
" table_45))))"
" for-loop_44)"
" table_41"
"(hash-iterate-first ht_42)))))))"
"(if(not #f)"
"(for-loop_32 table_40 rest_37 rest_39)"
" table_40)))"
" table_33))))"
" for-loop_32)"
" '#hasheq()"
" lst_30"
" lst_31)))))"
"((temp15_28)"
"(lambda(phase-level_57 ns_58)"
"(if(zero? phase-level_57)"
"(let-values(((ns_59)"
"(let-values(((ns20_60) ns_58)"
"((core-module-name21_61) core-module-name)"
"((temp22_62) 0))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns20_60"
" core-module-name21_61"
" temp22_62))))"
"(if ns_59(module-linklet-info2.1(namespace->instance ns_59 0) #f core-mpi) #f))"
" #f)))"
"((temp16_29)"
"(lambda(data-box_63"
" ns_64"
" phase_65"
" phase-level_66"
" self_67"
" bulk-binding-registry_68"
" insp_69)"
"(let-values(((tmp_70) phase-level_66))"
"(if(equal? tmp_70 0)"
"(let-values()"
"(begin"
"(let-values(((ht_71) core-primitives))"
"(begin"
"(if((lambda(ht_72)(hash? ht_72)) ht_71)"
"(void)"
"(let-values()(default-in-hash ht_71)))"
"((letrec-values(((for-loop_73)"
"(lambda(i_74)"
"(if i_74"
"(let-values(((sym_75 val_76)"
"(hash-iterate-key+value ht_71 i_74)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-consistent!"
" ns_64"
" 0"
" sym_75"
" val_76))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_73(hash-iterate-next ht_71 i_74))"
"(values))))"
"(values)))))"
" for-loop_73)"
"(hash-iterate-first ht_71))))"
"(void)"
"(let-values(((ht_77) core-forms))"
"(begin"
"(if((lambda(ht_78)(hash? ht_78)) ht_77)"
"(void)"
"(let-values()(default-in-hash ht_77)))"
"((letrec-values(((for-loop_79)"
"(lambda(i_80)"
"(if i_80"
"(let-values(((sym_81 proc_82)"
"(hash-iterate-key+value ht_77 i_80)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-transformer!"
" ns_64"
" 0"
" sym_81"
"(core-form9.1"
" proc_82"
" sym_81)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_79(hash-iterate-next ht_77 i_80))"
"(values))))"
"(values)))))"
" for-loop_79)"
"(hash-iterate-first ht_77))))"
"(void)))"
"(let-values()(void)))))))"
"(make-module37.1"
" temp10_23"
" #t"
" #f"
" #f"
" temp16_29"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp11_24"
" #t"
" temp15_28"
" #t"
" temp12_25"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp14_27"
" #f"
" #f"
" core-mpi13_26"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((core-module-name9_21) core-module-name))"
"(declare-module!56.1 #f #f ns7_19 temp8_20 core-module-name9_21))))"
"(define-values"
"(core-form-sym)"
"(lambda(s_83 phase_84)"
"(let-values(((ok?_85 id23_86 _24_87)"
"(let-values(((s_98) s_83))"
"(if(let-values(((s_99)(if(syntax?$1 s_98)(syntax-e$1 s_98) s_98)))"
"(if(pair? s_99)"
"(if(let-values(((s_100)(car s_99)))"
"(if(syntax?$1 s_100)(symbol?(syntax-e$1 s_100)) #f))"
"(let-values(((s_101)(cdr s_99))) #t)"
" #f)"
" #f))"
"(let-values()"
"(let-values(((id23_103 _24_104)"
"(let-values(((s_105)(if(syntax?$1 s_98)(syntax-e$1 s_98) s_98)))"
"(let-values(((id25_106)(let-values(((s_108)(car s_105))) s_108))"
"((_26_107)(let-values(((s_109)(cdr s_105))) s_109)))"
"(values id25_106 _26_107)))))"
"(values #t id23_103 _24_104)))"
"(values #f #f #f)))))"
"(if ok?_85"
"(let-values(((b_110)"
"(let-values(((temp27_111) id23_86)((phase28_112) phase_84))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f #f #f temp27_111 phase28_112))))"
"(if(module-binding? b_110)"
"(if(eq? core-module-name(1/module-path-index-resolve(module-binding-module b_110)))"
"(module-binding-sym b_110)"
" #f)"
" #f))"
" #f))))"
"(void)"
"(void)"
"(define-values"
"(taint-dispatch)"
"(lambda(s_1 proc_2 phase_3)"
"((letrec-values(((loop_4)"
"(lambda(s_5 mode_6)"
"(let-values(((tmp_7) mode_6))"
"(if(equal? tmp_7 'none)"
"(let-values() s_5)"
"(if(equal? tmp_7 'opaque)"
"(let-values()(proc_2 s_5))"
"(if(equal? tmp_7 'transparent)"
"(let-values()"
"(let-values(((c_8)"
"(let-values(((s_9)"
"(let-values(((or-part_13)(syntax->list$1 s_5)))"
"(if or-part_13 or-part_13(syntax-e$1 s_5))))"
"((f_10)(lambda(tail?_14 d_15) d_15))"
"((s->_11)"
"(lambda(s_16)"
"(loop_4 s_16(syntax-taint-mode-property s_16))))"
"((seen_12) #f))"
"(let-values(((s_17) s_9)"
"((f_18)"
"(lambda(tail?_20 v_21)"
"(if(syntax?$1 v_21)"
"(let-values()(s->_11 v_21))"
"(let-values()(f_10 tail?_20 v_21)))))"
"((seen_19) seen_12))"
"((letrec-values(((loop_22)"
"(lambda(tail?_23 s_24 prev-depth_25)"
"(let-values(((depth_26)(add1 prev-depth_25)))"
"(if(if seen_19(> depth_26 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_23"
" s_24"
"(lambda(tail?_27 s_28)"
"(f_18 tail?_27 s_28))"
" seen_19))"
"(if(null? s_24)"
"(let-values()(f_18 tail?_23 s_24))"
"(if(pair? s_24)"
"(let-values()"
"(f_18"
" tail?_23"
"(cons"
"(loop_22 #f(car s_24) depth_26)"
"(loop_22 #t(cdr s_24) depth_26))))"
"(if(let-values(((or-part_29)"
"(symbol? s_24)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)"
"(boolean? s_24)))"
"(if or-part_30"
" or-part_30"
"(number? s_24)))))"
"(let-values()(f_18 #f s_24))"
"(if(let-values(((or-part_31)"
"(vector? s_24)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)"
"(box? s_24)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)"
"(prefab-struct-key"
" s_24)))"
"(if or-part_33"
" or-part_33"
"(hash? s_24)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_23"
" s_24"
"(lambda(tail?_34 s_35)"
"(f_18 tail?_34 s_35))"
" seen_19))"
"(let-values()"
"(f_18 #f s_24)))))))))))"
" loop_22)"
" #f"
" s_17"
" 0)))))"
"(datum->syntax$1"
" #f"
" c_8"
" s_5"
"(if(syntax-any-macro-scopes? s_5)"
"(syntax-property-remove s_5 original-property-sym)"
" s_5))))"
"(if(equal? tmp_7 'transparent-binding)"
"(let-values()"
"(let-values(((c_36)(syntax-e$1 s_5)))"
"(if(pair? c_36)"
"(let-values()"
"(let-values(((cd_37)(cdr c_36)))"
"(if(let-values(((or-part_38)(pair? cd_37)))"
"(if or-part_38"
" or-part_38"
"(if(syntax?$1 cd_37)(pair?(syntax-e$1 cd_37)) #f)))"
"(let-values()"
"(let-values(((d_39)(if(syntax?$1 cd_37)(syntax-e$1 cd_37) cd_37)))"
"(datum->syntax$1"
" #f"
"(cons"
"(loop_4(car c_36)(syntax-taint-mode-property(car c_36)))"
"(cons"
"(loop_4(car d_39) 'transparent)"
"(let-values(((s_40)"
"(let-values(((or-part_44)"
"(syntax->list$1(cdr d_39))))"
"(if or-part_44 or-part_44(cdr d_39))))"
"((f_41)(lambda(tail?_45 d_46) d_46))"
"((s->_42)"
"(lambda(s_47)"
"(loop_4 s_47(syntax-taint-mode-property s_47))))"
"((seen_43) #f))"
"(let-values(((s_48) s_40)"
"((f_49)"
"(lambda(tail?_51 v_52)"
"(if(syntax?$1 v_52)"
"(let-values()(s->_42 v_52))"
"(let-values()(f_41 tail?_51 v_52)))))"
"((seen_50) seen_43))"
"((letrec-values(((loop_53)"
"(lambda(tail?_54 s_55 prev-depth_56)"
"(let-values(((depth_57)"
"(add1 prev-depth_56)))"
"(if(if seen_50(> depth_57 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_54"
" s_55"
"(lambda(tail?_58 s_59)"
"(f_49 tail?_58 s_59))"
" seen_50))"
"(if(null? s_55)"
"(let-values()(f_49 tail?_54 s_55))"
"(if(pair? s_55)"
"(let-values()"
"(f_49"
" tail?_54"
"(cons"
"(loop_53"
" #f"
"(car s_55)"
" depth_57)"
"(loop_53"
" #t"
"(cdr s_55)"
" depth_57))))"
"(if(let-values(((or-part_60)"
"(symbol? s_55)))"
"(if or-part_60"
" or-part_60"
"(let-values(((or-part_61)"
"(boolean?"
" s_55)))"
"(if or-part_61"
" or-part_61"
"(number? s_55)))))"
"(let-values()(f_49 #f s_55))"
"(if(let-values(((or-part_62)"
"(vector?"
" s_55)))"
"(if or-part_62"
" or-part_62"
"(let-values(((or-part_63)"
"(box?"
" s_55)))"
"(if or-part_63"
" or-part_63"
"(let-values(((or-part_64)"
"(prefab-struct-key"
" s_55)))"
"(if or-part_64"
" or-part_64"
"(hash?"
" s_55)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_54"
" s_55"
"(lambda(tail?_65 s_66)"
"(f_49 tail?_65 s_66))"
" seen_50))"
"(let-values()"
"(f_49 #f s_55)))))))))))"
" loop_53)"
" #f"
" s_48"
" 0)))))"
" s_5"
"(if(syntax-any-macro-scopes? s_5)"
"(syntax-property-remove s_5 original-property-sym)"
" s_5))))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()"
"(let-values(((c_67)(syntax-e$1 s_5)))"
"(let-values(((tmp_68)(core-form-sym c_67 phase_3)))"
"(if(if(equal? tmp_68 'begin)"
" #t"
"(if(equal? tmp_68 'begin-for-syntax) #t(equal? tmp_68 '#%module-begin)))"
"(let-values()(loop_4 s_5 'transparent))"
"(if(if(equal? tmp_68 'define-values) #t(equal? tmp_68 'define-syntaxes))"
"(let-values()(loop_4 s_5 'transparent-binding))"
"(let-values()(loop_4 s_5 'opaque)))))))))))))))"
" loop_4)"
" s_1"
"(syntax-taint-mode-property s_1))))"
"(define-values"
"(syntax-taint-mode-property)"
"(lambda(s_69)"
"(let-values(((or-part_70)(syntax-property$1 s_69 'taint-mode)))"
"(if or-part_70 or-part_70(syntax-property$1 s_69 'certify-mode)))))"
"(define-values"
"(syntax-remove-taint-dispatch-properties)"
"(lambda(s_71)(syntax-property-remove(syntax-property-remove s_71 'taint-mode) 'certify-mode)))"
"(void)"
"(void)"
"(define-values(current-module-code-inspector)(make-parameter #f))"
"(void)"
"(void)"
"(define-values"
"(syntax-debug-info$1)"
"(lambda(s_1 phase_2 all-bindings?_3)"
"(let-values(((hts_4)"
"(let-values(((lst_6)(fallback->list(syntax-shifted-multi-scopes s_1))))"
"(begin"
"(if(list? lst_6)(void)(let-values()(in-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(lst_8)"
"(if(pair? lst_8)"
"(let-values(((smss_9)(unsafe-car lst_8))((rest_10)(unsafe-cdr lst_8)))"
"(let-values(((post-guard-var_11)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_12)"
"(let-values()"
"(let-values()"
"(let-values(((init-ht_13)"
"(if(identifier? s_1)"
"(hasheq 'name(syntax-e$1 s_1))"
" '#hasheq())))"
"(let-values(((s-scs_14)"
"(scope-set-at-fallback"
" s_1"
" smss_9"
" phase_2)))"
"(let-values(((context_15)"
"(scope-set->context s-scs_14)))"
"(let-values(((context-ht_16)"
"(hash-set"
" init-ht_13"
" 'context"
" context_15)))"
"(let-values(((sym_17)(syntax-e$1 s_1)))"
"(let-values(((bindings_18)"
"(if(identifier? s_1)"
"(let-values()"
"(let-values(((bindings_19"
" covered-scopess_20)"
"(let-values(((ht_21)"
" s-scs_14))"
"(begin"
"(if((lambda(ht_22)"
"(if(hash?"
" ht_22)"
"(immutable?"
" ht_22)"
" #f))"
" ht_21)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_21)))"
"((letrec-values(((for-loop_23)"
"(lambda(bindings_24"
" covered-scope-sets_25"
" i_26)"
"(if i_26"
"(let-values(((sc_27)"
"(unsafe-immutable-hash-iterate-key"
" ht_21"
" i_26)))"
"(let-values(((bindings_28"
" covered-scope-sets_29)"
"(let-values(((ht_30"
" bulk-bindings_31)"
"(let-values(((table_34)"
"(scope-binding-table"
" sc_27)))"
"(if(hash?"
" table_34)"
"(values"
"(hash-ref"
" table_34"
" sym_17"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_34)"
" sym_17"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_34)))))"
"((s_32)"
" s_1)"
"((extra-shifts_33)"
" null))"
"(begin"
" #t"
"((letrec-values(((for-loop_35)"
"(lambda(bindings_36"
" covered-scope-sets_37"
" i_38)"
"(if(not"
"(null?"
" i_38))"
"(let-values(((scs_39)"
"(if(pair?"
" i_38)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_38)))"
"(let-values()"
"(hash-iterate-key"
" ht_30"
" i_38))))"
"((b_40)"
"(if(pair?"
" i_38)"
"(let-values()"
"(let-values(((bulk_41)"
"(bulk-binding-at-bulk"
"(car"
" i_38))))"
"(let-values(((b-info_42)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_41"
" s_32"
" extra-shifts_33)"
" sym_17"
" #f)))"
"(if b-info_42"
"((bulk-binding-create"
" bulk_41)"
" bulk_41"
" b-info_42"
" sym_17)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_30"
" i_38)))))"
"(let-values(((bindings_43"
" covered-scope-sets_44)"
"(let-values(((bindings_45)"
" bindings_36)"
"((covered-scope-sets_46)"
" covered-scope-sets_37))"
"(if(if scs_39"
"(if b_40"
"(if(let-values(((or-part_47)"
" all-bindings?_3))"
"(if or-part_47"
" or-part_47"
"(subset?"
" scs_39"
" s-scs_14)))"
"(not"
"(set-member?"
" covered-scope-sets_46"
" scs_39))"
" #f)"
" #f)"
" #f)"
"(let-values(((bindings_48)"
" bindings_45)"
"((covered-scope-sets_49)"
" covered-scope-sets_46))"
"(let-values(((bindings_50"
" covered-scope-sets_51)"
"(let-values()"
"(values"
"(cons"
"(hash"
" 'name"
"(syntax-e$1"
" s_1)"
" 'context"
"(scope-set->context"
" scs_39)"
" 'match?"
"(subset?"
" scs_39"
" s-scs_14)"
"(if(local-binding?"
" b_40)"
" 'local"
" 'module)"
"(if(local-binding?"
" b_40)"
"(local-binding-key"
" b_40)"
"(vector"
"(module-binding-sym"
" b_40)"
"(module-binding-module"
" b_40)"
"(module-binding-phase"
" b_40))))"
" bindings_48)"
"(set-add"
" covered-scope-sets_49"
" scs_39)))))"
"(values"
" bindings_50"
" covered-scope-sets_51)))"
"(values"
" bindings_45"
" covered-scope-sets_46)))))"
"(if(not"
" #f)"
"(for-loop_35"
" bindings_43"
" covered-scope-sets_44"
"(if(pair?"
" i_38)"
"(let-values()"
"(cdr"
" i_38))"
"(let-values()"
"(let-values(((or-part_52)"
"(hash-iterate-next"
" ht_30"
" i_38)))"
"(if or-part_52"
" or-part_52"
" bulk-bindings_31)))))"
"(values"
" bindings_43"
" covered-scope-sets_44))))"
"(values"
" bindings_36"
" covered-scope-sets_37)))))"
" for-loop_35)"
" bindings_24"
" covered-scope-sets_25"
"(let-values(((or-part_53)"
"(hash-iterate-first"
" ht_30)))"
"(if or-part_53"
" or-part_53"
" bulk-bindings_31)))))))"
"(if(not"
" #f)"
"(for-loop_23"
" bindings_28"
" covered-scope-sets_29"
"(unsafe-immutable-hash-iterate-next"
" ht_21"
" i_26))"
"(values"
" bindings_28"
" covered-scope-sets_29))))"
"(values"
" bindings_24"
" covered-scope-sets_25)))))"
" for-loop_23)"
" null"
"(set)"
"(unsafe-immutable-hash-iterate-first"
" ht_21))))))"
" bindings_19))"
"(let-values() null))))"
"(if(null? bindings_18)"
" context-ht_16"
"(hash-set"
" context-ht_16"
" 'bindings"
" bindings_18))))))))))))"
"(let-values(((result_54)"
"(if(post-guard-var_11)(for-loop_7 rest_10) null)))"
"(cons elem_12 result_54))))))"
" null))))"
" for-loop_7)"
" lst_6)))))"
"(let-values(((ht_5)(car hts_4)))(if(null?(cdr hts_4)) ht_5(hash-set ht_5 'fallbacks(cdr hts_4)))))))"
"(define-values"
"(scope-set->context)"
"(lambda(scs_55)"
"(let-values(((temp1_57)"
"(let-values(((ht_60) scs_55))"
"(begin"
"(if((lambda(ht_61)(if(hash? ht_61)(immutable? ht_61) #f)) ht_60)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_60)))"
"((letrec-values(((for-loop_62)"
"(lambda(i_63)"
"(if i_63"
"(let-values(((sc_64)(unsafe-immutable-hash-iterate-key ht_60 i_63)))"
"(let-values(((post-guard-var_65)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_66)"
"(let-values()"
"(let-values()"
"(if(representative-scope? sc_64)"
"(vector"
"(scope-id sc_64)"
"(scope-kind sc_64)"
"(multi-scope-name"
"(representative-scope-owner sc_64)))"
"(vector(scope-id sc_64)(scope-kind sc_64)))))))"
"(let-values(((result_67)"
"(if(post-guard-var_65)"
"(for-loop_62"
"(unsafe-immutable-hash-iterate-next ht_60 i_63))"
" null)))"
"(cons elem_66 result_67))))))"
" null))))"
" for-loop_62)"
"(unsafe-immutable-hash-iterate-first ht_60)))))"
"((<2_58) <)"
"((temp3_59)(lambda(v_68)(vector-ref v_68 0))))"
"(sort7.1 #f #f temp3_59 #t temp1_57 <2_58))))"
"(void)"
"(void)"
"(define-values"
"(raise-ambiguous-error)"
"(lambda(id_1 ctx_2)"
"    (raise-syntax-error$1 #f \"identifier's binding is ambiguous\" id_1 #f null (syntax-debug-info-string id_1 ctx_2))))"
"(define-values"
"(syntax-debug-info-string)"
"(lambda(s_3 ctx_4)"
"(let-values(((info_5)(syntax-debug-info$1 s_3(expand-context-phase ctx_4) #t)))"
"(if(not"
"(let-values(((or-part_6)(pair?(hash-ref info_5 'bindings null))))"
"(if or-part_6"
" or-part_6"
"(let-values(((lst_7)(hash-ref info_5 'fallbacks null)))"
"(begin"
"(if(list? lst_7)(void)(let-values()(in-list lst_7)))"
"((letrec-values(((for-loop_8)"
"(lambda(result_9 lst_10)"
"(if(pair? lst_10)"
"(let-values(((fb-info_11)(unsafe-car lst_10))"
"((rest_12)(unsafe-cdr lst_10)))"
"(let-values(((result_13)"
"(let-values()"
"(let-values(((result_15)"
"(let-values()"
"(let-values()"
"(pair?"
"(hash-ref fb-info_11 'bindings null))))))"
"(values result_15)))))"
"(if(if(not((lambda x_16 result_13) fb-info_11))(not #f) #f)"
"(for-loop_8 result_13 rest_12)"
" result_13)))"
" result_9))))"
" for-loop_8)"
" #f"
" lst_7))))))"
"        (let-values () \"\")"
"(let-values()"
"(let-values(((relevant-scope-sets_17)"
"((letrec-values(((loop_19)"
"(lambda(info_20 layer_21)"
"(apply"
" append"
"(cons"
"(hash-ref info_20 'context)"
"(let-values(((lst_22)(hash-ref info_20 'bindings null)))"
"(begin"
"(if(list? lst_22)(void)(let-values()(in-list lst_22)))"
"((letrec-values(((for-loop_23)"
"(lambda(lst_24)"
"(if(pair? lst_24)"
"(let-values(((b_25)(unsafe-car lst_24))"
"((rest_26)(unsafe-cdr lst_24)))"
"(let-values(((post-guard-var_27)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_28)"
"(let-values()"
"(let-values()"
"(hash-ref"
" b_25"
" 'context)))))"
"(let-values(((result_29)"
"(if(post-guard-var_27)"
"(for-loop_23 rest_26)"
" null)))"
"(cons elem_28 result_29))))))"
" null))))"
" for-loop_23)"
" lst_22))))"
"(let-values(((fallbacks_30)(hash-ref info_20 'fallbacks null)))"
"(let-values(((lst_31) fallbacks_30)((start_32)(add1 layer_21)))"
"(begin"
"(if(list? lst_31)(void)(let-values()(in-list lst_31)))"
"(if(exact-nonnegative-integer? start_32)"
"(void)"
"(let-values()(in-naturals start_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(lst_34 pos_35)"
"(if(if(pair? lst_34) #t #f)"
"(let-values(((fallback_36)"
"(unsafe-car lst_34))"
"((rest_37)(unsafe-cdr lst_34))"
"((layer_38) pos_35))"
"(let-values(((post-guard-var_39)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_40)"
"(let-values()"
"(let-values()"
"(loop_19"
" fallback_36"
" layer_38)))))"
"(let-values(((result_41)"
"(if(post-guard-var_39)"
"(for-loop_33"
" rest_37"
"(+ pos_35 1))"
" null)))"
"(cons elem_40 result_41))))))"
" null))))"
" for-loop_33)"
" lst_31"
" start_32))))))))"
" loop_19)"
" info_5"
" 0)))"
"(let-values(((common-scopes_18)"
"(if(null? relevant-scope-sets_17)"
"(set)"
"(let-values(((lst_42) relevant-scope-sets_17))"
"(begin"
"(if(list? lst_42)(void)(let-values()(in-list lst_42)))"
"((letrec-values(((for-loop_43)"
"(lambda(s_44 lst_45)"
"(if(pair? lst_45)"
"(let-values(((l_46)(unsafe-car lst_45))"
"((rest_47)(unsafe-cdr lst_45)))"
"(let-values(((s_48)"
"(let-values(((s_49) s_44))"
"(let-values(((s_50)"
"(let-values()"
"(set-intersect"
" s_49"
"(list->set l_46)))))"
"(values s_50)))))"
"(if(not #f)(for-loop_43 s_48 rest_47) s_48)))"
" s_44))))"
" for-loop_43)"
"(list->set(car relevant-scope-sets_17))"
" lst_42))))))"
"(string-append"
"((letrec-values(((loop_51)"
"(lambda(info_52 layer_53)"
"(string-append"
"                                    \"\\n  context\""
"(layer->string layer_53)"
"                                    \"...:\""
"(describe-context(hash-ref info_52 'context) common-scopes_18)"
"(apply"
" string-append"
"(let-values(((lst_54)"
"(let-values(((temp1_55)(hash-ref info_52 'bindings null))"
"((temp2_56)"
"(lambda(a_57 b_58)"
"(if(hash-ref a_57 'match? #f)"
"(not(hash-ref b_58 'match? #f))"
" #f))))"
"(sort7.1 #f #f #f #f temp1_55 temp2_56))))"
"(begin"
"(if(list? lst_54)(void)(let-values()(in-list lst_54)))"
"((letrec-values(((for-loop_59)"
"(lambda(lst_60)"
"(if(pair? lst_60)"
"(let-values(((b_61)(unsafe-car lst_60))"
"((rest_62)(unsafe-cdr lst_60)))"
"(let-values(((post-guard-var_63)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_64)"
"(let-values()"
"(let-values()"
"(string-append"
"                                                                                        \"\\n  \""
"(if(hash-ref b_61 'match? #f)"
"                                                                                          \"matching\""
"                                                                                          \"other\")"
"                                                                                        \" binding\""
"(layer->string layer_53)"
"                                                                                        \"...:\""
"                                                                                        \"\\n   \""
"(if(hash-ref b_61 'local #f)"
"                                                                                          \"local\""
"(format"
"                                                                                           \"~a\""
"(hash-ref b_61 'module #f)))"
"(describe-context"
"(hash-ref b_61 'context)"
" common-scopes_18))))))"
"(let-values(((result_65)"
"(if(post-guard-var_63)"
"(for-loop_59 rest_62)"
" null)))"
"(cons elem_64 result_65))))))"
" null))))"
" for-loop_59)"
" lst_54))))"
"(let-values(((fallbacks_66)(hash-ref info_52 'fallbacks null)))"
"(apply"
" string-append"
"(let-values(((lst_67) fallbacks_66)((start_68)(add1 layer_53)))"
"(begin"
"(if(list? lst_67)(void)(let-values()(in-list lst_67)))"
"(if(exact-nonnegative-integer? start_68)"
"(void)"
"(let-values()(in-naturals start_68)))"
"((letrec-values(((for-loop_69)"
"(lambda(lst_70 pos_71)"
"(if(if(pair? lst_70) #t #f)"
"(let-values(((fallback_72)(unsafe-car lst_70))"
"((rest_73)(unsafe-cdr lst_70))"
"((layer_74) pos_71))"
"(let-values(((post-guard-var_75)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_76)"
"(let-values()"
"(let-values()"
"(loop_51"
" fallback_72"
" layer_74)))))"
"(let-values(((result_77)"
"(if(post-guard-var_75)"
"(for-loop_69"
" rest_73"
"(+ pos_71 1))"
" null)))"
"(cons elem_76 result_77))))))"
" null))))"
" for-loop_69)"
" lst_67"
" start_68)))))))))"
" loop_51)"
" info_5"
" 0)"
"(if(set-empty? common-scopes_18)"
"                 \"\""
"(string-append"
"                  \"\\n  common scopes...:\""
"(describe-context"
"(let-values(((lst_78)(hash-ref info_5 'context)))"
"(begin"
"(if(list? lst_78)(void)(let-values()(in-list lst_78)))"
"((letrec-values(((for-loop_79)"
"(lambda(lst_80)"
"(if(pair? lst_80)"
"(let-values(((s_81)(unsafe-car lst_80))((rest_82)(unsafe-cdr lst_80)))"
"(let-values(((post-guard-var_83)(lambda() #t)))"
"(let-values()"
"(if(set-member? common-scopes_18 s_81)"
"(let-values()"
"(let-values(((elem_84)(let-values()(let-values() s_81))))"
"(let-values(((result_85)"
"(if(post-guard-var_83)"
"(for-loop_79 rest_82)"
" null)))"
"(cons elem_84 result_85))))"
"(if(post-guard-var_83)(for-loop_79 rest_82) null)))))"
" null))))"
" for-loop_79)"
" lst_78)))"
"(set))))))))))))"
"(define-values"
"(describe-context)"
"(lambda(scopes_86 common-scopes_87)"
"(let-values(((strs_88)"
"((letrec-values(((loop_89)"
"(lambda(strs_90 scopes_91)"
"(if(null? scopes_91)"
"(let-values()(alt-reverse strs_90))"
"(let-values()"
"                                          (let-values (((str_92) (format \" ~a\" (car scopes_91))))"
"(if(if(pair? strs_90)"
"(<(+(string-length str_92)(string-length(car strs_90))) 72)"
" #f)"
"(loop_89"
"(cons(string-append(car strs_90) str_92)(cdr strs_90))"
"(cdr scopes_91))"
"(loop_89(cons str_92 strs_90)(cdr scopes_91)))))))))"
" loop_89)"
" null"
"(if(set-empty? common-scopes_87)"
" scopes_86"
"(append"
"(let-values(((lst_93) scopes_86))"
"(begin"
"(if(list? lst_93)(void)(let-values()(in-list lst_93)))"
"((letrec-values(((for-loop_94)"
"(lambda(lst_95)"
"(if(pair? lst_95)"
"(let-values(((s_96)(unsafe-car lst_95))"
"((rest_97)(unsafe-cdr lst_95)))"
"(let-values(((post-guard-var_98)(lambda() #t)))"
"(let-values()"
"(if(not(set-member? common-scopes_87 s_96))"
"(let-values()"
"(let-values(((elem_99)(let-values()(let-values() s_96))))"
"(let-values(((result_100)"
"(if(post-guard-var_98)"
"(for-loop_94 rest_97)"
" null)))"
"(cons elem_99 result_100))))"
"(if(post-guard-var_98)(for-loop_94 rest_97) null)))))"
" null))))"
" for-loop_94)"
" lst_93)))"
"                      (list \"[common scopes]\"))))))"
"(if(null? strs_88)"
"        (let-values () \"\\n   [empty]\")"
"(let-values()"
"(apply"
" string-append"
"(let-values(((lst_101) strs_88))"
"(begin"
"(if(list? lst_101)(void)(let-values()(in-list lst_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(lst_103)"
"(if(pair? lst_103)"
"(let-values(((str_104)(unsafe-car lst_103))((rest_105)(unsafe-cdr lst_103)))"
"(let-values(((post-guard-var_106)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_107)"
"(let-values()"
"                                                           (let-values () (string-append \"\\n  \" str_104)))))"
"(let-values(((result_108)"
"(if(post-guard-var_106)(for-loop_102 rest_105) null)))"
"(cons elem_107 result_108))))))"
" null))))"
" for-loop_102)"
" lst_101)))))))))"
" (define-values (layer->string) (lambda (layer_109) (if (zero? layer_109) \"\" (format \" at layer ~a\" layer_109))))"
"(void)"
"(void)"
"(define-values"
"(raise-syntax-implicit-error)"
"(lambda(s_1 sym_2 trigger-id_3 ctx_4)"
"(let-values(((phase_5)(expand-context-phase ctx_4)))"
"(let-values(((what_6)"
"(let-values(((tmp_8) sym_2))"
"(if(equal? tmp_8 '#%app)"
"                        (let-values () \"function application\")"
"(if(equal? tmp_8 '#%datum)"
"                          (let-values () \"literal data\")"
"(if(equal? tmp_8 '#%top)"
"(let-values()"
"(if(expand-context-allow-unbound? ctx_4)"
"                                \"reference to a top-level identifier\""
"                                \"reference to an unbound identifier\"))"
"(let-values()(void))))))))"
"(let-values(((unbound?_7)"
"(if trigger-id_3"
"(not"
"(let-values(((trigger-id1_9) trigger-id_3)((phase2_10) phase_5))"
"(resolve29.1 #f #f #f #f #f #f #f #f trigger-id1_9 phase2_10)))"
" #f)))"
"(raise-syntax-error$1"
" #f"
"(format"
"(if unbound?_7"
"              \"unbound identifier;\\n also, no ~a transformer is bound~a\""
"              (string-append what_6 \" is not allowed;\\n no ~a syntax transformer is bound~a\"))"
" sym_2"
"(let-values(((tmp_11) phase_5))"
"(if(equal? tmp_11 0)"
"                (let-values () \"\")"
"(if(equal? tmp_11 1)"
"                  (let-values () \" in the transformer phase\")"
"                  (let-values () (format \" at phase ~a\" phase_5))))))"
"(if unbound?_7 trigger-id_3 #f)"
"(if unbound?_7(if(not(eq?(syntax-e$1 s_1)(syntax-e$1 trigger-id_3))) s_1 #f) #f)"
" null"
"           (if unbound?_7 (syntax-debug-info-string trigger-id_3 ctx_4) \"\")))))))"
"(void)"
"(void)"
"(define-values(make-check-no-duplicate-table)(lambda() '#hasheq()))"
"(define-values"
"(check-no-duplicate-ids8.1)"
"(lambda(what1_1 what2_2 ids5_3 phase6_4 s7_5 ht3_6 ht4_7)"
"(let-values(((ids_8) ids5_3))"
"(let-values(((phase_9) phase6_4))"
"(let-values(((s_10) s7_5))"
"(let-values(((ht_11)(if ht4_7 ht3_6(make-check-no-duplicate-table))))"
"            (let-values (((what_12) (if what2_2 what1_1 \"binding name\")))"
"(let-values()"
"((letrec-values(((loop_13)"
"(lambda(v_14 ht_15)"
"(if(identifier? v_14)"
"(let-values()"
"(let-values(((l_16)(hash-ref ht_15(syntax-e$1 v_14) null)))"
"(begin"
"(let-values(((lst_17) l_16))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(lst_19)"
"(if(pair? lst_19)"
"(let-values(((id_20)(unsafe-car lst_19))"
"((rest_21)(unsafe-cdr lst_19)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(bound-identifier=?$1"
" id_20"
" v_14"
" phase_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                  \"duplicate \""
" what_12)"
" s_10"
" v_14))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_18 rest_21)(values))))"
"(values)))))"
" for-loop_18)"
" lst_17)))"
"(void)"
"(hash-set ht_15(syntax-e$1 v_14)(cons v_14 l_16)))))"
"(if(pair? v_14)"
"(let-values()(loop_13(cdr v_14)(loop_13(car v_14) ht_15)))"
"(let-values() ht_15))))))"
" loop_13)"
" ids_8"
" ht_11)))))))))"
"(void)"
"(void)"
"(define-values"
"(remove-use-site-scopes)"
"(lambda(s_1 ctx_2)"
"(let-values(((use-sites_3)(root-expand-context-use-site-scopes ctx_2)))"
"(if(if use-sites_3(pair?(unbox use-sites_3)) #f)"
"(if(syntax?$1 s_1)"
"(remove-scopes s_1(unbox use-sites_3))"
"(let-values(((lst_4) s_1))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(lst_6)"
"(if(pair? lst_6)"
"(let-values(((id_7)(unsafe-car lst_6))((rest_8)(unsafe-cdr lst_6)))"
"(let-values(((post-guard-var_9)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_10)"
"(let-values()"
"(let-values()(remove-scopes id_7(unbox use-sites_3))))))"
"(let-values(((result_11)(if(post-guard-var_9)(for-loop_5 rest_8) null)))"
"(cons elem_10 result_11))))))"
" null))))"
" for-loop_5)"
" lst_4))))"
" s_1))))"
"(void)"
"(void)"
"(define-values"
"(struct:compile-context"
" compile-context1.1"
" compile-context?"
" compile-context-namespace"
" compile-context-phase"
" compile-context-self"
" compile-context-module-self"
" compile-context-full-module-name"
" compile-context-lazy-syntax-literals?"
" compile-context-header)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compile-context"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'compile-context)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'namespace)"
"(make-struct-field-accessor -ref_4 1 'phase)"
"(make-struct-field-accessor -ref_4 2 'self)"
"(make-struct-field-accessor -ref_4 3 'module-self)"
"(make-struct-field-accessor -ref_4 4 'full-module-name)"
"(make-struct-field-accessor -ref_4 5 'lazy-syntax-literals?)"
"(make-struct-field-accessor -ref_4 6 'header))))"
"(define-values"
"(make-compile-context14.1)"
"(lambda(full-module-name6_51"
" full-module-name12_52"
" lazy-syntax-literals?7_53"
" lazy-syntax-literals?13_54"
" module-self5_55"
" module-self11_56"
" namespace2_57"
" namespace8_58"
" phase3_59"
" phase9_60"
" self4_61"
" self10_62)"
"(let-values(((namespace_63)(if namespace8_58 namespace2_57(1/current-namespace))))"
"(let-values(((phase_64)(if phase9_60 phase3_59(namespace-phase namespace_63))))"
"(let-values(((self_65)(if self10_62 self4_61(namespace-mpi namespace_63))))"
"(let-values(((module-self_66)(if module-self11_56 module-self5_55 #f)))"
"(let-values(((full-module-name_67)(if full-module-name12_52 full-module-name6_51 #f)))"
"(let-values(((lazy-syntax-literals?_68)"
"(if lazy-syntax-literals?13_54 lazy-syntax-literals?7_53(if module-self_66 #t #f))))"
"(let-values()"
"(begin"
"(if(if module-self_66(not full-module-name_67) #f)"
"                      (let-values () (error \"internal error: module-self provided without full name\"))"
"(void))"
"(compile-context1.1"
" namespace_63"
" phase_64"
" self_65"
" module-self_66"
" full-module-name_67"
" lazy-syntax-literals?_68"
" #f)))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:mpi-intern-table mpi-intern-table1.1 mpi-intern-table? mpi-intern-table-normal mpi-intern-table-fast)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'mpi-intern-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'mpi-intern-table)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'normal)"
"(make-struct-field-accessor -ref_4 1 'fast))))"
"(define-values(make-module-path-index-intern-table)(lambda()(mpi-intern-table1.1(make-hash)(make-hasheq))))"
"(define-values"
"(intern-module-path-index!)"
"(lambda(t_26 mpi_27)"
"(let-values(((or-part_28)(hash-ref(mpi-intern-table-fast t_26) mpi_27 #f)))"
"(if or-part_28"
" or-part_28"
"(let-values(((name_29 base_30)(1/module-path-index-split mpi_27)))"
"(if(not name_29)"
"(let-values()(begin(hash-set!(mpi-intern-table-fast t_26) mpi_27 mpi_27) mpi_27))"
"(let-values()"
"(let-values(((interned-base_31)(if base_30(intern-module-path-index! t_26 base_30) #f)))"
"(let-values(((at-name_32)"
"(let-values(((or-part_34)(hash-ref(mpi-intern-table-normal t_26) name_29 #f)))"
"(if or-part_34"
" or-part_34"
"(let-values(((at-name_35)(make-hasheq)))"
"(begin"
"(hash-set!(mpi-intern-table-normal t_26) name_29 at-name_35)"
" at-name_35))))))"
"(let-values(((i-mpi_33)"
"(let-values(((or-part_36)(hash-ref at-name_32 interned-base_31 #f)))"
"(if or-part_36"
" or-part_36"
"(let-values(((mpi_37)"
"(if(eq? base_30 interned-base_31)"
" mpi_27"
"(let-values(((the-struct_38) mpi_27))"
"(if(1/module-path-index? the-struct_38)"
"(let-values(((base3_39) interned-base_31))"
"(module-path-index2.1"
"(module-path-index-path the-struct_38)"
" base3_39"
"(module-path-index-resolved the-struct_38)"
"(module-path-index-shift-cache the-struct_38)))"
"(raise-argument-error"
" 'struct-copy"
"                                                         \"module-path-index?\""
" the-struct_38))))))"
"(begin(hash-set! at-name_32 interned-base_31 mpi_37) mpi_37))))))"
"(begin(hash-set!(mpi-intern-table-fast t_26) mpi_27 i-mpi_33) i-mpi_33)))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:module-path-index-table"
" module-path-index-table1.1"
" module-path-index-table?"
" module-path-index-table-positions"
" module-path-index-table-intern)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index-table)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'positions)"
"(make-struct-field-accessor -ref_4 1 'intern))))"
"(define-values(mpi-vector-id)(make-built-in-symbol! 'mpi-vector))"
"(define-values"
"(make-module-path-index-table)"
"(lambda()(module-path-index-table1.1(make-hasheq)(make-module-path-index-intern-table))))"
"(define-values"
"(add-module-path-index!)"
"(lambda(mpis_26 mpi_27)"
"(let-values(((pos_28)(add-module-path-index!/pos mpis_26 mpi_27)))"
"(if pos_28(list 'vector-ref mpi-vector-id pos_28) #f))))"
"(define-values"
"(add-module-path-index!/pos)"
"(lambda(mpis_29 mpi_30)"
"(if(not mpi_30)"
"(let-values() #f)"
"(if mpi_30"
"(let-values()"
"(let-values(((mpi_31)(intern-module-path-index!(module-path-index-table-intern mpis_29) mpi_30))"
"((positions_32)(module-path-index-table-positions mpis_29)))"
"(let-values(((or-part_33)(hash-ref positions_32 mpi_31 #f)))"
"(if or-part_33"
" or-part_33"
"(let-values(((pos_34)(hash-count positions_32)))"
"(begin(hash-set! positions_32 mpi_31 pos_34) pos_34))))))"
"(void)))))"
"(define-values"
"(generate-module-path-index-deserialize)"
"(lambda(mpis_35)"
"(let-values(((positions_36)(module-path-index-table-positions mpis_35)))"
"(let-values(((gen-order_37)(make-hasheqv)))"
"(let-values(((rev-positions_38)"
"(let-values(((ht_41) positions_36))"
"(begin"
"(if((lambda(ht_42)(hash? ht_42)) ht_41)(void)(let-values()(default-in-hash ht_41)))"
"((letrec-values(((for-loop_43)"
"(lambda(table_44 i_45)"
"(if i_45"
"(let-values(((k_46 v_47)(hash-iterate-key+value ht_41 i_45)))"
"(let-values(((table_48)"
"(let-values(((table_49) table_44))"
"(let-values(((table_50)"
"(let-values()"
"(let-values(((key_51 val_52)"
"(let-values()"
"(values v_47 k_46))))"
"(hash-set"
" table_49"
" key_51"
" val_52)))))"
"(values table_50)))))"
"(if(not #f)"
"(for-loop_43 table_48(hash-iterate-next ht_41 i_45))"
" table_48)))"
" table_44))))"
" for-loop_43)"
" '#hasheqv()"
"(hash-iterate-first ht_41))))))"
"(let-values((()"
"(begin"
"(let-values(((start_53) 0)((end_54)(hash-count rev-positions_38))((inc_55) 1))"
"(begin"
"(if(if(real? start_53)(if(real? end_54)(real? inc_55) #f) #f)"
"(void)"
"(let-values()(in-range start_53 end_54 inc_55)))"
"((letrec-values(((for-loop_56)"
"(lambda(pos_57)"
"(if(< pos_57 end_54)"
"(let-values(((i_58) pos_57))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_59)"
"(hash-ref"
" rev-positions_38"
" i_58)))"
"((letrec-values(((loop_60)"
"(lambda(mpi_61)"
"(if(hash-ref"
" gen-order_37"
" mpi_61"
" #f)"
"(void)"
"(let-values()"
"(let-values(((name_62"
" base_63)"
"(1/module-path-index-split"
" mpi_61)))"
"(begin"
"(if base_63"
"(let-values()"
"(loop_60"
" base_63))"
"(void))"
"(hash-set!"
" gen-order_37"
" mpi_61"
"(hash-count"
" gen-order_37)))))))))"
" loop_60)"
" mpi_59)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_56(+ pos_57 inc_55))(values))))"
"(values)))))"
" for-loop_56)"
" start_53)))"
"(values))))"
"(let-values((()(begin(void)(values))))"
"(let-values(((rev-gen-order_39)"
"(let-values(((ht_64) gen-order_37))"
"(begin"
"(if((lambda(ht_65)(hash? ht_65)) ht_64)"
"(void)"
"(let-values()(default-in-hash ht_64)))"
"((letrec-values(((for-loop_66)"
"(lambda(table_67 i_68)"
"(if i_68"
"(let-values(((k_69 v_70)(hash-iterate-key+value ht_64 i_68)))"
"(let-values(((table_71)"
"(let-values(((table_72) table_67))"
"(let-values(((table_73)"
"(let-values()"
"(let-values(((key_74 val_75)"
"(let-values()"
"(values"
" v_70"
" k_69))))"
"(hash-set"
" table_72"
" key_74"
" val_75)))))"
"(values table_73)))))"
"(if(not #f)"
"(for-loop_66 table_71(hash-iterate-next ht_64 i_68))"
" table_71)))"
" table_67))))"
" for-loop_66)"
" '#hasheqv()"
"(hash-iterate-first ht_64))))))"
"(let-values(((gens_40)"
"(let-values(((len_76)(hash-count gen-order_37)))"
"(begin"
"(if(exact-nonnegative-integer? len_76)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_76)))"
"(let-values(((v_77)(make-vector len_76 0)))"
"(begin"
"(if(zero? len_76)"
"(void)"
"(let-values()"
"(let-values(((start_78) 0)((end_79)(hash-count gen-order_37))((inc_80) 1))"
"(begin"
"(if(if(real? start_78)(if(real? end_79)(real? inc_80) #f) #f)"
"(void)"
"(let-values()(in-range start_78 end_79 inc_80)))"
"((letrec-values(((for-loop_81)"
"(lambda(i_82 pos_83)"
"(if(< pos_83 end_79)"
"(let-values(((i_84) pos_83))"
"(let-values(((i_85)"
"(let-values(((i_86) i_82))"
"(let-values(((i_87)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_77"
" i_86"
"(let-values()"
"(let-values(((mpi_88)"
"(hash-ref"
" rev-gen-order_39"
" i_84)))"
"(let-values(((path_89"
" base_90)"
"(1/module-path-index-split"
" mpi_88)))"
"(if(top-level-module-path-index?"
" mpi_88)"
"(let-values()"
" 'top)"
"(if(not"
" path_89)"
"(let-values()"
"(box"
"(let-values(((or-part_91)"
"(1/resolved-module-path-name"
"(module-path-index-resolved"
" mpi_88))))"
"(if or-part_91"
" or-part_91"
" 'self))))"
"(if(not"
" base_90)"
"(let-values()"
"(vector"
" path_89))"
"(if base_90"
"(let-values()"
"(vector"
" path_89"
"(hash-ref"
" gen-order_37"
" base_90)))"
"(void)))))))))"
"(unsafe-fx+"
" 1"
" i_86)))))"
"(values i_87)))))"
"(if(if(not"
"((lambda x_92(unsafe-fx= i_85 len_76))"
" i_84))"
"(not #f)"
" #f)"
"(for-loop_81 i_85(+ pos_83 inc_80))"
" i_85)))"
" i_82))))"
" for-loop_81)"
" 0"
" start_78)))))"
" v_77))))))"
"(list"
" 'deserialize-module-path-indexes"
"(list 'quote gens_40)"
"(list"
" 'quote"
"(let-values(((vec_93 i_94)"
"(let-values(((start_95) 0)((end_96)(hash-count rev-positions_38))((inc_97) 1))"
"(begin"
"(if(if(real? start_95)(if(real? end_96)(real? inc_97) #f) #f)"
"(void)"
"(let-values()(in-range start_95 end_96 inc_97)))"
"((letrec-values(((for-loop_98)"
"(lambda(vec_99 i_100 pos_101)"
"(if(< pos_101 end_96)"
"(let-values(((i_102) pos_101))"
"(let-values(((vec_103 i_104)"
"(let-values(((vec_105) vec_99)"
"((i_106) i_100))"
"(let-values(((vec_107 i_108)"
"(let-values()"
"(let-values(((new-vec_109)"
"(if(eq?"
" i_106"
"(unsafe-vector*-length"
" vec_105))"
"(grow-vector"
" vec_105)"
" vec_105)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_109"
" i_106"
"(let-values()"
"(hash-ref"
" gen-order_37"
"(hash-ref"
" rev-positions_38"
" i_102))))"
"(values"
" new-vec_109"
"(unsafe-fx+"
" i_106"
" 1)))))))"
"(values vec_107 i_108)))))"
"(if(not #f)"
"(for-loop_98 vec_103 i_104(+ pos_101 inc_97))"
"(values vec_103 i_104))))"
"(values vec_99 i_100)))))"
" for-loop_98)"
"(make-vector 16)"
" 0"
" start_95)))))"
"(shrink-vector vec_93 i_94)))))))))))))"
"(define-values"
"(deserialize-module-path-indexes)"
"(lambda(gen-vec_110 order-vec_111)"
"(let-values(((gen_112)(make-vector(vector-length gen-vec_110) #f)))"
"(begin"
"(let-values(((vec_113 len_114)"
"(let-values(((vec_116) gen-vec_110))"
"(begin"
"(if(vector? vec_116)(void)(let-values()(in-vector vec_116)))"
"(values vec_116(unsafe-vector-length vec_116)))))"
"((start_115) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_115)(void)(let-values()(in-naturals start_115)))"
"((letrec-values(((for-loop_117)"
"(lambda(pos_118 pos_119)"
"(if(if(unsafe-fx< pos_118 len_114) #t #f)"
"(let-values(((d_120)(unsafe-vector-ref vec_113 pos_118))((i_121) pos_119))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" gen_112"
" i_121"
"(if(eq? d_120 'top)"
"(let-values()"
"(deserialize-module-path-index))"
"(if(box? d_120)"
"(let-values()"
"(deserialize-module-path-index"
"(unbox d_120)))"
"(let-values()"
"(deserialize-module-path-index"
"(vector-ref d_120 0)"
"(if(>(vector-length d_120) 1)"
"(vector-ref"
" gen_112"
"(vector-ref d_120 1))"
" #f)))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_117(unsafe-fx+ 1 pos_118)(+ pos_119 1))(values))))"
"(values)))))"
" for-loop_117)"
" 0"
" start_115)))"
"(void)"
"(let-values(((len_122)(vector-length order-vec_111)))"
"(begin"
"(if(exact-nonnegative-integer? len_122)"
"(void)"
"              (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_122)))"
"(let-values(((v_123)(make-vector len_122 0)))"
"(begin"
"(if(zero? len_122)"
"(void)"
"(let-values()"
"(let-values(((vec_124 len_125)"
"(let-values(((vec_126) order-vec_111))"
"(begin"
"(if(vector? vec_126)(void)(let-values()(in-vector vec_126)))"
"(values vec_126(unsafe-vector-length vec_126))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_127)"
"(lambda(i_128 pos_129)"
"(if(unsafe-fx< pos_129 len_125)"
"(let-values(((p_130)(unsafe-vector-ref vec_124 pos_129)))"
"(let-values(((i_131)"
"(let-values(((i_132) i_128))"
"(let-values(((i_133)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_123"
" i_132"
"(let-values()"
"(vector-ref gen_112 p_130)))"
"(unsafe-fx+ 1 i_132)))))"
"(values i_133)))))"
"(if(if(not((lambda x_134(unsafe-fx= i_131 len_122)) p_130))"
"(not #f)"
" #f)"
"(for-loop_127 i_131(unsafe-fx+ 1 pos_129))"
" i_131)))"
" i_128))))"
" for-loop_127)"
" 0"
" 0)))))"
" v_123))))))))"
"(define-values"
"(mpis-as-vector)"
"(lambda(mpis_135)"
"(let-values(((positions_136)(module-path-index-table-positions mpis_135)))"
"(let-values(((vec_137)(make-vector(hash-count positions_136) #f)))"
"(begin"
"(let-values(((ht_138) positions_136))"
"(begin"
"(if((lambda(ht_139)(hash? ht_139)) ht_138)(void)(let-values()(default-in-hash ht_138)))"
"((letrec-values(((for-loop_140)"
"(lambda(i_141)"
"(if i_141"
"(let-values(((mpi_142 pos_143)(hash-iterate-key+value ht_138 i_141)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set! vec_137 pos_143 mpi_142))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_140(hash-iterate-next ht_138 i_141))(values))))"
"(values)))))"
" for-loop_140)"
"(hash-iterate-first ht_138))))"
"(void)"
" vec_137)))))"
"(define-values"
"(serialize-module-uses)"
"(lambda(mus_154 mpis_155)"
"(let-values(((lst_156) mus_154))"
"(begin"
"(if(list? lst_156)(void)(let-values()(in-list lst_156)))"
"((letrec-values(((for-loop_157)"
"(lambda(lst_158)"
"(if(pair? lst_158)"
"(let-values(((mu_159)(unsafe-car lst_158))((rest_160)(unsafe-cdr lst_158)))"
"(let-values(((post-guard-var_161)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_162)"
"(let-values()"
"(let-values()"
"(list"
" 'module-use"
"(add-module-path-index! mpis_155(module-use-module mu_159))"
"(module-use-phase mu_159))))))"
"(let-values(((result_163)"
"(if(post-guard-var_161)(for-loop_157 rest_160) null)))"
"(cons elem_162 result_163))))))"
" null))))"
" for-loop_157)"
" lst_156)))))"
"(define-values"
"(interned-literal?)"
"(lambda(v_164)"
"(let-values(((or-part_165)(null? v_164)))"
"(if or-part_165"
" or-part_165"
"(let-values(((or-part_166)(boolean? v_164)))"
"(if or-part_166"
" or-part_166"
"(let-values(((or-part_167)"
"(if(fixnum? v_164)(if(< v_164(sub1(expt 2 30)))(> v_164(-(expt 2 30))) #f) #f)))"
"(if or-part_167"
" or-part_167"
"(let-values(((or-part_168)(symbol? v_164)))"
"(if or-part_168"
" or-part_168"
"(let-values(((or-part_169)(char? v_164)))(if or-part_169 or-part_169(keyword? v_164)))))))))))))"
"(define-values"
"(serialize-phase-to-link-module-uses)"
"(lambda(phase-to-link-module-uses_170 mpis_171)"
"(let-values(((phases-in-order_172)"
"(let-values(((temp10_173)(hash-keys phase-to-link-module-uses_170))((<11_174) <))"
"(sort7.1 #f #f #f #f temp10_173 <11_174))))"
"(list*"
" 'hasheqv"
"(apply"
" append"
"(let-values(((lst_175) phases-in-order_172))"
"(begin"
"(if(list? lst_175)(void)(let-values()(in-list lst_175)))"
"((letrec-values(((for-loop_176)"
"(lambda(lst_177)"
"(if(pair? lst_177)"
"(let-values(((phase_178)(unsafe-car lst_177))((rest_179)(unsafe-cdr lst_177)))"
"(let-values(((post-guard-var_180)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_181)"
"(let-values()"
"(let-values()"
"(list"
" phase_178"
"(list*"
" 'list"
"(serialize-module-uses"
"(hash-ref phase-to-link-module-uses_170 phase_178)"
" mpis_171)))))))"
"(let-values(((result_182)"
"(if(post-guard-var_180)(for-loop_176 rest_179) null)))"
"(cons elem_181 result_182))))))"
" null))))"
" for-loop_176)"
" lst_175))))))))"
"(define-values"
"(generate-deserialize6.1)"
"(lambda(syntax-support?2_183 syntax-support?3_184 v4_185 mpis5_186)"
"(let-values(((v_187) v4_185))"
"(let-values(((mpis_188) mpis5_186))"
"(let-values(((syntax-support?_189)(if syntax-support?3_184 syntax-support?2_183 #t)))"
"(let-values()"
"(let-values(((reachable-scopes_190)(find-reachable-scopes v_187)))"
"(let-values(((state_191)(make-serialize-state reachable-scopes_190)))"
"(let-values(((mutables_192)(make-hasheq)))"
"(let-values(((objs_193)(make-hasheq)))"
"(let-values(((shares_194)(make-hasheq)))"
"(let-values(((obj-step_195) 0))"
"(let-values(((frontier_196) null))"
"(letrec-values(((add-frontier!_197)"
"(case-lambda"
"((v_216)(set! frontier_196(cons v_216 frontier_196)))"
"((kind_217 v_218)(add-frontier!_197 v_218)))))"
"(let-values((()"
"(begin"
"((letrec-values(((frontier-loop_219)"
"(lambda(v_220)"
"(begin"
"((letrec-values(((loop_221)"
"(lambda(v_222)"
"(if(let-values(((or-part_223)"
"(interned-literal?"
" v_222)))"
"(if or-part_223"
" or-part_223"
"(1/module-path-index?"
" v_222)))"
"(let-values()(void))"
"(if(hash-ref objs_193 v_222 #f)"
"(let-values()"
"(if(hash-ref"
" mutables_192"
" v_222"
" #f)"
"(void)"
"(let-values()"
"(hash-set!"
" shares_194"
" v_222"
" #t))))"
"(let-values()"
"(begin"
"(if(serialize-fill!?"
" v_222)"
"(let-values()"
"(begin"
"(hash-set!"
" mutables_192"
" v_222"
"(hash-count"
" mutables_192))"
"((serialize-fill!-ref"
" v_222)"
" v_222"
" add-frontier!_197"
" state_191)))"
"(if(serialize? v_222)"
"(let-values()"
"((serialize-ref"
" v_222)"
" v_222"
"(case-lambda"
"((v_224)"
"(loop_221 v_224))"
"((kind_225 v_226)"
"(loop_221"
" v_226)))"
" state_191))"
"(if(pair? v_222)"
"(let-values()"
"(begin"
"(loop_221"
"(car v_222))"
"(loop_221"
"(cdr v_222))))"
"(if(vector? v_222)"
"(let-values()"
"(if(let-values(((or-part_227)"
"(immutable?"
" v_222)))"
"(if or-part_227"
" or-part_227"
"(zero?"
"(vector-length"
" v_222))))"
"(begin"
"(let-values(((vec_228"
" len_229)"
"(let-values(((vec_230)"
" v_222))"
"(begin"
"(if(vector?"
" vec_230)"
"(void)"
"(let-values()"
"(in-vector"
" vec_230)))"
"(values"
" vec_230"
"(unsafe-vector-length"
" vec_230))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_231)"
"(lambda(pos_232)"
"(if(unsafe-fx<"
" pos_232"
" len_229)"
"(let-values(((e_233)"
"(unsafe-vector-ref"
" vec_228"
" pos_232)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_221"
" e_233))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_231"
"(unsafe-fx+"
" 1"
" pos_232))"
"(values))))"
"(values)))))"
" for-loop_231)"
" 0)))"
"(void))"
"(begin"
"(hash-set!"
" mutables_192"
" v_222"
"(hash-count"
" mutables_192))"
"(begin"
"(let-values(((vec_234"
" len_235)"
"(let-values(((vec_236)"
" v_222))"
"(begin"
"(if(vector?"
" vec_236)"
"(void)"
"(let-values()"
"(in-vector"
" vec_236)))"
"(values"
" vec_236"
"(unsafe-vector-length"
" vec_236))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_237)"
"(lambda(pos_238)"
"(if(unsafe-fx<"
" pos_238"
" len_235)"
"(let-values(((e_239)"
"(unsafe-vector-ref"
" vec_234"
" pos_238)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(add-frontier!_197"
" e_239))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_237"
"(unsafe-fx+"
" 1"
" pos_238))"
"(values))))"
"(values)))))"
" for-loop_237)"
" 0)))"
"(void)))))"
"(if(box? v_222)"
"(let-values()"
"(if(immutable?"
" v_222)"
"(loop_221"
"(unbox"
" v_222))"
"(begin"
"(hash-set!"
" mutables_192"
" v_222"
"(hash-count"
" mutables_192))"
"(add-frontier!_197"
"(unbox"
" v_222)))))"
"(if(hash?"
" v_222)"
"(let-values()"
"(if(immutable?"
" v_222)"
"(begin"
"(let-values(((lst_240)"
"(sorted-hash-keys"
" v_222)))"
"(begin"
"(if(list?"
" lst_240)"
"(void)"
"(let-values()"
"(in-list"
" lst_240)))"
"((letrec-values(((for-loop_241)"
"(lambda(lst_242)"
"(if(pair?"
" lst_242)"
"(let-values(((k_243)"
"(unsafe-car"
" lst_242))"
"((rest_244)"
"(unsafe-cdr"
" lst_242)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_221"
" k_243)"
"(loop_221"
"(hash-ref"
" v_222"
" k_243))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_241"
" rest_244)"
"(values))))"
"(values)))))"
" for-loop_241)"
" lst_240)))"
"(void))"
"(begin"
"(hash-set!"
" mutables_192"
" v_222"
"(hash-count"
" mutables_192))"
"(begin"
"(let-values(((lst_245)"
"(sorted-hash-keys"
" v_222)))"
"(begin"
"(if(list?"
" lst_245)"
"(void)"
"(let-values()"
"(in-list"
" lst_245)))"
"((letrec-values(((for-loop_246)"
"(lambda(lst_247)"
"(if(pair?"
" lst_247)"
"(let-values(((k_248)"
"(unsafe-car"
" lst_247))"
"((rest_249)"
"(unsafe-cdr"
" lst_247)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(add-frontier!_197"
" k_248)"
"(add-frontier!_197"
"(hash-ref"
" v_222"
" k_248))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_246"
" rest_249)"
"(values))))"
"(values)))))"
" for-loop_246)"
" lst_245)))"
"(void)))))"
"(if(prefab-struct-key"
" v_222)"
"(let-values()"
"(begin"
"(let-values(((v*_250"
" start*_251"
" stop*_252"
" step*_253)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_254)"
"(vector?"
" x_254))"
"(lambda(x_255)"
"(unsafe-vector-length"
" x_255))"
"(struct->vector"
" v_222)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_256)"
"(lambda(idx_257)"
"(if(unsafe-fx<"
" idx_257"
" stop*_252)"
"(let-values(((e_258)"
"(unsafe-vector-ref"
" v*_250"
" idx_257)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_221"
" e_258))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_256"
"(unsafe-fx+"
" idx_257"
" 1))"
"(values))))"
"(values)))))"
" for-loop_256)"
" start*_251)))"
"(void)))"
"(if(srcloc?"
" v_222)"
"(let-values()"
"(begin"
"(let-values(((v*_259"
" start*_260"
" stop*_261"
" step*_262)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                                 \"vector\""
"(lambda(x_263)"
"(vector?"
" x_263))"
"(lambda(x_264)"
"(unsafe-vector-length"
" x_264))"
"(struct->vector"
" v_222)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_265)"
"(lambda(idx_266)"
"(if(unsafe-fx<"
" idx_266"
" stop*_261)"
"(let-values(((e_267)"
"(unsafe-vector-ref"
" v*_259"
" idx_266)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_221"
" e_267))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_265"
"(unsafe-fx+"
" idx_266"
" 1))"
"(values))))"
"(values)))))"
" for-loop_265)"
" start*_260)))"
"(void)))"
"(let-values()"
"(void))))))))))"
"(hash-set!"
" objs_193"
" v_222"
" obj-step_195)"
"(set! obj-step_195"
"(add1"
" obj-step_195)))))))))"
" loop_221)"
" v_220)"
"(if(null? frontier_196)"
"(void)"
"(let-values()"
"(let-values(((l_268) frontier_196))"
"(begin"
"(set! frontier_196 null)"
"(let-values(((lst_269) l_268))"
"(begin"
"(if(list? lst_269)"
"(void)"
"(let-values()(in-list lst_269)))"
"((letrec-values(((for-loop_270)"
"(lambda(lst_271)"
"(if(pair? lst_271)"
"(let-values(((v_272)"
"(unsafe-car"
" lst_271))"
"((rest_273)"
"(unsafe-cdr"
" lst_271)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(frontier-loop_219"
" v_272))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_270"
" rest_273)"
"(values))))"
"(values)))))"
" for-loop_270)"
" lst_269)))"
"(void)))))))))"
" frontier-loop_219)"
" v_187)"
"(values))))"
"(let-values(((num-mutables_198)(hash-count mutables_192)))"
"(let-values(((share-step-positions_199)"
"(let-values(((share-steps_274)"
"(let-values(((ht_275) shares_194))"
"(begin"
"(if((lambda(ht_276)(hash? ht_276)) ht_275)"
"(void)"
"(let-values()(default-in-hash-keys ht_275)))"
"((letrec-values(((for-loop_277)"
"(lambda(i_278)"
"(if i_278"
"(let-values(((obj_279)"
"(hash-iterate-key"
" ht_275"
" i_278)))"
"(let-values(((post-guard-var_280)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_281)"
"(let-values()"
"(let-values()"
"(hash-ref"
" objs_193"
" obj_279)))))"
"(let-values(((result_282)"
"(if(post-guard-var_280)"
"(for-loop_277"
"(hash-iterate-next"
" ht_275"
" i_278))"
" null)))"
"(cons"
" elem_281"
" result_282))))))"
" null))))"
" for-loop_277)"
"(hash-iterate-first ht_275))))))"
"(let-values(((lst_283)"
"(let-values(((share-steps12_285) share-steps_274)"
"((<13_286) <))"
"(sort7.1 #f #f #f #f share-steps12_285 <13_286)))"
"((start_284) num-mutables_198))"
"(begin"
"(if(list? lst_283)(void)(let-values()(in-list lst_283)))"
"(if(exact-nonnegative-integer? start_284)"
"(void)"
"(let-values()(in-naturals start_284)))"
"((letrec-values(((for-loop_287)"
"(lambda(table_288 lst_289 pos_290)"
"(if(if(pair? lst_289) #t #f)"
"(let-values(((step_291)(unsafe-car lst_289))"
"((rest_292)(unsafe-cdr lst_289))"
"((pos_293) pos_290))"
"(let-values(((table_294)"
"(let-values(((table_295)"
" table_288))"
"(let-values(((table_296)"
"(let-values()"
"(let-values(((key_297"
" val_298)"
"(let-values()"
"(values"
" step_291"
" pos_293))))"
"(hash-set"
" table_295"
" key_297"
" val_298)))))"
"(values table_296)))))"
"(if(not #f)"
"(for-loop_287"
" table_294"
" rest_292"
"(+ pos_290 1))"
" table_294)))"
" table_288))))"
" for-loop_287)"
" '#hasheqv()"
" lst_283"
" start_284))))))"
"(let-values(((stream_200) null))"
"(let-values(((stream-size_201) 0))"
"(let-values(((next-push-position_202)(lambda() stream-size_201)))"
"(let-values(((quoted?_203)"
"(lambda(pos_299)"
"(let-values(((v_300)"
"(list-ref"
" stream_200"
"(- stream-size_201(add1 pos_299)))))"
"(let-values(((or-part_301)(not(keyword? v_300))))"
"(if or-part_301 or-part_301(eq? '#:quote v_300)))))))"
"(let-values(((ser-reset!_204)"
"(lambda(pos_302)"
"(begin"
"(set! stream_200"
"(list-tail stream_200(- stream-size_201 pos_302)))"
"(set! stream-size_201 pos_302)))))"
"(let-values(((reap-stream!_205)"
"(lambda()"
"(begin0"
"(list->vector(alt-reverse stream_200))"
"(set! stream_200 null)"
"(set! stream-size_201 0)))))"
"(letrec-values(((ser-push!_206)"
"(case-lambda"
"((v_303)"
"(if(hash-ref shares_194 v_303 #f)"
"(let-values()"
"(let-values(((n_304)"
"(hash-ref"
" share-step-positions_199"
"(hash-ref objs_193 v_303))))"
"(begin"
"(ser-push!_206 'tag '#:ref)"
"(ser-push!_206 'exact n_304))))"
"(let-values(((c1_305)"
"(hash-ref mutables_192 v_303 #f)))"
"(if c1_305"
"((lambda(n_306)"
"(begin"
"(ser-push!_206 'tag '#:ref)"
"(ser-push!_206 'exact n_306)))"
" c1_305)"
"(let-values()(ser-push-encoded!_207 v_303))))))"
"((kind_307 v_308)"
"(let-values(((tmp_309) kind_307))"
"(if(equal? tmp_309 'exact)"
"(let-values()"
"(begin"
"(set! stream_200(cons v_308 stream_200))"
"(set! stream-size_201(add1 stream-size_201))))"
"(if(equal? tmp_309 'tag)"
"(let-values()(ser-push!_206 'exact v_308))"
"(if(equal? tmp_309 'reference)"
"(let-values()"
"(if(hash-ref shares_194 v_308 #f)"
"(let-values()"
"(let-values(((n_310)"
"(hash-ref"
" share-step-positions_199"
"(hash-ref"
" objs_193"
" v_308))))"
"(ser-push!_206 'exact n_310)))"
"(let-values(((c2_311)"
"(hash-ref"
" mutables_192"
" v_308"
" #f)))"
"(if c2_311"
"((lambda(n_312)"
"(ser-push!_206 'exact n_312))"
" c2_311)"
"(let-values()"
"(ser-push!_206 v_308))))))"
"(let-values()(ser-push!_206 v_308)))))))))"
"((ser-push-encoded!_207)"
"(lambda(v_313)"
"(if(keyword? v_313)"
"(let-values()"
"(begin"
"(ser-push!_206 'tag '#:quote)"
"(ser-push!_206 'exact v_313)))"
"(if(1/module-path-index? v_313)"
"(let-values()"
"(begin"
"(ser-push!_206 'tag '#:mpi)"
"(ser-push!_206"
" 'exact"
"(add-module-path-index!/pos mpis_188 v_313))))"
"(if(serialize? v_313)"
"(let-values()"
"((serialize-ref v_313)"
" v_313"
" ser-push!_206"
" state_191))"
"(if(if(list? v_313)"
"(if(pair? v_313)(pair?(cdr v_313)) #f)"
" #f)"
"(let-values()"
"(let-values(((start-pos_314)"
"(next-push-position_202)))"
"(let-values((()"
"(begin"
"(ser-push!_206"
" 'tag"
" '#:list)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_206"
" 'exact"
"(length v_313))"
"(values))))"
"(let-values(((all-quoted?_315)"
"(let-values(((lst_316)"
" v_313))"
"(begin"
"(if(list? lst_316)"
"(void)"
"(let-values()"
"(in-list"
" lst_316)))"
"((letrec-values(((for-loop_317)"
"(lambda(all-quoted?_318"
" lst_319)"
"(if(pair?"
" lst_319)"
"(let-values(((i_320)"
"(unsafe-car"
" lst_319))"
"((rest_321)"
"(unsafe-cdr"
" lst_319)))"
"(let-values(((all-quoted?_322)"
"(let-values(((all-quoted?_323)"
" all-quoted?_318))"
"(let-values(((all-quoted?_324)"
"(let-values()"
"(let-values(((i-pos_325)"
"(next-push-position_202)))"
"(begin"
"(ser-push!_206"
" i_320)"
"(if all-quoted?_323"
"(quoted?_203"
" i-pos_325)"
" #f))))))"
"(values"
" all-quoted?_324)))))"
"(if(not"
" #f)"
"(for-loop_317"
" all-quoted?_322"
" rest_321)"
" all-quoted?_322)))"
" all-quoted?_318))))"
" for-loop_317)"
" #t"
" lst_316)))))"
"(if all-quoted?_315"
"(let-values()"
"(begin"
"(ser-reset!_204 start-pos_314)"
"(ser-push-optional-quote!_208)"
"(ser-push!_206 'exact v_313)))"
"(void)))))))"
"(if(pair? v_313)"
"(let-values()"
"(let-values(((start-pos_326)"
"(next-push-position_202)))"
"(let-values((()"
"(begin"
"(ser-push!_206"
" 'tag"
" '#:cons)"
"(values))))"
"(let-values(((a-pos_327)"
"(next-push-position_202)))"
"(let-values((()"
"(begin"
"(ser-push!_206"
"(car v_313))"
"(values))))"
"(let-values(((d-pos_328)"
"(next-push-position_202)))"
"(begin"
"(ser-push!_206(cdr v_313))"
"(if(if(quoted?_203 a-pos_327)"
"(quoted?_203 d-pos_328)"
" #f)"
"(let-values()"
"(begin"
"(ser-reset!_204"
" start-pos_326)"
"(ser-push-optional-quote!_208)"
"(ser-push!_206"
" 'exact"
" v_313)))"
"(void)))))))))"
"(if(box? v_313)"
"(let-values()"
"(let-values(((start-pos_329)"
"(next-push-position_202)))"
"(let-values((()"
"(begin"
"(ser-push!_206"
" 'tag"
" '#:box)"
"(values))))"
"(let-values(((v-pos_330)"
"(next-push-position_202)))"
"(begin"
"(ser-push!_206(unbox v_313))"
"(if(quoted?_203 v-pos_330)"
"(let-values()"
"(begin"
"(ser-reset!_204"
" start-pos_329)"
"(ser-push-optional-quote!_208)"
"(ser-push!_206"
" 'exact"
" v_313)))"
"(void)))))))"
"(if(vector? v_313)"
"(let-values()"
"(let-values(((start-pos_331)"
"(next-push-position_202)))"
"(let-values((()"
"(begin"
"(ser-push!_206"
" 'tag"
" '#:vector)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_206"
" 'exact"
"(vector-length"
" v_313))"
"(values))))"
"(let-values(((all-quoted?_332)"
"(let-values(((vec_333"
" len_334)"
"(let-values(((vec_335)"
" v_313))"
"(begin"
"(if(vector?"
" vec_335)"
"(void)"
"(let-values()"
"(in-vector"
" vec_335)))"
"(values"
" vec_335"
"(unsafe-vector-length"
" vec_335))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_336)"
"(lambda(all-quoted?_337"
" pos_338)"
"(if(unsafe-fx<"
" pos_338"
" len_334)"
"(let-values(((i_339)"
"(unsafe-vector-ref"
" vec_333"
" pos_338)))"
"(let-values(((all-quoted?_340)"
"(let-values(((all-quoted?_341)"
" all-quoted?_337))"
"(let-values(((all-quoted?_342)"
"(let-values()"
"(let-values(((i-pos_343)"
"(next-push-position_202)))"
"(begin"
"(ser-push!_206"
" i_339)"
"(if all-quoted?_341"
"(quoted?_203"
" i-pos_343)"
" #f))))))"
"(values"
" all-quoted?_342)))))"
"(if(not"
" #f)"
"(for-loop_336"
" all-quoted?_340"
"(unsafe-fx+"
" 1"
" pos_338))"
" all-quoted?_340)))"
" all-quoted?_337))))"
" for-loop_336)"
" #t"
" 0)))))"
"(if all-quoted?_332"
"(let-values()"
"(begin"
"(ser-reset!_204"
" start-pos_331)"
"(ser-push-optional-quote!_208)"
"(ser-push!_206"
" 'exact"
" v_313)))"
"(void)))))))"
"(if(hash? v_313)"
"(let-values()"
"(let-values(((start-pos_344)"
"(next-push-position_202)))"
"(let-values(((as-set?_345)"
"(let-values(((ht_348)"
" v_313))"
"(begin"
"(if((lambda(ht_349)"
"(hash?"
" ht_349))"
" ht_348)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_348)))"
"((letrec-values(((for-loop_350)"
"(lambda(result_351"
" i_352)"
"(if i_352"
"(let-values(((val_353)"
"(hash-iterate-value"
" ht_348"
" i_352)))"
"(let-values(((result_354)"
"(let-values()"
"(let-values(((result_356)"
"(let-values()"
"(let-values()"
"(eq?"
" val_353"
" #t)))))"
"(values"
" result_356)))))"
"(if(if(not"
"((lambda x_357"
"(not"
" result_354))"
" val_353))"
"(not"
" #f)"
" #f)"
"(for-loop_350"
" result_354"
"(hash-iterate-next"
" ht_348"
" i_352))"
" result_354)))"
" result_351))))"
" for-loop_350)"
" #t"
"(hash-iterate-first"
" ht_348))))))"
"(let-values((()"
"(begin"
"(ser-push!_206"
" 'tag"
"(if as-set?_345"
"(if(hash-eq?"
" v_313)"
"(let-values()"
" '#:seteq)"
"(if(hash-eqv?"
" v_313)"
"(let-values()"
" '#:seteqv)"
"(let-values()"
" '#:set)))"
"(if(hash-eq?"
" v_313)"
"(let-values()"
" '#:hasheq)"
"(if(hash-eqv?"
" v_313)"
"(let-values()"
" '#:hasheqv)"
"(let-values()"
" '#:hash)))))"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_206"
" 'exact"
"(hash-count"
" v_313))"
"(values))))"
"(let-values(((ks_346)"
"(sorted-hash-keys"
" v_313)))"
"(let-values(((all-quoted?_347)"
"(let-values(((lst_358)"
" ks_346))"
"(begin"
"(if(list?"
" lst_358)"
"(void)"
"(let-values()"
"(in-list"
" lst_358)))"
"((letrec-values(((for-loop_359)"
"(lambda(all-quoted?_360"
" lst_361)"
"(if(pair?"
" lst_361)"
"(let-values(((k_362)"
"(unsafe-car"
" lst_361))"
"((rest_363)"
"(unsafe-cdr"
" lst_361)))"
"(let-values(((all-quoted?_364)"
"(let-values(((all-quoted?_365)"
" all-quoted?_360))"
"(let-values(((all-quoted?_366)"
"(let-values()"
"(let-values(((k-pos_367)"
"(next-push-position_202)))"
"(let-values((()"
"(begin"
"(ser-push!_206"
" k_362)"
"(values))))"
"(let-values(((v-pos_368)"
"(next-push-position_202)))"
"(begin"
"(if as-set?_345"
"(void)"
"(let-values()"
"(ser-push!_206"
"(hash-ref"
" v_313"
" k_362))))"
"(if all-quoted?_365"
"(if(quoted?_203"
" k-pos_367)"
"(let-values(((or-part_369)"
" as-set?_345))"
"(if or-part_369"
" or-part_369"
"(quoted?_203"
" v-pos_368)))"
" #f)"
" #f))))))))"
"(values"
" all-quoted?_366)))))"
"(if(not"
" #f)"
"(for-loop_359"
" all-quoted?_364"
" rest_363)"
" all-quoted?_364)))"
" all-quoted?_360))))"
" for-loop_359)"
" #t"
" lst_358)))))"
"(if all-quoted?_347"
"(let-values()"
"(begin"
"(ser-reset!_204"
" start-pos_344)"
"(ser-push-optional-quote!_208)"
"(ser-push!_206"
" 'exact"
" v_313)))"
"(void)))))))))"
"(let-values(((c3_370)"
"(prefab-struct-key"
" v_313)))"
"(if c3_370"
"((lambda(k_371)"
"(let-values(((vec_372)"
"(struct->vector"
" v_313)))"
"(let-values(((start-pos_373)"
"(next-push-position_202)))"
"(let-values((()"
"(begin"
"(ser-push!_206"
" 'tag"
" '#:prefab)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_206"
" 'exact"
" k_371)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_206"
" 'exact"
"(sub1"
"(vector-length"
" vec_372)))"
"(values))))"
"(let-values(((all-quoted?_374)"
"(let-values(((v*_375"
" start*_376"
" stop*_377"
" step*_378)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                               \"vector\""
"(lambda(x_379)"
"(vector?"
" x_379))"
"(lambda(x_380)"
"(unsafe-vector-length"
" x_380))"
" vec_372"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_381)"
"(lambda(all-quoted?_382"
" idx_383)"
"(if(unsafe-fx<"
" idx_383"
" stop*_377)"
"(let-values(((i_384)"
"(unsafe-vector-ref"
" v*_375"
" idx_383)))"
"(let-values(((all-quoted?_385)"
"(let-values(((all-quoted?_386)"
" all-quoted?_382))"
"(let-values(((all-quoted?_387)"
"(let-values()"
"(let-values(((i-pos_388)"
"(next-push-position_202)))"
"(begin"
"(ser-push!_206"
" i_384)"
"(if all-quoted?_386"
"(quoted?_203"
" i-pos_388)"
" #f))))))"
"(values"
" all-quoted?_387)))))"
"(if(not"
" #f)"
"(for-loop_381"
" all-quoted?_385"
"(unsafe-fx+"
" idx_383"
" 1))"
" all-quoted?_385)))"
" all-quoted?_382))))"
" for-loop_381)"
" #t"
" start*_376)))))"
"(if all-quoted?_374"
"(let-values()"
"(begin"
"(ser-reset!_204"
" start-pos_373)"
"(ser-push-optional-quote!_208)"
"(ser-push!_206"
" 'exact"
" v_313)))"
"(void)))))))))"
" c3_370)"
"(if(srcloc? v_313)"
"(let-values()"
"(begin"
"(ser-push!_206"
" 'tag"
" '#:srcloc)"
"(ser-push!_206"
"(srcloc-source v_313))"
"(ser-push!_206"
"(srcloc-line v_313))"
"(ser-push!_206"
"(srcloc-column v_313))"
"(ser-push!_206"
"(srcloc-position v_313))"
"(ser-push!_206"
"(srcloc-span v_313))))"
"(let-values()"
"(begin"
"(ser-push-optional-quote!_208)"
"(ser-push!_206"
" 'exact"
" v_313))))))))))))))))"
"((ser-push-optional-quote!_208)(lambda()(void))))"
"(let-values(((ser-shell!_209)"
"(lambda(v_389)"
"(if(serialize-fill!? v_389)"
"(let-values()"
"((serialize-ref v_389)"
" v_389"
" ser-push!_206"
" state_191))"
"(if(box? v_389)"
"(let-values()(ser-push!_206 'tag '#:box))"
"(if(vector? v_389)"
"(let-values()"
"(begin"
"(ser-push!_206 'tag '#:vector)"
"(ser-push!_206 'exact(vector-length v_389))))"
"(if(hash? v_389)"
"(let-values()"
"(ser-push!_206"
" 'tag"
"(if(hash-eq? v_389)"
"(let-values() '#:hasheq)"
"(if(hash-eqv? v_389)"
"(let-values() '#:hasheqv)"
"(let-values() '#:hash)))))"
"(let-values()"
"(error"
" 'ser-shell"
"                                                                           \"unknown mutable: ~e\""
" v_389)))))))))"
"(let-values(((ser-shell-fill!_210)"
"(lambda(v_390)"
"(if(serialize-fill!? v_390)"
"(let-values()"
"((serialize-fill!-ref v_390)"
" v_390"
" ser-push!_206"
" state_191))"
"(if(box? v_390)"
"(let-values()"
"(begin"
"(ser-push!_206 'tag '#:set-box!)"
"(ser-push!_206(unbox v_390))))"
"(if(vector? v_390)"
"(let-values()"
"(begin"
"(ser-push!_206 'tag '#:set-vector!)"
"(ser-push!_206 'exact(vector-length v_390))"
"(let-values(((vec_391 len_392)"
"(let-values(((vec_393)"
" v_390))"
"(begin"
"(if(vector? vec_393)"
"(void)"
"(let-values()"
"(in-vector vec_393)))"
"(values"
" vec_393"
"(unsafe-vector-length"
" vec_393))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_394)"
"(lambda(pos_395)"
"(if(unsafe-fx<"
" pos_395"
" len_392)"
"(let-values(((v_396)"
"(unsafe-vector-ref"
" vec_391"
" pos_395)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push!_206"
" v_396))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_394"
"(unsafe-fx+"
" 1"
" pos_395))"
"(values))))"
"(values)))))"
" for-loop_394)"
" 0)))"
"(void)))"
"(if(hash? v_390)"
"(let-values()"
"(let-values((()"
"(begin"
"(ser-push!_206"
" 'tag"
" '#:set-hash!)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_206"
" 'exact"
"(hash-count v_390))"
"(values))))"
"(let-values(((ks_397)"
"(sorted-hash-keys v_390)))"
"(begin"
"(let-values(((lst_398) ks_397))"
"(begin"
"(if(list? lst_398)"
"(void)"
"(let-values()"
"(in-list lst_398)))"
"((letrec-values(((for-loop_399)"
"(lambda(lst_400)"
"(if(pair?"
" lst_400)"
"(let-values(((k_401)"
"(unsafe-car"
" lst_400))"
"((rest_402)"
"(unsafe-cdr"
" lst_400)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(ser-push!_206"
" k_401)"
"(ser-push!_206"
"(hash-ref"
" v_390"
" k_401))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_399"
" rest_402)"
"(values))))"
"(values)))))"
" for-loop_399)"
" lst_398)))"
"(void))))))"
"(let-values()"
"(error"
" 'ser-shell-fill"
"                                                                             \"unknown mutable: ~e\""
" v_390)))))))))"
"(let-values(((rev-mutables_211)"
"(let-values(((ht_403) mutables_192))"
"(begin"
"(if((lambda(ht_404)(hash? ht_404)) ht_403)"
"(void)"
"(let-values()(default-in-hash ht_403)))"
"((letrec-values(((for-loop_405)"
"(lambda(table_406 i_407)"
"(if i_407"
"(let-values(((k_408 v_409)"
"(hash-iterate-key+value"
" ht_403"
" i_407)))"
"(let-values(((table_410)"
"(let-values(((table_411)"
" table_406))"
"(let-values(((table_412)"
"(let-values()"
"(let-values(((key_413"
" val_414)"
"(let-values()"
"(values"
" v_409"
" k_408))))"
"(hash-set"
" table_411"
" key_413"
" val_414)))))"
"(values"
" table_412)))))"
"(if(not #f)"
"(for-loop_405"
" table_410"
"(hash-iterate-next"
" ht_403"
" i_407))"
" table_410)))"
" table_406))))"
" for-loop_405)"
" '#hasheqv()"
"(hash-iterate-first ht_403))))))"
"(let-values(((mutable-shell-bindings_212)"
"(begin"
"(begin"
"(let-values(((start_415) 0)"
"((end_416)"
"(hash-count mutables_192))"
"((inc_417) 1))"
"(begin"
"(if(if(real? start_415)"
"(if(real? end_416)"
"(real? inc_417)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_415 end_416 inc_417)))"
"((letrec-values(((for-loop_418)"
"(lambda(pos_419)"
"(if(< pos_419 end_416)"
"(let-values(((i_420)"
" pos_419))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell!_209"
"(hash-ref"
" rev-mutables_211"
" i_420)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_418"
"(+"
" pos_419"
" inc_417))"
"(values))))"
"(values)))))"
" for-loop_418)"
" start_415)))"
"(void))"
"(reap-stream!_205))))"
"(let-values(((rev-shares_213)"
"(let-values(((ht_421) shares_194))"
"(begin"
"(if((lambda(ht_422)(hash? ht_422)) ht_421)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_421)))"
"((letrec-values(((for-loop_423)"
"(lambda(table_424 i_425)"
"(if i_425"
"(let-values(((obj_426)"
"(hash-iterate-key"
" ht_421"
" i_425)))"
"(let-values(((table_427)"
"(let-values(((table_428)"
" table_424))"
"(let-values(((table_429)"
"(let-values()"
"(let-values(((key_430"
" val_431)"
"(let-values()"
"(values"
"(hash-ref"
" share-step-positions_199"
"(hash-ref"
" objs_193"
" obj_426))"
" obj_426))))"
"(hash-set"
" table_428"
" key_430"
" val_431)))))"
"(values"
" table_429)))))"
"(if(not #f)"
"(for-loop_423"
" table_427"
"(hash-iterate-next"
" ht_421"
" i_425))"
" table_427)))"
" table_424))))"
" for-loop_423)"
" '#hasheqv()"
"(hash-iterate-first ht_421))))))"
"(let-values(((shared-bindings_214)"
"(begin"
"(begin"
"(let-values(((start_432) num-mutables_198)"
"((end_433)"
"(+"
" num-mutables_198"
"(hash-count shares_194)))"
"((inc_434) 1))"
"(begin"
"(if(if(real? start_432)"
"(if(real? end_433)"
"(real? inc_434)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range"
" start_432"
" end_433"
" inc_434)))"
"((letrec-values(((for-loop_435)"
"(lambda(pos_436)"
"(if(<"
" pos_436"
" end_433)"
"(let-values(((i_437)"
" pos_436))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push-encoded!_207"
"(hash-ref"
" rev-shares_213"
" i_437)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_435"
"(+"
" pos_436"
" inc_434))"
"(values))))"
"(values)))))"
" for-loop_435)"
" start_432)))"
"(void))"
"(reap-stream!_205))))"
"(let-values(((mutable-fills_215)"
"(begin"
"(begin"
"(let-values(((start_438) 0)"
"((end_439)"
"(hash-count mutables_192))"
"((inc_440) 1))"
"(begin"
"(if(if(real? start_438)"
"(if(real? end_439)"
"(real? inc_440)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range"
" start_438"
" end_439"
" inc_440)))"
"((letrec-values(((for-loop_441)"
"(lambda(pos_442)"
"(if(<"
" pos_442"
" end_439)"
"(let-values(((i_443)"
" pos_442))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell-fill!_210"
"(hash-ref"
" rev-mutables_211"
" i_443)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_441"
"(+"
" pos_442"
" inc_440))"
"(values))))"
"(values)))))"
" for-loop_441)"
" start_438)))"
"(void))"
"(reap-stream!_205))))"
"(list"
" 'deserialize"
" mpi-vector-id"
"(if syntax-support?_189 inspector-id #f)"
"(if syntax-support?_189 bulk-binding-registry-id #f)"
"(list 'quote(hash-count mutables_192))"
"(list 'quote mutable-shell-bindings_212)"
"(list 'quote(hash-count shares_194))"
"(list 'quote shared-bindings_214)"
"(list 'quote mutable-fills_215)"
"(list"
" 'quote"
"(begin"
"(ser-push!_206 v_187)"
"(reap-stream!_205)))))))))))))))))))))))))))))))))))"
"(define-values"
"(sorted-hash-keys)"
"(lambda(ht_461)"
"(let-values(((ks_462)(hash-keys ht_461)))"
"(if(null? ks_462)"
"(let-values() ks_462)"
"(if(null?(cdr ks_462))"
"(let-values() ks_462)"
"(if(andmap2 symbol? ks_462)"
"(let-values()"
"(let-values(((ks14_463) ks_462)((symbol<?15_464) symbol<?))"
"(sort7.1 #f #f #f #f ks14_463 symbol<?15_464)))"
"(if(andmap2 scope? ks_462)"
"(let-values()"
"(let-values(((ks16_465) ks_462)((scope<?17_466) scope<?))"
"(sort7.1 #f #f #f #f ks16_465 scope<?17_466)))"
"(if(andmap2 shifted-multi-scope? ks_462)"
"(let-values()"
"(let-values(((ks18_467) ks_462)((shifted-multi-scope<?19_468) shifted-multi-scope<?))"
"(sort7.1 #f #f #f #f ks18_467 shifted-multi-scope<?19_468)))"
"(if(andmap2 real? ks_462)"
"(let-values()"
"(let-values(((ks20_469) ks_462)((<21_470) <))(sort7.1 #f #f #f #f ks20_469 <21_470)))"
"(let-values() ks_462))))))))))"
"(define-values"
"(deserialize)"
"(lambda(mpis_471"
" inspector_472"
" bulk-binding-registry_473"
" num-mutables_474"
" mutable-vec_475"
" num-shared_476"
" shared-vec_477"
" mutable-fill-vec_478"
" result-vec_479)"
"(let-values(((shared_480)(make-vector(+ num-mutables_474 num-shared_476) 'uninit)))"
"(let-values((()"
"(begin"
"(let-values(((start_483) 0)((end_484) num-mutables_474)((inc_485) 1))"
"(begin"
"(if(if(real? start_483)(if(real? end_484)(real? inc_485) #f) #f)"
"(void)"
"(let-values()(in-range start_483 end_484 inc_485)))"
"((letrec-values(((for-loop_486)"
"(lambda(pos_487 pos_488)"
"(if(< pos_488 end_484)"
"(let-values(((i_489) pos_488))"
"(let-values(((pos_490)"
"(let-values(((pos_491) pos_487))"
"(let-values(((pos_492)"
"(let-values()"
"(let-values(((d_493 next-pos_494)"
"(decode-shell"
" mutable-vec_475"
" pos_491"
" mpis_471"
" inspector_472"
" bulk-binding-registry_473"
" shared_480)))"
"(begin"
"(vector-set!"
" shared_480"
" i_489"
" d_493)"
" next-pos_494)))))"
"(values pos_492)))))"
"(if(not #f)(for-loop_486 pos_490(+ pos_488 inc_485)) pos_490)))"
" pos_487))))"
" for-loop_486)"
" 0"
" start_483)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_495) num-mutables_474)"
"((end_496)(+ num-mutables_474 num-shared_476))"
"((inc_497) 1))"
"(begin"
"(if(if(real? start_495)(if(real? end_496)(real? inc_497) #f) #f)"
"(void)"
"(let-values()(in-range start_495 end_496 inc_497)))"
"((letrec-values(((for-loop_498)"
"(lambda(pos_499 pos_500)"
"(if(< pos_500 end_496)"
"(let-values(((i_501) pos_500))"
"(let-values(((pos_502)"
"(let-values(((pos_503) pos_499))"
"(let-values(((pos_504)"
"(let-values()"
"(let-values(((d_505 next-pos_506)"
"(decode"
" shared-vec_477"
" pos_503"
" mpis_471"
" inspector_472"
" bulk-binding-registry_473"
" shared_480)))"
"(begin"
"(vector-set!"
" shared_480"
" i_501"
" d_505)"
" next-pos_506)))))"
"(values pos_504)))))"
"(if(not #f)(for-loop_498 pos_502(+ pos_500 inc_497)) pos_502)))"
" pos_499))))"
" for-loop_498)"
" 0"
" start_495)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_507) 0)"
"((end_508) num-mutables_474)"
"((inc_509) 1)"
"((vec_510 len_511)"
"(let-values(((vec_512) shared_480))"
"(begin"
"(if(vector? vec_512)(void)(let-values()(in-vector vec_512)))"
"(values vec_512(unsafe-vector-length vec_512))))))"
"(begin"
"(if(if(real? start_507)(if(real? end_508)(real? inc_509) #f) #f)"
"(void)"
"(let-values()(in-range start_507 end_508 inc_509)))"
" #f"
"((letrec-values(((for-loop_513)"
"(lambda(pos_514 pos_515 pos_516)"
"(if(if(< pos_515 end_508)(unsafe-fx< pos_516 len_511) #f)"
"(let-values(((v_518)(unsafe-vector-ref vec_510 pos_516)))"
"(let-values(((pos_519)"
"(let-values(((pos_520) pos_514))"
"(let-values(((pos_521)"
"(let-values()"
"(decode-fill!"
" v_518"
" mutable-fill-vec_478"
" pos_520"
" mpis_471"
" inspector_472"
" bulk-binding-registry_473"
" shared_480))))"
"(values pos_521)))))"
"(if(not #f)"
"(for-loop_513"
" pos_519"
"(+ pos_515 inc_509)"
"(unsafe-fx+ 1 pos_516))"
" pos_519)))"
" pos_514))))"
" for-loop_513)"
" 0"
" start_507"
" 0)))"
"(values))))"
"(let-values(((result_481 done-pos_482)"
"(decode result-vec_479 0 mpis_471 inspector_472 bulk-binding-registry_473 shared_480)))"
" result_481)))))))"
"(define-values"
"(decode-shell)"
"(lambda(vec_522 pos_523 mpis_524 inspector_525 bulk-binding-registry_526 shared_527)"
"(let-values(((tmp_528)(vector-ref vec_522 pos_523)))"
"(if(equal? tmp_528 '#:box)"
"(let-values()(values(box #f)(add1 pos_523)))"
"(if(equal? tmp_528 '#:vector)"
"(let-values()(values(make-vector(vector-ref vec_522(add1 pos_523)))(+ pos_523 2)))"
"(if(equal? tmp_528 '#:hash)"
"(let-values()(values(make-hasheq)(add1 pos_523)))"
"(if(equal? tmp_528 '#:hasheq)"
"(let-values()(values(make-hasheq)(add1 pos_523)))"
"(if(equal? tmp_528 '#:hasheqv)"
"(let-values()(values(make-hasheqv)(add1 pos_523)))"
"(let-values()"
"(decode vec_522 pos_523 mpis_524 inspector_525 bulk-binding-registry_526 shared_527))))))))))"
"(define-values"
"(decode)"
"(lambda(vec_529 pos_530 mpis_531 inspector_532 bulk-binding-registry_533 shared_534)"
"(let-values()"
"(let-values(((tmp_596)(vector-ref vec_529 pos_530)))"
"(let-values(((index_597)"
"(if(keyword? tmp_596)"
"(hash-ref"
" '#hasheq((#:scope+kind . 17)"
"(#:seteqv . 14)"
"(#:ref . 1)"
"(#:list . 12)"
"(#:vector . 12)"
"(#:module-binding . 23)"
"(#:set . 14)"
"(#:srcloc . 7)"
"(#:bulk-binding-at . 21)"
"(#:multi-scope . 18)"
"(#:hasheq . 13)"
"(#:simple-module-binding . 24)"
"(#:scope . 16)"
"(#:bulk-binding-registry . 3)"
"(#:hash . 13)"
"(#:shifted-multi-scope . 19)"
"(#:mpi . 9)"
"(#:quote . 8)"
"(#:prefab . 15)"
"(#:box . 10)"
"(#:local-binding . 25)"
"(#:bulk-binding . 26)"
"(#:inspector . 2)"
"(#:table-with-bulk-bindings . 20)"
"(#:seteq . 14)"
"(#:provided . 27)"
"(#:syntax . 4)"
"(#:cons . 11)"
"(#:hasheqv . 13)"
"(#:datum->syntax . 5)"
"(#:syntax+props . 6)"
"(#:representative-scope . 22))"
" tmp_596"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_597 13)"
"(if(unsafe-fx< index_597 6)"
"(if(unsafe-fx< index_597 2)"
"(if(unsafe-fx< index_597 1)"
"(let-values()(values(vector-ref vec_529 pos_530)(add1 pos_530)))"
"(let-values()(values(vector-ref shared_534(vector-ref vec_529(add1 pos_530)))(+ pos_530 2))))"
"(if(unsafe-fx< index_597 3)"
"(let-values()(values inspector_532(add1 pos_530)))"
"(if(unsafe-fx< index_597 4)"
"(let-values()(values bulk-binding-registry_533(add1 pos_530)))"
"(if(unsafe-fx< index_597 5)"
"(let-values()"
"(let-values(((content_598 next-pos_599)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((context_600 next-pos_601)"
"(let-values(((i_602)(vector-ref vec_529 next-pos_599)))"
"(if(exact-integer? i_602)"
"(values(vector-ref shared_534 i_602)(add1 next-pos_599))"
"(decode"
" vec_529"
" next-pos_599"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))))"
"(let-values(((srcloc_603 next-pos_604)"
"(let-values(((i_605)(vector-ref vec_529 next-pos_601)))"
"(if(exact-integer? i_605)"
"(values(vector-ref shared_534 i_605)(add1 next-pos_601))"
"(decode"
" vec_529"
" next-pos_601"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))))"
"(values"
"(deserialize-syntax content_598 context_600 srcloc_603 #f #f inspector_532)"
" next-pos_604)))))"
"(let-values()"
"(let-values(((content_606 next-pos_607)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((context_608 next-pos_609)"
"(let-values(((i_610)(vector-ref vec_529 next-pos_607)))"
"(if(exact-integer? i_610)"
"(values(vector-ref shared_534 i_610)(add1 next-pos_607))"
"(decode"
" vec_529"
" next-pos_607"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))))"
"(let-values(((srcloc_611 next-pos_612)"
"(let-values(((i_613)(vector-ref vec_529 next-pos_609)))"
"(if(exact-integer? i_613)"
"(values(vector-ref shared_534 i_613)(add1 next-pos_609))"
"(decode"
" vec_529"
" next-pos_609"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))))"
"(values"
"(deserialize-datum->syntax content_606 context_608 srcloc_611 inspector_532)"
" next-pos_612)))))))))"
"(if(unsafe-fx< index_597 9)"
"(if(unsafe-fx< index_597 7)"
"(let-values()"
"(let-values(((content_614 next-pos_615)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((context_616 next-pos_617)"
"(let-values(((i_618)(vector-ref vec_529 next-pos_615)))"
"(if(exact-integer? i_618)"
"(values(vector-ref shared_534 i_618)(add1 next-pos_615))"
"(decode"
" vec_529"
" next-pos_615"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))))"
"(let-values(((srcloc_619 next-pos_620)"
"(let-values(((i_621)(vector-ref vec_529 next-pos_617)))"
"(if(exact-integer? i_621)"
"(values(vector-ref shared_534 i_621)(add1 next-pos_617))"
"(decode"
" vec_529"
" next-pos_617"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))))"
"(let-values(((props_622 next-pos_623)"
"(decode"
" vec_529"
" next-pos_620"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((tamper_624 next-pos_625)"
"(decode"
" vec_529"
" next-pos_623"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values"
"(deserialize-syntax"
" content_614"
" context_616"
" srcloc_619"
" props_622"
" tamper_624"
" inspector_532)"
" next-pos_625)))))))"
"(if(unsafe-fx< index_597 8)"
"(let-values()"
"(let-values(((source_626 next-pos_627)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((line_628 next-pos_629)"
"(decode"
" vec_529"
" next-pos_627"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((column_630 next-pos_631)"
"(decode"
" vec_529"
" next-pos_629"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((position_632 next-pos_633)"
"(decode"
" vec_529"
" next-pos_631"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((span_634 next-pos_635)"
"(decode"
" vec_529"
" next-pos_633"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values"
"(srcloc source_626 line_628 column_630 position_632 span_634)"
" next-pos_635)))))))"
"(let-values()(values(vector-ref vec_529(add1 pos_530))(+ pos_530 2)))))"
"(if(unsafe-fx< index_597 10)"
"(let-values()(values(vector-ref mpis_531(vector-ref vec_529(add1 pos_530)))(+ pos_530 2)))"
"(if(unsafe-fx< index_597 11)"
"(let-values()"
"(let-values(((v_636 next-pos_637)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values(box-immutable v_636) next-pos_637)))"
"(if(unsafe-fx< index_597 12)"
"(let-values()"
"(let-values(((a_638 next-pos_639)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((d_640 next-pos_641)"
"(decode"
" vec_529"
" next-pos_639"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values(cons a_638 d_640) next-pos_641))))"
"(let-values()"
"(let-values(((len_642)(vector-ref vec_529(add1 pos_530))))"
"(let-values(((r_643)(make-vector len_642)))"
"(let-values(((next-pos_644)"
"(let-values(((start_645) 0)((end_646) len_642)((inc_647) 1))"
"(begin"
"(if(if(real? start_645)(if(real? end_646)(real? inc_647) #f) #f)"
"(void)"
"(let-values()(in-range start_645 end_646 inc_647)))"
"((letrec-values(((for-loop_648)"
"(lambda(pos_649 pos_650)"
"(if(< pos_650 end_646)"
"(let-values(((i_651) pos_650))"
"(let-values(((pos_652)"
"(let-values(((pos_653) pos_649))"
"(let-values(((pos_654)"
"(let-values()"
"(let-values(((v_655"
" next-pos_656)"
"(let-values(((v_657"
" next-pos_658)"
"(decode"
" vec_529"
" pos_653"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values"
" v_657"
" next-pos_658))))"
"(begin"
"(vector-set!"
" r_643"
" i_651"
" v_655)"
" next-pos_656)))))"
"(values pos_654)))))"
"(if(not #f)"
"(for-loop_648 pos_652(+ pos_650 inc_647))"
" pos_652)))"
" pos_649))))"
" for-loop_648)"
"(+ pos_530 2)"
" start_645)))))"
"(values"
"(if(eq?(vector-ref vec_529 pos_530) '#:list)"
"(vector->list r_643)"
"(vector->immutable-vector r_643))"
" next-pos_644))))))))))"
"(if(unsafe-fx< index_597 20)"
"(if(unsafe-fx< index_597 16)"
"(if(unsafe-fx< index_597 14)"
"(let-values()"
"(let-values(((ht_659)"
"(let-values(((tmp_661)(vector-ref vec_529 pos_530)))"
"(if(equal? tmp_661 '#:hash)"
"(let-values()(hash))"
"(if(equal? tmp_661 '#:hasheq)"
"(let-values()(hasheq))"
"(if(equal? tmp_661 '#:hasheqv)"
"(let-values()(hasheqv))"
"(let-values()(void))))))))"
"(let-values(((len_660)(vector-ref vec_529(add1 pos_530))))"
"(let-values(((start_662) 0)((end_663) len_660)((inc_664) 1))"
"(begin"
"(if(if(real? start_662)(if(real? end_663)(real? inc_664) #f) #f)"
"(void)"
"(let-values()(in-range start_662 end_663 inc_664)))"
"((letrec-values(((for-loop_665)"
"(lambda(ht_666 pos_667 pos_668)"
"(if(< pos_668 end_663)"
"(let-values()"
"(let-values(((ht_670 pos_671)"
"(let-values(((ht_672) ht_666)((pos_673) pos_667))"
"(let-values(((ht_674 pos_675)"
"(let-values()"
"(let-values(((k_676 next-pos_677)"
"(decode"
" vec_529"
" pos_673"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((v_678 next-pos_679)"
"(decode"
" vec_529"
" next-pos_677"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values"
"(hash-set ht_672 k_676 v_678)"
" next-pos_679))))))"
"(values ht_674 pos_675)))))"
"(if(not #f)"
"(for-loop_665 ht_670 pos_671(+ pos_668 inc_664))"
"(values ht_670 pos_671))))"
"(values ht_666 pos_667)))))"
" for-loop_665)"
" ht_659"
"(+ pos_530 2)"
" start_662))))))"
"(if(unsafe-fx< index_597 15)"
"(let-values()"
"(let-values(((s_680)"
"(let-values(((tmp_682)(vector-ref vec_529 pos_530)))"
"(if(equal? tmp_682 '#:set)"
"(let-values()(set))"
"(if(equal? tmp_682 '#:seteq)"
"(let-values()(seteq))"
"(if(equal? tmp_682 '#:seteqv)"
"(let-values()(seteqv))"
"(let-values()(void))))))))"
"(let-values(((len_681)(vector-ref vec_529(add1 pos_530))))"
"(let-values(((start_683) 0)((end_684) len_681)((inc_685) 1))"
"(begin"
"(if(if(real? start_683)(if(real? end_684)(real? inc_685) #f) #f)"
"(void)"
"(let-values()(in-range start_683 end_684 inc_685)))"
"((letrec-values(((for-loop_686)"
"(lambda(s_687 pos_688 pos_689)"
"(if(< pos_689 end_684)"
"(let-values()"
"(let-values(((s_691 pos_692)"
"(let-values(((s_693) s_687)((pos_694) pos_688))"
"(let-values(((s_695 pos_696)"
"(let-values()"
"(let-values(((k_697 next-pos_698)"
"(decode"
" vec_529"
" pos_694"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values"
"(set-add s_693 k_697)"
" next-pos_698)))))"
"(values s_695 pos_696)))))"
"(if(not #f)"
"(for-loop_686 s_691 pos_692(+ pos_689 inc_685))"
"(values s_691 pos_692))))"
"(values s_687 pos_688)))))"
" for-loop_686)"
" s_680"
"(+ pos_530 2)"
" start_683))))))"
"(let-values()"
"(let-values(((key_699 next-pos_700)"
"(let-values(((k_704 next-pos_705)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values k_704 next-pos_705))))"
"(let-values(((len_701)(vector-ref vec_529 next-pos_700)))"
"(let-values(((r_702 done-pos_703)"
"(let-values(((start_706) 0)((end_707) len_701)((inc_708) 1))"
"(begin"
"(if(if(real? start_706)(if(real? end_707)(real? inc_708) #f) #f)"
"(void)"
"(let-values()(in-range start_706 end_707 inc_708)))"
"((letrec-values(((for-loop_709)"
"(lambda(r_710 pos_711 pos_712)"
"(if(< pos_712 end_707)"
"(let-values()"
"(let-values(((r_714 pos_715)"
"(let-values(((r_716) r_710)"
"((pos_717) pos_711))"
"(let-values(((r_718 pos_719)"
"(let-values()"
"(let-values(((v_720"
" next-pos_721)"
"(decode"
" vec_529"
" pos_717"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values"
"(cons"
" v_720"
" r_716)"
" next-pos_721)))))"
"(values r_718 pos_719)))))"
"(if(not #f)"
"(for-loop_709 r_714 pos_715(+ pos_712 inc_708))"
"(values r_714 pos_715))))"
"(values r_710 pos_711)))))"
" for-loop_709)"
" null"
"(add1 next-pos_700)"
" start_706)))))"
"(values(apply make-prefab-struct key_699(alt-reverse r_702)) done-pos_703)))))))"
"(if(unsafe-fx< index_597 17)"
"(let-values()(values(deserialize-scope)(add1 pos_530)))"
"(if(unsafe-fx< index_597 18)"
"(let-values()"
"(let-values(((kind_722 next-pos_723)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values(deserialize-scope kind_722) next-pos_723)))"
"(if(unsafe-fx< index_597 19)"
"(let-values()"
"(let-values(((name_724 next-pos_725)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((scopes_726 next-pos_727)"
"(decode"
" vec_529"
" next-pos_725"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values(deserialize-multi-scope name_724 scopes_726) next-pos_727))))"
"(let-values()"
"(let-values(((phase_728 next-pos_729)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((multi-scope_730 next-pos_731)"
"(decode"
" vec_529"
" next-pos_729"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values(deserialize-shifted-multi-scope phase_728 multi-scope_730) next-pos_731))))))))"
"(if(unsafe-fx< index_597 23)"
"(if(unsafe-fx< index_597 21)"
"(let-values()"
"(let-values(((syms_732 next-pos_733)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((bulk-bindings_734 next-pos_735)"
"(decode"
" vec_529"
" next-pos_733"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values(deserialize-table-with-bulk-bindings syms_732 bulk-bindings_734) next-pos_735))))"
"(if(unsafe-fx< index_597 22)"
"(let-values()"
"(let-values(((scopes_736 next-pos_737)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((bulk_738 next-pos_739)"
"(decode"
" vec_529"
" next-pos_737"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values(deserialize-bulk-binding-at scopes_736 bulk_738) next-pos_739))))"
"(let-values()"
"(let-values(((kind_740 next-pos_741)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((phase_742 next-pos_743)"
"(decode"
" vec_529"
" next-pos_741"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values(deserialize-representative-scope kind_740 phase_742) next-pos_743))))))"
"(if(unsafe-fx< index_597 25)"
"(if(unsafe-fx< index_597 24)"
"(let-values()"
"(let-values(((module_744 next-pos_745)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((sym_746 next-pos_747)"
"(decode"
" vec_529"
" next-pos_745"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((phase_748 next-pos_749)"
"(decode"
" vec_529"
" next-pos_747"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((nominal-module_750 next-pos_751)"
"(decode"
" vec_529"
" next-pos_749"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((nominal-phase_752 next-pos_753)"
"(decode"
" vec_529"
" next-pos_751"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((nominal-sym_754 next-pos_755)"
"(decode"
" vec_529"
" next-pos_753"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((nominal-require-phase_756 next-pos_757)"
"(decode"
" vec_529"
" next-pos_755"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((free=id_758 next-pos_759)"
"(decode"
" vec_529"
" next-pos_757"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((extra-inspector_760 next-pos_761)"
"(decode"
" vec_529"
" next-pos_759"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((extra-nominal-bindings_762 next-pos_763)"
"(decode"
" vec_529"
" next-pos_761"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values"
"(deserialize-full-module-binding"
" module_744"
" sym_746"
" phase_748"
" nominal-module_750"
" nominal-phase_752"
" nominal-sym_754"
" nominal-require-phase_756"
" free=id_758"
" extra-inspector_760"
" extra-nominal-bindings_762)"
" next-pos_763))))))))))))"
"(let-values()"
"(let-values(((module_764 next-pos_765)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((sym_766 next-pos_767)"
"(decode"
" vec_529"
" next-pos_765"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((phase_768 next-pos_769)"
"(decode"
" vec_529"
" next-pos_767"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((nominal-module_770 next-pos_771)"
"(decode"
" vec_529"
" next-pos_769"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values"
"(deserialize-simple-module-binding module_764 sym_766 phase_768 nominal-module_770)"
" next-pos_771)))))))"
"(if(unsafe-fx< index_597 26)"
"(let-values()"
"(let-values(((key_772 next-pos_773)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((free=id_774 next-pos_775)"
"(decode"
" vec_529"
" next-pos_773"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values(deserialize-full-local-binding key_772 free=id_774) next-pos_775))))"
"(if(unsafe-fx< index_597 27)"
"(let-values()"
"(let-values(((prefix_776 next-pos_777)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((excepts_778 next-pos_779)"
"(decode"
" vec_529"
" next-pos_777"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((mpi_780 next-pos_781)"
"(decode"
" vec_529"
" next-pos_779"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((provide-phase-level_782 next-pos_783)"
"(decode"
" vec_529"
" next-pos_781"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((phase-shift_784 next-pos_785)"
"(decode"
" vec_529"
" next-pos_783"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((bulk-binding-registry_786 next-pos_787)"
"(decode"
" vec_529"
" next-pos_785"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values"
"(deserialize-bulk-binding"
" prefix_776"
" excepts_778"
" mpi_780"
" provide-phase-level_782"
" phase-shift_784"
" bulk-binding-registry_786)"
" next-pos_787))))))))"
"(let-values()"
"(let-values(((binding_788 next-pos_789)"
"(decode"
" vec_529"
"(add1 pos_530)"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((protected?_790 next-pos_791)"
"(decode"
" vec_529"
" next-pos_789"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(let-values(((syntax?_792 next-pos_793)"
"(decode"
" vec_529"
" next-pos_791"
" mpis_531"
" inspector_532"
" bulk-binding-registry_533"
" shared_534)))"
"(values"
"(deserialize-provided binding_788 protected?_790 syntax?_792)"
" next-pos_793))))))))))))))))"
"(define-values"
"(decode-fill!)"
"(lambda(v_794 vec_795 pos_796 mpis_797 inspector_798 bulk-binding-registry_799 shared_800)"
"(let-values(((tmp_801)(vector-ref vec_795 pos_796)))"
"(if(equal? tmp_801 #f)"
"(let-values()(add1 pos_796))"
"(if(equal? tmp_801 '#:set-box!)"
"(let-values()"
"(let-values(((c_802 next-pos_803)"
"(decode vec_795(add1 pos_796) mpis_797 inspector_798 bulk-binding-registry_799 shared_800)))"
"(begin(set-box! v_794 c_802) next-pos_803)))"
"(if(equal? tmp_801 '#:set-vector!)"
"(let-values()"
"(let-values(((len_804)(vector-ref vec_795(add1 pos_796))))"
"(let-values(((start_805) 0)((end_806) len_804)((inc_807) 1))"
"(begin"
"(if(if(real? start_805)(if(real? end_806)(real? inc_807) #f) #f)"
"(void)"
"(let-values()(in-range start_805 end_806 inc_807)))"
"((letrec-values(((for-loop_808)"
"(lambda(pos_809 pos_810)"
"(if(< pos_810 end_806)"
"(let-values(((i_811) pos_810))"
"(let-values(((pos_812)"
"(let-values(((pos_813) pos_809))"
"(let-values(((pos_814)"
"(let-values()"
"(let-values(((c_815 next-pos_816)"
"(decode"
" vec_795"
" pos_813"
" mpis_797"
" inspector_798"
" bulk-binding-registry_799"
" shared_800)))"
"(begin"
"(vector-set! v_794 i_811 c_815)"
" next-pos_816)))))"
"(values pos_814)))))"
"(if(not #f)(for-loop_808 pos_812(+ pos_810 inc_807)) pos_812)))"
" pos_809))))"
" for-loop_808)"
"(+ pos_796 2)"
" start_805)))))"
"(if(equal? tmp_801 '#:set-hash!)"
"(let-values()"
"(let-values(((len_817)(vector-ref vec_795(add1 pos_796))))"
"(let-values(((start_818) 0)((end_819) len_817)((inc_820) 1))"
"(begin"
"(if(if(real? start_818)(if(real? end_819)(real? inc_820) #f) #f)"
"(void)"
"(let-values()(in-range start_818 end_819 inc_820)))"
"((letrec-values(((for-loop_821)"
"(lambda(pos_822 pos_823)"
"(if(< pos_823 end_819)"
"(let-values()"
"(let-values(((pos_825)"
"(let-values(((pos_826) pos_822))"
"(let-values(((pos_827)"
"(let-values()"
"(let-values(((key_828 next-pos_829)"
"(decode"
" vec_795"
" pos_826"
" mpis_797"
" inspector_798"
" bulk-binding-registry_799"
" shared_800)))"
"(let-values(((val_830 done-pos_831)"
"(decode"
" vec_795"
" next-pos_829"
" mpis_797"
" inspector_798"
" bulk-binding-registry_799"
" shared_800)))"
"(begin"
"(hash-set! v_794 key_828 val_830)"
" done-pos_831))))))"
"(values pos_827)))))"
"(if(not #f)(for-loop_821 pos_825(+ pos_823 inc_820)) pos_825)))"
" pos_822))))"
" for-loop_821)"
"(+ pos_796 2)"
" start_818)))))"
"(if(equal? tmp_801 '#:scope-fill!)"
"(let-values()"
"(let-values(((c_832 next-pos_833)"
"(decode"
" vec_795"
"(add1 pos_796)"
" mpis_797"
" inspector_798"
" bulk-binding-registry_799"
" shared_800)))"
"(begin(deserialize-scope-fill! v_794 c_832) next-pos_833)))"
"(if(equal? tmp_801 '#:representative-scope-fill!)"
"(let-values()"
"(let-values(((a_834 next-pos_835)"
"(decode"
" vec_795"
"(add1 pos_796)"
" mpis_797"
" inspector_798"
" bulk-binding-registry_799"
" shared_800)))"
"(let-values(((d_836 done-pos_837)"
"(decode"
" vec_795"
" next-pos_835"
" mpis_797"
" inspector_798"
" bulk-binding-registry_799"
" shared_800)))"
"(begin(deserialize-representative-scope-fill! v_794 a_834 d_836) done-pos_837))))"
"                  (let-values () (error 'deserialize \"bad fill encoding: ~v\" (vector-ref vec_795 pos_796))))))))))))"
"(define-values"
"(find-reachable-scopes)"
"(lambda(v_838)"
"(let-values(((seen_839)(make-hasheq)))"
"(let-values(((reachable-scopes_840)(seteq)))"
"(let-values(((scope-triggers_841)(make-hasheq)))"
"(begin"
"((letrec-values(((loop_842)"
"(lambda(v_843)"
"(if(interned-literal? v_843)"
"(let-values()(void))"
"(if(hash-ref seen_839 v_843 #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(hash-set! seen_839 v_843 #t)"
"(if(scope-with-bindings? v_843)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! reachable-scopes_840"
"(set-add reachable-scopes_840 v_843))"
"(values))))"
"(let-values((()"
"(begin((reach-scopes-ref v_843) v_843 loop_842)(values))))"
"(let-values(((l_844)(hash-ref scope-triggers_841 v_843 null)))"
"(begin"
"(let-values(((lst_845) l_844))"
"(begin"
"(if(list? lst_845)(void)(let-values()(in-list lst_845)))"
"((letrec-values(((for-loop_846)"
"(lambda(lst_847)"
"(if(pair? lst_847)"
"(let-values(((v_848)"
"(unsafe-car lst_847))"
"((rest_849)"
"(unsafe-cdr lst_847)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_842"
" v_848))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_846 rest_849)"
"(values))))"
"(values)))))"
" for-loop_846)"
" lst_845)))"
"(void)"
"((scope-with-bindings-ref v_843)"
" v_843"
" reachable-scopes_840"
" loop_842"
"(lambda(sc-unreachable_850 b_851)"
"(hash-update!"
" scope-triggers_841"
" sc-unreachable_850"
"(lambda(l_852)(cons b_851 l_852))"
" null))))))))"
"(if(reach-scopes? v_843)"
"(let-values()((reach-scopes-ref v_843) v_843 loop_842))"
"(if(pair? v_843)"
"(let-values()(begin(loop_842(car v_843))(loop_842(cdr v_843))))"
"(if(vector? v_843)"
"(let-values()"
"(begin"
"(let-values(((vec_853 len_854)"
"(let-values(((vec_855) v_843))"
"(begin"
"(if(vector? vec_855)"
"(void)"
"(let-values()(in-vector vec_855)))"
"(values"
" vec_855"
"(unsafe-vector-length vec_855))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_856)"
"(lambda(pos_857)"
"(if(unsafe-fx< pos_857 len_854)"
"(let-values(((e_858)"
"(unsafe-vector-ref"
" vec_853"
" pos_857)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_842"
" e_858))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_856"
"(unsafe-fx+ 1 pos_857))"
"(values))))"
"(values)))))"
" for-loop_856)"
" 0)))"
"(void)))"
"(if(box? v_843)"
"(let-values()(loop_842(unbox v_843)))"
"(if(hash? v_843)"
"(let-values()"
"(begin"
"(let-values(((ht_859) v_843))"
"(begin"
"(if((lambda(ht_860)(hash? ht_860)) ht_859)"
"(void)"
"(let-values()(default-in-hash ht_859)))"
"((letrec-values(((for-loop_861)"
"(lambda(i_862)"
"(if i_862"
"(let-values(((k_863 v_864)"
"(hash-iterate-key+value"
" ht_859"
" i_862)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_842"
" k_863)"
"(loop_842"
" v_864)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_861"
"(hash-iterate-next"
" ht_859"
" i_862))"
"(values))))"
"(values)))))"
" for-loop_861)"
"(hash-iterate-first ht_859))))"
"(void)))"
"(if(prefab-struct-key v_843)"
"(let-values()"
"(begin"
"(let-values(((v*_865 start*_866 stop*_867 step*_868)"
"(normalise-inputs"
" 'in-vector"
"                                                                         \"vector\""
"(lambda(x_869)(vector? x_869))"
"(lambda(x_870)(unsafe-vector-length x_870))"
"(struct->vector v_843)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_871)"
"(lambda(idx_872)"
"(if(unsafe-fx< idx_872 stop*_867)"
"(let-values(((e_873)"
"(unsafe-vector-ref"
" v*_865"
" idx_872)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_842"
" e_873))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_871"
"(unsafe-fx+ idx_872 1))"
"(values))))"
"(values)))))"
" for-loop_871)"
" start*_866)))"
"(void)))"
"(let-values()(void))))))))))))))))"
" loop_842)"
" v_838)"
" reachable-scopes_840))))))"
"(define-values"
"(deserialize-imports)"
" '(deserialize-module-path-indexes syntax-module-path-index-shift syntax-shift-phase-level module-use deserialize))"
"(define-values"
"(deserialize-instance)"
"(1/make-instance"
" 'deserialize"
" #f"
" 'deserialize-module-path-indexes"
" deserialize-module-path-indexes"
" 'syntax-module-path-index-shift"
" syntax-module-path-index-shift17.1"
" 'syntax-shift-phase-level"
" syntax-shift-phase-level$1"
" 'module-use"
" module-use1.1"
" 'deserialize"
" deserialize))"
"(void)"
"(void)"
"(define-values"
"(struct:parsed parsed1.1 parsed? parsed-s)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()(let-values()(make-struct-type 'parsed #f 1 0 #f null #f #f '(0) #f 'parsed)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 's))))"
"(define-values"
"(struct:parsed-id parsed-id2.1 parsed-id? parsed-id-binding parsed-id-inspector)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-id"
" struct:parsed"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-id)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'binding)"
"(make-struct-field-accessor -ref_24 1 'inspector))))"
"(define-values"
"(struct:parsed-primitive-id parsed-primitive-id3.1 parsed-primitive-id?)"
"(let-values(((struct:_46 make-_47 ?_48 -ref_49 -set!_50)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-primitive-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-primitive-id)))))"
"(values struct:_46 make-_47 ?_48)))"
"(define-values"
"(struct:parsed-top-id parsed-top-id4.1 parsed-top-id?)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-top-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-top-id)))))"
"(values struct:_61 make-_62 ?_63)))"
"(define-values"
"(struct:parsed-lambda parsed-lambda5.1 parsed-lambda? parsed-lambda-keys parsed-lambda-body)"
"(let-values(((struct:_76 make-_77 ?_78 -ref_79 -set!_80)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-lambda"
" struct:parsed"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-lambda)))))"
"(values"
" struct:_76"
" make-_77"
" ?_78"
"(make-struct-field-accessor -ref_79 0 'keys)"
"(make-struct-field-accessor -ref_79 1 'body))))"
"(define-values"
"(struct:parsed-case-lambda parsed-case-lambda6.1 parsed-case-lambda? parsed-case-lambda-clauses)"
"(let-values(((struct:_101 make-_102 ?_103 -ref_104 -set!_105)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-case-lambda"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-case-lambda)))))"
"(values struct:_101 make-_102 ?_103(make-struct-field-accessor -ref_104 0 'clauses))))"
"(define-values"
"(struct:parsed-app parsed-app7.1 parsed-app? parsed-app-rator+rands)"
"(let-values(((struct:_121 make-_122 ?_123 -ref_124 -set!_125)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-app"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-app)))))"
"(values struct:_121 make-_122 ?_123(make-struct-field-accessor -ref_124 0 'rator+rands))))"
"(define-values"
"(struct:parsed-if parsed-if8.1 parsed-if? parsed-if-tst parsed-if-thn parsed-if-els)"
"(let-values(((struct:_141 make-_142 ?_143 -ref_144 -set!_145)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-if"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-if)))))"
"(values"
" struct:_141"
" make-_142"
" ?_143"
"(make-struct-field-accessor -ref_144 0 'tst)"
"(make-struct-field-accessor -ref_144 1 'thn)"
"(make-struct-field-accessor -ref_144 2 'els))))"
"(define-values"
"(struct:parsed-set! parsed-set!9.1 parsed-set!? parsed-set!-id parsed-set!-rhs)"
"(let-values(((struct:_171 make-_172 ?_173 -ref_174 -set!_175)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-set!"
" struct:parsed"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-set!)))))"
"(values"
" struct:_171"
" make-_172"
" ?_173"
"(make-struct-field-accessor -ref_174 0 'id)"
"(make-struct-field-accessor -ref_174 1 'rhs))))"
"(define-values"
"(struct:parsed-with-continuation-mark"
" parsed-with-continuation-mark10.1"
" parsed-with-continuation-mark?"
" parsed-with-continuation-mark-key"
" parsed-with-continuation-mark-val"
" parsed-with-continuation-mark-body)"
"(let-values(((struct:_196 make-_197 ?_198 -ref_199 -set!_200)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-with-continuation-mark"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-with-continuation-mark)))))"
"(values"
" struct:_196"
" make-_197"
" ?_198"
"(make-struct-field-accessor -ref_199 0 'key)"
"(make-struct-field-accessor -ref_199 1 'val)"
"(make-struct-field-accessor -ref_199 2 'body))))"
"(define-values"
"(struct:parsed-#%variable-reference"
" parsed-#%variable-reference11.1"
" parsed-#%variable-reference?"
" parsed-#%variable-reference-id)"
"(let-values(((struct:_226 make-_227 ?_228 -ref_229 -set!_230)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%variable-reference"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%variable-reference)))))"
"(values struct:_226 make-_227 ?_228(make-struct-field-accessor -ref_229 0 'id))))"
"(define-values"
"(struct:parsed-begin parsed-begin12.1 parsed-begin? parsed-begin-body)"
"(let-values(((struct:_246 make-_247 ?_248 -ref_249 -set!_250)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin)))))"
"(values struct:_246 make-_247 ?_248(make-struct-field-accessor -ref_249 0 'body))))"
"(define-values"
"(struct:parsed-begin0 parsed-begin013.1 parsed-begin0? parsed-begin0-body)"
"(let-values(((struct:_266 make-_267 ?_268 -ref_269 -set!_270)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin0"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin0)))))"
"(values struct:_266 make-_267 ?_268(make-struct-field-accessor -ref_269 0 'body))))"
"(define-values"
"(struct:parsed-quote parsed-quote14.1 parsed-quote? parsed-quote-datum)"
"(let-values(((struct:_286 make-_287 ?_288 -ref_289 -set!_290)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote)))))"
"(values struct:_286 make-_287 ?_288(make-struct-field-accessor -ref_289 0 'datum))))"
"(define-values"
"(struct:parsed-quote-syntax parsed-quote-syntax15.1 parsed-quote-syntax? parsed-quote-syntax-datum)"
"(let-values(((struct:_306 make-_307 ?_308 -ref_309 -set!_310)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote-syntax)))))"
"(values struct:_306 make-_307 ?_308(make-struct-field-accessor -ref_309 0 'datum))))"
"(define-values"
"(struct:parsed-let_-values"
" parsed-let_-values16.1"
" parsed-let_-values?"
" parsed-let_-values-idss"
" parsed-let_-values-clauses"
" parsed-let_-values-body)"
"(let-values(((struct:_326 make-_327 ?_328 -ref_329 -set!_330)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let_-values"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-let_-values)))))"
"(values"
" struct:_326"
" make-_327"
" ?_328"
"(make-struct-field-accessor -ref_329 0 'idss)"
"(make-struct-field-accessor -ref_329 1 'clauses)"
"(make-struct-field-accessor -ref_329 2 'body))))"
"(define-values"
"(struct:parsed-let-values parsed-let-values17.1 parsed-let-values?)"
"(let-values(((struct:_356 make-_357 ?_358 -ref_359 -set!_360)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-let-values)))))"
"(values struct:_356 make-_357 ?_358)))"
"(define-values"
"(struct:parsed-letrec-values parsed-letrec-values18.1 parsed-letrec-values?)"
"(let-values(((struct:_371 make-_372 ?_373 -ref_374 -set!_375)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-letrec-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-letrec-values)))))"
"(values struct:_371 make-_372 ?_373)))"
"(define-values"
"(struct:parsed-define-values"
" parsed-define-values19.1"
" parsed-define-values?"
" parsed-define-values-ids"
" parsed-define-values-syms"
" parsed-define-values-rhs)"
"(let-values(((struct:_386 make-_387 ?_388 -ref_389 -set!_390)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-values"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-values)))))"
"(values"
" struct:_386"
" make-_387"
" ?_388"
"(make-struct-field-accessor -ref_389 0 'ids)"
"(make-struct-field-accessor -ref_389 1 'syms)"
"(make-struct-field-accessor -ref_389 2 'rhs))))"
"(define-values"
"(struct:parsed-define-syntaxes"
" parsed-define-syntaxes20.1"
" parsed-define-syntaxes?"
" parsed-define-syntaxes-ids"
" parsed-define-syntaxes-syms"
" parsed-define-syntaxes-rhs)"
"(let-values(((struct:_416 make-_417 ?_418 -ref_419 -set!_420)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-syntaxes"
" struct:parsed"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-syntaxes)))))"
"(values"
" struct:_416"
" make-_417"
" ?_418"
"(make-struct-field-accessor -ref_419 0 'ids)"
"(make-struct-field-accessor -ref_419 1 'syms)"
"(make-struct-field-accessor -ref_419 2 'rhs))))"
"(define-values"
"(struct:parsed-begin-for-syntax parsed-begin-for-syntax21.1 parsed-begin-for-syntax? parsed-begin-for-syntax-body)"
"(let-values(((struct:_446 make-_447 ?_448 -ref_449 -set!_450)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin-for-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin-for-syntax)))))"
"(values struct:_446 make-_447 ?_448(make-struct-field-accessor -ref_449 0 'body))))"
"(define-values"
"(struct:parsed-#%declare parsed-#%declare22.1 parsed-#%declare?)"
"(let-values(((struct:_466 make-_467 ?_468 -ref_469 -set!_470)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%declare"
" struct:parsed"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-#%declare)))))"
"(values struct:_466 make-_467 ?_468)))"
"(define-values"
"(struct:parsed-require parsed-require23.1 parsed-require?)"
"(let-values(((struct:_481 make-_482 ?_483 -ref_484 -set!_485)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-require"
" struct:parsed"
" 0"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-require)))))"
"(values struct:_481 make-_482 ?_483)))"
"(define-values"
"(struct:parsed-#%module-begin parsed-#%module-begin24.1 parsed-#%module-begin? parsed-#%module-begin-body)"
"(let-values(((struct:_496 make-_497 ?_498 -ref_499 -set!_500)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%module-begin"
" struct:parsed"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%module-begin)))))"
"(values struct:_496 make-_497 ?_498(make-struct-field-accessor -ref_499 0 'body))))"
"(define-values"
"(struct:parsed-module"
" parsed-module25.1"
" parsed-module?"
" parsed-module-star?"
" parsed-module-name-id"
" parsed-module-self"
" parsed-module-requires"
" parsed-module-provides"
" parsed-module-root-ctx-simple?"
" parsed-module-encoded-root-ctx"
" parsed-module-body"
" parsed-module-compiled-module"
" parsed-module-compiled-submodules)"
"(let-values(((struct:_516 make-_517 ?_518 -ref_519 -set!_520)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-module"
" struct:parsed"
" 10"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9)"
" #f"
" 'parsed-module)))))"
"(values"
" struct:_516"
" make-_517"
" ?_518"
"(make-struct-field-accessor -ref_519 0 'star?)"
"(make-struct-field-accessor -ref_519 1 'name-id)"
"(make-struct-field-accessor -ref_519 2 'self)"
"(make-struct-field-accessor -ref_519 3 'requires)"
"(make-struct-field-accessor -ref_519 4 'provides)"
"(make-struct-field-accessor -ref_519 5 'root-ctx-simple?)"
"(make-struct-field-accessor -ref_519 6 'encoded-root-ctx)"
"(make-struct-field-accessor -ref_519 7 'body)"
"(make-struct-field-accessor -ref_519 8 'compiled-module)"
"(make-struct-field-accessor -ref_519 9 'compiled-submodules))))"
"(void)"
"(void)"
"(define-values"
"(struct:compiled-in-memory"
" compiled-in-memory1.1"
" compiled-in-memory?"
" compiled-in-memory-linklet-directory"
" compiled-in-memory-original-self"
" compiled-in-memory-requires"
" compiled-in-memory-provides"
" compiled-in-memory-phase-to-link-module-uses"
" compiled-in-memory-compile-time-inspector"
" compiled-in-memory-phase-to-link-extra-inspectorsss"
" compiled-in-memory-mpis"
" compiled-in-memory-syntax-literals"
" compiled-in-memory-pre-compiled-in-memorys"
" compiled-in-memory-post-compiled-in-memorys"
" compiled-in-memory-namespace-scopes"
" compiled-in-memory-purely-functional?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compiled-in-memory"
" #f"
" 13"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(cim_84 port_85 mode_86)(write(compiled-in-memory-linklet-directory cim_84) port_85))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12)"
" #f"
" 'compiled-in-memory)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'linklet-directory)"
"(make-struct-field-accessor -ref_4 1 'original-self)"
"(make-struct-field-accessor -ref_4 2 'requires)"
"(make-struct-field-accessor -ref_4 3 'provides)"
"(make-struct-field-accessor -ref_4 4 'phase-to-link-module-uses)"
"(make-struct-field-accessor -ref_4 5 'compile-time-inspector)"
"(make-struct-field-accessor -ref_4 6 'phase-to-link-extra-inspectorsss)"
"(make-struct-field-accessor -ref_4 7 'mpis)"
"(make-struct-field-accessor -ref_4 8 'syntax-literals)"
"(make-struct-field-accessor -ref_4 9 'pre-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 10 'post-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 11 'namespace-scopes)"
"(make-struct-field-accessor -ref_4 12 'purely-functional?))))"
"(void)"
"(void)"
"(define-values"
"(struct:namespace-scopes namespace-scopes1.1 namespace-scopes? namespace-scopes-post namespace-scopes-other)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type 'namespace-scopes #f 2 0 #f null 'prefab #f '(0 1) #f 'namespace-scopes)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'post)"
"(make-struct-field-accessor -ref_4 1 'other))))"
"(define-values"
"(swap-top-level-scopes)"
"(lambda(s_26 original-scopes-s_27 new-ns_28)"
"(let-values(((old-scs-post_29 old-scs-other_30)"
"(if(namespace-scopes? original-scopes-s_27)"
"(values(namespace-scopes-post original-scopes-s_27)(namespace-scopes-other original-scopes-s_27))"
"(decode-namespace-scopes original-scopes-s_27))))"
"(let-values(((new-scs-post_31 new-scs-other_32)(extract-namespace-scopes/values new-ns_28)))"
"(syntax-swap-scopes"
"(syntax-swap-scopes s_26 old-scs-post_29 new-scs-post_31)"
" old-scs-other_30"
" new-scs-other_32)))))"
"(define-values"
"(extract-namespace-scopes/values)"
"(lambda(ns_33)"
"(let-values(((root-ctx_34)(namespace-get-root-expand-ctx ns_33)))"
"(let-values(((post-expansion-sc_35)(root-expand-context-post-expansion-scope root-ctx_34)))"
"(values"
"(seteq post-expansion-sc_35)"
"(set-remove(list->seteq(root-expand-context-module-scopes root-ctx_34)) post-expansion-sc_35))))))"
"(define-values"
"(extract-namespace-scopes)"
"(lambda(ns_36)"
"(let-values(((scs-post_37 scs-other_38)(extract-namespace-scopes/values ns_36)))"
"(namespace-scopes1.1 scs-post_37 scs-other_38))))"
"(define-values"
"(encode-namespace-scopes)"
"(lambda(ns_39)"
"(let-values(((post-expansion-scs_40 other-scs_41)(extract-namespace-scopes/values ns_39)))"
"(let-values(((post-expansion-s_42)(add-scopes(datum->syntax$1 #f 'post)(set->list post-expansion-scs_40))))"
"(let-values(((other-s_43)(add-scopes(datum->syntax$1 #f 'other)(set->list other-scs_41))))"
"(datum->syntax$1 #f(vector post-expansion-s_42 other-s_43)))))))"
"(define-values"
"(decode-namespace-scopes)"
"(lambda(stx_44)"
"(let-values(((vec_45)(syntax-e$1 stx_44)))"
"(values(syntax-scope-set(vector-ref vec_45 0) 0)(syntax-scope-set(vector-ref vec_45 1) 0)))))"
"(define-values"
"(namespace-scopes=?)"
"(lambda(nss1_46 nss2_47)"
"(if(set=?(namespace-scopes-post nss1_46)(namespace-scopes-post nss2_47))"
"(set=?(namespace-scopes-other nss1_46)(namespace-scopes-other nss2_47))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(struct:syntax-literals"
" syntax-literals1.1"
" syntax-literals?"
" syntax-literals-stxes"
" syntax-literals-count"
" set-syntax-literals-stxes!"
" set-syntax-literals-count!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax-literals"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'syntax-literals)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'stxes)"
"(make-struct-field-accessor -ref_4 1 'count)"
"(make-struct-field-mutator -set!_5 0 'stxes)"
"(make-struct-field-mutator -set!_5 1 'count))))"
"(define-values"
"(struct:header"
" header2.1"
" header?"
" header-module-path-indexes"
" header-binding-sym-to-define-sym"
" header-binding-syms-in-order"
" header-require-var-to-import-sym"
" header-import-sym-to-extra-inspectors"
" header-require-vars-in-order"
" header-define-and-import-syms"
" header-syntax-literals"
" set-header-binding-syms-in-order!"
" set-header-require-vars-in-order!)"
"(let-values(((struct:_26 make-_27 ?_28 -ref_29 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type 'header #f 8 0 #f null(current-inspector) #f '(0 1 3 4 6 7) #f 'header)))))"
"(values"
" struct:_26"
" make-_27"
" ?_28"
"(make-struct-field-accessor -ref_29 0 'module-path-indexes)"
"(make-struct-field-accessor -ref_29 1 'binding-sym-to-define-sym)"
"(make-struct-field-accessor -ref_29 2 'binding-syms-in-order)"
"(make-struct-field-accessor -ref_29 3 'require-var-to-import-sym)"
"(make-struct-field-accessor -ref_29 4 'import-sym-to-extra-inspectors)"
"(make-struct-field-accessor -ref_29 5 'require-vars-in-order)"
"(make-struct-field-accessor -ref_29 6 'define-and-import-syms)"
"(make-struct-field-accessor -ref_29 7 'syntax-literals)"
"(make-struct-field-mutator -set!_30 2 'binding-syms-in-order)"
"(make-struct-field-mutator -set!_30 5 'require-vars-in-order))))"
"(define-values"
"(struct:variable-use variable-use3.1 variable-use? variable-use-module-use variable-use-sym)"
"(let-values(((struct:_81 make-_82 ?_83 -ref_84 -set!_85)"
"(let-values()"
"(let-values()(make-struct-type 'variable-use #f 2 0 #f null #f #f '(0 1) #f 'variable-use)))))"
"(values"
" struct:_81"
" make-_82"
" ?_83"
"(make-struct-field-accessor -ref_84 0 'module-use)"
"(make-struct-field-accessor -ref_84 1 'sym))))"
"(define-values(make-syntax-literals)(lambda()(syntax-literals1.1 null 0)))"
"(define-values"
"(make-header)"
"(lambda(mpis_106 syntax-literals_107)"
"(header2.1 mpis_106(make-hasheq) null(make-variable-uses)(make-hasheq) null(make-hasheq) syntax-literals_107)))"
"(define-values(make-variable-uses)(lambda()(make-hash)))"
"(define-values"
"(add-syntax-literal!)"
"(lambda(header-or-literals_108 q_109)"
"(let-values(((sl_110)"
"(if(header? header-or-literals_108)"
"(header-syntax-literals header-or-literals_108)"
" header-or-literals_108)))"
"(let-values(((pos_111)(syntax-literals-count sl_110)))"
"(begin"
"(set-syntax-literals-count! sl_110(add1 pos_111))"
"(set-syntax-literals-stxes! sl_110(cons q_109(syntax-literals-stxes sl_110)))"
" pos_111)))))"
"(define-values"
"(add-syntax-literals!)"
"(lambda(sl_112 vec_113)"
"(let-values(((pos_114)(syntax-literals-count sl_112)))"
"(begin"
"(let-values(((vec_115 len_116)"
"(let-values(((vec_117) vec_113))"
"(begin"
"(if(vector? vec_117)(void)(let-values()(in-vector vec_117)))"
"(values vec_117(unsafe-vector-length vec_117))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_118)"
"(lambda(pos_119)"
"(if(unsafe-fx< pos_119 len_116)"
"(let-values(((e_120)(unsafe-vector-ref vec_115 pos_119)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()(add-syntax-literal! sl_112 e_120))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_118(unsafe-fx+ 1 pos_119))(values))))"
"(values)))))"
" for-loop_118)"
" 0)))"
"(void)"
"(cons pos_114(vector-length vec_113))))))"
"(define-values(syntax-literals-empty?)(lambda(sl_121)(null?(syntax-literals-stxes sl_121))))"
"(define-values"
"(generate-lazy-syntax-literals!9.1)"
"(lambda(skip-deserialize?4_122 skip-deserialize?5_123 sl6_124 mpis7_125 self8_126)"
"(let-values(((sl_127) sl6_124))"
"(let-values(((mpis_128) mpis7_125))"
"(let-values(((self_129) self8_126))"
"(let-values(((skip-deserialize?_130)(if skip-deserialize?5_123 skip-deserialize?4_122 #f)))"
"(let-values()"
"(list"
"(list 'define-values(list syntax-literals-id)(list* 'make-vector(syntax-literals-count sl_127) '(#f)))"
"(list"
" 'define-values"
"(list get-syntax-literal!-id)"
"(list"
" 'lambda"
" '(pos)"
"(list"
" 'let-values"
"(list(list '(ready-stx)(list* 'vector-ref syntax-literals-id '(pos))))"
"(list"
" 'if"
" 'ready-stx"
" 'ready-stx"
"(list*"
" 'begin"
"(qq-append"
"(if skip-deserialize?_130"
" null"
"(list"
"(list"
" 'if"
"(list* 'vector-ref deserialized-syntax-vector-id '(0))"
" '(void)"
"(list deserialize-syntax-id bulk-binding-registry-id))))"
"(list"
"(list"
" 'let-values"
"(list"
"(list"
" '(stx)"
"(list"
" 'syntax-module-path-index-shift"
"(list"
" 'syntax-shift-phase-level"
"(list* 'vector-ref deserialized-syntax-vector-id '(pos))"
" phase-shift-id)"
"(add-module-path-index! mpis_128 self_129)"
" self-id"
" inspector-id)))"
"(list* 'begin(list* 'vector-set! syntax-literals-id '(pos stx)) '(stx))))))))))))))))))"
"(define-values"
"(generate-lazy-syntax-literals-data!)"
"(lambda(sl_151 mpis_152)"
"(if(syntax-literals-empty? sl_151)"
"(let-values()(list(list* 'define-values(list deserialize-syntax-id) '(#f))))"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list deserialize-syntax-id)"
"(list"
" 'lambda"
"(list bulk-binding-registry-id)"
"(list"
" 'begin"
"(list"
" 'vector-copy!"
" deserialized-syntax-vector-id"
" ''0"
"(list"
" 'let-values"
"(list(list*(list inspector-id) '(#f)))"
"(let-values(((temp25_153)"
"(vector->immutable-vector(list->vector(alt-reverse(syntax-literals-stxes sl_151)))))"
"((mpis26_154) mpis_152))"
"(generate-deserialize6.1 #f #f temp25_153 mpis26_154))))"
"(list* 'set! deserialize-syntax-id '(#f))))))))))"
"(define-values(generate-lazy-syntax-literal-lookup)(lambda(pos_155)(list get-syntax-literal!-id pos_155)))"
"(define-values"
"(generate-eager-syntax-literals!)"
"(lambda(sl_156 mpis_157 base-phase_158 self_159 ns_160)"
"(if(syntax-literals-empty? sl_156)"
"(let-values() #f)"
"(let-values()"
"(list"
" 'let-values"
"(list"
"(list"
" '(ns+stxss)"
"(let-values(((temp27_161)"
"(cons(encode-namespace-scopes ns_160)(alt-reverse(syntax-literals-stxes sl_156))))"
"((mpis28_162) mpis_157))"
"(generate-deserialize6.1 #f #f temp27_161 mpis28_162))))"
"(list"
" 'let-values"
" '(((ns-scope-s)(car ns+stxss)))"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stx)"
"(list"
" 'swap-top-level-scopes"
"(list"
" 'syntax-module-path-index-shift"
"(list 'syntax-shift-phase-level 'stx(list '- base-phase_158 dest-phase-id))"
"(add-module-path-index! mpis_157 self_159)"
" self-id)"
" 'ns-scope-s"
" ns-id))"
" '((cdr ns+stxss))))))))))"
"(define-values(generate-eager-syntax-literal-lookup)(lambda(pos_163)(list 'vector-ref syntax-literals-id pos_163)))"
"(define-values"
"(syntax-literals-as-vector)"
"(lambda(sl_164)(list->vector(alt-reverse(syntax-literals-stxes sl_164)))))"
"(define-values"
"(select-fresh)"
"(lambda(sym_167 header_168)"
"(if(symbol-conflicts? sym_167 header_168)"
"((letrec-values(((loop_169)"
"(lambda(pos_170)"
"                          (let-values (((new-sym_171) (string->symbol (format \"~a/~a\" pos_170 sym_167))))"
"(if(symbol-conflicts? new-sym_171 header_168)(loop_169(add1 pos_170)) new-sym_171)))))"
" loop_169)"
" 1)"
" sym_167)))"
"(define-values"
"(symbol-conflicts?)"
"(lambda(sym_172 header_173)"
"(let-values(((or-part_174)(built-in-symbol? sym_172)))"
"(if or-part_174 or-part_174(hash-ref(header-define-and-import-syms header_173) sym_172 #f)))))"
"(define-values"
"(register-required-variable-use!19.1)"
"(lambda(defined?12_175 defined?13_176 header14_177 mpi15_178 phase16_179 sym17_180 extra-inspector18_181)"
"(let-values(((header_182) header14_177))"
"(let-values(((mpi_183) mpi15_178))"
"(let-values(((phase_184) phase16_179))"
"(let-values(((sym_185) sym17_180))"
"(let-values(((extra-inspector_186) extra-inspector18_181))"
"(let-values(((defined?_187)(if defined?13_176 defined?12_175 #f)))"
"(let-values()"
"(let-values(((key_188)(variable-use3.1(module-use1.1 mpi_183 phase_184) sym_185)))"
"(let-values(((variable-uses_189)(header-require-var-to-import-sym header_182)))"
"(let-values(((var-sym_190)"
"(let-values(((or-part_191)(hash-ref variable-uses_189 key_188 #f)))"
"(if or-part_191"
" or-part_191"
"(let-values(((sym_192)(select-fresh(variable-use-sym key_188) header_182)))"
"(begin"
"(hash-set! variable-uses_189 key_188 sym_192)"
"(set-header-require-vars-in-order!"
" header_182"
"(cons key_188(header-require-vars-in-order header_182)))"
"(hash-set!"
"(header-define-and-import-syms header_182)"
" sym_192"
"(if defined?_187 'defined 'required))"
" sym_192))))))"
"(begin"
"(if extra-inspector_186"
"(let-values()"
"(let-values(((extra-inspectors_193)(header-import-sym-to-extra-inspectors header_182)))"
"(hash-update!"
" extra-inspectors_193"
" var-sym_190"
"(lambda(s_194)(set-add s_194 extra-inspector_186))"
" '#hasheq())))"
"(void))"
" var-sym_190)))))))))))))"
"(define-values"
"(register-as-defined!)"
"(lambda(header_221 def-sym_222)(hash-set!(header-define-and-import-syms header_221) def-sym_222 'defined)))"
"(define-values"
"(registered-as-required?)"
"(lambda(header_223 var-sym_224)"
"(eq? 'required(hash-ref(header-define-and-import-syms header_223) var-sym_224 #f))))"
"(define-values"
"(generate-links+imports)"
"(lambda(header_225 phase_226 cctx_227)"
"(let-values(((mod-use-to-link-sym_228)"
"(let-values(((lst_230)(header-require-vars-in-order header_225)))"
"(begin"
"(if(list? lst_230)(void)(let-values()(in-list lst_230)))"
"((letrec-values(((for-loop_231)"
"(lambda(ht_232 lst_233)"
"(if(pair? lst_233)"
"(let-values(((vu_234)(unsafe-car lst_233))"
"((rest_235)(unsafe-cdr lst_233)))"
"(let-values(((ht_236)"
"(let-values(((ht_237) ht_232))"
"(let-values(((ht_238)"
"(let-values()"
"(let-values(((mu_239)"
"(variable-use-module-use"
" vu_234)))"
"(if(let-values(((or-part_240)"
"(hash-ref"
" ht_237"
" mu_239"
" #f)))"
"(if or-part_240"
" or-part_240"
"(let-values(((or-part_241)"
"(eq?"
"(module-use-module"
" mu_239)"
"(compile-context-self"
" cctx_227))))"
"(if or-part_241"
" or-part_241"
"(top-level-module-path-index?"
"(module-use-module"
" mu_239))))))"
" ht_237"
"(hash-set"
" ht_237"
" mu_239"
"(string->symbol"
"(format"
"                                                                                     \"~a_~a_~a\""
"(extract-name"
"(module-use-module mu_239))"
"(module-use-phase mu_239)"
"(hash-count ht_237)))))))))"
"(values ht_238)))))"
"(if(not #f)(for-loop_231 ht_236 rest_235) ht_236)))"
" ht_232))))"
" for-loop_231)"
" '#hash()"
" lst_230)))))"
"(let-values(((link-mod-uses_229)(hash-keys mod-use-to-link-sym_228)))"
"(values"
" link-mod-uses_229"
"(let-values(((lst_242) link-mod-uses_229))"
"(begin"
"(if(list? lst_242)(void)(let-values()(in-list lst_242)))"
"((letrec-values(((for-loop_243)"
"(lambda(lst_244)"
"(if(pair? lst_244)"
"(let-values(((mu_245)(unsafe-car lst_244))((rest_246)(unsafe-cdr lst_244)))"
"(let-values(((post-guard-var_247)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_248)"
"(let-values()"
"(let-values()"
"(let-values(((lst_249)"
"(header-require-vars-in-order header_225)))"
"(begin"
"(if(list? lst_249)"
"(void)"
"(let-values()(in-list lst_249)))"
"((letrec-values(((for-loop_250)"
"(lambda(lst_251)"
"(if(pair? lst_251)"
"(let-values(((vu_252)"
"(unsafe-car lst_251))"
"((rest_253)"
"(unsafe-cdr"
" lst_251)))"
"(let-values(((post-guard-var_254)"
"(lambda() #t)))"
"(let-values()"
"(if(equal?"
" mu_245"
"(variable-use-module-use"
" vu_252))"
"(let-values()"
"(let-values(((elem_255)"
"(let-values()"
"(let-values()"
"(let-values(((var-sym_256)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_225)"
" vu_252)))"
"(let-values(((ex-sym_257)"
"(variable-use-sym"
" vu_252)))"
"(if(eq?"
" var-sym_256"
" ex-sym_257)"
" var-sym_256"
"(list"
" ex-sym_257"
" var-sym_256))))))))"
"(let-values(((result_258)"
"(if(post-guard-var_254)"
"(for-loop_250"
" rest_253)"
" null)))"
"(cons"
" elem_255"
" result_258))))"
"(if(post-guard-var_254)"
"(for-loop_250 rest_253)"
" null)))))"
" null))))"
" for-loop_250)"
" lst_249)))))))"
"(let-values(((result_259)"
"(if(post-guard-var_247)(for-loop_243 rest_246) null)))"
"(cons elem_248 result_259))))))"
" null))))"
" for-loop_243)"
" lst_242)))"
"(let-values(((lst_260) link-mod-uses_229))"
"(begin"
"(if(list? lst_260)(void)(let-values()(in-list lst_260)))"
"((letrec-values(((for-loop_261)"
"(lambda(lst_262)"
"(if(pair? lst_262)"
"(let-values(((mu_263)(unsafe-car lst_262))((rest_264)(unsafe-cdr lst_262)))"
"(let-values(((post-guard-var_265)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_266)"
"(let-values()"
"(let-values()"
"(let-values(((extra-inspectorss_267)"
"(let-values(((lst_268)"
"(header-require-vars-in-order"
" header_225)))"
"(begin"
"(if(list? lst_268)"
"(void)"
"(let-values()(in-list lst_268)))"
"((letrec-values(((for-loop_269)"
"(lambda(lst_270)"
"(if(pair? lst_270)"
"(let-values(((vu_271)"
"(unsafe-car"
" lst_270))"
"((rest_272)"
"(unsafe-cdr"
" lst_270)))"
"(let-values(((post-guard-var_273)"
"(lambda()"
" #t)))"
"(let-values()"
"(if(equal?"
" mu_263"
"(variable-use-module-use"
" vu_271))"
"(let-values()"
"(let-values(((elem_274)"
"(let-values()"
"(let-values()"
"(let-values(((var-sym_275)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_225)"
" vu_271)))"
"(hash-ref"
"(header-import-sym-to-extra-inspectors"
" header_225)"
" var-sym_275"
" #f))))))"
"(let-values(((result_276)"
"(if(post-guard-var_273)"
"(for-loop_269"
" rest_272)"
" null)))"
"(cons"
" elem_274"
" result_276))))"
"(if(post-guard-var_273)"
"(for-loop_269"
" rest_272)"
" null)))))"
" null))))"
" for-loop_269)"
" lst_268)))))"
"(if(ormap2 values extra-inspectorss_267)"
" extra-inspectorss_267"
" #f))))))"
"(let-values(((result_277)"
"(if(post-guard-var_265)(for-loop_261 rest_264) null)))"
"(cons elem_266 result_277))))))"
" null))))"
" for-loop_261)"
" lst_260)))"
"(let-values(((lst_278)(header-require-vars-in-order header_225)))"
"(begin"
"(if(list? lst_278)(void)(let-values()(in-list lst_278)))"
"((letrec-values(((for-loop_279)"
"(lambda(lst_280)"
"(if(pair? lst_280)"
"(let-values(((vu_281)(unsafe-car lst_280))((rest_282)(unsafe-cdr lst_280)))"
"(let-values(((post-guard-var_283)(lambda() #t)))"
"(let-values()"
"(if(let-values(((mod_284)"
"(module-use-module(variable-use-module-use vu_281))))"
"(let-values(((or-part_285)"
"(eq? mod_284(compile-context-self cctx_227))))"
"(if or-part_285 or-part_285(top-level-module-path-index? mod_284))))"
"(let-values()"
"(let-values(((elem_286)"
"(let-values()"
"(let-values()"
"(let-values(((var-sym_287)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_225)"
" vu_281)))"
"(let-values(((ex-sym_288)(variable-use-sym vu_281)))"
"(if(eq? var-sym_287 ex-sym_288)"
" var-sym_287"
"(list var-sym_287 ex-sym_288))))))))"
"(let-values(((result_289)"
"(if(post-guard-var_283)(for-loop_279 rest_282) null)))"
"(cons elem_286 result_289))))"
"(if(post-guard-var_283)(for-loop_279 rest_282) null)))))"
" null))))"
" for-loop_279)"
" lst_278))))))))"
"(define-values"
"(extract-name)"
"(lambda(mpi_290)"
"(let-values(((p_291 base_292)(1/module-path-index-split mpi_290)))"
"(if(symbol? p_291)"
"(let-values() p_291)"
"(if(path? p_291)"
"(let-values()"
"            (let-values (((base_293 name_294 dir?_295) (split-path p_291))) (path-replace-extension name_294 #\"\")))"
"(if(string? p_291)"
"            (let-values () (path-replace-extension p_291 #\"\"))"
"(if(if(pair? p_291)(eq?(car p_291) 'quote) #f)"
"(let-values()(cadr p_291))"
"(if(if(pair? p_291)(eq?(car p_291) 'file) #f)"
"(let-values()"
"(let-values(((base_296 name_297 dir?_298)(split-path(cadr p_291))))"
"                    (path-replace-extension name_297 #\"\")))"
"(if(if(pair? p_291)(eq?(car p_291) 'lib) #f)"
"                  (let-values () (path-replace-extension (cadr p_291) #\"\"))"
"(let-values() 'module))))))))))"
"(void)"
"(void)"
"(define-values"
"(instance-imports)"
"(list ns-id phase-shift-id self-id inspector-id bulk-binding-registry-id set-transformer!-id))"
"(define-values"
"(make-instance-instance13.1)"
"(lambda(bulk-binding-registry5_13 inspector4_14 namespace1_15 phase-shift2_16 self3_17 set-transformer!6_18)"
"(let-values(((ns_19) namespace1_15))"
"(let-values(((phase-shift_20) phase-shift2_16))"
"(let-values(((self_21) self3_17))"
"(let-values(((inspector_22) inspector4_14))"
"(let-values(((bulk-binding-registry_23) bulk-binding-registry5_13))"
"(let-values(((set-transformer!_24) set-transformer!6_18))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_19"
" phase-shift-id"
" phase-shift_20"
" self-id"
" self_21"
" inspector-id"
" inspector_22"
" bulk-binding-registry-id"
" bulk-binding-registry_23"
" set-transformer!-id"
" set-transformer!_24))))))))))"
"(define-values"
"(make-module-body-instance-instance18.1)"
"(lambda(set-transformer!16_55)"
"(let-values(((set-transformer!_56) set-transformer!16_55))"
"(let-values()(1/make-instance 'body-instance #f set-transformer!-id set-transformer!_56)))))"
"(void)"
"(void)"
"(define-values"
"(eager-instance-imports)"
"(list* ns-id dest-phase-id self-id bulk-binding-registry-id inspector-id '(swap-top-level-scopes)))"
"(define-values"
"(make-eager-instance-instance11.1)"
"(lambda(bulk-binding-registry4_8 dest-phase2_9 inspector5_10 namespace1_11 self3_12)"
"(let-values(((ns_13) namespace1_11))"
"(let-values(((dest-phase_14) dest-phase2_9))"
"(let-values(((self_15) self3_12))"
"(let-values(((bulk-binding-registry_16) bulk-binding-registry4_8))"
"(let-values(((inspector_17) inspector5_10))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" ns-id"
" ns_13"
" dest-phase-id"
" dest-phase_14"
" self-id"
" self_15"
" bulk-binding-registry-id"
" bulk-binding-registry_16"
" inspector-id"
" inspector_17"
" 'swap-top-level-scopes"
" swap-top-level-scopes)))))))))"
"(void)"
"(void)"
"(define-values"
"(self-quoting-in-linklet?)"
"(lambda(datum_1)"
"(let-values(((or-part_2)(number? datum_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(boolean? datum_1)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(string? datum_1)))(if or-part_4 or-part_4(bytes? datum_1)))))))))"
"(void)"
"(void)"
"(define-values(kernel-primitive-table$1)(primitive-table '#%kernel))"
"(define-values(datum->syntax$3)(hash-ref kernel-primitive-table$1 'datum->syntax))"
"(define-values(syntax->datum$3)(hash-ref kernel-primitive-table$1 'syntax->datum))"
"(define-values(syntax-property-symbol-keys$2)(hash-ref kernel-primitive-table$1 'syntax-property-symbol-keys))"
"(define-values(syntax-property$2)(hash-ref kernel-primitive-table$1 'syntax-property))"
"(define-values(syntax-span$2)(hash-ref kernel-primitive-table$1 'syntax-span))"
"(define-values(syntax-position$2)(hash-ref kernel-primitive-table$1 'syntax-position))"
"(define-values(syntax-column$2)(hash-ref kernel-primitive-table$1 'syntax-column))"
"(define-values(syntax-line$2)(hash-ref kernel-primitive-table$1 'syntax-line))"
"(define-values(syntax-source$2)(hash-ref kernel-primitive-table$1 'syntax-source))"
"(define-values(syntax-e$3)(hash-ref kernel-primitive-table$1 'syntax-e))"
"(define-values(syntax?$2)(hash-ref kernel-primitive-table$1 'syntax?))"
"(void)"
"(void)"
"(define-values"
"(datum->correlated)"
"(let-values(((datum->correlated4_295)"
"(lambda(d3_296 srcloc1_297 srcloc2_298)"
"(let-values(((d_299) d3_296))"
"(let-values(((srcloc_300)(if srcloc2_298 srcloc1_297 #f)))"
"(let-values()(datum->syntax$3 #f d_299 srcloc_300)))))))"
"(case-lambda"
"((d_301)(datum->correlated4_295 d_301 #f #f))"
"((d_302 srcloc1_303)(datum->correlated4_295 d_302 srcloc1_303 #t)))))"
"(define-values(correlated-e)(lambda(e_304)(if(syntax?$2 e_304)(syntax-e$3 e_304) e_304)))"
"(define-values(correlated-cadr)(lambda(e_305)(car(correlated-e(cdr(correlated-e e_305))))))"
"(define-values"
"(correlated-length)"
"(lambda(e_306)(let-values(((l_307)(correlated-e e_306)))(if(list? l_307)(length l_307) #f))))"
"(define-values"
"(correlated->list)"
"(lambda(e_308)"
"((letrec-values(((loop_309)"
"(lambda(e_310)"
"(if(list? e_310)"
"(let-values() e_310)"
"(if(pair? e_310)"
"(let-values()(cons(car e_310)(loop_309(cdr e_310))))"
"(if(null? e_310)"
"(let-values() null)"
"(if(syntax?$2 e_310)"
"(let-values()(loop_309(syntax-e$3 e_310)))"
"                                (let-values () (error 'correlate->list \"not a list\")))))))))"
" loop_309)"
" e_308)))"
"(define-values"
"(correlated-property)"
"(case-lambda"
"((e_332 k_333)(syntax-property$2 e_332 k_333))"
"((e_334 k_335 v_336)(syntax-property$2 e_334 k_335 v_336))))"
"(define-values"
"(to-syntax-list.1$1)"
"(lambda(s_337)"
"(if(list? s_337)"
"(let-values() s_337)"
"(if(pair? s_337)"
"(let-values()(let-values(((r_338)(to-syntax-list.1$1(cdr s_337))))(if r_338(cons(car s_337) r_338) #f)))"
"(if(syntax?$2 s_337)(let-values()(to-syntax-list.1$1(syntax-e$3 s_337)))(let-values() #f))))))"
"(void)"
"(void)"
"(define-values(kernel-primitive-table)(1/primitive-table '#%kernel))"
"(define-values(read-syntax$2)(hash-ref kernel-primitive-table 'read-syntax))"
"(define-values(read-syntax/recursive$2)(hash-ref kernel-primitive-table 'read-syntax/recursive))"
"(define-values(1/make-readtable)(hash-ref kernel-primitive-table 'make-readtable))"
"(define-values(datum->syntax$2)(hash-ref kernel-primitive-table 'datum->syntax))"
"(define-values(syntax->datum$2)(hash-ref kernel-primitive-table 'syntax->datum))"
"(define-values(syntax-property-symbol-keys$1)(hash-ref kernel-primitive-table 'syntax-property-symbol-keys))"
"(define-values(1/syntax-property)(hash-ref kernel-primitive-table 'syntax-property))"
"(define-values(syntax-span$1)(hash-ref kernel-primitive-table 'syntax-span))"
"(define-values(syntax-position$1)(hash-ref kernel-primitive-table 'syntax-position))"
"(define-values(syntax-column$1)(hash-ref kernel-primitive-table 'syntax-column))"
"(define-values(syntax-line$1)(hash-ref kernel-primitive-table 'syntax-line))"
"(define-values(syntax-source$1)(hash-ref kernel-primitive-table 'syntax-source))"
"(define-values(syntax-e$2)(hash-ref kernel-primitive-table 'syntax-e))"
"(define-values(1/syntax?)(hash-ref kernel-primitive-table 'syntax?))"
"(void)"
"(void)"
"(define-values"
"(srcloc->vector)"
"(lambda(s_43)"
"(if s_43"
"(vector(srcloc-source s_43)(srcloc-line s_43)(srcloc-column s_43)(srcloc-position s_43)(srcloc-span s_43))"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(correlate*)"
"(lambda(stx_1 s-exp_2)"
"(if(syntax-srcloc stx_1)(datum->correlated s-exp_2(srcloc->vector(syntax-srcloc stx_1))) s-exp_2)))"
"(define-values(->correlated)(lambda(s_3)(datum->correlated s_3 #f)))"
"(void)"
"(void)"
"(define-values"
"(compile$2)"
"(let-values(((compile7_6)"
"(lambda(p5_7 cctx6_8 name1_9 result-used?2_10 name3_11 result-used?4_12)"
"(let-values(((p_13) p5_7))"
"(let-values(((cctx_14) cctx6_8))"
"(let-values(((name_15)(if name3_11 name1_9 #f)))"
"(let-values(((result-used?_16)(if result-used?4_12 result-used?2_10 #t)))"
"(let-values()"
"(let-values(((compile_17)"
"(lambda(p_18 name_19 result-used?_20)"
"(compile$2 p_18 cctx_14 name_19 result-used?_20))))"
"(let-values(((s_21)(parsed-s p_13)))"
"(if(parsed-id? p_13)"
"(let-values()"
"(let-values(((p27_22) p_13)((cctx28_23) cctx_14))"
"(compile-identifier24.1 #f #f #f #f p27_22 cctx28_23)))"
"(if(parsed-lambda? p_13)"
"(let-values()"
"(if result-used?_16"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_21"
"(list*"
" 'lambda"
"(compile-lambda"
"(parsed-lambda-keys p_13)"
"(parsed-lambda-body p_13)"
" cctx_14)))"
" name_15"
" s_21))"
"(let-values()(correlate* s_21 ''unused-lambda))))"
"(if(parsed-case-lambda? p_13)"
"(let-values()"
"(if result-used?_16"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_21"
"(list*"
" 'case-lambda"
"(let-values(((lst_24)(parsed-case-lambda-clauses p_13)))"
"(begin"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(lst_26)"
"(if(pair? lst_26)"
"(let-values(((clause_27)(unsafe-car lst_26))"
"((rest_28)(unsafe-cdr lst_26)))"
"(let-values(((post-guard-var_29)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_30)"
"(let-values()"
"(let-values()"
"(compile-lambda"
"(car clause_27)"
"(cadr clause_27)"
" cctx_14)))))"
"(let-values(((result_31)"
"(if(post-guard-var_29)"
"(for-loop_25 rest_28)"
" null)))"
"(cons elem_30 result_31))))))"
" null))))"
" for-loop_25)"
" lst_24)))))"
" name_15"
" s_21))"
"(let-values()(correlate* s_21 ''unused-case-lambda))))"
"(if(parsed-app? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(let-values(((lst_32)(parsed-app-rator+rands p_13)))"
"(begin"
"(if(list? lst_32)(void)(let-values()(in-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(lst_34)"
"(if(pair? lst_34)"
"(let-values(((r_35)(unsafe-car lst_34))"
"((rest_36)(unsafe-cdr lst_34)))"
"(let-values(((post-guard-var_37)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_38)"
"(let-values()"
"(let-values()"
"(compile_17 r_35 #f #t)))))"
"(let-values(((result_39)"
"(if(post-guard-var_37)"
"(for-loop_33 rest_36)"
" null)))"
"(cons elem_38 result_39))))))"
" null))))"
" for-loop_33)"
" lst_32)))))"
"(if(parsed-if? p_13)"
"(let-values()"
"(let-values(((tst-e_40)(compile_17(parsed-if-tst p_13) #f #f)))"
"(if(eq?(correlated-e tst-e_40) #t)"
"(let-values()"
"(compile_17(parsed-if-thn p_13) name_15 result-used?_16))"
"(if(eq?(correlated-e tst-e_40) #f)"
"(let-values()"
"(compile_17(parsed-if-els p_13) name_15 result-used?_16))"
"(let-values()"
"(correlate*"
" s_21"
"(list"
" 'if"
" tst-e_40"
"(compile_17(parsed-if-thn p_13) name_15 result-used?_16)"
"(compile_17(parsed-if-els p_13) name_15 result-used?_16))))))))"
"(if(parsed-with-continuation-mark? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(list"
" 'with-continuation-mark"
"(compile_17(parsed-with-continuation-mark-key p_13) #f #t)"
"(compile_17(parsed-with-continuation-mark-val p_13) #f #t)"
"(compile_17"
"(parsed-with-continuation-mark-body p_13)"
" name_15"
" result-used?_16))))"
"(if(parsed-begin0? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(list*"
" 'begin0"
"(compile_17(car(parsed-begin0-body p_13)) name_15 result-used?_16)"
"(let-values(((lst_41)(cdr(parsed-begin0-body p_13))))"
"(begin"
"(if(list? lst_41)(void)(let-values()(in-list lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(lst_43)"
"(if(pair? lst_43)"
"(let-values(((e_44)(unsafe-car lst_43))"
"((rest_45)"
"(unsafe-cdr lst_43)))"
"(let-values(((post-guard-var_46)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_47)"
"(let-values()"
"(let-values()"
"(compile_17"
" e_44"
" #f"
" #f)))))"
"(let-values(((result_48)"
"(if(post-guard-var_46)"
"(for-loop_42"
" rest_45)"
" null)))"
"(cons elem_47 result_48))))))"
" null))))"
" for-loop_42)"
" lst_41))))))"
"(if(parsed-begin? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(compile-begin"
"(parsed-begin-body p_13)"
" cctx_14"
" name_15"
" result-used?_16)))"
"(if(parsed-set!? p_13)"
"(let-values()"
"(correlate*"
" s_21"
"(let-values(((...der/compile/expr.rkt:89:24_49)"
" compile-identifier26.1)"
"((temp29_50)(parsed-set!-id p_13))"
"((cctx30_51) cctx_14)"
"((temp31_52) #t)"
"((temp32_53)"
"(compile_17"
"(parsed-set!-rhs p_13)"
"(parsed-s(parsed-set!-id p_13))"
" #t)))"
"(compile-identifier24.1"
" temp32_53"
" #t"
" temp31_52"
" #t"
" temp29_50"
" cctx30_51))))"
"(if(parsed-let-values? p_13)"
"(let-values()"
"(let-values(((...der/compile/expr.rkt:93:6_54) compile-let17.1)"
"((p33_55) p_13)"
"((cctx34_56) cctx_14)"
"((name35_57) name_15)"
"((temp36_58) #f)"
"((result-used?37_59) result-used?_16))"
"(compile-let15.1"
" temp36_58"
" p33_55"
" cctx34_56"
" name35_57"
" result-used?37_59)))"
"(if(parsed-letrec-values? p_13)"
"(let-values()"
"(let-values(((...der/compile/expr.rkt:95:6_60) compile-let17.1)"
"((p38_61) p_13)"
"((cctx39_62) cctx_14)"
"((name40_63) name_15)"
"((temp41_64) #t)"
"((result-used?42_65) result-used?_16))"
"(compile-let15.1"
" temp41_64"
" p38_61"
" cctx39_62"
" name40_63"
" result-used?42_65)))"
"(if(parsed-quote? p_13)"
"(let-values()"
"(let-values(((datum_66)(parsed-quote-datum p_13)))"
"(if(self-quoting-in-linklet? datum_66)"
"(let-values()(correlate* s_21 datum_66))"
"(let-values()"
"(correlate* s_21(list 'quote datum_66))))))"
"(if(parsed-quote-syntax? p_13)"
"(let-values()"
"(if result-used?_16"
"(compile-quote-syntax"
"(parsed-quote-syntax-datum p_13)"
" cctx_14)"
"(correlate* s_21(list 'quote(syntax->datum$1 s_21)))))"
"(if(parsed-#%variable-reference? p_13)"
"(let-values()"
"(let-values(((id_67)"
"(parsed-#%variable-reference-id p_13)))"
"(correlate*"
" s_21"
"(if id_67"
"(list"
" '#%variable-reference"
"(let-values(((id43_68) id_67)"
"((cctx44_69) cctx_14))"
"(compile-identifier24.1"
" #f"
" #f"
" #f"
" #f"
" id43_68"
" cctx44_69)))"
" '(#%variable-reference)))))"
"(let-values()"
"(error"
"                                                               \"unrecognized parsed form:\""
" p_13))))))))))))))))))))))))))"
"(case-lambda"
"((p_70 cctx_71)(compile7_6 p_70 cctx_71 #f #f #f #f))"
"((p_72 cctx_73 name_74 result-used?2_75)(compile7_6 p_72 cctx_73 name_74 result-used?2_75 #t #t))"
"((p_76 cctx_77 name1_78)(compile7_6 p_76 cctx_77 name1_78 #f #t #f)))))"
"(define-values"
"(compile-lambda)"
"(lambda(formals_79 bodys_80 cctx_81)(list formals_79(compile-sequence bodys_80 cctx_81 #f #t))))"
"(define-values"
"(compile-sequence)"
"(lambda(bodys_82 cctx_83 name_84 result-used?_85)"
"(if(null?(cdr bodys_82))"
"(compile$2(car bodys_82) cctx_83 name_84 result-used?_85)"
"(compile-begin bodys_82 cctx_83 name_84 result-used?_85))))"
"(define-values"
"(compile-begin)"
"(lambda(es_86 cctx_87 name_88 result-used?_89)"
"(let-values(((used-pos_90)(sub1(length es_86))))"
"(list*"
" 'begin"
"(let-values(((lst_91) es_86)((start_92) 0))"
"(begin"
"(if(list? lst_91)(void)(let-values()(in-list lst_91)))"
"(if(exact-nonnegative-integer? start_92)(void)(let-values()(in-naturals start_92)))"
"((letrec-values(((for-loop_93)"
"(lambda(lst_94 pos_95)"
"(if(if(pair? lst_94) #t #f)"
"(let-values(((e_96)(unsafe-car lst_94))"
"((rest_97)(unsafe-cdr lst_94))"
"((i_98) pos_95))"
"(let-values(((post-guard-var_99)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_100)"
"(let-values()"
"(let-values()"
"(let-values(((used?_101)(= i_98 used-pos_90)))"
"(compile$2"
" e_96"
" cctx_87"
"(if used?_101 name_88 #f)"
"(if used?_101 result-used?_89 #f)))))))"
"(let-values(((result_102)"
"(if(post-guard-var_99)"
"(for-loop_93 rest_97(+ pos_95 1))"
" null)))"
"(cons elem_100 result_102))))))"
" null))))"
" for-loop_93)"
" lst_91"
" start_92)))))))"
"(define-values"
"(add-lambda-properties)"
"(lambda(s_103 inferred-name_104 orig-s_105)"
"(letrec-values(((simplify-name_106)"
"(lambda(v_110)"
"(if(pair? v_110)"
"(let-values()"
"(let-values(((n1_111)(simplify-name_106(car v_110))))"
"(let-values(((n2_112)(simplify-name_106(cdr v_110))))"
"(if(eq? n1_111 n2_112) n1_111 v_110))))"
"(let-values() v_110)))))"
"(let-values(((name_107)"
"(let-values(((or-part_113)"
"(let-values(((v_114)"
"(simplify-name_106(syntax-property$1 orig-s_105 'inferred-name))))"
"(if(let-values(((or-part_115)(symbol? v_114)))"
"(if or-part_115"
" or-part_115"
"(let-values(((or-part_116)(syntax?$1 v_114)))"
"(if or-part_116 or-part_116(void? v_114)))))"
" v_114"
" #f))))"
"(if or-part_113 or-part_113 inferred-name_104))))"
"(let-values(((named-s_108)"
"(if name_107"
"(correlated-property"
"(->correlated s_103)"
" 'inferred-name"
"(if(syntax?$1 name_107)(syntax-e$1 name_107) name_107))"
" s_103)))"
"(let-values(((as-method_109)(syntax-property$1 orig-s_105 'method-arity-error)))"
"(if as-method_109"
"(correlated-property(->correlated named-s_108) 'method-arity-error as-method_109)"
" named-s_108)))))))"
"(define-values"
"(lifted/1.1$16 lifted/2.1$16 lifted/3.1$15 lifted/4.1$15 lifted/5.1$15)"
"(make-struct-type"
" 'compile-let"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'compile-let"
"(case-lambda"
"((self_117 p_118 cctx_119 name_120 result-used?_121)"
"(apply missing-kw self_117 p_118 cctx_119 name_120 result-used?_121 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_122 p_123 cctx_124 name_125 result-used?_126)"
"(apply missing-kw self_122 p_123 cctx_124 name_125 result-used?_126 null)))))"
"(define-values"
"(compile-let15.1)"
"(lambda(rec?9_127 p11_128 cctx12_129 name13_130 result-used?14_131)"
"(let-values(((p_132) p11_128))"
"(let-values(((cctx_133) cctx12_129))"
"(let-values(((name_134) name13_130))"
"(let-values(((rec?_135) rec?9_127))"
"(let-values(((result-used?_136) result-used?14_131))"
"(let-values()"
"(correlate*"
"(parsed-s p_132)"
"(list"
"(if rec?_135 'letrec-values 'let-values)"
"(let-values(((lst_137)(parsed-let_-values-clauses p_132))"
"((lst_138)(parsed-let_-values-idss p_132)))"
"(begin"
"(if(list? lst_137)(void)(let-values()(in-list lst_137)))"
"(if(list? lst_138)(void)(let-values()(in-list lst_138)))"
"((letrec-values(((for-loop_139)"
"(lambda(lst_140 lst_141)"
"(if(if(pair? lst_140)(pair? lst_141) #f)"
"(let-values(((clause_142)(unsafe-car lst_140))"
"((rest_143)(unsafe-cdr lst_140))"
"((ids_144)(unsafe-car lst_141))"
"((rest_145)(unsafe-cdr lst_141)))"
"(let-values(((post-guard-var_146)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_147)"
"(let-values()"
"(let-values()"
"(list"
"(if rec?_135"
"(let-values(((lst_148)(car clause_142))"
"((lst_149) ids_144))"
"(begin"
"(if(list? lst_148)"
"(void)"
"(let-values()(in-list lst_148)))"
"(if(list? lst_149)"
"(void)"
"(let-values()(in-list lst_149)))"
"((letrec-values(((for-loop_150)"
"(lambda(lst_151 lst_152)"
"(if(if(pair? lst_151)"
"(pair? lst_152)"
" #f)"
"(let-values(((sym_153)"
"(unsafe-car"
" lst_151))"
"((rest_154)"
"(unsafe-cdr"
" lst_151))"
"((id_155)"
"(unsafe-car"
" lst_152))"
"((rest_156)"
"(unsafe-cdr"
" lst_152)))"
"(let-values(((post-guard-var_157)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_158)"
"(let-values()"
"(let-values()"
"(add-undefined-error-name-property"
" sym_153"
" id_155)))))"
"(let-values(((result_159)"
"(if(post-guard-var_157)"
"(for-loop_150"
" rest_154"
" rest_156)"
" null)))"
"(cons"
" elem_158"
" result_159))))))"
" null))))"
" for-loop_150)"
" lst_148"
" lst_149)))"
"(car clause_142))"
"(compile$2"
"(cadr clause_142)"
" cctx_133"
"(if(= 1(length ids_144))(car ids_144) #f)))))))"
"(let-values(((result_160)"
"(if(post-guard-var_146)"
"(for-loop_139 rest_143 rest_145)"
" null)))"
"(cons elem_147 result_160))))))"
" null))))"
" for-loop_139)"
" lst_137"
" lst_138)))"
"(compile-sequence(parsed-let_-values-body p_132) cctx_133 name_134 result-used?_136)))))))))))"
"(define-values"
"(unpack16.1$3)"
"(lambda(given-kws_161 given-args_162 p11_163 cctx12_164 name13_165 result-used?14_166)"
"(let-values(((rec?9_167)(car given-args_162)))"
"(compile-let15.1 rec?9_167 p11_163 cctx12_164 name13_165 result-used?14_166))))"
"(define-values"
"(compile-let17.1)"
"(lifted/2.1$16"
"(lambda(given-kws_168 given-argc_169)"
"(if(= given-argc_169 6)"
"(let-values(((l2_170) given-kws_168))"
"(if(pair? l2_170)(if(eq?(car l2_170) '#:rec?)(null?(cdr l2_170)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_171 given-args_172 p_173 cctx_174 name_175 result-used?_176)"
"(unpack16.1$3 given-kws_171 given-args_172 p_173 cctx_174 name_175 result-used?_176)))"
" '(#:rec?)"
" '(#:rec?)))"
"(define-values"
"(add-undefined-error-name-property)"
"(lambda(sym_177 orig-id_178)"
"(let-values(((id_179)(correlate* orig-id_178 sym_177)))"
"(correlated-property"
"(->correlated id_179)"
" 'undefined-error-name"
"(let-values(((or-part_180)(syntax-property$1 orig-id_178 'undefined-error-name)))"
"(if or-part_180 or-part_180(syntax-e$1 orig-id_178)))))))"
"(define-values"
"(compile-identifier24.1)"
"(lambda(set-to19_181 set-to21_182 set-to?18_183 set-to?20_184 p22_185 cctx23_186)"
"(let-values(((p_187) p22_185))"
"(let-values(((cctx_188) cctx23_186))"
"(let-values(((set-to?_189)(if set-to?20_184 set-to?18_183 #f)))"
"(let-values(((rhs_190)(if set-to21_182 set-to19_181 #f)))"
"(let-values()"
"(let-values(((normal-b_191)(parsed-id-binding p_187)))"
"(let-values(((b_192)"
"(let-values(((or-part_194) normal-b_191))"
"(if or-part_194"
" or-part_194"
"(let-values(((temp45_195)(compile-context-self cctx_188))"
"((temp46_196)(compile-context-phase cctx_188))"
"((temp47_197)(syntax-e$1(parsed-s p_187))))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp45_195"
" temp46_196"
" temp47_197))))))"
"(let-values(((sym_193)"
"(if(local-binding? b_192)"
"(let-values()(local-binding-key b_192))"
"(if(module-binding? b_192)"
"(let-values()"
"(let-values(((mpi_198)"
"(if(parsed-top-id? p_187)"
"(compile-context-self cctx_188)"
"(module-binding-module b_192))))"
"(if(parsed-primitive-id? p_187)"
"(let-values()"
"(begin"
"(if(zero?(module-binding-phase b_192))"
"(void)"
"(let-values()"
"                                                  (error \"internal error: non-zero phase for a primitive\")))"
"(if set-to?_189"
"(let-values()"
"(error"
"                                                   \"internal error: cannot assign to a primitive:\""
"(parsed-s p_187)))"
"(void))"
"(module-binding-sym b_192)))"
"(if(eq? mpi_198(compile-context-module-self cctx_188))"
"(let-values()"
"(let-values(((header_199)(compile-context-header cctx_188)))"
"(hash-ref"
"(header-binding-sym-to-define-sym header_199)"
"(module-binding-sym b_192))))"
"(let-values()"
"(let-values(((temp48_200)(compile-context-header cctx_188))"
"((mpi49_201) mpi_198)"
"((temp50_202)(module-binding-phase b_192))"
"((temp51_203)(module-binding-sym b_192))"
"((temp52_204)"
"(let-values(((or-part_205)"
"(module-binding-extra-inspector b_192)))"
"(if or-part_205"
" or-part_205"
"(let-values(((or-part_206)"
"(parsed-id-inspector p_187)))"
"(if or-part_206"
" or-part_206"
"(syntax-inspector(parsed-s p_187))))))))"
"(register-required-variable-use!19.1"
" #f"
" #f"
" temp48_200"
" mpi49_201"
" temp50_202"
" temp51_203"
" temp52_204)))))))"
"(let-values()"
"(error"
"                                       \"not a reference to a module or local binding:\""
" b_192"
"(parsed-s p_187)))))))"
"(correlate*(parsed-s p_187)(if set-to?_189(list 'set! sym_193 rhs_190) sym_193))))))))))))"
"(define-values"
"(unpack25.1$1)"
"(lambda(given-kws_207 given-args_208 p22_209 cctx23_210)"
"(let-values(((set-to21_211)(if(pair? given-kws_207)(eq? '#:set-to(car given-kws_207)) #f)))"
"(let-values(((set-to19_212)(if set-to21_211(car given-args_208)(void)))"
"((given-kws_213)(if set-to21_211(cdr given-kws_207) given-kws_207))"
"((given-args_214)(if set-to21_211(cdr given-args_208) given-args_208)))"
"(let-values(((set-to?20_215)(pair? given-kws_213)))"
"(let-values(((set-to?18_216)(if set-to?20_215(car given-args_214)(void))))"
"(compile-identifier24.1 set-to19_212 set-to21_211 set-to?18_216 set-to?20_215 p22_209 cctx23_210)))))))"
"(define-values"
"(compile-identifier26.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_217 given-argc_218)"
"(if(= given-argc_218 4)"
"(let-values(((l1_219) given-kws_217))"
"(let-values(((l1_220)(if(null? l1_219) l1_219(if(eq?(car l1_219) '#:set-to)(cdr l1_219) l1_219))))"
"(let-values(((l1_221) l1_220))"
"(let-values(((l1_222)(if(null? l1_221) l1_221(if(eq?(car l1_221) '#:set-to?)(cdr l1_221) l1_221))))"
"(null? l1_222)))))"
" #f))"
"(case-lambda"
"((given-kws_223 given-args_224 p_225 cctx_226)(unpack25.1$1 given-kws_223 given-args_224 p_225 cctx_226)))"
" null"
" '(#:set-to #:set-to?)"
"(let-values(((compile-identifier_227)(case-lambda((p_228 cctx_229)(unpack25.1$1 null null p_228 cctx_229)))))"
" compile-identifier_227)))"
"(define-values"
"(compile-quote-syntax)"
"(lambda(q_230 cctx_231)"
"(let-values(((pos_232)(add-syntax-literal!(compile-context-header cctx_231) q_230)))"
"(if(compile-context-lazy-syntax-literals? cctx_231)"
"(let-values()(generate-lazy-syntax-literal-lookup pos_232))"
"(let-values()(generate-eager-syntax-literal-lookup pos_232))))))"
"(void)"
"(void)"
"(define-values"
"(struct:link-info"
" link-info1.1"
" link-info?"
" link-info-link-module-uses"
" link-info-imports"
" link-info-extra-inspectorsss"
" link-info-def-decls)"
"(let-values(((struct:_6 make-_7 ?_8 -ref_9 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type 'link-info #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'link-info)))))"
"(values"
" struct:_6"
" make-_7"
" ?_8"
"(make-struct-field-accessor -ref_9 0 'link-module-uses)"
"(make-struct-field-accessor -ref_9 1 'imports)"
"(make-struct-field-accessor -ref_9 2 'extra-inspectorsss)"
"(make-struct-field-accessor -ref_9 3 'def-decls))))"
"(define-values"
"(compile-forms27.1)"
"(lambda(body-imports2_49"
" body-suffix-forms3_50"
" body-suffix-forms14_51"
" compiled-expression-callback7_52"
" compiled-expression-callback18_53"
" cross-linklet-inlining?12_54"
" cross-linklet-inlining?23_55"
" definition-callback8_56"
" definition-callback19_57"
" encoded-root-expand-ctx-box5_58"
" encoded-root-expand-ctx-box16_59"
" force-phases4_60"
" force-phases15_61"
" get-module-linklet-info10_62"
" get-module-linklet-info21_63"
" other-form-callback9_64"
" other-form-callback20_65"
" root-ctx-only-if-syntax?6_66"
" root-ctx-only-if-syntax?17_67"
" to-source?11_68"
" to-source?22_69"
" bodys24_70"
" cctx25_71"
" mpis26_72)"
"(let-values(((bodys_73) bodys24_70))"
"(let-values(((cctx_74) cctx25_71))"
"(let-values(((mpis_75) mpis26_72))"
"(let-values(((body-imports_76) body-imports2_49))"
"(let-values(((body-suffix-forms_77)(if body-suffix-forms14_51 body-suffix-forms3_50 null)))"
"(let-values(((force-phases_78)(if force-phases15_61 force-phases4_60 null)))"
"(let-values(((encoded-root-expand-ctx-box_79)"
"(if encoded-root-expand-ctx-box16_59 encoded-root-expand-ctx-box5_58 #f)))"
"(let-values(((root-ctx-only-if-syntax?_80)"
"(if root-ctx-only-if-syntax?17_67 root-ctx-only-if-syntax?6_66 #f)))"
"(let-values(((compiled-expression-callback_81)"
"(if compiled-expression-callback18_53 compiled-expression-callback7_52 void)))"
"(let-values(((definition-callback_82)"
"(if definition-callback19_57 definition-callback8_56 void)))"
"(let-values(((other-form-callback_83)"
"(if other-form-callback20_65 other-form-callback9_64 void)))"
"(let-values(((get-module-linklet-info_84)"
"(if get-module-linklet-info21_63"
" get-module-linklet-info10_62"
"(lambda(mod-name_85 p_86) #f))))"
"(let-values(((to-source?_87)(if to-source?22_69 to-source?11_68 #f)))"
"(let-values(((cross-linklet-inlining?_88)"
"(if cross-linklet-inlining?23_55 cross-linklet-inlining?12_54 #t)))"
"(let-values()"
"(let-values(((phase_89)(compile-context-phase cctx_74)))"
"(let-values(((self_90)(compile-context-self cctx_74)))"
"(let-values(((syntax-literals_91)(make-syntax-literals)))"
"(let-values(((phase-to-body_92)(make-hasheqv)))"
"(let-values(((add-body!_93)"
"(lambda(phase_109 body_110)"
"(hash-update!"
" phase-to-body_92"
" phase_109"
"(lambda(l_111)(cons body_110 l_111))"
" null))))"
"(let-values(((phase-to-header_94)(make-hasheqv)))"
"(let-values(((find-or-create-header!_95)"
"(lambda(phase_112)"
"(let-values(((or-part_113)"
"(hash-ref phase-to-header_94 phase_112 #f)))"
"(if or-part_113"
" or-part_113"
"(let-values(((header_114)"
"(make-header"
" mpis_75"
" syntax-literals_91)))"
"(begin"
"(hash-set!"
" phase-to-header_94"
" phase_112"
" header_114)"
" header_114)))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_115) force-phases_78))"
"(begin"
"(if(list? lst_115)"
"(void)"
"(let-values()(in-list lst_115)))"
"((letrec-values(((for-loop_116)"
"(lambda(lst_117)"
"(if(pair? lst_117)"
"(let-values(((phase_118)"
"(unsafe-car"
" lst_117))"
"((rest_119)"
"(unsafe-cdr"
" lst_117)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(find-or-create-header!_95"
" phase_118)"
"(add-body!_93"
" phase_118"
" '(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_116 rest_119)"
"(values))))"
"(values)))))"
" for-loop_116)"
" lst_115)))"
"(values))))"
"(let-values((()(begin(void)(values))))"
"(let-values(((saw-define-syntaxes?_96) #f))"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_74)"
"(let-values()"
"((letrec-values(((loop!_120)"
"(lambda(bodys_121"
" phase_122"
" header_123)"
"(begin"
"(let-values(((lst_124)"
" bodys_121))"
"(begin"
"(if(list? lst_124)"
"(void)"
"(let-values()"
"(in-list"
" lst_124)))"
"((letrec-values(((for-loop_125)"
"(lambda(lst_126)"
"(if(pair?"
" lst_126)"
"(let-values(((body_127)"
"(unsafe-car"
" lst_126))"
"((rest_128)"
"(unsafe-cdr"
" lst_126)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_127)"
"(let-values()"
"(begin"
"(let-values(((lst_129)"
"(parsed-define-values-syms"
" body_127)))"
"(begin"
"(if(list?"
" lst_129)"
"(void)"
"(let-values()"
"(in-list"
" lst_129)))"
"((letrec-values(((for-loop_130)"
"(lambda(lst_131)"
"(if(pair?"
" lst_131)"
"(let-values(((sym_132)"
"(unsafe-car"
" lst_131))"
"((rest_133)"
"(unsafe-cdr"
" lst_131)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((def-sym_134)"
"(select-fresh"
" sym_132"
" header_123)))"
"(begin"
"(hash-set!"
"(header-binding-sym-to-define-sym"
" header_123)"
" sym_132"
" def-sym_134)"
"(set-header-binding-syms-in-order!"
" header_123"
"(cons"
" sym_132"
"(header-binding-syms-in-order"
" header_123)))"
"(register-as-defined!"
" header_123"
" def-sym_134))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_130"
" rest_133)"
"(values))))"
"(values)))))"
" for-loop_130)"
" lst_129)))"
"(void)))"
"(if(parsed-begin-for-syntax?"
" body_127)"
"(let-values()"
"(loop!_120"
"(parsed-begin-for-syntax-body"
" body_127)"
"(add1"
" phase_122)"
"(find-or-create-header!_95"
"(add1"
" phase_122))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_125"
" rest_128)"
"(values))))"
"(values)))))"
" for-loop_125)"
" lst_124)))"
"(void)))))"
" loop!_120)"
" bodys_73"
" phase_89"
"(find-or-create-header!_95 phase_89)))"
"(void))"
"(values))))"
"(let-values(((as-required?_97)"
"(lambda(header_135)"
"(lambda(sym_136)"
"(registered-as-required?"
" header_135"
" sym_136)))))"
"(let-values(((last-i_98)(sub1(length bodys_73))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop!_137)"
"(lambda(bodys_138"
" phase_139"
" header_140)"
"(begin"
"(let-values(((lst_141)"
" bodys_138)"
"((start_142)"
" 0))"
"(begin"
"(if(list?"
" lst_141)"
"(void)"
"(let-values()"
"(in-list"
" lst_141)))"
"(if(exact-nonnegative-integer?"
" start_142)"
"(void)"
"(let-values()"
"(in-naturals"
" start_142)))"
"((letrec-values(((for-loop_143)"
"(lambda(lst_144"
" pos_145)"
"(if(if(pair?"
" lst_144)"
" #t"
" #f)"
"(let-values(((body_146)"
"(unsafe-car"
" lst_144))"
"((rest_147)"
"(unsafe-cdr"
" lst_144))"
"((i_148)"
" pos_145))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_146)"
"(let-values()"
"(let-values(((ids_149)"
"(parsed-define-values-ids"
" body_146)))"
"(let-values(((binding-syms_150)"
"(parsed-define-values-syms"
" body_146)))"
"(let-values(((def-syms_151)"
"(if(compile-context-module-self"
" cctx_74)"
"(let-values()"
"(let-values(((lst_153)"
" binding-syms_150))"
"(begin"
"(if(list?"
" lst_153)"
"(void)"
"(let-values()"
"(in-list"
" lst_153)))"
"((letrec-values(((for-loop_154)"
"(lambda(lst_155)"
"(if(pair?"
" lst_155)"
"(let-values(((binding-sym_156)"
"(unsafe-car"
" lst_155))"
"((rest_157)"
"(unsafe-cdr"
" lst_155)))"
"(let-values(((post-guard-var_158)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_159)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(header-binding-sym-to-define-sym"
" header_140)"
" binding-sym_156)))))"
"(let-values(((result_160)"
"(if(post-guard-var_158)"
"(for-loop_154"
" rest_157)"
" null)))"
"(cons"
" elem_159"
" result_160))))))"
" null))))"
" for-loop_154)"
" lst_153))))"
"(let-values()"
"(let-values(((lst_161)"
" binding-syms_150))"
"(begin"
"(if(list?"
" lst_161)"
"(void)"
"(let-values()"
"(in-list"
" lst_161)))"
"((letrec-values(((for-loop_162)"
"(lambda(lst_163)"
"(if(pair?"
" lst_163)"
"(let-values(((binding-sym_164)"
"(unsafe-car"
" lst_163))"
"((rest_165)"
"(unsafe-cdr"
" lst_163)))"
"(let-values(((post-guard-var_166)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_167)"
"(let-values()"
"(let-values()"
"(let-values(((header31_169)"
" header_140)"
"((temp32_170)"
"(compile-context-self"
" cctx_74))"
"((phase33_171)"
" phase_139)"
"((binding-sym34_172)"
" binding-sym_164)"
"((temp35_173)"
" #f)"
"((temp36_174)"
" #t))"
"(register-required-variable-use!19.1"
" temp36_174"
" #t"
" header31_169"
" temp32_170"
" phase33_171"
" binding-sym34_172"
" temp35_173))))))"
"(let-values(((result_175)"
"(if(post-guard-var_166)"
"(for-loop_162"
" rest_165)"
" null)))"
"(cons"
" elem_167"
" result_175))))))"
" null))))"
" for-loop_162)"
" lst_161)))))))"
"(let-values(((rhs_152)"
"(compile$2"
"(parsed-define-values-rhs"
" body_146)"
"(let-values(((the-struct_176)"
" cctx_74))"
"(if(compile-context?"
" the-struct_176)"
"(let-values(((phase37_177)"
" phase_139)"
"((header38_178)"
" header_140))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_176)"
" phase37_177"
"(compile-context-self"
" the-struct_176)"
"(compile-context-module-self"
" the-struct_176)"
"(compile-context-full-module-name"
" the-struct_176)"
"(compile-context-lazy-syntax-literals?"
" the-struct_176)"
" header38_178))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                \"compile-context?\""
" the-struct_176)))"
"(if(="
"(length"
" ids_149)"
" 1)"
"(car"
" ids_149)"
" #f))))"
"(begin"
"(definition-callback_82)"
"(compiled-expression-callback_81"
" rhs_152"
"(length"
" def-syms_151)"
" phase_139"
"(as-required?_97"
" header_140))"
"(add-body!_93"
" phase_139"
"(propagate-inline-property"
"(correlate*"
"(parsed-s"
" body_146)"
"(list"
" 'define-values"
" def-syms_151"
" rhs_152))"
"(parsed-s"
" body_146)))"
"(if(let-values(((or-part_179)"
"(compile-context-module-self"
" cctx_74)))"
"(if or-part_179"
" or-part_179"
"(null?"
" ids_149)))"
"(void)"
"(let-values()"
"(begin"
"(add-body!_93"
" phase_139"
"(list*"
" 'if"
" #f"
"(list*"
" 'begin"
"(let-values(((lst_180)"
" def-syms_151))"
"(begin"
"(if(list?"
" lst_180)"
"(void)"
"(let-values()"
"(in-list"
" lst_180)))"
"((letrec-values(((for-loop_181)"
"(lambda(lst_182)"
"(if(pair?"
" lst_182)"
"(let-values(((def-sym_183)"
"(unsafe-car"
" lst_182))"
"((rest_184)"
"(unsafe-cdr"
" lst_182)))"
"(let-values(((post-guard-var_185)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_186)"
"(let-values()"
"(let-values()"
"(list*"
" 'set!"
" def-sym_183"
" '(#f))))))"
"(let-values(((result_187)"
"(if(post-guard-var_185)"
"(for-loop_181"
" rest_184)"
" null)))"
"(cons"
" elem_186"
" result_187))))))"
" null))))"
" for-loop_181)"
" lst_180))))"
" '((void))))"
"(add-body!_93"
" phase_139"
"(compile-top-level-bind"
" ids_149"
" binding-syms_150"
"(let-values(((the-struct_188)"
" cctx_74))"
"(if(compile-context?"
" the-struct_188)"
"(let-values(((phase39_189)"
" phase_139)"
"((header40_190)"
" header_140))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_188)"
" phase39_189"
"(compile-context-self"
" the-struct_188)"
"(compile-context-module-self"
" the-struct_188)"
"(compile-context-full-module-name"
" the-struct_188)"
"(compile-context-lazy-syntax-literals?"
" the-struct_188)"
" header40_190))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                             \"compile-context?\""
" the-struct_188)))"
" #f)))))))))))"
"(if(parsed-define-syntaxes?"
" body_146)"
"(let-values()"
"(let-values(((ids_191)"
"(parsed-define-syntaxes-ids"
" body_146)))"
"(let-values(((binding-syms_192)"
"(parsed-define-syntaxes-syms"
" body_146)))"
"(let-values(((next-header_193)"
"(find-or-create-header!_95"
"(add1"
" phase_139))))"
"(let-values(((gen-syms_194)"
"(let-values(((lst_197)"
" binding-syms_192))"
"(begin"
"(if(list?"
" lst_197)"
"(void)"
"(let-values()"
"(in-list"
" lst_197)))"
"((letrec-values(((for-loop_198)"
"(lambda(lst_199)"
"(if(pair?"
" lst_199)"
"(let-values(((binding-sym_200)"
"(unsafe-car"
" lst_199))"
"((rest_201)"
"(unsafe-cdr"
" lst_199)))"
"(let-values(((post-guard-var_202)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_203)"
"(let-values()"
"(let-values()"
"(select-fresh"
" binding-sym_200"
" next-header_193)))))"
"(let-values(((result_204)"
"(if(post-guard-var_202)"
"(for-loop_198"
" rest_201)"
" null)))"
"(cons"
" elem_203"
" result_204))))))"
" null))))"
" for-loop_198)"
" lst_197)))))"
"(let-values(((rhs_195)"
"(compile$2"
"(parsed-define-syntaxes-rhs"
" body_146)"
"(let-values(((the-struct_205)"
" cctx_74))"
"(if(compile-context?"
" the-struct_205)"
"(let-values(((phase41_206)"
"(add1"
" phase_139))"
"((header42_207)"
" next-header_193))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_205)"
" phase41_206"
"(compile-context-self"
" the-struct_205)"
"(compile-context-module-self"
" the-struct_205)"
"(compile-context-full-module-name"
" the-struct_205)"
"(compile-context-lazy-syntax-literals?"
" the-struct_205)"
" header42_207))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                    \"compile-context?\""
" the-struct_205))))))"
"(let-values((()"
"(begin"
"(definition-callback_82)"
"(values))))"
"(let-values((()"
"(begin"
"(compiled-expression-callback_81"
" rhs_195"
"(length"
" gen-syms_194)"
"(add1"
" phase_139)"
"(as-required?_97"
" header_140))"
"(values))))"
"(let-values(((transformer-set!s_196)"
"(let-values(((lst_208)"
" binding-syms_192)"
"((lst_209)"
" gen-syms_194))"
"(begin"
"(if(list?"
" lst_208)"
"(void)"
"(let-values()"
"(in-list"
" lst_208)))"
"(if(list?"
" lst_209)"
"(void)"
"(let-values()"
"(in-list"
" lst_209)))"
"((letrec-values(((for-loop_210)"
"(lambda(lst_211"
" lst_212)"
"(if(if(pair?"
" lst_211)"
"(pair?"
" lst_212)"
" #f)"
"(let-values(((binding-sym_213)"
"(unsafe-car"
" lst_211))"
"((rest_214)"
"(unsafe-cdr"
" lst_211))"
"((gen-sym_215)"
"(unsafe-car"
" lst_212))"
"((rest_216)"
"(unsafe-cdr"
" lst_212)))"
"(let-values(((post-guard-var_217)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_218)"
"(let-values()"
"(let-values()"
"(list"
" set-transformer!-id"
"(list"
" 'quote"
" binding-sym_213)"
" gen-sym_215)))))"
"(let-values(((result_219)"
"(if(post-guard-var_217)"
"(for-loop_210"
" rest_214"
" rest_216)"
" null)))"
"(cons"
" elem_218"
" result_219))))))"
" null))))"
" for-loop_210)"
" lst_208"
" lst_209)))))"
"(begin"
"(if(compile-context-module-self"
" cctx_74)"
"(let-values()"
"(add-body!_93"
"(add1"
" phase_139)"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_194"
" rhs_195))"
"(list*"
" 'begin"
"(qq-append"
" transformer-set!s_196"
" '((void)))))))"
"(let-values()"
"(add-body!_93"
"(add1"
" phase_139)"
"(generate-top-level-define-syntaxes"
" gen-syms_194"
" rhs_195"
" transformer-set!s_196"
"(compile-top-level-bind"
" ids_191"
" binding-syms_192"
"(let-values(((the-struct_220)"
" cctx_74))"
"(if(compile-context?"
" the-struct_220)"
"(let-values(((phase43_221)"
" phase_139)"
"((header44_222)"
" header_140))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_220)"
" phase43_221"
"(compile-context-self"
" the-struct_220)"
"(compile-context-module-self"
" the-struct_220)"
"(compile-context-full-module-name"
" the-struct_220)"
"(compile-context-lazy-syntax-literals?"
" the-struct_220)"
" header44_222))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                      \"compile-context?\""
" the-struct_220)))"
" gen-syms_194)))))"
"(set! saw-define-syntaxes?_96"
" #t)))))))))))"
"(if(parsed-begin-for-syntax?"
" body_146)"
"(let-values()"
"(loop!_137"
"(parsed-begin-for-syntax-body"
" body_146)"
"(add1"
" phase_139)"
"(find-or-create-header!_95"
"(add1"
" phase_139))))"
"(if(let-values(((or-part_223)"
"(parsed-#%declare?"
" body_146)))"
"(if or-part_223"
" or-part_223"
"(let-values(((or-part_224)"
"(parsed-module?"
" body_146)))"
"(if or-part_224"
" or-part_224"
"(parsed-require?"
" body_146)))))"
"(let-values()"
"(let-values(((e_225)"
"(other-form-callback_83"
" body_146"
"(let-values(((the-struct_226)"
" cctx_74))"
"(if(compile-context?"
" the-struct_226)"
"(let-values(((phase45_227)"
" phase_139)"
"((header46_228)"
" header_140))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_226)"
" phase45_227"
"(compile-context-self"
" the-struct_226)"
"(compile-context-module-self"
" the-struct_226)"
"(compile-context-full-module-name"
" the-struct_226)"
"(compile-context-lazy-syntax-literals?"
" the-struct_226)"
" header46_228))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                \"compile-context?\""
" the-struct_226))))))"
"(if e_225"
"(let-values()"
"(begin"
"(compiled-expression-callback_81"
" e_225"
" #f"
" phase_139"
"(as-required?_97"
" header_140))"
"(add-body!_93"
" phase_139"
" e_225)))"
"(void))))"
"(let-values()"
"(let-values(((e_229)"
"(compile$2"
" body_146"
"(let-values(((the-struct_230)"
" cctx_74))"
"(if(compile-context?"
" the-struct_230)"
"(let-values(((phase47_231)"
" phase_139)"
"((header48_232)"
" header_140))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_230)"
" phase47_231"
"(compile-context-self"
" the-struct_230)"
"(compile-context-module-self"
" the-struct_230)"
"(compile-context-full-module-name"
" the-struct_230)"
"(compile-context-lazy-syntax-literals?"
" the-struct_230)"
" header48_232))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                \"compile-context?\""
" the-struct_230)))"
" #f"
"(="
" i_148"
" last-i_98))))"
"(begin"
"(compiled-expression-callback_81"
" e_229"
" #f"
" phase_139"
"(as-required?_97"
" header_140))"
"(add-body!_93"
" phase_139"
" e_229)))))))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_143"
" rest_147"
"(+"
" pos_145"
" 1))"
"(values))))"
"(values)))))"
" for-loop_143)"
" lst_141"
" start_142)))"
"(void)))))"
" loop!_137)"
" bodys_73"
" phase_89"
"(find-or-create-header!_95 phase_89))"
"(values))))"
"(let-values(((encoded-root-expand-pos_99)"
"(if encoded-root-expand-ctx-box_79"
"(if(unbox encoded-root-expand-ctx-box_79)"
"(if(not"
"(if root-ctx-only-if-syntax?_80"
"(if(not saw-define-syntaxes?_96)"
"(syntax-literals-empty?"
" syntax-literals_91)"
" #f)"
" #f))"
"(add-syntax-literal!"
" syntax-literals_91"
"(unbox"
" encoded-root-expand-ctx-box_79))"
" #f)"
" #f)"
" #f)))"
"(let-values(((phases-in-order_100)"
"(let-values(((temp49_233)"
"(hash-keys"
" phase-to-body_92))"
"((<50_234) <))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp49_233"
" <50_234))))"
"(let-values(((min-phase_101)"
"(if(pair? phases-in-order_100)"
"(car phases-in-order_100)"
" phase_89)))"
"(let-values(((max-phase_102)"
"(if(pair? phases-in-order_100)"
"(car"
"(alt-reverse phases-in-order_100))"
" phase_89)))"
"(let-values(((phase-to-link-info_103)"
"(let-values(((lst_235)"
" phases-in-order_100))"
"(begin"
"(if(list? lst_235)"
"(void)"
"(let-values()"
"(in-list lst_235)))"
"((letrec-values(((for-loop_236)"
"(lambda(table_237"
" lst_238)"
"(if(pair?"
" lst_238)"
"(let-values(((phase_239)"
"(unsafe-car"
" lst_238))"
"((rest_240)"
"(unsafe-cdr"
" lst_238)))"
"(let-values(((table_241)"
"(let-values(((table_242)"
" table_237))"
"(let-values(((table_243)"
"(let-values()"
"(let-values(((key_244"
" val_245)"
"(let-values()"
"(let-values(((header_246)"
"(hash-ref"
" phase-to-header_94"
" phase_239"
" #f)))"
"(let-values(((link-module-uses_247"
" imports_248"
" extra-inspectorsss_249"
" def-decls_250)"
"(generate-links+imports"
" header_246"
" phase_239"
" cctx_74)))"
"(values"
" phase_239"
"(link-info1.1"
" link-module-uses_247"
" imports_248"
" extra-inspectorsss_249"
" def-decls_250)))))))"
"(hash-set"
" table_242"
" key_244"
" val_245)))))"
"(values"
" table_243)))))"
"(if(not"
" #f)"
"(for-loop_236"
" table_241"
" rest_240)"
" table_241)))"
" table_237))))"
" for-loop_236)"
" '#hash()"
" lst_235)))))"
"(let-values(((body-linklets+module-uses_104)"
"(let-values(((lst_251)"
" phases-in-order_100))"
"(begin"
"(if(list? lst_251)"
"(void)"
"(let-values()"
"(in-list lst_251)))"
"((letrec-values(((for-loop_252)"
"(lambda(table_253"
" lst_254)"
"(if(pair?"
" lst_254)"
"(let-values(((phase_255)"
"(unsafe-car"
" lst_254))"
"((rest_256)"
"(unsafe-cdr"
" lst_254)))"
"(let-values(((table_257)"
"(let-values(((table_258)"
" table_253))"
"(let-values(((table_259)"
"(let-values()"
"(let-values(((key_260"
" val_261)"
"(let-values()"
"(let-values(((bodys_262)"
"(hash-ref"
" phase-to-body_92"
" phase_255)))"
"(let-values(((li_263)"
"(hash-ref"
" phase-to-link-info_103"
" phase_255)))"
"(let-values(((binding-sym-to-define-sym_264)"
"(header-binding-sym-to-define-sym"
"(hash-ref"
" phase-to-header_94"
" phase_255))))"
"(let-values(((module-uses_265)"
"(link-info-link-module-uses"
" li_263)))"
"(let-values(((linklet_266"
" new-module-uses_267)"
"(let-values()"
"((if to-source?_87"
"(lambda(l_268"
" name_269"
" keys_270"
" getter_271)"
"(values"
" l_268"
" keys_270))"
"(lambda(l_272"
" name_273"
" keys_274"
" getter_275)"
"(if cross-linklet-inlining?_88"
"(1/compile-linklet"
" l_272"
" name_273"
" keys_274"
" getter_275)"
"(values"
"(1/compile-linklet"
" l_272"
" name_273)"
" keys_274))))"
"(list*"
" 'linklet"
"(qq-append"
" body-imports_76"
"(link-info-imports"
" li_263))"
"(qq-append"
"(link-info-def-decls"
" li_263)"
"(let-values(((lst_276)"
"(header-binding-syms-in-order"
"(hash-ref"
" phase-to-header_94"
" phase_255))))"
"(begin"
"(if(list?"
" lst_276)"
"(void)"
"(let-values()"
"(in-list"
" lst_276)))"
"((letrec-values(((for-loop_277)"
"(lambda(lst_278)"
"(if(pair?"
" lst_278)"
"(let-values(((binding-sym_279)"
"(unsafe-car"
" lst_278))"
"((rest_280)"
"(unsafe-cdr"
" lst_278)))"
"(let-values(((post-guard-var_281)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_282)"
"(let-values()"
"(let-values()"
"(let-values(((def-sym_283)"
"(hash-ref"
" binding-sym-to-define-sym_264"
" binding-sym_279)))"
"(list"
" def-sym_283"
" binding-sym_279))))))"
"(let-values(((result_284)"
"(if(post-guard-var_281)"
"(for-loop_277"
" rest_280)"
" null)))"
"(cons"
" elem_282"
" result_284))))))"
" null))))"
" for-loop_277)"
" lst_276))))"
"(qq-append"
"(alt-reverse"
" bodys_262)"
" body-suffix-forms_77))"
" 'module"
"(list->vector"
"(append"
"(let-values(((lst_285)"
" body-imports_76))"
"(begin"
"(if(list?"
" lst_285)"
"(void)"
"(let-values()"
"(in-list"
" lst_285)))"
"((letrec-values(((for-loop_286)"
"(lambda(lst_287)"
"(if(pair?"
" lst_287)"
"(let-values(((i_288)"
"(unsafe-car"
" lst_287))"
"((rest_289)"
"(unsafe-cdr"
" lst_287)))"
"(let-values(((post-guard-var_290)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_291)"
"(let-values()"
"(let-values()"
" #f))))"
"(let-values(((result_292)"
"(if(post-guard-var_290)"
"(for-loop_286"
" rest_289)"
" null)))"
"(cons"
" elem_291"
" result_292))))))"
" null))))"
" for-loop_286)"
" lst_285)))"
"(link-info-link-module-uses"
" li_263)))"
"(if cross-linklet-inlining?_88"
"(make-module-use-to-linklet"
"(compile-context-namespace"
" cctx_74)"
" get-module-linklet-info_84"
"(link-info-link-module-uses"
" li_263))"
" #f)))))"
"(values"
" phase_255"
"(cons"
" linklet_266"
"(list-tail"
"(vector->list"
" new-module-uses_267)"
"(length"
" body-imports_76))))))))))))"
"(hash-set"
" table_258"
" key_260"
" val_261)))))"
"(values"
" table_259)))))"
"(if(not"
" #f)"
"(for-loop_252"
" table_257"
" rest_256)"
" table_257)))"
" table_253))))"
" for-loop_252)"
" '#hasheq()"
" lst_251)))))"
"(let-values(((body-linklets_105)"
"(let-values(((ht_293)"
" body-linklets+module-uses_104))"
"(begin"
"(if((lambda(ht_294)"
"(hash? ht_294))"
" ht_293)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_293)))"
"((letrec-values(((for-loop_295)"
"(lambda(table_296"
" i_297)"
"(if i_297"
"(let-values(((phase_298"
" l+mus_299)"
"(hash-iterate-key+value"
" ht_293"
" i_297)))"
"(let-values(((table_300)"
"(let-values(((table_301)"
" table_296))"
"(let-values(((table_302)"
"(let-values()"
"(let-values(((key_303"
" val_304)"
"(let-values()"
"(values"
" phase_298"
"(car"
" l+mus_299)))))"
"(hash-set"
" table_301"
" key_303"
" val_304)))))"
"(values"
" table_302)))))"
"(if(not"
" #f)"
"(for-loop_295"
" table_300"
"(hash-iterate-next"
" ht_293"
" i_297))"
" table_300)))"
" table_296))))"
" for-loop_295)"
" '#hasheq()"
"(hash-iterate-first"
" ht_293))))))"
"(let-values(((phase-to-link-module-uses_106)"
"(let-values(((ht_305)"
" body-linklets+module-uses_104))"
"(begin"
"(if((lambda(ht_306)"
"(hash? ht_306))"
" ht_305)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_305)))"
"((letrec-values(((for-loop_307)"
"(lambda(table_308"
" i_309)"
"(if i_309"
"(let-values(((phase_310"
" l+mus_311)"
"(hash-iterate-key+value"
" ht_305"
" i_309)))"
"(let-values(((table_312)"
"(let-values(((table_313)"
" table_308))"
"(let-values(((table_314)"
"(let-values()"
"(let-values(((key_315"
" val_316)"
"(let-values()"
"(values"
" phase_310"
"(cdr"
" l+mus_311)))))"
"(hash-set"
" table_313"
" key_315"
" val_316)))))"
"(values"
" table_314)))))"
"(if(not"
" #f)"
"(for-loop_307"
" table_312"
"(hash-iterate-next"
" ht_305"
" i_309))"
" table_312)))"
" table_308))))"
" for-loop_307)"
" '#hasheq()"
"(hash-iterate-first"
" ht_305))))))"
"(let-values(((phase-to-link-module-uses-expr_107)"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_106"
" mpis_75)))"
"(let-values(((phase-to-link-extra-inspectorsss_108)"
"(let-values(((ht_317)"
" phase-to-link-info_103))"
"(begin"
"(if((lambda(ht_318)"
"(hash? ht_318))"
" ht_317)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_317)))"
"((letrec-values(((for-loop_319)"
"(lambda(table_320"
" i_321)"
"(if i_321"
"(let-values(((phase_322"
" li_323)"
"(hash-iterate-key+value"
" ht_317"
" i_321)))"
"(let-values(((table_324)"
"(let-values(((table_325)"
" table_320))"
"(let-values(((table_326)"
"(let-values()"
"(let-values(((key_327"
" val_328)"
"(let-values()"
"(values"
" phase_322"
"(link-info-extra-inspectorsss"
" li_323)))))"
"(hash-set"
" table_325"
" key_327"
" val_328)))))"
"(values"
" table_326)))))"
"(if(not"
" #f)"
"(for-loop_319"
" table_324"
"(hash-iterate-next"
" ht_317"
" i_321))"
" table_324)))"
" table_320))))"
" for-loop_319)"
" '#hash()"
"(hash-iterate-first"
" ht_317))))))"
"(values"
" body-linklets_105"
" min-phase_101"
" max-phase_102"
" phase-to-link-module-uses_106"
" phase-to-link-module-uses-expr_107"
" phase-to-link-extra-inspectorsss_108"
" syntax-literals_91"
" encoded-root-expand-pos_99))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(compile-top-level-bind)"
"(lambda(ids_382 binding-syms_383 cctx_384 trans-exprs_385)"
"(let-values(((phase_386)(compile-context-phase cctx_384)))"
"(let-values(((self_387)(compile-context-self cctx_384)))"
"(let-values(((header_388)(compile-context-header cctx_384)))"
"(let-values(((mpis_389)(header-module-path-indexes header_388)))"
"(let-values(((top-level-bind-scope_390)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx(compile-context-namespace cctx_384)))))"
"(let-values(((self-expr_391)(add-module-path-index! mpis_389 self_387)))"
"(list*"
" 'begin"
"(let-values(((lst_392) ids_382)"
"((lst_393) binding-syms_383)"
"((lst_394)"
"(let-values(((or-part_395) trans-exprs_385))"
"(if or-part_395"
" or-part_395"
"(let-values(((lst_396) ids_382))"
"(begin"
"(if(list? lst_396)(void)(let-values()(in-list lst_396)))"
"((letrec-values(((for-loop_397)"
"(lambda(lst_398)"
"(if(pair? lst_398)"
"(let-values(((id_399)(unsafe-car lst_398))"
"((rest_400)(unsafe-cdr lst_398)))"
"(let-values(((post-guard-var_401)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_402)"
"(let-values()(let-values() ''#f))))"
"(let-values(((result_403)"
"(if(post-guard-var_401)"
"(for-loop_397 rest_400)"
" null)))"
"(cons elem_402 result_403))))))"
" null))))"
" for-loop_397)"
" lst_396)))))))"
"(begin"
"(if(list? lst_392)(void)(let-values()(in-list lst_392)))"
"(if(list? lst_393)(void)(let-values()(in-list lst_393)))"
"(if(list? lst_394)(void)(let-values()(in-list lst_394)))"
"((letrec-values(((for-loop_404)"
"(lambda(lst_405 lst_406 lst_407)"
"(if(if(pair? lst_405)(if(pair? lst_406)(pair? lst_407) #f) #f)"
"(let-values(((id_408)(unsafe-car lst_405))"
"((rest_409)(unsafe-cdr lst_405))"
"((binding-sym_410)(unsafe-car lst_406))"
"((rest_411)(unsafe-cdr lst_406))"
"((trans-expr_412)(unsafe-car lst_407))"
"((rest_413)(unsafe-cdr lst_407)))"
"(let-values(((post-guard-var_414)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_415)"
"(let-values()"
"(let-values()"
"(let-values(((id-stx_416)"
"(compile-quote-syntax"
"(remove-scope"
" id_408"
" top-level-bind-scope_390)"
" cctx_384)))"
"(list"
" top-level-bind!-id"
" id-stx_416"
" self-expr_391"
" phase_386"
" phase-shift-id"
" ns-id"
"(list 'quote binding-sym_410)"
"(if trans-exprs_385 #t #f)"
" trans-expr_412))))))"
"(let-values(((result_417)"
"(if(post-guard-var_414)"
"(for-loop_404 rest_409 rest_411 rest_413)"
" null)))"
"(cons elem_415 result_417))))))"
" null))))"
" for-loop_404)"
" lst_392"
" lst_393"
" lst_394))))))))))))"
"(define-values"
"(generate-top-level-define-syntaxes)"
"(lambda(gen-syms_420 rhs_421 transformer-set!s_422 finish_423)"
"(list"
" 'call-with-values"
"(list 'lambda '() rhs_421)"
"(list"
" 'case-lambda"
"(list gen-syms_420(list* 'begin(qq-append transformer-set!s_422(list* finish_423 '((void))))))"
"(list"
" '()"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_420"
"(list*"
" 'values"
"(let-values(((lst_424) gen-syms_420))"
"(begin"
"(if(list? lst_424)(void)(let-values()(in-list lst_424)))"
"((letrec-values(((for-loop_425)"
"(lambda(lst_426)"
"(if(pair? lst_426)"
"(let-values(((s_427)(unsafe-car lst_426))((rest_428)(unsafe-cdr lst_426)))"
"(let-values(((post-guard-var_429)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_430)(let-values()(let-values() ''#f))))"
"(let-values(((result_431)"
"(if(post-guard-var_429)(for-loop_425 rest_428) null)))"
"(cons elem_430 result_431))))))"
" null))))"
" for-loop_425)"
" lst_424))))))"
"(list* 'begin finish_423 '((void)))))"
"(list 'args(list* 'let-values(list(list* gen-syms_420 '((apply values args)))) '((void))))))))"
"(define-values"
"(propagate-inline-property)"
"(lambda(e_432 orig-s_433)"
"(let-values(((v_434)(syntax-property$1 orig-s_433 'compiler-hint:cross-module-inline)))"
"(if v_434(correlated-property e_432 'compiler-hint:cross-module-inline v_434) e_432))))"
"(define-values"
"(make-module-use-to-linklet)"
"(lambda(ns_435 get-module-linklet-info_436 init-mus_437)"
"(let-values(((mu-intern-table_438)(make-hash)))"
"(let-values(((intern-module-use_439)"
"(lambda(mu_440)"
"(let-values(((mod-name_441)(1/module-path-index-resolve(module-use-module mu_440))))"
"(let-values(((or-part_442)"
"(hash-ref mu-intern-table_438(cons mod-name_441(module-use-phase mu_440)) #f)))"
"(if or-part_442"
" or-part_442"
"(begin"
"(hash-set! mu-intern-table_438(cons mod-name_441(module-use-phase mu_440)) mu_440)"
" mu_440)))))))"
"(begin"
"(for-each2 intern-module-use_439 init-mus_437)"
"(lambda(mu_443)"
"(if mu_443"
"(let-values()"
"(let-values(((mod-name_444)(1/module-path-index-resolve(module-use-module mu_443))))"
"(let-values(((mli_445)"
"(let-values(((or-part_446)"
"(get-module-linklet-info_436 mod-name_444(module-use-phase mu_443))))"
"(if or-part_446"
" or-part_446"
"(namespace->module-linklet-info ns_435 mod-name_444(module-use-phase mu_443))))))"
"(if mli_445"
"(values"
"(module-linklet-info-linklet-or-instance mli_445)"
"(if(module-linklet-info-module-uses mli_445)"
"(list->vector"
"(append"
" '(#f #f)"
"(let-values(((lst_447)(module-linklet-info-module-uses mli_445)))"
"(begin"
"(if(list? lst_447)(void)(let-values()(in-list lst_447)))"
"((letrec-values(((for-loop_448)"
"(lambda(lst_449)"
"(if(pair? lst_449)"
"(let-values(((sub-mu_450)(unsafe-car lst_449))"
"((rest_451)(unsafe-cdr lst_449)))"
"(let-values(((post-guard-var_452)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_453)"
"(let-values()"
"(let-values()"
"(intern-module-use_439"
"(module-use1.1"
"(module-path-index-shift"
"(module-use-module sub-mu_450)"
"(module-linklet-info-self mli_445)"
"(module-use-module mu_443))"
"(module-use-phase sub-mu_450)))))))"
"(let-values(((result_454)"
"(if(post-guard-var_452)"
"(for-loop_448 rest_451)"
" null)))"
"(cons elem_453 result_454))))))"
" null))))"
" for-loop_448)"
" lst_447)))))"
" #f))"
"(values #f #f)))))"
"(let-values()(values #f #f)))))))))"
"(void)"
"(void)"
"(define-values"
"(build-shared-data-linklet)"
"(lambda(cims_1 ns_2)"
"(let-values(((mpis_3)(make-module-path-index-table)))"
"(let-values(((mpi-trees_4)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_12)"
"(let-values(((vec_13 i_14)"
"(let-values(((vec_15 len_16)"
"(let-values(((vec_17)(compiled-in-memory-mpis cim_12)))"
"(begin"
"(if(vector? vec_17)(void)(let-values()(in-vector vec_17)))"
"(values vec_17(unsafe-vector-length vec_17))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_18)"
"(lambda(vec_19 i_20 pos_21)"
"(if(unsafe-fx< pos_21 len_16)"
"(let-values(((mpi_22)"
"(unsafe-vector-ref vec_15 pos_21)))"
"(let-values(((vec_23 i_24)"
"(let-values(((vec_25) vec_19)"
"((i_26) i_20))"
"(let-values(((vec_27 i_28)"
"(let-values()"
"(let-values(((new-vec_29)"
"(if(eq?"
" i_26"
"(unsafe-vector*-length"
" vec_25))"
"(grow-vector"
" vec_25)"
" vec_25)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_29"
" i_26"
"(let-values()"
"(add-module-path-index!/pos"
" mpis_3"
" mpi_22)))"
"(values"
" new-vec_29"
"(unsafe-fx+"
" i_26"
" 1)))))))"
"(values vec_27 i_28)))))"
"(if(not #f)"
"(for-loop_18 vec_23 i_24(unsafe-fx+ 1 pos_21))"
"(values vec_23 i_24))))"
"(values vec_19 i_20)))))"
" for-loop_18)"
"(make-vector 16)"
" 0"
" 0)))))"
"(shrink-vector vec_13 i_14))))))"
"(let-values(((syntax-literals_5)(make-syntax-literals)))"
"(let-values(((syntax-literals-trees_6)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_30)"
"(add-syntax-literals! syntax-literals_5(compiled-in-memory-syntax-literals cim_30))))))"
"(let-values(((module-uses-tables_7) null))"
"(let-values(((module-uses-tables-count_8) 0))"
"(let-values(((phase-to-link-module-uses-trees_9)"
"(map-cim-tree"
" cims_1"
"(lambda(cim_31)"
"(let-values(((pos_32) module-uses-tables-count_8))"
"(begin"
"(set! module-uses-tables_7"
"(cons"
"(compiled-in-memory-phase-to-link-module-uses cim_31)"
" module-uses-tables_7))"
"(set! module-uses-tables-count_8(add1 pos_32))"
" pos_32))))))"
"(let-values(((syntax-literals-expr_10)"
"(generate-eager-syntax-literals! syntax-literals_5 mpis_3 0 #f ns_2)))"
"(let-values(((phase-to-link-module-uses-expr_11)"
"(list*"
" 'vector"
"(let-values(((lst_33)(alt-reverse module-uses-tables_7)))"
"(begin"
"(if(list? lst_33)(void)(let-values()(in-list lst_33)))"
"((letrec-values(((for-loop_34)"
"(lambda(lst_35)"
"(if(pair? lst_35)"
"(let-values(((phase-to-link-module-uses_36)"
"(unsafe-car lst_35))"
"((rest_37)(unsafe-cdr lst_35)))"
"(let-values(((post-guard-var_38)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_39)"
"(let-values()"
"(let-values()"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_36"
" mpis_3)))))"
"(let-values(((result_40)"
"(if(post-guard-var_38)"
"(for-loop_34 rest_37)"
" null)))"
"(cons elem_39 result_40))))))"
" null))))"
" for-loop_34)"
" lst_33))))))"
"(1/compile-linklet"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list*"
" mpi-vector-id"
" '(mpi-vector-trees"
" phase-to-link-modules-vector"
" phase-to-link-modules-trees"
" syntax-literals"
" syntax-literals-trees))"
"(list 'define-values(list mpi-vector-id)(generate-module-path-index-deserialize mpis_3))"
"(list 'define-values '(mpi-vector-trees)(list 'quote mpi-trees_4))"
"(list 'define-values '(phase-to-link-modules-vector) phase-to-link-module-uses-expr_11)"
"(list"
" 'define-values"
" '(phase-to-link-modules-trees)"
"(list 'quote phase-to-link-module-uses-trees_9))"
"(list 'define-values '(syntax-literals) syntax-literals-expr_10)"
"(list"
" 'define-values"
" '(syntax-literals-trees)"
"(list 'quote syntax-literals-trees_6)))))))))))))))"
"(define-values"
"(map-cim-tree)"
"(lambda(cims_41 proc_42)"
"((letrec-values(((loop_43)"
"(lambda(cims_44)"
"(let-values(((lst_45) cims_44))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(lst_47)"
"(if(pair? lst_47)"
"(let-values(((cim_48)(unsafe-car lst_47))"
"((rest_49)(unsafe-cdr lst_47)))"
"(let-values(((post-guard-var_50)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_51)"
"(let-values()"
"(let-values()"
"(vector"
"(proc_42 cim_48)"
"(loop_43"
"(compiled-in-memory-pre-compiled-in-memorys"
" cim_48))"
"(loop_43"
"(compiled-in-memory-post-compiled-in-memorys"
" cim_48)))))))"
"(let-values(((result_52)"
"(if(post-guard-var_50)"
"(for-loop_46 rest_49)"
" null)))"
"(cons elem_51 result_52))))))"
" null))))"
" for-loop_46)"
" lst_45))))))"
" loop_43)"
" cims_41)))"
"(void)"
"(void)"
"(define-values"
"(compiled-tops->compiled-top8.1)"
"(lambda(merge-serialization?2_1"
" merge-serialization?5_2"
" namespace3_3"
" namespace6_4"
" to-source?1_5"
" to-source?4_6"
" all-cims7_7)"
"(let-values(((all-cims_8) all-cims7_7))"
"(let-values(((to-source?_9)(if to-source?4_6 to-source?1_5 #f)))"
"(let-values(((merge-serialization?_10)(if merge-serialization?5_2 merge-serialization?2_1 #f)))"
"(let-values(((ns_11)(if namespace6_4 namespace3_3 #f)))"
"(let-values()"
"(let-values(((cims_12)(remove-nontail-purely-functional all-cims_8)))"
"(if(= 1(length cims_12))"
"(let-values()(car cims_12))"
"(let-values()"
"(let-values(((sequence-ht_13)"
"(let-values(((lst_15) cims_12)((start_16) 0))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"(if(exact-nonnegative-integer? start_16)"
"(void)"
"(let-values()(in-naturals start_16)))"
"((letrec-values(((for-loop_17)"
"(lambda(table_18 lst_19 pos_20)"
"(if(if(pair? lst_19) #t #f)"
"(let-values(((cim_21)(unsafe-car lst_19))"
"((rest_22)(unsafe-cdr lst_19))"
"((i_23) pos_20))"
"(let-values(((table_24)"
"(let-values(((table_25) table_18))"
"(let-values(((table_26)"
"(let-values()"
"(let-values(((key_27"
" val_28)"
"(let-values()"
"(values"
"(string->symbol"
"(number->string"
" i_23))"
"((if to-source?_9"
" values"
" compiled-in-memory-linklet-directory)"
" cim_21)))))"
"(hash-set"
" table_25"
" key_27"
" val_28)))))"
"(values table_26)))))"
"(if(not #f)"
"(for-loop_17 table_24 rest_22(+ pos_20 1))"
" table_24)))"
" table_18))))"
" for-loop_17)"
" '#hasheq()"
" lst_15"
" start_16)))))"
"(let-values(((ht_14)"
"(if merge-serialization?_10"
"(hash-set"
" sequence-ht_13"
" 'data"
"(1/hash->linklet-directory"
"(hasheq"
" #f"
"(1/hash->linklet-bundle"
"(hasheq 0(build-shared-data-linklet cims_12 ns_11))))))"
" sequence-ht_13)))"
"(if to-source?_9"
"(let-values() ht_14)"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory ht_14)"
" #f"
" #f"
" #f"
" '#hasheqv()"
" #f"
" '#hasheqv()"
" '#()"
" '#()"
" cims_12"
" null"
" #f"
" #f)))))))))))))))"
"(define-values"
"(compiled-top->compiled-tops)"
"(lambda(ld_55)"
"(let-values(((ht_56)(1/linklet-directory->hash ld_55)))"
"(let-values(((start_57) 0)((end_58)(hash-count ht_56))((inc_59) 1))"
"(begin"
"(if(if(real? start_57)(if(real? end_58)(real? inc_59) #f) #f)"
"(void)"
"(let-values()(in-range start_57 end_58 inc_59)))"
"((letrec-values(((for-loop_60)"
"(lambda(pos_61)"
"(if(< pos_61 end_58)"
"(let-values(((i_62) pos_61))"
"(let-values(((post-guard-var_63)(lambda() #t)))"
"(let-values(((top_64)(hash-ref ht_56(string->symbol(number->string i_62)) #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_65)"
"(lambda()"
"(let-values()"
"(let-values(((post-guard-var_66)(lambda() #f)))"
"(let-values()"
"(if top_64"
"(let-values()"
"(let-values(((elem_67)"
"(let-values()"
"(let-values() top_64))))"
"(let-values(((result_68)"
"(if(post-guard-var_66)"
"(for-loop_65)"
"(if(post-guard-var_63)"
"(for-loop_60"
"(+ pos_61 inc_59))"
" null))))"
"(cons elem_67 result_68))))"
"(if(post-guard-var_66)"
"(for-loop_65)"
"(if(post-guard-var_63)"
"(for-loop_60(+ pos_61 inc_59))"
" null)))))))))"
" for-loop_65))))))"
" null))))"
" for-loop_60)"
" start_57))))))"
"(define-values"
"(remove-nontail-purely-functional)"
"(lambda(cims_69)"
"((letrec-values(((loop_70)"
"(lambda(cims_71)"
"(if(null? cims_71)"
"(let-values() null)"
"(if(null?(cdr cims_71))"
"(let-values() cims_71)"
"(if(if(compiled-in-memory?(car cims_71))"
"(compiled-in-memory-purely-functional?(car cims_71))"
" #f)"
"(let-values()(loop_70(cdr cims_71)))"
"(let-values()(cons(car cims_71)(cdr cims_71)))))))))"
" loop_70)"
" cims_69)))"
"(void)"
"(void)"
"(define-values"
"(struct:known-property known-property2.1 known-property?)"
"(let-values(((struct:_16 make-_17 ?_18 -ref_19 -set!_20)"
"(let-values()"
"(let-values()(make-struct-type 'known-property #f 0 0 #f null 'prefab #f '() #f 'known-property)))))"
"(values struct:_16 make-_17 ?_18)))"
"(define-values"
"(struct:known-function known-function3.1 known-function? known-function-arity known-function-pure?)"
"(let-values(((struct:_31 make-_32 ?_33 -ref_34 -set!_35)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-function #f 2 0 #f null 'prefab #f '(0 1) #f 'known-function)))))"
"(values"
" struct:_31"
" make-_32"
" ?_33"
"(make-struct-field-accessor -ref_34 0 'arity)"
"(make-struct-field-accessor -ref_34 1 'pure?))))"
"(define-values"
"(struct:known-struct-op known-struct-op4.1 known-struct-op? known-struct-op-type known-struct-op-field-count)"
"(let-values(((struct:_56 make-_57 ?_58 -ref_59 -set!_60)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-struct-op #f 2 0 #f null 'prefab #f '(0 1) #f 'known-struct-op)))))"
"(values"
" struct:_56"
" make-_57"
" ?_58"
"(make-struct-field-accessor -ref_59 0 'type)"
"(make-struct-field-accessor -ref_59 1 'field-count))))"
"(define-values"
"(any-side-effects?12.1)"
"(lambda(known-defns5_81 known-defns7_82 locals6_83 locals8_84 e9_85 expected-results10_86 required-reference?11_87)"
"(let-values(((e_88) e9_85))"
"(let-values(((expected-results_89) expected-results10_86))"
"(let-values(((required-reference?_90) required-reference?11_87))"
"(let-values(((defns_91)(if known-defns7_82 known-defns5_81 '#hasheq())))"
"(let-values(((locals_92)(if locals8_84 locals6_83 '#hasheq())))"
"(let-values()"
"(let-values(((actual-results_93)"
"((letrec-values(((loop_94)"
"(lambda(e_95 locals_96)"
"(let-values(((tmp_97)"
"(if(pair?(correlated-e e_95))"
"(correlated-e(car(correlated-e e_95)))"
" #f)))"
"(let-values(((index_98)"
"(if(symbol? tmp_97)"
"(hash-ref"
" '#hasheq((values . 3)"
"(begin . 5)"
"(void . 4)"
"(make-struct-type . 7)"
"(let-values . 2)"
"(quote . 1)"
"(letrec-values . 2)"
"(make-struct-field-mutator . 9)"
"(begin0 . 6)"
"(#%variable-reference . 1)"
"(lambda . 1)"
"(case-lambda . 1)"
"(make-struct-type-property . 10)"
"(make-struct-field-accessor . 8))"
" tmp_97"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_98 5)"
"(if(unsafe-fx< index_98 2)"
"(if(unsafe-fx< index_98 1)"
"(let-values()"
"(let-values(((v_99)(correlated-e e_95)))"
"(if(let-values(((or-part_100)(string? v_99)))"
"(if or-part_100"
" or-part_100"
"(let-values(((or-part_101)(number? v_99)))"
"(if or-part_101"
" or-part_101"
"(let-values(((or-part_102)"
"(boolean? v_99)))"
"(if or-part_102"
" or-part_102"
"(char? v_99)))))))"
"(let-values() 1)"
"(let-values(((c1_103)"
"(if(pair? v_99)"
"(hash-ref"
" defns_91"
"(correlated-e(car v_99))"
" #f)"
" #f)))"
"(if c1_103"
"((lambda(d_104)"
"(let-values(((ok?_105 _19_106 e20_107)"
"(let-values(((s_118) e_95))"
"(let-values(((orig-s_119)"
" s_118))"
"(let-values(((_19_120"
" e20_121)"
"(let-values(((s_122)"
"(if(syntax?$2"
" s_118)"
"(syntax-e$3"
" s_118)"
" s_118)))"
"(if(pair?"
" s_122)"
"(let-values(((_21_123)"
"(let-values(((s_125)"
"(car"
" s_122)))"
" s_125))"
"((e22_124)"
"(let-values(((s_126)"
"(cdr"
" s_122)))"
"(let-values(((s_127)"
"(if(syntax?$2"
" s_126)"
"(syntax-e$3"
" s_126)"
" s_126)))"
"(let-values(((flat-s_128)"
"(to-syntax-list.1$1"
" s_127)))"
"(if(not"
" flat-s_128)"
"(let-values()"
"((lambda(false_129"
" str_130"
" e_131)"
"(error"
" str_130))"
" #f"
"                                                                                                                                      \"bad syntax\""
" orig-s_119))"
"(let-values()"
" flat-s_128)))))))"
"(values"
" _21_123"
" e22_124))"
"((lambda(false_135"
" str_136"
" e_137)"
"(error"
" str_136))"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_119)))))"
"(values"
" #t"
" _19_120"
" e20_121))))))"
"(if(known-struct-op? d_104)"
"(if(eq?"
" 'constructor"
"(known-struct-op-type d_104))"
"(if(="
"(known-struct-op-field-count d_104)"
"(length e20_107))"
"(if(let-values(((lst_138) e20_107))"
"(begin"
"(if(list? lst_138)"
"(void)"
"(let-values()"
"(in-list lst_138)))"
"((letrec-values(((for-loop_139)"
"(lambda(result_140"
" lst_141)"
"(if(pair?"
" lst_141)"
"(let-values(((e_142)"
"(unsafe-car"
" lst_141))"
"((rest_143)"
"(unsafe-cdr"
" lst_141)))"
"(let-values(((result_144)"
"(let-values()"
"(let-values(((result_146)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((e23_148)"
" e_142)"
"((temp24_149)"
" 1)"
"((required-reference?25_150)"
" required-reference?_90)"
"((locals26_151)"
" locals_96)"
"((defns27_152)"
" defns_91))"
"(any-side-effects?12.1"
" defns27_152"
" #t"
" locals26_151"
" #t"
" e23_148"
" temp24_149"
" required-reference?25_150)))))))"
"(values"
" result_146)))))"
"(if(if(not"
"((lambda x_153"
"(not"
" result_144))"
" e_142))"
"(not"
" #f)"
" #f)"
"(for-loop_139"
" result_144"
" rest_143)"
" result_144)))"
" result_140))))"
" for-loop_139)"
" #t"
" lst_138)))"
" 1"
" #f)"
" #f)"
" #f)"
" #f)))"
" c1_103)"
"(let-values()"
"(if(let-values(((or-part_154)"
"(self-quoting-in-linklet?"
" v_99)))"
"(if or-part_154"
" or-part_154"
"(if(symbol? v_99)"
"(let-values(((or-part_155)"
"(hash-ref"
" locals_96"
" v_99"
" #f)))"
"(if or-part_155"
" or-part_155"
"(let-values(((or-part_156)"
"(built-in-symbol?"
" v_99)))"
"(if or-part_156"
" or-part_156"
"(required-reference?_90"
" v_99)))))"
" #f)))"
" 1"
" #f)))))))"
"(let-values() 1))"
"(if(unsafe-fx< index_98 3)"
"(let-values()"
"(let-values(((ok?_157"
" _28_158"
" ids29_159"
" rhs30_160"
" body31_161)"
"(let-values(((s_176) e_95))"
"(let-values(((orig-s_177) s_176))"
"(let-values(((_28_178"
" ids29_179"
" rhs30_180"
" body31_181)"
"(let-values(((s_182)"
"(if(syntax?$2"
" s_176)"
"(syntax-e$3"
" s_176)"
" s_176)))"
"(if(pair? s_182)"
"(let-values(((_32_183)"
"(let-values(((s_187)"
"(car"
" s_182)))"
" s_187))"
"((ids33_184"
" rhs34_185"
" body35_186)"
"(let-values(((s_188)"
"(cdr"
" s_182)))"
"(let-values(((s_189)"
"(if(syntax?$2"
" s_188)"
"(syntax-e$3"
" s_188)"
" s_188)))"
"(if(pair?"
" s_189)"
"(let-values(((ids36_190"
" rhs37_191)"
"(let-values(((s_193)"
"(car"
" s_189)))"
"(let-values(((s_194)"
"(if(syntax?$2"
" s_193)"
"(syntax-e$3"
" s_193)"
" s_193)))"
"(let-values(((flat-s_195)"
"(to-syntax-list.1$1"
" s_194)))"
"(if(not"
" flat-s_195)"
"(let-values()"
"((lambda(false_196"
" str_197"
" e_198)"
"(error"
" str_197))"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_177))"
"(let-values()"
"(let-values(((ids_202"
" rhs_203)"
"(let-values(((lst_204)"
" flat-s_195))"
"(begin"
"(if(list?"
" lst_204)"
"(void)"
"(let-values()"
"(in-list"
" lst_204)))"
"((letrec-values(((for-loop_205)"
"(lambda(ids_206"
" rhs_207"
" lst_208)"
"(if(pair?"
" lst_208)"
"(let-values(((s_209)"
"(unsafe-car"
" lst_208))"
"((rest_210)"
"(unsafe-cdr"
" lst_208)))"
"(let-values(((ids_211"
" rhs_212)"
"(let-values(((ids_213)"
" ids_206)"
"((rhs_214)"
" rhs_207))"
"(let-values(((ids_215"
" rhs_216)"
"(let-values()"
"(let-values(((ids43_217"
" rhs44_218)"
"(let-values()"
"(let-values(((s_219)"
"(if(syntax?$2"
" s_209)"
"(syntax-e$3"
" s_209)"
" s_209)))"
"(if(pair?"
" s_219)"
"(let-values(((ids39_220)"
"(let-values(((s_222)"
"(car"
" s_219)))"
" s_222))"
"((rhs40_221)"
"(let-values(((s_223)"
"(cdr"
" s_219)))"
"(let-values(((s_224)"
"(if(syntax?$2"
" s_223)"
"(syntax-e$3"
" s_223)"
" s_223)))"
"(if(pair?"
" s_224)"
"(let-values(((rhs41_225)"
"(let-values(((s_226)"
"(car"
" s_224)))"
" s_226))"
"(()"
"(let-values(((s_227)"
"(cdr"
" s_224)))"
"(let-values(((s_228)"
"(if(syntax?$2"
" s_227)"
"(syntax-e$3"
" s_227)"
" s_227)))"
"(if(null?"
" s_228)"
"(values)"
"((lambda(false_229"
" str_230"
" e_231)"
"(error"
" str_230))"
" #f"
"                                                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_177))))))"
"(values"
" rhs41_225))"
"((lambda(false_232"
" str_233"
" e_234)"
"(error"
" str_233))"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_177))))))"
"(values"
" ids39_220"
" rhs40_221))"
"((lambda(false_235"
" str_236"
" e_237)"
"(error"
" str_236))"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_177))))))"
"(values"
"(cons"
" ids43_217"
" ids_213)"
"(cons"
" rhs44_218"
" rhs_214))))))"
"(values"
" ids_215"
" rhs_216)))))"
"(if(not"
" #f)"
"(for-loop_205"
" ids_211"
" rhs_212"
" rest_210)"
"(values"
" ids_211"
" rhs_212))))"
"(values"
" ids_206"
" rhs_207)))))"
" for-loop_205)"
" null"
" null"
" lst_204)))))"
"(values"
"(alt-reverse"
" ids_202)"
"(alt-reverse"
" rhs_203)))))))))"
"((body38_192)"
"(let-values(((s_238)"
"(cdr"
" s_189)))"
"(let-values(((s_239)"
"(if(syntax?$2"
" s_238)"
"(syntax-e$3"
" s_238)"
" s_238)))"
"(if(pair?"
" s_239)"
"(let-values(((body42_240)"
"(let-values(((s_241)"
"(car"
" s_239)))"
" s_241))"
"(()"
"(let-values(((s_242)"
"(cdr"
" s_239)))"
"(let-values(((s_243)"
"(if(syntax?$2"
" s_242)"
"(syntax-e$3"
" s_242)"
" s_242)))"
"(if(null?"
" s_243)"
"(values)"
"((lambda(false_244"
" str_245"
" e_246)"
"(error"
" str_245))"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_177))))))"
"(values"
" body42_240))"
"((lambda(false_247"
" str_248"
" e_249)"
"(error"
" str_248))"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_177))))))"
"(values"
" ids36_190"
" rhs37_191"
" body38_192))"
"((lambda(false_250"
" str_251"
" e_252)"
"(error"
" str_251))"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_177))))))"
"(values"
" _32_183"
" ids33_184"
" rhs34_185"
" body35_186))"
"((lambda(false_253"
" str_254"
" e_255)"
"(error str_254))"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_177)))))"
"(values"
" #t"
" _28_178"
" ids29_179"
" rhs30_180"
" body31_181))))))"
"(if(not"
"(let-values(((lst_256) ids29_159)"
"((lst_257) rhs30_160))"
"(begin"
"(if(list? lst_256)"
"(void)"
"(let-values()(in-list lst_256)))"
"(if(list? lst_257)"
"(void)"
"(let-values()(in-list lst_257)))"
"((letrec-values(((for-loop_258)"
"(lambda(result_259"
" lst_260"
" lst_261)"
"(if(if(pair? lst_260)"
"(pair? lst_261)"
" #f)"
"(let-values(((ids_262)"
"(unsafe-car"
" lst_260))"
"((rest_263)"
"(unsafe-cdr"
" lst_260))"
"((rhs_264)"
"(unsafe-car"
" lst_261))"
"((rest_265)"
"(unsafe-cdr"
" lst_261)))"
"(let-values(((result_266)"
"(let-values()"
"(let-values(((result_268)"
"(let-values()"
"(let-values()"
"(let-values(((rhs45_270)"
" rhs_264)"
"((temp46_271)"
"(correlated-length"
" ids_262))"
"((required-reference?47_272)"
" required-reference?_90)"
"((locals48_273)"
" locals_96)"
"((defns49_274)"
" defns_91))"
"(any-side-effects?12.1"
" defns49_274"
" #t"
" locals48_273"
" #t"
" rhs45_270"
" temp46_271"
" required-reference?47_272))))))"
"(values"
" result_268)))))"
"(if(if(not"
"((lambda x_275"
" result_266)"
" ids_262))"
"(if(not"
"((lambda x_276"
" result_266)"
" rhs_264))"
"(not #f)"
" #f)"
" #f)"
"(for-loop_258"
" result_266"
" rest_263"
" rest_265)"
" result_266)))"
" result_259))))"
" for-loop_258)"
" #f"
" lst_256"
" lst_257))))"
"(loop_94"
" body31_161"
"(add-binding-info locals_96 ids29_159 rhs30_160))"
" #f)))"
"(if(unsafe-fx< index_98 4)"
"(let-values()"
"(let-values(((ok?_277 _50_278 e51_279)"
"(let-values(((s_290) e_95))"
"(let-values(((orig-s_291) s_290))"
"(let-values(((_50_292 e51_293)"
"(let-values(((s_294)"
"(if(syntax?$2"
" s_290)"
"(syntax-e$3"
" s_290)"
" s_290)))"
"(if(pair? s_294)"
"(let-values(((_52_295)"
"(let-values(((s_297)"
"(car"
" s_294)))"
" s_297))"
"((e53_296)"
"(let-values(((s_298)"
"(cdr"
" s_294)))"
"(let-values(((s_299)"
"(if(syntax?$2"
" s_298)"
"(syntax-e$3"
" s_298)"
" s_298)))"
"(let-values(((flat-s_300)"
"(to-syntax-list.1$1"
" s_299)))"
"(if(not"
" flat-s_300)"
"(let-values()"
"((lambda(false_301"
" str_302"
" e_303)"
"(error"
" str_302))"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_291))"
"(let-values()"
" flat-s_300)))))))"
"(values"
" _52_295"
" e53_296))"
"((lambda(false_307"
" str_308"
" e_309)"
"(error str_308))"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_291)))))"
"(values #t _50_292 e51_293))))))"
"(if(let-values(((lst_310) e51_279))"
"(begin"
"(if(list? lst_310)"
"(void)"
"(let-values()(in-list lst_310)))"
"((letrec-values(((for-loop_311)"
"(lambda(result_312 lst_313)"
"(if(pair? lst_313)"
"(let-values(((e_314)"
"(unsafe-car"
" lst_313))"
"((rest_315)"
"(unsafe-cdr"
" lst_313)))"
"(let-values(((result_316)"
"(let-values()"
"(let-values(((result_318)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((e54_320)"
" e_314)"
"((temp55_321)"
" 1)"
"((required-reference?56_322)"
" required-reference?_90)"
"((locals57_323)"
" locals_96)"
"((defns58_324)"
" defns_91))"
"(any-side-effects?12.1"
" defns58_324"
" #t"
" locals57_323"
" #t"
" e54_320"
" temp55_321"
" required-reference?56_322)))))))"
"(values"
" result_318)))))"
"(if(if(not"
"((lambda x_325"
"(not"
" result_316))"
" e_314))"
"(not #f)"
" #f)"
"(for-loop_311"
" result_316"
" rest_315)"
" result_316)))"
" result_312))))"
" for-loop_311)"
" #t"
" lst_310)))"
"(length e51_279)"
" #f)))"
"(let-values()"
"(let-values(((ok?_326 _59_327 e60_328)"
"(let-values(((s_339) e_95))"
"(let-values(((orig-s_340) s_339))"
"(let-values(((_59_341 e60_342)"
"(let-values(((s_343)"
"(if(syntax?$2"
" s_339)"
"(syntax-e$3"
" s_339)"
" s_339)))"
"(if(pair? s_343)"
"(let-values(((_61_344)"
"(let-values(((s_346)"
"(car"
" s_343)))"
" s_346))"
"((e62_345)"
"(let-values(((s_347)"
"(cdr"
" s_343)))"
"(let-values(((s_348)"
"(if(syntax?$2"
" s_347)"
"(syntax-e$3"
" s_347)"
" s_347)))"
"(let-values(((flat-s_349)"
"(to-syntax-list.1$1"
" s_348)))"
"(if(not"
" flat-s_349)"
"(let-values()"
"((lambda(false_350"
" str_351"
" e_352)"
"(error"
" str_351))"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_340))"
"(let-values()"
" flat-s_349)))))))"
"(values"
" _61_344"
" e62_345))"
"((lambda(false_356"
" str_357"
" e_358)"
"(error str_357))"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_340)))))"
"(values #t _59_341 e60_342))))))"
"(if(let-values(((lst_359) e60_328))"
"(begin"
"(if(list? lst_359)"
"(void)"
"(let-values()(in-list lst_359)))"
"((letrec-values(((for-loop_360)"
"(lambda(result_361 lst_362)"
"(if(pair? lst_362)"
"(let-values(((e_363)"
"(unsafe-car"
" lst_362))"
"((rest_364)"
"(unsafe-cdr"
" lst_362)))"
"(let-values(((result_365)"
"(let-values()"
"(let-values(((result_367)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((e63_369)"
" e_363)"
"((temp64_370)"
" 1)"
"((required-reference?65_371)"
" required-reference?_90)"
"((locals66_372)"
" locals_96)"
"((defns67_373)"
" defns_91))"
"(any-side-effects?12.1"
" defns67_373"
" #t"
" locals66_372"
" #t"
" e63_369"
" temp64_370"
" required-reference?65_371)))))))"
"(values"
" result_367)))))"
"(if(if(not"
"((lambda x_374"
"(not"
" result_365))"
" e_363))"
"(not #f)"
" #f)"
"(for-loop_360"
" result_365"
" rest_364)"
" result_365)))"
" result_361))))"
" for-loop_360)"
" #t"
" lst_359)))"
" 1"
" #f))))))"
"(if(unsafe-fx< index_98 7)"
"(if(unsafe-fx< index_98 6)"
"(let-values()"
"(let-values(((ok?_375 _68_376 e69_377)"
"(let-values(((s_388) e_95))"
"(let-values(((orig-s_389) s_388))"
"(let-values(((_68_390 e69_391)"
"(let-values(((s_392)"
"(if(syntax?$2"
" s_388)"
"(syntax-e$3"
" s_388)"
" s_388)))"
"(if(pair? s_392)"
"(let-values(((_70_393)"
"(let-values(((s_395)"
"(car"
" s_392)))"
" s_395))"
"((e71_394)"
"(let-values(((s_396)"
"(cdr"
" s_392)))"
"(let-values(((s_397)"
"(if(syntax?$2"
" s_396)"
"(syntax-e$3"
" s_396)"
" s_396)))"
"(let-values(((flat-s_398)"
"(to-syntax-list.1$1"
" s_397)))"
"(if(not"
" flat-s_398)"
"(let-values()"
"((lambda(false_399"
" str_400"
" e_401)"
"(error"
" str_400))"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_389))"
"(let-values()"
" flat-s_398)))))))"
"(values"
" _70_393"
" e71_394))"
"((lambda(false_405"
" str_406"
" e_407)"
"(error str_406))"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_389)))))"
"(values #t _68_390 e69_391))))))"
"((letrec-values(((bloop_408)"
"(lambda(es_409)"
"(if(null? es_409)"
"(let-values() #f)"
"(if(null?(cdr es_409))"
"(let-values()"
"(loop_94"
"(car es_409)"
" locals_96))"
"(let-values()"
"(if(not"
"(let-values(((temp72_411)"
"(car"
" es_409))"
"((temp73_412)"
" #f)"
"((required-reference?74_413)"
" required-reference?_90)"
"((locals75_414)"
" locals_96)"
"((defns76_415)"
" defns_91))"
"(any-side-effects?12.1"
" defns76_415"
" #t"
" locals75_414"
" #t"
" temp72_411"
" temp73_412"
" required-reference?74_413)))"
"(bloop_408(cdr es_409))"
" #f)))))))"
" bloop_408)"
" e69_377)))"
"(let-values()"
"(let-values(((ok?_416 _77_417 e078_418 e79_419)"
"(let-values(((s_432) e_95))"
"(let-values(((orig-s_433) s_432))"
"(let-values(((_77_434 e078_435 e79_436)"
"(let-values(((s_437)"
"(if(syntax?$2"
" s_432)"
"(syntax-e$3"
" s_432)"
" s_432)))"
"(if(pair? s_437)"
"(let-values(((_80_438)"
"(let-values(((s_441)"
"(car"
" s_437)))"
" s_441))"
"((e081_439"
" e82_440)"
"(let-values(((s_442)"
"(cdr"
" s_437)))"
"(let-values(((s_443)"
"(if(syntax?$2"
" s_442)"
"(syntax-e$3"
" s_442)"
" s_442)))"
"(if(pair?"
" s_443)"
"(let-values(((e083_444)"
"(let-values(((s_446)"
"(car"
" s_443)))"
" s_446))"
"((e84_445)"
"(let-values(((s_447)"
"(cdr"
" s_443)))"
"(let-values(((s_448)"
"(if(syntax?$2"
" s_447)"
"(syntax-e$3"
" s_447)"
" s_447)))"
"(let-values(((flat-s_449)"
"(to-syntax-list.1$1"
" s_448)))"
"(if(not"
" flat-s_449)"
"(let-values()"
"((lambda(false_450"
" str_451"
" e_452)"
"(error"
" str_451))"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_433))"
"(let-values()"
" flat-s_449)))))))"
"(values"
" e083_444"
" e84_445))"
"((lambda(false_456"
" str_457"
" e_458)"
"(error"
" str_457))"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_433))))))"
"(values"
" _80_438"
" e081_439"
" e82_440))"
"((lambda(false_459"
" str_460"
" e_461)"
"(error str_460))"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_433)))))"
"(values"
" #t"
" _77_434"
" e078_435"
" e79_436))))))"
"(if(let-values(((lst_462) e79_419))"
"(begin"
"(if(list? lst_462)"
"(void)"
"(let-values()(in-list lst_462)))"
"((letrec-values(((for-loop_463)"
"(lambda(result_464 lst_465)"
"(if(pair? lst_465)"
"(let-values(((e_466)"
"(unsafe-car"
" lst_465))"
"((rest_467)"
"(unsafe-cdr"
" lst_465)))"
"(let-values(((result_468)"
"(let-values()"
"(let-values(((result_470)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((e85_472)"
" e_466)"
"((temp86_473)"
" #f)"
"((required-reference?87_474)"
" required-reference?_90)"
"((locals88_475)"
" locals_96)"
"((defns89_476)"
" defns_91))"
"(any-side-effects?12.1"
" defns89_476"
" #t"
" locals88_475"
" #t"
" e85_472"
" temp86_473"
" required-reference?87_474)))))))"
"(values"
" result_470)))))"
"(if(if(not"
"((lambda x_477"
"(not"
" result_468))"
" e_466))"
"(not #f)"
" #f)"
"(for-loop_463"
" result_468"
" rest_467)"
" result_468)))"
" result_464))))"
" for-loop_463)"
" #t"
" lst_462)))"
"(loop_94 e078_418 locals_96)"
" #f))))"
"(if(unsafe-fx< index_98 8)"
"(let-values()"
"(if(ok-make-struct-type?"
" e_95"
" required-reference?_90"
" defns_91)"
" 5"
" #f))"
"(if(unsafe-fx< index_98 9)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_95"
" locals_96"
" 'accessor"
" defns_91)"
" 1"
" #f))"
"(if(unsafe-fx< index_98 10)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_95"
" locals_96"
" 'mutator"
" defns_91)"
" 1"
" #f))"
"(let-values()"
"(if(ok-make-struct-type-property? e_95 defns_91)"
" 3"
" #f))))))))))))"
" loop_94)"
" e_88"
" locals_92)))"
"(not"
"(if actual-results_93"
"(let-values(((or-part_478)(not expected-results_89)))"
"(if or-part_478 or-part_478(= actual-results_93 expected-results_89)))"
" #f)))))))))))"
"(define-values"
"(add-binding-info)"
"(lambda(locals_505 idss_506 rhss_507)"
"(let-values(((lst_508) idss_506)((lst_509) rhss_507))"
"(begin"
"(if(list? lst_508)(void)(let-values()(in-list lst_508)))"
"(if(list? lst_509)(void)(let-values()(in-list lst_509)))"
"((letrec-values(((for-loop_510)"
"(lambda(locals_511 lst_512 lst_513)"
"(if(if(pair? lst_512)(pair? lst_513) #f)"
"(let-values(((ids_514)(unsafe-car lst_512))"
"((rest_515)(unsafe-cdr lst_512))"
"((rhs_516)(unsafe-car lst_513))"
"((rest_517)(unsafe-cdr lst_513)))"
"(let-values(((locals_518)"
"(let-values(((locals_519) locals_511))"
"(let-values(((locals_520)"
"(let-values()"
"((letrec-values(((loop_521)"
"(lambda(rhs_522)"
"(let-values(((tmp_523)"
"(if(pair?"
"(correlated-e"
" rhs_522))"
"(correlated-e"
"(car"
"(correlated-e"
" rhs_522)))"
" #f)))"
"(if(equal?"
" tmp_523"
" 'make-struct-type)"
"(let-values()"
"(let-values(((field-count_524)"
"(extract-struct-field-count-lower-bound"
" rhs_522)))"
"(let-values(((lst_525)"
"(correlated->list"
" ids_514))"
"((lst_526)"
" '(struct-type"
" constructor"
" predicate"
" accessor"
" mutator)))"
"(begin"
"(if(list? lst_525)"
"(void)"
"(let-values()"
"(in-list lst_525)))"
"(if(list? lst_526)"
"(void)"
"(let-values()"
"(in-list lst_526)))"
"((letrec-values(((for-loop_527)"
"(lambda(locals_528"
" lst_529"
" lst_530)"
"(if(if(pair?"
" lst_529)"
"(pair?"
" lst_530)"
" #f)"
"(let-values(((id_531)"
"(unsafe-car"
" lst_529))"
"((rest_532)"
"(unsafe-cdr"
" lst_529))"
"((type_533)"
"(unsafe-car"
" lst_530))"
"((rest_534)"
"(unsafe-cdr"
" lst_530)))"
"(let-values(((locals_535)"
"(let-values(((locals_536)"
" locals_528))"
"(let-values(((locals_537)"
"(let-values()"
"(hash-set"
" locals_536"
"(correlated-e"
" id_531)"
"(known-struct-op4.1"
" type_533"
" field-count_524)))))"
"(values"
" locals_537)))))"
"(if(not"
" #f)"
"(for-loop_527"
" locals_535"
" rest_532"
" rest_534)"
" locals_535)))"
" locals_528))))"
" for-loop_527)"
" locals_519"
" lst_525"
" lst_526)))))"
"(if(equal? tmp_523 'let-values)"
"(let-values()"
"(if(null?"
"(correlated-e"
"(correlated-cadr"
" rhs_522)))"
"(loop_521"
"(caddr"
"(correlated->list"
" rhs_522)))"
"(loop_521 #f)))"
"(let-values()"
"(let-values(((lst_538)"
"(correlated->list"
" ids_514)))"
"(begin"
"(if(list? lst_538)"
"(void)"
"(let-values()"
"(in-list lst_538)))"
"((letrec-values(((for-loop_539)"
"(lambda(locals_540"
" lst_541)"
"(if(pair?"
" lst_541)"
"(let-values(((id_542)"
"(unsafe-car"
" lst_541))"
"((rest_543)"
"(unsafe-cdr"
" lst_541)))"
"(let-values(((locals_544)"
"(let-values(((locals_545)"
" locals_540))"
"(let-values(((locals_546)"
"(let-values()"
"(hash-set"
" locals_545"
"(correlated-e"
" id_542)"
" #t))))"
"(values"
" locals_546)))))"
"(if(not"
" #f)"
"(for-loop_539"
" locals_544"
" rest_543)"
" locals_544)))"
" locals_540))))"
" for-loop_539)"
" locals_519"
" lst_538))))))))))"
" loop_521)"
" rhs_516))))"
"(values locals_520)))))"
"(if(not #f)(for-loop_510 locals_518 rest_515 rest_517) locals_518)))"
" locals_511))))"
" for-loop_510)"
" locals_505"
" lst_508"
" lst_509)))))"
"(define-values"
"(ok-make-struct-type-property?)"
"(lambda(e_547 defns_548)"
"(let-values(((l_549)(correlated->list e_547)))"
"(if(<= 2(length l_549) 5)"
"(let-values(((pos->vals_550 pos-pre-inc_551 pos-next_552 init_553 pos-cont?_554 val-cont?_555 all-cont?_556)"
"(make-sequence '(arg)(cdr l_549)))"
"((pos->vals_557 pos-pre-inc_558 pos-next_559 init_560 pos-cont?_561 val-cont?_562 all-cont?_563)"
"(make-sequence"
" '(pred)"
"(list"
"(lambda(v_564)(quoted? symbol? v_564))"
"(lambda(v_565)(is-lambda? v_565 2 defns_548))"
"(lambda(v_566)(ok-make-struct-type-property-super? v_566 defns_548))"
"(lambda(v_567)"
"(let-values(((v92_569) v_567)"
"((temp93_570) 1)"
"((temp94_571)(lambda(x_573) #f))"
"((defns95_572) defns_548))"
"(any-side-effects?12.1 defns95_572 #t #f #f v92_569 temp93_570 temp94_571)))))))"
"(begin"
"(void)"
"(void)"
"((letrec-values(((for-loop_574)"
"(lambda(result_575 pos_576 pos_577)"
"(if(if(if pos-cont?_554(pos-cont?_554 pos_576) #t)"
"(if pos-cont?_561(pos-cont?_561 pos_577) #t)"
" #f)"
"(let-values(((arg_578 all-cont?/pos_579)"
"(let-values(((arg_584)(pos->vals_550 pos_576)))"
"(values"
" arg_584"
"(if all-cont?_556"
"(lambda(pos_585)(all-cont?_556 pos_585 arg_584))"
" #f))))"
"((pos_580)(if pos-pre-inc_551(pos-pre-inc_551 pos_576) pos_576))"
"((pred_581 all-cont?/pos_582)"
"(let-values(((pred_586)(pos->vals_557 pos_577)))"
"(values"
" pred_586"
"(if all-cont?_563"
"(lambda(pos_587)(all-cont?_563 pos_587 pred_586))"
" #f))))"
"((pos_583)(if pos-pre-inc_558(pos-pre-inc_558 pos_577) pos_577)))"
"(if(if(if val-cont?_555(val-cont?_555 arg_578) #t)"
"(if val-cont?_562(val-cont?_562 pred_581) #t)"
" #f)"
"(let-values(((result_588)"
"(let-values()"
"(let-values(((result_590)"
"(let-values()(let-values()(pred_581 arg_578)))))"
"(values result_590)))))"
"(if(if(if(if all-cont?/pos_579(all-cont?/pos_579 pos_580) #t)"
"(not((lambda x_591(not result_588)) arg_578))"
" #f)"
"(if(if(if all-cont?/pos_582(all-cont?/pos_582 pos_583) #t)"
"(not((lambda x_592(not result_588)) pred_581))"
" #f)"
"(not #f)"
" #f)"
" #f)"
"(for-loop_574 result_588(pos-next_552 pos_580)(pos-next_559 pos_583))"
" result_588))"
" result_575))"
" result_575))))"
" for-loop_574)"
" #t"
" init_553"
" init_560)))"
" #f))))"
"(define-values"
"(ok-make-struct-type-property-super?)"
"(lambda(v_593 defns_594)"
"(let-values(((or-part_595)(quoted? null? v_593)))"
"(if or-part_595"
" or-part_595"
"(let-values(((or-part_596)(eq? 'null(correlated-e v_593))))"
"(if or-part_596"
" or-part_596"
"(if(pair?(correlated-e v_593))"
"(if(eq?(correlated-e(car(correlated-e v_593))) 'list)"
"(if(let-values(((lst_597)(cdr(correlated->list v_593))))"
"(begin"
"(if(list? lst_597)(void)(let-values()(in-list lst_597)))"
"((letrec-values(((for-loop_598)"
"(lambda(result_599 lst_600)"
"(if(pair? lst_600)"
"(let-values(((prop+val_601)(unsafe-car lst_600))"
"((rest_602)(unsafe-cdr lst_600)))"
"(let-values(((result_603)"
"(let-values()"
"(let-values(((result_605)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length prop+val_601)"
" 3)"
"(let-values(((prop+val_606)"
"(correlated->list"
" prop+val_601)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_606)))"
"(if(let-values(((or-part_607)"
"(memq"
"(correlated-e"
"(list-ref"
" prop+val_606"
" 1))"
" '(prop:procedure"
" prop:equal+hash"
" prop:custom-write))))"
"(if or-part_607"
" or-part_607"
"(known-property?"
"(hash-ref"
" defns_594"
"(correlated-e"
"(list-ref"
" prop+val_606"
" 1))"
" #f))))"
"(not"
"(let-values(((temp96_609)"
"(list-ref"
" prop+val_606"
" 2))"
"((temp97_610) 1)"
"((temp98_611)"
"(lambda(x_613)"
" #f))"
"((defns99_612)"
" defns_594))"
"(any-side-effects?12.1"
" defns99_612"
" #t"
" #f"
" #f"
" temp96_609"
" temp97_610"
" temp98_611)))"
" #f)"
" #f))"
" #f)))))"
"(values result_605)))))"
"(if(if(not((lambda x_614(not result_603)) prop+val_601))"
"(not #f)"
" #f)"
"(for-loop_598 result_603 rest_602)"
" result_603)))"
" result_599))))"
" for-loop_598)"
" #t"
" lst_597)))"
"(="
"(sub1(correlated-length v_593))"
"(set-count"
"(let-values(((lst_615)(cdr(correlated->list v_593))))"
"(begin"
"(if(list? lst_615)(void)(let-values()(in-list lst_615)))"
"((letrec-values(((for-loop_616)"
"(lambda(table_617 lst_618)"
"(if(pair? lst_618)"
"(let-values(((prop+val_619)(unsafe-car lst_618))"
"((rest_620)(unsafe-cdr lst_618)))"
"(let-values(((table_621)"
"(let-values(((table_622) table_617))"
"(let-values(((table_623)"
"(let-values()"
"(let-values(((key_624 val_625)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_619)"
" 1)))"
" #t))))"
"(hash-set"
" table_622"
" key_624"
" val_625)))))"
"(values table_623)))))"
"(if(not #f)(for-loop_616 table_621 rest_620) table_621)))"
" table_617))))"
" for-loop_616)"
" '#hash()"
" lst_615)))))"
" #f)"
" #f)"
" #f)))))))"
"(define-values"
"(ok-make-struct-type?)"
"(lambda(e_626 required-reference?_627 defns_628)"
"(let-values(((l_629)(correlated->list e_626)))"
"(let-values(((init-field-count-expr_630)(if(>(length l_629) 3)(list-ref l_629 3) #f)))"
"(let-values(((auto-field-count-expr_631)(if(>(length l_629) 4)(list-ref l_629 4) #f)))"
"(let-values(((num-fields_632)"
"(maybe+"
"(field-count-expr-to-field-count init-field-count-expr_630)"
"(field-count-expr-to-field-count auto-field-count-expr_631))))"
"(let-values(((immutables-expr_633)"
"(let-values(((or-part_635)(if(>(length l_629) 9)(list-ref l_629 9) #f)))"
"(if or-part_635 or-part_635 'null))))"
"(let-values(((super-expr_634)(if(>(length l_629) 2)(list-ref l_629 2) #f)))"
"(if(>=(length l_629) 5)"
"(if(<=(length l_629) 12)"
"(let-values(((pos->vals_636"
" pos-pre-inc_637"
" pos-next_638"
" init_639"
" pos-cont?_640"
" val-cont?_641"
" all-cont?_642)"
"(make-sequence '(arg)(cdr l_629)))"
"((pos->vals_643"
" pos-pre-inc_644"
" pos-next_645"
" init_646"
" pos-cont?_647"
" val-cont?_648"
" all-cont?_649)"
"(make-sequence"
" '(pred)"
"(list"
"(lambda(v_650)(quoted? symbol? v_650))"
"(lambda(v_651)(super-ok? v_651 defns_628))"
"(lambda(v_652)(field-count-expr-to-field-count v_652))"
"(lambda(v_653)(field-count-expr-to-field-count v_653))"
"(lambda(v_654)"
"(not"
"(let-values(((v102_656) v_654)"
"((temp103_657) 1)"
"((required-reference?104_658) required-reference?_627)"
"((defns105_659) defns_628))"
"(any-side-effects?12.1"
" defns105_659"
" #t"
" #f"
" #f"
" v102_656"
" temp103_657"
" required-reference?104_658))))"
"(lambda(v_660)"
"(known-good-struct-properties?"
" v_660"
" immutables-expr_633"
" super-expr_634"
" defns_628))"
"(lambda(v_661)(inspector-or-false? v_661))"
"(lambda(v_662)(procedure-spec? v_662 num-fields_632))"
"(lambda(v_663)(immutables-ok? v_663 init-field-count-expr_630))))))"
"(begin"
"(void)"
"(void)"
"((letrec-values(((for-loop_664)"
"(lambda(result_665 pos_666 pos_667)"
"(if(if(if pos-cont?_640(pos-cont?_640 pos_666) #t)"
"(if pos-cont?_647(pos-cont?_647 pos_667) #t)"
" #f)"
"(let-values(((arg_668 all-cont?/pos_669)"
"(let-values(((arg_674)(pos->vals_636 pos_666)))"
"(values"
" arg_674"
"(if all-cont?_642"
"(lambda(pos_675)(all-cont?_642 pos_675 arg_674))"
" #f))))"
"((pos_670)"
"(if pos-pre-inc_637(pos-pre-inc_637 pos_666) pos_666))"
"((pred_671 all-cont?/pos_672)"
"(let-values(((pred_676)(pos->vals_643 pos_667)))"
"(values"
" pred_676"
"(if all-cont?_649"
"(lambda(pos_677)(all-cont?_649 pos_677 pred_676))"
" #f))))"
"((pos_673)"
"(if pos-pre-inc_644(pos-pre-inc_644 pos_667) pos_667)))"
"(if(if(if val-cont?_641(val-cont?_641 arg_668) #t)"
"(if val-cont?_648(val-cont?_648 pred_671) #t)"
" #f)"
"(let-values(((result_678)"
"(let-values()"
"(let-values(((result_680)"
"(let-values()"
"(let-values()(pred_671 arg_668)))))"
"(values result_680)))))"
"(if(if(if(if all-cont?/pos_669(all-cont?/pos_669 pos_670) #t)"
"(not((lambda x_681(not result_678)) arg_668))"
" #f)"
"(if(if(if all-cont?/pos_672(all-cont?/pos_672 pos_673) #t)"
"(not((lambda x_682(not result_678)) pred_671))"
" #f)"
"(not #f)"
" #f)"
" #f)"
"(for-loop_664"
" result_678"
"(pos-next_638 pos_670)"
"(pos-next_645 pos_673))"
" result_678))"
" result_665))"
" result_665))))"
" for-loop_664)"
" #t"
" init_639"
" init_646)))"
" #f)"
" #f)))))))))"
"(define-values"
"(super-ok?)"
"(lambda(e_683 defns_684)"
"(let-values(((or-part_685)(quoted? false? e_683)))"
"(if or-part_685"
" or-part_685"
"(let-values(((o_686)(hash-ref defns_684(correlated-e e_683) #f)))"
"(if o_686(if(known-struct-op? o_686)(eq? 'struct-type(known-struct-op-type o_686)) #f) #f))))))"
"(define-values"
"(extract-struct-field-count-lower-bound)"
"(lambda(e_687)"
"(let-values(((l_688)(correlated->list e_687)))"
"(+(field-count-expr-to-field-count(list-ref l_688 3))(field-count-expr-to-field-count(list-ref l_688 4))))))"
"(define-values"
"(quoted?)"
"(lambda(val?_689 v_690)"
"(let-values(((or-part_691)"
"(if(pair?(correlated-e v_690))"
"(if(eq?(correlated-e(car(correlated-e v_690))) 'quote)"
"(val?_689(correlated-e(correlated-cadr v_690)))"
" #f)"
" #f)))"
"(if or-part_691 or-part_691(val?_689(correlated-e v_690))))))"
"(define-values"
"(quoted-value)"
"(lambda(v_692)(if(pair?(correlated-e v_692))(correlated-e(correlated-cadr v_692))(correlated-e v_692))))"
"(define-values(false?)(lambda(v_693)(eq?(correlated-e v_693) #f)))"
"(define-values"
"(field-count-expr-to-field-count)"
"(lambda(v_694)(if(quoted? exact-nonnegative-integer? v_694)(quoted-value v_694) #f)))"
"(define-values"
"(inspector-or-false?)"
"(lambda(v_695)"
"(let-values(((or-part_696)(quoted? false? v_695)))"
"(if or-part_696"
" or-part_696"
"(let-values(((or-part_697)(if(quoted? symbol? v_695)(eq? 'prefab(quoted-value v_695)) #f)))"
"(if or-part_697"
" or-part_697"
"(if(= 1(correlated-length v_695))"
"(eq? 'current-inspector(correlated-e(car(correlated-e v_695))))"
" #f)))))))"
"(define-values"
"(known-good-struct-properties?)"
"(lambda(v_698 immutables-expr_699 super-expr_700 defns_701)"
"(let-values(((or-part_702)(quoted? null? v_698)))"
"(if or-part_702"
" or-part_702"
"(let-values(((or-part_703)(eq? 'null(correlated-e v_698))))"
"(if or-part_703"
" or-part_703"
"(if(pair?(correlated-e v_698))"
"(if(eq?(correlated-e(car(correlated-e v_698))) 'list)"
"(if(let-values(((lst_704)(cdr(correlated->list v_698))))"
"(begin"
"(if(list? lst_704)(void)(let-values()(in-list lst_704)))"
"((letrec-values(((for-loop_705)"
"(lambda(result_706 lst_707)"
"(if(pair? lst_707)"
"(let-values(((prop+val_708)(unsafe-car lst_707))"
"((rest_709)(unsafe-cdr lst_707)))"
"(let-values(((result_710)"
"(let-values()"
"(let-values(((result_712)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length prop+val_708)"
" 3)"
"(let-values(((prop+val_713)"
"(correlated->list"
" prop+val_708)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_713)))"
"(known-good-struct-property+value?"
"(list-ref prop+val_713 1)"
"(list-ref prop+val_713 2)"
" immutables-expr_699"
" super-expr_700"
" defns_701)"
" #f))"
" #f)))))"
"(values result_712)))))"
"(if(if(not((lambda x_714(not result_710)) prop+val_708))"
"(not #f)"
" #f)"
"(for-loop_705 result_710 rest_709)"
" result_710)))"
" result_706))))"
" for-loop_705)"
" #t"
" lst_704)))"
"(="
"(sub1(correlated-length v_698))"
"(set-count"
"(let-values(((lst_715)(cdr(correlated->list v_698))))"
"(begin"
"(if(list? lst_715)(void)(let-values()(in-list lst_715)))"
"((letrec-values(((for-loop_716)"
"(lambda(table_717 lst_718)"
"(if(pair? lst_718)"
"(let-values(((prop+val_719)(unsafe-car lst_718))"
"((rest_720)(unsafe-cdr lst_718)))"
"(let-values(((table_721)"
"(let-values(((table_722) table_717))"
"(let-values(((table_723)"
"(let-values()"
"(let-values(((key_724 val_725)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_719)"
" 1)))"
" #t))))"
"(hash-set"
" table_722"
" key_724"
" val_725)))))"
"(values table_723)))))"
"(if(not #f)(for-loop_716 table_721 rest_720) table_721)))"
" table_717))))"
" for-loop_716)"
" '#hash()"
" lst_715)))))"
" #f)"
" #f)"
" #f)))))))"
"(define-values"
"(known-good-struct-property+value?)"
"(lambda(prop-expr_726 val-expr_727 immutables-expr_728 super-expr_729 defns_730)"
"(let-values(((prop-name_731)(correlated-e prop-expr_726)))"
"(let-values(((tmp_732) prop-name_731))"
"(if(equal? tmp_732 'prop:evt)"
"(let-values()"
"(let-values(((or-part_733)(is-lambda? val-expr_727 1 defns_730)))"
"(if or-part_733 or-part_733(immutable-field? val-expr_727 immutables-expr_728))))"
"(if(equal? tmp_732 'prop:procedure)"
"(let-values()"
"(let-values(((or-part_734)(is-lambda? val-expr_727 1 defns_730)))"
"(if or-part_734 or-part_734(immutable-field? val-expr_727 immutables-expr_728))))"
"(if(equal? tmp_732 'prop:custom-write)"
"(let-values()(is-lambda? val-expr_727 3 defns_730))"
"(if(equal? tmp_732 'prop:equal+hash)"
"(let-values()"
"(let-values(((l_735)(correlated->list val-expr_727)))"
"(if(eq? 'list(car l_735))"
"(if(is-lambda?(list-ref l_735 1) 3 defns_730)"
"(if(is-lambda?(list-ref l_735 2) 2 defns_730)(is-lambda?(list-ref l_735 3) 2 defns_730) #f)"
" #f)"
" #f)))"
"(if(if(equal? tmp_732 'prop:method-arity-error) #t(equal? tmp_732 'prop:incomplete-arity))"
"(let-values()"
"(not"
"(let-values(((val-expr106_737) val-expr_727)"
"((temp107_738) 1)"
"((temp108_739)(lambda(x_741)(hash-ref defns_730 x_741 #f)))"
"((defns109_740) defns_730))"
"(any-side-effects?12.1 defns109_740 #t #f #f val-expr106_737 temp107_738 temp108_739))))"
"(if(equal? tmp_732 'prop:impersonator-of)"
"(let-values()(is-lambda? val-expr_727 1 defns_730))"
"(if(equal? tmp_732 'prop:arity-string)"
"(let-values()(is-lambda? val-expr_727 1 defns_730))"
"(if(equal? tmp_732 'prop:checked-procedure)"
"(let-values()(if(quoted? false? super-expr_729)(immutable-field? 1 immutables-expr_728) #f))"
"(let-values()"
"(let-values(((o_742)(hash-ref defns_730 prop-name_731 #f)))"
"(if o_742"
"(if(known-property? o_742)"
"(not"
"(let-values(((val-expr110_744) val-expr_727)"
"((temp111_745) 1)"
"((temp112_746)(lambda(x_748)(hash-ref defns_730 x_748 #f)))"
"((defns113_747) defns_730))"
"(any-side-effects?12.1"
" defns113_747"
" #t"
" #f"
" #f"
" val-expr110_744"
" temp111_745"
" temp112_746)))"
" #f)"
" #f)))))))))))))))"
"(define-values"
"(is-lambda?)"
"(lambda(expr_749 arity_750 defns_751)"
"(let-values(((lookup_752)(hash-ref defns_751 expr_749 #f)))"
"(let-values(((or-part_753)"
"(if lookup_752"
"(if(known-function? lookup_752)"
"(let-values(((or-part_754)(not arity_750)))"
"(if or-part_754 or-part_754(equal? arity_750(known-function-arity lookup_752))))"
" #f)"
" #f)))"
"(if or-part_753"
" or-part_753"
"(let-values(((or-part_755)"
"(if(pair?(correlated-e expr_749))"
"(if(eq? 'case-lambda(car(correlated-e expr_749)))(not arity_750) #f)"
" #f)))"
"(if or-part_755"
" or-part_755"
"(if(pair?(correlated-e expr_749))"
"(if(eq? 'lambda(car(correlated-e expr_749)))"
"(let-values(((or-part_756)(not arity_750)))"
"(if or-part_756"
" or-part_756"
"(= arity_750(length(correlated->list(cadr(correlated->list expr_749)))))))"
" #f)"
" #f))))))))"
"(define-values"
"(immutable-field?)"
"(lambda(val-expr_757 immutables-expr_758)"
"(if(quoted? exact-nonnegative-integer? val-expr_757)"
"(memv(quoted-value val-expr_757)(immutables-expr-to-immutables immutables-expr_758 null))"
" #f)))"
"(define-values"
"(immutables-expr-to-immutables)"
"(lambda(e_759 fail-v_760)"
"(let-values(((tmp_761)(if(pair?(correlated-e e_759))(correlated-e(car(correlated-e e_759))) #f)))"
"(if(equal? tmp_761 'quote)"
"(let-values()"
"(let-values(((v_762)(correlated-cadr e_759)))"
"(let-values(((or-part_763)"
"(if(correlated-length v_762)"
"(let-values(((l_764)(map2 correlated-e(correlated->list v_762))))"
"(if(andmap2 exact-nonnegative-integer? l_764)"
"(if(=(length l_764)(set-count(list->set l_764))) l_764 #f)"
" #f))"
" #f)))"
"(if or-part_763 or-part_763 fail-v_760))))"
"(let-values() fail-v_760)))))"
"(define-values"
"(procedure-spec?)"
"(lambda(e_765 field-count_766)"
"(let-values(((or-part_767)(quoted? false? e_765)))"
"(if or-part_767"
" or-part_767"
"(let-values(((or-part_768)"
"(if(quoted? exact-nonnegative-integer? e_765)"
"(if field-count_766(<(quoted-value e_765) field-count_766) #f)"
" #f)))"
"(if or-part_768 or-part_768(is-lambda? e_765 #f '#hasheq())))))))"
"(define-values"
"(immutables-ok?)"
"(lambda(e_769 init-field-count-expr_770)"
"(let-values(((l_771)(immutables-expr-to-immutables e_769 #f)))"
"(let-values(((c_772)(field-count-expr-to-field-count init-field-count-expr_770)))"
"(if l_771"
"(let-values(((lst_773) l_771))"
"(begin"
"(if(list? lst_773)(void)(let-values()(in-list lst_773)))"
"((letrec-values(((for-loop_774)"
"(lambda(result_775 lst_776)"
"(if(pair? lst_776)"
"(let-values(((n_777)(unsafe-car lst_776))((rest_778)(unsafe-cdr lst_776)))"
"(let-values(((result_779)"
"(let-values()"
"(let-values(((result_781)"
"(let-values()(let-values()(< n_777 c_772)))))"
"(values result_781)))))"
"(if(if(not((lambda x_782(not result_779)) n_777))(not #f) #f)"
"(for-loop_774 result_779 rest_778)"
" result_779)))"
" result_775))))"
" for-loop_774)"
" #t"
" lst_773)))"
" #f)))))"
"(define-values"
"(ok-make-struct-field-accessor/mutator?)"
"(lambda(e_783 locals_784 type_785 defns_786)"
"(let-values(((l_787)(correlated->list e_783)))"
"(let-values(((a_788)"
"(if(let-values(((or-part_789)(=(length l_787) 3)))"
"(if or-part_789 or-part_789(=(length l_787) 4)))"
"(hash-ref"
" locals_784"
"(correlated-e(list-ref l_787 1))"
"(lambda()(hash-ref defns_786(correlated-e(list-ref l_787 1)) #f)))"
" #f)))"
"(if(known-struct-op? a_788)"
"(if(eq?(known-struct-op-type a_788) type_785)"
"(if(<(field-count-expr-to-field-count(list-ref l_787 2))(known-struct-op-field-count a_788))"
"(let-values(((or-part_790)(=(length l_787) 3)))"
"(if or-part_790 or-part_790(quoted? symbol?(list-ref l_787 3))))"
" #f)"
" #f)"
" #f)))))"
"(define-values(maybe+)(lambda(x_791 y_792)(if x_791(if y_792(+ x_791 y_792) #f) #f)))"
"(void)"
"(void)"
"(define-values"
"(compile-single)"
"(lambda(p_1 cctx_2)"
"(let-values(((p12_4) p_1)((cctx13_5) cctx_2)((temp14_6) #f)((temp15_7) #t))"
"(compile-top9.1 temp14_6 #t temp15_7 #t #f #f p12_4 cctx13_5))))"
"(define-values"
"(compile-top9.1)"
"(lambda(serializable?1_8"
" serializable?4_9"
" single-expression?2_10"
" single-expression?5_11"
" to-source?3_12"
" to-source?6_13"
" p7_14"
" cctx8_15)"
"(let-values(((p_16) p7_14))"
"(let-values(((cctx_17) cctx8_15))"
"(let-values(((serializable?_18)(if serializable?4_9 serializable?1_8 #t)))"
"(let-values(((single-expression?_19)(if single-expression?5_11 single-expression?2_10 #f)))"
"(let-values(((to-source?_20)(if to-source?6_13 to-source?3_12 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((phase_21)(compile-context-phase cctx_17)))"
"(let-values(((mpis_22)(make-module-path-index-table)))"
"(let-values(((purely-functional?_23) #t))"
"(let-values(((body-linklets_24"
" min-phase_25"
" max-phase_26"
" phase-to-link-module-uses_27"
" phase-to-link-module-uses-expr_28"
" phase-to-link-extra-inspectorsss_29"
" syntax-literals_30"
" no-root-context-pos_31)"
"(let-values(((temp16_35)(list p_16))"
"((cctx17_36) cctx_17)"
"((mpis18_37) mpis_22)"
"((temp19_38)"
"(if single-expression?_19"
"(list* '()(list syntax-literals-id) '(()))"
"(list"
"(list top-level-bind!-id top-level-require!-id)"
"(list mpi-vector-id syntax-literals-id)"
" instance-imports)))"
"((to-source?20_39) to-source?_20)"
"((temp21_40)(lambda()(set! purely-functional?_23 #f)))"
"((temp22_41)"
"(lambda(e_44 expected-results_45 phase_46 required-reference?_47)"
"(if(if purely-functional?_23"
"(let-values(((e25_48) e_44)"
"((expected-results26_49) expected-results_45)"
"((required-reference?27_50)"
" required-reference?_47))"
"(any-side-effects?12.1"
" #f"
" #f"
" #f"
" #f"
" e25_48"
" expected-results26_49"
" required-reference?27_50))"
" #f)"
"(let-values()(set! purely-functional?_23 #f))"
"(void))))"
"((temp23_42)"
"(lambda(s_51 cctx_52)"
"(begin"
"(set! purely-functional?_23 #f)"
"(compile-top-level-require s_51 cctx_52))))"
"((temp24_43)(not single-expression?_19)))"
"(compile-forms27.1"
" temp19_38"
" #f"
" #f"
" temp22_41"
" #t"
" temp24_43"
" #t"
" temp21_40"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp23_42"
" #t"
" #f"
" #f"
" to-source?20_39"
" #t"
" temp16_35"
" cctx17_36"
" mpis18_37))))"
"(let-values(((add-metadata_32)"
"(lambda(ht_53)"
"(let-values(((ht_54)(hash-set ht_53 'original-phase phase_21)))"
"(let-values(((ht_55)(hash-set ht_54 'max-phase max-phase_26))) ht_55)))))"
"(let-values(((bundle_33)"
"((if to-source?_20 values 1/hash->linklet-bundle)"
"(add-metadata_32"
"(if serializable?_18"
"(let-values()"
"(let-values(((syntax-literals-expr_56)"
"(let-values()"
"(generate-eager-syntax-literals!"
" syntax-literals_30"
" mpis_22"
" phase_21"
"(compile-context-self cctx_17)"
"(compile-context-namespace cctx_17)))))"
"(let-values(((link-linklet_57)"
"((if to-source?_20"
" values"
"(lambda(s_58)"
"(let-values()(1/compile-linklet s_58))))"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list"
" mpi-vector-id"
" deserialized-syntax-vector-id"
" 'phase-to-link-modules"
" syntax-literals-id)"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize mpis_22))"
"(list"
" 'define-values"
"(list deserialized-syntax-vector-id)"
"(list* 'make-vector(add1 phase_21) '(#f)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_28)"
"(list"
" 'define-values"
"(list syntax-literals-id)"
" syntax-literals-expr_56)))))"
"(hash-set body-linklets_24 'link link-linklet_57))))"
"(let-values() body-linklets_24))))))"
"(if to-source?_20"
"(let-values()(hasheq #f bundle_33))"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory(hasheq #f bundle_33))"
" #f"
" #f"
" #f"
" phase-to-link-module-uses_27"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_29"
"(mpis-as-vector mpis_22)"
"(syntax-literals-as-vector syntax-literals_30)"
" null"
" null"
"(extract-namespace-scopes(compile-context-namespace cctx_17))"
" purely-functional?_23))))))))))))))))))"
"(define-values"
"(compile-top-level-require)"
"(lambda(p_88 cctx_89)"
"(let-values(((phase_90)(compile-context-phase cctx_89)))"
"(if(parsed-require? p_88)"
"(let-values()"
"(let-values(((form-stx_91)(compile-quote-syntax(syntax-disarm$1(parsed-s p_88)) cctx_89)))"
"(list top-level-require!-id form-stx_91 ns-id)))"
"(let-values() #f)))))"
"(void)"
"(void)"
"(define-values"
"(module-path->mpi5.1)"
"(lambda(declared-submodule-names1_1 declared-submodule-names2_2 mod-path3_3 self4_4)"
"(let-values(((mod-path_5) mod-path3_3))"
"(let-values(((self_6) self4_4))"
"(let-values(((declared-submodule-names_7)"
"(if declared-submodule-names2_2 declared-submodule-names1_1 '#hasheq())))"
"(let-values()"
"(if(if(list? mod-path_5)"
"(if(= 2(length mod-path_5))"
"(if(eq? 'quote(car mod-path_5))"
"(if(symbol?(cadr mod-path_5))(hash-ref declared-submodule-names_7(cadr mod-path_5) #f) #f)"
" #f)"
" #f)"
" #f)"
"              (let-values () (1/module-path-index-join (list 'submod \".\" (cadr mod-path_5)) self_6))"
"(if(if(list? mod-path_5)"
"(if(eq? 'submod(car mod-path_5))"
"(let-values(((mod-path_8)(cadr mod-path_5)))"
"(if(list? mod-path_8)"
"(if(= 2(length mod-path_8))"
"(if(eq? 'quote(car mod-path_8))"
"(if(symbol?(cadr mod-path_8))"
"(hash-ref declared-submodule-names_7(cadr mod-path_8) #f)"
" #f)"
" #f)"
" #f)"
" #f))"
" #f)"
" #f)"
"(let-values()"
"                  (1/module-path-index-join (list* 'submod \".\" (cadr (cadr mod-path_5)) (cddr mod-path_5)) self_6))"
"(let-values()(1/module-path-index-join mod-path_5 self_6))))))))))"
"(define-values"
"(module-path->mpi/context)"
"(lambda(mod-path_26 ctx_27)"
"(let-values(((mod-path8_29) mod-path_26)"
"((temp9_30)(namespace-mpi(expand-context-namespace ctx_27)))"
"((temp10_31)(expand-context-declared-submodule-names ctx_27)))"
"(module-path->mpi5.1 temp10_31 #t mod-path8_29 temp9_30))))"
"(void)"
"(void)"
"(define-values"
"(syntax-mapped-names)"
"(lambda(s_1 phase_2)"
"(let-values(((s-scs_3)(syntax-scope-set s_1 phase_2)))"
"(let-values(((ht_4) s-scs_3))"
"(begin"
"(if((lambda(ht_5)(if(hash? ht_5)(immutable? ht_5) #f)) ht_4)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_4)))"
"((letrec-values(((for-loop_6)"
"(lambda(syms_7 i_8)"
"(if i_8"
"(let-values(((sc_9)(unsafe-immutable-hash-iterate-key ht_4 i_8)))"
"(let-values(((syms_10)"
"(let-values(((syms_11) syms_7))"
"(let-values(((syms_12)"
"(let-values()"
"(set-union"
" syms_11"
"(binding-table-symbols"
"(scope-binding-table sc_9)"
" s-scs_3"
" s_1"
" null)))))"
"(values syms_12)))))"
"(if(not #f)"
"(for-loop_6 syms_10(unsafe-immutable-hash-iterate-next ht_4 i_8))"
" syms_10)))"
" syms_7))))"
" for-loop_6)"
"(seteq)"
"(unsafe-immutable-hash-iterate-first ht_4)))))))"
"(void)"
"(void)"
"(define-values"
"(struct:requires+provides"
" requires+provides1.1"
" requires+provides?"
" requires+provides-self"
" requires+provides-require-mpis"
" requires+provides-require-mpis-in-order"
" requires+provides-requires"
" requires+provides-provides"
" requires+provides-phase-to-defined-syms"
" requires+provides-can-cross-phase-persistent?"
" requires+provides-all-bindings-simple?"
" set-requires+provides-can-cross-phase-persistent?!"
" set-requires+provides-all-bindings-simple?!)"
"(let-values(((struct:_36 make-_37 ?_38 -ref_39 -set!_40)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'requires+provides"
" #f"
" 8"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'requires+provides)))))"
"(values"
" struct:_36"
" make-_37"
" ?_38"
"(make-struct-field-accessor -ref_39 0 'self)"
"(make-struct-field-accessor -ref_39 1 'require-mpis)"
"(make-struct-field-accessor -ref_39 2 'require-mpis-in-order)"
"(make-struct-field-accessor -ref_39 3 'requires)"
"(make-struct-field-accessor -ref_39 4 'provides)"
"(make-struct-field-accessor -ref_39 5 'phase-to-defined-syms)"
"(make-struct-field-accessor -ref_39 6 'can-cross-phase-persistent?)"
"(make-struct-field-accessor -ref_39 7 'all-bindings-simple?)"
"(make-struct-field-mutator -set!_40 6 'can-cross-phase-persistent?)"
"(make-struct-field-mutator -set!_40 7 'all-bindings-simple?))))"
"(define-values"
"(struct:required required2.1 required? required-id required-phase required-can-be-shadowed? required-as-transformer?)"
"(let-values(((struct:_91 make-_92 ?_93 -ref_94 -set!_95)"
"(let-values()"
"(let-values()"
"(make-struct-type 'required #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'required)))))"
"(values"
" struct:_91"
" make-_92"
" ?_93"
"(make-struct-field-accessor -ref_94 0 'id)"
"(make-struct-field-accessor -ref_94 1 'phase)"
"(make-struct-field-accessor -ref_94 2 'can-be-shadowed?)"
"(make-struct-field-accessor -ref_94 3 'as-transformer?))))"
"(define-values"
"(struct:bulk-required"
" bulk-required4.1"
" bulk-required?"
" bulk-required-provides"
" bulk-required-prefix-len"
" bulk-required-s"
" bulk-required-provide-phase-level"
" bulk-required-can-be-shadowed?)"
"(let-values(((struct:_161 make-_162 ?_163 -ref_164 -set!_165)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-required"
" #f"
" 5"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'bulk-required)))))"
"(values"
" struct:_161"
" make-_162"
" ?_163"
"(make-struct-field-accessor -ref_164 0 'provides)"
"(make-struct-field-accessor -ref_164 1 'prefix-len)"
"(make-struct-field-accessor -ref_164 2 's)"
"(make-struct-field-accessor -ref_164 3 'provide-phase-level)"
"(make-struct-field-accessor -ref_164 4 'can-be-shadowed?))))"
"(define-values"
"(make-requires+provides)"
"(lambda(self_201)"
"(requires+provides1.1"
" self_201"
"(make-module-path-index-intern-table)"
"(make-hasheqv)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheqv)"
" #t"
" #t)))"
"(define-values"
"(requires+provides-reset!)"
"(lambda(r+p_202)"
"(begin"
"(hash-clear!(requires+provides-require-mpis-in-order r+p_202))"
"(hash-clear!(requires+provides-requires r+p_202))"
"(hash-clear!(requires+provides-provides r+p_202))"
"(hash-clear!(requires+provides-phase-to-defined-syms r+p_202)))))"
"(define-values"
"(intern-mpi)"
"(lambda(r+p_203 mpi_204)(intern-module-path-index!(requires+provides-require-mpis r+p_203) mpi_204)))"
"(define-values"
"(add-required-module!)"
"(lambda(r+p_205 mod-name_206 phase-shift_207 is-cross-phase-persistent?_208)"
"(let-values(((mpi_209)(intern-mpi r+p_205 mod-name_206)))"
"(begin"
"(if(hash-ref(hash-ref(requires+provides-requires r+p_205) mpi_209 '#hasheqv()) phase-shift_207 #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-update!"
"(requires+provides-require-mpis-in-order r+p_205)"
" phase-shift_207"
"(lambda(l_210)(cons mpi_209 l_210))"
" null)"
"(hash-set!"
"(hash-ref!(requires+provides-requires r+p_205) mpi_209 make-hasheqv)"
" phase-shift_207"
"(make-hasheq)))))"
"(if is-cross-phase-persistent?_208"
"(void)"
"(let-values()(set-requires+provides-can-cross-phase-persistent?! r+p_205 #f)))"
" mpi_209))))"
"(define-values"
"(add-defined-or-required-id!13.1)"
"(lambda(as-transformer?6_221 can-be-shadowed?5_222 can-be-shadowed?7_223 r+p9_224 id10_225 phase11_226 binding12_227)"
"(let-values(((r+p_228) r+p9_224))"
"(let-values(((id_229) id10_225))"
"(let-values(((phase_230) phase11_226))"
"(let-values(((binding_231) binding12_227))"
"(let-values(((can-be-shadowed?_232)(if can-be-shadowed?7_223 can-be-shadowed?5_222 #f)))"
"(let-values(((as-transformer?_233) as-transformer?6_221))"
"(let-values()"
"(begin"
"(if(equal?"
" phase_230"
"(phase+"
"(module-binding-nominal-phase binding_231)"
"(module-binding-nominal-require-phase binding_231)))"
"(void)"
"                      (let-values () (error \"internal error: binding phase does not match nominal info\")))"
"(let-values(((.../require+provide.rkt:119:2_234) add-defined-or-required-id-at-nominal!29.1)"
"((r+p108_235) r+p_228)"
"((id109_236) id_229)"
"((phase110_237) phase_230)"
"((temp111_238)(module-binding-nominal-module binding_231))"
"((temp112_239)(module-binding-nominal-require-phase binding_231))"
"((can-be-shadowed?113_240) can-be-shadowed?_232)"
"((as-transformer?114_241) as-transformer?_233))"
"(add-defined-or-required-id-at-nominal!27.1"
" as-transformer?114_241"
" can-be-shadowed?113_240"
" temp111_238"
" temp112_239"
" r+p108_235"
" id109_236"
" phase110_237))))))))))))"
"(define-values"
"(lifted/6.1$7 lifted/7.1$7 lifted/8.1$7 lifted/9.1$7 lifted/10.1$7)"
"(make-struct-type"
" 'add-defined-or-required-id-at-nominal!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'add-defined-or-required-id-at-nominal!"
"(case-lambda((self_261 r+p_262 id_263 phase_264)(apply missing-kw self_261 r+p_262 id_263 phase_264 null))))))"
"(current-inspector)"
"(case-lambda((self_265 r+p_266 id_267 phase_268)(apply missing-kw self_265 r+p_266 id_267 phase_268 null)))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!27.1)"
"(lambda(as-transformer?19_269"
" can-be-shadowed?18_270"
" nominal-module16_271"
" nominal-require-phase17_272"
" r+p24_273"
" id25_274"
" phase26_275)"
"(let-values(((r+p_276) r+p24_273))"
"(let-values(((id_277) id25_274))"
"(let-values(((phase_278) phase26_275))"
"(let-values(((nominal-module_279) nominal-module16_271))"
"(let-values(((nominal-require-phase_280) nominal-require-phase17_272))"
"(let-values(((can-be-shadowed?_281) can-be-shadowed?18_270))"
"(let-values(((as-transformer?_282) as-transformer?19_269))"
"(let-values()"
"(let-values(((at-mod_283)"
"(hash-ref!"
"(requires+provides-requires r+p_276)"
"(intern-mpi r+p_276 nominal-module_279)"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_284)(hash-ref! at-mod_283 nominal-require-phase_280 make-hasheq)))"
"(let-values(((sym_285)(syntax-e$1 id_277)))"
"(hash-set!"
" sym-to-reqds_284"
" sym_285"
"(cons~"
"(required2.1 id_277 phase_278 can-be-shadowed?_281 as-transformer?_282)"
"(hash-ref sym-to-reqds_284 sym_285 null))))))))))))))))"
"(define-values"
"(unpack28.1)"
"(lambda(given-kws_286 given-args_287 r+p24_288 id25_289 phase26_290)"
"(let-values(((as-transformer?19_291)(car given-args_287))"
"((given-kws_292)(cdr given-kws_286))"
"((given-args_293)(cdr given-args_287)))"
"(let-values(((can-be-shadowed?18_294)(car given-args_293))"
"((given-kws_295)(cdr given-kws_292))"
"((given-args_296)(cdr given-args_293)))"
"(let-values(((nominal-module16_297)(car given-args_296))"
"((given-kws_298)(cdr given-kws_295))"
"((given-args_299)(cdr given-args_296)))"
"(let-values(((nominal-require-phase17_300)(car given-args_299)))"
"(add-defined-or-required-id-at-nominal!27.1"
" as-transformer?19_291"
" can-be-shadowed?18_294"
" nominal-module16_297"
" nominal-require-phase17_300"
" r+p24_288"
" id25_289"
" phase26_290)))))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!29.1)"
"(lifted/7.1$7"
"(lambda(given-kws_301 given-argc_302)"
"(if(= given-argc_302 5)"
"(let-values(((l2_303) given-kws_301))"
"(if(pair? l2_303)"
"(if(eq?(car l2_303) '#:as-transformer?)"
"(let-values(((l2_304)(cdr l2_303)))"
"(if(pair? l2_304)"
"(if(eq?(car l2_304) '#:can-be-shadowed?)"
"(let-values(((l2_305)(cdr l2_304)))"
"(if(pair? l2_305)"
"(if(eq?(car l2_305) '#:nominal-module)"
"(let-values(((l2_306)(cdr l2_305)))"
"(if(pair? l2_306)"
"(if(eq?(car l2_306) '#:nominal-require-phase)(null?(cdr l2_306)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_307 given-args_308 r+p_309 id_310 phase_311)"
"(unpack28.1 given-kws_307 given-args_308 r+p_309 id_310 phase_311)))"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)))"
"(define-values"
"(add-bulk-required-ids!53.1)"
"(lambda(accum-update-nominals36_328"
" can-be-shadowed?34_329"
" check-and-remove?35_330"
" excepts31_331"
" in33_332"
" prefix30_333"
" symbols-accum32_334"
" who37_335"
" r+p46_336"
" s47_337"
" self48_338"
" nominal-module49_339"
" phase-shift50_340"
" provides51_341"
" provide-phase-level52_342)"
"(let-values(((r+p_343) r+p46_336))"
"(let-values(((s_344) s47_337))"
"(let-values(((self_345) self48_338))"
"(let-values(((nominal-module_346) nominal-module49_339))"
"(let-values(((phase-shift_347) phase-shift50_340))"
"(let-values(((provides_348) provides51_341))"
"(let-values(((provide-phase-level_349) provide-phase-level52_342))"
"(let-values(((bulk-prefix_350) prefix30_333))"
"(let-values(((bulk-excepts_351) excepts31_331))"
"(let-values(((symbols-accum_352) symbols-accum32_334))"
"(let-values(((orig-s_353) in33_332))"
"(let-values(((can-be-shadowed?_354) can-be-shadowed?34_329))"
"(let-values(((check-and-remove?_355) check-and-remove?35_330))"
"(let-values(((accum-update-nominals_356) accum-update-nominals36_328))"
"(let-values(((who_357) who37_335))"
"(let-values()"
"(let-values(((phase_358)(phase+ provide-phase-level_349 phase-shift_347)))"
"(let-values(((shortcut-table_359)"
"(if check-and-remove?_355"
"(if(>(hash-count provides_348) 64)"
"(syntax-mapped-names s_344 phase_358)"
" #f)"
" #f)))"
"(let-values(((mpi_360)(intern-mpi r+p_343 nominal-module_346)))"
"(let-values(((at-mod_361)"
"(hash-ref!"
"(requires+provides-requires r+p_343)"
" mpi_360"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_362)"
"(hash-ref! at-mod_361 phase-shift_347 make-hasheq)))"
"(let-values(((prefix-len_363)"
"(if bulk-prefix_350"
"(string-length(symbol->string bulk-prefix_350))"
" 0)))"
"(let-values(((br_364)"
"(bulk-required4.1"
" provides_348"
" prefix-len_363"
" s_344"
" provide-phase-level_349"
" can-be-shadowed?_354)))"
"(begin"
"(let-values(((ht_365) provides_348))"
"(begin"
"(if((lambda(ht_366)(hash? ht_366)) ht_365)"
"(void)"
"(let-values()(default-in-hash ht_365)))"
"((letrec-values(((for-loop_367)"
"(lambda(i_368)"
"(if i_368"
"(let-values(((out-sym_369 binding/p_370)"
"(hash-iterate-key+value"
" ht_365"
" i_368)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if symbols-accum_352"
"(let-values()"
"(hash-set!"
" symbols-accum_352"
" out-sym_369"
" #t))"
"(void))"
"(if(hash-ref"
" bulk-excepts_351"
" out-sym_369"
" #f)"
"(void)"
"(let-values()"
"(let-values(((sym_371)"
"(if(not"
" bulk-prefix_350)"
"(let-values()"
" out-sym_369)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                              \"~a~a\""
" bulk-prefix_350"
" out-sym_369))))))"
"(begin"
"(if(if check-and-remove?_355"
"(let-values(((or-part_372)"
"(not"
" shortcut-table_359)))"
"(if or-part_372"
" or-part_372"
"(hash-ref"
" shortcut-table_359"
" sym_371"
" #f)))"
" #f)"
"(let-values()"
"(let-values(((.../require+provide.rkt:171:8_373)"
" check-not-defined89.1)"
"((temp115_374)"
" #t)"
"((r+p116_375)"
" r+p_343)"
"((temp117_376)"
"(datum->syntax$1"
" s_344"
" sym_371"
" s_344))"
"((phase118_377)"
" phase_358)"
"((orig-s119_378)"
" orig-s_353)"
"((temp120_379)"
"(lambda()"
"(let-values(((binding/p124_384)"
" binding/p_370)"
"((sym125_385)"
" sym_371)"
"((self126_386)"
" self_345)"
"((mpi127_387)"
" mpi_360)"
"((provide-phase-level128_388)"
" provide-phase-level_349)"
"((phase-shift129_389)"
" phase-shift_347))"
"(provide-binding-to-require-binding11.1"
" mpi127_387"
" phase-shift129_389"
" provide-phase-level128_388"
" self126_386"
" binding/p124_384"
" sym125_385))))"
"((temp121_380)"
" #t)"
"((accum-update-nominals122_381)"
" accum-update-nominals_356)"
"((who123_382)"
" who_357))"
"(check-not-defined87.1"
" accum-update-nominals122_381"
" #t"
" temp115_374"
" #t"
" orig-s119_378"
" temp121_380"
" #t"
" temp120_379"
" #t"
" who123_382"
" r+p116_375"
" temp117_376"
" phase118_377)))"
"(void))"
"(hash-set!"
" sym-to-reqds_362"
" sym_371"
"(cons~"
" br_364"
"(hash-ref"
" sym-to-reqds_362"
" sym_371"
" null)))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_367"
"(hash-iterate-next ht_365 i_368))"
"(values))))"
"(values)))))"
" for-loop_367)"
"(hash-iterate-first ht_365))))"
"(void)))))))))))))))))))))))))))"
"(define-values"
"(bulk-required->required)"
"(lambda(br_440 nominal-module_441 phase_442 sym_443)"
"(let-values(((prefix-len_444)(bulk-required-prefix-len br_440)))"
"(let-values(((out-sym_445)"
"(if(zero? prefix-len_444)"
" sym_443"
"(string->symbol(substring(symbol->string sym_443) prefix-len_444)))))"
"(let-values(((binding/p_446)(hash-ref(bulk-required-provides br_440) out-sym_445)))"
"(required2.1"
"(datum->syntax$1(bulk-required-s br_440) sym_443)"
"(phase+ phase_442(bulk-required-provide-phase-level br_440))"
"(bulk-required-can-be-shadowed? br_440)"
"(provided-as-transformer? binding/p_446)))))))"
"(define-values"
"(normalize-required)"
"(lambda(r_447 mod-name_448 phase_449 sym_450)"
"(if(bulk-required? r_447)(bulk-required->required r_447 mod-name_448 phase_449 sym_450) r_447)))"
"(define-values"
"(add-enclosing-module-defined-and-required!61.1)"
"(lambda(enclosing-requires+provides56_459 r+p58_460 enclosing-mod59_461 phase-shift60_462)"
"(let-values(((r+p_463) r+p58_460))"
"(let-values(((enclosing-r+p_464) enclosing-requires+provides56_459))"
"(let-values(((enclosing-mod_465) enclosing-mod59_461))"
"(let-values(((phase-shift_466) phase-shift60_462))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?! r+p_463 #f)"
"(let-values(((ht_467)(requires+provides-requires enclosing-r+p_464)))"
"(begin"
"(if((lambda(ht_468)(hash? ht_468)) ht_467)(void)(let-values()(default-in-hash ht_467)))"
"((letrec-values(((for-loop_469)"
"(lambda(i_470)"
"(if i_470"
"(let-values(((mod-name_471 at-mod_472)"
"(hash-iterate-key+value ht_467 i_470)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((ht_473) at-mod_472))"
"(begin"
"(if((lambda(ht_474)"
"(hash? ht_474))"
" ht_473)"
"(void)"
"(let-values()"
"(default-in-hash ht_473)))"
"((letrec-values(((for-loop_475)"
"(lambda(i_476)"
"(if i_476"
"(let-values(((phase_477"
" at-phase_478)"
"(hash-iterate-key+value"
" ht_473"
" i_476)))"
"(let-values((()"
"(let-values(((ht_479)"
" at-phase_478))"
"(begin"
"(if((lambda(ht_480)"
"(hash?"
" ht_480))"
" ht_479)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_479)))"
"((letrec-values(((for-loop_481)"
"(lambda(i_482)"
"(if i_482"
"(let-values(((sym_483"
" reqds_484)"
"(hash-iterate-key+value"
" ht_479"
" i_482)))"
"(let-values((()"
"(let-values(((lst_485)"
" reqds_484))"
"(begin"
"(void)"
"((letrec-values(((for-loop_486)"
"(lambda(lst_487)"
"(if(not"
"(null?"
" lst_487))"
"(let-values(((reqd/maybe-bulk_488)"
"(if(pair?"
" lst_487)"
"(car"
" lst_487)"
" lst_487))"
"((rest_489)"
"(if(pair?"
" lst_487)"
"(cdr"
" lst_487)"
" null)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((reqd_490)"
"(normalize-required"
" reqd/maybe-bulk_488"
" mod-name_471"
" phase_477"
" sym_483)))"
"(let-values(((r+p130_492)"
" r+p_463)"
"((temp131_493)"
"(syntax-shift-phase-level$1"
"(let-values(((temp137_499)"
"(required-id"
" reqd_490))"
"((temp138_500)"
"(requires+provides-self"
" enclosing-r+p_464))"
"((enclosing-mod139_501)"
" enclosing-mod_465))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" temp137_499"
" temp138_500"
" enclosing-mod139_501"
" #f"
" #f))"
" phase-shift_466))"
"((temp132_494)"
"(phase+"
"(required-phase"
" reqd_490)"
" phase-shift_466))"
"((enclosing-mod133_495)"
" enclosing-mod_465)"
"((phase-shift134_496)"
" phase-shift_466)"
"((temp135_497)"
" #t)"
"((temp136_498)"
"(required-as-transformer?"
" reqd_490)))"
"(add-defined-or-required-id-at-nominal!27.1"
" temp136_498"
" temp135_497"
" enclosing-mod133_495"
" phase-shift134_496"
" r+p130_492"
" temp131_493"
" temp132_494))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_486"
" rest_489)"
"(values))))"
"(values)))))"
" for-loop_486)"
" lst_485)))))"
"(if(not"
" #f)"
"(for-loop_481"
"(hash-iterate-next"
" ht_479"
" i_482))"
"(values))))"
"(values)))))"
" for-loop_481)"
"(hash-iterate-first"
" ht_479))))))"
"(if(not"
" #f)"
"(for-loop_475"
"(hash-iterate-next"
" ht_473"
" i_476))"
"(values))))"
"(values)))))"
" for-loop_475)"
"(hash-iterate-first ht_473))))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_469(hash-iterate-next ht_467 i_470))(values))))"
"(values)))))"
" for-loop_469)"
"(hash-iterate-first ht_467))))"
"(void)))))))))"
"(define-values"
"(remove-required-id!69.1)"
"(lambda(unless-matches64_524 r+p66_525 id67_526 phase68_527)"
"(let-values(((r+p_528) r+p66_525))"
"(let-values(((id_529) id67_526))"
"(let-values(((phase_530) phase68_527))"
"(let-values(((binding_531) unless-matches64_524))"
"(let-values()"
"(let-values(((b_532)"
"(let-values(((id140_534) id_529)((phase141_535) phase_530)((temp142_536) #t))"
"(resolve+shift30.1 #f #f temp142_536 #t #f #f #f #f #f #f id140_534 phase141_535))))"
"(if b_532"
"(let-values()"
"(let-values(((mpi_537)(intern-mpi r+p_528(module-binding-nominal-module b_532))))"
"(let-values(((at-mod_538)(hash-ref(requires+provides-requires r+p_528) mpi_537 #f)))"
"(if at-mod_538"
"(let-values()"
"(let-values(((nominal-phase_539)(module-binding-nominal-require-phase b_532)))"
"(let-values(((sym-to-reqds_540)(hash-ref at-mod_538 nominal-phase_539 #f)))"
"(if sym-to-reqds_540"
"(let-values()"
"(let-values(((sym_541)(syntax-e$1 id_529)))"
"(let-values(((l_542)(hash-ref sym-to-reqds_540 sym_541 null)))"
"(if(null? l_542)"
"(void)"
"(let-values()"
"(if(same-binding? b_532 binding_531)"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_540"
" sym_541"
"(remove-non-matching-requireds"
" l_542"
" id_529"
" phase_530"
" mpi_537"
" nominal-phase_539"
" sym_541)))))))))"
"(void)))))"
"(void)))))"
"(void))))))))))"
"(define-values"
"(remove-non-matching-requireds)"
"(lambda(reqds_557 id_558 phase_559 mpi_560 nominal-phase_561 sym_562)"
"(let-values(((lst_563) reqds_557))"
"(begin"
"(void)"
"((letrec-values(((for-loop_564)"
"(lambda(lst_565)"
"(if(not(null? lst_565))"
"(let-values(((r_566)(if(pair? lst_565)(car lst_565) lst_565))"
"((rest_567)(if(pair? lst_565)(cdr lst_565) null)))"
"(let-values(((post-guard-var_568)(lambda() #t)))"
"(let-values(((r_569)(normalize-required r_566 mpi_560 nominal-phase_561 sym_562)))"
"(begin"
" #t"
"((letrec-values(((for-loop_570)"
"(lambda()"
"(let-values()"
"(let-values(((post-guard-var_571)(lambda() #f)))"
"(let-values()"
"(if(free-identifier=?$1"
"(required-id r_569)"
" id_558"
" phase_559"
" phase_559)"
"(if(post-guard-var_571)"
"(for-loop_570)"
"(if(post-guard-var_568)"
"(for-loop_564 rest_567)"
" null))"
"(let-values()"
"(let-values(((elem_572)"
"(let-values()"
"(let-values() r_569))))"
"(let-values(((result_573)"
"(if(post-guard-var_571)"
"(for-loop_570)"
"(if(post-guard-var_568)"
"(for-loop_564 rest_567)"
" null))))"
"(cons elem_572 result_573)))))))))))"
" for-loop_570))))))"
" null))))"
" for-loop_564)"
" lst_563)))))"
"(define-values"
"(lifted/26.1$1 lifted/27.1$1 lifted/28.1$1 lifted/29.1$1 lifted/30.1$1)"
"(make-struct-type"
" 'check-not-defined"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'check-not-defined"
"(case-lambda((self_574 r+p_575 id_576 phase_577)(apply missing-kw self_574 r+p_575 id_576 phase_577 null))))))"
"(current-inspector)"
"(case-lambda((self_578 r+p_579 id_580 phase_581)(apply missing-kw self_578 r+p_579 id_580 phase_581 null)))))"
"(define-values"
"(check-not-defined87.1)"
"(lambda(accum-update-nominals76_582"
" accum-update-nominals82_583"
" check-not-required?72_584"
" check-not-required?78_585"
" in73_586"
" remove-shadowed!?75_587"
" remove-shadowed!?81_588"
" unless-matches74_589"
" unless-matches80_590"
" who77_591"
" r+p84_592"
" id85_593"
" phase86_594)"
"(let-values(((check-not-required?_595)(if check-not-required?78_585 check-not-required?72_584 #f)))"
"(let-values(((r+p_596) r+p84_592))"
"(let-values(((id_597) id85_593))"
"(let-values(((phase_598) phase86_594))"
"(let-values(((orig-s_599) in73_586))"
"(let-values(((ok-binding/delayed_600)(if unless-matches80_590 unless-matches74_589 #f)))"
"(let-values(((remove-shadowed!?_601)(if remove-shadowed!?81_588 remove-shadowed!?75_587 #f)))"
"(let-values(((accum-update-nominals_602)"
"(if accum-update-nominals82_583 accum-update-nominals76_582 #f)))"
"(let-values(((who_603) who77_591))"
"(let-values()"
"(let-values(((b_604)"
"(let-values(((id143_606) id_597)((phase144_607) phase_598)((temp145_608) #t))"
"(resolve+shift30.1"
" #f"
" #f"
" temp145_608"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id143_606"
" phase144_607))))"
"(if(not b_604)"
"(let-values()(void))"
"(if(not(module-binding? b_604))"
"                              (let-values () (raise-syntax-error$1 #f \"identifier out of context\" id_597))"
"(let-values()"
"(let-values(((defined?_609)"
"(if b_604"
"(eq?(requires+provides-self r+p_596)(module-binding-module b_604))"
" #f)))"
"(if(if(not defined?_609)(not check-not-required?_595) #f)"
"(let-values()(set-requires+provides-all-bindings-simple?! r+p_596 #f))"
"(if(if defined?_609"
"(not"
"(hash-ref"
"(hash-ref"
"(requires+provides-phase-to-defined-syms r+p_596)"
" phase_598"
" '#hasheq())"
"(module-binding-sym b_604)"
" #f))"
" #f)"
"(let-values()(void))"
"(let-values()"
"(let-values(((mpi_610)"
"(intern-mpi r+p_596(module-binding-nominal-module b_604))))"
"(let-values(((at-mod_611)"
"(hash-ref(requires+provides-requires r+p_596) mpi_610 #f)))"
"(let-values(((ok-binding_612)"
"(if(procedure? ok-binding/delayed_600)"
"(ok-binding/delayed_600)"
" ok-binding/delayed_600)))"
"(if(not at-mod_611)"
"(let-values()(void))"
"(if(if ok-binding_612(same-binding? b_604 ok-binding_612) #f)"
"(let-values()"
"(if(same-binding-nominals? b_604 ok-binding_612)"
"(void)"
"(let-values()"
"(let-values(((update!_613)"
"(lambda()"
"(let-values(((temp146_615) #t)"
"((id147_616) id_597)"
"((temp148_617)"
"(let-values(((b150_620) b_604)"
"((temp151_621)"
"(cons"
" ok-binding_612"
"(module-binding-extra-nominal-bindings"
" b_604))))"
"(module-binding-update48.1"
" #f"
" #f"
" temp151_621"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b150_620)))"
"((phase149_618) phase_598))"
"(add-binding!17.1"
" #f"
" #f"
" temp146_615"
" #t"
" id147_616"
" temp148_617"
" phase149_618)))))"
"(if accum-update-nominals_602"
"(let-values()"
"(set-box!"
" accum-update-nominals_602"
"(cons update!_613(unbox accum-update-nominals_602))))"
"(let-values()(update!_613)))))))"
"(let-values()"
"(let-values(((nominal-phase_622)"
"(module-binding-nominal-require-phase b_604)))"
"(let-values(((sym-to-reqds_623)"
"(hash-ref at-mod_611 nominal-phase_622 '#hasheq())))"
"(let-values(((reqds_624)"
"(hash-ref"
" sym-to-reqds_623"
"(syntax-e$1 id_597)"
" null)))"
"(begin"
"(let-values(((lst_625) reqds_624))"
"(begin"
"(void)"
"((letrec-values(((for-loop_626)"
"(lambda(lst_627)"
"(if(not(null? lst_627))"
"(let-values(((r_628)"
"(if(pair? lst_627)"
"(car lst_627)"
" lst_627))"
"((rest_629)"
"(if(pair? lst_627)"
"(cdr lst_627)"
" null)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(if(bulk-required?"
" r_628)"
"(bulk-required-can-be-shadowed?"
" r_628)"
"(required-can-be-shadowed?"
" r_628))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" r+p_596"
" #f))"
"(let-values()"
"(raise-syntax-error$1"
" who_603"
"(string-append"
"                                                                                                                                  \"identifier already \""
"(if defined?_609"
"                                                                                                                                    \"defined\""
"                                                                                                                                    \"required\")"
"(if(zero-phase?"
" phase_598)"
"(let-values()"
"                                                                                                                                      \"\")"
"(if(label-phase?"
" phase_598)"
"(let-values()"
"                                                                                                                                        \" for label\")"
"(if(="
" 1"
" phase_598)"
"(let-values()"
"                                                                                                                                          \" for syntax\")"
"(let-values()"
"(format"
"                                                                                                                                           \" for phase ~a\""
" phase_598))))))"
" orig-s_599"
" id_597))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_626 rest_629)"
"(values))))"
"(values)))))"
" for-loop_626)"
" lst_625)))"
"(void)"
"(if(if remove-shadowed!?_601(not(null? reqds_624)) #f)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_623"
"(syntax-e$1 id_597)"
"(remove-non-matching-requireds"
" reqds_624"
" id_597"
" phase_598"
" mpi_610"
" nominal-phase_622"
"(syntax-e$1 id_597))))"
"(void))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack88.1)"
"(lambda(given-kws_630 given-args_631 r+p84_632 id85_633 phase86_634)"
"(let-values(((accum-update-nominals82_635)"
"(if(pair? given-kws_630)(eq? '#:accum-update-nominals(car given-kws_630)) #f)))"
"(let-values(((accum-update-nominals76_636)(if accum-update-nominals82_635(car given-args_631)(void)))"
"((given-kws_637)(if accum-update-nominals82_635(cdr given-kws_630) given-kws_630))"
"((given-args_638)(if accum-update-nominals82_635(cdr given-args_631) given-args_631)))"
"(let-values(((check-not-required?78_639)"
"(if(pair? given-kws_637)(eq? '#:check-not-required?(car given-kws_637)) #f)))"
"(let-values(((check-not-required?72_640)(if check-not-required?78_639(car given-args_638)(void)))"
"((given-kws_641)(if check-not-required?78_639(cdr given-kws_637) given-kws_637))"
"((given-args_642)(if check-not-required?78_639(cdr given-args_638) given-args_638)))"
"(let-values(((in73_643)(car given-args_642))"
"((given-kws_644)(cdr given-kws_641))"
"((given-args_645)(cdr given-args_642)))"
"(let-values(((remove-shadowed!?81_646)"
"(if(pair? given-kws_644)(eq? '#:remove-shadowed!?(car given-kws_644)) #f)))"
"(let-values(((remove-shadowed!?75_647)(if remove-shadowed!?81_646(car given-args_645)(void)))"
"((given-kws_648)(if remove-shadowed!?81_646(cdr given-kws_644) given-kws_644))"
"((given-args_649)(if remove-shadowed!?81_646(cdr given-args_645) given-args_645)))"
"(let-values(((unless-matches80_650)"
"(if(pair? given-kws_648)(eq? '#:unless-matches(car given-kws_648)) #f)))"
"(let-values(((unless-matches74_651)(if unless-matches80_650(car given-args_649)(void)))"
"((given-kws_652)(if unless-matches80_650(cdr given-kws_648) given-kws_648))"
"((given-args_653)(if unless-matches80_650(cdr given-args_649) given-args_649)))"
"(let-values(((who77_654)(car given-args_653)))"
"(check-not-defined87.1"
" accum-update-nominals76_636"
" accum-update-nominals82_635"
" check-not-required?72_640"
" check-not-required?78_639"
" in73_643"
" remove-shadowed!?75_647"
" remove-shadowed!?81_646"
" unless-matches74_651"
" unless-matches80_650"
" who77_654"
" r+p84_632"
" id85_633"
" phase86_634)))))))))))))"
"(define-values"
"(check-not-defined89.1)"
"(lifted/27.1$1"
"(lambda(given-kws_655 given-argc_656)"
"(if(= given-argc_656 5)"
"(subsets?"
" '(#:in #:who)"
" given-kws_655"
" '(#:accum-update-nominals #:check-not-required? #:in #:remove-shadowed!? #:unless-matches #:who))"
" #f))"
"(case-lambda"
"((given-kws_657 given-args_658 r+p_659 id_660 phase_661)"
"(unpack88.1 given-kws_657 given-args_658 r+p_659 id_660 phase_661)))"
" '(#:in #:who)"
" '(#:accum-update-nominals #:check-not-required? #:in #:remove-shadowed!? #:unless-matches #:who)))"
"(define-values"
"(add-defined-syms!)"
"(lambda(r+p_662 syms_663 phase_664)"
"(let-values(((phase-to-defined-syms_665)(requires+provides-phase-to-defined-syms r+p_662)))"
"(let-values(((defined-syms_666)(hash-ref phase-to-defined-syms_665 phase_664 '#hasheq())))"
"(let-values(((new-defined-syms_667)"
"(let-values(((lst_668) syms_663))"
"(begin"
"(if(list? lst_668)(void)(let-values()(in-list lst_668)))"
"((letrec-values(((for-loop_669)"
"(lambda(defined-syms_670 lst_671)"
"(if(pair? lst_671)"
"(let-values(((sym_672)(unsafe-car lst_671))"
"((rest_673)(unsafe-cdr lst_671)))"
"(let-values(((defined-syms_674)"
"(let-values(((defined-syms_675) defined-syms_670))"
"(let-values(((defined-syms_676)"
"(let-values()"
"(hash-set"
" defined-syms_675"
" sym_672"
" #t))))"
"(values defined-syms_676)))))"
"(if(not #f)"
"(for-loop_669 defined-syms_674 rest_673)"
" defined-syms_674)))"
" defined-syms_670))))"
" for-loop_669)"
" defined-syms_666"
" lst_668)))))"
"(hash-set! phase-to-defined-syms_665 phase_664 new-defined-syms_667))))))"
"(define-values"
"(extract-module-requires)"
"(lambda(r+p_677 mod-name_678 phase_679)"
"(let-values(((mpi_680)(intern-mpi r+p_677 mod-name_678)))"
"(let-values(((at-mod_681)(hash-ref(requires+provides-requires r+p_677) mpi_680 #f)))"
"(if at-mod_681"
"(let-values(((ht_682)(hash-ref at-mod_681 phase_679 '#hasheq())))"
"(begin"
"(if((lambda(ht_683)(hash? ht_683)) ht_682)(void)(let-values()(default-in-hash ht_682)))"
"((letrec-values(((for-loop_684)"
"(lambda(i_685)"
"(if i_685"
"(let-values(((sym_686 reqds_687)(hash-iterate-key+value ht_682 i_685)))"
"(let-values(((post-guard-var_688)(lambda() #t)))"
"(let-values(((lst_689) reqds_687))"
"(begin"
"(void)"
"((letrec-values(((for-loop_690)"
"(lambda(lst_691)"
"(if(not(null? lst_691))"
"(let-values(((reqd_692)"
"(if(pair? lst_691)"
"(car lst_691)"
" lst_691))"
"((rest_693)"
"(if(pair? lst_691)"
"(cdr lst_691)"
" null)))"
"(let-values(((post-guard-var_694)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_695)"
"(let-values()"
"(let-values()"
"(normalize-required"
" reqd_692"
" mpi_680"
" phase_679"
" sym_686)))))"
"(let-values(((result_696)"
"(if(post-guard-var_694)"
"(for-loop_690 rest_693)"
"(if(post-guard-var_688)"
"(for-loop_684"
"(hash-iterate-next"
" ht_682"
" i_685))"
" null))))"
"(cons elem_695 result_696))))))"
"(if(post-guard-var_688)"
"(for-loop_684(hash-iterate-next ht_682 i_685))"
" null)))))"
" for-loop_690)"
" lst_689)))))"
" null))))"
" for-loop_684)"
"(hash-iterate-first ht_682))))"
" #f)))))"
"(define-values"
"(extract-module-definitions)"
"(lambda(r+p_697)"
"(let-values(((or-part_698)(extract-module-requires r+p_697(requires+provides-self r+p_697) 0)))"
"(if or-part_698 or-part_698 null))))"
"(define-values"
"(extract-all-module-requires)"
"(lambda(r+p_699 mod-name_700 phase_701)"
"(let-values(((self_702)(requires+provides-self r+p_699)))"
"(let-values(((requires_703)(requires+provides-requires r+p_699)))"
"(call/ec"
"(lambda(esc_704)"
"(let-values(((lst_705)(if mod-name_700(list(intern-mpi r+p_699 mod-name_700))(hash-keys requires_703))))"
"(begin"
"(if(list? lst_705)(void)(let-values()(in-list lst_705)))"
"((letrec-values(((for-loop_706)"
"(lambda(lst_707)"
"(if(pair? lst_707)"
"(let-values(((mod-name_708)(unsafe-car lst_707))"
"((rest_709)(unsafe-cdr lst_707)))"
"(let-values(((post-guard-var_710)(lambda() #t)))"
"(let-values()"
"(if(eq? mod-name_708 self_702)"
"(if(post-guard-var_710)(for-loop_706 rest_709) null)"
"(let-values(((phase-to-requireds_711)"
"(hash-ref requires_703 mod-name_708 '#hasheqv())))"
"(begin"
" #t"
"((letrec-values(((for-loop_712)"
"(lambda()"
"(let-values()"
"(let-values(((post-guard-var_713)"
"(lambda() #f)))"
"(let-values(((lst_714)"
"(if(eq? phase_701 'all)"
"(hash-keys"
" phase-to-requireds_711)"
"(list phase_701))))"
"(begin"
"(if(list? lst_714)"
"(void)"
"(let-values()(in-list lst_714)))"
"((letrec-values(((for-loop_715)"
"(lambda(lst_716)"
"(if(pair? lst_716)"
"(let-values(((phase_717)"
"(unsafe-car"
" lst_716))"
"((rest_718)"
"(unsafe-cdr"
" lst_716)))"
"(let-values(((post-guard-var_719)"
"(lambda()"
" #t)))"
"(let-values(((ht_720)"
"(hash-ref"
" phase-to-requireds_711"
" phase_717"
"(lambda()"
"(esc_704"
" #f)))))"
"(begin"
"(if((lambda(ht_721)"
"(hash?"
" ht_721))"
" ht_720)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_720)))"
"((letrec-values(((for-loop_722)"
"(lambda(i_723)"
"(if i_723"
"(let-values(((sym_724"
" reqds_725)"
"(hash-iterate-key+value"
" ht_720"
" i_723)))"
"(let-values(((post-guard-var_726)"
"(lambda()"
" #t)))"
"(let-values(((lst_727)"
" reqds_725))"
"(begin"
"(void)"
"((letrec-values(((for-loop_728)"
"(lambda(lst_729)"
"(if(not"
"(null?"
" lst_729))"
"(let-values(((reqd_730)"
"(if(pair?"
" lst_729)"
"(car"
" lst_729)"
" lst_729))"
"((rest_731)"
"(if(pair?"
" lst_729)"
"(cdr"
" lst_729)"
" null)))"
"(let-values(((post-guard-var_732)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_733)"
"(let-values()"
"(let-values()"
"(normalize-required"
" reqd_730"
" mod-name_708"
" phase_717"
" sym_724)))))"
"(let-values(((result_734)"
"(if(post-guard-var_732)"
"(for-loop_728"
" rest_731)"
"(if(post-guard-var_726)"
"(for-loop_722"
"(hash-iterate-next"
" ht_720"
" i_723))"
"(if(post-guard-var_719)"
"(for-loop_715"
" rest_718)"
"(if(post-guard-var_713)"
"(for-loop_712)"
"(if(post-guard-var_710)"
"(for-loop_706"
" rest_709)"
" null)))))))"
"(cons"
" elem_733"
" result_734))))))"
"(if(post-guard-var_726)"
"(for-loop_722"
"(hash-iterate-next"
" ht_720"
" i_723))"
"(if(post-guard-var_719)"
"(for-loop_715"
" rest_718)"
"(if(post-guard-var_713)"
"(for-loop_712)"
"(if(post-guard-var_710)"
"(for-loop_706"
" rest_709)"
" null))))))))"
" for-loop_728)"
" lst_727)))))"
"(if(post-guard-var_719)"
"(for-loop_715"
" rest_718)"
"(if(post-guard-var_713)"
"(for-loop_712)"
"(if(post-guard-var_710)"
"(for-loop_706"
" rest_709)"
" null)))))))"
" for-loop_722)"
"(hash-iterate-first"
" ht_720))))))"
"(if(post-guard-var_713)"
"(for-loop_712)"
"(if(post-guard-var_710)"
"(for-loop_706"
" rest_709)"
" null))))))"
" for-loop_715)"
" lst_714))))))))"
" for-loop_712))))))))"
" null))))"
" for-loop_706)"
" lst_705)))))))))"
"(define-values"
"(add-provide!101.1)"
"(lambda(as-protected?90_751"
" as-transformer?91_752"
" r+p94_753"
" sym95_754"
" phase96_755"
" binding97_756"
" immed-binding98_757"
" id99_758"
" orig-s100_759)"
"(let-values(((r+p_760) r+p94_753))"
"(let-values(((sym_761) sym95_754))"
"(let-values(((phase_762) phase96_755))"
"(let-values(((binding_763) binding97_756))"
"(let-values(((immed-binding_764) immed-binding98_757))"
"(let-values(((id_765) id99_758))"
"(let-values(((orig-s_766) orig-s100_759))"
"(let-values(((as-protected?_767) as-protected?90_751))"
"(let-values(((as-transformer?_768) as-transformer?91_752))"
"(let-values()"
"(begin"
"(if(if as-protected?_767"
"(not(eq?(module-binding-module immed-binding_764)(requires+provides-self r+p_760)))"
" #f)"
"(let-values()"
"                              (raise-syntax-error$1 #f \"cannot protect required identifier in re-provide\" sym_761))"
"(void))"
"(hash-update!"
"(requires+provides-provides r+p_760)"
" phase_762"
"(lambda(at-phase_769)"
"(let-values(((b/p_770)(hash-ref at-phase_769 sym_761 #f)))"
"(let-values(((b_771)(provided-as-binding b/p_770)))"
"(if(not b_771)"
"(let-values()"
"(hash-set"
" at-phase_769"
" sym_761"
"(if(let-values(((or-part_772) as-protected?_767))"
"(if or-part_772 or-part_772 as-transformer?_768))"
"(provided1.1 binding_763 as-protected?_767 as-transformer?_768)"
" binding_763)))"
"(if(same-binding? b_771 binding_763)"
"(let-values() at-phase_769)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                        \"identifier already provided (as a different binding)\""
" orig-s_766"
" id_765)))))))"
" '#hasheq()))))))))))))))"
"(define-values"
"(extract-requires-and-provides)"
"(lambda(r+p_799 old-self_800 new-self_801)"
"(let-values(((extract-requires_802)"
"(lambda()"
"(let-values(((phase-to-mpis-in-order_804)(requires+provides-require-mpis-in-order r+p_799)))"
"(let-values(((phases-in-order_805)"
"(let-values(((temp152_806)(hash-keys phase-to-mpis-in-order_804))"
"((phase<?153_807) phase<?))"
"(sort7.1 #f #f #f #f temp152_806 phase<?153_807))))"
"(let-values(((lst_808) phases-in-order_805))"
"(begin"
"(if(list? lst_808)(void)(let-values()(in-list lst_808)))"
"((letrec-values(((for-loop_809)"
"(lambda(lst_810)"
"(if(pair? lst_810)"
"(let-values(((phase_811)(unsafe-car lst_810))"
"((rest_812)(unsafe-cdr lst_810)))"
"(let-values(((post-guard-var_813)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_814)"
"(let-values()"
"(let-values()"
"(cons"
" phase_811"
"(let-values(((lst_815)"
"(alt-reverse"
"(hash-ref"
" phase-to-mpis-in-order_804"
" phase_811))))"
"(begin"
"(if(list? lst_815)"
"(void)"
"(let-values()(in-list lst_815)))"
"((letrec-values(((for-loop_816)"
"(lambda(lst_817)"
"(if(pair? lst_817)"
"(let-values(((mpi_818)"
"(unsafe-car"
" lst_817))"
"((rest_819)"
"(unsafe-cdr"
" lst_817)))"
"(let-values(((post-guard-var_820)"
"(lambda()"
" #t)))"
"(let-values()"
"(if(eq?"
" mpi_818"
" old-self_800)"
"(if(post-guard-var_820)"
"(for-loop_816"
" rest_819)"
" null)"
"(let-values()"
"(let-values(((elem_821)"
"(let-values()"
"(let-values()"
"(module-path-index-shift"
" mpi_818"
" old-self_800"
" new-self_801)))))"
"(let-values(((result_822)"
"(if(post-guard-var_820)"
"(for-loop_816"
" rest_819)"
" null)))"
"(cons"
" elem_821"
" result_822))))))))"
" null))))"
" for-loop_816)"
" lst_815))))))))"
"(let-values(((result_823)"
"(if(post-guard-var_813)"
"(for-loop_809 rest_812)"
" null)))"
"(cons elem_814 result_823))))))"
" null))))"
" for-loop_809)"
" lst_808))))))))"
"(let-values(((extract-provides_803)"
"(lambda()"
"(shift-provides-module-path-index"
"(requires+provides-provides r+p_799)"
" old-self_800"
" new-self_801))))"
"(values(extract-requires_802)(extract-provides_803))))))"
"(define-values"
"(shift-provides-module-path-index)"
"(lambda(provides_847 from-mpi_848 to-mpi_849)"
"(let-values(((ht_850) provides_847))"
"(begin"
"(if((lambda(ht_851)(hash? ht_851)) ht_850)(void)(let-values()(default-in-hash ht_850)))"
"((letrec-values(((for-loop_852)"
"(lambda(table_853 i_854)"
"(if i_854"
"(let-values(((phase_855 at-phase_856)(hash-iterate-key+value ht_850 i_854)))"
"(let-values(((table_857)"
"(let-values(((table_858) table_853))"
"(let-values(((table_859)"
"(let-values()"
"(let-values(((key_860 val_861)"
"(let-values()"
"(values"
" phase_855"
"(let-values(((ht_862) at-phase_856))"
"(begin"
"(if((lambda(ht_863)"
"(hash? ht_863))"
" ht_862)"
"(void)"
"(let-values()"
"(default-in-hash ht_862)))"
"((letrec-values(((for-loop_864)"
"(lambda(table_865"
" i_866)"
"(if i_866"
"(let-values(((sym_867"
" binding_868)"
"(hash-iterate-key+value"
" ht_862"
" i_866)))"
"(let-values(((table_869)"
"(let-values(((table_870)"
" table_865))"
"(if(symbol-interned?"
" sym_867)"
"(let-values(((table_871)"
" table_870))"
"(let-values(((table_872)"
"(let-values()"
"(let-values(((key_873"
" val_874)"
"(let-values()"
"(values"
" sym_867"
"(if(eq?"
" from-mpi_848"
" to-mpi_849)"
"(let-values()"
" binding_868)"
"(let-values()"
"((letrec-values(((loop_875)"
"(lambda(binding_876)"
"(if(provided?"
" binding_876)"
"(let-values()"
"(provided1.1"
"(loop_875"
"(provided-binding"
" binding_876))"
"(provided-protected?"
" binding_876)"
"(provided-syntax?"
" binding_876)))"
"(let-values()"
"(binding-module-path-index-shift"
" binding_876"
" from-mpi_848"
" to-mpi_849))))))"
" loop_875)"
" binding_868)))))))"
"(hash-set"
" table_871"
" key_873"
" val_874)))))"
"(values"
" table_872)))"
" table_870))))"
"(if(not"
" #f)"
"(for-loop_864"
" table_869"
"(hash-iterate-next"
" ht_862"
" i_866))"
" table_869)))"
" table_865))))"
" for-loop_864)"
" '#hasheq()"
"(hash-iterate-first ht_862))))))))"
"(hash-set table_858 key_860 val_861)))))"
"(values table_859)))))"
"(if(not #f)(for-loop_852 table_857(hash-iterate-next ht_850 i_854)) table_857)))"
" table_853))))"
" for-loop_852)"
" '#hasheqv()"
"(hash-iterate-first ht_850))))))"
"(void)"
"(void)"
"(define-values"
"(struct:adjust-only adjust-only1.1 adjust-only? adjust-only-syms)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-only #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-only)))))"
"(values struct:_21 make-_22 ?_23(make-struct-field-accessor -ref_24 0 'syms))))"
"(define-values"
"(struct:adjust-prefix adjust-prefix2.1 adjust-prefix? adjust-prefix-sym)"
"(let-values(((struct:_41 make-_42 ?_43 -ref_44 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-prefix #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-prefix)))))"
"(values struct:_41 make-_42 ?_43(make-struct-field-accessor -ref_44 0 'sym))))"
"(define-values"
"(struct:adjust-all-except adjust-all-except3.1 adjust-all-except? adjust-all-except-prefix-sym adjust-all-except-syms)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'adjust-all-except"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'adjust-all-except)))))"
"(values"
" struct:_61"
" make-_62"
" ?_63"
"(make-struct-field-accessor -ref_64 0 'prefix-sym)"
"(make-struct-field-accessor -ref_64 1 'syms))))"
"(define-values"
"(struct:adjust-rename adjust-rename4.1 adjust-rename? adjust-rename-to-id adjust-rename-from-sym)"
"(let-values(((struct:_86 make-_87 ?_88 -ref_89 -set!_90)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-rename #f 2 0 #f null(current-inspector) #f '(0 1) #f 'adjust-rename)))))"
"(values"
" struct:_86"
" make-_87"
" ?_88"
"(make-struct-field-accessor -ref_89 0 'to-id)"
"(make-struct-field-accessor -ref_89 1 'from-sym))))"
"(define-values(layers$1) '(raw phaseless path))"
"(define-values"
"(parse-and-perform-requires!30.1)"
"(lambda(copy-variable-as-constant?11_123"
" copy-variable-as-constant?21_124"
" copy-variable-phase-level10_125"
" copy-variable-phase-level20_126"
" declared-submodule-names9_127"
" declared-submodule-names19_128"
" initial-require?13_129"
" initial-require?23_130"
" run-phase6_131"
" run-phase16_132"
" run?7_133"
" run?17_134"
" self5_135"
" self15_136"
" skip-variable-phase-level12_137"
" skip-variable-phase-level22_138"
" visit?8_139"
" visit?18_140"
" who14_141"
" reqs25_142"
" orig-s26_143"
" m-ns27_144"
" phase-shift28_145"
" requires+provides29_146)"
"(let-values(((reqs_147) reqs25_142))"
"(let-values(((orig-s_148) orig-s26_143))"
"(let-values(((m-ns_149) m-ns27_144))"
"(let-values(((phase-shift_150) phase-shift28_145))"
"(let-values(((requires+provides_151) requires+provides29_146))"
"(let-values(((self_152)(if self15_136 self5_135 #f)))"
"(let-values(((run-phase_153)(if run-phase16_132 run-phase6_131(namespace-phase m-ns_149))))"
"(let-values(((run?_154)(if run?17_134 run?7_133 #f)))"
"(let-values(((visit?_155)(if visit?18_140 visit?8_139 #t)))"
"(let-values(((declared-submodule-names_156)"
"(if declared-submodule-names19_128 declared-submodule-names9_127 '#hasheq())))"
"(let-values(((copy-variable-phase-level_157)"
"(if copy-variable-phase-level20_126 copy-variable-phase-level10_125 #f)))"
"(let-values(((copy-variable-as-constant?_158)"
"(if copy-variable-as-constant?21_124 copy-variable-as-constant?11_123 #f)))"
"(let-values(((skip-variable-phase-level_159)"
"(if skip-variable-phase-level22_138 skip-variable-phase-level12_137 #f)))"
"(let-values(((initial-require?_160)"
"(if initial-require?23_130 initial-require?13_129 #f)))"
"(let-values(((who_161) who14_141))"
"(let-values()"
"((letrec-values(((loop_162)"
"(lambda(reqs_163"
" top-req_164"
" phase-shift_165"
" just-meta_166"
" adjust_167"
" for-meta-ok?_168"
" just-meta-ok?_169"
" layer_170)"
"(let-values(((lst_171) reqs_163))"
"(begin"
"(if(list? lst_171)"
"(void)"
"(let-values()(in-list lst_171)))"
"((letrec-values(((for-loop_172)"
"(lambda(result_173 lst_174)"
"(if(pair? lst_174)"
"(let-values(((req_175)"
"(unsafe-car lst_174))"
"((rest_176)"
"(unsafe-cdr lst_174)))"
"(let-values(((result_177)"
"(let-values()"
"(let-values(((result_179)"
"(let-values()"
"(let-values()"
"(let-values(((check-nested_180)"
"(let-values(((check-nested108_182)"
"(lambda(want-layer107_183"
" ok?105_184"
" ok?106_185)"
"(let-values(((want-layer_186)"
" want-layer107_183))"
"(let-values(((ok?_187)"
"(if ok?106_185"
" ok?105_184"
" #t)))"
"(let-values()"
"(if(if ok?_187"
"(member"
" want-layer_186"
"(member"
" layer_170"
" layers$1))"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"invalid nesting\""
" orig-s_148"
" req_175)))))))))"
"(case-lambda"
"((want-layer_188)"
"(check-nested108_182"
" want-layer_188"
" #f"
" #f))"
"((want-layer_189"
" ok?105_190)"
"(check-nested108_182"
" want-layer_189"
" ok?105_190"
" #t))))))"
"(let-values(((fm_181)"
"(if(pair?"
"(syntax-e$1"
" req_175))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" req_175)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" req_175)))"
" #f)"
" #f)))"
"(let-values(((tmp_191)"
" fm_181))"
"(if(equal?"
" tmp_191"
" 'for-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_180"
" 'raw"
" for-meta-ok?_168)"
"(values))))"
"(let-values(((ok?_192"
" for-meta110_193"
" phase-level111_194"
" spec112_195)"
"(let-values(((s_209)"
" req_175))"
"(let-values(((orig-s_210)"
" s_209))"
"(let-values(((for-meta110_211"
" phase-level111_212"
" spec112_213)"
"(let-values(((s_214)"
"(if(syntax?$1"
" s_209)"
"(syntax-e$1"
" s_209)"
" s_209)))"
"(if(pair?"
" s_214)"
"(let-values(((for-meta113_215)"
"(let-values(((s_218)"
"(car"
" s_214)))"
" s_218))"
"((phase-level114_216"
" spec115_217)"
"(let-values(((s_219)"
"(cdr"
" s_214)))"
"(let-values(((s_220)"
"(if(syntax?$1"
" s_219)"
"(syntax-e$1"
" s_219)"
" s_219)))"
"(if(pair?"
" s_220)"
"(let-values(((phase-level116_221)"
"(let-values(((s_223)"
"(car"
" s_220)))"
" s_223))"
"((spec117_222)"
"(let-values(((s_224)"
"(cdr"
" s_220)))"
"(let-values(((s_225)"
"(if(syntax?$1"
" s_224)"
"(syntax-e$1"
" s_224)"
" s_224)))"
"(let-values(((flat-s_226)"
"(to-syntax-list.1"
" s_225)))"
"(if(not"
" flat-s_226)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_210))"
"(let-values()"
" flat-s_226)))))))"
"(values"
" phase-level116_221"
" spec117_222))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_210))))))"
"(values"
" for-meta113_215"
" phase-level114_216"
" spec115_217))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_210)))))"
"(values"
" #t"
" for-meta110_211"
" phase-level111_212"
" spec112_213))))))"
"(let-values(((p_208)"
"(syntax-e$1"
" phase-level111_194)))"
"(begin"
"(if(phase?"
" p_208)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad phase\""
" orig-s_148"
" req_175)))"
"(loop_162"
" spec112_195"
"(let-values(((or-part_227)"
" top-req_164))"
"(if or-part_227"
" or-part_227"
" req_175))"
"(phase+"
" phase-shift_165"
" p_208)"
" just-meta_166"
" adjust_167"
" #f"
" just-meta-ok?_169"
" 'raw))))))"
"(if(equal?"
" tmp_191"
" 'for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_180"
" 'raw"
" for-meta-ok?_168)"
"(values))))"
"(let-values(((ok?_228"
" for-syntax118_229"
" spec119_230)"
"(let-values(((s_241)"
" req_175))"
"(let-values(((orig-s_242)"
" s_241))"
"(let-values(((for-syntax118_243"
" spec119_244)"
"(let-values(((s_245)"
"(if(syntax?$1"
" s_241)"
"(syntax-e$1"
" s_241)"
" s_241)))"
"(if(pair?"
" s_245)"
"(let-values(((for-syntax120_246)"
"(let-values(((s_248)"
"(car"
" s_245)))"
" s_248))"
"((spec121_247)"
"(let-values(((s_249)"
"(cdr"
" s_245)))"
"(let-values(((s_250)"
"(if(syntax?$1"
" s_249)"
"(syntax-e$1"
" s_249)"
" s_249)))"
"(let-values(((flat-s_251)"
"(to-syntax-list.1"
" s_250)))"
"(if(not"
" flat-s_251)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_242))"
"(let-values()"
" flat-s_251)))))))"
"(values"
" for-syntax120_246"
" spec121_247))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad syntax\""
" orig-s_242)))))"
"(values"
" #t"
" for-syntax118_243"
" spec119_244))))))"
"(loop_162"
" spec119_230"
"(let-values(((or-part_252)"
" top-req_164))"
"(if or-part_252"
" or-part_252"
" req_175))"
"(phase+"
" phase-shift_165"
" 1)"
" just-meta_166"
" adjust_167"
" #f"
" just-meta-ok?_169"
" 'raw))))"
"(if(equal?"
" tmp_191"
" 'for-template)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_180"
" 'raw"
" for-meta-ok?_168)"
"(values))))"
"(let-values(((ok?_253"
" for-template122_254"
" spec123_255)"
"(let-values(((s_266)"
" req_175))"
"(let-values(((orig-s_267)"
" s_266))"
"(let-values(((for-template122_268"
" spec123_269)"
"(let-values(((s_270)"
"(if(syntax?$1"
" s_266)"
"(syntax-e$1"
" s_266)"
" s_266)))"
"(if(pair?"
" s_270)"
"(let-values(((for-template124_271)"
"(let-values(((s_273)"
"(car"
" s_270)))"
" s_273))"
"((spec125_272)"
"(let-values(((s_274)"
"(cdr"
" s_270)))"
"(let-values(((s_275)"
"(if(syntax?$1"
" s_274)"
"(syntax-e$1"
" s_274)"
" s_274)))"
"(let-values(((flat-s_276)"
"(to-syntax-list.1"
" s_275)))"
"(if(not"
" flat-s_276)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_267))"
"(let-values()"
" flat-s_276)))))))"
"(values"
" for-template124_271"
" spec125_272))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"bad syntax\""
" orig-s_267)))))"
"(values"
" #t"
" for-template122_268"
" spec123_269))))))"
"(loop_162"
" spec123_255"
"(let-values(((or-part_277)"
" top-req_164))"
"(if or-part_277"
" or-part_277"
" req_175))"
"(phase+"
" phase-shift_165"
" -1)"
" just-meta_166"
" adjust_167"
" #f"
" just-meta-ok?_169"
" 'raw))))"
"(if(equal?"
" tmp_191"
" 'for-label)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_180"
" 'raw"
" for-meta-ok?_168)"
"(values))))"
"(let-values(((ok?_278"
" for-label126_279"
" spec127_280)"
"(let-values(((s_291)"
" req_175))"
"(let-values(((orig-s_292)"
" s_291))"
"(let-values(((for-label126_293"
" spec127_294)"
"(let-values(((s_295)"
"(if(syntax?$1"
" s_291)"
"(syntax-e$1"
" s_291)"
" s_291)))"
"(if(pair?"
" s_295)"
"(let-values(((for-label128_296)"
"(let-values(((s_298)"
"(car"
" s_295)))"
" s_298))"
"((spec129_297)"
"(let-values(((s_299)"
"(cdr"
" s_295)))"
"(let-values(((s_300)"
"(if(syntax?$1"
" s_299)"
"(syntax-e$1"
" s_299)"
" s_299)))"
"(let-values(((flat-s_301)"
"(to-syntax-list.1"
" s_300)))"
"(if(not"
" flat-s_301)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_292))"
"(let-values()"
" flat-s_301)))))))"
"(values"
" for-label128_296"
" spec129_297))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_292)))))"
"(values"
" #t"
" for-label126_293"
" spec127_294))))))"
"(loop_162"
" spec127_280"
"(let-values(((or-part_302)"
" top-req_164))"
"(if or-part_302"
" or-part_302"
" req_175))"
"(phase+"
" phase-shift_165"
" #f)"
" just-meta_166"
" adjust_167"
" #f"
" just-meta-ok?_169"
" 'raw))))"
"(if(equal?"
" tmp_191"
" 'just-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_180"
" 'raw"
" just-meta-ok?_169)"
"(values))))"
"(let-values(((ok?_303"
" just-meta130_304"
" phase-level131_305"
" spec132_306)"
"(let-values(((s_320)"
" req_175))"
"(let-values(((orig-s_321)"
" s_320))"
"(let-values(((just-meta130_322"
" phase-level131_323"
" spec132_324)"
"(let-values(((s_325)"
"(if(syntax?$1"
" s_320)"
"(syntax-e$1"
" s_320)"
" s_320)))"
"(if(pair?"
" s_325)"
"(let-values(((just-meta133_326)"
"(let-values(((s_329)"
"(car"
" s_325)))"
" s_329))"
"((phase-level134_327"
" spec135_328)"
"(let-values(((s_330)"
"(cdr"
" s_325)))"
"(let-values(((s_331)"
"(if(syntax?$1"
" s_330)"
"(syntax-e$1"
" s_330)"
" s_330)))"
"(if(pair?"
" s_331)"
"(let-values(((phase-level136_332)"
"(let-values(((s_334)"
"(car"
" s_331)))"
" s_334))"
"((spec137_333)"
"(let-values(((s_335)"
"(cdr"
" s_331)))"
"(let-values(((s_336)"
"(if(syntax?$1"
" s_335)"
"(syntax-e$1"
" s_335)"
" s_335)))"
"(let-values(((flat-s_337)"
"(to-syntax-list.1"
" s_336)))"
"(if(not"
" flat-s_337)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_321))"
"(let-values()"
" flat-s_337)))))))"
"(values"
" phase-level136_332"
" spec137_333))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_321))))))"
"(values"
" just-meta133_326"
" phase-level134_327"
" spec135_328))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_321)))))"
"(values"
" #t"
" just-meta130_322"
" phase-level131_323"
" spec132_324))))))"
"(let-values(((p_319)"
"(syntax-e$1"
" phase-level131_305)))"
"(begin"
"(if(phase?"
" p_319)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad phase\""
" orig-s_148"
" req_175)))"
"(loop_162"
" spec132_306"
"(let-values(((or-part_338)"
" top-req_164))"
"(if or-part_338"
" or-part_338"
" req_175))"
" phase-shift_165"
" p_319"
" adjust_167"
" for-meta-ok?_168"
" #f"
" 'raw))))))"
"(if(equal?"
" tmp_191"
" 'only)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_180"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_339"
" only138_340"
" spec139_341"
" id140_342)"
"(let-values(((s_355)"
" req_175))"
"(let-values(((orig-s_356)"
" s_355))"
"(let-values(((only138_357"
" spec139_358"
" id140_359)"
"(let-values(((s_360)"
"(if(syntax?$1"
" s_355)"
"(syntax-e$1"
" s_355)"
" s_355)))"
"(if(pair?"
" s_360)"
"(let-values(((only141_361)"
"(let-values(((s_364)"
"(car"
" s_360)))"
" s_364))"
"((spec142_362"
" id143_363)"
"(let-values(((s_365)"
"(cdr"
" s_360)))"
"(let-values(((s_366)"
"(if(syntax?$1"
" s_365)"
"(syntax-e$1"
" s_365)"
" s_365)))"
"(if(pair?"
" s_366)"
"(let-values(((spec144_367)"
"(let-values(((s_369)"
"(car"
" s_366)))"
" s_369))"
"((id145_368)"
"(let-values(((s_370)"
"(cdr"
" s_366)))"
"(let-values(((s_371)"
"(if(syntax?$1"
" s_370)"
"(syntax-e$1"
" s_370)"
" s_370)))"
"(let-values(((flat-s_372)"
"(to-syntax-list.1"
" s_371)))"
"(if(not"
" flat-s_372)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_356))"
"(let-values()"
"(let-values(((id_373)"
"(let-values(((lst_374)"
" flat-s_372))"
"(begin"
"(if(list?"
" lst_374)"
"(void)"
"(let-values()"
"(in-list"
" lst_374)))"
"((letrec-values(((for-loop_375)"
"(lambda(id_376"
" lst_377)"
"(if(pair?"
" lst_377)"
"(let-values(((s_378)"
"(unsafe-car"
" lst_377))"
"((rest_379)"
"(unsafe-cdr"
" lst_377)))"
"(let-values(((id_380)"
"(let-values(((id_381)"
" id_376))"
"(let-values(((id_382)"
"(let-values()"
"(let-values(((id146_383)"
"(let-values()"
"(if(let-values(((or-part_384)"
"(if(syntax?$1"
" s_378)"
"(symbol?"
"(syntax-e$1"
" s_378))"
" #f)))"
"(if or-part_384"
" or-part_384"
"(symbol?"
" s_378)))"
" s_378"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_356"
" s_378)))))"
"(cons"
" id146_383"
" id_381)))))"
"(values"
" id_382)))))"
"(if(not"
" #f)"
"(for-loop_375"
" id_380"
" rest_379)"
" id_380)))"
" id_376))))"
" for-loop_375)"
" null"
" lst_374)))))"
"(alt-reverse"
" id_373)))))))))"
"(values"
" spec144_367"
" id145_368))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_356))))))"
"(values"
" only141_361"
" spec142_362"
" id143_363))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_356)))))"
"(values"
" #t"
" only138_357"
" spec139_358"
" id140_359))))))"
"(loop_162"
"(list"
" spec139_341)"
"(let-values(((or-part_385)"
" top-req_164))"
"(if or-part_385"
" or-part_385"
" req_175))"
" phase-shift_165"
" just-meta_166"
"(adjust-only1.1"
"(ids->sym-set"
" id140_342))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_191"
" 'prefix)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_180"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_386"
" prefix147_387"
" id:prefix148_388"
" spec149_389)"
"(let-values(((s_402)"
" req_175))"
"(let-values(((orig-s_403)"
" s_402))"
"(let-values(((prefix147_404"
" id:prefix148_405"
" spec149_406)"
"(let-values(((s_407)"
"(if(syntax?$1"
" s_402)"
"(syntax-e$1"
" s_402)"
" s_402)))"
"(if(pair?"
" s_407)"
"(let-values(((prefix150_408)"
"(let-values(((s_411)"
"(car"
" s_407)))"
" s_411))"
"((id:prefix151_409"
" spec152_410)"
"(let-values(((s_412)"
"(cdr"
" s_407)))"
"(let-values(((s_413)"
"(if(syntax?$1"
" s_412)"
"(syntax-e$1"
" s_412)"
" s_412)))"
"(if(pair?"
" s_413)"
"(let-values(((id:prefix153_414)"
"(let-values(((s_416)"
"(car"
" s_413)))"
"(if(let-values(((or-part_417)"
"(if(syntax?$1"
" s_416)"
"(symbol?"
"(syntax-e$1"
" s_416))"
" #f)))"
"(if or-part_417"
" or-part_417"
"(symbol?"
" s_416)))"
" s_416"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_403"
" s_416))))"
"((spec154_415)"
"(let-values(((s_418)"
"(cdr"
" s_413)))"
"(let-values(((s_419)"
"(if(syntax?$1"
" s_418)"
"(syntax-e$1"
" s_418)"
" s_418)))"
"(if(pair?"
" s_419)"
"(let-values(((spec155_420)"
"(let-values(((s_421)"
"(car"
" s_419)))"
" s_421))"
"(()"
"(let-values(((s_422)"
"(cdr"
" s_419)))"
"(let-values(((s_423)"
"(if(syntax?$1"
" s_422)"
"(syntax-e$1"
" s_422)"
" s_422)))"
"(if(null?"
" s_423)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_403))))))"
"(values"
" spec155_420))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_403))))))"
"(values"
" id:prefix153_414"
" spec154_415))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_403))))))"
"(values"
" prefix150_408"
" id:prefix151_409"
" spec152_410))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_403)))))"
"(values"
" #t"
" prefix147_404"
" id:prefix148_405"
" spec149_406))))))"
"(loop_162"
"(list"
" spec149_389)"
"(let-values(((or-part_424)"
" top-req_164))"
"(if or-part_424"
" or-part_424"
" req_175))"
" phase-shift_165"
" just-meta_166"
"(adjust-prefix2.1"
"(syntax-e$1"
" id:prefix148_388))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_191"
" 'all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_180"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_425"
" all-except156_426"
" spec157_427"
" id158_428)"
"(let-values(((s_441)"
" req_175))"
"(let-values(((orig-s_442)"
" s_441))"
"(let-values(((all-except156_443"
" spec157_444"
" id158_445)"
"(let-values(((s_446)"
"(if(syntax?$1"
" s_441)"
"(syntax-e$1"
" s_441)"
" s_441)))"
"(if(pair?"
" s_446)"
"(let-values(((all-except159_447)"
"(let-values(((s_450)"
"(car"
" s_446)))"
" s_450))"
"((spec160_448"
" id161_449)"
"(let-values(((s_451)"
"(cdr"
" s_446)))"
"(let-values(((s_452)"
"(if(syntax?$1"
" s_451)"
"(syntax-e$1"
" s_451)"
" s_451)))"
"(if(pair?"
" s_452)"
"(let-values(((spec162_453)"
"(let-values(((s_455)"
"(car"
" s_452)))"
" s_455))"
"((id163_454)"
"(let-values(((s_456)"
"(cdr"
" s_452)))"
"(let-values(((s_457)"
"(if(syntax?$1"
" s_456)"
"(syntax-e$1"
" s_456)"
" s_456)))"
"(let-values(((flat-s_458)"
"(to-syntax-list.1"
" s_457)))"
"(if(not"
" flat-s_458)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_442))"
"(let-values()"
"(let-values(((id_459)"
"(let-values(((lst_460)"
" flat-s_458))"
"(begin"
"(if(list?"
" lst_460)"
"(void)"
"(let-values()"
"(in-list"
" lst_460)))"
"((letrec-values(((for-loop_461)"
"(lambda(id_462"
" lst_463)"
"(if(pair?"
" lst_463)"
"(let-values(((s_464)"
"(unsafe-car"
" lst_463))"
"((rest_465)"
"(unsafe-cdr"
" lst_463)))"
"(let-values(((id_466)"
"(let-values(((id_467)"
" id_462))"
"(let-values(((id_468)"
"(let-values()"
"(let-values(((id164_469)"
"(let-values()"
"(if(let-values(((or-part_470)"
"(if(syntax?$1"
" s_464)"
"(symbol?"
"(syntax-e$1"
" s_464))"
" #f)))"
"(if or-part_470"
" or-part_470"
"(symbol?"
" s_464)))"
" s_464"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_442"
" s_464)))))"
"(cons"
" id164_469"
" id_467)))))"
"(values"
" id_468)))))"
"(if(not"
" #f)"
"(for-loop_461"
" id_466"
" rest_465)"
" id_466)))"
" id_462))))"
" for-loop_461)"
" null"
" lst_460)))))"
"(alt-reverse"
" id_459)))))))))"
"(values"
" spec162_453"
" id163_454))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_442))))))"
"(values"
" all-except159_447"
" spec160_448"
" id161_449))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_442)))))"
"(values"
" #t"
" all-except156_443"
" spec157_444"
" id158_445))))))"
"(loop_162"
"(list"
" spec157_427)"
"(let-values(((or-part_471)"
" top-req_164))"
"(if or-part_471"
" or-part_471"
" req_175))"
" phase-shift_165"
" just-meta_166"
"(adjust-all-except3.1"
" '||"
"(ids->sym-set"
" id158_428))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_191"
" 'prefix-all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_180"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_472"
" prefix-all-except165_473"
" id:prefix166_474"
" spec167_475"
" id168_476)"
"(let-values(((s_491)"
" req_175))"
"(let-values(((orig-s_492)"
" s_491))"
"(let-values(((prefix-all-except165_493"
" id:prefix166_494"
" spec167_495"
" id168_496)"
"(let-values(((s_497)"
"(if(syntax?$1"
" s_491)"
"(syntax-e$1"
" s_491)"
" s_491)))"
"(if(pair?"
" s_497)"
"(let-values(((prefix-all-except169_498)"
"(let-values(((s_502)"
"(car"
" s_497)))"
" s_502))"
"((id:prefix170_499"
" spec171_500"
" id172_501)"
"(let-values(((s_503)"
"(cdr"
" s_497)))"
"(let-values(((s_504)"
"(if(syntax?$1"
" s_503)"
"(syntax-e$1"
" s_503)"
" s_503)))"
"(if(pair?"
" s_504)"
"(let-values(((id:prefix173_505)"
"(let-values(((s_508)"
"(car"
" s_504)))"
"(if(let-values(((or-part_509)"
"(if(syntax?$1"
" s_508)"
"(symbol?"
"(syntax-e$1"
" s_508))"
" #f)))"
"(if or-part_509"
" or-part_509"
"(symbol?"
" s_508)))"
" s_508"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_492"
" s_508))))"
"((spec174_506"
" id175_507)"
"(let-values(((s_510)"
"(cdr"
" s_504)))"
"(let-values(((s_511)"
"(if(syntax?$1"
" s_510)"
"(syntax-e$1"
" s_510)"
" s_510)))"
"(if(pair?"
" s_511)"
"(let-values(((spec176_512)"
"(let-values(((s_514)"
"(car"
" s_511)))"
" s_514))"
"((id177_513)"
"(let-values(((s_515)"
"(cdr"
" s_511)))"
"(let-values(((s_516)"
"(if(syntax?$1"
" s_515)"
"(syntax-e$1"
" s_515)"
" s_515)))"
"(let-values(((flat-s_517)"
"(to-syntax-list.1"
" s_516)))"
"(if(not"
" flat-s_517)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_492))"
"(let-values()"
"(let-values(((id_518)"
"(let-values(((lst_519)"
" flat-s_517))"
"(begin"
"(if(list?"
" lst_519)"
"(void)"
"(let-values()"
"(in-list"
" lst_519)))"
"((letrec-values(((for-loop_520)"
"(lambda(id_521"
" lst_522)"
"(if(pair?"
" lst_522)"
"(let-values(((s_523)"
"(unsafe-car"
" lst_522))"
"((rest_524)"
"(unsafe-cdr"
" lst_522)))"
"(let-values(((id_525)"
"(let-values(((id_526)"
" id_521))"
"(let-values(((id_527)"
"(let-values()"
"(let-values(((id178_528)"
"(let-values()"
"(if(let-values(((or-part_529)"
"(if(syntax?$1"
" s_523)"
"(symbol?"
"(syntax-e$1"
" s_523))"
" #f)))"
"(if or-part_529"
" or-part_529"
"(symbol?"
" s_523)))"
" s_523"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_492"
" s_523)))))"
"(cons"
" id178_528"
" id_526)))))"
"(values"
" id_527)))))"
"(if(not"
" #f)"
"(for-loop_520"
" id_525"
" rest_524)"
" id_525)))"
" id_521))))"
" for-loop_520)"
" null"
" lst_519)))))"
"(alt-reverse"
" id_518)))))))))"
"(values"
" spec176_512"
" id177_513))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_492))))))"
"(values"
" id:prefix173_505"
" spec174_506"
" id175_507))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_492))))))"
"(values"
" prefix-all-except169_498"
" id:prefix170_499"
" spec171_500"
" id172_501))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_492)))))"
"(values"
" #t"
" prefix-all-except165_493"
" id:prefix166_494"
" spec167_495"
" id168_496))))))"
"(loop_162"
"(list"
" spec167_475)"
"(let-values(((or-part_530)"
" top-req_164))"
"(if or-part_530"
" or-part_530"
" req_175))"
" phase-shift_165"
" just-meta_166"
"(adjust-all-except3.1"
"(syntax-e$1"
" id:prefix166_474)"
"(ids->sym-set"
" id168_476))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_191"
" 'rename)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_180"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_531"
" rename179_532"
" spec180_533"
" id:to181_534"
" id:from182_535)"
"(let-values(((s_550)"
" req_175))"
"(let-values(((orig-s_551)"
" s_550))"
"(let-values(((rename179_552"
" spec180_553"
" id:to181_554"
" id:from182_555)"
"(let-values(((s_556)"
"(if(syntax?$1"
" s_550)"
"(syntax-e$1"
" s_550)"
" s_550)))"
"(if(pair?"
" s_556)"
"(let-values(((rename183_557)"
"(let-values(((s_561)"
"(car"
" s_556)))"
" s_561))"
"((spec184_558"
" id:to185_559"
" id:from186_560)"
"(let-values(((s_562)"
"(cdr"
" s_556)))"
"(let-values(((s_563)"
"(if(syntax?$1"
" s_562)"
"(syntax-e$1"
" s_562)"
" s_562)))"
"(if(pair?"
" s_563)"
"(let-values(((spec187_564)"
"(let-values(((s_567)"
"(car"
" s_563)))"
" s_567))"
"((id:to188_565"
" id:from189_566)"
"(let-values(((s_568)"
"(cdr"
" s_563)))"
"(let-values(((s_569)"
"(if(syntax?$1"
" s_568)"
"(syntax-e$1"
" s_568)"
" s_568)))"
"(if(pair?"
" s_569)"
"(let-values(((id:to190_570)"
"(let-values(((s_572)"
"(car"
" s_569)))"
"(if(let-values(((or-part_573)"
"(if(syntax?$1"
" s_572)"
"(symbol?"
"(syntax-e$1"
" s_572))"
" #f)))"
"(if or-part_573"
" or-part_573"
"(symbol?"
" s_572)))"
" s_572"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_551"
" s_572))))"
"((id:from191_571)"
"(let-values(((s_574)"
"(cdr"
" s_569)))"
"(let-values(((s_575)"
"(if(syntax?$1"
" s_574)"
"(syntax-e$1"
" s_574)"
" s_574)))"
"(if(pair?"
" s_575)"
"(let-values(((id:from192_576)"
"(let-values(((s_577)"
"(car"
" s_575)))"
"(if(let-values(((or-part_578)"
"(if(syntax?$1"
" s_577)"
"(symbol?"
"(syntax-e$1"
" s_577))"
" #f)))"
"(if or-part_578"
" or-part_578"
"(symbol?"
" s_577)))"
" s_577"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_551"
" s_577))))"
"(()"
"(let-values(((s_579)"
"(cdr"
" s_575)))"
"(let-values(((s_580)"
"(if(syntax?$1"
" s_579)"
"(syntax-e$1"
" s_579)"
" s_579)))"
"(if(null?"
" s_580)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_551))))))"
"(values"
" id:from192_576))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_551))))))"
"(values"
" id:to190_570"
" id:from191_571))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_551))))))"
"(values"
" spec187_564"
" id:to188_565"
" id:from189_566))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_551))))))"
"(values"
" rename183_557"
" spec184_558"
" id:to185_559"
" id:from186_560))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                         \"bad syntax\""
" orig-s_551)))))"
"(values"
" #t"
" rename179_552"
" spec180_553"
" id:to181_554"
" id:from182_555))))))"
"(loop_162"
"(list"
" spec180_533)"
"(let-values(((or-part_581)"
" top-req_164))"
"(if or-part_581"
" or-part_581"
" req_175))"
" phase-shift_165"
" just-meta_166"
"(adjust-rename4.1"
" id:to181_534"
"(syntax-e$1"
" id:from182_535))"
" #f"
" #f"
" 'path))))"
"(let-values()"
"(let-values(((maybe-mp_582)"
"(syntax->datum$1"
" req_175)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_585)"
"(1/module-path?"
" maybe-mp_582)))"
"(if or-part_585"
" or-part_585"
"(1/resolved-module-path?"
" maybe-mp_582)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad require spec\""
" orig-s_148"
" req_175)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_586)"
" adjust_167))"
"(if or-part_586"
" or-part_586"
"(not"
"(eq?"
" just-meta_166"
" 'all))))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" requires+provides_151"
" #f))"
"(void))"
"(values))))"
"(let-values(((mp_583)"
"(if(1/resolved-module-path?"
" maybe-mp_582)"
"(resolved-module-path->module-path"
" maybe-mp_582)"
" maybe-mp_582)))"
"(let-values(((mpi_584)"
"(let-values(((mp210_588)"
" mp_583)"
"((self211_589)"
" self_152)"
"((declared-submodule-names212_590)"
" declared-submodule-names_156))"
"(module-path->mpi5.1"
" declared-submodule-names212_590"
" #t"
" mp210_588"
" self211_589))))"
"(begin"
"(let-values(((...r/expand/require.rkt:169:9_591)"
" perform-require!76.1)"
"((mpi193_592)"
" mpi_584)"
"((req194_593)"
" req_175)"
"((self195_594)"
" self_152)"
"((temp196_595)"
"(let-values(((or-part_609)"
" req_175))"
"(if or-part_609"
" or-part_609"
" top-req_164)))"
"((m-ns197_596)"
" m-ns_149)"
"((phase-shift198_597)"
" phase-shift_165)"
"((run-phase199_598)"
" run-phase_153)"
"((just-meta200_599)"
" just-meta_166)"
"((adjust201_600)"
" adjust_167)"
"((requires+provides202_601)"
" requires+provides_151)"
"((run?203_602)"
" run?_154)"
"((visit?204_603)"
" visit?_155)"
"((copy-variable-phase-level205_604)"
" copy-variable-phase-level_157)"
"((copy-variable-as-constant?206_605)"
" copy-variable-as-constant?_158)"
"((skip-variable-phase-level207_606)"
" skip-variable-phase-level_159)"
"((initial-require?208_607)"
" initial-require?_160)"
"((who209_608)"
" who_161))"
"(perform-require!74.1"
" adjust201_600"
" #t"
" #f"
" #f"
" copy-variable-as-constant?206_605"
" #t"
" copy-variable-phase-level205_604"
" #t"
" initial-require?208_607"
" #t"
" just-meta200_599"
" #t"
" phase-shift198_597"
" requires+provides202_601"
" #t"
" run-phase199_598"
" run?203_602"
" #t"
" skip-variable-phase-level207_606"
" #t"
" visit?204_603"
" #t"
" who209_608"
" mpi193_592"
" req194_593"
" self195_594"
" temp196_595"
" m-ns197_596))"
"(set! initial-require?_160"
" #f)))))))))))))))))))))))))"
"(values"
" result_179)))))"
"(if(if(not"
"((lambda x_610"
"(not result_177))"
" req_175))"
"(not #f)"
" #f)"
"(for-loop_172"
" result_177"
" rest_176)"
" result_177)))"
" result_173))))"
" for-loop_172)"
" #t"
" lst_171))))))"
" loop_162)"
" reqs_147"
" #f"
" phase-shift_150"
" 'all"
" #f"
" #t"
" #t"
" 'raw)))))))))))))))))))"
"(define-values"
"(ids->sym-set)"
"(lambda(ids_664)"
"(let-values(((lst_665) ids_664))"
"(begin"
"(if(list? lst_665)(void)(let-values()(in-list lst_665)))"
"((letrec-values(((for-loop_666)"
"(lambda(table_667 lst_668)"
"(if(pair? lst_668)"
"(let-values(((id_669)(unsafe-car lst_668))((rest_670)(unsafe-cdr lst_668)))"
"(let-values(((table_671)"
"(let-values(((table_672) table_667))"
"(let-values(((table_673)"
"(let-values()"
"(let-values(((key_674 val_675)"
"(let-values()"
"(values"
"(let-values()(syntax-e$1 id_669))"
" #t))))"
"(hash-set table_672 key_674 val_675)))))"
"(values table_673)))))"
"(if(not #f)(for-loop_666 table_671 rest_670) table_671)))"
" table_667))))"
" for-loop_666)"
" '#hash()"
" lst_665)))))"
"(define-values"
"(perform-initial-require!40.1)"
"(lambda(who33_688 mod-path35_689 self36_690 in-stx37_691 m-ns38_692 requires+provides39_693)"
"(let-values(((mod-path_694) mod-path35_689))"
"(let-values(((self_695) self36_690))"
"(let-values(((in-stx_696) in-stx37_691))"
"(let-values(((m-ns_697) m-ns38_692))"
"(let-values(((requires+provides_698) requires+provides39_693))"
"(let-values(((who_699) who33_688))"
"(let-values()"
"(let-values(((...r/expand/require.rkt:195:2_700) perform-require!76.1)"
"((temp213_701)"
"(let-values(((mod-path224_712) mod-path_694)((self225_713) self_695))"
"(module-path->mpi5.1 #f #f mod-path224_712 self225_713)))"
"((temp214_702) #f)"
"((self215_703) self_695)"
"((in-stx216_704) in-stx_696)"
"((m-ns217_705) m-ns_697)"
"((temp218_706) 0)"
"((temp219_707) 0)"
"((requires+provides220_708) requires+provides_698)"
"((temp221_709) #t)"
"((temp222_710) #t)"
"((who223_711) who_699))"
"(perform-require!74.1"
" #f"
" #f"
" temp221_709"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp222_710"
" #t"
" #f"
" #f"
" temp218_706"
" requires+provides220_708"
" #t"
" temp219_707"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" who223_711"
" temp213_701"
" temp214_702"
" self215_703"
" in-stx216_704"
" m-ns217_705)))))))))))"
"(define-values"
"(lifted/11.1$3 lifted/12.1$3 lifted/13.1$3 lifted/14.1$3 lifted/15.1$3)"
"(make-struct-type"
" 'perform-require!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'perform-require!"
"(case-lambda"
"((self_732 mpi_733 orig-s_734 self_735 in-stx_736 m-ns_737)"
"(apply missing-kw self_732 mpi_733 orig-s_734 self_735 in-stx_736 m-ns_737 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_738 mpi_739 orig-s_740 self_741 in-stx_742 m-ns_743)"
"(apply missing-kw self_738 mpi_739 orig-s_740 self_741 in-stx_742 m-ns_743 null)))))"
"(define-values"
"(perform-require!74.1)"
"(lambda(adjust46_744"
" adjust59_745"
" can-be-shadowed?50_746"
" can-be-shadowed?63_747"
" copy-variable-as-constant?53_748"
" copy-variable-as-constant?66_749"
" copy-variable-phase-level52_750"
" copy-variable-phase-level65_751"
" initial-require?51_752"
" initial-require?64_753"
" just-meta45_754"
" just-meta58_755"
" phase-shift43_756"
" requires+provides47_757"
" requires+provides60_758"
" run-phase44_759"
" run?49_760"
" run?62_761"
" skip-variable-phase-level54_762"
" skip-variable-phase-level67_763"
" visit?48_764"
" visit?61_765"
" who55_766"
" mpi69_767"
" orig-s70_768"
" self71_769"
" in-stx72_770"
" m-ns73_771)"
"(let-values(((mpi_772) mpi69_767))"
"(let-values(((orig-s_773) orig-s70_768))"
"(let-values()"
"(let-values(((in-stx_775) in-stx72_770))"
"(let-values(((m-ns_776) m-ns73_771))"
"(let-values(((phase-shift_777) phase-shift43_756))"
"(let-values(((run-phase_778) run-phase44_759))"
"(let-values(((just-meta_779)(if just-meta58_755 just-meta45_754 'all)))"
"(let-values(((adjust_780)(if adjust59_745 adjust46_744 #f)))"
"(let-values(((requires+provides_781)(if requires+provides60_758 requires+provides47_757 #f)))"
"(let-values(((visit?_782)(if visit?61_765 visit?48_764 #t)))"
"(let-values(((run?_783)(if run?62_761 run?49_760 #f)))"
"(let-values(((can-be-shadowed?_784)(if can-be-shadowed?63_747 can-be-shadowed?50_746 #f)))"
"(let-values(((initial-require?_785)"
"(if initial-require?64_753 initial-require?51_752 #f)))"
"(let-values(((copy-variable-phase-level_786)"
"(if copy-variable-phase-level65_751 copy-variable-phase-level52_750 #f)))"
"(let-values(((copy-variable-as-constant?_787)"
"(if copy-variable-as-constant?66_749"
" copy-variable-as-constant?53_748"
" #f)))"
"(let-values(((skip-variable-phase-level_788)"
"(if skip-variable-phase-level67_763"
" skip-variable-phase-level54_762"
" #f)))"
"(let-values(((who_789) who55_766))"
"(let-values()"
"(let-values()"
"(let-values(((module-name_790)(1/module-path-index-resolve mpi_772 #t)))"
"(let-values(((bind-in-stx_791)"
"(if(adjust-rename? adjust_780)"
"(adjust-rename-to-id adjust_780)"
" in-stx_775)))"
"(let-values(((done-syms_792)(if adjust_780(make-hash) #f)))"
"(let-values(((m_793)(namespace->module m-ns_776 module-name_790)))"
"(let-values((()"
"(begin"
"(if m_793"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'require"
" module-name_790)))"
"(values))))"
"(let-values(((interned-mpi_794)"
"(if requires+provides_781"
"(add-required-module!"
" requires+provides_781"
" mpi_772"
" phase-shift_777"
"(module-cross-phase-persistent? m_793))"
" mpi_772)))"
"(let-values((()"
"(begin"
"(if visit?_782"
"(let-values()"
"(let-values(((m-ns239_801) m-ns_776)"
"((interned-mpi240_802)"
" interned-mpi_794)"
"((phase-shift241_803)"
" phase-shift_777)"
"((run-phase242_804)"
" run-phase_778))"
"(namespace-module-visit!102.1"
" run-phase242_804"
" #t"
" m-ns239_801"
" interned-mpi240_802"
" phase-shift241_803)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if run?_783"
"(let-values()"
"(let-values(((m-ns243_806) m-ns_776)"
"((interned-mpi244_807)"
" interned-mpi_794)"
"((phase-shift245_808)"
" phase-shift_777)"
"((run-phase246_809)"
" run-phase_778))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" run-phase246_809"
" #t"
" #f"
" #f"
" #f"
" #f"
" m-ns243_806"
" interned-mpi244_807"
" phase-shift245_808)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(not"
"(let-values(((or-part_810)"
" visit?_782))"
"(if or-part_810"
" or-part_810"
" run?_783)))"
"(let-values()"
"(let-values(((m-ns247_812) m-ns_776)"
"((interned-mpi248_813)"
" interned-mpi_794)"
"((phase-shift249_814)"
" phase-shift_777)"
"((run-phase250_815)"
" run-phase_778))"
"(namespace-module-make-available!110.1"
" run-phase250_815"
" #t"
" m-ns247_812"
" interned-mpi248_813"
" phase-shift249_814)))"
"(void))"
"(values))))"
"(let-values(((can-bulk-bind?_795)"
"(if(let-values(((or-part_816)"
"(not adjust_780)))"
"(if or-part_816"
" or-part_816"
"(let-values(((or-part_817)"
"(adjust-prefix?"
" adjust_780)))"
"(if or-part_817"
" or-part_817"
"(adjust-all-except?"
" adjust_780)))))"
"(not skip-variable-phase-level_788)"
" #f)))"
"(let-values(((bulk-prefix_796)"
"(if(adjust-prefix? adjust_780)"
"(let-values()"
"(adjust-prefix-sym adjust_780))"
"(if(adjust-all-except? adjust_780)"
"(let-values()"
"(adjust-all-except-prefix-sym"
" adjust_780))"
"(let-values() #f)))))"
"(let-values(((bulk-excepts_797)"
"(if(adjust-all-except? adjust_780)"
"(let-values()"
"(adjust-all-except-syms adjust_780))"
"(let-values() '#hasheq()))))"
"(let-values(((update-nominals-box_798)"
"(if can-bulk-bind?_795"
"(box null)"
" #f)))"
"(let-values((()"
"(begin"
"(let-values(((...r/expand/require.rkt:255:3_818)"
" bind-all-provides!100.1)"
"((m226_819) m_793)"
"((bind-in-stx227_820)"
" bind-in-stx_791)"
"((phase-shift228_821)"
" phase-shift_777)"
"((m-ns229_822)"
" m-ns_776)"
"((interned-mpi230_823)"
" interned-mpi_794)"
"((orig-s231_824)"
" orig-s_773)"
"((temp232_825)"
"(if(adjust-only?"
" adjust_780)"
"(let-values()"
"(set->list"
"(adjust-only-syms"
" adjust_780)))"
"(if(adjust-rename?"
" adjust_780)"
"(let-values()"
"(list"
"(adjust-rename-from-sym"
" adjust_780)))"
"(let-values()"
" #f))))"
"((just-meta233_826)"
" just-meta_779)"
"((can-bulk-bind?234_827)"
" can-bulk-bind?_795)"
"((bulk-prefix235_828)"
" bulk-prefix_796)"
"((bulk-excepts236_829)"
" bulk-excepts_797)"
"((temp237_830)"
"(if requires+provides_781"
"(if can-bulk-bind?_795"
"(lambda(provides_832"
" provide-phase-level_833)"
"(let-values(((requires+provides251_835)"
" requires+provides_781)"
"((bind-in-stx252_836)"
" bind-in-stx_791)"
"((temp253_837)"
"(module-self"
" m_793))"
"((mpi254_838)"
" mpi_772)"
"((phase-shift255_839)"
" phase-shift_777)"
"((provides256_840)"
" provides_832)"
"((provide-phase-level257_841)"
" provide-phase-level_833)"
"((bulk-prefix258_842)"
" bulk-prefix_796)"
"((bulk-excepts259_843)"
" bulk-excepts_797)"
"((temp260_844)"
"(if(positive?"
"(hash-count"
" bulk-excepts_797))"
" done-syms_792"
" #f))"
"((can-be-shadowed?261_845)"
" can-be-shadowed?_784)"
"((temp262_846)"
"(not"
" initial-require?_785))"
"((orig-s263_847)"
" orig-s_773)"
"((update-nominals-box264_848)"
" update-nominals-box_798)"
"((who265_849)"
" who_789))"
"(add-bulk-required-ids!53.1"
" update-nominals-box264_848"
" can-be-shadowed?261_845"
" temp262_846"
" bulk-excepts259_843"
" orig-s263_847"
" bulk-prefix258_842"
" temp260_844"
" who265_849"
" requires+provides251_835"
" bind-in-stx252_836"
" temp253_837"
" mpi254_838"
" phase-shift255_839"
" provides256_840"
" provide-phase-level257_841)))"
" #f)"
" #f))"
"((temp238_831)"
"(if(let-values(((or-part_850)"
"(not"
" can-bulk-bind?_795)))"
"(if or-part_850"
" or-part_850"
" copy-variable-phase-level_786))"
"(lambda(binding_851"
" as-transformer?_852)"
"(let-values(((sym_853)"
"(module-binding-nominal-sym"
" binding_851)))"
"(let-values(((provide-phase_854)"
"(module-binding-nominal-phase"
" binding_851)))"
"(let-values(((adjusted-sym_855)"
"(if(if skip-variable-phase-level_788"
"(if(not"
" as-transformer?_852)"
"(equal?"
" provide-phase_854"
" skip-variable-phase-level_788)"
" #f)"
" #f)"
"(let-values()"
" #f)"
"(if(not"
" adjust_780)"
"(let-values()"
" sym_853)"
"(if(adjust-only?"
" adjust_780)"
"(let-values()"
"(if(set-member?"
"(adjust-only-syms"
" adjust_780)"
" sym_853)"
"(if(hash-set!"
" done-syms_792"
" sym_853"
" #t)"
" sym_853"
" #f)"
" #f))"
"(if(adjust-prefix?"
" adjust_780)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                      \"~a~a\""
"(adjust-prefix-sym"
" adjust_780)"
" sym_853)))"
"(if(adjust-all-except?"
" adjust_780)"
"(let-values()"
"(if(not"
"(if(set-member?"
"(adjust-all-except-syms"
" adjust_780)"
" sym_853)"
"(hash-set!"
" done-syms_792"
" sym_853"
" #t)"
" #f))"
"(string->symbol"
"(format"
"                                                                                                                                          \"~a~a\""
"(adjust-all-except-prefix-sym"
" adjust_780)"
" sym_853))"
" #f))"
"(if(adjust-rename?"
" adjust_780)"
"(let-values()"
"(if(eq?"
" sym_853"
"(adjust-rename-from-sym"
" adjust_780))"
"(if(hash-set!"
" done-syms_792"
" sym_853"
" #t)"
"(adjust-rename-to-id"
" adjust_780)"
" #f)"
" #f))"
"(void)))))))))"
"(begin"
"(if(if adjusted-sym_855"
" requires+provides_781"
" #f)"
"(let-values()"
"(let-values(((s_856)"
"(datum->syntax$1"
" bind-in-stx_791"
" adjusted-sym_855)))"
"(let-values(((bind-phase_857)"
"(phase+"
" phase-shift_777"
" provide-phase_854)))"
"(begin"
"(if initial-require?_785"
"(void)"
"(let-values()"
"(let-values(((temp272_859)"
" #t)"
"((requires+provides273_860)"
" requires+provides_781)"
"((s274_861)"
" s_856)"
"((bind-phase275_862)"
" bind-phase_857)"
"((binding276_863)"
" binding_851)"
"((orig-s277_864)"
" orig-s_773)"
"((temp278_865)"
" #t)"
"((who279_866)"
" who_789))"
"(check-not-defined87.1"
" #f"
" #f"
" temp272_859"
" #t"
" orig-s277_864"
" temp278_865"
" #t"
" binding276_863"
" #t"
" who279_866"
" requires+provides273_860"
" s274_861"
" bind-phase275_862))))"
"(let-values(((requires+provides266_868)"
" requires+provides_781)"
"((s267_869)"
" s_856)"
"((bind-phase268_870)"
" bind-phase_857)"
"((binding269_871)"
" binding_851)"
"((can-be-shadowed?270_872)"
" can-be-shadowed?_784)"
"((as-transformer?271_873)"
" as-transformer?_852))"
"(add-defined-or-required-id!13.1"
" as-transformer?271_873"
" can-be-shadowed?270_872"
" #t"
" requires+provides266_868"
" s267_869"
" bind-phase268_870"
" binding269_871))))))"
"(void))"
"(if(if adjusted-sym_855"
"(if copy-variable-phase-level_786"
"(if(not"
" as-transformer?_852)"
"(equal?"
" provide-phase_854"
" copy-variable-phase-level_786)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(copy-namespace-value"
" m-ns_776"
" adjusted-sym_855"
" binding_851"
" copy-variable-phase-level_786"
" phase-shift_777"
" copy-variable-as-constant?_787))"
"(void))"
" adjusted-sym_855)))))"
" #f)))"
"(bind-all-provides!98.1"
" temp237_830"
" bulk-excepts236_829"
" bulk-prefix235_828"
" can-bulk-bind?234_827"
" temp238_831"
" orig-s231_824"
" just-meta233_826"
" temp232_825"
" m226_819"
" bind-in-stx227_820"
" phase-shift228_821"
" m-ns229_822"
" interned-mpi230_823))"
"(values))))"
"(let-values((()"
"(begin"
"(if update-nominals-box_798"
"(let-values()"
"(begin"
"(let-values(((lst_874)"
"(unbox"
" update-nominals-box_798)))"
"(begin"
"(if(list? lst_874)"
"(void)"
"(let-values()"
"(in-list"
" lst_874)))"
"((letrec-values(((for-loop_875)"
"(lambda(lst_876)"
"(if(pair?"
" lst_876)"
"(let-values(((update!_877)"
"(unsafe-car"
" lst_876))"
"((rest_878)"
"(unsafe-cdr"
" lst_876)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(update!_877))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_875"
" rest_878)"
"(values))))"
"(values)))))"
" for-loop_875)"
" lst_874)))"
"(void)))"
"(void))"
"(values))))"
"(let-values(((need-syms_799)"
"(if(adjust-only? adjust_780)"
"(let-values()"
"(adjust-only-syms"
" adjust_780))"
"(if(adjust-all-except?"
" adjust_780)"
"(let-values()"
"(adjust-all-except-syms"
" adjust_780))"
"(if(adjust-rename?"
" adjust_780)"
"(let-values()"
"(set"
"(adjust-rename-from-sym"
" adjust_780)))"
"(let-values() #f))))))"
"(if(if need-syms_799"
"(not"
"(="
"(set-count need-syms_799)"
"(hash-count done-syms_792)))"
" #f)"
"(let-values()"
"(begin"
"(let-values(((ht_879) need-syms_799))"
"(begin"
"(if((lambda(ht_880)"
"(if(hash? ht_880)"
"(immutable? ht_880)"
" #f))"
" ht_879)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_879)))"
"((letrec-values(((for-loop_881)"
"(lambda(i_882)"
"(if i_882"
"(let-values(((sym_883)"
"(unsafe-immutable-hash-iterate-key"
" ht_879"
" i_882)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(hash-ref"
" done-syms_792"
" sym_883"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" who_789"
"                                                                                                                                                       \"not in nested spec\""
" orig-s_773"
" sym_883))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_881"
"(unsafe-immutable-hash-iterate-next"
" ht_879"
" i_882))"
"(values))))"
"(values)))))"
" for-loop_881)"
"(unsafe-immutable-hash-iterate-first"
" ht_879))))"
"(void)))"
"(void))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack75.1)"
"(lambda(given-kws_884 given-args_885 mpi69_886 orig-s70_887 self71_888 in-stx72_889 m-ns73_890)"
"(let-values(((adjust59_891)(if(pair? given-kws_884)(eq? '#:adjust(car given-kws_884)) #f)))"
"(let-values(((adjust46_892)(if adjust59_891(car given-args_885)(void)))"
"((given-kws_893)(if adjust59_891(cdr given-kws_884) given-kws_884))"
"((given-args_894)(if adjust59_891(cdr given-args_885) given-args_885)))"
"(let-values(((can-be-shadowed?63_895)"
"(if(pair? given-kws_893)(eq? '#:can-be-shadowed?(car given-kws_893)) #f)))"
"(let-values(((can-be-shadowed?50_896)(if can-be-shadowed?63_895(car given-args_894)(void)))"
"((given-kws_897)(if can-be-shadowed?63_895(cdr given-kws_893) given-kws_893))"
"((given-args_898)(if can-be-shadowed?63_895(cdr given-args_894) given-args_894)))"
"(let-values(((copy-variable-as-constant?66_899)"
"(if(pair? given-kws_897)(eq? '#:copy-variable-as-constant?(car given-kws_897)) #f)))"
"(let-values(((copy-variable-as-constant?53_900)"
"(if copy-variable-as-constant?66_899(car given-args_898)(void)))"
"((given-kws_901)(if copy-variable-as-constant?66_899(cdr given-kws_897) given-kws_897))"
"((given-args_902)(if copy-variable-as-constant?66_899(cdr given-args_898) given-args_898)))"
"(let-values(((copy-variable-phase-level65_903)"
"(if(pair? given-kws_901)(eq? '#:copy-variable-phase-level(car given-kws_901)) #f)))"
"(let-values(((copy-variable-phase-level52_904)"
"(if copy-variable-phase-level65_903(car given-args_902)(void)))"
"((given-kws_905)(if copy-variable-phase-level65_903(cdr given-kws_901) given-kws_901))"
"((given-args_906)"
"(if copy-variable-phase-level65_903(cdr given-args_902) given-args_902)))"
"(let-values(((initial-require?64_907)"
"(if(pair? given-kws_905)(eq? '#:initial-require?(car given-kws_905)) #f)))"
"(let-values(((initial-require?51_908)(if initial-require?64_907(car given-args_906)(void)))"
"((given-kws_909)(if initial-require?64_907(cdr given-kws_905) given-kws_905))"
"((given-args_910)(if initial-require?64_907(cdr given-args_906) given-args_906)))"
"(let-values(((just-meta58_911)"
"(if(pair? given-kws_909)(eq? '#:just-meta(car given-kws_909)) #f)))"
"(let-values(((just-meta45_912)(if just-meta58_911(car given-args_910)(void)))"
"((given-kws_913)(if just-meta58_911(cdr given-kws_909) given-kws_909))"
"((given-args_914)(if just-meta58_911(cdr given-args_910) given-args_910)))"
"(let-values(((phase-shift43_915)(car given-args_914))"
"((given-kws_916)(cdr given-kws_913))"
"((given-args_917)(cdr given-args_914)))"
"(let-values(((requires+provides60_918)"
"(if(pair? given-kws_916)"
"(eq? '#:requires+provides(car given-kws_916))"
" #f)))"
"(let-values(((requires+provides47_919)"
"(if requires+provides60_918(car given-args_917)(void)))"
"((given-kws_920)"
"(if requires+provides60_918(cdr given-kws_916) given-kws_916))"
"((given-args_921)"
"(if requires+provides60_918(cdr given-args_917) given-args_917)))"
"(let-values(((run-phase44_922)(car given-args_921))"
"((given-kws_923)(cdr given-kws_920))"
"((given-args_924)(cdr given-args_921)))"
"(let-values(((run?62_925)"
"(if(pair? given-kws_923)(eq? '#:run?(car given-kws_923)) #f)))"
"(let-values(((run?49_926)(if run?62_925(car given-args_924)(void)))"
"((given-kws_927)(if run?62_925(cdr given-kws_923) given-kws_923))"
"((given-args_928)"
"(if run?62_925(cdr given-args_924) given-args_924)))"
"(let-values(((skip-variable-phase-level67_929)"
"(if(pair? given-kws_927)"
"(eq? '#:skip-variable-phase-level(car given-kws_927))"
" #f)))"
"(let-values(((skip-variable-phase-level54_930)"
"(if skip-variable-phase-level67_929"
"(car given-args_928)"
"(void)))"
"((given-kws_931)"
"(if skip-variable-phase-level67_929"
"(cdr given-kws_927)"
" given-kws_927))"
"((given-args_932)"
"(if skip-variable-phase-level67_929"
"(cdr given-args_928)"
" given-args_928)))"
"(let-values(((visit?61_933)"
"(if(pair? given-kws_931)"
"(eq? '#:visit?(car given-kws_931))"
" #f)))"
"(let-values(((visit?48_934)"
"(if visit?61_933(car given-args_932)(void)))"
"((given-kws_935)"
"(if visit?61_933(cdr given-kws_931) given-kws_931))"
"((given-args_936)"
"(if visit?61_933(cdr given-args_932) given-args_932)))"
"(let-values(((who55_937)(car given-args_936)))"
"(perform-require!74.1"
" adjust46_892"
" adjust59_891"
" can-be-shadowed?50_896"
" can-be-shadowed?63_895"
" copy-variable-as-constant?53_900"
" copy-variable-as-constant?66_899"
" copy-variable-phase-level52_904"
" copy-variable-phase-level65_903"
" initial-require?51_908"
" initial-require?64_907"
" just-meta45_912"
" just-meta58_911"
" phase-shift43_915"
" requires+provides47_919"
" requires+provides60_918"
" run-phase44_922"
" run?49_926"
" run?62_925"
" skip-variable-phase-level54_930"
" skip-variable-phase-level67_929"
" visit?48_934"
" visit?61_933"
" who55_937"
" mpi69_886"
" orig-s70_887"
" self71_888"
" in-stx72_889"
" m-ns73_890))))))))))))))))))))))))))"
"(define-values"
"(perform-require!76.1)"
"(lifted/12.1$3"
"(lambda(given-kws_938 given-argc_939)"
"(if(= given-argc_939 7)"
"(subsets?"
" '(#:phase-shift #:run-phase #:who)"
" given-kws_938"
" '(#:adjust"
" #:can-be-shadowed?"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who))"
" #f))"
"(case-lambda"
"((given-kws_940 given-args_941 mpi_942 orig-s_943 self_944 in-stx_945 m-ns_946)"
"(unpack75.1 given-kws_940 given-args_941 mpi_942 orig-s_943 self_944 in-stx_945 m-ns_946)))"
" '(#:phase-shift #:run-phase #:who)"
" '(#:adjust"
" #:can-be-shadowed?"
" #:copy-variable-as-constant?"
" #:copy-variable-phase-level"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:skip-variable-phase-level"
" #:visit?"
" #:who)))"
"(define-values"
"(lifted/16.1$2 lifted/17.1$2 lifted/18.1$2 lifted/19.1$2 lifted/20.1$2)"
"(make-struct-type"
" 'bind-all-provides!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'bind-all-provides!"
"(case-lambda"
"((self_947 m_948 in-stx_949 phase-shift_950 ns_951 mpi_952)"
"(apply missing-kw self_947 m_948 in-stx_949 phase-shift_950 ns_951 mpi_952 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_953 m_954 in-stx_955 phase-shift_956 ns_957 mpi_958)"
"(apply missing-kw self_953 m_954 in-stx_955 phase-shift_956 ns_957 mpi_958 null)))))"
"(define-values"
"(bind-all-provides!98.1)"
"(lambda(bulk-callback84_959"
" bulk-excepts82_960"
" bulk-prefix81_961"
" can-bulk?80_962"
" filter83_963"
" in77_964"
" just-meta79_965"
" only78_966"
" m93_967"
" in-stx94_968"
" phase-shift95_969"
" ns96_970"
" mpi97_971)"
"(let-values(((m_972) m93_967))"
"(let-values(((in-stx_973) in-stx94_968))"
"(let-values(((phase-shift_974) phase-shift95_969))"
"(let-values(((ns_975) ns96_970))"
"(let-values(((mpi_976) mpi97_971))"
"(let-values(((orig-s_977) in77_964))"
"(let-values(((only-syms_978) only78_966))"
"(let-values(((just-meta_979) just-meta79_965))"
"(let-values(((can-bulk?_980) can-bulk?80_962))"
"(let-values(((bulk-prefix_981) bulk-prefix81_961))"
"(let-values(((bulk-excepts_982) bulk-excepts82_960))"
"(let-values(((filter_983) filter83_963))"
"(let-values(((bulk-callback_984) bulk-callback84_959))"
"(let-values()"
"(let-values(((self_985)(module-self m_972)))"
"(begin"
"(let-values(((ht_986)(module-provides m_972)))"
"(begin"
"(if((lambda(ht_987)(hash? ht_987)) ht_986)"
"(void)"
"(let-values()(default-in-hash ht_986)))"
"((letrec-values(((for-loop_988)"
"(lambda(i_989)"
"(if i_989"
"(let-values(((provide-phase-level_990 provides_991)"
"(hash-iterate-key+value ht_986 i_989)))"
"(let-values((()"
"(let-values()"
"(if(let-values(((or-part_992)"
"(eq?"
" just-meta_979"
" 'all)))"
"(if or-part_992"
" or-part_992"
"(eqv?"
" just-meta_979"
" provide-phase-level_990)))"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_993)"
"(phase+"
" phase-shift_974"
" provide-phase-level_990)))"
"(begin"
"(if bulk-callback_984"
"(let-values()"
"(bulk-callback_984"
" provides_991"
" provide-phase-level_990))"
"(void))"
"(if filter_983"
"(let-values()"
"(begin"
"(let-values(((lst_994)"
"(let-values(((or-part_995)"
" only-syms_978))"
"(if or-part_995"
" or-part_995"
"(hash-keys"
" provides_991)))))"
"(begin"
"(if(list?"
" lst_994)"
"(void)"
"(let-values()"
"(in-list"
" lst_994)))"
"((letrec-values(((for-loop_996)"
"(lambda(lst_997)"
"(if(pair?"
" lst_997)"
"(let-values(((sym_998)"
"(unsafe-car"
" lst_997))"
"((rest_999)"
"(unsafe-cdr"
" lst_997)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((binding/p_1000)"
"(hash-ref"
" provides_991"
" sym_998"
" #f)))"
"(if binding/p_1000"
"(let-values()"
"(let-values(((b_1001)"
"(let-values(((binding/p280_1003)"
" binding/p_1000)"
"((sym281_1004)"
" sym_998)"
"((self282_1005)"
" self_985)"
"((mpi283_1006)"
" mpi_976)"
"((provide-phase-level284_1007)"
" provide-phase-level_990)"
"((phase-shift285_1008)"
" phase-shift_974))"
"(provide-binding-to-require-binding11.1"
" mpi283_1006"
" phase-shift285_1008"
" provide-phase-level284_1007"
" self282_1005"
" binding/p280_1003"
" sym281_1004))))"
"(let-values(((sym_1009)"
"(filter_983"
" b_1001"
"(provided-as-transformer?"
" binding/p_1000))))"
"(if(if sym_1009"
"(not"
" can-bulk?_980)"
" #f)"
"(let-values()"
"(let-values(((temp286_1010)"
"(datum->syntax$1"
" in-stx_973"
" sym_1009))"
"((b287_1011)"
" b_1001)"
"((phase288_1012)"
" phase_993))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" temp286_1010"
" b287_1011"
" phase288_1012)))"
"(void)))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_996"
" rest_999)"
"(values))))"
"(values)))))"
" for-loop_996)"
" lst_994)))"
"(void)))"
"(void))"
"(if can-bulk?_980"
"(let-values()"
"(let-values(((in-stx289_1014)"
" in-stx_973)"
"((temp290_1015)"
"(bulk-binding14.1"
"(if(not"
" bulk-prefix_981)"
"(if(zero?"
"(hash-count"
" bulk-excepts_982))"
" provides_991"
" #f)"
" #f)"
" bulk-prefix_981"
" bulk-excepts_982"
" self_985"
" mpi_976"
" provide-phase-level_990"
" phase-shift_974"
"(namespace-bulk-binding-registry"
" ns_975)))"
"((phase291_1016)"
" phase_993)"
"((orig-s292_1017)"
" orig-s_977))"
"(add-bulk-binding!25.1"
" orig-s292_1017"
" #t"
" in-stx289_1014"
" temp290_1015"
" phase291_1016)))"
"(void)))))"
"(values)))))"
"(values)))"
"(values)))))"
"(if(not #f)"
"(for-loop_988(hash-iterate-next ht_986 i_989))"
"(values))))"
"(values)))))"
" for-loop_988)"
"(hash-iterate-first ht_986))))"
"(void)))))))))))))))))))"
"(define-values"
"(unpack99.1)"
"(lambda(given-kws_1018 given-args_1019 m93_1020 in-stx94_1021 phase-shift95_1022 ns96_1023 mpi97_1024)"
"(let-values(((bulk-callback84_1025)(car given-args_1019))"
"((given-kws_1026)(cdr given-kws_1018))"
"((given-args_1027)(cdr given-args_1019)))"
"(let-values(((bulk-excepts82_1028)(car given-args_1027))"
"((given-kws_1029)(cdr given-kws_1026))"
"((given-args_1030)(cdr given-args_1027)))"
"(let-values(((bulk-prefix81_1031)(car given-args_1030))"
"((given-kws_1032)(cdr given-kws_1029))"
"((given-args_1033)(cdr given-args_1030)))"
"(let-values(((can-bulk?80_1034)(car given-args_1033))"
"((given-kws_1035)(cdr given-kws_1032))"
"((given-args_1036)(cdr given-args_1033)))"
"(let-values(((filter83_1037)(car given-args_1036))"
"((given-kws_1038)(cdr given-kws_1035))"
"((given-args_1039)(cdr given-args_1036)))"
"(let-values(((in77_1040)(car given-args_1039))"
"((given-kws_1041)(cdr given-kws_1038))"
"((given-args_1042)(cdr given-args_1039)))"
"(let-values(((just-meta79_1043)(car given-args_1042))"
"((given-kws_1044)(cdr given-kws_1041))"
"((given-args_1045)(cdr given-args_1042)))"
"(let-values(((only78_1046)(car given-args_1045)))"
"(bind-all-provides!98.1"
" bulk-callback84_1025"
" bulk-excepts82_1028"
" bulk-prefix81_1031"
" can-bulk?80_1034"
" filter83_1037"
" in77_1040"
" just-meta79_1043"
" only78_1046"
" m93_1020"
" in-stx94_1021"
" phase-shift95_1022"
" ns96_1023"
" mpi97_1024)))))))))))"
"(define-values"
"(bind-all-provides!100.1)"
"(lifted/17.1$2"
"(lambda(given-kws_1047 given-argc_1048)"
"(if(= given-argc_1048 7)"
"(let-values(((l2_1049) given-kws_1047))"
"(if(pair? l2_1049)"
"(if(eq?(car l2_1049) '#:bulk-callback)"
"(let-values(((l2_1050)(cdr l2_1049)))"
"(if(pair? l2_1050)"
"(if(eq?(car l2_1050) '#:bulk-excepts)"
"(let-values(((l2_1051)(cdr l2_1050)))"
"(if(pair? l2_1051)"
"(if(eq?(car l2_1051) '#:bulk-prefix)"
"(let-values(((l2_1052)(cdr l2_1051)))"
"(if(pair? l2_1052)"
"(if(eq?(car l2_1052) '#:can-bulk?)"
"(let-values(((l2_1053)(cdr l2_1052)))"
"(if(pair? l2_1053)"
"(if(eq?(car l2_1053) '#:filter)"
"(let-values(((l2_1054)(cdr l2_1053)))"
"(if(pair? l2_1054)"
"(if(eq?(car l2_1054) '#:in)"
"(let-values(((l2_1055)(cdr l2_1054)))"
"(if(pair? l2_1055)"
"(if(eq?(car l2_1055) '#:just-meta)"
"(let-values(((l2_1056)(cdr l2_1055)))"
"(if(pair? l2_1056)"
"(if(eq?(car l2_1056) '#:only)(null?(cdr l2_1056)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1057 given-args_1058 m_1059 in-stx_1060 phase-shift_1061 ns_1062 mpi_1063)"
"(unpack99.1 given-kws_1057 given-args_1058 m_1059 in-stx_1060 phase-shift_1061 ns_1062 mpi_1063)))"
" '(#:bulk-callback #:bulk-excepts #:bulk-prefix #:can-bulk? #:filter #:in #:just-meta #:only)"
" '(#:bulk-callback #:bulk-excepts #:bulk-prefix #:can-bulk? #:filter #:in #:just-meta #:only)))"
"(define-values"
"(require-spec-shift-for-syntax)"
"(lambda(req_1064)"
"(let-values(((rebuild-req_1065)"
"(lambda(req_1067 new-req_1068)(datum->syntax$1 req_1067 new-req_1068 req_1067 req_1067))))"
"(letrec-values(((loop_1066)"
"(lambda(shifted?_1069)"
"(lambda(req_1070)"
"(let-values(((fm_1071)"
"(if(pair?(syntax-e$1 req_1070))"
"(if(identifier?(car(syntax-e$1 req_1070)))"
"(syntax-e$1(car(syntax-e$1 req_1070)))"
" #f)"
" #f)))"
"(let-values(((tmp_1072) fm_1071))"
"(if(equal? tmp_1072 'for-meta)"
"(let-values()"
"(let-values(((ok?_1073 for-meta293_1074 phase-level294_1075 spec295_1076)"
"(let-values(((s_1090) req_1070))"
"(let-values(((orig-s_1091) s_1090))"
"(let-values(((for-meta293_1092 phase-level294_1093 spec295_1094)"
"(let-values(((s_1095)"
"(if(syntax?$1 s_1090)"
"(syntax-e$1 s_1090)"
" s_1090)))"
"(if(pair? s_1095)"
"(let-values(((for-meta296_1096)"
"(let-values(((s_1099)"
"(car s_1095)))"
" s_1099))"
"((phase-level297_1097 spec298_1098)"
"(let-values(((s_1100)"
"(cdr s_1095)))"
"(let-values(((s_1101)"
"(if(syntax?$1"
" s_1100)"
"(syntax-e$1"
" s_1100)"
" s_1100)))"
"(if(pair? s_1101)"
"(let-values(((phase-level299_1102)"
"(let-values(((s_1104)"
"(car"
" s_1101)))"
" s_1104))"
"((spec300_1103)"
"(let-values(((s_1105)"
"(cdr"
" s_1101)))"
"(let-values(((s_1106)"
"(if(syntax?$1"
" s_1105)"
"(syntax-e$1"
" s_1105)"
" s_1105)))"
"(let-values(((flat-s_1107)"
"(to-syntax-list.1"
" s_1106)))"
"(if(not"
" flat-s_1107)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                    \"bad syntax\""
" orig-s_1091))"
"(let-values()"
" flat-s_1107)))))))"
"(values"
" phase-level299_1102"
" spec300_1103))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_1091))))))"
"(values"
" for-meta296_1096"
" phase-level297_1097"
" spec298_1098))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_1091)))))"
"(values"
" #t"
" for-meta293_1092"
" phase-level294_1093"
" spec295_1094))))))"
"(let-values(((p_1089)(syntax-e$1 phase-level294_1075)))"
"(begin"
"(if(phase? p_1089)"
"(void)"
"                                           (let-values () (raise-syntax-error$1 #f \"bad phase\" req_1070)))"
"(rebuild-req_1065"
" req_1070"
"(list*"
" for-meta293_1074"
"(phase+ p_1089 1)"
"(map2(loop_1066 #t) spec295_1076)))))))"
"(if(equal? tmp_1072 'for-syntax)"
"(let-values()"
"(let-values(((ok?_1108 for-syntax301_1109 spec302_1110)"
"(let-values(((s_1121) req_1070))"
"(let-values(((orig-s_1122) s_1121))"
"(let-values(((for-syntax301_1123 spec302_1124)"
"(let-values(((s_1125)"
"(if(syntax?$1 s_1121)"
"(syntax-e$1 s_1121)"
" s_1121)))"
"(if(pair? s_1125)"
"(let-values(((for-syntax303_1126)"
"(let-values(((s_1128)"
"(car s_1125)))"
" s_1128))"
"((spec304_1127)"
"(let-values(((s_1129)"
"(cdr s_1125)))"
"(let-values(((s_1130)"
"(if(syntax?$1"
" s_1129)"
"(syntax-e$1"
" s_1129)"
" s_1129)))"
"(let-values(((flat-s_1131)"
"(to-syntax-list.1"
" s_1130)))"
"(if(not flat-s_1131)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_1122))"
"(let-values()"
" flat-s_1131)))))))"
"(values for-syntax303_1126 spec304_1127))"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_1122)))))"
"(values #t for-syntax301_1123 spec302_1124))))))"
"(rebuild-req_1065"
" req_1070"
"(list* 'for-meta 2(map2(loop_1066 #t) spec302_1110)))))"
"(if(equal? tmp_1072 'for-template)"
"(let-values()"
"(let-values(((ok?_1132 for-template305_1133 spec306_1134)"
"(let-values(((s_1145) req_1070))"
"(let-values(((orig-s_1146) s_1145))"
"(let-values(((for-template305_1147 spec306_1148)"
"(let-values(((s_1149)"
"(if(syntax?$1 s_1145)"
"(syntax-e$1 s_1145)"
" s_1145)))"
"(if(pair? s_1149)"
"(let-values(((for-template307_1150)"
"(let-values(((s_1152)"
"(car s_1149)))"
" s_1152))"
"((spec308_1151)"
"(let-values(((s_1153)"
"(cdr s_1149)))"
"(let-values(((s_1154)"
"(if(syntax?$1"
" s_1153)"
"(syntax-e$1"
" s_1153)"
" s_1153)))"
"(let-values(((flat-s_1155)"
"(to-syntax-list.1"
" s_1154)))"
"(if(not flat-s_1155)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1146))"
"(let-values()"
" flat-s_1155)))))))"
"(values for-template307_1150 spec308_1151))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_1146)))))"
"(values #t for-template305_1147 spec306_1148))))))"
"(rebuild-req_1065"
" req_1070"
"(list* 'for-meta 0(map2(loop_1066 #t) spec306_1134)))))"
"(if(equal? tmp_1072 'for-label)"
"(let-values()"
"(let-values(((ok?_1156 for-label309_1157 spec310_1158)"
"(let-values(((s_1169) req_1070))"
"(let-values(((orig-s_1170) s_1169))"
"(let-values(((for-label309_1171 spec310_1172)"
"(let-values(((s_1173)"
"(if(syntax?$1 s_1169)"
"(syntax-e$1 s_1169)"
" s_1169)))"
"(if(pair? s_1173)"
"(let-values(((for-label311_1174)"
"(let-values(((s_1176)"
"(car s_1173)))"
" s_1176))"
"((spec312_1175)"
"(let-values(((s_1177)"
"(cdr s_1173)))"
"(let-values(((s_1178)"
"(if(syntax?$1"
" s_1177)"
"(syntax-e$1"
" s_1177)"
" s_1177)))"
"(let-values(((flat-s_1179)"
"(to-syntax-list.1"
" s_1178)))"
"(if(not flat-s_1179)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_1170))"
"(let-values()"
" flat-s_1179)))))))"
"(values for-label311_1174 spec312_1175))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_1170)))))"
"(values #t for-label309_1171 spec310_1172))))))"
"(rebuild-req_1065"
" req_1070"
"(list* for-label309_1157(map2(loop_1066 #t) spec310_1158)))))"
"(if(equal? tmp_1072 'just-meta)"
"(let-values()"
"(let-values(((ok?_1180 just-meta313_1181 phase-level314_1182 spec315_1183)"
"(let-values(((s_1196) req_1070))"
"(let-values(((orig-s_1197) s_1196))"
"(let-values(((just-meta313_1198"
" phase-level314_1199"
" spec315_1200)"
"(let-values(((s_1201)"
"(if(syntax?$1 s_1196)"
"(syntax-e$1 s_1196)"
" s_1196)))"
"(if(pair? s_1201)"
"(let-values(((just-meta316_1202)"
"(let-values(((s_1205)"
"(car"
" s_1201)))"
" s_1205))"
"((phase-level317_1203"
" spec318_1204)"
"(let-values(((s_1206)"
"(cdr"
" s_1201)))"
"(let-values(((s_1207)"
"(if(syntax?$1"
" s_1206)"
"(syntax-e$1"
" s_1206)"
" s_1206)))"
"(if(pair? s_1207)"
"(let-values(((phase-level319_1208)"
"(let-values(((s_1210)"
"(car"
" s_1207)))"
" s_1210))"
"((spec320_1209)"
"(let-values(((s_1211)"
"(cdr"
" s_1207)))"
"(let-values(((s_1212)"
"(if(syntax?$1"
" s_1211)"
"(syntax-e$1"
" s_1211)"
" s_1211)))"
"(let-values(((flat-s_1213)"
"(to-syntax-list.1"
" s_1212)))"
"(if(not"
" flat-s_1213)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                            \"bad syntax\""
" orig-s_1197))"
"(let-values()"
" flat-s_1213)))))))"
"(values"
" phase-level319_1208"
" spec320_1209))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1197))))))"
"(values"
" just-meta316_1202"
" phase-level317_1203"
" spec318_1204))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_1197)))))"
"(values"
" #t"
" just-meta313_1198"
" phase-level314_1199"
" spec315_1200))))))"
"(rebuild-req_1065"
" req_1070"
"(list*"
" just-meta313_1181"
" phase-level314_1182"
"(map2(loop_1066 #f) spec315_1183)))))"
"(let-values()"
"(if shifted?_1069"
" req_1070"
"(datum->syntax$1 #f(list 'for-syntax req_1070)))))))))))))))"
"((loop_1066 #f) req_1064)))))"
"(define-values"
"(copy-namespace-value)"
"(lambda(m-ns_1214 adjusted-sym_1215 binding_1216 phase-level_1217 phase-shift_1218 as-constant?_1219)"
"(let-values(((i-ns_1220)"
"(let-values(((m-ns321_1223) m-ns_1214)"
"((temp322_1224)(1/module-path-index-resolve(module-binding-module binding_1216)))"
"((temp323_1225)(phase-(module-binding-phase binding_1216) phase-level_1217))"
"((temp324_1226) #t))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp324_1226"
" #t"
" #f"
" #f"
" m-ns321_1223"
" temp322_1224"
" temp323_1225))))"
"(let-values(((val_1221)"
"(namespace-get-variable"
" i-ns_1220"
"(module-binding-phase binding_1216)"
"(module-binding-sym binding_1216)"
"(lambda()"
"(error"
" 'namespace-require/copy"
"(format"
"(string-append"
"                          \"namespace mismatch;\\n\""
"                          \" variable not found\\n\""
"                          \"  variable name: ~s\\n\""
"                          \"  phase level: ~s\")"
"(module-binding-sym binding_1216)"
"(module-binding-phase binding_1216)))))))"
"(namespace-set-variable!"
" m-ns_1214"
"(phase+ phase-shift_1218 phase-level_1217)"
" adjusted-sym_1215"
" val_1221"
" as-constant?_1219)))))"
"(void)"
"(void)"
"(define-values"
"(select-defined-syms-and-bind!16.1)"
"(lambda(as-transformer?5_18"
" as-transformer?10_19"
" frame-id1_20"
" in4_21"
" in9_22"
" requires+provides3_23"
" requires+provides8_24"
" top-level-bind-scope2_25"
" top-level-bind-scope7_26"
" ids11_27"
" defined-syms12_28"
" self13_29"
" phase14_30"
" all-scopes-stx15_31)"
"(let-values(((ids_32) ids11_27))"
"(let-values(((defined-syms_33) defined-syms12_28))"
"(let-values(((self_34) self13_29))"
"(let-values(((phase_35) phase14_30))"
"(let-values(((all-scopes-stx_36) all-scopes-stx15_31))"
"(let-values(((frame-id_37) frame-id1_20))"
"(let-values(((top-level-bind-scope_38)(if top-level-bind-scope7_26 top-level-bind-scope2_25 #f)))"
"(let-values(((requires+provides_39)(if requires+provides8_24 requires+provides3_23 #f)))"
"(let-values(((orig-s_40)(if in9_22 in4_21 #f)))"
"(let-values(((as-transformer?_41)(if as-transformer?10_19 as-transformer?5_18 #f)))"
"(let-values()"
"(let-values(((defined-syms-at-phase_42)"
"(let-values(((or-part_43)(hash-ref defined-syms_33 phase_35 #f)))"
"(if or-part_43"
" or-part_43"
"(let-values(((ht_44)(make-hasheq)))"
"(begin(hash-set! defined-syms_33 phase_35 ht_44) ht_44))))))"
"(let-values(((lst_45) ids_32))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(lst_47)"
"(if(pair? lst_47)"
"(let-values(((id_48)(unsafe-car lst_47))"
"((rest_49)(unsafe-cdr lst_47)))"
"(let-values(((post-guard-var_50)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_51)"
"(let-values()"
"(let-values()"
"(let-values(((sym_52)"
"(syntax-e$1 id_48)))"
"(let-values(((defined-sym_53)"
"(if(if(not"
"(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_42"
" sym_52"
" #f)"
" id_48"
" phase_35"
" top-level-bind-scope_38))"
"(no-extra-scopes?"
" id_48"
" all-scopes-stx_36"
" top-level-bind-scope_38"
" phase_35)"
" #f)"
" sym_52"
"((letrec-values(((loop_55)"
"(lambda(pos_56)"
"(let-values(((s_57)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                                    \"~a.~a\""
" sym_52"
" pos_56))))"
"(if(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_42"
" s_57"
" #f)"
" id_48"
" phase_35"
" top-level-bind-scope_38)"
"(loop_55"
"(add1"
" pos_56))"
" s_57)))))"
" loop_55)"
" 1))))"
"(let-values((()"
"(begin"
"(hash-set!"
" defined-syms-at-phase_42"
" defined-sym_53"
" id_48)"
"(values))))"
"(let-values(((b_54)"
"(let-values(((self23_59)"
" self_34)"
"((phase24_60)"
" phase_35)"
"((defined-sym25_61)"
" defined-sym_53)"
"((frame-id26_62)"
" frame-id_37)"
"((sym27_63)"
" sym_52))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" frame-id26_62"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sym27_63"
" #t"
" #f"
" #f"
" self23_59"
" phase24_60"
" defined-sym25_61))))"
"(begin"
"(if requires+provides_39"
"(let-values()"
"(let-values(((requires+provides28_65)"
" requires+provides_39)"
"((id29_66)"
" id_48)"
"((phase30_67)"
" phase_35)"
"((b31_68)"
" b_54))"
"(remove-required-id!69.1"
" b31_68"
" requires+provides28_65"
" id29_66"
" phase30_67)))"
"(void))"
"(let-values(((id19_70) id_48)"
"((b20_71) b_54)"
"((phase21_72)"
" phase_35)"
"((orig-s22_73)"
" orig-s_40))"
"(add-binding!17.1"
" orig-s22_73"
" #t"
" #f"
" #f"
" id19_70"
" b20_71"
" phase21_72))"
"(if requires+provides_39"
"(let-values()"
"(let-values(((requires+provides32_75)"
" requires+provides_39)"
"((id33_76)"
" id_48)"
"((phase34_77)"
" phase_35)"
"((b35_78) b_54)"
"((as-transformer?36_79)"
" as-transformer?_41))"
"(add-defined-or-required-id!13.1"
" as-transformer?36_79"
" #f"
" #f"
" requires+provides32_75"
" id33_76"
" phase34_77"
" b35_78)))"
"(void))"
" defined-sym_53)))))))))"
"(let-values(((result_80)"
"(if(post-guard-var_50)"
"(for-loop_46 rest_49)"
" null)))"
"(cons elem_51 result_80))))))"
" null))))"
" for-loop_46)"
" lst_45)))))))))))))))))"
"(define-values"
"(no-extra-scopes?)"
"(lambda(id_114 all-scopes-stx_115 top-level-bind-scope_116 phase_117)"
"(let-values(((m-id_118)(datum->syntax$1 all-scopes-stx_115(syntax-e$1 id_114))))"
"(let-values(((or-part_119)(bound-identifier=?$1 id_114 m-id_118 phase_117)))"
"(if or-part_119"
" or-part_119"
"(if top-level-bind-scope_116"
"(bound-identifier=?$1 id_114(add-scope m-id_118 top-level-bind-scope_116) phase_117)"
" #f))))))"
"(define-values"
"(defined-as-other?)"
"(lambda(prev-id_120 id_121 phase_122 top-level-bind-scope_123)"
"(if prev-id_120"
"(if(not(bound-identifier=?$1 prev-id_120 id_121 phase_122))"
"(let-values(((or-part_124)(not top-level-bind-scope_123)))"
"(if or-part_124"
" or-part_124"
"(not"
"(bound-identifier=?$1"
"(remove-scope prev-id_120 top-level-bind-scope_123)"
"(remove-scope id_121 top-level-bind-scope_123)"
" phase_122))))"
" #f)"
" #f)))"
"(define-values"
"(select-defined-syms-and-bind!/ctx)"
"(lambda(tl-ids_125 ctx_126)"
"(let-values(((tl-ids37_128) tl-ids_125)"
"((temp38_129)(root-expand-context-defined-syms ctx_126))"
"((temp39_130)(namespace-mpi(expand-context-namespace ctx_126)))"
"((temp40_131)(expand-context-phase ctx_126))"
"((temp41_132)(root-expand-context-all-scopes-stx ctx_126))"
"((temp42_133)(root-expand-context-frame-id ctx_126))"
"((temp43_134)(root-expand-context-top-level-bind-scope ctx_126)))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" temp42_133"
" #f"
" #f"
" #f"
" #f"
" temp43_134"
" #t"
" tl-ids37_128"
" temp38_129"
" temp39_130"
" temp40_131"
" temp41_132))))"
"(define-values"
"(add-defined-sym!)"
"(lambda(defined-syms_135 phase_136 sym_137 id_138)"
"(let-values(((defined-syms-at-phase_139)"
"(let-values(((or-part_140)(hash-ref defined-syms_135 phase_136 #f)))"
"(if or-part_140"
" or-part_140"
"(let-values(((ht_141)(make-hasheq)))"
"(begin(hash-set! defined-syms_135 phase_136 ht_141) ht_141))))))"
"(hash-set! defined-syms-at-phase_139 sym_137 id_138))))"
"(void)"
"(void)"
"(define-values"
"(make-create-root-expand-context-from-module)"
"(lambda(requires_1 evaled-ld-h_2)"
"(lambda(ns_3 phase-shift_4 original-self_5 self_6)"
"(let-values(((root-ctx_7)(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f))))"
"(let-values(((s_8)"
"(syntax-shift-phase-level$1"
"(add-scopes empty-syntax(root-expand-context-module-scopes root-ctx_7))"
" phase-shift_4)))"
"(let-values((()"
"(begin"
"(let-values(((lst_10) requires_1))"
"(begin"
"(if(list? lst_10)(void)(let-values()(in-list lst_10)))"
"((letrec-values(((for-loop_11)"
"(lambda(lst_12)"
"(if(pair? lst_12)"
"(let-values(((phase+reqs_13)(unsafe-car lst_12))"
"((rest_14)(unsafe-cdr lst_12)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_15)"
"(car"
" phase+reqs_13)))"
"(begin"
"(let-values(((lst_16)"
"(cdr"
" phase+reqs_13)))"
"(begin"
"(if(list? lst_16)"
"(void)"
"(let-values()"
"(in-list lst_16)))"
"((letrec-values(((for-loop_17)"
"(lambda(lst_18)"
"(if(pair?"
" lst_18)"
"(let-values(((req_19)"
"(unsafe-car"
" lst_18))"
"((rest_20)"
"(unsafe-cdr"
" lst_18)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_21)"
"(module-path-index-shift"
" req_19"
" original-self_5"
" self_6)))"
"(let-values(((mpi1_23)"
" mpi_21)"
"((s2_24)"
" s_8)"
"((self3_25)"
" self_6)"
"((s4_26)"
" s_8)"
"((ns5_27)"
" ns_3)"
"((temp6_28)"
"(phase+"
" phase_15"
" phase-shift_4))"
"((phase-shift7_29)"
" phase-shift_4)"
"((temp8_30)"
" 'module))"
"(perform-require!74.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp6_28"
" #f"
" #f"
" phase-shift7_29"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp8_30"
" mpi1_23"
" s2_24"
" self3_25"
" s4_26"
" ns5_27))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_17"
" rest_20)"
"(values))))"
"(values)))))"
" for-loop_17)"
" lst_16)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_11 rest_14)(values))))"
"(values)))))"
" for-loop_11)"
" lst_10)))"
"(values))))"
"(let-values((()(begin(void)(values))))"
"(let-values(((defined-syms_9)(root-expand-context-defined-syms root-ctx_7)))"
"(begin"
"(let-values(((ht_31) evaled-ld-h_2))"
"(begin"
"(if((lambda(ht_32)(hash? ht_32)) ht_31)(void)(let-values()(default-in-hash ht_31)))"
"((letrec-values(((for-loop_33)"
"(lambda(i_34)"
"(if i_34"
"(let-values(((phase_35 linklet_36)(hash-iterate-key+value ht_31 i_34)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((lst_37)"
"(1/linklet-export-variables"
" linklet_36)))"
"(begin"
"(if(list? lst_37)"
"(void)"
"(let-values()"
"(in-list lst_37)))"
"((letrec-values(((for-loop_38)"
"(lambda(lst_39)"
"(if(pair?"
" lst_39)"
"(let-values(((sym_40)"
"(unsafe-car"
" lst_39))"
"((rest_41)"
"(unsafe-cdr"
" lst_39)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_42)"
"(datum->syntax$1"
" s_8"
" sym_40)))"
"(begin"
"(let-values(((id9_43)"
" id_42)"
"((temp10_44)"
"(let-values(((self12_46)"
" self_6)"
"((phase13_47)"
" phase_35)"
"((sym14_48)"
" sym_40))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" self12_46"
" phase13_47"
" sym14_48)))"
"((temp11_45)"
"(phase+"
" phase_35"
" phase-shift_4)))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" id9_43"
" temp10_44"
" temp11_45))"
"(add-defined-sym!"
" defined-syms_9"
" phase_35"
" sym_40"
" id_42))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_38"
" rest_41)"
"(values))))"
"(values)))))"
" for-loop_38)"
" lst_37)))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_33(hash-iterate-next ht_31 i_34))(values))))"
"(values)))))"
" for-loop_33)"
"(hash-iterate-first ht_31))))"
"(void)"
" root-ctx_7)))))))))"
"(void)"
"(void)"
"(define-values"
"(check-require-access9.1)"
"(lambda(skip-imports1_20"
" linklet3_21"
" import-module-uses4_22"
" import-module-instances5_23"
" insp6_24"
" extra-inspector7_25"
" extra-inspectorsss8_26)"
"(let-values(((linklet_27) linklet3_21))"
"(let-values(((skip-num-imports_28) skip-imports1_20))"
"(let-values(((import-module-uses_29) import-module-uses4_22))"
"(let-values(((import-module-instances_30) import-module-instances5_23))"
"(let-values(((insp_31) insp6_24))"
"(let-values(((extra-inspector_32) extra-inspector7_25))"
"(let-values(((extra-inspectorsss_33) extra-inspectorsss8_26))"
"(let-values()"
"(begin"
"(let-values(((lst_34)(list-tail(1/linklet-import-variables linklet_27) skip-num-imports_28))"
"((lst_35) import-module-uses_29)"
"((lst_36) import-module-instances_30)"
"((lst_37)"
"(let-values(((or-part_38) extra-inspectorsss_33))"
"(if or-part_38 or-part_38 import-module-uses_29))))"
"(begin"
"(if(list? lst_34)(void)(let-values()(in-list lst_34)))"
"(if(list? lst_35)(void)(let-values()(in-list lst_35)))"
"(if(list? lst_36)(void)(let-values()(in-list lst_36)))"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"((letrec-values(((for-loop_39)"
"(lambda(lst_40 lst_41 lst_42 lst_43)"
"(if(if(pair? lst_40)"
"(if(pair? lst_41)(if(pair? lst_42)(pair? lst_43) #f) #f)"
" #f)"
"(let-values(((import-syms_44)(unsafe-car lst_40))"
"((rest_45)(unsafe-cdr lst_40))"
"((mu_46)(unsafe-car lst_41))"
"((rest_47)(unsafe-cdr lst_41))"
"((mi_48)(unsafe-car lst_42))"
"((rest_49)(unsafe-cdr lst_42))"
"((extra-inspectorss_50)(unsafe-car lst_43))"
"((rest_51)(unsafe-cdr lst_43)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_52)"
"(module-instance-module"
" mi_48)))"
"(if(module-no-protected? m_52)"
"(void)"
"(let-values()"
"(let-values(((access_53)"
"(let-values(((or-part_54)"
"(module-access"
" m_52)))"
"(if or-part_54"
" or-part_54"
"(module-compute-access!"
" m_52)))))"
"(begin"
"(let-values(((lst_55)"
" import-syms_44)"
"((lst_56)"
"(let-values(((or-part_57)"
"(if extra-inspectorsss_33"
" extra-inspectorss_50"
" #f)))"
"(if or-part_57"
" or-part_57"
" import-syms_44))))"
"(begin"
"(if(list? lst_55)"
"(void)"
"(let-values()"
"(in-list"
" lst_55)))"
"(if(list? lst_56)"
"(void)"
"(let-values()"
"(in-list"
" lst_56)))"
"((letrec-values(((for-loop_58)"
"(lambda(lst_59"
" lst_60)"
"(if(if(pair?"
" lst_59)"
"(pair?"
" lst_60)"
" #f)"
"(let-values(((import-sym_61)"
"(unsafe-car"
" lst_59))"
"((rest_62)"
"(unsafe-cdr"
" lst_59))"
"((extra-inspectors_63)"
"(unsafe-car"
" lst_60))"
"((rest_64)"
"(unsafe-cdr"
" lst_60)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((a_65)"
"(hash-ref"
"(hash-ref"
" access_53"
"(module-use-phase"
" mu_46)"
" '#hasheq())"
" import-sym_61"
" 'unexported)))"
"(if(let-values(((or-part_66)"
"(eq?"
" a_65"
" 'unexported)))"
"(if or-part_66"
" or-part_66"
"(eq?"
" a_65"
" 'protected)))"
"(let-values()"
"(let-values(((guard-insp_67)"
"(namespace-inspector"
"(module-instance-namespace"
" mi_48))))"
"(if(let-values(((or-part_68)"
"(inspector-superior?"
" insp_31"
" guard-insp_67)))"
"(if or-part_68"
" or-part_68"
"(let-values(((or-part_69)"
"(if extra-inspector_32"
"(inspector-superior?"
" extra-inspector_32"
" guard-insp_67)"
" #f)))"
"(if or-part_69"
" or-part_69"
"(if extra-inspectorsss_33"
"(if extra-inspectorss_50"
"(let-values(((ht_70)"
" extra-inspectors_63))"
"(begin"
"(if((lambda(ht_71)"
"(if(hash?"
" ht_71)"
"(immutable?"
" ht_71)"
" #f))"
" ht_70)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_70)))"
"((letrec-values(((for-loop_72)"
"(lambda(result_73"
" i_74)"
"(if i_74"
"(let-values(((extra-insp_75)"
"(unsafe-immutable-hash-iterate-key"
" ht_70"
" i_74)))"
"(let-values(((result_76)"
"(let-values()"
"(let-values(((result_78)"
"(let-values()"
"(let-values()"
"(inspector-superior?"
" extra-insp_75"
" guard-insp_67)))))"
"(values"
" result_78)))))"
"(if(if(not"
"((lambda x_79"
"(not"
" result_76))"
" extra-insp_75))"
"(not"
" #f)"
" #f)"
"(for-loop_72"
" result_76"
"(unsafe-immutable-hash-iterate-next"
" ht_70"
" i_74))"
" result_76)))"
" result_73))))"
" for-loop_72)"
" #t"
"(unsafe-immutable-hash-iterate-first"
" ht_70))))"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(error"
" 'link"
"(string-append"
"                                                                                                                                                                              \"access disallowed by code inspector to ~a variable\\n\""
"                                                                                                                                                                              \"  variable: ~s\\n\""
"                                                                                                                                                                              \"  from module: ~a\")"
" a_65"
" import-sym_61"
"(1/module-path-index-resolve"
"(namespace-mpi"
"(module-instance-namespace"
" mi_48))))))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_58"
" rest_62"
" rest_64)"
"(values))))"
"(values)))))"
" for-loop_58)"
" lst_55"
" lst_56)))"
"(void)))))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_39 rest_45 rest_47 rest_49 rest_51)"
"(values))))"
"(values)))))"
" for-loop_39)"
" lst_34"
" lst_35"
" lst_36"
" lst_37)))"
"(void))))))))))))"
"(void)"
"(void)"
"(define-values(module-cache)(make-weak-hash))"
"(define-values(make-module-cache-key)(lambda(hash-code_1)(if hash-code_1(list hash-code_1) #f)))"
"(define-values"
"(module-cache-set!)"
"(lambda(key_2 proc_3)(hash-set! module-cache key_2(make-ephemeron key_2 proc_3))))"
"(define-values"
"(module-cache-ref)"
"(lambda(key_4)(let-values(((e_5)(hash-ref module-cache key_4 #f)))(if e_5(ephemeron-value e_5) #f))))"
"(void)"
"(void)"
"(define-values"
"(eval-module8.1)"
"(lambda(namespace1_1"
" namespace4_2"
" supermodule-name3_3"
" supermodule-name6_4"
" with-submodules?2_5"
" with-submodules?5_6"
" c7_7)"
"(let-values(((c_8) c7_7))"
"(let-values(((ns_9)(if namespace4_2 namespace1_1(1/current-namespace))))"
"(let-values(((with-submodules?_10)(if with-submodules?5_6 with-submodules?2_5 #t)))"
"(let-values(((supermodule-name_11)(if supermodule-name6_4 supermodule-name3_3 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((dh_12 h_13 data-instance_14 declaration-instance_15)"
"(compiled-module->dh+h+data-instance+declaration-instance c_8)))"
"(let-values(((syntax-literals-data-instance_16)"
"(if(compiled-in-memory? c_8)"
"(make-syntax-literal-data-instance-from-compiled-in-memory c_8)"
"(let-values(((l_37)(hash-ref h_13 'stx-data #f)))"
"(if l_37"
"(let-values()"
"(1/instantiate-linklet"
"(1/eval-linklet l_37)"
"(list deserialize-instance data-instance_14)))"
"(if(eq?(hash-ref h_13 'module->namespace #f) 'empty)"
"(let-values() empty-syntax-literals-instance/empty-namespace)"
"(let-values() empty-syntax-literals-data-instance)))))))"
"(let-values(((decl_17)"
"(lambda(key_38)(1/instance-variable-value declaration-instance_15 key_38))))"
"(let-values(((pre-submodule-names_18)(hash-ref h_13 'pre null)))"
"(let-values(((post-submodule-names_19)(hash-ref h_13 'post null)))"
"(let-values(((default-name_20)(hash-ref h_13 'name 'module)))"
"(let-values(((cache-key_21)"
"(make-module-cache-key"
"(if(null? pre-submodule-names_18)"
"(if(null? post-submodule-names_19)(hash-ref h_13 'hash-code #f) #f)"
" #f))))"
"(let-values(((cross-phase-persistent?_22)(hash-ref h_13 'cross-phase-persistent? #f)))"
"(let-values(((min-phase_23)(hash-ref h_13 'min-phase 0)))"
"(let-values(((max-phase_24)(hash-ref h_13 'max-phase 0)))"
"(let-values(((language-info_25)(hash-ref h_13 'language-info #f)))"
"(let-values(((phases-h_26)"
"(let-values(((start_39) min-phase_23)"
"((end_40)(add1 max-phase_24))"
"((inc_41) 1))"
"(begin"
"(if(if(real? start_39)"
"(if(real? end_40)(real? inc_41) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_39 end_40 inc_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(table_43 pos_44)"
"(if(< pos_44 end_40)"
"(let-values(((phase-level_45) pos_44))"
"(let-values(((table_46)"
"(let-values(((v_47)"
"(hash-ref"
" h_13"
" phase-level_45"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_48)"
"(lambda(table_49)"
"(let-values()"
"(let-values(((table_50)"
"(let-values(((table_51)"
" table_49))"
"(if v_47"
"(let-values(((table_52)"
" table_51))"
"(let-values(((table_53)"
"(let-values()"
"(let-values(((key_54"
" val_55)"
"(let-values()"
"(values"
" phase-level_45"
"(1/eval-linklet"
" v_47)))))"
"(hash-set"
" table_52"
" key_54"
" val_55)))))"
"(values"
" table_53)))"
" table_51))))"
" table_50)))))"
" for-loop_48)"
" table_43)))))"
"(if(not #f)"
"(for-loop_42"
" table_46"
"(+ pos_44 inc_41))"
" table_46)))"
" table_43))))"
" for-loop_42)"
" '#hash()"
" start_39)))))"
"(let-values(((syntax-literals-linklet_27)"
"(let-values(((l_56)(hash-ref h_13 'stx #f)))"
"(if l_56(1/eval-linklet l_56) #f))))"
"(let-values(((extra-inspector_28)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-compile-time-inspector c_8)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_29)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_8)"
" '#hasheqv())))"
"(let-values(((requires_30)(decl_17 'requires)))"
"(let-values(((provides_31)(decl_17 'provides)))"
"(let-values(((original-self_32)(decl_17 'self-mpi)))"
"(let-values(((phase-to-link-modules_33)"
"(decl_17 'phase-to-link-modules)))"
"(let-values(((create-root-expand-context-from-module_34)"
"(make-create-root-expand-context-from-module"
" requires_30"
" phases-h_26)))"
"(let-values(((declare-submodules_35)"
"(if dh_12"
"(lambda(ns_57 names_58 declare-name_59 pre?_60)"
"(if(compiled-in-memory? c_8)"
"(begin"
"(let-values(((lst_61)"
"(if pre?_60"
"(compiled-in-memory-pre-compiled-in-memorys"
" c_8)"
"(compiled-in-memory-post-compiled-in-memorys"
" c_8))))"
"(begin"
"(if(list? lst_61)"
"(void)"
"(let-values()(in-list lst_61)))"
"((letrec-values(((for-loop_62)"
"(lambda(lst_63)"
"(if(pair? lst_63)"
"(let-values(((c_64)"
"(unsafe-car"
" lst_63))"
"((rest_65)"
"(unsafe-cdr"
" lst_63)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((c12_67)"
" c_64)"
"((ns13_68)"
" ns_57)"
"((declare-name14_69)"
" declare-name_59))"
"(eval-module8.1"
" ns13_68"
" #t"
" declare-name14_69"
" #t"
" #f"
" #f"
" c12_67)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_62"
" rest_65)"
"(values))))"
"(values)))))"
" for-loop_62)"
" lst_61)))"
"(void))"
"(begin"
"(let-values(((lst_70) names_58))"
"(begin"
"(if(list? lst_70)"
"(void)"
"(let-values()(in-list lst_70)))"
"((letrec-values(((for-loop_71)"
"(lambda(lst_72)"
"(if(pair? lst_72)"
"(let-values(((name_73)"
"(unsafe-car"
" lst_72))"
"((rest_74)"
"(unsafe-cdr"
" lst_72)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((sm-cd_75)"
"(hash-ref"
" dh_12"
" name_73"
" #f)))"
"(begin"
"(if sm-cd_75"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                       \"missing submodule declaration:\""
" name_73)))"
"(let-values(((sm-cd15_77)"
" sm-cd_75)"
"((ns16_78)"
" ns_57)"
"((declare-name17_79)"
" declare-name_59))"
"(eval-module8.1"
" ns16_78"
" #t"
" declare-name17_79"
" #t"
" #f"
" #f"
" sm-cd15_77)))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_71"
" rest_74)"
"(values))))"
"(values)))))"
" for-loop_71)"
" lst_70)))"
"(void))))"
" void)))"
"(let-values(((declare-this-module_36)"
"(lambda(ns_80)"
"(let-values(((m_81)"
"(let-values(((temp22_84)"
"(1/current-module-declare-source))"
"((original-self23_85)"
" original-self_32)"
"((requires24_86)"
" requires_30)"
"((provides25_87)"
" provides_31)"
"((language-info26_88)"
" language-info_25)"
"((min-phase27_89)"
" min-phase_23)"
"((max-phase28_90)"
" max-phase_24)"
"((cross-phase-persistent?29_91)"
" cross-phase-persistent?_22)"
"((temp30_92)"
"(append"
" pre-submodule-names_18"
" post-submodule-names_19))"
"((supermodule-name31_93)"
" supermodule-name_11)"
"((temp32_94)"
"(lambda()"
"(get-all-variables"
" phases-h_26)))"
"((temp33_95)"
"(lambda(phase-level_98"
" ns_99)"
"(module-linklet-info2.1"
"(hash-ref"
" phases-h_26"
" phase-level_98"
" #f)"
"(hash-ref"
" phase-to-link-modules_33"
" phase-level_98"
" #f)"
" original-self_32)))"
"((temp34_96)"
"(lambda(data-box_100"
" ns_101"
" phase-shift_102"
" self_103"
" bulk-binding-registry_104"
" insp_105)"
"(if(unbox"
" data-box_100)"
"(void)"
"(let-values()"
"(init-instance-data!"
" data-box_100"
" cache-key_21"
" ns_101"
" syntax-literals-linklet_27"
" data-instance_14"
" syntax-literals-data-instance_16"
" phase-shift_102"
" original-self_32"
" self_103"
" bulk-binding-registry_104"
" insp_105"
" create-root-expand-context-from-module_34)))))"
"((temp35_97)"
"(lambda(data-box_106"
" ns_107"
" phase-shift_108"
" phase-level_109"
" self_110"
" bulk-binding-registry_111"
" insp_112)"
"(let-values()"
"(let-values(((syntax-literals-instance_113)"
"(instance-data-syntax-literals-instance"
"(unbox"
" data-box_106))))"
"(let-values(((phase-linklet_114)"
"(hash-ref"
" phases-h_26"
" phase-level_109"
" #f)))"
"(if phase-linklet_114"
"(let-values()"
"(let-values(((module-uses_115)"
"(hash-ref"
" phase-to-link-modules_33"
" phase-level_109)))"
"(let-values(((import-module-instances_116"
" import-instances_117)"
"(let-values(((mis_120"
" is_121)"
"(let-values(((lst_122)"
" module-uses_115))"
"(begin"
"(if(list?"
" lst_122)"
"(void)"
"(let-values()"
"(in-list"
" lst_122)))"
"((letrec-values(((for-loop_123)"
"(lambda(mis_124"
" is_125"
" lst_126)"
"(if(pair?"
" lst_126)"
"(let-values(((mu_127)"
"(unsafe-car"
" lst_126))"
"((rest_128)"
"(unsafe-cdr"
" lst_126)))"
"(let-values(((mis_129"
" is_130)"
"(let-values(((mis_131)"
" mis_124)"
"((is_132)"
" is_125))"
"(let-values(((mis_133"
" is_134)"
"(let-values()"
"(let-values(((mis43_135"
" is44_136)"
"(let-values()"
"(let-values(((ns45_138)"
" ns_107)"
"((mu46_139)"
" mu_127)"
"((original-self47_140)"
" original-self_32)"
"((self48_141)"
" self_110)"
"((temp49_142)"
"(phase+"
"(phase-"
" phase-level_109"
"(module-use-phase"
" mu_127))"
" phase-shift_108)))"
"(namespace-module-use->module+linklet-instances144.1"
" temp49_142"
" original-self47_140"
" #t"
" self48_141"
" #t"
" ns45_138"
" mu46_139)))))"
"(values"
"(cons"
" mis43_135"
" mis_131)"
"(cons"
" is44_136"
" is_132))))))"
"(values"
" mis_133"
" is_134)))))"
"(if(not"
" #f)"
"(for-loop_123"
" mis_129"
" is_130"
" rest_128)"
"(values"
" mis_129"
" is_130))))"
"(values"
" mis_124"
" is_125)))))"
" for-loop_123)"
" null"
" null"
" lst_122)))))"
"(values"
"(alt-reverse"
" mis_120)"
"(alt-reverse"
" is_121)))))"
"(let-values((()"
"(begin"
"(let-values(((phase-linklet36_144)"
" phase-linklet_114)"
"((temp37_145)"
" 2)"
"((module-uses38_146)"
" module-uses_115)"
"((import-module-instances39_147)"
" import-module-instances_116)"
"((insp40_148)"
" insp_112)"
"((extra-inspector41_149)"
" extra-inspector_28)"
"((temp42_150)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_29"
" phase-level_109"
" #f)))"
"(check-require-access9.1"
" temp37_145"
" phase-linklet36_144"
" module-uses38_146"
" import-module-instances39_147"
" insp40_148"
" extra-inspector41_149"
" temp42_150))"
"(values))))"
"(let-values(((module-body-instance-instance_118)"
"(let-values(((temp50_152)"
"(lambda(name_153"
" val_154)"
"(namespace-set-transformer!"
" ns_107"
"(sub1"
" phase-level_109)"
" name_153"
" val_154))))"
"(make-module-body-instance-instance18.1"
" temp50_152))))"
"(let-values(((instantiate-body_119)"
"(lambda()"
"(1/instantiate-linklet"
" phase-linklet_114"
"(list*"
" syntax-literals-instance_113"
" module-body-instance-instance_118"
" import-instances_117)"
"(namespace->instance"
" ns_107"
" phase-level_109)))))"
"(if(zero-phase?"
" phase-level_109)"
"(let-values()"
"(if(zero-phase?"
" phase-shift_108)"
"(let-values()"
"(instantiate-body_119))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" ns_107)"
"(let-values()"
"(instantiate-body_119))))))"
"(let-values()"
"(let-values(((ns-1_155)"
"(namespace->namespace-at-phase"
" ns_107"
"(phase+"
" phase-shift_108"
"(sub1"
" phase-level_109)))))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(delay"
"(lambda()"
"(let-values(((ns-151_156)"
" ns-1_155))"
"(make-expand-context8.1"
" #f"
" #f"
" #f"
" #f"
" ns-151_156))))"
" 1/current-namespace"
" ns_107"
" current-module-code-inspector"
" insp_112)"
"(let-values()"
"(instantiate-body_119))))))))))))"
"(void))))))))"
"(make-module37.1"
" cross-phase-persistent?29_91"
" #t"
" temp32_94"
" #t"
" temp35_97"
" language-info26_88"
" #t"
" max-phase28_90"
" #t"
" min-phase27_89"
" #t"
" #f"
" #f"
" temp33_95"
" #t"
" #f"
" #f"
" temp34_96"
" #t"
" #f"
" #f"
" provides25_87"
" requires24_86"
" #t"
" original-self23_85"
" temp22_84"
" #t"
" temp30_92"
" #t"
" supermodule-name31_93"
" #t))))"
"(let-values(((declare-name_82)"
"(substitute-module-declare-name"
" default-name_20)))"
"(begin"
"(if with-submodules?_10"
"(let-values()"
"(declare-submodules_35"
" ns_80"
" pre-submodule-names_18"
" declare-name_82"
" #t))"
"(void))"
"(let-values(((ns18_158) ns_80)"
"((m19_159) m_81)"
"((declare-name20_160)"
" declare-name_82)"
"((with-submodules?21_161)"
" with-submodules?_10))"
"(declare-module!56.1"
" with-submodules?21_161"
" #t"
" ns18_158"
" m19_159"
" declare-name20_160))"
"(if with-submodules?_10"
"(let-values()"
"(declare-submodules_35"
" ns_80"
" post-submodule-names_19"
" declare-name_82"
" #f))"
"(void))))))))"
"(begin"
"(if cache-key_21"
"(let-values()"
"(module-cache-set!"
" cache-key_21"
" declare-this-module_36))"
"(void))"
"(declare-this-module_36"
" ns_9))))))))))))))))))))))))))))))))"
"(define-values"
"(struct:instance-data instance-data11.1 instance-data? instance-data-syntax-literals-instance instance-data-cache-key)"
"(let-values(((struct:_188 make-_189 ?_190 -ref_191 -set!_192)"
"(let-values()"
"(let-values()"
"(make-struct-type 'instance-data #f 2 0 #f null(current-inspector) #f '(0 1) #f 'instance-data)))))"
"(values"
" struct:_188"
" make-_189"
" ?_190"
"(make-struct-field-accessor -ref_191 0 'syntax-literals-instance)"
"(make-struct-field-accessor -ref_191 1 'cache-key))))"
"(define-values"
"(init-instance-data!)"
"(lambda(data-box_213"
" cache-key_214"
" ns_215"
" syntax-literals-linklet_216"
" data-instance_217"
" syntax-literals-data-instance_218"
" phase-shift_219"
" original-self_220"
" self_221"
" bulk-binding-registry_222"
" insp_223"
" create-root-expand-context-from-module_224)"
"(let-values((()"
"(begin"
"(if(not(load-on-demand-enabled))"
"(let-values()"
"(force-syntax-deserialize syntax-literals-data-instance_218 bulk-binding-registry_222))"
"(void))"
"(values))))"
"(let-values(((inst_225)"
"(let-values(((ns53_229) ns_215)"
"((phase-shift54_230) phase-shift_219)"
"((self55_231) self_221)"
"((insp56_232) insp_223)"
"((bulk-binding-registry57_233) bulk-binding-registry_222)"
"((temp58_234)"
"                                  (lambda (name_235 val_236) (error \"shouldn't get here for the root-ctx linklet\"))))"
"(make-instance-instance13.1"
" bulk-binding-registry57_233"
" insp56_232"
" ns53_229"
" phase-shift54_230"
" self55_231"
" temp58_234))))"
"(let-values(((syntax-literals-instance_226)"
"(if syntax-literals-linklet_216"
"(1/instantiate-linklet"
" syntax-literals-linklet_216"
"(list deserialize-instance data-instance_217 syntax-literals-data-instance_218 inst_225))"
" empty-syntax-literals-instance)))"
"(let-values((()"
"(begin"
"(set-box! data-box_213(instance-data11.1 syntax-literals-instance_226 cache-key_214))"
"(values))))"
"(let-values(((get-encoded-root-expand-ctx_227)"
"(1/instance-variable-value syntax-literals-instance_226 'get-encoded-root-expand-ctx)))"
"(if(eq? get-encoded-root-expand-ctx_227 'empty)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_215"
"(delay(lambda()(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f))))))"
"(if(procedure? get-encoded-root-expand-ctx_227)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_215"
"(delay(lambda()(root-expand-context-decode-for-module(get-encoded-root-expand-ctx_227))))))"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_215"
"(delay"
"(lambda()"
"(create-root-expand-context-from-module_224"
" ns_215"
" phase-shift_219"
" original-self_220"
" self_221))))))))))))))"
"(define-values"
"(force-syntax-deserialize)"
"(lambda(syntax-literals-data-instance_237 bulk-binding-registry_238)"
"(let-values(((deserialize-syntax_239)"
"(1/instance-variable-value syntax-literals-data-instance_237 deserialize-syntax-id)))"
"(if deserialize-syntax_239(let-values()(deserialize-syntax_239 bulk-binding-registry_238))(void)))))"
"(define-values"
"(compiled-module->dh+h)"
"(lambda(c_240)"
"(let-values(((ld/h_241)(if(compiled-in-memory? c_240)(compiled-in-memory-linklet-directory c_240) c_240)))"
"(let-values(((dh_242)"
"(if(1/linklet-directory? ld/h_241)"
"(let-values()(1/linklet-directory->hash ld/h_241))"
"(let-values() #f))))"
"(let-values(((h_243)(1/linklet-bundle->hash(if dh_242(hash-ref dh_242 #f) ld/h_241))))"
"(values dh_242 h_243))))))"
"(define-values"
"(compiled-module->h)"
"(lambda(c_244)(let-values(((dh_245 h_246)(compiled-module->dh+h c_244))) h_246)))"
"(define-values"
"(compiled-module->dh+h+data-instance+declaration-instance)"
"(lambda(c_247)"
"(let-values(((dh_248 h_249)(compiled-module->dh+h c_247)))"
"(let-values(((data-instance_250)"
"(if(compiled-in-memory? c_247)"
"(make-data-instance-from-compiled-in-memory c_247)"
"(1/instantiate-linklet(1/eval-linklet(hash-ref h_249 'data))(list deserialize-instance)))))"
"(let-values(((declaration-instance_251)"
"(if(if(compiled-in-memory? c_247)(compiled-in-memory-original-self c_247) #f)"
"(make-declaration-instance-from-compiled-in-memory c_247)"
"(1/instantiate-linklet"
"(1/eval-linklet(hash-ref h_249 'decl))"
"(list deserialize-instance data-instance_250)))))"
"(values dh_248 h_249 data-instance_250 declaration-instance_251))))))"
"(define-values"
"(compiled-module->declaration-instance)"
"(lambda(c_252)"
"(let-values(((dh_253 h_254 data-instance_255 declaration-instance_256)"
"(compiled-module->dh+h+data-instance+declaration-instance c_252)))"
" declaration-instance_256)))"
"(define-values"
"(compiled-module->h+declaration-instance)"
"(lambda(c_257)"
"(let-values(((dh_258 h_259 data-instance_260 declaration-instance_261)"
"(compiled-module->dh+h+data-instance+declaration-instance c_257)))"
"(values h_259 declaration-instance_261))))"
"(define-values"
"(make-data-instance-from-compiled-in-memory)"
"(lambda(cim_262)(1/make-instance 'data #f mpi-vector-id(compiled-in-memory-mpis cim_262))))"
"(define-values"
"(make-declaration-instance-from-compiled-in-memory)"
"(lambda(cim_263)"
"(1/make-instance"
" 'decl"
" #f"
" 'self-mpi"
"(compiled-in-memory-original-self cim_263)"
" 'requires"
"(compiled-in-memory-requires cim_263)"
" 'provides"
"(compiled-in-memory-provides cim_263)"
" 'phase-to-link-modules"
"(compiled-in-memory-phase-to-link-module-uses cim_263))))"
"(define-values"
"(make-syntax-literal-data-instance-from-compiled-in-memory)"
"(lambda(cim_264)"
"(1/make-instance"
" 'syntax-literal-data"
" #f"
" deserialize-syntax-id"
" void"
" deserialized-syntax-vector-id"
"(compiled-in-memory-syntax-literals cim_264))))"
"(define-values"
"(empty-syntax-literals-data-instance)"
"(1/make-instance 'empty-stx-data #f deserialized-syntax-vector-id(vector) deserialize-syntax-id void))"
"(define-values"
"(empty-syntax-literals-instance)"
"(1/make-instance 'empty-stx #f get-syntax-literal!-id(lambda(pos_265) #f) 'get-encoded-root-expand-ctx #f))"
"(define-values"
"(empty-syntax-literals-instance/empty-namespace)"
"(1/make-instance"
" 'empty-stx/empty-ns"
" #f"
" get-syntax-literal!-id"
"(lambda(pos_266) #f)"
" 'get-encoded-root-expand-ctx"
" 'empty))"
"(define-values"
"(get-all-variables)"
"(lambda(phases-h_267)"
"(let-values(((ht_268) phases-h_267))"
"(begin"
"(if((lambda(ht_269)(hash? ht_269)) ht_268)(void)(let-values()(default-in-hash ht_268)))"
"((letrec-values(((for-loop_270)"
"(lambda(table_271 i_272)"
"(if i_272"
"(let-values(((phase_273 linklet_274)(hash-iterate-key+value ht_268 i_272)))"
"(let-values(((table_275)"
"(let-values(((table_276) table_271))"
"(let-values(((table_277)"
"(let-values()"
"(let-values(((key_278 val_279)"
"(let-values()"
"(values"
" phase_273"
"(1/linklet-export-variables"
" linklet_274)))))"
"(hash-set table_276 key_278 val_279)))))"
"(values table_277)))))"
"(if(not #f)(for-loop_270 table_275(hash-iterate-next ht_268 i_272)) table_275)))"
" table_271))))"
" for-loop_270)"
" '#hash()"
"(hash-iterate-first ht_268))))))"
"(void)"
"(void)"
"(define-values"
"(provides->api-provides)"
"(lambda(provides_1 self_2)"
"(let-values(((extract_3)"
"(lambda(ok?_4)"
"(let-values(((result-l_5)"
"(let-values(((ht_6) provides_1))"
"(begin"
"(if((lambda(ht_7)(hash? ht_7)) ht_6)"
"(void)"
"(let-values()(default-in-hash ht_6)))"
"((letrec-values(((for-loop_8)"
"(lambda(i_9)"
"(if i_9"
"(let-values(((phase_10 at-phase_11)"
"(hash-iterate-key+value ht_6 i_9)))"
"(let-values(((post-guard-var_12)(lambda() #t)))"
"(let-values(((l_13)"
"(let-values(((ht_14) at-phase_11))"
"(begin"
"(if((lambda(ht_15)(hash? ht_15))"
" ht_14)"
"(void)"
"(let-values()"
"(default-in-hash ht_14)))"
"((letrec-values(((for-loop_16)"
"(lambda(i_17)"
"(if i_17"
"(let-values(((sym_18"
" b/p_19)"
"(hash-iterate-key+value"
" ht_14"
" i_17)))"
"(let-values(((post-guard-var_20)"
"(lambda()"
" #t)))"
"(let-values()"
"(if(ok?_4"
" b/p_19)"
"(let-values()"
"(let-values(((elem_21)"
"(let-values()"
"(let-values()"
"(let-values(((b_22)"
"(provided-as-binding"
" b/p_19)))"
"(list"
" sym_18"
"(if(eq?"
" self_2"
"(module-binding-module"
" b_22))"
"(let-values()"
" null)"
"(let-values()"
"(let-values(((lst_23)"
"(cons"
" b_22"
"(module-binding-extra-nominal-bindings"
" b_22))))"
"(begin"
"(if(list?"
" lst_23)"
"(void)"
"(let-values()"
"(in-list"
" lst_23)))"
"((letrec-values(((for-loop_24)"
"(lambda(lst_25)"
"(if(pair?"
" lst_25)"
"(let-values(((b_26)"
"(unsafe-car"
" lst_25))"
"((rest_27)"
"(unsafe-cdr"
" lst_25)))"
"(let-values(((post-guard-var_28)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_29)"
"(let-values()"
"(let-values()"
"(if(if(eqv?"
"(module-binding-nominal-phase"
" b_26)"
" phase_10)"
"(eq?"
"(module-binding-nominal-sym"
" b_26)"
" sym_18)"
" #f)"
"(let-values()"
"(module-binding-nominal-module"
" b_26))"
"(let-values()"
"(list"
"(module-binding-nominal-module"
" b_26)"
"(module-binding-phase"
" b_26)"
"(module-binding-nominal-sym"
" b_26)"
"(module-binding-nominal-phase"
" b_26))))))))"
"(let-values(((result_30)"
"(if(post-guard-var_28)"
"(for-loop_24"
" rest_27)"
" null)))"
"(cons"
" elem_29"
" result_30))))))"
" null))))"
" for-loop_24)"
" lst_23)))))))))))"
"(let-values(((result_31)"
"(if(post-guard-var_20)"
"(for-loop_16"
"(hash-iterate-next"
" ht_14"
" i_17))"
" null)))"
"(cons"
" elem_21"
" result_31))))"
"(if(post-guard-var_20)"
"(for-loop_16"
"(hash-iterate-next"
" ht_14"
" i_17))"
" null)))))"
" null))))"
" for-loop_16)"
"(hash-iterate-first ht_14))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_32)"
"(lambda()"
"(let-values()"
"(let-values(((post-guard-var_33)"
"(lambda() #f)))"
"(let-values()"
"(if(null? l_13)"
"(if(post-guard-var_33)"
"(for-loop_32)"
"(if(post-guard-var_12)"
"(for-loop_8"
"(hash-iterate-next"
" ht_6"
" i_9))"
" null))"
"(let-values()"
"(let-values(((elem_34)"
"(let-values()"
"(let-values()"
"(cons"
" phase_10"
"(let-values(((l4_36)"
" l_13)"
"((symbol<?5_37)"
" symbol<?)"
"((car6_38)"
" car))"
"(sort7.1"
" #f"
" #f"
" car6_38"
" #t"
" l4_36"
" symbol<?5_37)))))))"
"(let-values(((result_39)"
"(if(post-guard-var_33)"
"(for-loop_32)"
"(if(post-guard-var_12)"
"(for-loop_8"
"(hash-iterate-next"
" ht_6"
" i_9))"
" null))))"
"(cons"
" elem_34"
" result_39)))))))))))"
" for-loop_32))))))"
" null))))"
" for-loop_8)"
"(hash-iterate-first ht_6))))))"
"(let-values(((result-l1_41) result-l_5)((phase<?2_42) phase<?)((car3_43) car))"
"(sort7.1 #f #f car3_43 #t result-l1_41 phase<?2_42))))))"
"(values"
"(extract_3(lambda(b/p_44)(not(provided-as-transformer? b/p_44))))"
"(extract_3 provided-as-transformer?)))))"
"(define-values"
"(variables->api-nonprovides)"
"(lambda(provides_45 all-vars_46)"
"(let-values(((result-l_47)"
"(let-values(((ht_48) all-vars_46))"
"(begin"
"(if((lambda(ht_49)(hash? ht_49)) ht_48)(void)(let-values()(default-in-hash ht_48)))"
"((letrec-values(((for-loop_50)"
"(lambda(i_51)"
"(if i_51"
"(let-values(((phase_52 vars_53)(hash-iterate-key+value ht_48 i_51)))"
"(let-values(((post-guard-var_54)(lambda() #t)))"
"(let-values()"
"(let-values(((l_55)"
"(let-values(((syms_56)"
"(hash-ref"
" provides_45"
" phase_52"
" '#hasheq())))"
"(let-values(((lst_57) vars_53))"
"(begin"
"(if(list? lst_57)"
"(void)"
"(let-values()(in-list lst_57)))"
"((letrec-values(((for-loop_58)"
"(lambda(lst_59)"
"(if(pair? lst_59)"
"(let-values(((var-sym_60)"
"(unsafe-car"
" lst_59))"
"((rest_61)"
"(unsafe-cdr"
" lst_59)))"
"(let-values(((post-guard-var_62)"
"(lambda()"
" #t)))"
"(let-values()"
"(if(hash-ref"
" syms_56"
" var-sym_60"
" #f)"
"(if(post-guard-var_62)"
"(for-loop_58"
" rest_61)"
" null)"
"(let-values()"
"(let-values(((elem_63)"
"(let-values()"
"(let-values()"
" var-sym_60))))"
"(let-values(((result_64)"
"(if(post-guard-var_62)"
"(for-loop_58"
" rest_61)"
" null)))"
"(cons"
" elem_63"
" result_64))))))))"
" null))))"
" for-loop_58)"
" lst_57))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_65)"
"(lambda()"
"(let-values()"
"(let-values(((post-guard-var_66)"
"(lambda() #f)))"
"(let-values()"
"(if(null? l_55)"
"(if(post-guard-var_66)"
"(for-loop_65)"
"(if(post-guard-var_54)"
"(for-loop_50"
"(hash-iterate-next ht_48 i_51))"
" null))"
"(let-values()"
"(let-values(((elem_67)"
"(let-values()"
"(let-values()"
"(cons"
" phase_52"
"(let-values(((l10_68)"
" l_55)"
"((symbol<?11_69)"
" symbol<?))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" l10_68"
" symbol<?11_69)))))))"
"(let-values(((result_70)"
"(if(post-guard-var_66)"
"(for-loop_65)"
"(if(post-guard-var_54)"
"(for-loop_50"
"(hash-iterate-next"
" ht_48"
" i_51))"
" null))))"
"(cons"
" elem_67"
" result_70)))))))))))"
" for-loop_65)))))))"
" null))))"
" for-loop_50)"
"(hash-iterate-first ht_48))))))"
"(let-values(((result-l7_72) result-l_47)((phase<?8_73) phase<?)((car9_74) car))"
"(sort7.1 #f #f car9_74 #t result-l7_72 phase<?8_73)))))"
"(void)"
"(void)"
"(define-values"
"(compiled->linklet-directory-or-bundle)"
"(lambda(c_1)(if(compiled-in-memory? c_1)(compiled-in-memory-linklet-directory c_1) c_1)))"
"(define-values"
"(module-compiled-current-name)"
"(lambda(c_2)"
"(let-values(((ld_3)(compiled->linklet-directory-or-bundle c_2)))"
"(let-values(((b_4)(if(1/linklet-bundle? ld_3) ld_3(hash-ref(1/linklet-directory->hash ld_3) #f))))"
"(hash-ref(1/linklet-bundle->hash b_4) 'name)))))"
"(define-values"
"(module-compiled-immediate-name)"
"(lambda(c_5)(let-values(((n_6)(module-compiled-current-name c_5)))(if(pair? n_6)(car(alt-reverse n_6)) n_6))))"
"(define-values"
"(change-module-name)"
"(lambda(c_7 name_8 prefix_9)"
"(let-values(((full-name_10)(if(null? prefix_9) name_8(append prefix_9(list name_8)))))"
"(let-values(((next-prefix_11)(if(null? prefix_9)(list name_8) full-name_10)))"
"(let-values(((recur_12)"
"(lambda(sub-c_13 name_14)"
"(if(equal?(module-compiled-current-name sub-c_13)(append next-prefix_11(list name_14)))"
" sub-c_13"
"(change-module-name sub-c_13 name_14 next-prefix_11)))))"
"(if(compiled-in-memory? c_7)"
"(let-values()"
"(let-values(((change-submodule-name_15)"
"(lambda(sub-c_18)(recur_12 sub-c_18(module-compiled-immediate-name sub-c_18)))))"
"(let-values(((pre-compiled-in-memorys_16)"
"(map2 change-submodule-name_15(compiled-in-memory-pre-compiled-in-memorys c_7))))"
"(let-values(((post-compiled-in-memorys_17)"
"(map2 change-submodule-name_15(compiled-in-memory-post-compiled-in-memorys c_7))))"
"(let-values(((the-struct_19) c_7))"
"(if(compiled-in-memory? the-struct_19)"
"(let-values(((pre-compiled-in-memorys8_20) pre-compiled-in-memorys_16)"
"((post-compiled-in-memorys9_21) post-compiled-in-memorys_17)"
"((linklet-directory10_22)"
"(let-values(((temp11_24)"
"(update-one-name"
"(let-values(((ld_27)(compiled->linklet-directory-or-bundle c_7)))"
"(if(1/linklet-bundle? ld_27)"
" ld_27"
"(hash-ref(1/linklet-directory->hash ld_27) #f)))"
" full-name_10))"
"((temp12_25)(symbol? full-name_10))"
"((temp13_26)"
"(append pre-compiled-in-memorys_16 post-compiled-in-memorys_17)))"
"(rebuild-linklet-directory5.1 temp12_25 #t temp11_24 temp13_26))))"
"(compiled-in-memory1.1"
" linklet-directory10_22"
"(compiled-in-memory-original-self the-struct_19)"
"(compiled-in-memory-requires the-struct_19)"
"(compiled-in-memory-provides the-struct_19)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_19)"
"(compiled-in-memory-compile-time-inspector the-struct_19)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_19)"
"(compiled-in-memory-mpis the-struct_19)"
"(compiled-in-memory-syntax-literals the-struct_19)"
" pre-compiled-in-memorys8_20"
" post-compiled-in-memorys9_21"
"(compiled-in-memory-namespace-scopes the-struct_19)"
"(compiled-in-memory-purely-functional? the-struct_19)))"
"                        (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_19)))))))"
"(if(1/linklet-directory? c_7)"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_28)(1/linklet-directory->hash c_7)))"
"(begin"
"(if((lambda(ht_29)(hash? ht_29)) ht_28)(void)(let-values()(default-in-hash ht_28)))"
"((letrec-values(((for-loop_30)"
"(lambda(table_31 i_32)"
"(if i_32"
"(let-values(((key_33 val_34)(hash-iterate-key+value ht_28 i_32)))"
"(let-values(((table_35)"
"(let-values(((table_36) table_31))"
"(let-values(((table_37)"
"(let-values()"
"(let-values(((key_38 val_39)"
"(let-values()"
"(values"
" key_33"
"(if(not key_33)"
"(update-one-name"
" val_34"
" full-name_10)"
"(recur_12"
" val_34"
" key_33))))))"
"(hash-set table_36 key_38 val_39)))))"
"(values table_37)))))"
"(if(not #f)"
"(for-loop_30 table_35(hash-iterate-next ht_28 i_32))"
" table_35)))"
" table_31))))"
" for-loop_30)"
" '#hasheq()"
"(hash-iterate-first ht_28))))))"
"(let-values()(update-one-name c_7 full-name_10)))))))))"
"(define-values"
"(update-one-name)"
"(lambda(lb_40 name_41)(1/hash->linklet-bundle(hash-set(1/linklet-bundle->hash lb_40) 'name name_41))))"
"(define-values"
"(rebuild-linklet-directory5.1)"
"(lambda(bundle-ok?1_42 bundle-ok?2_43 main3_44 submods4_45)"
"(let-values(((main_46) main3_44))"
"(let-values(((submods_47) submods4_45))"
"(let-values(((bundle-ok?_48)(if bundle-ok?2_43 bundle-ok?1_42 #f)))"
"(let-values()"
"(if(if(null? submods_47) bundle-ok?_48 #f)"
" main_46"
"(1/hash->linklet-directory"
"(hash-set"
"(let-values(((lst_49) submods_47))"
"(begin"
"(if(list? lst_49)(void)(let-values()(in-list lst_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(ht_51 lst_52)"
"(if(pair? lst_52)"
"(let-values(((submod_53)(unsafe-car lst_52))"
"((rest_54)(unsafe-cdr lst_52)))"
"(let-values(((ht_55)"
"(let-values(((ht_56) ht_51))"
"(let-values(((ht_57)"
"(let-values()"
"(let-values(((name_58)"
"(module-compiled-immediate-name"
" submod_53)))"
"(if(hash-ref ht_56 name_58 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-compiled-submodules"
"                                                                                   \"change would result in duplicate submodule name\""
"                                                                                   \"name\""
" name_58))"
"(let-values()"
"(hash-set"
" ht_56"
" name_58"
"(compiled->linklet-directory-or-bundle"
" submod_53))))))))"
"(values ht_57)))))"
"(if(not #f)(for-loop_50 ht_55 rest_54) ht_55)))"
" ht_51))))"
" for-loop_50)"
" '#hasheq()"
" lst_49)))"
" #f"
" main_46)))))))))"
"(void)"
"(void)"
"(define-values"
"(1/compiled-expression?)"
"(lambda(c_1)"
"(let-values(((or-part_2)(compiled-in-memory? c_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(1/linklet-directory? c_1)))(if or-part_3 or-part_3(1/linklet-bundle? c_1)))))))"
"(define-values"
"(1/compiled-module-expression?)"
"(lambda(c_4)"
"(let-values(((ld_5)(compiled->linklet-directory-or-bundle c_4)))"
"(let-values(((or-part_6)"
"(if(1/linklet-directory? ld_5)"
"(if(let-values(((b_7)(hash-ref(1/linklet-directory->hash ld_5) #f #f)))"
"(if b_7(hash-ref(1/linklet-bundle->hash b_7) 'decl #f) #f))"
" #t"
" #f)"
" #f)))"
"(if or-part_6"
" or-part_6"
"(if(1/linklet-bundle? ld_5)(if(hash-ref(1/linklet-bundle->hash ld_5) 'decl #f) #t #f) #f))))))"
"(define-values"
"(1/module-compiled-name)"
"(case-lambda"
"((c_8)"
"(begin"
"(if(1/compiled-module-expression? c_8)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_8)))"
"(module-compiled-current-name c_8)))"
"((c_9 name_10)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_9)"
"(void)"
"                      (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_13)(symbol? name_10)))"
"(if or-part_13"
" or-part_13"
"(if(pair? name_10)(if(list? name_10)(andmap2 symbol? name_10) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-name"
"                           \"(or/c symbol? (cons/c symbol? (non-empty-listof symbol?)))\""
" name_10)))"
"(values))))"
"(let-values(((i-name_11 prefix_12)"
"(if(symbol? name_10)"
"(values name_10 null)"
"(let-values(((r_14)(alt-reverse name_10)))(values(car r_14)(alt-reverse(cdr r_14)))))))"
"(change-module-name c_9 i-name_11 prefix_12)))))))"
"(define-values"
"(1/module-compiled-submodules)"
"(case-lambda"
"((c_15 non-star?_16)"
"(begin"
"(if(1/compiled-module-expression? c_15)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_15)))"
"(if(compiled-in-memory? c_15)"
"(let-values()"
"(if non-star?_16"
"(compiled-in-memory-pre-compiled-in-memorys c_15)"
"(compiled-in-memory-post-compiled-in-memorys c_15)))"
"(let-values()"
"(if(1/linklet-directory? c_15)"
"(let-values()"
"(let-values(((ht_17)(1/linklet-directory->hash c_15)))"
"(let-values(((bh_18)(1/linklet-bundle->hash(hash-ref ht_17 #f))))"
"(let-values(((names_19)(hash-ref bh_18(if non-star?_16 'pre 'post) null)))"
"(let-values(((lst_20) names_19))"
"(begin"
"(if(list? lst_20)(void)(let-values()(in-list lst_20)))"
"((letrec-values(((for-loop_21)"
"(lambda(lst_22)"
"(if(pair? lst_22)"
"(let-values(((name_23)(unsafe-car lst_22))"
"((rest_24)(unsafe-cdr lst_22)))"
"(let-values(((post-guard-var_25)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_26)"
"(let-values()"
"(let-values()(hash-ref ht_17 name_23)))))"
"(let-values(((result_27)"
"(if(post-guard-var_25)"
"(for-loop_21 rest_24)"
" null)))"
"(cons elem_26 result_27))))))"
" null))))"
" for-loop_21)"
" lst_20)))))))"
"(let-values() null))))))"
"((c_28 non-star?_29 submods_30)"
"(begin"
"(if(1/compiled-module-expression? c_28)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_28)))"
"(if(if(list? submods_30)(andmap2 1/compiled-module-expression? submods_30) #f)"
"(void)"
"(let-values()"
"          (raise-argument-error 'module-compiled-submodules \"(listof compiled-module-expression?)\" submods_30)))"
"(if(if(null? submods_30)"
"(let-values(((or-part_31)(1/linklet-bundle?(compiled->linklet-directory-or-bundle c_28))))"
"(if or-part_31"
" or-part_31"
"(if(compiled-in-memory? c_28)"
"(null?"
"(if non-star?_29"
"(compiled-in-memory-pre-compiled-in-memorys c_28)"
"(compiled-in-memory-post-compiled-in-memorys c_28)))"
" #f)))"
" #f)"
"(let-values() c_28)"
"(if(if(compiled-in-memory? c_28)(andmap2 compiled-in-memory? submods_30) #f)"
"(let-values()"
"(let-values(((pre-compiled-in-memorys_32)"
"(if non-star?_29 submods_30(compiled-in-memory-pre-compiled-in-memorys c_28))))"
"(let-values(((post-compiled-in-memorys_33)"
"(if non-star?_29(compiled-in-memory-post-compiled-in-memorys c_28) submods_30)))"
"(let-values(((n-c_34)(normalize-to-linklet-directory c_28)))"
"(fixup-submodule-names"
"(let-values(((the-struct_35) n-c_34))"
"(if(compiled-in-memory? the-struct_35)"
"(let-values(((pre-compiled-in-memorys1_36) pre-compiled-in-memorys_32)"
"((post-compiled-in-memorys2_37) post-compiled-in-memorys_33)"
"((linklet-directory3_38)"
"(let-values(((temp4_40)"
"(reset-submodule-names"
"(hash-ref"
"(1/linklet-directory->hash"
"(compiled->linklet-directory-or-bundle n-c_34))"
" #f)"
" non-star?_29"
" submods_30))"
"((temp5_41)(symbol?(module-compiled-current-name c_28)))"
"((temp6_42)"
"(append pre-compiled-in-memorys_32 post-compiled-in-memorys_33)))"
"(rebuild-linklet-directory5.1 temp5_41 #t temp4_40 temp6_42))))"
"(compiled-in-memory1.1"
" linklet-directory3_38"
"(compiled-in-memory-original-self the-struct_35)"
"(compiled-in-memory-requires the-struct_35)"
"(compiled-in-memory-provides the-struct_35)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_35)"
"(compiled-in-memory-compile-time-inspector the-struct_35)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_35)"
"(compiled-in-memory-mpis the-struct_35)"
"(compiled-in-memory-syntax-literals the-struct_35)"
" pre-compiled-in-memorys1_36"
" post-compiled-in-memorys2_37"
"(compiled-in-memory-namespace-scopes the-struct_35)"
"(compiled-in-memory-purely-functional? the-struct_35)))"
"                       (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_35))))))))"
"(let-values()"
"(let-values(((n-c_43)(normalize-to-linklet-directory c_28)))"
"(fixup-submodule-names"
"(let-values(((temp7_44)"
"(reset-submodule-names"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory-or-bundle n-c_43)) #f)"
" non-star?_29"
" submods_30))"
"((temp8_45)"
"(map2"
" compiled->linklet-directory-or-bundle"
"(append"
"(if non-star?_29 submods_30(1/module-compiled-submodules c_28 #t))"
"(if non-star?_29(1/module-compiled-submodules c_28 #f) submods_30)))))"
"(rebuild-linklet-directory5.1 #f #f temp7_44 temp8_45)))))))))))"
"(define-values"
"(1/module-compiled-language-info)"
"(lambda(c_46)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_46)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-language-info \"compiled-module-expression?\" c_46)))"
"(values))))"
"(let-values(((h_47)(compiled-module->h c_46)))(hash-ref h_47 'language-info #f)))))"
"(define-values"
"(1/module-compiled-imports)"
"(lambda(c_48)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_48)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_48)))"
"(values))))"
"(let-values(((inst_49)(compiled-module->declaration-instance c_48)))"
"(1/instance-variable-value inst_49 'requires)))))"
"(define-values"
"(1/module-compiled-exports)"
"(lambda(c_50)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_50)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_50)))"
"(values))))"
"(let-values(((inst_51)(compiled-module->declaration-instance c_50)))"
"(provides->api-provides"
"(1/instance-variable-value inst_51 'provides)"
"(1/instance-variable-value inst_51 'self-mpi))))))"
"(define-values"
"(1/module-compiled-indirect-exports)"
"(lambda(c_52)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_52)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-indirect-imports \"compiled-module-expression?\" c_52)))"
"(values))))"
"(let-values(((h_53 inst_54)(compiled-module->h+declaration-instance c_52)))"
"(let-values(((min-phase_55)(hash-ref h_53 'min-phase 0)))"
"(let-values(((max-phase_56)(hash-ref h_53 'max-phase 0)))"
"(variables->api-nonprovides"
"(1/instance-variable-value inst_54 'provides)"
"(let-values(((start_57) min-phase_55)((end_58)(add1 max-phase_56))((inc_59) 1))"
"(begin"
"(if(if(real? start_57)(if(real? end_58)(real? inc_59) #f) #f)"
"(void)"
"(let-values()(in-range start_57 end_58 inc_59)))"
"((letrec-values(((for-loop_60)"
"(lambda(table_61 pos_62)"
"(if(< pos_62 end_58)"
"(let-values(((phase-level_63) pos_62))"
"(let-values(((table_64)"
"(let-values(((table_65) table_61))"
"(let-values(((table_66)"
"(let-values()"
"(let-values(((key_67 val_68)"
"(let-values()"
"(let-values(((linklet_69)"
"(hash-ref"
" h_53"
" phase-level_63"
" #f)))"
"(values"
" phase-level_63"
"(if linklet_69"
"(1/linklet-export-variables"
" linklet_69)"
" null))))))"
"(hash-set table_65 key_67 val_68)))))"
"(values table_66)))))"
"(if(not #f)(for-loop_60 table_64(+ pos_62 inc_59)) table_64)))"
" table_61))))"
" for-loop_60)"
" '#hash()"
" start_57))))))))))"
"(define-values"
"(1/module-compiled-cross-phase-persistent?)"
"(lambda(c_70)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_70)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-cross-phase-persistent?"
"                         \"compiled-module-expression?\""
" c_70)))"
"(values))))"
"(let-values(((h_71)(compiled-module->h c_70)))(hash-ref h_71 'cross-phase-persistent? #f)))))"
"(define-values"
"(normalize-to-linklet-directory)"
"(lambda(c_72)"
"(if(1/linklet-directory?(compiled->linklet-directory-or-bundle c_72))"
"(let-values() c_72)"
"(if(1/linklet-bundle? c_72)"
"(let-values()(1/hash->linklet-directory(hasheq #f c_72)))"
"(let-values()"
"(let-values(((the-struct_73) c_72))"
"(if(compiled-in-memory? the-struct_73)"
"(let-values(((linklet-directory9_74)"
"(normalize-to-linklet-directory(compiled-in-memory-linklet-directory c_72))))"
"(compiled-in-memory1.1"
" linklet-directory9_74"
"(compiled-in-memory-original-self the-struct_73)"
"(compiled-in-memory-requires the-struct_73)"
"(compiled-in-memory-provides the-struct_73)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_73)"
"(compiled-in-memory-compile-time-inspector the-struct_73)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_73)"
"(compiled-in-memory-mpis the-struct_73)"
"(compiled-in-memory-syntax-literals the-struct_73)"
"(compiled-in-memory-pre-compiled-in-memorys the-struct_73)"
"(compiled-in-memory-post-compiled-in-memorys the-struct_73)"
"(compiled-in-memory-namespace-scopes the-struct_73)"
"(compiled-in-memory-purely-functional? the-struct_73)))"
"              (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_73))))))))"
"(define-values(fixup-submodule-names)(lambda(c_75)(1/module-compiled-name c_75(1/module-compiled-name c_75))))"
"(define-values"
"(reset-submodule-names)"
"(lambda(b_76 pre?_77 submods_78)"
"(1/hash->linklet-bundle"
"(hash-set"
"(1/linklet-bundle->hash b_76)"
"(if pre?_77 'pre 'post)"
"(map2 module-compiled-immediate-name submods_78)))))"
"(void)"
"(void)"
"(define-values"
"(compile-module13.1)"
"(lambda(force-linklet-directory?1_6"
" force-linklet-directory?6_7"
" modules-being-compiled4_8"
" modules-being-compiled9_9"
" need-compiled-submodule-rename?5_10"
" need-compiled-submodule-rename?10_11"
" serializable?2_12"
" serializable?7_13"
" to-source?3_14"
" to-source?8_15"
" p11_16"
" cctx12_17)"
"(let-values(((p_18) p11_16))"
"(let-values(((cctx_19) cctx12_17))"
"(let-values(((force-linklet-directory?_20)(if force-linklet-directory?6_7 force-linklet-directory?1_6 #f)))"
"(let-values(((serializable?_21)(if serializable?7_13 serializable?2_12 #f)))"
"(let-values(((to-source?_22)(if to-source?8_15 to-source?3_14 #f)))"
"(let-values(((modules-being-compiled_23)"
"(if modules-being-compiled9_9 modules-being-compiled4_8(make-hasheq))))"
"(let-values(((need-compiled-submodule-rename?_24)"
"(if need-compiled-submodule-rename?10_11 need-compiled-submodule-rename?5_10 #t)))"
"(let-values()"
"(let-values(((full-module-name_25)"
"(let-values(((parent-full-name_30)(compile-context-full-module-name cctx_19))"
"((name_31)(syntax-e$1(parsed-module-name-id p_18))))"
"(if parent-full-name_30"
"(append"
"(if(list? parent-full-name_30) parent-full-name_30(list parent-full-name_30))"
"(list name_31))"
" name_31))))"
"(let-values(((compiled-submodules_26)(parsed-module-compiled-submodules p_18)))"
"(let-values(((get-submodules_27)"
"(lambda(star?_32)"
"(let-values(((ht_33) compiled-submodules_26))"
"(begin"
"(if((lambda(ht_34)(hash? ht_34)) ht_33)"
"(void)"
"(let-values()(default-in-hash ht_33)))"
"((letrec-values(((for-loop_35)"
"(lambda(i_36)"
"(if i_36"
"(let-values(((name_37 star?+compiled_38)"
"(hash-iterate-key+value ht_33 i_36)))"
"(let-values(((post-guard-var_39)(lambda() #t)))"
"(let-values()"
"(if(eq? star?_32(car star?+compiled_38))"
"(let-values()"
"(let-values(((elem_40)"
"(let-values()"
"(let-values()"
"(cons"
" name_37"
"(if(if need-compiled-submodule-rename?_24"
"(not"
"(parsed-module-compiled-module"
" p_18))"
" #f)"
"(update-submodule-names"
"(cdr"
" star?+compiled_38)"
" name_37"
" full-module-name_25)"
"(cdr"
" star?+compiled_38)))))))"
"(let-values(((result_41)"
"(if(post-guard-var_39)"
"(for-loop_35"
"(hash-iterate-next"
" ht_33"
" i_36))"
" null)))"
"(cons elem_40 result_41))))"
"(if(post-guard-var_39)"
"(for-loop_35(hash-iterate-next ht_33 i_36))"
" null)))))"
" null))))"
" for-loop_35)"
"(hash-iterate-first ht_33)))))))"
"(let-values(((pre-submodules_28)(get-submodules_27 #f)))"
"(let-values(((post-submodules_29)(get-submodules_27 #t)))"
"(let-values(((c1_42)(parsed-module-compiled-module p_18)))"
"(if c1_42"
"((lambda(c_43)"
"(let-values(((name_44 prefix_45)"
"(if(symbol? full-module-name_25)"
"(values full-module-name_25 null)"
"(let-values(((r_47)(alt-reverse full-module-name_25)))"
"(values(car r_47)(alt-reverse(cdr r_47)))))))"
"(let-values(((m_46)(change-module-name c_43 name_44 prefix_45)))"
"(1/module-compiled-submodules"
"(1/module-compiled-submodules m_46 #t(map2 cdr pre-submodules_28))"
" #f"
"(map2 cdr post-submodules_29)))))"
" c1_42)"
"(let-values()"
"(let-values(((...r/compile/module.rkt:74:4_48) compile-module-from-parsed36.1)"
"((p37_49) p_18)"
"((cctx38_50) cctx_19)"
"((full-module-name39_51) full-module-name_25)"
"((force-linklet-directory?40_52) force-linklet-directory?_20)"
"((serializable?41_53) serializable?_21)"
"((to-source?42_54) to-source?_22)"
"((modules-being-compiled43_55) modules-being-compiled_23)"
"((pre-submodules44_56) pre-submodules_28)"
"((post-submodules45_57) post-submodules_29)"
"((need-compiled-submodule-rename?46_58)"
" need-compiled-submodule-rename?_24))"
"(compile-module-from-parsed34.1"
" force-linklet-directory?40_52"
" full-module-name39_51"
" modules-being-compiled43_55"
" need-compiled-submodule-rename?46_58"
" post-submodules45_57"
" pre-submodules44_56"
" serializable?41_53"
" to-source?42_54"
" p37_49"
" cctx38_50))))))))))))))))))))"
"(define-values"
"(lifted/1.1$10 lifted/2.1$10 lifted/3.1$9 lifted/4.1$9 lifted/5.1$9)"
"(make-struct-type"
" 'compile-module-from-parsed"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'compile-module-from-parsed"
"(case-lambda((self_100 p_101 cctx_102)(apply missing-kw self_100 p_101 cctx_102 null))))))"
"(current-inspector)"
"(case-lambda((self_103 p_104 cctx_105)(apply missing-kw self_103 p_104 cctx_105 null)))))"
"(define-values"
"(compile-module-from-parsed34.1)"
"(lambda(force-linklet-directory?17_106"
" full-module-name16_107"
" modules-being-compiled20_108"
" need-compiled-submodule-rename?23_109"
" post-submodules22_110"
" pre-submodules21_111"
" serializable?18_112"
" to-source?19_113"
" p32_114"
" cctx33_115)"
"(let-values(((p_116) p32_114))"
"(let-values(((cctx_117) cctx33_115))"
"(let-values(((full-module-name_118) full-module-name16_107))"
"(let-values(((force-linklet-directory?_119) force-linklet-directory?17_106))"
"(let-values(((serializable?_120) serializable?18_112))"
"(let-values(((to-source?_121) to-source?19_113))"
"(let-values(((modules-being-compiled_122) modules-being-compiled20_108))"
"(let-values(((pre-submodules_123) pre-submodules21_111))"
"(let-values(((post-submodules_124) post-submodules22_110))"
"(let-values(((need-compiled-submodule-rename?_125) need-compiled-submodule-rename?23_109))"
"(let-values()"
"(let-values()"
"(let-values(((enclosing-self_126)(compile-context-module-self cctx_117)))"
"(let-values(((self_127)(parsed-module-self p_116)))"
"(let-values(((requires_128)(parsed-module-requires p_116)))"
"(let-values(((provides_129)(parsed-module-provides p_116)))"
"(let-values(((encoded-root-expand-ctx-box_130)"
"(box(parsed-module-encoded-root-ctx p_116))))"
"(let-values(((body-context-simple?_131)(parsed-module-root-ctx-simple? p_116)))"
"(let-values(((language-info_132)"
"(filter-language-info"
"(syntax-property$1(parsed-s p_116) 'module-language))))"
"(let-values(((bodys_133)(parsed-module-body p_116)))"
"(let-values(((empty-result-for-module->namespace?_134) #f))"
"(let-values(((mpis_135)(make-module-path-index-table)))"
"(let-values(((body-cctx_136)"
"(let-values(((the-struct_154) cctx_117))"
"(if(compile-context? the-struct_154)"
"(let-values(((phase47_155) 0)"
"((self48_156) self_127)"
"((module-self49_157) self_127)"
"((full-module-name50_158)"
" full-module-name_118)"
"((lazy-syntax-literals?51_159) #t))"
"(compile-context1.1"
"(compile-context-namespace the-struct_154)"
" phase47_155"
" self48_156"
" module-self49_157"
" full-module-name50_158"
" lazy-syntax-literals?51_159"
"(compile-context-header the-struct_154)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"compile-context?\""
" the-struct_154)))))"
"(let-values(((cross-phase-persistent?_137) #f))"
"(let-values(((side-effects_138)(make-hasheqv)))"
"(let-values(((check-side-effects!_139)"
"(lambda(e_160"
" expected-results_161"
" phase_162"
" required-reference?_163)"
"(if(hash-ref side-effects_138 phase_162 #f)"
"(void)"
"(let-values()"
"(if(let-values(((e52_164) e_160)"
"((expected-results53_165)"
" expected-results_161)"
"((required-reference?54_166)"
" required-reference?_163))"
"(any-side-effects?12.1"
" #f"
" #f"
" #f"
" #f"
" e52_164"
" expected-results53_165"
" required-reference?54_166))"
"(let-values()"
"(hash-set! side-effects_138 phase_162 #t))"
"(void)))))))"
"(let-values((()"
"(begin"
"(if(if need-compiled-submodule-rename?_125"
" modules-being-compiled_122"
" #f)"
"(let-values()"
"(begin"
"(if(null? post-submodules_124)"
"(void)"
"(let-values()"
"(error"
"                                                                                   \"internal error: have post submodules, but not already compiled\")))"
"(register-compiled-submodules"
" modules-being-compiled_122"
" pre-submodules_123"
" self_127)))"
"(void))"
"(values))))"
"(let-values(((body-linklets_140"
" min-phase_141"
" max-phase_142"
" phase-to-link-module-uses_143"
" phase-to-link-module-uses-expr_144"
" phase-to-link-extra-inspectorsss_145"
" syntax-literals_146"
" root-ctx-pos_147)"
"(let-values(((bodys55_168) bodys_133)"
"((body-cctx56_169) body-cctx_136)"
"((mpis57_170) mpis_135)"
"((temp58_171)"
"(list"
"(list get-syntax-literal!-id)"
"(list set-transformer!-id)))"
"((temp59_172) '((void)))"
"((temp60_173) '(0))"
"((encoded-root-expand-ctx-box61_174)"
" encoded-root-expand-ctx-box_130)"
"((body-context-simple?62_175)"
" body-context-simple?_131)"
"((check-side-effects!63_176)"
" check-side-effects!_139)"
"((temp64_177)"
"(lambda(body_180 cctx_181)"
"(if(parsed-#%declare? body_180)"
"(let-values()"
"(let-values(((ok?_182"
" _67_183"
" kw68_184)"
"(let-values(((s_195)"
"(parsed-s"
" body_180)))"
"(let-values(((orig-s_196)"
" s_195))"
"(let-values(((_67_197"
" kw68_198)"
"(let-values(((s_199)"
"(if(syntax?$1"
" s_195)"
"(syntax-e$1"
" s_195)"
" s_195)))"
"(if(pair?"
" s_199)"
"(let-values(((_69_200)"
"(let-values(((s_202)"
"(car"
" s_199)))"
" s_202))"
"((kw70_201)"
"(let-values(((s_203)"
"(cdr"
" s_199)))"
"(let-values(((s_204)"
"(if(syntax?$1"
" s_203)"
"(syntax-e$1"
" s_203)"
" s_203)))"
"(let-values(((flat-s_205)"
"(to-syntax-list.1"
" s_204)))"
"(if(not"
" flat-s_205)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_196))"
"(let-values()"
" flat-s_205)))))))"
"(values"
" _69_200"
" kw70_201))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_196)))))"
"(values"
" #t"
" _67_197"
" kw68_198))))))"
"(begin"
"(let-values(((lst_206)"
" kw68_184))"
"(begin"
"(if(list? lst_206)"
"(void)"
"(let-values()"
"(in-list"
" lst_206)))"
"((letrec-values(((for-loop_207)"
"(lambda(lst_208)"
"(if(pair?"
" lst_208)"
"(let-values(((kw_209)"
"(unsafe-car"
" lst_208))"
"((rest_210)"
"(unsafe-cdr"
" lst_208)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(eq?"
"(syntax-e$1"
" kw_209)"
" '#:cross-phase-persistent)"
"(let-values()"
"(set! cross-phase-persistent?_137"
" #t))"
"(void))"
"(if(eq?"
"(syntax-e$1"
" kw_209)"
" '#:empty-namespace)"
"(let-values()"
"(begin"
"(set! empty-result-for-module->namespace?_134"
" #t)"
"(set-box!"
" encoded-root-expand-ctx-box_130"
" #f)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_207"
" rest_210)"
"(values))))"
"(values)))))"
" for-loop_207)"
" lst_206)))"
"(void)"
" #f)))"
"(let-values() #f))))"
"((temp65_178)"
"(lambda(mod-name_211 phase_212)"
"(let-values(((ht_213)"
"(if modules-being-compiled_122"
"(hash-ref"
" modules-being-compiled_122"
" mod-name_211"
" #f)"
" #f)))"
"(if ht_213"
"(hash-ref"
" ht_213"
" phase_212"
" #f)"
" #f))))"
"((to-source?66_179)"
" to-source?_121))"
"(compile-forms27.1"
" temp58_171"
" temp59_172"
" #t"
" check-side-effects!63_176"
" #t"
" #f"
" #f"
" #f"
" #f"
" encoded-root-expand-ctx-box61_174"
" #t"
" temp60_173"
" #t"
" temp65_178"
" #t"
" temp64_177"
" #t"
" body-context-simple?62_175"
" #t"
" to-source?66_179"
" #t"
" bodys55_168"
" body-cctx56_169"
" mpis57_170))))"
"(let-values((()"
"(begin"
"(if modules-being-compiled_122"
"(let-values()"
"(hash-set!"
" modules-being-compiled_122"
"(1/module-path-index-resolve self_127)"
"(let-values(((ht_214)"
" body-linklets_140))"
"(begin"
"(if((lambda(ht_215)"
"(hash? ht_215))"
" ht_214)"
"(void)"
"(let-values()"
"(default-in-hash ht_214)))"
"((letrec-values(((for-loop_216)"
"(lambda(table_217"
" i_218)"
"(if i_218"
"(let-values(((phase_219"
" linklet_220)"
"(hash-iterate-key+value"
" ht_214"
" i_218)))"
"(let-values(((table_221)"
"(let-values(((table_222)"
" table_217))"
"(let-values(((table_223)"
"(let-values()"
"(let-values(((key_224"
" val_225)"
"(let-values()"
"(values"
" phase_219"
"(module-linklet-info2.1"
" linklet_220"
"(hash-ref"
" phase-to-link-module-uses_143"
" phase_219"
" #f)"
" self_127)))))"
"(hash-set"
" table_222"
" key_224"
" val_225)))))"
"(values"
" table_223)))))"
"(if(not"
" #f)"
"(for-loop_216"
" table_221"
"(hash-iterate-next"
" ht_214"
" i_218))"
" table_221)))"
" table_217))))"
" for-loop_216)"
" '#hasheq()"
"(hash-iterate-first ht_214))))))"
"(void))"
"(values))))"
"(let-values(((declaration-linklet_148)"
"(if serializable?_120"
"((if to-source?_121"
" values"
"(lambda(s_226)"
"(let-values()"
"(1/compile-linklet s_226 'decl))))"
"(list"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
" '(self-mpi"
" requires"
" provides"
" phase-to-link-modules)"
"(list"
" 'define-values"
" '(self-mpi)"
"(add-module-path-index!"
" mpis_135"
" self_127))"
"(list"
" 'define-values"
" '(requires)"
"(let-values(((requires71_228)"
" requires_128)"
"((mpis72_229) mpis_135)"
"((temp73_230) #f))"
"(generate-deserialize6.1"
" temp73_230"
" #t"
" requires71_228"
" mpis72_229)))"
"(list"
" 'define-values"
" '(provides)"
"(let-values(((provides74_232)"
" provides_129)"
"((mpis75_233) mpis_135)"
"((temp76_234) #f))"
"(generate-deserialize6.1"
" temp76_234"
" #t"
" provides74_232"
" mpis75_233)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_144)))"
" #f)))"
"(let-values(((syntax-literals-linklet_149)"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_146))"
"((if to-source?_121"
" values"
"(lambda(s_235)"
"(let-values()"
"(1/compile-linklet"
" s_235"
" 'syntax-literals))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id)"
"(list*"
" deserialized-syntax-vector-id"
"(if serializable?_120"
"(list deserialize-syntax-id)"
" '()))"
" instance-imports)"
"(list*"
" get-syntax-literal!-id"
" '(get-encoded-root-expand-ctx))"
"(qq-append"
"(let-values(((syntax-literals77_237)"
" syntax-literals_146)"
"((mpis78_238) mpis_135)"
"((self79_239) self_127)"
"((temp80_240)"
"(not"
" serializable?_120)))"
"(generate-lazy-syntax-literals!9.1"
" temp80_240"
" #t"
" syntax-literals77_237"
" mpis78_238"
" self79_239))"
"(list"
"(list"
" 'define-values"
" '(get-encoded-root-expand-ctx)"
"(if root-ctx-pos_147"
"(let-values()"
"(list"
" 'lambda"
" '()"
"(generate-lazy-syntax-literal-lookup"
" root-ctx-pos_147)))"
"(if empty-result-for-module->namespace?_134"
"(let-values() ''empty)"
"(let-values() ''#f))))))))"
" #f)))"
"(let-values(((syntax-literals-data-linklet_150)"
"(if serializable?_120"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_146))"
"((if to-source?_121"
" values"
"(lambda(s_241)"
"(let-values()"
"(1/compile-linklet"
" s_241"
" 'syntax-literals-data))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
"(list"
" deserialized-syntax-vector-id"
" deserialize-syntax-id)"
"(list"
" 'define-values"
"(list"
" deserialized-syntax-vector-id)"
"(list*"
" 'make-vector"
"(syntax-literals-count"
" syntax-literals_146)"
" '(#f)))"
"(let-values()"
"(generate-lazy-syntax-literals-data!"
" syntax-literals_146"
" mpis_135))))"
" #f)"
" #f)))"
"(let-values(((data-linklet_151)"
"(if serializable?_120"
"((if to-source?_121"
" values"
"(lambda(s_242)"
"(let-values()"
"(1/compile-linklet"
" s_242"
" 'data))))"
"(list"
" 'linklet"
"(list deserialize-imports)"
"(list mpi-vector-id)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize"
" mpis_135))))"
" #f)))"
"(let-values(((bundle_152)"
"(let-values(((bundle_243)"
"(hash-set"
" body-linklets_140"
" 'name"
" full-module-name_118)))"
"(let-values(((bundle_244)"
"(hash-set"
" bundle_243"
" 'decl"
"(let-values(((or-part_245)"
" declaration-linklet_148))"
"(if or-part_245"
" or-part_245"
" 'in-memory)))))"
"(let-values(((bundle_246)"
"(if data-linklet_151"
"(hash-set"
" bundle_244"
" 'data"
" data-linklet_151)"
" bundle_244)))"
"(let-values(((bundle_247)"
"(if syntax-literals-linklet_149"
"(hash-set"
" bundle_246"
" 'stx"
" syntax-literals-linklet_149)"
" bundle_246)))"
"(let-values(((bundle_248)"
"(if syntax-literals-data-linklet_150"
"(hash-set"
" bundle_247"
" 'stx-data"
" syntax-literals-data-linklet_150)"
" bundle_247)))"
"(let-values(((bundle_249)"
"(if(null?"
" pre-submodules_123)"
" bundle_248"
"(hash-set"
" bundle_248"
" 'pre"
"(map2"
" car"
" pre-submodules_123)))))"
"(let-values(((bundle_250)"
"(if(null?"
" post-submodules_124)"
" bundle_249"
"(hash-set"
" bundle_249"
" 'post"
"(map2"
" car"
" post-submodules_124)))))"
"(let-values(((bundle_251)"
"(if cross-phase-persistent?_137"
"(hash-set"
" bundle_250"
" 'cross-phase-persistent?"
" #t)"
" bundle_250)))"
"(let-values(((bundle_252)"
"(if language-info_132"
"(hash-set"
" bundle_251"
" 'language-info"
" language-info_132)"
" bundle_251)))"
"(let-values(((bundle_253)"
"(if(zero?"
" min-phase_141)"
" bundle_252"
"(hash-set"
" bundle_252"
" 'min-phase"
" min-phase_141))))"
"(let-values(((bundle_254)"
"(if(zero?"
" max-phase_142)"
" bundle_253"
"(hash-set"
" bundle_253"
" 'max-phase"
" max-phase_142))))"
"(let-values(((bundle_255)"
"(if(hash-count"
" side-effects_138)"
"(hash-set"
" bundle_254"
" 'side-effects"
"(let-values(((temp81_256)"
"(hash-keys"
" side-effects_138))"
"((<82_257)"
" <))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp81_256"
" <82_257)))"
" bundle_254)))"
"(let-values(((bundle_258)"
"(if empty-result-for-module->namespace?_134"
"(hash-set"
" bundle_255"
" 'module->namespace"
" 'empty)"
" bundle_255)))"
"(1/hash->linklet-bundle"
" bundle_258))))))))))))))))"
"(let-values(((ld_153)"
"(if(if(null? pre-submodules_123)"
"(if(null?"
" post-submodules_124)"
"(not"
" force-linklet-directory?_119)"
" #f)"
" #f)"
"(let-values() bundle_152)"
"(let-values()"
"((if to-source?_121"
" values"
" 1/hash->linklet-directory)"
"(let-values(((lst_259)"
"(append"
" pre-submodules_123"
" post-submodules_124)))"
"(begin"
"(if(list? lst_259)"
"(void)"
"(let-values()"
"(in-list lst_259)))"
"((letrec-values(((for-loop_260)"
"(lambda(ht_261"
" lst_262)"
"(if(pair?"
" lst_262)"
"(let-values(((sm_263)"
"(unsafe-car"
" lst_262))"
"((rest_264)"
"(unsafe-cdr"
" lst_262)))"
"(let-values(((ht_265)"
"(let-values(((ht_266)"
" ht_261))"
"(let-values(((ht_267)"
"(let-values()"
"(hash-set"
" ht_266"
"(car"
" sm_263)"
"((if to-source?_121"
" values"
" compiled-in-memory-linklet-directory)"
"(cdr"
" sm_263))))))"
"(values"
" ht_267)))))"
"(if(not"
" #f)"
"(for-loop_260"
" ht_265"
" rest_264)"
" ht_265)))"
" ht_261))))"
" for-loop_260)"
"(hasheq #f bundle_152)"
" lst_259))))))))"
"(if to-source?_121"
"(let-values() ld_153)"
"(let-values()"
"(compiled-in-memory1.1"
" ld_153"
" self_127"
" requires_128"
" provides_129"
" phase-to-link-module-uses_143"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_145"
"(mpis-as-vector mpis_135)"
"(syntax-literals-as-vector"
" syntax-literals_146)"
"(map2 cdr pre-submodules_123)"
"(map2 cdr post-submodules_124)"
" #f"
" #f))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack35.1$1)"
"(lambda(given-kws_268 given-args_269 p32_270 cctx33_271)"
"(let-values(((force-linklet-directory?17_272)(car given-args_269))"
"((given-kws_273)(cdr given-kws_268))"
"((given-args_274)(cdr given-args_269)))"
"(let-values(((full-module-name16_275)(car given-args_274))"
"((given-kws_276)(cdr given-kws_273))"
"((given-args_277)(cdr given-args_274)))"
"(let-values(((modules-being-compiled20_278)(car given-args_277))"
"((given-kws_279)(cdr given-kws_276))"
"((given-args_280)(cdr given-args_277)))"
"(let-values(((need-compiled-submodule-rename?23_281)(car given-args_280))"
"((given-kws_282)(cdr given-kws_279))"
"((given-args_283)(cdr given-args_280)))"
"(let-values(((post-submodules22_284)(car given-args_283))"
"((given-kws_285)(cdr given-kws_282))"
"((given-args_286)(cdr given-args_283)))"
"(let-values(((pre-submodules21_287)(car given-args_286))"
"((given-kws_288)(cdr given-kws_285))"
"((given-args_289)(cdr given-args_286)))"
"(let-values(((serializable?18_290)(car given-args_289))"
"((given-kws_291)(cdr given-kws_288))"
"((given-args_292)(cdr given-args_289)))"
"(let-values(((to-source?19_293)(car given-args_292)))"
"(compile-module-from-parsed34.1"
" force-linklet-directory?17_272"
" full-module-name16_275"
" modules-being-compiled20_278"
" need-compiled-submodule-rename?23_281"
" post-submodules22_284"
" pre-submodules21_287"
" serializable?18_290"
" to-source?19_293"
" p32_270"
" cctx33_271)))))))))))"
"(define-values"
"(compile-module-from-parsed36.1)"
"(lifted/2.1$10"
"(lambda(given-kws_294 given-argc_295)"
"(if(= given-argc_295 4)"
"(let-values(((l2_296) given-kws_294))"
"(if(pair? l2_296)"
"(if(eq?(car l2_296) '#:force-linklet-directory?)"
"(let-values(((l2_297)(cdr l2_296)))"
"(if(pair? l2_297)"
"(if(eq?(car l2_297) '#:full-module-name)"
"(let-values(((l2_298)(cdr l2_297)))"
"(if(pair? l2_298)"
"(if(eq?(car l2_298) '#:modules-being-compiled)"
"(let-values(((l2_299)(cdr l2_298)))"
"(if(pair? l2_299)"
"(if(eq?(car l2_299) '#:need-compiled-submodule-rename?)"
"(let-values(((l2_300)(cdr l2_299)))"
"(if(pair? l2_300)"
"(if(eq?(car l2_300) '#:post-submodules)"
"(let-values(((l2_301)(cdr l2_300)))"
"(if(pair? l2_301)"
"(if(eq?(car l2_301) '#:pre-submodules)"
"(let-values(((l2_302)(cdr l2_301)))"
"(if(pair? l2_302)"
"(if(eq?(car l2_302) '#:serializable?)"
"(let-values(((l2_303)(cdr l2_302)))"
"(if(pair? l2_303)"
"(if(eq?(car l2_303) '#:to-source?)(null?(cdr l2_303)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_304 given-args_305 p_306 cctx_307)(unpack35.1$1 given-kws_304 given-args_305 p_306 cctx_307)))"
" '(#:force-linklet-directory?"
" #:full-module-name"
" #:modules-being-compiled"
" #:need-compiled-submodule-rename?"
" #:post-submodules"
" #:pre-submodules"
" #:serializable?"
" #:to-source?)"
" '(#:force-linklet-directory?"
" #:full-module-name"
" #:modules-being-compiled"
" #:need-compiled-submodule-rename?"
" #:post-submodules"
" #:pre-submodules"
" #:serializable?"
" #:to-source?)))"
"(define-values"
"(update-submodule-names)"
"(lambda(cim_308 name_309 full-module-name_310)"
"(change-module-name"
" cim_308"
" name_309"
"(if(symbol? full-module-name_310)"
"(list full-module-name_310)"
"(alt-reverse(cdr(alt-reverse full-module-name_310)))))))"
"(define-values"
"(register-compiled-submodules)"
"(lambda(modules-being-compiled_311 pre-submodules_312 self_313)"
"(begin"
"(let-values(((lst_314) pre-submodules_312))"
"(begin"
"(if(list? lst_314)(void)(let-values()(in-list lst_314)))"
"((letrec-values(((for-loop_315)"
"(lambda(lst_316)"
"(if(pair? lst_316)"
"(let-values(((s_317)(unsafe-car lst_316))((rest_318)(unsafe-cdr lst_316)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((name_319)(car s_317)))"
"(let-values(((cim_320)(cdr s_317)))"
"(let-values(((phase-to-link-module-uses_321)"
"(compiled-in-memory-phase-to-link-module-uses"
" cim_320)))"
"(let-values(((ld_322)"
"(compiled-in-memory-linklet-directory"
" cim_320)))"
"(let-values(((sm-self_323)"
"(1/module-path-index-join"
"                                                                                             (list 'submod \".\" name_319)"
" self_313)))"
"(hash-set!"
" modules-being-compiled_311"
"(1/module-path-index-resolve"
" sm-self_323)"
"(let-values(((ht_324)"
"(1/linklet-bundle->hash"
"(if(1/linklet-directory?"
" ld_322)"
"(hash-ref"
"(1/linklet-directory->hash"
" ld_322)"
" #f)"
" ld_322))))"
"(begin"
"(if((lambda(ht_325)"
"(hash? ht_325))"
" ht_324)"
"(void)"
"(let-values()"
"(default-in-hash ht_324)))"
"((letrec-values(((for-loop_326)"
"(lambda(table_327"
" i_328)"
"(if i_328"
"(let-values(((phase_329"
" linklet_330)"
"(hash-iterate-key+value"
" ht_324"
" i_328)))"
"(let-values(((table_331)"
"(let-values(((table_332)"
" table_327))"
"(if(number?"
" phase_329)"
"(let-values(((table_333)"
" table_332))"
"(let-values(((table_334)"
"(let-values()"
"(let-values(((key_335"
" val_336)"
"(let-values()"
"(values"
" phase_329"
"(module-linklet-info2.1"
" linklet_330"
"(hash-ref"
" phase-to-link-module-uses_321"
" phase_329"
" #f)"
" self_313)))))"
"(hash-set"
" table_333"
" key_335"
" val_336)))))"
"(values"
" table_334)))"
" table_332))))"
"(if(not"
" #f)"
"(for-loop_326"
" table_331"
"(hash-iterate-next"
" ht_324"
" i_328))"
" table_331)))"
" table_327))))"
" for-loop_326)"
" '#hasheq()"
"(hash-iterate-first"
" ht_324)))))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_315 rest_318)(values))))"
"(values)))))"
" for-loop_315)"
" lst_314)))"
"(void))))"
"(define-values"
"(filter-language-info)"
"(lambda(li_337)"
"(if(vector? li_337)"
"(if(= 3(vector-length li_337))"
"(if(1/module-path?(vector-ref li_337 0))(if(symbol?(vector-ref li_337 1)) li_337 #f) #f)"
" #f)"
" #f)))"
"(void)"
"(void)"
"(define-values"
"(top-level-instance)"
"(1/make-instance"
" 'top-level"
" #f"
" top-level-bind!-id"
"(lambda(id_1 mpi_2 orig-phase_3 phase-shift_4 ns_5 sym_6 trans?_7 trans-val_8)"
"(let-values(((phase_9)(phase+ orig-phase_3 phase-shift_4)))"
"(let-values(((b_10)"
"(let-values(((mpi4_12) mpi_2)"
"((phase5_13) phase_9)"
"((sym6_14) sym_6)"
"((temp7_15)(root-expand-context-frame-id(namespace-get-root-expand-ctx ns_5))))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" temp7_15"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi4_12"
" phase5_13"
" sym6_14))))"
"(begin"
"(let-values(((id1_16) id_1)((b2_17) b_10)((phase3_18) phase_9))"
"(add-binding!17.1 #f #f #f #f id1_16 b2_17 phase3_18))"
"(if trans?_7"
"(let-values()(if trans-val_8(let-values()(maybe-install-free=id! trans-val_8 id_1 phase_9))(void)))"
"(let-values()(namespace-unset-transformer! ns_5 phase_9 sym_6)))))))"
" top-level-require!-id"
"(lambda(stx_19 ns_20)"
"(let-values(((reqs_21)(cdr(syntax->list$1 stx_19))))"
"(let-values(((temp8_23) #t)"
"((temp9_24) #f)"
"((reqs10_25) reqs_21)"
"((temp11_26) #f)"
"((ns12_27) ns_20)"
"((temp13_28)(namespace-phase ns_20))"
"((temp14_29)(make-requires+provides #f))"
"((temp15_30) 'require)"
"((temp16_31) #t))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp16_31"
" #t"
" #f"
" #f"
" temp8_23"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp9_24"
" #t"
" temp15_30"
" reqs10_25"
" temp11_26"
" ns12_27"
" temp13_28"
" temp14_29))))))"
"(void)"
"(void)"
"(define-values"
"(create-compiled-in-memorys-using-shared-data)"
"(lambda(tops_1 data-linklet_2 ns_3)"
"(let-values(((data-instance_4)"
"(1/instantiate-linklet"
" data-linklet_2"
"(list"
" deserialize-instance"
"(let-values(((ns1_15) ns_3)"
"((temp2_16)(namespace-phase ns_3))"
"((temp3_17)(namespace-mpi ns_3))"
"((temp4_18)(namespace-bulk-binding-registry ns_3))"
"((temp5_19)(current-code-inspector)))"
"(make-eager-instance-instance11.1 temp4_18 temp2_16 temp5_19 ns1_15 temp3_17))))))"
"(let-values(((data_5)(lambda(key_20)(1/instance-variable-value data-instance_4 key_20))))"
"(let-values(((mpi-vector_6)(data_5 mpi-vector-id)))"
"(let-values(((mpi-vector-trees_7)(data_5 'mpi-vector-trees)))"
"(let-values(((phase-to-link-modules-vector_8)(data_5 'phase-to-link-modules-vector)))"
"(let-values(((phase-to-link-modules-trees_9)(data_5 'phase-to-link-modules-trees)))"
"(let-values(((syntax-literals_10)(data_5 'syntax-literals)))"
"(let-values(((syntax-literals-trees_11)(data_5 'syntax-literals-trees)))"
"(let-values(((namespace-scopes_12)(extract-namespace-scopes ns_3)))"
"(letrec-values(((construct-compiled-in-memory_13)"
"(lambda(ld_21"
" mpi-vector-tree_22"
" phase-to-link-modules-tree_23"
" syntax-literals-tree_24)"
"(let-values(((is-module?_25)"
"(let-values(((or-part_31)(1/linklet-bundle? ld_21)))"
"(if or-part_31"
" or-part_31"
"(let-values(((b_32)"
"(hash-ref"
"(1/linklet-directory->hash ld_21)"
" #f"
" #f)))"
"(if b_32"
"(hash-ref(1/linklet-bundle->hash b_32) 'decl #f)"
" #f))))))"
"(let-values(((mpi-pos-vec_26)(vector-ref mpi-vector-tree_22 0)))"
"(let-values(((syntax-literals-spec_27)"
"(vector-ref syntax-literals-tree_24 0)))"
"(let-values(((pres_28)"
"(if is-module?_25"
"(extract-submodules ld_21 'pre)"
"(compiled-top->compiled-tops ld_21))))"
"(let-values(((posts_29)"
"(if is-module?_25"
"(extract-submodules ld_21 'post)"
" null)))"
"(let-values(((map-construct-compiled-in-memory_30)"
"(lambda(l_33 vec-pos_34)"
"(let-values(((lst_35) l_33)"
"((lst_36)"
"(vector-ref"
" mpi-vector-tree_22"
" vec-pos_34))"
"((lst_37)"
"(vector-ref"
" phase-to-link-modules-tree_23"
" vec-pos_34))"
"((lst_38)"
"(vector-ref"
" syntax-literals-tree_24"
" vec-pos_34)))"
"(begin"
"(if(list? lst_35)"
"(void)"
"(let-values()(in-list lst_35)))"
"(if(list? lst_36)"
"(void)"
"(let-values()(in-list lst_36)))"
"(if(list? lst_37)"
"(void)"
"(let-values()(in-list lst_37)))"
"(if(list? lst_38)"
"(void)"
"(let-values()(in-list lst_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(lst_40"
" lst_41"
" lst_42"
" lst_43)"
"(if(if(pair? lst_40)"
"(if(pair? lst_41)"
"(if(pair? lst_42)"
"(pair? lst_43)"
" #f)"
" #f)"
" #f)"
"(let-values(((sub-ld_44)"
"(unsafe-car"
" lst_40))"
"((rest_45)"
"(unsafe-cdr"
" lst_40))"
"((mpi-vector-tree_46)"
"(unsafe-car"
" lst_41))"
"((rest_47)"
"(unsafe-cdr"
" lst_41))"
"((phase-to-link-modules-tree_48)"
"(unsafe-car"
" lst_42))"
"((rest_49)"
"(unsafe-cdr"
" lst_42))"
"((syntax-literals-tree_50)"
"(unsafe-car"
" lst_43))"
"((rest_51)"
"(unsafe-cdr"
" lst_43)))"
"(let-values(((post-guard-var_52)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_53)"
"(let-values()"
"(let-values()"
"(construct-compiled-in-memory_13"
" sub-ld_44"
" mpi-vector-tree_46"
" phase-to-link-modules-tree_48"
" syntax-literals-tree_50)))))"
"(let-values(((result_54)"
"(if(post-guard-var_52)"
"(for-loop_39"
" rest_45"
" rest_47"
" rest_49"
" rest_51)"
" null)))"
"(cons"
" elem_53"
" result_54))))))"
" null))))"
" for-loop_39)"
" lst_35"
" lst_36"
" lst_37"
" lst_38))))))"
"(compiled-in-memory1.1"
" ld_21"
" #f"
" #f"
" #f"
"(vector-ref"
" phase-to-link-modules-vector_8"
"(vector-ref phase-to-link-modules-tree_23 0))"
" #f"
" '#hasheqv()"
"(let-values(((len_55)(vector-length mpi-pos-vec_26)))"
"(begin"
"(if(exact-nonnegative-integer? len_55)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                               \"exact-nonnegative-integer?\""
" len_55)))"
"(let-values(((v_56)(make-vector len_55 0)))"
"(begin"
"(if(zero? len_55)"
"(void)"
"(let-values()"
"(let-values(((vec_57 len_58)"
"(let-values(((vec_59) mpi-pos-vec_26))"
"(begin"
"(if(vector? vec_59)"
"(void)"
"(let-values()"
"(in-vector vec_59)))"
"(values"
" vec_59"
"(unsafe-vector-length vec_59))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_60)"
"(lambda(i_61 pos_62)"
"(if(unsafe-fx< pos_62 len_58)"
"(let-values(((pos_63)"
"(unsafe-vector-ref"
" vec_57"
" pos_62)))"
"(let-values(((i_64)"
"(let-values(((i_65)"
" i_61))"
"(let-values(((i_66)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_56"
" i_65"
"(let-values()"
"(vector-ref"
" mpi-vector_6"
" pos_63)))"
"(unsafe-fx+"
" 1"
" i_65)))))"
"(values"
" i_66)))))"
"(if(if(not"
"((lambda x_67"
"(unsafe-fx="
" i_64"
" len_55))"
" pos_63))"
"(not #f)"
" #f)"
"(for-loop_60"
" i_64"
"(unsafe-fx+"
" 1"
" pos_62))"
" i_64)))"
" i_61))))"
" for-loop_60)"
" 0"
" 0)))))"
" v_56))))"
"(let-values(((len_68)(cdr syntax-literals-spec_27)))"
"(begin"
"(if(exact-nonnegative-integer? len_68)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                               \"exact-nonnegative-integer?\""
" len_68)))"
"(let-values(((v_69)(make-vector len_68 0)))"
"(begin"
"(if(zero? len_68)"
"(void)"
"(let-values()"
"(let-values(((start_70) 0)"
"((end_71)(cdr syntax-literals-spec_27))"
"((inc_72) 1))"
"(begin"
"(if(if(real? start_70)"
"(if(real? end_71)(real? inc_72) #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range start_70 end_71 inc_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(i_74 pos_75)"
"(if(< pos_75 end_71)"
"(let-values(((i_76)"
" pos_75))"
"(let-values(((i_77)"
"(let-values(((i_78)"
" i_74))"
"(let-values(((i_79)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_69"
" i_78"
"(let-values()"
"(if syntax-literals_10"
"(vector-ref"
" syntax-literals_10"
"(+"
"(car"
" syntax-literals-spec_27)"
" i_76))"
" #f)))"
"(unsafe-fx+"
" 1"
" i_78)))))"
"(values"
" i_79)))))"
"(if(if(not"
"((lambda x_80"
"(unsafe-fx="
" i_77"
" len_68))"
" i_76))"
"(not #f)"
" #f)"
"(for-loop_73"
" i_77"
"(+ pos_75 inc_72))"
" i_77)))"
" i_74))))"
" for-loop_73)"
" 0"
" start_70)))))"
" v_69))))"
"(map-construct-compiled-in-memory_30 pres_28 1)"
"(map-construct-compiled-in-memory_30 posts_29 2)"
" namespace-scopes_12"
" #f))))))))))"
"(map2"
" construct-compiled-in-memory_13"
" tops_1"
" mpi-vector-trees_7"
" phase-to-link-modules-trees_9"
" syntax-literals-trees_11)))))))))))))"
"(define-values"
"(extract-submodules)"
"(lambda(ld_81 names-key_82)"
"(if(1/linklet-bundle? ld_81)"
"(let-values() null)"
"(let-values()"
"(let-values(((h_83)(1/linklet-directory->hash ld_81)))"
"(let-values(((mod_84)(hash-ref h_83 #f #f)))"
"            (let-values ((() (begin (if mod_84 (void) (let-values () (error \"missing main module\"))) (values))))"
"(let-values(((mh_85)(1/linklet-bundle->hash mod_84)))"
"(let-values(((names_86)(hash-ref mh_85 names-key_82 null)))"
"(let-values(((lst_87) names_86))"
"(begin"
"(if(list? lst_87)(void)(let-values()(in-list lst_87)))"
"((letrec-values(((for-loop_88)"
"(lambda(lst_89)"
"(if(pair? lst_89)"
"(let-values(((name_90)(unsafe-car lst_89))"
"((rest_91)(unsafe-cdr lst_89)))"
"(let-values(((post-guard-var_92)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_93)"
"(let-values()"
"(let-values()"
"(hash-ref"
" h_83"
" name_90"
"(lambda()"
"(error"
"                                                                        \"missing submodule declaration:\""
" name_90)))))))"
"(let-values(((result_94)"
"(if(post-guard-var_92)(for-loop_88 rest_91) null)))"
"(cons elem_93 result_94))))))"
" null))))"
" for-loop_88)"
" lst_87))))))))))))"
"(void)"
"(void)"
"(define-values"
"(eval-single-top)"
"(lambda(c_1 ns_2)"
"(let-values(((c18_4) c_1)((ns19_5) ns_2)((temp20_6) #t))(eval-one-top15.1 temp20_6 #t c18_4 ns19_5 #f #f))))"
"(define-values"
"(compiled-multiple-top?)"
"(lambda(c_7)"
"(let-values(((ld_8)(if(compiled-in-memory? c_7)(compiled-in-memory-linklet-directory c_7) c_7)))"
"(if(1/linklet-directory? ld_8)(not(hash-ref(1/linklet-directory->hash ld_8) #f #f)) #f))))"
"(define-values"
"(eval-top)"
"(let-values(((eval-top7_9)"
"(lambda(c5_10 ns6_11 eval-compiled1_12 as-tail?2_13 eval-compiled3_14 as-tail?4_15)"
"(let-values(((c_16) c5_10))"
"(let-values(((ns_17) ns6_11))"
"(let-values(((eval-compiled_18)(if eval-compiled3_14 eval-compiled1_12 eval-top)))"
"(let-values(((as-tail?_19)(if as-tail?4_15 as-tail?2_13 #t)))"
"(let-values()"
"(if(compiled-multiple-top? c_16)"
"(eval-multiple-tops c_16 ns_17 eval-compiled_18 as-tail?_19)"
"(let-values(((c21_20) c_16)((ns22_21) ns_17)((as-tail?23_22) as-tail?_19))"
"(eval-one-top15.1 #f #f c21_20 ns22_21 as-tail?23_22 #t)))))))))))"
"(case-lambda"
"((c_23 ns_24)(eval-top7_9 c_23 ns_24 #f #f #f #f))"
"((c_25 ns_26 eval-compiled_27 as-tail?2_28)(eval-top7_9 c_25 ns_26 eval-compiled_27 as-tail?2_28 #t #t))"
"((c_29 ns_30 eval-compiled1_31)(eval-top7_9 c_29 ns_30 eval-compiled1_31 #f #t #f)))))"
"(define-values"
"(eval-multiple-tops)"
"(lambda(c_32 ns_33 eval-compiled_34 as-tail?_35)"
"(let-values(((eval-compiled-parts_36)"
"(lambda(l_37)"
"((letrec-values(((loop_38)"
"(lambda(l_39)"
"(if(null? l_39)"
"(let-values() void)"
"(if(null?(cdr l_39))"
"(let-values()(eval-compiled_34(car l_39) ns_33 as-tail?_35))"
"(let-values()"
"(begin(eval-compiled_34(car l_39) ns_33 #f)(loop_38(cdr l_39)))))))))"
" loop_38)"
" l_37))))"
"(if(compiled-in-memory? c_32)"
"(let-values()(eval-compiled-parts_36(compiled-in-memory-pre-compiled-in-memorys c_32)))"
"(let-values(((c1_40)(hash-ref(1/linklet-directory->hash c_32) 'data #f)))"
"(if c1_40"
"((lambda(data-ld_41)"
"(eval-compiled-parts_36"
"(create-compiled-in-memorys-using-shared-data"
"(compiled-top->compiled-tops c_32)"
"(hash-ref(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash data-ld_41) #f)) 0)"
" ns_33)))"
" c1_40)"
"(let-values()(eval-compiled-parts_36(compiled-top->compiled-tops c_32)))))))))"
"(define-values"
"(eval-one-top15.1)"
"(lambda(single-expression?9_42 single-expression?10_43 c13_44 ns14_45 as-tail?11_46 as-tail?12_47)"
"(let-values(((c_48) c13_44))"
"(let-values(((ns_49) ns14_45))"
"(let-values(((as-tail?_50)(if as-tail?12_47 as-tail?11_46 #t)))"
"(let-values(((single-expression?_51)(if single-expression?10_43 single-expression?9_42 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((ld_52)(if(compiled-in-memory? c_48)(compiled-in-memory-linklet-directory c_48) c_48)))"
"(let-values(((h_53)(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash ld_52) #f))))"
"(let-values(((link-instance_54)"
"(if(compiled-in-memory? c_48)"
"(link-instance-from-compiled-in-memory"
" c_48"
"(if(not single-expression?_51) ns_49 #f))"
"(1/instantiate-linklet"
"(hash-ref h_53 'link)"
"(list"
" deserialize-instance"
"(let-values(((ns24_63) ns_49)"
"((temp25_64)(namespace-phase ns_49))"
"((temp26_65)(namespace-mpi ns_49))"
"((temp27_66)(namespace-bulk-binding-registry ns_49))"
"((temp28_67)(current-code-inspector)))"
"(make-eager-instance-instance11.1"
" temp27_66"
" temp25_64"
" temp28_67"
" ns24_63"
" temp26_65)))))))"
"(let-values(((orig-phase_55)(hash-ref h_53 'original-phase)))"
"(let-values(((max-phase_56)(hash-ref h_53 'max-phase)))"
"(let-values(((phase-shift_57)(phase-(namespace-phase ns_49) orig-phase_55)))"
"(let-values(((extra-inspector_58)"
"(if(compiled-in-memory? c_48)"
"(compiled-in-memory-compile-time-inspector c_48)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_59)"
"(if(compiled-in-memory? c_48)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_48)"
" '#hasheqv())))"
"(let-values(((phase-to-link-modules_60)"
"(if(compiled-in-memory? c_48)"
"(compiled-in-memory-phase-to-link-module-uses c_48)"
"(1/instance-variable-value link-instance_54 'phase-to-link-modules))))"
"(let-values(((thunk_61)"
"(let-values(((start_68) max-phase_56)"
"((end_69)(sub1 orig-phase_55))"
"((inc_70) -1))"
"(begin"
"(if(if(real? start_68)(if(real? end_69)(real? inc_70) #f) #f)"
"(void)"
"(let-values()(in-range start_68 end_69 inc_70)))"
"((letrec-values(((for-loop_71)"
"(lambda(prev-thunk_72 pos_73)"
"(if(> pos_73 end_69)"
"(let-values(((phase_74) pos_73))"
"(let-values(((prev-thunk_75)"
"(let-values(((prev-thunk_76)"
" prev-thunk_72))"
"(let-values(((prev-thunk_77)"
"(let-values()"
"(let-values((()"
"(begin"
"(prev-thunk_76"
" #f)"
"(values))))"
"(let-values(((module-uses_78)"
"(hash-ref"
" phase-to-link-modules_60"
" phase_74"
" null)))"
"(let-values(((import-module-instances_79"
" import-instances_80)"
"(let-values(((mis_84"
" is_85)"
"(let-values(((lst_86)"
" module-uses_78))"
"(begin"
"(if(list?"
" lst_86)"
"(void)"
"(let-values()"
"(in-list"
" lst_86)))"
"((letrec-values(((for-loop_87)"
"(lambda(mis_88"
" is_89"
" lst_90)"
"(if(pair?"
" lst_90)"
"(let-values(((mu_91)"
"(unsafe-car"
" lst_90))"
"((rest_92)"
"(unsafe-cdr"
" lst_90)))"
"(let-values(((mis_93"
" is_94)"
"(let-values(((mis_95)"
" mis_88)"
"((is_96)"
" is_89))"
"(let-values(((mis_97"
" is_98)"
"(let-values()"
"(let-values(((mis29_99"
" is30_100)"
"(let-values()"
"(let-values(((ns31_102)"
" ns_49)"
"((mu32_103)"
" mu_91)"
"((temp33_104)"
"(phase-"
"(phase+"
" phase_74"
" phase-shift_57)"
"(module-use-phase"
" mu_91))))"
"(namespace-module-use->module+linklet-instances144.1"
" temp33_104"
" #f"
" #f"
" #f"
" #f"
" ns31_102"
" mu32_103)))))"
"(values"
"(cons"
" mis29_99"
" mis_95)"
"(cons"
" is30_100"
" is_96))))))"
"(values"
" mis_97"
" is_98)))))"
"(if(not"
" #f)"
"(for-loop_87"
" mis_93"
" is_94"
" rest_92)"
"(values"
" mis_93"
" is_94))))"
"(values"
" mis_88"
" is_89)))))"
" for-loop_87)"
" null"
" null"
" lst_86)))))"
"(values"
"(alt-reverse"
" mis_84)"
"(alt-reverse"
" is_85)))))"
"(let-values(((phase-ns_81)"
"(namespace->namespace-at-phase"
" ns_49"
"(phase+"
" phase_74"
" phase-shift_57))))"
"(let-values(((inst_82)"
"(if single-expression?_51"
" link-instance_54"
"(let-values(((phase-ns34_106)"
" phase-ns_81)"
"((phase-shift35_107)"
" phase-shift_57)"
"((temp36_108)"
"(namespace-mpi"
" ns_49))"
"((temp37_109)"
"(namespace-inspector"
" ns_49))"
"((temp38_110)"
"(namespace-bulk-binding-registry"
" ns_49))"
"((temp39_111)"
"(lambda(name_112"
" val_113)"
"(namespace-set-transformer!"
" ns_49"
"(phase+"
"(sub1"
" phase_74)"
" phase-shift_57)"
" name_112"
" val_113))))"
"(make-instance-instance13.1"
" temp38_110"
" temp37_109"
" phase-ns34_106"
" phase-shift35_107"
" temp36_108"
" temp39_111)))))"
"(let-values(((linklet_83)"
"(hash-ref"
" h_53"
" phase_74"
" #f)))"
"(if linklet_83"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((linklet40_116)"
" linklet_83)"
"((temp41_117)"
" 3)"
"((module-uses42_118)"
" module-uses_78)"
"((import-module-instances43_119)"
" import-module-instances_79)"
"((temp44_120)"
"(current-code-inspector))"
"((extra-inspector45_121)"
" extra-inspector_58)"
"((temp46_122)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_59"
" phase_74"
" #f)))"
"(check-require-access9.1"
" temp41_117"
" linklet40_116"
" module-uses42_118"
" import-module-instances43_119"
" temp44_120"
" extra-inspector45_121"
" temp46_122))"
"(values))))"
"(let-values(((instantiate_114)"
"(lambda(tail?_123)"
"(1/instantiate-linklet"
" linklet_83"
"(list*"
" top-level-instance"
" link-instance_54"
" inst_82"
" import-instances_80)"
"(namespace->instance"
" ns_49"
"(phase+"
" phase_74"
" phase-shift_57))"
"(not"
" tail?_123)))))"
"(if(zero-phase?"
" phase_74)"
"(let-values()"
" instantiate_114)"
"(if single-expression?_51"
"(let-values()"
"(lambda(tail?_124)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" phase-ns_81)"
"(let-values()"
"(instantiate_114"
" tail?_124)))))"
"(let-values()"
"(let-values(((ns-1_125)"
"(namespace->namespace-at-phase"
" phase-ns_81"
"(sub1"
" phase_74))))"
"(lambda(tail?_126)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(let-values(((ns-147_127)"
" ns-1_125))"
"(make-expand-context8.1"
" #f"
" #f"
" #f"
" #f"
" ns-147_127))"
" 1/current-namespace"
" phase-ns_81)"
"(let-values()"
"(instantiate_114"
" tail?_126)))))))))))"
"(let-values()"
" void)))))))))))"
"(values prev-thunk_77)))))"
"(if(not #f)"
"(for-loop_71"
" prev-thunk_75"
"(+ pos_73 inc_70))"
" prev-thunk_75)))"
" prev-thunk_72))))"
" for-loop_71)"
" void"
" start_68)))))"
"(thunk_61 as-tail?_50)))))))))))))))))))"
"(define-values"
"(link-instance-from-compiled-in-memory)"
"(lambda(cim_155 to-ns_156)"
"(let-values(((orig-syntax-literals_157)(compiled-in-memory-syntax-literals cim_155)))"
"(let-values(((syntax-literals_158)"
"(if(not to-ns_156)"
"(let-values() orig-syntax-literals_157)"
"(if(namespace-scopes=?"
"(compiled-in-memory-namespace-scopes cim_155)"
"(extract-namespace-scopes to-ns_156))"
"(let-values() orig-syntax-literals_157)"
"(let-values()"
"(let-values(((len_159)(vector-length orig-syntax-literals_157)))"
"(begin"
"(if(exact-nonnegative-integer? len_159)"
"(void)"
"                                (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_159)))"
"(let-values(((v_160)(make-vector len_159 0)))"
"(begin"
"(if(zero? len_159)"
"(void)"
"(let-values()"
"(let-values(((vec_161 len_162)"
"(let-values(((vec_163) orig-syntax-literals_157))"
"(begin"
"(if(vector? vec_163)"
"(void)"
"(let-values()(in-vector vec_163)))"
"(values vec_163(unsafe-vector-length vec_163))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_164)"
"(lambda(i_165 pos_166)"
"(if(unsafe-fx< pos_166 len_162)"
"(let-values(((s_167)"
"(unsafe-vector-ref vec_161 pos_166)))"
"(let-values(((i_168)"
"(let-values(((i_169) i_165))"
"(let-values(((i_170)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_160"
" i_169"
"(let-values()"
"(swap-top-level-scopes"
" s_167"
"(compiled-in-memory-namespace-scopes"
" cim_155)"
" to-ns_156)))"
"(unsafe-fx+"
" 1"
" i_169)))))"
"(values i_170)))))"
"(if(if(not"
"((lambda x_171(unsafe-fx= i_168 len_159))"
" s_167))"
"(not #f)"
" #f)"
"(for-loop_164 i_168(unsafe-fx+ 1 pos_166))"
" i_168)))"
" i_165))))"
" for-loop_164)"
" 0"
" 0)))))"
" v_160)))))))))"
"(1/make-instance"
" 'link"
" #f"
" mpi-vector-id"
"(compiled-in-memory-mpis cim_155)"
" syntax-literals-id"
" syntax-literals_158)))))"
"(void)"
"(void)"
"(define-values(runtime-scope)(new-multi-scope))"
"(define-values(runtime-stx)(add-scope empty-syntax runtime-scope))"
"(define-values(runtime-module-name)(1/make-resolved-module-path '#%runtime))"
"(define-values(runtime-mpi)(1/module-path-index-join ''#%runtime #f))"
"(define-values"
"(add-runtime-primitive!)"
"(lambda(sym_1)"
"(let-values(((temp1_2)(syntax-scope-set runtime-stx 0))"
"((sym2_3) sym_1)"
"((temp3_4)"
"(let-values(((runtime-mpi4_5) runtime-mpi)((temp5_6) 0)((sym6_7) sym_1))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" runtime-mpi4_5"
" temp5_6"
" sym6_7))))"
"(add-binding-in-scopes!16.1 #f #f temp1_2 sym2_3 temp3_4))))"
"(call-with-values(lambda()(add-runtime-primitive! 'values)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'cons)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'list)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type-property)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'gensym)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'string->uninterned-symbol)) print-values)"
"(define-values"
"(runtime-instances)"
" '(#%kernel #%paramz #%foreign #%unsafe #%flfxnum #%extfl #%network #%place #%futures))"
"(void)"
"(void)"
"(define-values(box-cons!)(lambda(b_6 v_7)(set-box! b_6(cons v_7(unbox b_6)))))"
"(define-values(box-clear!)(lambda(b_8)(begin0(alt-reverse(unbox b_8))(set-box! b_8 null))))"
"(define-values"
"(struct:lift-context lift-context1.1 lift-context? lift-context-convert lift-context-lifts lift-context-module*-ok?)"
"(let-values(((struct:_9 make-_10 ?_11 -ref_12 -set!_13)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lift-context #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lift-context)))))"
"(values"
" struct:_9"
" make-_10"
" ?_11"
"(make-struct-field-accessor -ref_12 0 'convert)"
"(make-struct-field-accessor -ref_12 1 'lifts)"
"(make-struct-field-accessor -ref_12 2 'module*-ok?))))"
"(define-values"
"(struct:lifted-bind lifted-bind2.1 lifted-bind? lifted-bind-ids lifted-bind-keys lifted-bind-rhs)"
"(let-values(((struct:_39 make-_40 ?_41 -ref_42 -set!_43)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lifted-bind #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lifted-bind)))))"
"(values"
" struct:_39"
" make-_40"
" ?_41"
"(make-struct-field-accessor -ref_42 0 'ids)"
"(make-struct-field-accessor -ref_42 1 'keys)"
"(make-struct-field-accessor -ref_42 2 'rhs))))"
"(define-values"
"(make-lift-context6.1)"
"(lambda(module*-ok?3_69 module*-ok?4_70 convert5_71)"
"(let-values(((convert_72) convert5_71))"
"(let-values(((module*-ok?_73)(if module*-ok?4_70 module*-ok?3_69 #f)))"
"(let-values()(lift-context1.1 convert_72(box null) module*-ok?_73))))))"
"(define-values"
"(add-lifted!)"
"(lambda(lifts_88 ids_89 rhs_90 phase_91)"
"(let-values(((lifted-ids_92 lifted_93)((lift-context-convert lifts_88) ids_89 rhs_90 phase_91)))"
"(begin(box-cons!(lift-context-lifts lifts_88) lifted_93) lifted-ids_92))))"
"(define-values(get-and-clear-lifts!)(lambda(lifts_94)(box-clear!(lift-context-lifts lifts_94))))"
"(define-values"
"(make-local-lift)"
"(lambda(lift-env_95 counter_96)"
"(lambda(ids_97 rhs_98 phase_99)"
"(let-values(((keys_100)"
"(let-values(((lst_101) ids_97))"
"(begin"
"(if(list? lst_101)(void)(let-values()(in-list lst_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(lst_103)"
"(if(pair? lst_103)"
"(let-values(((id_104)(unsafe-car lst_103))"
"((rest_105)(unsafe-cdr lst_103)))"
"(let-values(((post-guard-var_106)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_107)"
"(let-values()"
"(let-values()"
"(let-values(((key_108)"
"(let-values(((id31_109) id_104)"
"((phase32_110)"
" phase_99)"
"((counter33_111)"
" counter_96))"
"(add-local-binding!35.1"
" #f"
" #f"
" #f"
" #f"
" id31_109"
" phase32_110"
" counter33_111))))"
"(begin"
"(set-box!"
" lift-env_95"
"(hash-set"
"(unbox lift-env_95)"
" key_108"
" variable))"
" key_108))))))"
"(let-values(((result_112)"
"(if(post-guard-var_106)"
"(for-loop_102 rest_105)"
" null)))"
"(cons elem_107 result_112))))))"
" null))))"
" for-loop_102)"
" lst_101)))))"
"(values ids_97(lifted-bind2.1 ids_97 keys_100 rhs_98))))))"
"(define-values"
"(make-top-level-lift)"
"(lambda(ctx_113)"
"(lambda(ids_114 rhs_115 phase_116)"
"(let-values(((post-scope_117)"
"(root-expand-context-post-expansion-scope"
"(namespace-get-root-expand-ctx(expand-context-namespace ctx_113)))))"
"(let-values(((tl-ids_118)"
"(let-values(((lst_120) ids_114))"
"(begin"
"(if(list? lst_120)(void)(let-values()(in-list lst_120)))"
"((letrec-values(((for-loop_121)"
"(lambda(lst_122)"
"(if(pair? lst_122)"
"(let-values(((id_123)(unsafe-car lst_122))"
"((rest_124)(unsafe-cdr lst_122)))"
"(let-values(((post-guard-var_125)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_126)"
"(let-values()"
"(let-values()"
"(add-scope id_123 post-scope_117)))))"
"(let-values(((result_127)"
"(if(post-guard-var_125)"
"(for-loop_121 rest_124)"
" null)))"
"(cons elem_126 result_127))))))"
" null))))"
" for-loop_121)"
" lst_120)))))"
"(let-values(((syms_119)(select-defined-syms-and-bind!/ctx tl-ids_118 ctx_113)))"
"(values tl-ids_118(lifted-bind2.1 tl-ids_118 syms_119 rhs_115))))))))"
"(define-values"
"(wrap-lifts-as-let)"
"(lambda(lifts_128 body_129 s_130 phase_131)"
"(datum->syntax$1"
" #f"
"(let-values(((lst_132)(alt-reverse lifts_128)))"
"(begin"
"(if(list? lst_132)(void)(let-values()(in-list lst_132)))"
"((letrec-values(((for-loop_133)"
"(lambda(body_134 lst_135)"
"(if(pair? lst_135)"
"(let-values(((lift_136)(unsafe-car lst_135))((rest_137)(unsafe-cdr lst_135)))"
"(let-values(((body_138)"
"(let-values(((body_139) body_134))"
"(let-values(((body_140)"
"(let-values()"
"(begin"
"(if(lifted-bind? lift_136)"
"(void)"
"(let-values()"
"                                                                       (error \"non-bindings in `lift-context`\")))"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx phase_131)"
" 'let-values)"
"(list"
"(list"
"(lifted-bind-ids lift_136)"
"(lifted-bind-rhs lift_136)))"
" body_139)))))"
"(values body_140)))))"
"(if(not #f)(for-loop_133 body_138 rest_137) body_138)))"
" body_134))))"
" for-loop_133)"
" body_129"
" lst_132))))))"
"(define-values"
"(wrap-lifts-as-begin15.1)"
"(lambda(adjust-form9_141 adjust-form10_142 lifts11_143 body12_144 s13_145 phase14_146)"
"(let-values(((lifts_147) lifts11_143))"
"(let-values(((body_148) body12_144))"
"(let-values()"
"(let-values(((phase_150) phase14_146))"
"(let-values(((adjust-form_151)(if adjust-form10_142 adjust-form9_141 values)))"
"(let-values()"
"(datum->syntax$1"
" #f"
"(cons"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_150) 'begin)"
"(append"
"(let-values(((lst_152) lifts_147))"
"(begin"
"(if(list? lst_152)(void)(let-values()(in-list lst_152)))"
"((letrec-values(((for-loop_153)"
"(lambda(lst_154)"
"(if(pair? lst_154)"
"(let-values(((lift_155)(unsafe-car lst_154))"
"((rest_156)(unsafe-cdr lst_154)))"
"(let-values(((post-guard-var_157)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_158)"
"(let-values()"
"(let-values()"
"(adjust-form_151"
"(if(lifted-bind? lift_155)"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_150)"
" 'define-values)"
"(lifted-bind-ids lift_155)"
"(lifted-bind-rhs lift_155))))"
"(let-values() lift_155)))))))"
"(let-values(((result_159)"
"(if(post-guard-var_157)"
"(for-loop_153 rest_156)"
" null)))"
"(cons elem_158 result_159))))))"
" null))))"
" for-loop_153)"
" lst_152)))"
"(list body_148))))))))))))"
"(define-values"
"(get-lifts-as-lists)"
"(lambda(lifts_183)"
"(let-values(((lst_184) lifts_183))"
"(begin"
"(if(list? lst_184)(void)(let-values()(in-list lst_184)))"
"((letrec-values(((for-loop_185)"
"(lambda(lst_186)"
"(if(pair? lst_186)"
"(let-values(((lift_187)(unsafe-car lst_186))((rest_188)(unsafe-cdr lst_186)))"
"(let-values(((post-guard-var_189)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_190)"
"(let-values()"
"(let-values()"
"(list"
"(lifted-bind-ids lift_187)"
"(lifted-bind-keys lift_187)"
"(lifted-bind-rhs lift_187))))))"
"(let-values(((result_191)"
"(if(post-guard-var_189)(for-loop_185 rest_188) null)))"
"(cons elem_190 result_191))))))"
" null))))"
" for-loop_185)"
" lst_184)))))"
"(define-values"
"(struct:module-lift-context"
" module-lift-context18.1"
" module-lift-context?"
" module-lift-context-wrt-phase"
" module-lift-context-lifts"
" module-lift-context-module*-ok?)"
"(let-values(((struct:_192 make-_193 ?_194 -ref_195 -set!_196)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'module-lift-context)))))"
"(values"
" struct:_192"
" make-_193"
" ?_194"
"(make-struct-field-accessor -ref_195 0 'wrt-phase)"
"(make-struct-field-accessor -ref_195 1 'lifts)"
"(make-struct-field-accessor -ref_195 2 'module*-ok?))))"
"(define-values"
"(make-module-lift-context)"
"(lambda(phase_222 module*-ok?_223)(module-lift-context18.1 phase_222(box null) module*-ok?_223)))"
"(define-values"
"(get-and-clear-module-lifts!)"
"(lambda(module-lifts_224)(box-clear!(module-lift-context-lifts module-lifts_224))))"
"(define-values"
"(add-lifted-module!)"
"(lambda(module-lifts_225 s_226 phase_227)"
"(begin"
"(if(let-values(((or-part_228)"
"(if(module-lift-context? module-lifts_225)"
"(module-lift-context-module*-ok? module-lifts_225)"
" #f)))"
"(if or-part_228"
" or-part_228"
"(if(lift-context? module-lifts_225)(lift-context-module*-ok? module-lifts_225) #f)))"
"(void)"
"(let-values()"
"(let-values(((tmp_229)(core-form-sym s_226 phase_227)))"
"(if(equal? tmp_229 'module)"
"(let-values()(void))"
"(if(equal? tmp_229 'module*)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                   \"cannot lift `module*' to a top-level context\""
"                   \"syntax\""
" s_226))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a `module' declaration\" \"syntax\" s_226)))))))"
"(if(module-lift-context? module-lifts_225)"
"(let-values()(box-cons!(module-lift-context-lifts module-lifts_225) s_226))"
"(if(lift-context? module-lifts_225)"
"(let-values()(box-cons!(lift-context-lifts module-lifts_225) s_226))"
"          (let-values () (error \"internal error: unrecognized lift-context type for module lift\")))))))"
"(define-values"
"(struct:require-lift-context"
" require-lift-context19.1"
" require-lift-context?"
" require-lift-context-do-require"
" require-lift-context-wrt-phase"
" require-lift-context-requires)"
"(let-values(((struct:_230 make-_231 ?_232 -ref_233 -set!_234)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'require-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'require-lift-context)))))"
"(values"
" struct:_230"
" make-_231"
" ?_232"
"(make-struct-field-accessor -ref_233 0 'do-require)"
"(make-struct-field-accessor -ref_233 1 'wrt-phase)"
"(make-struct-field-accessor -ref_233 2 'requires))))"
"(define-values"
"(make-require-lift-context)"
"(lambda(wrt-phase_260 do-require_261)(require-lift-context19.1 do-require_261 wrt-phase_260(box null))))"
"(define-values"
"(get-and-clear-require-lifts!)"
"(lambda(require-lifts_262)(box-clear!(require-lift-context-requires require-lifts_262))))"
"(define-values"
"(add-lifted-require!)"
"(lambda(require-lifts_263 s_264 phase_265)"
"(begin"
"((require-lift-context-do-require require-lifts_263) s_264 phase_265)"
"(box-cons!(require-lift-context-requires require-lifts_263) s_264))))"
"(define-values"
"(struct:to-module-lift-context"
" to-module-lift-context20.1"
" to-module-lift-context?"
" to-module-lift-context-wrt-phase"
" to-module-lift-context-provides"
" to-module-lift-context-end-as-expressions?"
" to-module-lift-context-ends)"
"(let-values(((struct:_266 make-_267 ?_268 -ref_269 -set!_270)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'to-module-lift-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'to-module-lift-context)))))"
"(values"
" struct:_266"
" make-_267"
" ?_268"
"(make-struct-field-accessor -ref_269 0 'wrt-phase)"
"(make-struct-field-accessor -ref_269 1 'provides)"
"(make-struct-field-accessor -ref_269 2 'end-as-expressions?)"
"(make-struct-field-accessor -ref_269 3 'ends))))"
"(define-values"
"(make-to-module-lift-context26.1)"
"(lambda(end-as-expressions?22_305 shared-module-ends21_306 phase25_307)"
"(let-values(((phase_308) phase25_307))"
"(let-values(((ends_309) shared-module-ends21_306))"
"(let-values(((end-as-expressions?_310) end-as-expressions?22_305))"
"(let-values()(to-module-lift-context20.1 phase_308(box null) end-as-expressions?_310 ends_309)))))))"
"(define-values(make-shared-module-ends)(lambda()(box null)))"
"(define-values"
"(get-and-clear-end-lifts!)"
"(lambda(to-module-lifts_325)(box-clear!(to-module-lift-context-ends to-module-lifts_325))))"
"(define-values"
"(get-and-clear-provide-lifts!)"
"(lambda(to-module-lifts_326)(box-clear!(to-module-lift-context-provides to-module-lifts_326))))"
"(define-values"
"(add-lifted-to-module-provide!)"
"(lambda(to-module-lifts_327 s_328 phase_329)"
"(box-cons!(to-module-lift-context-provides to-module-lifts_327) s_328)))"
"(define-values"
"(add-lifted-to-module-end!)"
"(lambda(to-module-lifts_330 s_331 phase_332)(box-cons!(to-module-lift-context-ends to-module-lifts_330) s_331)))"
"(void)"
"(void)"
"(define-values"
"(struct:already-expanded already-expanded1.1 already-expanded? already-expanded-s already-expanded-binding-layer)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'already-expanded"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'already-expanded)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 's)"
"(make-struct-field-accessor -ref_4 1 'binding-layer))))"
"(void)"
"(void)"
"(define-values"
"(1/prop:liberal-define-context has-liberal-define-context-property? liberal-define-context-value)"
"(make-struct-type-property 'liberal-define-context))"
"(define-values"
"(struct:liberal-define-context make-liberal-define-context 1/liberal-define-context?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'liberal-define-context"
" #f"
" 0"
" 0"
" #f"
"(list(cons 1/prop:liberal-define-context #t))"
" #f"
" #f"
" '()"
" #f"
" 'make-liberal-define-context)))))"
"(values struct:_1 make-_2 ?_3)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:expansion-contexts expansion-contexts? expansion-contexts-ref)"
"(make-struct-type-property"
" 'expansion-contexts"
"(lambda(v_1 info_2)"
"(begin"
"(if(if(list? v_1)"
"(let-values(((lst_3) v_1))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(result_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((s_7)(unsafe-car lst_6))((rest_8)(unsafe-cdr lst_6)))"
"(let-values(((result_9)"
"(let-values()"
"(let-values(((result_11)"
"(let-values()"
"(let-values()"
"(memq"
" s_7"
" '(expression"
" top-level"
" module"
" module-begin"
" definition-context))))))"
"(values result_11)))))"
"(if(if(not((lambda x_12(not result_9)) s_7))(not #f) #f)"
"(for-loop_4 result_9 rest_8)"
" result_9)))"
" result_5))))"
" for-loop_4)"
" #t"
" lst_3)))"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:expansion-contexts"
"            \"(listof (or/c 'expression 'top-level 'module 'module-begin 'definition-context))\""
" v_1)))"
" v_1))))"
"(define-values"
"(not-in-this-expand-context?)"
"(lambda(t_13 ctx_14)"
"(if(expansion-contexts? t_13)"
"(not(memq(context->symbol(expand-context-context ctx_14))(expansion-contexts-ref t_13)))"
" #f)))"
"(define-values(context->symbol)(lambda(context_15)(if(symbol? context_15) context_15 'definition-context)))"
"(define-values"
"(avoid-current-expand-context)"
"(lambda(s_16 t_17 ctx_18)"
"(let-values(((wrap_19)"
"(lambda(sym_21)"
"(datum->syntax$1"
" #f"
"(list"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx sym_21)(expand-context-phase ctx_18))"
" s_16)))))"
"(let-values(((fail_20)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"                        \"not allowed in context\\n  expansion context: ~a\""
"(context->symbol(expand-context-context ctx_18)))"
" s_16))))"
"(let-values(((tmp_22)(context->symbol(expand-context-context ctx_18))))"
"(if(equal? tmp_22 'module-begin)"
"(let-values()(wrap_19 'begin))"
"(if(if(equal? tmp_22 'module) #t(if(equal? tmp_22 'top-level) #t(equal? tmp_22 'definition-context)))"
"(let-values()(if(memq 'expression(expansion-contexts-ref t_17))(wrap_19 '#%expression)(fail_20)))"
"(let-values()(fail_20)))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:reference-record"
" reference-record1.1"
" reference-record?"
" reference-record-already-bound"
" reference-record-reference-before-bound"
" reference-record-all-referenced?"
" set-reference-record-already-bound!"
" set-reference-record-reference-before-bound!"
" set-reference-record-all-referenced?!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'reference-record #f 3 0 #f null #f #f '() #f 'reference-record)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'already-bound)"
"(make-struct-field-accessor -ref_4 1 'reference-before-bound)"
"(make-struct-field-accessor -ref_4 2 'all-referenced?)"
"(make-struct-field-mutator -set!_5 0 'already-bound)"
"(make-struct-field-mutator -set!_5 1 'reference-before-bound)"
"(make-struct-field-mutator -set!_5 2 'all-referenced?))))"
"(define-values(make-reference-record)(lambda()(reference-record1.1(seteq)(seteq) #f)))"
"(define-values"
"(reference-record-used!)"
"(lambda(rr_31 key_32)"
"(if(set-member?(reference-record-already-bound rr_31) key_32)"
"(void)"
"(let-values()"
"(set-reference-record-reference-before-bound!"
" rr_31"
"(set-add(reference-record-reference-before-bound rr_31) key_32))))))"
"(define-values"
"(reference-records-all-used!)"
"(lambda(rrs_33)"
"(begin"
"(let-values(((lst_34) rrs_33))"
"(begin"
"(if(list? lst_34)(void)(let-values()(in-list lst_34)))"
"((letrec-values(((for-loop_35)"
"(lambda(lst_36)"
"(if(pair? lst_36)"
"(let-values(((rr_37)(unsafe-car lst_36))((rest_38)(unsafe-cdr lst_36)))"
"(let-values(((post-guard-var_39)(lambda() #t)))"
"(let-values()"
"(if(reference-record-all-referenced? rr_37)"
"(values)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(set-reference-record-all-referenced?! rr_37 #t))"
"(values)))))"
"(if(post-guard-var_39)(for-loop_35 rest_38)(values))))))))"
"(values)))))"
" for-loop_35)"
" lst_34)))"
"(void))))"
"(define-values"
"(reference-record-bound!)"
"(lambda(rr_40 keys_41)"
"(begin"
"(set-reference-record-already-bound!"
" rr_40"
"(let-values(((lst_42) keys_41))"
"(begin"
"(if(list? lst_42)(void)(let-values()(in-list lst_42)))"
"((letrec-values(((for-loop_43)"
"(lambda(ab_44 lst_45)"
"(if(pair? lst_45)"
"(let-values(((key_46)(unsafe-car lst_45))((rest_47)(unsafe-cdr lst_45)))"
"(let-values(((ab_48)"
"(let-values(((ab_49) ab_44))"
"(let-values(((ab_50)(let-values()(set-add ab_49 key_46))))"
"(values ab_50)))))"
"(if(not #f)(for-loop_43 ab_48 rest_47) ab_48)))"
" ab_44))))"
" for-loop_43)"
"(reference-record-already-bound rr_40)"
" lst_42))))"
"(set-reference-record-reference-before-bound!"
" rr_40"
"(let-values(((lst_51) keys_41))"
"(begin"
"(if(list? lst_51)(void)(let-values()(in-list lst_51)))"
"((letrec-values(((for-loop_52)"
"(lambda(rbb_53 lst_54)"
"(if(pair? lst_54)"
"(let-values(((key_55)(unsafe-car lst_54))((rest_56)(unsafe-cdr lst_54)))"
"(let-values(((rbb_57)"
"(let-values(((rbb_58) rbb_53))"
"(let-values(((rbb_59)(let-values()(set-remove rbb_58 key_55))))"
"(values rbb_59)))))"
"(if(not #f)(for-loop_52 rbb_57 rest_56) rbb_57)))"
" rbb_53))))"
" for-loop_52)"
"(reference-record-reference-before-bound rr_40)"
" lst_51)))))))"
"(define-values"
"(reference-record-forward-references?)"
"(lambda(rr_60)"
"(let-values(((or-part_61)(reference-record-all-referenced? rr_60)))"
"(if or-part_61 or-part_61(positive?(set-count(reference-record-reference-before-bound rr_60)))))))"
"(define-values"
"(reference-record-clear!)"
"(lambda(rr_62)"
"(begin(set-reference-record-already-bound! rr_62 #f)(set-reference-record-reference-before-bound! rr_62 #f))))"
"(void)"
"(void)"
"(define-values"
"(call-expand-observe)"
"(lambda(obs_57 key_58 . args_59)"
"(obs_57"
"(hash-ref key->number key_58)"
"(if(null? args_59)(let-values() #f)(let-values()(apply list* args_59))))))"
"(define-values"
"(log-expand-start)"
"(lambda()"
"(let-values(((obs_60)(current-expand-observe)))"
"(if obs_60(let-values()(call-expand-observe obs_60 'start-expand))(void)))))"
"(define-values"
"(key->number)"
" '#hash((prim-#%stratified . 155)"
"(lambda-renames . 17)"
"(variable . 125)"
"(macro-post-x . 22)"
"(splice . 11)"
"(exit-local-bind . 160)"
"(prim-submodule . 158)"
"(local-lift . 129)"
"(prim-letrec-values . 113)"
"(enter-macro . 8)"
"(opaque-expr . 146)"
"(prim-set! . 123)"
"(prim-if . 105)"
"(prim-define-values . 104)"
"(block->letrec . 14)"
"(lift-statement . 134)"
"(enter-prim . 6)"
"(prim-define-syntaxes . 103)"
"(prim-begin0 . 108)"
"(track-origin . 152)"
"(lift-loop . 128)"
"(prim-expression . 138)"
"(phase-up . 20)"
"(local-post . 133)"
"(prim-require . 119)"
"(prim-stop . 100)"
"(start-expand . 141)"
"(enter-block . 10)"
"(prim-module-begin . 102)"
"(letrec-syntaxes-renames . 19)"
"(prim-#%datum . 115)"
"(enter-list . 4)"
"(enter-bind . 144)"
"(return . 2)"
"(rename-list . 147)"
"(next-group . 13)"
"(prim-quote-syntax . 118)"
"(exit-prim . 7)"
"(module-lift-loop . 137)"
"(exit-bind . 145)"
"(module-body . 23)"
"(let-renames . 16)"
"(prim-#%app . 109)"
"(exit-check . 127)"
"(prim-lambda . 110)"
"(prim-letrec-syntaxes-values . 114)"
"(exit-local-expr . 140)"
"(exit-list . 5)"
"(block-renames . 24)"
"(prim-quote . 117)"
"(enter-check . 126)"
"(block->list . 12)"
"(macro-pre-x . 21)"
"(prim-begin-for-syntax . 156)"
"(tag . 142)"
"(local-bind . 143)"
"(enter-local . 130)"
"(local-pre . 132)"
"(prim-#%top . 116)"
"(lift-require . 150)"
"(exit-macro . 9)"
"(prim-submodule* . 159)"
"(lift-provide . 151)"
"(prim-begin . 107)"
"(local-value-result . 154)"
"(module-lift-end-loop . 135)"
"(letlift-loop . 136)"
"(exit-local . 131)"
"(prim-provide . 122)"
"(enter-local-expr . 139)"
"(prim-module . 101)"
"(prim-with-continaution-mark . 106)"
"(next . 3)"
"(case-lambda-renames . 18)"
"(local-value . 153)"
"(prim-#%variable-reference . 149)"
"(rename-one . 148)"
"(prepare-env . 157)"
"(prim-case-lambda . 111)"
"(visit . 0)"
"(prim-let-values . 112)"
"(resolve . 1)))"
"(void)"
"(void)"
"(define-values"
"(expand5.1)"
"(lambda(alternate-id1_21 alternate-id2_22 s3_23 ctx4_24)"
"(let-values(((s_25) s3_23))"
"(let-values(((ctx_26) ctx4_24))"
"(let-values(((alternate-id_27)(if alternate-id2_22 alternate-id1_21 #f)))"
"(let-values()"
"(begin"
"(let-values(((obs_28)(expand-context-observer ctx_26)))"
"(if obs_28"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_28"
"(if(expand-context-only-immediate? ctx_26) 'enter-check 'visit)"
" s_25)))"
"(void)))"
"(if(identifier? s_25)"
"(let-values()(expand-identifier s_25 ctx_26 alternate-id_27))"
"(if(if(pair?(syntax-content s_25))(identifier?(car(syntax-content s_25))) #f)"
"(let-values()(expand-id-application-form s_25 ctx_26 alternate-id_27))"
"(if(let-values(((or-part_29)(pair?(syntax-content s_25))))"
"(if or-part_29 or-part_29(null?(syntax-content s_25))))"
"(let-values()(expand-implicit '#%app s_25 ctx_26 #f))"
"(if(already-expanded?(syntax-content s_25))"
"(let-values()(expand-already-expanded s_25 ctx_26))"
"(let-values()(expand-implicit '#%datum s_25 ctx_26 #f)))))))))))))"
"(define-values"
"(expand-identifier)"
"(lambda(s_47 ctx_48 alternate-id_49)"
"(let-values(((id_50)(let-values(((or-part_51) alternate-id_49))(if or-part_51 or-part_51 s_47))))"
"(if(free-id-set-member?(expand-context-stops ctx_48)(expand-context-phase ctx_48) id_50)"
"(let-values()"
"(begin"
"(let-values(((obs_52)(expand-context-observer ctx_48)))"
"(if obs_52"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_48))"
"(let-values()"
"(begin"
"(call-expand-observe obs_52 'enter-prim s_47)"
"(call-expand-observe obs_52 'prim-stop)"
"(call-expand-observe obs_52 'exit-prim s_47)"
"(call-expand-observe obs_52 'return s_47)))"
"(void)))"
"(void)))"
" s_47))"
"(let-values()"
"(let-values(((binding_53)"
"(let-values(((id65_55) id_50)"
"((temp66_56)(expand-context-phase ctx_48))"
"((temp67_57) 'ambiguous)"
"((temp68_58) #t))"
"(resolve+shift30.1 temp67_57 #t #f #f #f #f temp68_58 #t #f #f id65_55 temp66_56))))"
"(begin"
"(let-values(((obs_59)(expand-context-observer ctx_48)))"
"(if obs_59"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_48))"
"(let-values()(call-expand-observe obs_59 'resolve id_50))"
"(void)))"
"(void)))"
"(if(eq? binding_53 'ambiguous)"
"(let-values()(raise-ambiguous-error id_50 ctx_48))"
"(if(not binding_53)"
"(let-values()(expand-implicit '#%top(substitute-alternate-id s_47 alternate-id_49) ctx_48 s_47))"
"(let-values()"
"(let-values(((t_60 primitive?_61 insp-of-t_62)"
"(let-values(((binding69_64) binding_53)"
"((ctx70_65) ctx_48)"
"((id71_66) id_50)"
"((temp72_67)(if alternate-id_49 s_47 #f))"
"((temp73_68)(expand-context-in-local-expand? ctx_48)))"
"(lookup15.1 temp72_67 #t temp73_68 #t binding69_64 ctx70_65 id71_66))))"
"(dispatch t_60 insp-of-t_62 s_47 id_50 ctx_48 binding_53 primitive?_61))))))))))))"
"(define-values"
"(expand-id-application-form)"
"(lambda(s_69 ctx_70 alternate-id_71)"
"(let-values(((id_72)"
"(let-values(((or-part_73) alternate-id_71))"
"(if or-part_73 or-part_73(car(syntax-e/no-taint s_69))))))"
"(if(free-id-set-member?(expand-context-stops ctx_70)(expand-context-phase ctx_70) id_72)"
"(let-values()"
"(begin"
"(let-values(((obs_74)(expand-context-observer ctx_70)))"
"(if obs_74"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_70))"
"(let-values()"
"(begin"
"(call-expand-observe obs_74 'enter-prim s_69)"
"(call-expand-observe obs_74 'prim-stop)"
"(call-expand-observe obs_74 'exit-prim s_69)"
"(call-expand-observe obs_74 'return s_69)))"
"(void)))"
"(void)))"
" s_69))"
"(let-values()"
"(let-values(((binding_75)"
"(let-values(((id74_77) id_72)"
"((temp75_78)(expand-context-phase ctx_70))"
"((temp76_79) 'ambiguous)"
"((temp77_80) #t))"
"(resolve+shift30.1 temp76_79 #t #f #f #f #f temp77_80 #t #f #f id74_77 temp75_78))))"
"(begin"
"(let-values(((obs_81)(expand-context-observer ctx_70)))"
"(if obs_81"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_70))"
"(let-values()(call-expand-observe obs_81 'resolve id_72))"
"(void)))"
"(void)))"
"(if(eq? binding_75 'ambiguous)"
"(let-values()(raise-ambiguous-error id_72 ctx_70))"
"(if(not binding_75)"
"(let-values()(expand-implicit '#%app(substitute-alternate-id s_69 alternate-id_71) ctx_70 id_72))"
"(let-values()"
"(let-values(((t_82 primitive?_83 insp-of-t_84)"
"(let-values(((binding78_86) binding_75)"
"((ctx79_87) ctx_70)"
"((id80_88) id_72)"
"((temp81_89)(if alternate-id_71(car(syntax-e/no-taint s_69)) #f))"
"((temp82_90)(expand-context-in-local-expand? ctx_70)))"
"(lookup15.1 temp81_89 #t temp82_90 #t binding78_86 ctx79_87 id80_88))))"
"(if(variable? t_82)"
"(let-values()"
"(expand-implicit '#%app(substitute-alternate-id s_69 alternate-id_71) ctx_70 id_72))"
"(let-values()"
"(dispatch t_82 insp-of-t_84 s_69 id_72 ctx_70 binding_75 primitive?_83))))))))))))))"
"(define-values"
"(expand-implicit)"
"(lambda(sym_91 s_92 ctx_93 trigger-id_94)"
"(let-values(((disarmed-s_95)(syntax-disarm$1 s_92)))"
"(let-values(((id_96)(datum->syntax$1 disarmed-s_95 sym_91)))"
"(if(free-id-set-member?(expand-context-stops ctx_93)(expand-context-phase ctx_93) id_96)"
"(let-values()"
"(begin"
"(let-values(((obs_97)(expand-context-observer ctx_93)))"
"(if obs_97"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_93))"
"(let-values()"
"(begin"
"(call-expand-observe obs_97 'enter-prim s_92)"
"(call-expand-observe obs_97 'prim-stop)"
"(call-expand-observe obs_97 'exit-prim s_92)"
"(call-expand-observe obs_97 'return s_92)))"
"(void)))"
"(void)))"
" s_92))"
"(let-values()"
"(let-values(((b_98)"
"(let-values(((id83_100) id_96)"
"((temp84_101)(expand-context-phase ctx_93))"
"((temp85_102) 'ambiguous)"
"((temp86_103) #t))"
"(resolve+shift30.1 temp85_102 #t #f #f #f #f temp86_103 #t #f #f id83_100 temp84_101))))"
"(if(eq? b_98 'ambiguous)"
"(let-values()(raise-ambiguous-error id_96 ctx_93))"
"(let-values()"
"(let-values(((t_104 primitive?_105 insp-of-t_106)"
"(if b_98"
"(let-values(((b87_107) b_98)((ctx88_108) ctx_93)((id89_109) id_96))"
"(lookup15.1 #f #f #f #f b87_107 ctx88_108 id89_109))"
"(values #f #f #f))))"
"(if(transformer? t_104)"
"(let-values()"
"(dispatch-transformer"
" t_104"
" insp-of-t_106"
"(make-explicit sym_91 s_92 disarmed-s_95)"
" id_96"
" ctx_93"
" b_98))"
"(if(expand-context-only-immediate? ctx_93)"
"(let-values()"
"(begin"
"(let-values(((obs_110)(expand-context-observer ctx_93)))"
"(if obs_110"
"(let-values()(let-values()(call-expand-observe obs_110 'exit-check s_92)))"
"(void)))"
" s_92))"
"(if(core-form? t_104)"
"(let-values()"
"(if(if(eq? sym_91 '#%top)"
"(if(eq?(core-form-name t_104) '#%top)(expand-context-in-local-expand? ctx_93) #f)"
" #f)"
"(let-values()(dispatch-implicit-#%top-core-form t_104 s_92 ctx_93))"
"(let-values()"
"(dispatch-core-form t_104(make-explicit sym_91 s_92 disarmed-s_95) ctx_93))))"
"(let-values()"
"(let-values(((tl-id_111)"
"(if(eq? sym_91 '#%top)"
"(if(root-expand-context-top-level-bind-scope ctx_93)"
"(add-scope s_92(root-expand-context-top-level-bind-scope ctx_93))"
" #f)"
" #f)))"
"(let-values(((tl-b_112)"
"(if tl-id_111"
"(let-values(((tl-id90_113) tl-id_111)"
"((temp91_114)(expand-context-phase ctx_93)))"
"(resolve29.1 #f #f #f #f #f #f #f #f tl-id90_113 temp91_114))"
" #f)))"
"(if tl-b_112"
"(let-values()"
"(if(expand-context-to-parsed? ctx_93)"
"(parsed-id2.1 tl-id_111 tl-b_112 #f)"
" tl-id_111))"
"(let-values()"
"(raise-syntax-implicit-error s_92 sym_91 trigger-id_94 ctx_93)))))))))))))))))))"
"(define-values"
"(expand-already-expanded)"
"(lambda(s_115 ctx_116)"
"(let-values(((ae_117)(syntax-e$1 s_115)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_119)(syntax-any-macro-scopes? s_115)))"
"(if or-part_119"
" or-part_119"
"(not"
"(eq?(expand-context-binding-layer ctx_116)(already-expanded-binding-layer ae_117)))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                            \"expanded syntax not in its original lexical context;\\n\""
"                            \" extra bindings or scopes in the current context\")"
"(already-expanded-s ae_117)))"
"(void))"
"(values))))"
"(let-values(((result-s_118)(syntax-track-origin$1(already-expanded-s ae_117) s_115)))"
"(begin"
"(let-values(((obs_120)(expand-context-observer ctx_116)))"
"(if obs_120"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_120 'tag result-s_118)"
"(call-expand-observe obs_120 'opaque-expr result-s_118))))"
"(void)))"
"(if(expand-context-to-parsed? ctx_116)"
"(let-values(((result-s92_121) result-s_118)((ctx93_122) ctx_116))"
"(expand5.1 #f #f result-s92_121 ctx93_122))"
" result-s_118)))))))"
"(define-values"
"(make-explicit)"
"(lambda(sym_123 s_124 disarmed-s_125)"
"(syntax-rearm$1(datum->syntax$1 disarmed-s_125(cons sym_123 disarmed-s_125) s_124 s_124) s_124)))"
"(define-values"
"(dispatch)"
"(lambda(t_126 insp-of-t_127 s_128 id_129 ctx_130 binding_131 primitive?_132)"
"(if(core-form? t_126)"
"(let-values()(dispatch-core-form t_126 s_128 ctx_130))"
"(if(transformer? t_126)"
"(let-values()(dispatch-transformer t_126 insp-of-t_127 s_128 id_129 ctx_130 binding_131))"
"(if(variable? t_126)"
"(let-values()(dispatch-variable t_126 s_128 id_129 ctx_130 binding_131 primitive?_132))"
"          (let-values () (raise-syntax-error$1 #f \"illegal use of syntax\" s_128)))))))"
"(define-values"
"(dispatch-core-form)"
"(lambda(t_133 s_134 ctx_135)"
"(if(expand-context-only-immediate? ctx_135)"
"(let-values()"
"(begin"
"(let-values(((obs_136)(expand-context-observer ctx_135)))"
"(if obs_136(let-values()(let-values()(call-expand-observe obs_136 'exit-check s_134)))(void)))"
" s_134))"
"(if(expand-context-observer ctx_135)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_138)(expand-context-observer ctx_135)))"
"(if obs_138"
"(let-values()(let-values()(call-expand-observe obs_138 'enter-prim s_134)))"
"(void)))"
"(values))))"
"(let-values(((result-s_137)((core-form-expander t_133) s_134 ctx_135)))"
"(begin"
"(let-values(((obs_139)(expand-context-observer ctx_135)))"
"(if obs_139"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_139 'exit-prim result-s_137)"
"(call-expand-observe obs_139 'return result-s_137))))"
"(void)))"
" result-s_137))))"
"(let-values()((core-form-expander t_133) s_134 ctx_135))))))"
"(define-values"
"(dispatch-implicit-#%top-core-form)"
"(lambda(t_140 s_141 ctx_142)"
"(let-values((()"
"(begin"
"(let-values(((obs_144)(expand-context-observer ctx_142)))"
"(if obs_144"
"(let-values()(let-values()(call-expand-observe obs_144 'enter-prim s_141)))"
"(void)))"
"(values))))"
"(let-values(((result-s_143)((core-form-expander t_140) s_141 ctx_142 #t)))"
"(begin"
"(let-values(((obs_145)(expand-context-observer ctx_142)))"
"(if obs_145"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_145 'exit-prim result-s_143)"
"(call-expand-observe obs_145 'return result-s_143))))"
"(void)))"
" result-s_143)))))"
"(define-values"
"(dispatch-transformer)"
"(lambda(t_146 insp-of-t_147 s_148 id_149 ctx_150 binding_151)"
"(if(not-in-this-expand-context? t_146 ctx_150)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_153)(expand-context-observer ctx_150)))"
"(if obs_153"
"(let-values()(let-values()(call-expand-observe obs_153 'enter-macro s_148)))"
"(void)))"
"(values))))"
"(let-values(((adj-s_152)"
"(avoid-current-expand-context(substitute-alternate-id s_148 id_149) t_146 ctx_150)))"
"(begin"
"(let-values(((obs_154)(expand-context-observer ctx_150)))"
"(if obs_154(let-values()(let-values()(call-expand-observe obs_154 'exit-macro s_148)))(void)))"
"(let-values(((adj-s94_155) adj-s_152)((ctx95_156) ctx_150))(expand5.1 #f #f adj-s94_155 ctx95_156))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_159)(expand-context-observer ctx_150)))"
"(if obs_159"
"(let-values()"
"(if(expand-context-only-immediate? ctx_150)"
"(let-values()"
"(begin"
"(call-expand-observe obs_159 'visit s_148)"
"(call-expand-observe obs_159 'resolves id_149)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-s_157 re-ctx_158)"
"(if(1/rename-transformer? t_146)"
"(values s_148 ctx_150)"
"(apply-transformer t_146 insp-of-t_147 s_148 id_149 ctx_150 binding_151))))"
"(begin"
"(let-values(((obs_160)(expand-context-observer ctx_150)))"
"(if obs_160"
"(let-values()"
"(if(expand-context-only-immediate? ctx_150)"
"(let-values()(call-expand-observe obs_160 'return exp-s_157))"
"(void)))"
"(void)))"
"(if(expand-context-just-once? ctx_150)"
"(let-values() exp-s_157)"
"(let-values()"
"(let-values(((exp-s96_162) exp-s_157)"
"((re-ctx97_163) re-ctx_158)"
"((temp98_164)"
"(if(1/rename-transformer? t_146)"
"(syntax-track-origin$1"
"(rename-transformer-target-in-context t_146 ctx_150)"
" id_149"
" id_149)"
" #f)))"
"(expand5.1 temp98_164 #t exp-s96_162 re-ctx97_163)))))))))))"
"(define-values"
"(dispatch-variable)"
"(lambda(t_165 s_166 id_167 ctx_168 binding_169 primitive?_170)"
"(if(expand-context-only-immediate? ctx_168)"
"(let-values()"
"(begin"
"(let-values(((obs_171)(expand-context-observer ctx_168)))"
"(if obs_171(let-values()(let-values()(call-expand-observe obs_171 'exit-check s_166)))(void)))"
" id_167))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_173)(expand-context-observer ctx_168)))"
"(if obs_173"
"(let-values()(let-values()(call-expand-observe obs_173 'variable s_166)))"
"(void)))"
"(values))))"
"(let-values((()(begin(register-variable-referenced-if-local! binding_169)(values))))"
"(let-values(((result-s_172)"
"(let-values(((id99_175) id_167)"
"((t100_176) t_165)"
"((temp101_177)"
"(free-id-set-empty-or-just-module*?(expand-context-stops ctx_168))))"
"(substitute-variable6.1 temp101_177 id99_175 t100_176))))"
"(if(expand-context-to-parsed? ctx_168)"
"(let-values()"
"(let-values(((prop-s_178)(keep-properties-only result-s_172)))"
"(let-values(((insp_179)(syntax-inspector result-s_172)))"
"(if primitive?_170"
"(parsed-primitive-id3.1 prop-s_178 binding_169 insp_179)"
"(parsed-id2.1 prop-s_178 binding_169 insp_179)))))"
"(let-values()"
"(begin"
"(let-values(((obs_180)(expand-context-observer ctx_168)))"
"(if obs_180"
"(let-values()(let-values()(call-expand-observe obs_180 'return result-s_172)))"
"(void)))"
" result-s_172))))))))))"
"(define-values"
"(apply-transformer)"
"(lambda(t_181 insp-of-t_182 s_183 id_184 ctx_185 binding_186)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_199)(expand-context-observer ctx_185)))"
"(if obs_199"
"(let-values()(let-values()(call-expand-observe obs_199 'enter-macro s_183)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_187)(syntax-disarm$1 s_183)))"
"(let-values(((intro-scope_188)(new-scope 'macro)))"
"(let-values(((intro-s_189)(flip-scope disarmed-s_187 intro-scope_188)))"
"(let-values(((use-s_190 use-scopes_191)(maybe-add-use-site-scope intro-s_189 ctx_185 binding_186)))"
"(let-values(((cleaned-s_192)(syntax-remove-taint-dispatch-properties use-s_190)))"
"(let-values(((def-ctx-scopes_193)(box null)))"
"(let-values(((transformed-s_194)"
"(apply-transformer-in-context"
" t_181"
" cleaned-s_192"
" ctx_185"
" insp-of-t_182"
" intro-scope_188"
" use-scopes_191"
" def-ctx-scopes_193"
" id_184)))"
"(let-values(((result-s_195)(flip-scope transformed-s_194 intro-scope_188)))"
"(let-values(((post-s_196)(maybe-add-post-expansion-scope result-s_195 ctx_185)))"
"(let-values(((tracked-s_197)(syntax-track-origin$1 post-s_196 cleaned-s_192 id_184)))"
"(let-values(((rearmed-s_198)"
"(taint-dispatch"
" tracked-s_197"
"(lambda(t-s_200)(syntax-rearm$1 t-s_200 s_183))"
"(expand-context-phase ctx_185))))"
"(begin"
"(let-values(((obs_201)(expand-context-observer ctx_185)))"
"(if obs_201"
"(let-values()"
"(let-values()(call-expand-observe obs_201 'exit-macro rearmed-s_198)))"
"(void)))"
"(values"
" rearmed-s_198"
"(accumulate-def-ctx-scopes ctx_185 def-ctx-scopes_193))))))))))))))))))"
"(define-values"
"(apply-transformer-in-context)"
"(lambda(t_202 cleaned-s_203 ctx_204 insp-of-t_205 intro-scope_206 use-scopes_207 def-ctx-scopes_208 id_209)"
"(let-values((()"
"(begin"
"(let-values(((obs_214)(expand-context-observer ctx_204)))"
"(if obs_214"
"(let-values()(let-values()(call-expand-observe obs_214 'macro-pre-x cleaned-s_203)))"
"(void)))"
"(values))))"
"(let-values(((confine-def-ctx-scopes?_210)"
"(not"
"(let-values(((or-part_215)(expand-context-only-immediate? ctx_204)))"
"(if or-part_215"
" or-part_215"
"(not(free-id-set-empty-or-just-module*?(expand-context-stops ctx_204))))))))"
"(let-values(((accum-ctx_211)"
"(if(if confine-def-ctx-scopes?_210"
"(if(expand-context-def-ctx-scopes ctx_204)"
"(not(null?(unbox(expand-context-def-ctx-scopes ctx_204))))"
" #f)"
" #f)"
"(accumulate-def-ctx-scopes ctx_204(expand-context-def-ctx-scopes ctx_204))"
" ctx_204)))"
"(let-values(((m-ctx_212)"
"(let-values(((v_216) accum-ctx_211))"
"(let-values(((the-struct_217) v_216))"
"(if(expand-context/outer? the-struct_217)"
"(let-values(((current-introduction-scopes102_218)(cons intro-scope_206 use-scopes_207))"
"((def-ctx-scopes103_219)"
"(if confine-def-ctx-scopes?_210"
" def-ctx-scopes_208"
"(expand-context-def-ctx-scopes ctx_204)))"
"((inner104_220)(root-expand-context/outer-inner v_216)))"
"(expand-context/outer1.1"
" inner104_220"
"(root-expand-context/outer-post-expansion-scope the-struct_217)"
"(root-expand-context/outer-use-site-scopes the-struct_217)"
"(root-expand-context/outer-frame-id the-struct_217)"
"(expand-context/outer-context the-struct_217)"
"(expand-context/outer-env the-struct_217)"
"(expand-context/outer-post-expansion-scope-action the-struct_217)"
"(expand-context/outer-scopes the-struct_217)"
" def-ctx-scopes103_219"
"(expand-context/outer-binding-layer the-struct_217)"
"(expand-context/outer-reference-records the-struct_217)"
"(expand-context/outer-only-immediate? the-struct_217)"
"(expand-context/outer-need-eventually-defined the-struct_217)"
" current-introduction-scopes102_218"
"(expand-context/outer-name the-struct_217)))"
"                              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_217))))))"
"(let-values(((transformed-s_213)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" m-ctx_212"
" 1/current-namespace"
"(namespace->namespace-at-phase"
"(expand-context-namespace ctx_204)"
"(add1(expand-context-phase ctx_204)))"
" current-module-code-inspector"
"(let-values(((or-part_221) insp-of-t_205))"
"(if or-part_221 or-part_221(current-module-code-inspector))))"
"(let-values()"
"(call-with-continuation-barrier"
"(lambda()((transformer->procedure t_202) cleaned-s_203)))))))"
"(begin"
"(let-values(((obs_222)(expand-context-observer ctx_204)))"
"(if obs_222"
"(let-values()(let-values()(call-expand-observe obs_222 'macro-post-x transformed-s_213)))"
"(void)))"
"(if(syntax?$1 transformed-s_213)"
"(void)"
"(let-values()"
"(raise-arguments-error"
"(syntax-e$1 id_209)"
"                     \"received value from syntax expander was not syntax\""
"                     \"received\""
" transformed-s_213)))"
" transformed-s_213))))))))"
"(define-values"
"(maybe-add-use-site-scope)"
"(lambda(s_223 ctx_224 binding_225)"
"(if(if(root-expand-context-use-site-scopes ctx_224)"
"(matching-frame?(root-expand-context-frame-id ctx_224)(binding-frame-id binding_225))"
" #f)"
"(let-values()"
"(let-values(((sc_226)(new-scope 'use-site)))"
"(let-values(((b_227)(root-expand-context-use-site-scopes ctx_224)))"
"(begin(set-box! b_227(cons sc_226(unbox b_227)))(values(add-scope s_223 sc_226)(list sc_226))))))"
"(let-values()(values s_223 null)))))"
"(define-values"
"(matching-frame?)"
"(lambda(current-frame-id_228 bind-frame-id_229)"
"(if current-frame-id_228"
"(let-values(((or-part_230)(eq? current-frame-id_228 bind-frame-id_229)))"
"(if or-part_230 or-part_230(eq? current-frame-id_228 'all)))"
" #f)))"
"(define-values"
"(maybe-add-post-expansion-scope)"
"(lambda(s_231 ctx_232)"
"(if(root-expand-context-post-expansion-scope ctx_232)"
"(let-values()"
"((expand-context-post-expansion-scope-action ctx_232) s_231(root-expand-context-post-expansion-scope ctx_232)))"
"(let-values() s_231))))"
"(define-values"
"(accumulate-def-ctx-scopes)"
"(lambda(ctx_233 def-ctx-scopes_234)"
"(if(null?(unbox def-ctx-scopes_234))"
" ctx_233"
"(let-values(((v_235) ctx_233))"
"(let-values(((the-struct_236) v_235))"
"(if(expand-context/outer? the-struct_236)"
"(let-values(((scopes105_237)(append(unbox def-ctx-scopes_234)(expand-context-scopes ctx_233)))"
"((inner106_238)(root-expand-context/outer-inner v_235)))"
"(expand-context/outer1.1"
" inner106_238"
"(root-expand-context/outer-post-expansion-scope the-struct_236)"
"(root-expand-context/outer-use-site-scopes the-struct_236)"
"(root-expand-context/outer-frame-id the-struct_236)"
"(expand-context/outer-context the-struct_236)"
"(expand-context/outer-env the-struct_236)"
"(expand-context/outer-post-expansion-scope-action the-struct_236)"
" scopes105_237"
"(expand-context/outer-def-ctx-scopes the-struct_236)"
"(expand-context/outer-binding-layer the-struct_236)"
"(expand-context/outer-reference-records the-struct_236)"
"(expand-context/outer-only-immediate? the-struct_236)"
"(expand-context/outer-need-eventually-defined the-struct_236)"
"(expand-context/outer-current-introduction-scopes the-struct_236)"
"(expand-context/outer-name the-struct_236)))"
"            (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_236)))))))"
"(define-values"
"(lookup15.1)"
"(lambda(in8_239"
" in10_240"
" out-of-context-as-variable?9_241"
" out-of-context-as-variable?11_242"
" b12_243"
" ctx13_244"
" id14_245)"
"(let-values(((b_246) b12_243))"
"(let-values(((ctx_247) ctx13_244))"
"(let-values(((id_248) id14_245))"
"(let-values(((in-s_249)(if in10_240 in8_239 #f)))"
"(let-values(((out-of-context-as-variable?_250)"
"(if out-of-context-as-variable?11_242 out-of-context-as-variable?9_241 #f)))"
"(let-values()"
"(let-values(((b107_252) b_246)"
"((temp108_253)(expand-context-env ctx_247))"
"((temp109_254)(expand-context-lift-envs ctx_247))"
"((temp110_255)(expand-context-namespace ctx_247))"
"((temp111_256)(expand-context-phase ctx_247))"
"((id112_257) id_248)"
"((in-s113_258) in-s_249)"
"((out-of-context-as-variable?114_259) out-of-context-as-variable?_250))"
"(binding-lookup48.1"
" in-s113_258"
" #t"
" out-of-context-as-variable?114_259"
" #t"
" b107_252"
" temp108_253"
" temp109_254"
" temp110_255"
" temp111_256"
" id112_257))))))))))"
"(define-values"
"(substitute-alternate-id)"
"(lambda(s_286 alternate-id_287)"
"(if(not alternate-id_287)"
"(let-values() s_286)"
"(if(identifier? s_286)"
"(let-values()(syntax-rearm$1(syntax-track-origin$1 alternate-id_287 s_286) s_286))"
"(let-values()"
"(let-values(((disarmed-s_288)(syntax-disarm$1 s_286)))"
"(syntax-rearm$1"
"(syntax-track-origin$1"
"(datum->syntax$1 disarmed-s_288(cons alternate-id_287(cdr(syntax-e$1 disarmed-s_288))) s_286)"
" s_286)"
" s_286)))))))"
"(define-values"
"(register-variable-referenced-if-local!)"
"(lambda(binding_289)"
"(if(if(local-binding? binding_289)(reference-record?(binding-frame-id binding_289)) #f)"
"(let-values()(reference-record-used!(binding-frame-id binding_289)(local-binding-key binding_289)))"
"(void))))"
"(define-values"
"(expand/capture-lifts28.1)"
"(lambda(always-wrap?21_290"
" always-wrap?25_291"
" begin-form?19_292"
" begin-form?23_293"
" expand-lifts?18_294"
" expand-lifts?22_295"
" lift-key20_296"
" lift-key24_297"
" s26_298"
" ctx27_299)"
"(let-values(((s_300) s26_298))"
"(let-values(((ctx_301) ctx27_299))"
"(let-values(((expand-lifts?_302)(if expand-lifts?22_295 expand-lifts?18_294 #f)))"
"(let-values(((begin-form?_303)(if begin-form?23_293 begin-form?19_292 #f)))"
"(let-values(((lift-key_304)(if lift-key24_297 lift-key20_296(generate-lift-key))))"
"(let-values(((always-wrap?_305)(if always-wrap?25_291 always-wrap?21_290 #f)))"
"(let-values()"
"(let-values(((context_306)(expand-context-context ctx_301)))"
"(let-values(((phase_307)(expand-context-phase ctx_301)))"
"(let-values(((local?_308)(not begin-form?_303)))"
"((letrec-values(((loop_309)"
"(lambda(s_310 always-wrap?_311 ctx_312)"
"(let-values(((lift-env_313)(if local?_308(box empty-env) #f)))"
"(let-values(((lift-ctx_314)"
"(let-values(((temp115_320)"
"(if local?_308"
"(make-local-lift"
" lift-env_313"
"(root-expand-context-counter ctx_312))"
"(make-top-level-lift ctx_312)))"
"((temp116_321)"
"(if(not local?_308)"
"(eq? context_306 'module)"
" #f)))"
"(make-lift-context6.1 temp116_321 #t temp115_320))))"
"(let-values(((capture-ctx_315)"
"(let-values(((v_322) ctx_312))"
"(let-values(((the-struct_323) v_322))"
"(if(expand-context/outer? the-struct_323)"
"(let-values(((inner117_324)"
"(let-values(((the-struct_325)"
"(root-expand-context/outer-inner"
" v_322)))"
"(if(expand-context/inner?"
" the-struct_325)"
"(let-values(((lift-key118_326)"
" lift-key_304)"
"((lifts119_327)"
" lift-ctx_314)"
"((lift-envs120_328)"
"(if local?_308"
"(cons"
" lift-env_313"
"(expand-context-lift-envs"
" ctx_312))"
"(expand-context-lift-envs"
" ctx_312)))"
"((module-lifts121_329)"
"(if(let-values(((or-part_330)"
" local?_308))"
"(if or-part_330"
" or-part_330"
"(not"
"(memq"
" context_306"
" '(top-level"
" module)))))"
"(expand-context-module-lifts"
" ctx_312)"
" lift-ctx_314)))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_325)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_325)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_325)"
"(root-expand-context/inner-defined-syms"
" the-struct_325)"
"(root-expand-context/inner-counter"
" the-struct_325)"
" lift-key118_326"
"(expand-context/inner-to-parsed?"
" the-struct_325)"
"(expand-context/inner-phase"
" the-struct_325)"
"(expand-context/inner-namespace"
" the-struct_325)"
"(expand-context/inner-user-env"
" the-struct_325)"
"(expand-context/inner-just-once?"
" the-struct_325)"
"(expand-context/inner-module-begin-k"
" the-struct_325)"
"(expand-context/inner-allow-unbound?"
" the-struct_325)"
"(expand-context/inner-in-local-expand?"
" the-struct_325)"
"(expand-context/inner-stops"
" the-struct_325)"
"(expand-context/inner-declared-submodule-names"
" the-struct_325)"
" lifts119_327"
" lift-envs120_328"
" module-lifts121_329"
"(expand-context/inner-require-lifts"
" the-struct_325)"
"(expand-context/inner-to-module-lifts"
" the-struct_325)"
"(expand-context/inner-requires+provides"
" the-struct_325)"
"(expand-context/inner-observer"
" the-struct_325)"
"(expand-context/inner-for-serializable?"
" the-struct_325)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                       \"expand-context/inner?\""
" the-struct_325)))))"
"(expand-context/outer1.1"
" inner117_324"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_323)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_323)"
"(root-expand-context/outer-frame-id"
" the-struct_323)"
"(expand-context/outer-context the-struct_323)"
"(expand-context/outer-env the-struct_323)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_323)"
"(expand-context/outer-scopes the-struct_323)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_323)"
"(expand-context/outer-binding-layer"
" the-struct_323)"
"(expand-context/outer-reference-records"
" the-struct_323)"
"(expand-context/outer-only-immediate?"
" the-struct_323)"
"(expand-context/outer-need-eventually-defined"
" the-struct_323)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_323)"
"(expand-context/outer-name the-struct_323)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"expand-context/outer?\""
" the-struct_323))))))"
"(let-values(((exp-s_316)"
"(let-values(((s122_331) s_310)"
"((capture-ctx123_332) capture-ctx_315))"
"(expand5.1 #f #f s122_331 capture-ctx123_332))))"
"(let-values(((lifts_317)"
"(get-and-clear-lifts!"
"(expand-context-lifts capture-ctx_315))))"
"(let-values(((with-lifts-s_318)"
"(if(let-values(((or-part_333)(pair? lifts_317)))"
"(if or-part_333 or-part_333 always-wrap?_311))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_312)"
"(let-values()"
"(begin"
"(if expand-lifts?_302"
"(void)"
"(let-values()"
"(error"
"                                                                                   \"internal error: to-parsed mode without expanding lifts\")))"
"(wrap-lifts-as-parsed-let"
" lifts_317"
" exp-s_316"
" s_310"
" ctx_312"
"(lambda(rhs_334 rhs-ctx_335)"
"(loop_309 rhs_334 #f rhs-ctx_335)))))"
"(let-values()"
"(if begin-form?_303"
"(let-values(((lifts124_336) lifts_317)"
"((exp-s125_337) exp-s_316)"
"((s126_338) s_310)"
"((phase127_339) phase_307))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" lifts124_336"
" exp-s125_337"
" s126_338"
" phase127_339))"
"(wrap-lifts-as-let"
" lifts_317"
" exp-s_316"
" s_310"
" phase_307)))))"
"(let-values() exp-s_316))))"
"(if(let-values(((or-part_340)(not expand-lifts?_302)))"
"(if or-part_340"
" or-part_340"
"(let-values(((or-part_341)(null? lifts_317)))"
"(if or-part_341"
" or-part_341"
"(expand-context-to-parsed? ctx_312)))))"
"(let-values() with-lifts-s_318)"
"(let-values()"
"(begin"
"(let-values(((obs_342)"
"(expand-context-observer ctx_312)))"
"(if obs_342"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_342"
" 'lift-loop"
" with-lifts-s_318)))"
"(void)))"
"(loop_309 with-lifts-s_318 #f ctx_312)))))))))))))"
" loop_309)"
" s_300"
" always-wrap?_305"
" ctx_301)))))))))))))"
"(define-values"
"(expand-transformer43.1)"
"(lambda(always-wrap?35_378"
" always-wrap?40_379"
" begin-form?32_380"
" begin-form?37_381"
" context31_382"
" context36_383"
" expand-lifts?33_384"
" expand-lifts?38_385"
" lift-key34_386"
" lift-key39_387"
" s41_388"
" ctx42_389)"
"(let-values(((s_390) s41_388))"
"(let-values(((ctx_391) ctx42_389))"
"(let-values(((context_392)(if context36_383 context31_382 'expression)))"
"(let-values(((begin-form?_393)(if begin-form?37_381 begin-form?32_380 #f)))"
"(let-values(((expand-lifts?_394)(if expand-lifts?38_385 expand-lifts?33_384 #t)))"
"(let-values(((lift-key_395)(if lift-key39_387 lift-key34_386(generate-lift-key))))"
"(let-values(((always-wrap?_396)(if always-wrap?40_379 always-wrap?35_378 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((trans-ctx_397)(context->transformer-context ctx_391 context_392)))"
"(let-values(((s128_399) s_390)"
"((trans-ctx129_400) trans-ctx_397)"
"((expand-lifts?130_401) expand-lifts?_394)"
"((begin-form?131_402) begin-form?_393)"
"((lift-key132_403) lift-key_395)"
"((always-wrap?133_404) always-wrap?_396))"
"(expand/capture-lifts28.1"
" always-wrap?133_404"
" #t"
" begin-form?131_402"
" #t"
" expand-lifts?130_401"
" #t"
" lift-key132_403"
" #t"
" s128_399"
" trans-ctx129_400))))))))))))))"
"(define-values"
"(context->transformer-context)"
"(let-values(((context->transformer-context49_446)"
"(lambda(ctx48_447 context46_448 context47_449)"
"(let-values(((ctx_450) ctx48_447))"
"(let-values(((context_451)(if context47_449 context46_448 'expression)))"
"(let-values()"
"(let-values(((phase_452)(add1(expand-context-phase ctx_450))))"
"(let-values(((ns_453)"
"(namespace->namespace-at-phase(expand-context-namespace ctx_450) phase_452)))"
"(begin"
"(namespace-visit-available-modules! ns_453 phase_452)"
"(let-values(((v_454) ctx_450))"
"(let-values(((the-struct_455) v_454))"
"(if(expand-context/outer? the-struct_455)"
"(let-values(((context134_456) context_451)"
"((scopes135_457) null)"
"((env136_458) empty-env)"
"((only-immediate?137_459) #f)"
"((def-ctx-scopes138_460) #f)"
"((post-expansion-scope139_461) #f)"
"((inner140_462)"
"(let-values(((the-struct_463)"
"(root-expand-context/outer-inner v_454)))"
"(if(expand-context/inner? the-struct_463)"
"(let-values(((phase141_464) phase_452)"
"((namespace142_465) ns_453))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_463)"
"(root-expand-context/inner-top-level-bind-scope the-struct_463)"
"(root-expand-context/inner-all-scopes-stx the-struct_463)"
"(root-expand-context/inner-defined-syms the-struct_463)"
"(root-expand-context/inner-counter the-struct_463)"
"(root-expand-context/inner-lift-key the-struct_463)"
"(expand-context/inner-to-parsed? the-struct_463)"
" phase141_464"
" namespace142_465"
"(expand-context/inner-user-env the-struct_463)"
"(expand-context/inner-just-once? the-struct_463)"
"(expand-context/inner-module-begin-k the-struct_463)"
"(expand-context/inner-allow-unbound? the-struct_463)"
"(expand-context/inner-in-local-expand? the-struct_463)"
"(expand-context/inner-stops the-struct_463)"
"(expand-context/inner-declared-submodule-names the-struct_463)"
"(expand-context/inner-lifts the-struct_463)"
"(expand-context/inner-lift-envs the-struct_463)"
"(expand-context/inner-module-lifts the-struct_463)"
"(expand-context/inner-require-lifts the-struct_463)"
"(expand-context/inner-to-module-lifts the-struct_463)"
"(expand-context/inner-requires+provides the-struct_463)"
"(expand-context/inner-observer the-struct_463)"
"(expand-context/inner-for-serializable? the-struct_463)))"
"(raise-argument-error"
" 'struct-copy"
"                                                       \"expand-context/inner?\""
" the-struct_463)))))"
"(expand-context/outer1.1"
" inner140_462"
" post-expansion-scope139_461"
"(root-expand-context/outer-use-site-scopes the-struct_455)"
"(root-expand-context/outer-frame-id the-struct_455)"
" context134_456"
" env136_458"
"(expand-context/outer-post-expansion-scope-action the-struct_455)"
" scopes135_457"
" def-ctx-scopes138_460"
"(expand-context/outer-binding-layer the-struct_455)"
"(expand-context/outer-reference-records the-struct_455)"
" only-immediate?137_459"
"(expand-context/outer-need-eventually-defined the-struct_455)"
"(expand-context/outer-current-introduction-scopes the-struct_455)"
"(expand-context/outer-name the-struct_455)))"
"(raise-argument-error"
" 'struct-copy"
"                                     \"expand-context/outer?\""
" the-struct_455)))))))))))))"
"(case-lambda"
"((ctx_466)(context->transformer-context49_446 ctx_466 #f #f))"
"((ctx_467 context46_468)(context->transformer-context49_446 ctx_467 context46_468 #t)))))"
"(define-values"
"(expand+eval-for-syntaxes-binding)"
"(lambda(rhs_469 ids_470 ctx_471)"
"(let-values(((exp-rhs_472)"
"(let-values(((rhs143_475) rhs_469)((temp144_476)(as-named-context ctx_471 ids_470)))"
"(expand-transformer43.1 #f #f #f #f #f #f #f #f #f #f rhs143_475 temp144_476))))"
"(let-values(((phase_473)(add1(expand-context-phase ctx_471))))"
"(let-values(((parsed-rhs_474)"
"(if(expand-context-to-parsed? ctx_471)"
" exp-rhs_472"
"(let-values(((exp-rhs145_477) exp-rhs_472)"
"((temp146_478)(context->transformer-context(as-to-parsed-context ctx_471))))"
"(expand5.1 #f #f exp-rhs145_477 temp146_478)))))"
"(values"
" exp-rhs_472"
" parsed-rhs_474"
"(eval-for-bindings"
" ids_470"
" parsed-rhs_474"
" phase_473"
"(namespace->namespace-at-phase(expand-context-namespace ctx_471) phase_473)"
" ctx_471)))))))"
"(define-values"
"(eval-for-syntaxes-binding)"
"(lambda(rhs_479 ids_480 ctx_481)"
"(let-values(((exp-rhs_482 parsed-rhs_483 vals_484)(expand+eval-for-syntaxes-binding rhs_479 ids_480 ctx_481)))"
" vals_484)))"
"(define-values"
"(eval-for-bindings)"
"(lambda(ids_485 p_486 phase_487 ns_488 ctx_489)"
"(let-values(((compiled_490)"
"(compile-single"
" p_486"
"(let-values(((ns147_493) ns_488)((phase148_494) phase_487))"
"(make-compile-context14.1 #f #f #f #f #f #f ns147_493 #t phase148_494 #t #f #f)))))"
"(let-values(((vals_491)"
"(call-with-values"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" ctx_489"
" 1/current-namespace"
" ns_488"
" eval-jit-enabled"
" #f)"
"(let-values()(eval-single-top compiled_490 ns_488))))"
" list)))"
"(begin"
"(if(=(length vals_491)(length ids_485))"
"(void)"
"(let-values()"
"              (error \"wrong number of results (\" (length vals_491) \"vs.\" (length ids_485) \")\" \"from\" p_486)))"
" vals_491)))))"
"(define-values(keep-properties-only)(lambda(s_495)(datum->syntax$1 #f 'props s_495 s_495)))"
"(define-values"
"(keep-as-needed55.1)"
"(lambda(for-track?51_496 for-track?52_497 ctx53_498 s54_499)"
"(let-values(((ctx_500) ctx53_498))"
"(let-values(((s_501) s54_499))"
"(let-values(((for-track?_502)(if for-track?52_497 for-track?51_496 #f)))"
"(let-values()"
"(let-values(((d_503)(syntax-e$1 s_501)))"
"(let-values(((keep-e_504)"
"(if(symbol? d_503)"
"(let-values() d_503)"
"(if(if(pair? d_503)(identifier?(car d_503)) #f)"
"(let-values()(syntax-e$1(car d_503)))"
"(let-values() #f)))))"
"(if(expand-context-to-parsed? ctx_500)"
"(let-values()(datum->syntax$1 #f keep-e_504 s_501 s_501))"
"(let-values()"
"(syntax-rearm$1(datum->syntax$1(syntax-disarm$1 s_501) keep-e_504 s_501 s_501) s_501)))))))))))"
"(define-values"
"(rebuild62.1)"
"(lambda(track?58_522 track?59_523 orig-s60_524 new61_525)"
"(let-values(((orig-s_526) orig-s60_524))"
"(let-values(((new_527) new61_525))"
"(let-values(((track?_528)(if track?59_523 track?58_522 #t)))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 orig-s_526) new_527 orig-s_526(if track?_528 orig-s_526 #f))"
" orig-s_526)))))))"
"(define-values"
"(attach-disappeared-transformer-bindings)"
"(lambda(s_546 trans-idss_547)"
"(if(null? trans-idss_547)"
"(let-values() s_546)"
"(let-values()"
"(syntax-property$1"
" s_546"
" 'disappeared-binding"
"(append"
"(apply append trans-idss_547)"
"(let-values(((or-part_548)(syntax-property$1 s_546 'disappeared-binding)))"
"(if or-part_548 or-part_548 null))))))))"
"(define-values"
"(increment-binding-layer)"
"(lambda(ids_549 ctx_550 layer-val_551)"
"(if((letrec-values(((loop_552)"
"(lambda(ids_553)"
"(let-values(((or-part_554)(identifier? ids_553)))"
"(if or-part_554"
" or-part_554"
"(if(pair? ids_553)"
"(let-values(((or-part_555)(loop_552(car ids_553))))"
"(if or-part_555 or-part_555(loop_552(cdr ids_553))))"
" #f))))))"
" loop_552)"
" ids_549)"
" layer-val_551"
"(expand-context-binding-layer ctx_550))))"
"(define-values"
"(wrap-lifts-as-parsed-let)"
"(lambda(lifts_556 exp-s_557 s_558 ctx_559 parse-rhs_560)"
"(let-values(((idss+keyss+rhss_561)(get-lifts-as-lists lifts_556)))"
"((letrec-values(((lets-loop_562)"
"(lambda(idss+keyss+rhss_563 rhs-ctx_564)"
"(if(null? idss+keyss+rhss_563)"
"(let-values() exp-s_557)"
"(let-values()"
"(let-values(((ids_565)(caar idss+keyss+rhss_563)))"
"(let-values(((keys_566)(cadar idss+keyss+rhss_563)))"
"(let-values(((rhs_567)(caddar idss+keyss+rhss_563)))"
"(let-values(((exp-rhs_568)(parse-rhs_560 rhs_567 rhs-ctx_564)))"
"(parsed-let-values17.1"
" s_558"
"(list ids_565)"
"(list(list keys_566 exp-rhs_568))"
"(list"
"(lets-loop_562"
"(cdr idss+keyss+rhss_563)"
"(let-values(((v_569) rhs-ctx_564))"
"(let-values(((the-struct_570) v_569))"
"(if(expand-context/outer? the-struct_570)"
"(let-values(((env149_571)"
"(let-values(((lst_573) ids_565)((lst_574) keys_566))"
"(begin"
"(if(list? lst_573)"
"(void)"
"(let-values()(in-list lst_573)))"
"(if(list? lst_574)"
"(void)"
"(let-values()(in-list lst_574)))"
"((letrec-values(((for-loop_575)"
"(lambda(env_576 lst_577 lst_578)"
"(if(if(pair? lst_577)"
"(pair? lst_578)"
" #f)"
"(let-values(((id_579)"
"(unsafe-car"
" lst_577))"
"((rest_580)"
"(unsafe-cdr"
" lst_577))"
"((key_581)"
"(unsafe-car"
" lst_578))"
"((rest_582)"
"(unsafe-cdr"
" lst_578)))"
"(let-values(((env_583)"
"(let-values(((env_584)"
" env_576))"
"(let-values(((env_585)"
"(let-values()"
"(env-extend"
" env_584"
" key_581"
"(local-variable1.1"
" id_579)))))"
"(values"
" env_585)))))"
"(if(not #f)"
"(for-loop_575"
" env_583"
" rest_580"
" rest_582)"
" env_583)))"
" env_576))))"
" for-loop_575)"
"(expand-context-env rhs-ctx_564)"
" lst_573"
" lst_574))))"
"((inner150_572)(root-expand-context/outer-inner v_569)))"
"(expand-context/outer1.1"
" inner150_572"
"(root-expand-context/outer-post-expansion-scope the-struct_570)"
"(root-expand-context/outer-use-site-scopes the-struct_570)"
"(root-expand-context/outer-frame-id the-struct_570)"
"(expand-context/outer-context the-struct_570)"
" env149_571"
"(expand-context/outer-post-expansion-scope-action the-struct_570)"
"(expand-context/outer-scopes the-struct_570)"
"(expand-context/outer-def-ctx-scopes the-struct_570)"
"(expand-context/outer-binding-layer the-struct_570)"
"(expand-context/outer-reference-records the-struct_570)"
"(expand-context/outer-only-immediate? the-struct_570)"
"(expand-context/outer-need-eventually-defined the-struct_570)"
"(expand-context/outer-current-introduction-scopes the-struct_570)"
"(expand-context/outer-name the-struct_570)))"
"(raise-argument-error"
" 'struct-copy"
"                                                \"expand-context/outer?\""
" the-struct_570))))))))))))))))"
" lets-loop_562)"
" idss+keyss+rhss_561"
" ctx_559))))"
"(define-values"
"(rename-transformer-target-in-context)"
"(lambda(t_586 ctx_587)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) current-expand-context ctx_587)"
"(let-values()(1/rename-transformer-target t_586)))))"
"(void)"
"(void)"
"(define-values"
"(stop-ids->all-stop-ids)"
"(lambda(stop-ids_1 phase_2)"
"(if(null? stop-ids_1)"
"(let-values() stop-ids_1)"
"(let-values()"
"(let-values(((p-core-stx_3)(syntax-shift-phase-level$1 core-stx phase_2)))"
"(if(if(= 1(length stop-ids_1))"
"(free-identifier=?$1(car stop-ids_1)(datum->syntax$1 p-core-stx_3 'module*) phase_2 phase_2)"
" #f)"
"(let-values() stop-ids_1)"
"(let-values()"
"(append"
" stop-ids_1"
"(let-values(((lst_4) auto-stop-syms))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(lst_6)"
"(if(pair? lst_6)"
"(let-values(((sym_7)(unsafe-car lst_6))((rest_8)(unsafe-cdr lst_6)))"
"(let-values(((post-guard-var_9)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_10)"
"(let-values()"
"(let-values()(datum->syntax$1 p-core-stx_3 sym_7)))))"
"(let-values(((result_11)"
"(if(post-guard-var_9)(for-loop_5 rest_8) null)))"
"(cons elem_10 result_11))))))"
" null))))"
" for-loop_5)"
" lst_4)))))))))))"
"(define-values"
"(auto-stop-syms)"
" '(begin"
" quote"
" set!"
" lambda"
" case-lambda"
" let-values"
" letrec-values"
" if"
" begin0"
" with-continuation-mark"
" letrec-syntaxes+values"
" #%app"
" #%expression"
" #%top"
" #%variable-reference))"
"(void)"
"(void)"
"(define-values"
"(struct:internal-definition-context"
" internal-definition-context1.1"
" 1/internal-definition-context?"
" internal-definition-context-frame-id"
" internal-definition-context-scope"
" internal-definition-context-add-scope?"
" internal-definition-context-env-mixins)"
"(let-values(((struct:_6 make-_7 ?_8 -ref_9 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'internal-definition-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'internal-definition-context)))))"
"(values"
" struct:_6"
" make-_7"
" ?_8"
"(make-struct-field-accessor -ref_9 0 'frame-id)"
"(make-struct-field-accessor -ref_9 1 'scope)"
"(make-struct-field-accessor -ref_9 2 'add-scope?)"
"(make-struct-field-accessor -ref_9 3 'env-mixins))))"
"(define-values"
"(struct:env-mixin env-mixin2.1 env-mixin? env-mixin-id env-mixin-sym env-mixin-value env-mixin-cache)"
"(let-values(((struct:_41 make-_42 ?_43 -ref_44 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type 'env-mixin #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'env-mixin)))))"
"(values"
" struct:_41"
" make-_42"
" ?_43"
"(make-struct-field-accessor -ref_44 0 'id)"
"(make-struct-field-accessor -ref_44 1 'sym)"
"(make-struct-field-accessor -ref_44 2 'value)"
"(make-struct-field-accessor -ref_44 3 'cache))))"
"(define-values"
"(1/syntax-local-make-definition-context)"
"(let-values(((syntax-local-make-definition-context7_76)"
"(lambda(parent-ctx3_77 add-scope?4_78 parent-ctx5_79 add-scope?6_80)"
"(let-values(((parent-ctx_81)(if parent-ctx5_79 parent-ctx3_77 #f)))"
"(let-values(((add-scope?_82)(if add-scope?6_80 add-scope?4_78 #t)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_87)(not parent-ctx_81)))"
"(if or-part_87 or-part_87(1/internal-definition-context? parent-ctx_81)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-make-definition-context"
"                                             \"(or/c #f internal-definition-context?)\""
" parent-ctx_81)))"
"(values))))"
"(let-values(((ctx_83)"
"(let-values(((temp38_88) 'syntax-local-make-definition-context))"
"(get-current-expand-context15.1 #f #f temp38_88 #t))))"
"(let-values(((frame-id_84)"
"(let-values(((or-part_89)(root-expand-context-frame-id ctx_83)))"
"(if or-part_89"
" or-part_89"
"(let-values(((or-part_90)"
"(if parent-ctx_81"
"(internal-definition-context-frame-id parent-ctx_81)"
" #f)))"
"(if or-part_90 or-part_90(gensym)))))))"
"(let-values(((sc_85)(new-scope 'intdef)))"
"(let-values(((def-ctx-scopes_86)(expand-context-def-ctx-scopes ctx_83)))"
"(begin"
"(if def-ctx-scopes_86"
"(void)"
"(let-values()"
"                                        (error \"internal error: no box to accumulate definition-context scopes\")))"
"(set-box! def-ctx-scopes_86(cons sc_85(unbox def-ctx-scopes_86)))"
"(internal-definition-context1.1"
" frame-id_84"
" sc_85"
" add-scope?_82"
"(box null))))))))))))))"
"(case-lambda"
"(()(syntax-local-make-definition-context7_76 #f #f #f #f))"
"((parent-ctx_91 add-scope?4_92)(syntax-local-make-definition-context7_76 parent-ctx_91 add-scope?4_92 #t #t))"
"((parent-ctx3_93)(syntax-local-make-definition-context7_76 parent-ctx3_93 #f #t #f)))))"
"(define-values"
"(1/syntax-local-bind-syntaxes)"
"(lambda(ids_94 s_95 intdef_96)"
"(let-values((()"
"(begin"
"(if(if(list? ids_94)(andmap2 identifier? ids_94) #f)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(listof identifier?)\" ids_94)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_104)(not s_95)))(if or-part_104 or-part_104(syntax?$1 s_95)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(or/c syntax? #f)\" s_95)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/internal-definition-context? intdef_96)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                             \"internal-definition-context?\""
" intdef_96)))"
"(values))))"
"(let-values(((ctx_97)"
"(let-values(((temp39_105) 'local-expand))"
"(get-current-expand-context15.1 #f #f temp39_105 #t))))"
"(let-values((()"
"(begin"
"(let-values(((obs_106)(expand-context-observer ctx_97)))"
"(if obs_106"
"(let-values()(let-values()(call-expand-observe obs_106 'local-bind ids_94)))"
"(void)))"
"(values))))"
"(let-values(((phase_98)(expand-context-phase ctx_97)))"
"(let-values(((intdef-env_99)(add-intdef-bindings(expand-context-env ctx_97) intdef_96)))"
"(let-values(((intdef-ids_100)"
"(let-values(((lst_107) ids_94))"
"(begin"
"(if(list? lst_107)(void)(let-values()(in-list lst_107)))"
"((letrec-values(((for-loop_108)"
"(lambda(lst_109)"
"(if(pair? lst_109)"
"(let-values(((id_110)(unsafe-car lst_109))"
"((rest_111)(unsafe-cdr lst_109)))"
"(let-values(((post-guard-var_112)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_113)"
"(let-values()"
"(let-values()"
"(let-values(((pre-id_114)"
"(remove-use-site-scopes"
"(flip-introduction-scopes"
" id_110"
" ctx_97)"
" ctx_97)))"
"(let-values(((pre-id40_116)"
" pre-id_114)"
"((intdef41_117)"
" intdef_96)"
"((temp42_118) #t))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp42_118"
" #t"
" pre-id40_116"
" intdef41_117)))))))"
"(let-values(((result_119)"
"(if(post-guard-var_112)"
"(for-loop_108 rest_111)"
" null)))"
"(cons elem_113 result_119))))))"
" null))))"
" for-loop_108)"
" lst_107)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_120)(expand-context-observer ctx_97)))"
"(if obs_120"
"(let-values()"
"(let-values()(call-expand-observe obs_120 'rename-list intdef-ids_100)))"
"(void)))"
"(values))))"
"(let-values(((syms_101)"
"(let-values(((lst_121) intdef-ids_100))"
"(begin"
"(if(list? lst_121)(void)(let-values()(in-list lst_121)))"
"((letrec-values(((for-loop_122)"
"(lambda(lst_123)"
"(if(pair? lst_123)"
"(let-values(((intdef-id_124)(unsafe-car lst_123))"
"((rest_125)(unsafe-cdr lst_123)))"
"(let-values(((post-guard-var_126)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_127)"
"(let-values()"
"(let-values()"
"(let-values(((intdef-id43_129)"
" intdef-id_124)"
"((phase44_130)"
" phase_98)"
"((temp45_131)"
"(root-expand-context-counter"
" ctx_97))"
"((temp46_132)"
"(internal-definition-context-frame-id"
" intdef_96)))"
"(add-local-binding!35.1"
" temp46_132"
" #t"
" #f"
" #f"
" intdef-id43_129"
" phase44_130"
" temp45_131))))))"
"(let-values(((result_133)"
"(if(post-guard-var_126)"
"(for-loop_122 rest_125)"
" null)))"
"(cons elem_127 result_133))))))"
" null))))"
" for-loop_122)"
" lst_121)))))"
"(let-values(((vals_102)"
"(if s_95"
"(let-values()"
"(let-values(((input-s_134)"
"(flip-introduction-scopes"
"(let-values(((s47_137) s_95)"
"((intdef48_138) intdef_96)"
"((temp49_139) #t))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp49_139"
" #t"
" s47_137"
" intdef48_138))"
" ctx_97)))"
"(let-values(((tmp-env_135)"
"(let-values(((lst_140) syms_101))"
"(begin"
"(if(list? lst_140)"
"(void)"
"(let-values()(in-list lst_140)))"
"((letrec-values(((for-loop_141)"
"(lambda(env_142 lst_143)"
"(if(pair? lst_143)"
"(let-values(((sym_144)"
"(unsafe-car lst_143))"
"((rest_145)"
"(unsafe-cdr lst_143)))"
"(let-values(((env_146)"
"(let-values(((env_147)"
" env_142))"
"(let-values(((env_148)"
"(let-values()"
"(hash-set"
" env_147"
" sym_144"
" variable))))"
"(values"
" env_148)))))"
"(if(not #f)"
"(for-loop_141"
" env_146"
" rest_145)"
" env_146)))"
" env_142))))"
" for-loop_141)"
" intdef-env_99"
" lst_140)))))"
"(eval-for-syntaxes-binding"
" input-s_134"
" ids_94"
"(let-values(((...finition-context.rkt:85:33_149)"
" make-local-expand-context35.1)"
"((temp50_150)"
"(let-values(((v_153) ctx_97))"
"(let-values(((the-struct_154) v_153))"
"(if(expand-context/outer? the-struct_154)"
"(let-values(((env53_155) tmp-env_135)"
"((inner54_156)"
"(root-expand-context/outer-inner"
" v_153)))"
"(expand-context/outer1.1"
" inner54_156"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_154)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_154)"
"(root-expand-context/outer-frame-id"
" the-struct_154)"
"(expand-context/outer-context the-struct_154)"
" env53_155"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_154)"
"(expand-context/outer-scopes the-struct_154)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_154)"
"(expand-context/outer-binding-layer"
" the-struct_154)"
"(expand-context/outer-reference-records"
" the-struct_154)"
"(expand-context/outer-only-immediate?"
" the-struct_154)"
"(expand-context/outer-need-eventually-defined"
" the-struct_154)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_154)"
"(expand-context/outer-name the-struct_154)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                    \"expand-context/outer?\""
" the-struct_154)))))"
"((temp51_151) 'expression)"
"((intdef52_152) intdef_96))"
"(make-local-expand-context33.1"
" temp51_151"
" intdef52_152"
" #f"
" #f"
" #f"
" #f"
" temp50_150))))))"
"(let-values()"
"(let-values(((lst_157) ids_94))"
"(begin"
"(if(list? lst_157)(void)(let-values()(in-list lst_157)))"
"((letrec-values(((for-loop_158)"
"(lambda(lst_159)"
"(if(pair? lst_159)"
"(let-values(((id_160)(unsafe-car lst_159))"
"((rest_161)(unsafe-cdr lst_159)))"
"(let-values(((post-guard-var_162)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_163)"
"(let-values()"
"(let-values() variable))))"
"(let-values(((result_164)"
"(if(post-guard-var_162)"
"(for-loop_158 rest_161)"
" null)))"
"(cons elem_163 result_164))))))"
" null))))"
" for-loop_158)"
" lst_157)))))))"
"(let-values(((env-mixins_103)(internal-definition-context-env-mixins intdef_96)))"
"(begin"
"(set-box!"
" env-mixins_103"
"(append"
"(let-values(((lst_165) intdef-ids_100)((lst_166) syms_101)((lst_167) vals_102))"
"(begin"
"(if(list? lst_165)(void)(let-values()(in-list lst_165)))"
"(if(list? lst_166)(void)(let-values()(in-list lst_166)))"
"(if(list? lst_167)(void)(let-values()(in-list lst_167)))"
"((letrec-values(((for-loop_168)"
"(lambda(lst_169 lst_170 lst_171)"
"(if(if(pair? lst_169)"
"(if(pair? lst_170)(pair? lst_171) #f)"
" #f)"
"(let-values(((intdef-id_172)(unsafe-car lst_169))"
"((rest_173)(unsafe-cdr lst_169))"
"((sym_174)(unsafe-car lst_170))"
"((rest_175)(unsafe-cdr lst_170))"
"((val_176)(unsafe-car lst_171))"
"((rest_177)(unsafe-cdr lst_171)))"
"(let-values(((post-guard-var_178)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_179)"
"(let-values()"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_176"
" intdef-id_172"
" phase_98)"
"(env-mixin2.1"
" intdef-id_172"
" sym_174"
" val_176"
"(make-weak-hasheq)))))))"
"(let-values(((result_180)"
"(if(post-guard-var_178)"
"(for-loop_168"
" rest_173"
" rest_175"
" rest_177)"
" null)))"
"(cons elem_179 result_180))))))"
" null))))"
" for-loop_168)"
" lst_165"
" lst_166"
" lst_167)))"
"(unbox env-mixins_103)))"
"(let-values(((obs_181)(expand-context-observer ctx_97)))"
"(if obs_181"
"(let-values()(let-values()(call-expand-observe obs_181 'exit-local-bind)))"
"(void))))))))))))))))))"
"(define-values"
"(1/internal-definition-context-binding-identifiers)"
"(lambda(intdef_182)"
"(begin"
"(if(1/internal-definition-context? intdef_182)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-binding-identifiers"
"           \"internal-definition-context?\""
" intdef_182)))"
"(let-values(((lst_183)(unbox(internal-definition-context-env-mixins intdef_182))))"
"(begin"
"(if(list? lst_183)(void)(let-values()(in-list lst_183)))"
"((letrec-values(((for-loop_184)"
"(lambda(lst_185)"
"(if(pair? lst_185)"
"(let-values(((env-mixin_186)(unsafe-car lst_185))((rest_187)(unsafe-cdr lst_185)))"
"(let-values(((post-guard-var_188)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_189)"
"(let-values()(let-values()(env-mixin-id env-mixin_186)))))"
"(let-values(((result_190)"
"(if(post-guard-var_188)(for-loop_184 rest_187) null)))"
"(cons elem_189 result_190))))))"
" null))))"
" for-loop_184)"
" lst_183))))))"
"(define-values"
"(1/internal-definition-context-introduce)"
"(let-values(((internal-definition-context-introduce13_191)"
"(lambda(intdef11_192 s12_193 mode9_194 mode10_195)"
"(let-values(((intdef_196) intdef11_192))"
"(let-values(((s_197) s12_193))"
"(let-values(((mode_198)(if mode10_195 mode9_194 'flip)))"
"(let-values()"
"(begin"
"(if(1/internal-definition-context? intdef_196)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                 \"internal-definition-context?\""
" intdef_196)))"
"(if(syntax?$1 s_197)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'internal-definition-context-introduce \"syntax?\" s_197)))"
"(let-values(((s55_200) s_197)"
"((intdef56_201) intdef_196)"
"((temp57_202)"
"(let-values(((tmp_203) mode_198))"
"(if(equal? tmp_203 'add)"
"(let-values() add-scope)"
"(if(equal? tmp_203 'remove)"
"(let-values() remove-scope)"
"(if(equal? tmp_203 'flip)"
"(let-values() flip-scope)"
"(let-values()"
"(raise-argument-error"
" 1/internal-definition-context-introduce"
"                                                     \"(or/c 'add 'remove 'flip)\""
" mode_198))))))))"
"(add-intdef-scopes21.1 temp57_202 #t #f #f s55_200 intdef56_201))))))))))"
"(case-lambda"
"((intdef_204 s_205)(internal-definition-context-introduce13_191 intdef_204 s_205 #f #f))"
"((intdef_206 s_207 mode9_208)(internal-definition-context-introduce13_191 intdef_206 s_207 mode9_208 #t)))))"
"(define-values"
"(1/internal-definition-context-seal)"
"(lambda(intdef_209)"
"(begin"
"(if(1/internal-definition-context? intdef_209)"
"(void)"
"(let-values()"
"          (raise-argument-error 'internal-definition-context-seal \"internal-definition-context?\" intdef_209)))"
"(void))))"
"(define-values"
"(1/identifier-remove-from-definition-context)"
"(lambda(id_210 intdef_211)"
"(begin"
"(if(identifier? id_210)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-remove-from-definition-context \"identifier?\" id_210)))"
"(if(let-values(((or-part_212)(1/internal-definition-context? intdef_211)))"
"(if or-part_212 or-part_212(if(list? intdef_211)(andmap2 1/internal-definition-context? intdef_211) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-remove-from-definition-context"
"           \"(or/c internal-definition-context? (listof internal-definition-context?))\""
" intdef_211)))"
"(let-values(((pos->vals_213 pos-pre-inc_214 pos-next_215 init_216 pos-cont?_217 val-cont?_218 all-cont?_219)"
"(make-sequence '(intdef)(in-intdefs intdef_211))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_220)"
"(lambda(id_221 pos_222)"
"(if(if pos-cont?_217(pos-cont?_217 pos_222) #t)"
"(let-values(((intdef_223 all-cont?/pos_224)"
"(let-values(((intdef_226)(pos->vals_213 pos_222)))"
"(values"
" intdef_226"
"(if all-cont?_219"
"(lambda(pos_227)(all-cont?_219 pos_227 intdef_226))"
" #f))))"
"((pos_225)(if pos-pre-inc_214(pos-pre-inc_214 pos_222) pos_222)))"
"(if(if val-cont?_218(val-cont?_218 intdef_223) #t)"
"(let-values(((id_228)"
"(let-values(((id_229) id_221))"
"(let-values(((id_230)"
"(let-values()"
"(1/internal-definition-context-introduce"
" intdef_223"
" id_229"
" 'remove))))"
"(values id_230)))))"
"(if(if(if all-cont?/pos_224(all-cont?/pos_224 pos_225) #t)(not #f) #f)"
"(for-loop_220 id_228(pos-next_215 pos_225))"
" id_228))"
" id_221))"
" id_221))))"
" for-loop_220)"
" id_210"
" init_216))))))"
"(define-values"
"(in-intdefs)"
"(lambda(intdefs_231)"
"(if(not intdefs_231)"
"(let-values()(in-list null))"
"(if(list? intdefs_231)"
"(let-values()(in-list(alt-reverse intdefs_231)))"
"(let-values()(in-value intdefs_231))))))"
"(define-values"
"(add-intdef-bindings)"
"(lambda(env_232 intdefs_233)"
"(let-values(((pos->vals_234 pos-pre-inc_235 pos-next_236 init_237 pos-cont?_238 val-cont?_239 all-cont?_240)"
"(make-sequence '(intdef)(in-intdefs intdefs_233))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_241)"
"(lambda(env_242 pos_243)"
"(if(if pos-cont?_238(pos-cont?_238 pos_243) #t)"
"(let-values(((intdef_244 all-cont?/pos_245)"
"(let-values(((intdef_247)(pos->vals_234 pos_243)))"
"(values"
" intdef_247"
"(if all-cont?_240"
"(lambda(pos_248)(all-cont?_240 pos_248 intdef_247))"
" #f))))"
"((pos_246)(if pos-pre-inc_235(pos-pre-inc_235 pos_243) pos_243)))"
"(if(if val-cont?_239(val-cont?_239 intdef_244) #t)"
"(let-values(((env_249)"
"(let-values(((env_250) env_242))"
"(let-values(((env_251)"
"(let-values()"
"(let-values(((env-mixins_252)"
"(unbox"
"(internal-definition-context-env-mixins"
" intdef_244))))"
"((letrec-values(((loop_253)"
"(lambda(env_254 env-mixins_255)"
"(if(null? env-mixins_255)"
"(let-values() env_254)"
"(let-values()"
"(let-values(((env-mixin_256)"
"(car"
" env-mixins_255)))"
"(let-values(((or-part_257)"
"(hash-ref"
"(env-mixin-cache"
" env-mixin_256)"
" env_254"
" #f)))"
"(if or-part_257"
" or-part_257"
"(let-values(((new-env_258)"
"(env-extend"
"(loop_253"
" env_254"
"(cdr"
" env-mixins_255))"
"(env-mixin-sym"
" env-mixin_256)"
"(env-mixin-value"
" env-mixin_256))))"
"(begin"
"(hash-set!"
"(env-mixin-cache"
" env-mixin_256)"
" env_254"
" new-env_258)"
" new-env_258))))))))))"
" loop_253)"
" env_250"
" env-mixins_252)))))"
"(values env_251)))))"
"(if(if(if all-cont?/pos_245(all-cont?/pos_245 pos_246) #t)(not #f) #f)"
"(for-loop_241 env_249(pos-next_236 pos_246))"
" env_249))"
" env_242))"
" env_242))))"
" for-loop_241)"
" env_232"
" init_237)))))"
"(define-values"
"(add-intdef-scopes21.1)"
"(lambda(action16_259 action18_260 always?15_261 always?17_262 s19_263 intdefs20_264)"
"(let-values(((s_265) s19_263))"
"(let-values(((intdefs_266) intdefs20_264))"
"(let-values(((always?_267)(if always?17_262 always?15_261 #f)))"
"(let-values(((action_268)(if action18_260 action16_259 add-scope)))"
"(let-values()"
"(let-values(((pos->vals_269"
" pos-pre-inc_270"
" pos-next_271"
" init_272"
" pos-cont?_273"
" val-cont?_274"
" all-cont?_275)"
"(make-sequence '(intdef)(in-intdefs intdefs_266))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_276)"
"(lambda(s_277 pos_278)"
"(if(if pos-cont?_273(pos-cont?_273 pos_278) #t)"
"(let-values(((intdef_279 all-cont?/pos_280)"
"(let-values(((intdef_282)(pos->vals_269 pos_278)))"
"(values"
" intdef_282"
"(if all-cont?_275"
"(lambda(pos_283)(all-cont?_275 pos_283 intdef_282))"
" #f))))"
"((pos_281)(if pos-pre-inc_270(pos-pre-inc_270 pos_278) pos_278)))"
"(if(if val-cont?_274(val-cont?_274 intdef_279) #t)"
"(let-values(((s_284)"
"(let-values(((s_285) s_277))"
"(if(let-values(((or-part_286) always?_267))"
"(if or-part_286"
" or-part_286"
"(internal-definition-context-add-scope?"
" intdef_279)))"
"(let-values(((s_287) s_285))"
"(let-values(((s_288)"
"(let-values()"
"(action_268"
" s_287"
"(internal-definition-context-scope"
" intdef_279)))))"
"(values s_288)))"
" s_285))))"
"(if(if(if all-cont?/pos_280(all-cont?/pos_280 pos_281) #t)(not #f) #f)"
"(for-loop_276 s_284(pos-next_271 pos_281))"
" s_284))"
" s_277))"
" s_277))))"
" for-loop_276)"
" s_265"
" init_272))))))))))"
"(define-values"
"(lifted/1.1$8 lifted/2.1$8 lifted/3.1$7 lifted/4.1$7 lifted/5.1$7)"
"(make-struct-type"
" 'make-local-expand-context"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'make-local-expand-context(case-lambda((self_312 ctx_313)(apply missing-kw self_312 ctx_313 null))))))"
"(current-inspector)"
"(case-lambda((self_314 ctx_315)(apply missing-kw self_314 ctx_315 null)))))"
"(define-values"
"(make-local-expand-context33.1)"
"(lambda(context24_316 intdefs26_317 phase25_318 phase29_319 stop-ids27_320 stop-ids31_321 ctx32_322)"
"(let-values(((ctx_323) ctx32_322))"
"(let-values(((context_324) context24_316))"
"(let-values(((phase_325)(if phase29_319 phase25_318(expand-context-phase ctx_323))))"
"(let-values(((intdefs_326) intdefs26_317))"
"(let-values(((stop-ids_327)(if stop-ids31_321 stop-ids27_320 #f)))"
"(let-values()"
"(let-values(((same-kind?_328)"
"(let-values(((or-part_331)(eq? context_324(expand-context-context ctx_323))))"
"(if or-part_331"
" or-part_331"
"(if(list? context_324)(list?(expand-context-context ctx_323)) #f)))))"
"(let-values(((all-stop-ids_329)"
"(if stop-ids_327(stop-ids->all-stop-ids stop-ids_327 phase_325) #f)))"
"(let-values(((def-ctx-scopes_330)"
"(if(expand-context-def-ctx-scopes ctx_323)"
"(unbox(expand-context-def-ctx-scopes ctx_323))"
" null)))"
"(let-values(((v_332) ctx_323))"
"(let-values(((the-struct_333) v_332))"
"(if(expand-context/outer? the-struct_333)"
"(let-values(((context61_334) context_324)"
"((env62_335)(add-intdef-bindings(expand-context-env ctx_323) intdefs_326))"
"((use-site-scopes63_336)"
"(if(let-values(((or-part_344)(eq? context_324 'module)))"
"(if or-part_344 or-part_344(list? context_324)))"
"(let-values(((or-part_345)(root-expand-context-use-site-scopes ctx_323)))"
"(if or-part_345 or-part_345(box null)))"
" #f))"
"((frame-id64_337)"
"(let-values(((pos->vals_346"
" pos-pre-inc_347"
" pos-next_348"
" init_349"
" pos-cont?_350"
" val-cont?_351"
" all-cont?_352)"
"(make-sequence '(intdef)(in-intdefs intdefs_326))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_353)"
"(lambda(frame-id_354 pos_355)"
"(if(if pos-cont?_350(pos-cont?_350 pos_355) #t)"
"(let-values(((intdef_356 all-cont?/pos_357)"
"(let-values(((intdef_359)"
"(pos->vals_346"
" pos_355)))"
"(values"
" intdef_359"
"(if all-cont?_352"
"(lambda(pos_360)"
"(all-cont?_352"
" pos_360"
" intdef_359))"
" #f))))"
"((pos_358)"
"(if pos-pre-inc_347"
"(pos-pre-inc_347 pos_355)"
" pos_355)))"
"(if(if val-cont?_351"
"(val-cont?_351 intdef_356)"
" #t)"
"(let-values(((frame-id_361)"
"(let-values(((frame-id_362)"
" frame-id_354))"
"(let-values(((frame-id_363)"
"(let-values()"
"(let-values(((i-frame-id_364)"
"(internal-definition-context-frame-id"
" intdef_356)))"
"(if(if frame-id_362"
"(if i-frame-id_364"
"(not"
"(eq?"
" frame-id_362"
" i-frame-id_364))"
" #f)"
" #f)"
"(let-values()"
" 'all)"
"(let-values()"
"(let-values(((or-part_365)"
" frame-id_362))"
"(if or-part_365"
" or-part_365"
" i-frame-id_364))))))))"
"(values frame-id_363)))))"
"(if(if(if all-cont?/pos_357"
"(all-cont?/pos_357 pos_358)"
" #t)"
"(not #f)"
" #f)"
"(for-loop_353"
" frame-id_361"
"(pos-next_348 pos_358))"
" frame-id_361))"
" frame-id_354))"
" frame-id_354))))"
" for-loop_353)"
"(root-expand-context-frame-id ctx_323)"
" init_349))))"
"((post-expansion-scope65_338)"
"(if intdefs_326"
"(new-scope 'macro)"
"(if same-kind?_328"
"(if(memq context_324 '(module module-begin top-level))"
"(root-expand-context-post-expansion-scope ctx_323)"
" #f)"
" #f)))"
"((post-expansion-scope-action66_339)"
"(if intdefs_326"
"(lambda(s_366 placeholder-sc_367)"
"(let-values(((s72_368) s_366)((intdefs73_369) intdefs_326))"
"(add-intdef-scopes21.1 #f #f #f #f s72_368 intdefs73_369)))"
"(expand-context-post-expansion-scope-action ctx_323)))"
"((scopes67_340)(append def-ctx-scopes_330(expand-context-scopes ctx_323)))"
"((only-immediate?68_341)(not stop-ids_327))"
"((current-introduction-scopes69_342) null)"
"((inner70_343)"
"(let-values(((the-struct_370)(root-expand-context/outer-inner v_332)))"
"(if(expand-context/inner? the-struct_370)"
"(let-values(((to-parsed?74_371) #f)"
"((just-once?75_372) #f)"
"((in-local-expand?76_373) #t)"
"((stops77_374)"
"(free-id-set"
" phase_325"
"(let-values(((or-part_375) all-stop-ids_329))"
"(if or-part_375 or-part_375 null)))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_370)"
"(root-expand-context/inner-top-level-bind-scope the-struct_370)"
"(root-expand-context/inner-all-scopes-stx the-struct_370)"
"(root-expand-context/inner-defined-syms the-struct_370)"
"(root-expand-context/inner-counter the-struct_370)"
"(root-expand-context/inner-lift-key the-struct_370)"
" to-parsed?74_371"
"(expand-context/inner-phase the-struct_370)"
"(expand-context/inner-namespace the-struct_370)"
"(expand-context/inner-user-env the-struct_370)"
" just-once?75_372"
"(expand-context/inner-module-begin-k the-struct_370)"
"(expand-context/inner-allow-unbound? the-struct_370)"
" in-local-expand?76_373"
" stops77_374"
"(expand-context/inner-declared-submodule-names the-struct_370)"
"(expand-context/inner-lifts the-struct_370)"
"(expand-context/inner-lift-envs the-struct_370)"
"(expand-context/inner-module-lifts the-struct_370)"
"(expand-context/inner-require-lifts the-struct_370)"
"(expand-context/inner-to-module-lifts the-struct_370)"
"(expand-context/inner-requires+provides the-struct_370)"
"(expand-context/inner-observer the-struct_370)"
"(expand-context/inner-for-serializable? the-struct_370)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"expand-context/inner?\""
" the-struct_370)))))"
"(expand-context/outer1.1"
" inner70_343"
" post-expansion-scope65_338"
" use-site-scopes63_336"
" frame-id64_337"
" context61_334"
" env62_335"
" post-expansion-scope-action66_339"
" scopes67_340"
"(expand-context/outer-def-ctx-scopes the-struct_333)"
"(expand-context/outer-binding-layer the-struct_333)"
"(expand-context/outer-reference-records the-struct_333)"
" only-immediate?68_341"
"(expand-context/outer-need-eventually-defined the-struct_333)"
" current-introduction-scopes69_342"
"(expand-context/outer-name the-struct_333)))"
"                            (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_333)))))))))))))))"
"(define-values"
"(unpack34.1)"
"(lambda(given-kws_376 given-args_377 ctx32_378)"
"(let-values(((context24_379)(car given-args_377))"
"((given-kws_380)(cdr given-kws_376))"
"((given-args_381)(cdr given-args_377)))"
"(let-values(((intdefs26_382)(car given-args_381))"
"((given-kws_383)(cdr given-kws_380))"
"((given-args_384)(cdr given-args_381)))"
"(let-values(((phase29_385)(if(pair? given-kws_383)(eq? '#:phase(car given-kws_383)) #f)))"
"(let-values(((phase25_386)(if phase29_385(car given-args_384)(void)))"
"((given-kws_387)(if phase29_385(cdr given-kws_383) given-kws_383))"
"((given-args_388)(if phase29_385(cdr given-args_384) given-args_384)))"
"(let-values(((stop-ids31_389)(pair? given-kws_387)))"
"(let-values(((stop-ids27_390)(if stop-ids31_389(car given-args_388)(void))))"
"(make-local-expand-context33.1"
" context24_379"
" intdefs26_382"
" phase25_386"
" phase29_385"
" stop-ids27_390"
" stop-ids31_389"
" ctx32_378)))))))))"
"(define-values"
"(make-local-expand-context35.1)"
"(lifted/2.1$8"
"(lambda(given-kws_391 given-argc_392)"
"(if(= given-argc_392 3)"
"(subsets? '(#:context #:intdefs) given-kws_391 '(#:context #:intdefs #:phase #:stop-ids))"
" #f))"
"(case-lambda((given-kws_393 given-args_394 ctx_395)(unpack34.1 given-kws_393 given-args_394 ctx_395)))"
" '(#:context #:intdefs)"
" '(#:context #:intdefs #:phase #:stop-ids)))"
"(define-values"
"(flip-introduction-scopes)"
"(lambda(s_396 ctx_397)(flip-scopes s_396(expand-context-current-introduction-scopes ctx_397))))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-transforming?)"
"(lambda()(if(let-values(((temp65_12) #t))(get-current-expand-context15.1 temp65_12 #t #f #f)) #t #f)))"
"(define-values"
"(1/syntax-transforming-with-lifts?)"
"(lambda()"
"(let-values(((ctx_13)(let-values(((temp66_15) #t))(get-current-expand-context15.1 temp66_15 #t #f #f))))"
"(if ctx_13(if(expand-context-lifts ctx_13) #t #f) #f))))"
"(define-values"
"(1/syntax-transforming-module-expression?)"
"(lambda()"
"(let-values(((ctx_16)(let-values(((temp67_18) #t))(get-current-expand-context15.1 temp67_18 #t #f #f))))"
"(if ctx_16(if(expand-context-to-module-lifts ctx_16) #t #f) #f))))"
"(define-values"
"(1/syntax-local-transforming-module-provides?)"
"(lambda()"
"(let-values(((ctx_19)(let-values(((temp68_21) #t))(get-current-expand-context15.1 temp68_21 #t #f #f))))"
"(if ctx_19(if(expand-context-requires+provides ctx_19) #t #f) #f))))"
"(define-values"
"(1/syntax-local-context)"
"(lambda()"
"(let-values(((ctx_22)"
"(let-values(((temp69_23) 'syntax-local-context))"
"(get-current-expand-context15.1 #f #f temp69_23 #t))))"
"(expand-context-context ctx_22))))"
"(define-values"
"(1/syntax-local-introduce)"
"(lambda(s_24)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_24)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-introduce \"syntax?\" s_24)))"
"(values))))"
"(let-values(((ctx_25)"
"(let-values(((temp70_26) 'syntax-local-introduce))"
"(get-current-expand-context15.1 #f #f temp70_26 #t))))"
"(flip-introduction-scopes s_24 ctx_25)))))"
"(define-values"
"(1/syntax-local-identifier-as-binding)"
"(lambda(id_27)"
"(let-values((()"
"(begin"
"(if(identifier? id_27)"
"(void)"
"                      (let-values () (raise-argument-error 1/syntax-local-identifier-as-binding \"identifier?\" id_27)))"
"(values))))"
"(let-values(((ctx_28)"
"(let-values(((temp71_29) 'syntax-local-identifier-as-binding))"
"(get-current-expand-context15.1 #f #f temp71_29 #t))))"
"(remove-use-site-scopes id_27 ctx_28)))))"
"(define-values"
"(1/syntax-local-phase-level)"
"(lambda()"
"(let-values(((ctx_30)(let-values(((temp72_32) #t))(get-current-expand-context15.1 temp72_32 #t #f #f))))"
"(if ctx_30(expand-context-phase ctx_30) 0))))"
"(define-values"
"(1/syntax-local-name)"
"(lambda()"
"(let-values(((ctx_33)"
"(let-values(((temp73_35) 'syntax-local-name))(get-current-expand-context15.1 #f #f temp73_35 #t))))"
"(let-values(((id_34)(expand-context-name ctx_33)))"
"(if id_34(datum->syntax$1 #f(syntax-e$1 id_34) id_34) #f)))))"
"(define-values"
"(1/make-syntax-introducer)"
"(let-values(((make-syntax-introducer3_36)"
"(lambda(as-use-site?1_37 as-use-site?2_38)"
"(let-values(((as-use-site?_39)(if as-use-site?2_38 as-use-site?1_37 #f)))"
"(let-values()"
"(let-values(((sc_40)(new-scope(if as-use-site?_39 'use-site 'macro))))"
"(let-values(((core77_41)"
"(lambda(s76_42 mode74_43 mode75_44)"
"(let-values(((s_45) s76_42))"
"(let-values(((mode_46)(if mode75_44 mode74_43 'flip)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_45)"
"(void)"
"(let-values()"
"                                                    (raise-argument-error 'syntax-introducer \"syntax?\" s_45)))"
"(let-values(((tmp_47) mode_46))"
"(if(equal? tmp_47 'add)"
"(let-values()(add-scope s_45 sc_40))"
"(if(equal? tmp_47 'remove)"
"(let-values()(remove-scope s_45 sc_40))"
"(if(equal? tmp_47 'flip)"
"(let-values()(flip-scope s_45 sc_40))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                           \"(or/c 'add 'remove 'flip)\""
" mode_46)))))))))))))"
"(case-lambda"
"((s_48)(core77_41 s_48 #f #f))"
"((s_49 mode74_50)(core77_41 s_49 mode74_50 #t))))))))))"
"(case-lambda"
"(()(make-syntax-introducer3_36 #f #f))"
"((as-use-site?1_51)(make-syntax-introducer3_36 as-use-site?1_51 #t)))))"
"(define-values"
"(1/make-syntax-delta-introducer)"
"(let-values(((make-syntax-delta-introducer9_52)"
"(lambda(ext-s7_53 base-s8_54 phase5_55 phase6_56)"
"(let-values(((ext-s_57) ext-s7_53))"
"(let-values(((base-s_58) base-s8_54))"
"(let-values(((phase_59)(if phase6_56 phase5_55(1/syntax-local-phase-level))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 ext-s_57)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'make-syntax-delta-introducer \"syntax?\" ext-s_57)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_65)(syntax?$1 base-s_58)))"
"(if or-part_65 or-part_65(not base-s_58)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                 \"(or/c syntax? #f)\""
" base-s_58)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(phase? phase_59)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" phase?-string"
" phase_59)))"
"(values))))"
"(let-values(((ext-scs_60)(syntax-scope-set ext-s_57 phase_59)))"
"(let-values(((base-scs_61)"
"(syntax-scope-set"
"(let-values(((or-part_66) base-s_58))"
"(if or-part_66 or-part_66 empty-syntax))"
" phase_59)))"
"(let-values(((use-base-scs_62)"
"(if(subset? base-scs_61 ext-scs_60)"
" base-scs_61"
"(let-values(((or-part_67)"
"(if(identifier? base-s_58)"
"(let-values(((base-s79_69) base-s_58)"
"((phase80_70) phase_59)"
"((temp81_71) #t))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_71"
" #t"
" base-s79_69"
" phase80_70))"
" #f)))"
"(if or-part_67 or-part_67(seteq))))))"
"(let-values(((delta-scs_63)"
"(set->list(set-subtract ext-scs_60 use-base-scs_62))))"
"(let-values(((maybe-taint_64)"
"(if(syntax-clean? ext-s_57) values syntax-taint$1)))"
"(let-values(((core85_72)"
"(lambda(s84_73 mode82_74 mode83_75)"
"(let-values(((s_76) s84_73))"
"(let-values(((mode_77)(if mode83_75 mode82_74 'add)))"
"(let-values()"
"(maybe-taint_64"
"(let-values(((tmp_78) mode_77))"
"(if(equal? tmp_78 'add)"
"(let-values()(add-scopes s_76 delta-scs_63))"
"(if(equal? tmp_78 'remove)"
"(let-values()(remove-scopes s_76 delta-scs_63))"
"(if(equal? tmp_78 'flip)"
"(let-values()(flip-scopes s_76 delta-scs_63))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                                            \"(or/c 'add 'remove 'flip)\""
" mode_77)))))))))))))"
"(case-lambda"
"((s_79)(core85_72 s_79 #f #f))"
"((s_80 mode82_81)(core85_72 s_80 mode82_81 #t)))))))))))))))))))"
"(case-lambda"
"((ext-s_82 base-s_83)(make-syntax-delta-introducer9_52 ext-s_82 base-s_83 #f #f))"
"((ext-s_84 base-s_85 phase5_86)(make-syntax-delta-introducer9_52 ext-s_84 base-s_85 phase5_86 #t)))))"
"(define-values"
"(do-syntax-local-value17.1)"
"(lambda(immediate?11_97 who13_98 id14_99 intdef15_100 failure-thunk16_101)"
"(let-values(((who_102) who13_98))"
"(let-values(((id_103) id14_99))"
"(let-values(((intdef_104) intdef15_100))"
"(let-values(((failure-thunk_105) failure-thunk16_101))"
"(let-values(((immediate?_106) immediate?11_97))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_103)"
"(void)"
"                                  (let-values () (raise-argument-error who_102 \"identifier?\" id_103)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_110)(not failure-thunk_105)))"
"(if or-part_110"
" or-part_110"
"(if(procedure? failure-thunk_105)"
"(procedure-arity-includes? failure-thunk_105 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_102"
"                                       \"(or #f (procedure-arity-includes/c 0))\""
" failure-thunk_105)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_111)(not intdef_104)))"
"(if or-part_111 or-part_111(1/internal-definition-context? intdef_104)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_102"
"                                         \"(or #f internal-definition-context?)\""
" failure-thunk_105)))"
"(values))))"
"(let-values(((current-ctx_107)"
"(let-values(((who87_112) who_102))"
"(get-current-expand-context15.1 #f #f who87_112 #t))))"
"(let-values(((ctx_108)"
"(if intdef_104"
"(let-values(((v_113) current-ctx_107))"
"(let-values(((the-struct_114) v_113))"
"(if(expand-context/outer? the-struct_114)"
"(let-values(((env88_115)"
"(add-intdef-bindings"
"(expand-context-env current-ctx_107)"
" intdef_104))"
"((inner89_116)(root-expand-context/outer-inner v_113)))"
"(expand-context/outer1.1"
" inner89_116"
"(root-expand-context/outer-post-expansion-scope the-struct_114)"
"(root-expand-context/outer-use-site-scopes the-struct_114)"
"(root-expand-context/outer-frame-id the-struct_114)"
"(expand-context/outer-context the-struct_114)"
" env88_115"
"(expand-context/outer-post-expansion-scope-action the-struct_114)"
"(expand-context/outer-scopes the-struct_114)"
"(expand-context/outer-def-ctx-scopes the-struct_114)"
"(expand-context/outer-binding-layer the-struct_114)"
"(expand-context/outer-reference-records the-struct_114)"
"(expand-context/outer-only-immediate? the-struct_114)"
"(expand-context/outer-need-eventually-defined the-struct_114)"
"(expand-context/outer-current-introduction-scopes the-struct_114)"
"(expand-context/outer-name the-struct_114)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"expand-context/outer?\""
" the-struct_114))))"
" current-ctx_107)))"
"(let-values((()"
"(begin"
"(let-values(((obs_117)(expand-context-observer ctx_108)))"
"(if obs_117"
"(let-values()"
"(let-values()(call-expand-observe obs_117 'local-value id_103)))"
"(void)))"
"(values))))"
"(let-values(((phase_109)(expand-context-phase ctx_108)))"
"((letrec-values(((loop_118)"
"(lambda(id_119)"
"(let-values(((b_120)"
"(if immediate?_106"
"(let-values(((id90_122) id_119)"
"((phase91_123) phase_109)"
"((temp92_124) #t))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp92_124"
" #t"
" #f"
" #f"
" id90_122"
" phase91_123))"
"(resolve+shift/extra-inspector"
" id_119"
" phase_109"
"(expand-context-namespace ctx_108)))))"
"(begin"
"(let-values(((obs_125)(expand-context-observer ctx_108)))"
"(if obs_125"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_125 'resolve id_119)))"
"(void)))"
"(if(not b_120)"
"(let-values()"
"(begin"
"(let-values(((obs_126)(expand-context-observer ctx_108)))"
"(if obs_126"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_126"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_105"
"(failure-thunk_105)"
"(error"
" 'syntax-local-value"
"                                                               \"unbound identifier: ~v\""
" id_119))))"
"(let-values()"
"(let-values(((v_127 primitive?_128 insp_129)"
"(let-values(((b93_131) b_120)"
"((ctx94_132) ctx_108)"
"((id95_133) id_119)"
"((temp96_134) #t))"
"(lookup15.1"
" #f"
" #f"
" temp96_134"
" #t"
" b93_131"
" ctx94_132"
" id95_133))))"
"(if(let-values(((or-part_135)(variable? v_127)))"
"(if or-part_135 or-part_135(core-form? v_127)))"
"(let-values()"
"(begin"
"(let-values(((obs_136)"
"(expand-context-observer ctx_108)))"
"(if obs_136"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_136"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_105"
"(failure-thunk_105)"
"(error"
" 'syntax-local-value"
"                                                                     \"identifier is not bound to syntax: ~v\""
" id_119))))"
"(let-values()"
"(begin"
"(let-values(((obs_137)"
"(expand-context-observer ctx_108)))"
"(if obs_137"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_137"
" 'local-value-result"
" #t)))"
"(void)))"
"(if(1/rename-transformer? v_127)"
"(let-values()"
"(if immediate?_106"
"(values"
" v_127"
"(1/rename-transformer-target v_127))"
"(loop_118(1/rename-transformer-target v_127))))"
"(if immediate?_106"
"(let-values()(values v_127 #f))"
"(let-values() v_127))))))))))))))"
" loop_118)"
"(flip-introduction-scopes id_103 ctx_108)))))))))))))))))"
"(define-values"
"(1/syntax-local-value)"
"(let-values(((syntax-local-value25_154)"
"(lambda(id24_155 failure-thunk20_156 intdef21_157 failure-thunk22_158 intdef23_159)"
"(let-values(((id_160) id24_155))"
"(let-values(((failure-thunk_161)(if failure-thunk22_158 failure-thunk20_156 #f)))"
"(let-values(((intdef_162)(if intdef23_159 intdef21_157 #f)))"
"(let-values()"
"(let-values(((temp97_164) 'syntax-local-value)"
"((temp98_165) #f)"
"((id99_166) id_160)"
"((intdef100_167) intdef_162)"
"((failure-thunk101_168) failure-thunk_161))"
"(do-syntax-local-value17.1"
" temp98_165"
" temp97_164"
" id99_166"
" intdef100_167"
" failure-thunk101_168)))))))))"
"(case-lambda"
"((id_169)(syntax-local-value25_154 id_169 #f #f #f #f))"
"((id_170 failure-thunk_171 intdef21_172)(syntax-local-value25_154 id_170 failure-thunk_171 intdef21_172 #t #t))"
"((id_173 failure-thunk20_174)(syntax-local-value25_154 id_173 failure-thunk20_174 #f #t #f)))))"
"(define-values"
"(1/syntax-local-value/immediate)"
"(let-values(((syntax-local-value/immediate32_175)"
"(lambda(id31_176 failure-thunk27_177 intdef28_178 failure-thunk29_179 intdef30_180)"
"(let-values(((id_181) id31_176))"
"(let-values(((failure-thunk_182)(if failure-thunk29_179 failure-thunk27_177 #f)))"
"(let-values(((intdef_183)(if intdef30_180 intdef28_178 #f)))"
"(let-values()"
"(let-values(((temp102_185) 'syntax-local-value/immediate)"
"((temp103_186) #t)"
"((id104_187) id_181)"
"((intdef105_188) intdef_183)"
"((failure-thunk106_189) failure-thunk_182))"
"(do-syntax-local-value17.1"
" temp103_186"
" temp102_185"
" id104_187"
" intdef105_188"
" failure-thunk106_189)))))))))"
"(case-lambda"
"((id_190)(syntax-local-value/immediate32_175 id_190 #f #f #f #f))"
"((id_191 failure-thunk_192 intdef28_193)"
"(syntax-local-value/immediate32_175 id_191 failure-thunk_192 intdef28_193 #t #t))"
"((id_194 failure-thunk27_195)(syntax-local-value/immediate32_175 id_194 failure-thunk27_195 #f #t #f)))))"
"(define-values"
"(do-lift-values-expression)"
"(lambda(who_196 n_197 s_198)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_198) (void) (let-values () (raise-argument-error who_196 \"syntax?\" s_198)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? n_197)"
"(void)"
"                        (let-values () (raise-argument-error who_196 \"exact-nonnegative-integer?\" n_197)))"
"(values))))"
"(let-values(((ctx_199)"
"(let-values(((who107_203) who_196))(get-current-expand-context15.1 #f #f who107_203 #t))))"
"(let-values(((lifts_200)(expand-context-lifts ctx_199)))"
"(let-values(((counter_201)(root-expand-context-counter ctx_199)))"
"(let-values(((ids_202)"
"(let-values(((start_204) 0)((end_205) n_197)((inc_206) 1))"
"(begin"
"(if(if(real? start_204)(if(real? end_205)(real? inc_206) #f) #f)"
"(void)"
"(let-values()(in-range start_204 end_205 inc_206)))"
"((letrec-values(((for-loop_207)"
"(lambda(pos_208)"
"(if(< pos_208 end_205)"
"(let-values()"
"(let-values(((post-guard-var_210)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_211)"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(set-box!"
" counter_201"
"(add1"
"(unbox counter_201)))"
"(values))))"
"(let-values(((name_212)"
"(string->unreadable-symbol"
"(format"
"                                                                                                \"lifted/~a\""
"(unbox counter_201)))))"
"(add-scope"
"(datum->syntax$1 #f name_212)"
"(new-scope 'macro))))))))"
"(let-values(((result_213)"
"(if(post-guard-var_210)"
"(for-loop_207(+ pos_208 inc_206))"
" null)))"
"(cons elem_211 result_213))))))"
" null))))"
" for-loop_207)"
" start_204)))))"
"(begin"
"(let-values(((obs_214)(expand-context-observer ctx_199)))"
"(if obs_214"
"(let-values()(let-values()(call-expand-observe obs_214 'local-lift ids_202 s_198)))"
"(void)))"
"(map2"
"(lambda(id_215)(flip-introduction-scopes id_215 ctx_199))"
"(add-lifted!"
" lifts_200"
" ids_202"
"(flip-introduction-scopes s_198 ctx_199)"
"(expand-context-phase ctx_199))))))))))))"
"(define-values"
"(1/syntax-local-lift-expression)"
"(lambda(s_216)(car(do-lift-values-expression 'syntax-local-lift-expression 1 s_216))))"
"(define-values"
"(1/syntax-local-lift-values-expression)"
"(lambda(n_217 s_218)(do-lift-values-expression 'syntax-local-lift-values-expression n_217 s_218)))"
"(define-values"
"(1/syntax-local-lift-context)"
"(lambda()"
"(let-values(((ctx_219)"
"(let-values(((temp108_220) 'syntax-local-lift-context))"
"(get-current-expand-context15.1 #f #f temp108_220 #t))))"
"(root-expand-context-lift-key ctx_219))))"
"(define-values"
"(1/syntax-local-lift-module)"
"(lambda(s_221)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_221)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-lift-module \"syntax?\" s_221)))"
"(values))))"
"(let-values(((ctx_222)"
"(let-values(((temp109_224) 'syntax-local-lift-module))"
"(get-current-expand-context15.1 #f #f temp109_224 #t))))"
"(let-values(((phase_223)(expand-context-phase ctx_222)))"
"(begin"
"(let-values(((tmp_225)(core-form-sym s_221 phase_223)))"
"(if(if(equal? tmp_225 'module) #t(equal? tmp_225 'module*))"
"(let-values()(add-lifted-module!(expand-context-module-lifts ctx_222) s_221 phase_223))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a module form\" \"given form\" s_221))))"
"(let-values(((obs_226)(expand-context-observer ctx_222)))"
"(if obs_226"
"(let-values()(let-values()(call-expand-observe obs_226 'lift-statement s_221)))"
"(void)))))))))"
"(define-values"
"(do-local-lift-to-module52.1)"
"(lambda(add-lifted!37_233"
" get-lift-ctx36_234"
" get-wrt-phase38_235"
" intro?34_236"
" intro?42_237"
" more-checks35_238"
" more-checks43_239"
" post-wrap41_240"
" post-wrap49_241"
" pre-wrap39_242"
" pre-wrap47_243"
" shift-wrap40_244"
" shift-wrap48_245"
" who50_246"
" s51_247)"
"(let-values(((who_248) who50_246))"
"(let-values(((s_249) s51_247))"
"(let-values(((intro?_250)(if intro?42_237 intro?34_236 #t)))"
"(let-values(((more-checks_251)(if more-checks43_239 more-checks35_238 void)))"
"(let-values(((get-lift-ctx_252) get-lift-ctx36_234))"
"(let-values(((add-lifted!_253) add-lifted!37_233))"
"(let-values(((get-wrt-phase_254) get-wrt-phase38_235))"
"(let-values(((pre-wrap_255)"
"(if pre-wrap47_243 pre-wrap39_242(lambda(s_256 phase_257 lift-ctx_258) s_256))))"
"(let-values(((shift-wrap_259)"
"(if shift-wrap48_245 shift-wrap40_244(lambda(s_260 phase_261 lift-ctx_262) s_260))))"
"(let-values(((post-wrap_263)"
"(if post-wrap49_241 post-wrap41_240(lambda(s_264 phase_265 lift-ctx_266) s_264))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_249)"
"(void)"
"                                            (let-values () (raise-argument-error who_248 \"syntax?\" s_249)))"
"(values))))"
"(let-values((()(begin(more-checks_251)(values))))"
"(let-values(((ctx_267)"
"(let-values(((who110_275) who_248))"
"(get-current-expand-context15.1 #f #f who110_275 #t))))"
"(let-values(((lift-ctx_268)(get-lift-ctx_252 ctx_267)))"
"(let-values(((phase_269)(expand-context-phase ctx_267)))"
"(let-values(((wrt-phase_270)(get-wrt-phase_254 lift-ctx_268)))"
"(let-values(((added-s_271)"
"(if intro?_250(flip-introduction-scopes s_249 ctx_267) s_249)))"
"(let-values(((pre-s_272)(pre-wrap_255 added-s_271 phase_269 lift-ctx_268)))"
"(let-values(((shift-s_273)"
"(let-values(((start_276) phase_269)"
"((end_277) wrt-phase_270)"
"((inc_278) -1))"
"(begin"
"(if(if(real? start_276)"
"(if(real? end_277)(real? inc_278) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_276 end_277 inc_278)))"
"((letrec-values(((for-loop_279)"
"(lambda(s_280 pos_281)"
"(if(> pos_281 end_277)"
"(let-values(((phase_282) pos_281))"
"(let-values(((s_283)"
"(let-values(((s_284)"
" s_280))"
"(let-values(((s_285)"
"(let-values()"
"(shift-wrap_259"
" s_284"
"(sub1"
" phase_282)"
" lift-ctx_268))))"
"(values s_285)))))"
"(if(not #f)"
"(for-loop_279"
" s_283"
"(+ pos_281 inc_278))"
" s_283)))"
" s_280))))"
" for-loop_279)"
" pre-s_272"
" start_276)))))"
"(let-values(((post-s_274)"
"(post-wrap_263 shift-s_273 wrt-phase_270 lift-ctx_268)))"
"(begin"
"(add-lifted!_253 lift-ctx_268 post-s_274 wrt-phase_270)"
"(values ctx_267 added-s_271)))))))))))))))))))))))))"
"(define-values"
"(1/syntax-local-lift-require)"
"(lambda(s_323 use-s_324)"
"(let-values(((sc_325)(new-scope 'macro)))"
"(let-values(((ctx_326 added-s_327)"
"(let-values(((temp111_330) 'syntax-local-lift-require)"
"((temp112_331)(datum->syntax$1 #f s_323))"
"((temp113_332) #f)"
"((temp114_333)"
"(lambda()"
"(if(syntax?$1 use-s_324)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'syntax-local-lift-require \"syntax?\" use-s_324)))))"
"((expand-context-require-lifts115_334) expand-context-require-lifts)"
"((require-lift-context-wrt-phase116_335) require-lift-context-wrt-phase)"
"((add-lifted-require!117_336) add-lifted-require!)"
"((temp118_337)"
"(lambda(s_339 phase_340 require-lift-ctx_341)(require-spec-shift-for-syntax s_339)))"
"((temp119_338)"
"(lambda(s_342 phase_343 require-lift-ctx_344)"
"(wrap-form '#%require(add-scope s_342 sc_325) phase_343))))"
"(do-local-lift-to-module52.1"
" add-lifted-require!117_336"
" expand-context-require-lifts115_334"
" require-lift-context-wrt-phase116_335"
" temp113_332"
" #t"
" temp114_333"
" #t"
" temp119_338"
" #t"
" #f"
" #f"
" temp118_337"
" #t"
" temp111_330"
" temp112_331))))"
"(let-values(((result-s_328)(add-scope use-s_324 sc_325)))"
"(begin"
"(let-values(((obs_345)(expand-context-observer ctx_326)))"
"(if obs_345"
"(let-values()"
"(let-values()(call-expand-observe obs_345 'lift-require added-s_327 use-s_324 result-s_328)))"
"(void)))"
" result-s_328))))))"
"(define-values"
"(1/syntax-local-lift-provide)"
"(lambda(s_346)"
"(let-values(((ctx_347 result-s_348)"
"(let-values(((temp120_350) 'syntax-local-lift-module-end-declaration)"
"((s121_351) s_346)"
"((expand-context-to-module-lifts122_352) expand-context-to-module-lifts)"
"((to-module-lift-context-wrt-phase123_353) to-module-lift-context-wrt-phase)"
"((add-lifted-to-module-provide!124_354) add-lifted-to-module-provide!)"
"((temp125_355)"
"(lambda(s_357 phase_358 to-module-lift-ctx_359)(wrap-form 'for-syntax s_357 #f)))"
"((temp126_356)"
"(lambda(s_360 phase_361 to-module-lift-ctx_362)"
"(wrap-form '#%provide s_360 phase_361))))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-provide!124_354"
" expand-context-to-module-lifts122_352"
" to-module-lift-context-wrt-phase123_353"
" #f"
" #f"
" #f"
" #f"
" temp126_356"
" #t"
" #f"
" #f"
" temp125_355"
" #t"
" temp120_350"
" s121_351))))"
"(let-values(((obs_363)(expand-context-observer ctx_347)))"
"(if obs_363(let-values()(let-values()(call-expand-observe obs_363 'lift-provide result-s_348)))(void))))))"
"(define-values"
"(1/syntax-local-lift-module-end-declaration)"
"(lambda(s_364)"
"(let-values(((ctx_365 also-s_366)"
"(let-values(((temp127_368) 'syntax-local-lift-module-end-declaration)"
"((s128_369) s_364)"
"((expand-context-to-module-lifts129_370) expand-context-to-module-lifts)"
"((temp130_371)(lambda(lift-ctx_375) 0))"
"((add-lifted-to-module-end!131_372) add-lifted-to-module-end!)"
"((temp132_373)"
"(lambda(orig-s_376 phase_377 to-module-lift-ctx_378)"
"(if(to-module-lift-context-end-as-expressions? to-module-lift-ctx_378)"
"(wrap-form '#%expression orig-s_376 phase_377)"
" orig-s_376)))"
"((temp133_374)"
"(lambda(s_379 phase_380 to-module-lift-ctx_381)"
"(wrap-form 'begin-for-syntax s_379 phase_380))))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-end!131_372"
" expand-context-to-module-lifts129_370"
" temp130_371"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp132_373"
" #t"
" temp133_374"
" #t"
" temp127_368"
" s128_369))))"
"(let-values(((obs_382)(expand-context-observer ctx_365)))"
"(if obs_382(let-values()(let-values()(call-expand-observe obs_382 'lift-statement s_364)))(void))))))"
"(define-values"
"(wrap-form)"
"(lambda(sym_383 s_384 phase_385)"
"(datum->syntax$1"
" #f"
"(list(datum->syntax$1(if phase_385(syntax-shift-phase-level$1 core-stx phase_385) #f) sym_383) s_384))))"
"(define-values"
"(1/syntax-local-module-defined-identifiers)"
"(lambda()"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-defined-identifiers"
"                         \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_386)"
"(let-values(((temp134_387) 'syntax-local-module-defined-identifiers))"
"(get-current-expand-context15.1 #f #f temp134_387 #t))))"
"(requireds->phase-ht(extract-module-definitions(expand-context-requires+provides ctx_386)))))))"
"(define-values"
"(1/syntax-local-module-required-identifiers)"
"(lambda(mod-path_388 phase-level_389)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_394)(not mod-path_388)))"
"(if or-part_394 or-part_394(1/module-path? mod-path_388)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                         \"(or/c module-path? #f)\""
" mod-path_388)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_395)(eq? phase-level_389 #t)))"
"(if or-part_395 or-part_395(phase? phase-level_389)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                           (format \"(or/c ~a #t)\" phase?-string)"
" phase-level_389)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-required-identifiers"
"                             \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_390)"
"(let-values(((temp135_396) 'syntax-local-module-required-identifiers))"
"(get-current-expand-context15.1 #f #f temp135_396 #t))))"
"(let-values(((requires+provides_391)(expand-context-requires+provides ctx_390)))"
"(let-values(((mpi_392)(if mod-path_388(module-path->mpi/context mod-path_388 ctx_390) #f)))"
"(let-values(((requireds_393)"
"(extract-all-module-requires"
" requires+provides_391"
" mpi_392"
"(if(eq? phase-level_389 #t) 'all phase-level_389))))"
"(if requireds_393"
"(let-values(((ht_397)(requireds->phase-ht requireds_393)))"
"(begin"
"(if((lambda(ht_398)(hash? ht_398)) ht_397)(void)(let-values()(default-in-hash ht_397)))"
"((letrec-values(((for-loop_399)"
"(lambda(i_400)"
"(if i_400"
"(let-values(((phase_401 ids_402)(hash-iterate-key+value ht_397 i_400)))"
"(let-values(((post-guard-var_403)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_404)"
"(let-values()"
"(let-values()(cons phase_401 ids_402)))))"
"(let-values(((result_405)"
"(if(post-guard-var_403)"
"(for-loop_399(hash-iterate-next ht_397 i_400))"
" null)))"
"(cons elem_404 result_405))))))"
" null))))"
" for-loop_399)"
"(hash-iterate-first ht_397))))"
" #f))))))))))"
"(define-values"
"(requireds->phase-ht)"
"(lambda(requireds_406)"
"(let-values(((lst_407) requireds_406))"
"(begin"
"(if(list? lst_407)(void)(let-values()(in-list lst_407)))"
"((letrec-values(((for-loop_408)"
"(lambda(ht_409 lst_410)"
"(if(pair? lst_410)"
"(let-values(((r_411)(unsafe-car lst_410))((rest_412)(unsafe-cdr lst_410)))"
"(let-values(((ht_413)"
"(let-values(((ht_414) ht_409))"
"(let-values(((ht_415)"
"(let-values()"
"(hash-update"
" ht_414"
"(required-phase r_411)"
"(lambda(l_416)(cons(required-id r_411) l_416))"
" null))))"
"(values ht_415)))))"
"(if(not #f)(for-loop_408 ht_413 rest_412) ht_413)))"
" ht_409))))"
" for-loop_408)"
"(hasheqv)"
" lst_407)))))"
"(define-values"
"(1/syntax-local-module-exports)"
"(lambda(mod-path_417)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_422)(1/module-path? mod-path_417)))"
"(if or-part_422"
" or-part_422"
"(if(syntax?$1 mod-path_417)(1/module-path?(syntax->datum$1 mod-path_417)) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-exports"
"(string-append"
"                          \"(or/c module-path?\\n\""
"                          \"      (and/c syntax?\\n\""
"                          \"             (lambda (stx)\\n\""
"                          \"               (module-path? (syntax->datum stx)))))\")"
" mod-path_417)))"
"(values))))"
"(let-values(((ctx_418)"
"(let-values(((temp136_423) 'syntax-local-module-exports))"
"(get-current-expand-context15.1 #f #f temp136_423 #t))))"
"(let-values(((ns_419)(expand-context-namespace ctx_418)))"
"(let-values(((mod-name_420)"
"(1/module-path-index-resolve"
"(module-path->mpi/context"
"(if(syntax?$1 mod-path_417)(syntax->datum$1 mod-path_417) mod-path_417)"
" ctx_418)"
" #t)))"
"(let-values(((m_421)(namespace->module ns_419 mod-name_420)))"
"(begin"
"(if m_421(void)(let-values()(raise-unknown-module-error 'syntax-local-module-exports mod-name_420)))"
"(let-values(((ht_424)(module-provides m_421)))"
"(begin"
"(if((lambda(ht_425)(hash? ht_425)) ht_424)(void)(let-values()(default-in-hash ht_424)))"
"((letrec-values(((for-loop_426)"
"(lambda(i_427)"
"(if i_427"
"(let-values(((phase_428 syms_429)(hash-iterate-key+value ht_424 i_427)))"
"(let-values(((post-guard-var_430)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_431)"
"(let-values()"
"(let-values()"
"(cons"
" phase_428"
"(let-values(((ht_432) syms_429))"
"(begin"
"(if((lambda(ht_433)(hash? ht_433)) ht_432)"
"(void)"
"(let-values()(default-in-hash-keys ht_432)))"
"((letrec-values(((for-loop_434)"
"(lambda(i_435)"
"(if i_435"
"(let-values(((sym_436)"
"(hash-iterate-key"
" ht_432"
" i_435)))"
"(let-values(((post-guard-var_437)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_438)"
"(let-values()"
"(let-values()"
" sym_436))))"
"(let-values(((result_439)"
"(if(post-guard-var_437)"
"(for-loop_434"
"(hash-iterate-next"
" ht_432"
" i_435))"
" null)))"
"(cons"
" elem_438"
" result_439))))))"
" null))))"
" for-loop_434)"
"(hash-iterate-first ht_432)))))))))"
"(let-values(((result_440)"
"(if(post-guard-var_430)"
"(for-loop_426(hash-iterate-next ht_424 i_427))"
" null)))"
"(cons elem_431 result_440))))))"
" null))))"
" for-loop_426)"
"(hash-iterate-first ht_424))))))))))))"
"(define-values"
"(1/syntax-local-submodules)"
"(lambda()"
"(let-values(((ctx_441)"
"(let-values(((temp137_443) 'syntax-local-submodules))"
"(get-current-expand-context15.1 #f #f temp137_443 #t))))"
"(let-values(((submods_442)(expand-context-declared-submodule-names ctx_441)))"
"(let-values(((ht_444) submods_442))"
"(begin"
"(if((lambda(ht_445)(hash? ht_445)) ht_444)(void)(let-values()(default-in-hash ht_444)))"
"((letrec-values(((for-loop_446)"
"(lambda(i_447)"
"(if i_447"
"(let-values(((name_448 kind_449)(hash-iterate-key+value ht_444 i_447)))"
"(let-values(((post-guard-var_450)(lambda() #t)))"
"(let-values()"
"(if(eq? kind_449 'module)"
"(let-values()"
"(let-values(((elem_451)(let-values()(let-values() name_448))))"
"(let-values(((result_452)"
"(if(post-guard-var_450)"
"(for-loop_446(hash-iterate-next ht_444 i_447))"
" null)))"
"(cons elem_451 result_452))))"
"(if(post-guard-var_450)"
"(for-loop_446(hash-iterate-next ht_444 i_447))"
" null)))))"
" null))))"
" for-loop_446)"
"(hash-iterate-first ht_444))))))))"
"(define-values"
"(1/syntax-local-environment-ref)"
"(let-values(((syntax-local-environment-ref58_453)"
"(lambda(key57_454 default55_455 default56_456)"
"(let-values(((key_457) key57_454))"
"(let-values(((default_458)(if default56_456 default55_455 #f)))"
"(let-values()"
"(let-values(((ctx_459)"
"(let-values(((temp138_460) 'syntax-local-environment-ref))"
"(get-current-expand-context15.1 #f #f temp138_460 #t))))"
"(hash-ref(expand-context-user-env ctx_459) key_457 default_458))))))))"
"(case-lambda"
"((key_461)(syntax-local-environment-ref58_453 key_461 #f #f))"
"((key_462 default55_463)(syntax-local-environment-ref58_453 key_462 default55_463 #t)))))"
"(define-values"
"(1/syntax-local-get-shadower)"
"(let-values(((syntax-local-get-shadower63_464)"
"(lambda(id62_465 only-generated?60_466 only-generated?61_467)"
"(let-values(((id_468) id62_465))"
"(let-values(((only-generated?_469)(if only-generated?61_467 only-generated?60_466 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_468)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'syntax-local-get-shadower \"identifier?\" id_468)))"
"(values))))"
"(let-values(((ctx_470)"
"(let-values(((temp139_472) 'syntax-local-get-shadower))"
"(get-current-expand-context15.1 #f #f temp139_472 #t))))"
"(let-values(((new-id_471)(add-scopes id_468(expand-context-scopes ctx_470))))"
"(if(syntax-clean? id_468) new-id_471(syntax-taint$1 new-id_471)))))))))))"
"(case-lambda"
"((id_473)(syntax-local-get-shadower63_464 id_473 #f #f))"
"((id_474 only-generated?60_475)(syntax-local-get-shadower63_464 id_474 only-generated?60_475 #t)))))"
"(void)"
"(void)"
"(define-values"
"(syntax-source-accessor)"
"(lambda(who_1 srcloc-accessor_2)"
"(lambda(s_3)"
"(let-values((()"
"(begin"
"                      (if (syntax?$1 s_3) (void) (let-values () (raise-argument-error who_1 \"syntax?\" s_3)))"
"(values))))"
"(let-values(((srcloc_4)(syntax-srcloc s_3)))(if srcloc_4(srcloc-accessor_2 srcloc_4) #f))))))"
"(define-values(1/syntax-source)(syntax-source-accessor 'syntax-source srcloc-source))"
"(define-values(1/syntax-line)(syntax-source-accessor 'syntax-line srcloc-line))"
"(define-values(1/syntax-column)(syntax-source-accessor 'syntax-column srcloc-column))"
"(define-values(1/syntax-position)(syntax-source-accessor 'syntax-position srcloc-position))"
"(define-values(1/syntax-span)(syntax-source-accessor 'syntax-span srcloc-span))"
"(define-values"
"(encoded-srcloc?)"
"(lambda(v_5)"
"(let-values(((or-part_6)(if(list? v_5)(if(=(length v_5) 5)(srcloc-vector?(list->vector v_5)) #f) #f)))"
"(if or-part_6 or-part_6(if(vector? v_5)(if(=(vector-length v_5) 5)(srcloc-vector? v_5) #f) #f)))))"
"(define-values"
"(srcloc-vector?)"
"(lambda(v_7)"
"(if(let-values(((or-part_8)(not(vector-ref v_7 1))))"
"(if or-part_8 or-part_8(exact-positive-integer?(vector-ref v_7 1))))"
"(if(let-values(((or-part_9)(not(vector-ref v_7 2))))"
"(if or-part_9 or-part_9(exact-nonnegative-integer?(vector-ref v_7 2))))"
"(if(let-values(((or-part_10)(not(vector-ref v_7 3))))"
"(if or-part_10 or-part_10(exact-positive-integer?(vector-ref v_7 3))))"
"(let-values(((or-part_11)(not(vector-ref v_7 4))))"
"(if or-part_11 or-part_11(exact-nonnegative-integer?(vector-ref v_7 4))))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(to-srcloc-stx)"
"(lambda(v_12)"
"(if(pair? v_12)"
"(let-values()(to-srcloc-stx(list->vector v_12)))"
"(if(vector? v_12)"
"(let-values()"
"(let-values(((the-struct_13) empty-syntax))"
"(if(syntax?$1 the-struct_13)"
"(let-values(((srcloc1_14)"
"(srcloc"
"(vector-ref v_12 0)"
"(vector-ref v_12 1)"
"(vector-ref v_12 2)"
"(vector-ref v_12 3)"
"(vector-ref v_12 4))))"
"(syntax1.1"
"(syntax-content the-struct_13)"
"(syntax-scopes the-struct_13)"
"(syntax-shifted-multi-scopes the-struct_13)"
"(syntax-scope-propagations the-struct_13)"
"(syntax-mpi-shifts the-struct_13)"
" srcloc1_14"
"(syntax-props the-struct_13)"
"(syntax-inspector the-struct_13)"
"(syntax-tamper the-struct_13)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_13))))"
"(let-values() v_12)))))"
"(void)"
"(void)"
"(define-values"
"(reader-syntax->syntax)"
"(lambda(v_1)"
"(let-values(((s_2) v_1)"
"((f_3)"
"(lambda(tail?_5 v_6)"
"(if(1/syntax? v_6)"
"(let-values()"
"(let-values(((e_7)(syntax-e$2 v_6)))"
"(if(syntax?$1 e_7)"
"(let-values() e_7)"
"(let-values()"
"(let-values(((s_8)"
"(let-values(((the-struct_10) empty-syntax))"
"(if(syntax?$1 the-struct_10)"
"(let-values(((content1_11)(reader-syntax->syntax(syntax-e$2 v_6)))"
"((srcloc2_12)"
"(srcloc"
"(syntax-source$1 v_6)"
"(syntax-line$1 v_6)"
"(syntax-column$1 v_6)"
"(syntax-position$1 v_6)"
"(syntax-span$1 v_6)))"
"((props3_13)"
"(let-values(((tmp_14)"
"(1/syntax-property v_6 'paren-shape)))"
"(if(equal? tmp_14 '#\\[)"
"(let-values() original-square-props)"
"(if(equal? tmp_14 '#\\{)"
"(let-values() original-curly-props)"
"(let-values() original-props))))))"
"(syntax1.1"
" content1_11"
"(syntax-scopes the-struct_10)"
"(syntax-shifted-multi-scopes the-struct_10)"
"(syntax-scope-propagations the-struct_10)"
"(syntax-mpi-shifts the-struct_10)"
" srcloc2_12"
" props3_13"
"(syntax-inspector the-struct_10)"
"(syntax-tamper the-struct_10)))"
"                                                (raise-argument-error 'struct-copy \"syntax?\" the-struct_10)))))"
"(let-values(((keys_9)(syntax-property-symbol-keys$1 v_6)))"
"(if(null? keys_9)"
"(let-values() s_8)"
"(if(if(null?(cdr keys_9))(eq?(car keys_9) 'paren-shape) #f)"
"(let-values() s_8)"
"(let-values()"
"(let-values(((lst_15) keys_9))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(s_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((key_19)(unsafe-car lst_18))"
"((rest_20)(unsafe-cdr lst_18)))"
"(let-values(((s_21)"
"(let-values(((s_22) s_17))"
"(let-values(((s_23)"
"(let-values()"
"(syntax-property$1"
" s_22"
" key_19"
"(1/syntax-property"
" v_6"
" key_19)"
" #t))))"
"(values s_23)))))"
"(if(not #f)(for-loop_16 s_21 rest_20) s_21)))"
" s_17))))"
" for-loop_16)"
" s_8"
" lst_15))))))))))))"
"(let-values() v_6))))"
"((seen_4) #f))"
"((letrec-values(((loop_24)"
"(lambda(tail?_25 s_26 prev-depth_27)"
"(let-values(((depth_28)(add1 prev-depth_27)))"
"(if(if seen_4(> depth_28 32) #f)"
"(let-values()"
"(datum-map-slow tail?_25 s_26(lambda(tail?_29 s_30)(f_3 tail?_29 s_30)) seen_4))"
"(if(null? s_26)"
"(let-values()(f_3 tail?_25 s_26))"
"(if(pair? s_26)"
"(let-values()"
"(f_3"
" tail?_25"
"(cons(loop_24 #f(car s_26) depth_28)(loop_24 #t(cdr s_26) depth_28))))"
"(if(let-values(((or-part_31)(symbol? s_26)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)(boolean? s_26)))"
"(if or-part_32 or-part_32(number? s_26)))))"
"(let-values()(f_3 #f s_26))"
"(if(let-values(((or-part_33)(vector? s_26)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_34)(box? s_26)))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35)(prefab-struct-key s_26)))"
"(if or-part_35 or-part_35(hash? s_26)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_25"
" s_26"
"(lambda(tail?_36 s_37)(f_3 tail?_36 s_37))"
" seen_4))"
"(let-values()(f_3 #f s_26)))))))))))"
" loop_24)"
" #f"
" s_2"
" 0))))"
"(define-values(original-props)(syntax-props(syntax-property$1 empty-syntax original-property-sym #t)))"
"(define-values"
"(original-square-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\[)))"
"(define-values"
"(original-curly-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\{)))"
"(void)"
"(void)"
"(define-values"
"(read-syntax$1)"
"(lambda(src_1 in_2)(let-values()(reader-syntax->syntax(read-syntax$2 src_1 in_2)))))"
"(define-values"
"(read-syntax/recursive$1)"
"(lambda(src_3 in_4 start_5 readtable_6 graph?_7)"
"(let-values()(reader-syntax->syntax(read-syntax/recursive$2 src_3 in_4 start_5 readtable_6 graph?_7)))))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-e)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-e \"syntax?\" s_1)))"
"(syntax-e$1 s_1))))"
"(define-values"
"(1/syntax->datum)"
"(lambda(s_2)"
"(begin"
"      (if (syntax?$1 s_2) (void) (let-values () (raise-argument-error 'syntax->datum \"syntax?\" s_2)))"
"(syntax->datum$1 s_2))))"
"(define-values(maybe-syntax->datum)(lambda(s_3)(if(syntax?$1 s_3)(syntax->datum$1 s_3) s_3)))"
"(define-values"
"(1/datum->syntax)"
"(let-values(((datum->syntax9_4)"
"(lambda(stx-c7_5 s8_6 stx-l1_7 stx-p2_8 ignored3_9 stx-l4_10 stx-p5_11 ignored6_12)"
"(let-values(((stx-c_13) stx-c7_5))"
"(let-values(((s_14) s8_6))"
"(let-values(((stx-l_15)(if stx-l4_10 stx-l1_7 #f)))"
"(let-values(((stx-p_16)(if stx-p5_11 stx-p2_8 #f)))"
"(let-values(((ignored_17)(if ignored6_12 ignored3_9 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_18)(not stx-c_13)))"
"(if or-part_18 or-part_18(syntax?$1 stx-c_13)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-c_13)))"
"(if(let-values(((or-part_19)(not stx-l_15)))"
"(if or-part_19"
" or-part_19"
"(let-values(((or-part_20)(syntax?$1 stx-l_15)))"
"(if or-part_20 or-part_20(encoded-srcloc? stx-l_15)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'datum->syntax"
"(string-append"
"                                      \"(or #f syntax?\\n\""
"                                      \"       (list/c any/c\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f))\\n\""
"                                      \"       (vector/c any/c\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)))\")"
" stx-l_15)))"
"(if(let-values(((or-part_21)(not stx-p_16)))"
"(if or-part_21 or-part_21(syntax?$1 stx-p_16)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-p_16)))"
"(datum->syntax$1 stx-c_13 s_14(to-srcloc-stx stx-l_15) stx-p_16)))))))))))"
"(case-lambda"
"((stx-c_22 s_23)(datum->syntax9_4 stx-c_22 s_23 #f #f #f #f #f #f))"
"((stx-c_24 s_25 stx-l_26 stx-p_27 ignored3_28)"
"(datum->syntax9_4 stx-c_24 s_25 stx-l_26 stx-p_27 ignored3_28 #t #t #t))"
"((stx-c_29 s_30 stx-l_31 stx-p2_32)(datum->syntax9_4 stx-c_29 s_30 stx-l_31 stx-p2_32 #f #t #t #f))"
"((stx-c_33 s_34 stx-l1_35)(datum->syntax9_4 stx-c_33 s_34 stx-l1_35 #f #f #t #f #f)))))"
"(define-values"
"(1/syntax->list)"
"(lambda(s_36)"
"(begin"
"      (if (syntax?$1 s_36) (void) (let-values () (raise-argument-error 'syntax->list \"syntax?\" s_36)))"
"(syntax->list$1 s_36))))"
"(define-values"
"(1/syntax-original?)"
"(lambda(s_37)"
"(begin"
"      (if (syntax?$1 s_37) (void) (let-values () (raise-argument-error 'syntax-original? \"syntax?\" s_37)))"
"(if(syntax-property$1 s_37 original-property-sym)(not(syntax-any-macro-scopes? s_37)) #f))))"
"(define-values"
"(1/bound-identifier=?)"
"(let-values(((bound-identifier=?15_38)"
"(lambda(a13_39 b14_40 phase11_41 phase12_42)"
"(let-values(((a_43) a13_39))"
"(let-values(((b_44) b14_40))"
"(let-values(((phase_45)(if phase12_42 phase11_41(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? a_43)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" a_43)))"
"(if(identifier? b_44)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" b_44)))"
"(if(phase? phase_45)"
"(void)"
"(let-values()(raise-argument-error 'bound-identifier=? phase?-string phase_45)))"
"(bound-identifier=?$1 a_43 b_44 phase_45)))))))))"
"(case-lambda"
"((a_46 b_47)(bound-identifier=?15_38 a_46 b_47 #f #f))"
"((a_48 b_49 phase11_50)(bound-identifier=?15_38 a_48 b_49 phase11_50 #t)))))"
"(define-values"
"(1/free-identifier=?)"
"(let-values(((free-identifier=?23_51)"
"(lambda(a21_52 b22_53 a-phase17_54 b-phase18_55 a-phase19_56 b-phase20_57)"
"(let-values(((a_58) a21_52))"
"(let-values(((b_59) b22_53))"
"(let-values(((a-phase_60)(if a-phase19_56 a-phase17_54(1/syntax-local-phase-level))))"
"(let-values(((b-phase_61)(if b-phase20_57 b-phase18_55 a-phase_60)))"
"(let-values()"
"(begin"
"(if(identifier? a_58)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" a_58)))"
"(if(identifier? b_59)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" b_59)))"
"(if(phase? a-phase_60)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string a-phase_60)))"
"(if(phase? b-phase_61)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string b-phase_61)))"
"(free-identifier=?$1 a_58 b_59 a-phase_60 b-phase_61))))))))))"
"(case-lambda"
"((a_62 b_63)(free-identifier=?23_51 a_62 b_63 #f #f #f #f))"
"((a_64 b_65 a-phase_66 b-phase18_67)(free-identifier=?23_51 a_64 b_65 a-phase_66 b-phase18_67 #t #t))"
"((a_68 b_69 a-phase17_70)(free-identifier=?23_51 a_68 b_69 a-phase17_70 #f #t #f)))))"
"(define-values"
"(1/free-transformer-identifier=?)"
"(lambda(a_71 b_72)"
"(let-values((()"
"(begin"
"(if(identifier? a_71)"
"(void)"
"                      (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" a_71)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_72)"
"(void)"
"                        (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" b_72)))"
"(values))))"
"(let-values(((phase_73)(add1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_71 b_72 phase_73 phase_73))))))"
"(define-values"
"(1/free-template-identifier=?)"
"(lambda(a_74 b_75)"
"(let-values((()"
"(begin"
"(if(identifier? a_74)"
"(void)"
"                      (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" a_74)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_75)"
"(void)"
"                        (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" b_75)))"
"(values))))"
"(let-values(((phase_76)(sub1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_74 b_75 phase_76 phase_76))))))"
"(define-values"
"(1/free-label-identifier=?)"
"(lambda(a_77 b_78)"
"(begin"
"      (if (identifier? a_77) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" a_77)))"
"      (if (identifier? b_78) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" b_78)))"
"(free-identifier=?$1 a_77 b_78 #f #f))))"
"(define-values"
"(1/identifier-binding)"
"(let-values(((identifier-binding30_79)"
"(lambda(id29_80 phase25_81 top-level-symbol?26_82 phase27_83 top-level-symbol?28_84)"
"(let-values(((id_85) id29_80))"
"(let-values(((phase_86)(if phase27_83 phase25_81(1/syntax-local-phase-level))))"
"(let-values(((top-level-symbol?_87)(if top-level-symbol?28_84 top-level-symbol?26_82 #f)))"
"(let-values()"
"(begin"
"(if(identifier? id_85)"
"(void)"
"                              (let-values () (raise-argument-error 'identifier-binding \"identifier?\" id_85)))"
"(if(phase? phase_86)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding phase?-string phase_86)))"
"(identifier-binding$1 id_85 phase_86 top-level-symbol?_87)))))))))"
"(case-lambda"
"((id_88)(identifier-binding30_79 id_88 #f #f #f #f))"
"((id_89 phase_90 top-level-symbol?26_91)(identifier-binding30_79 id_89 phase_90 top-level-symbol?26_91 #t #t))"
"((id_92 phase25_93)(identifier-binding30_79 id_92 phase25_93 #f #t #f)))))"
"(define-values"
"(1/identifier-transformer-binding)"
"(let-values(((identifier-transformer-binding35_94)"
"(lambda(id34_95 phase32_96 phase33_97)"
"(let-values(((id_98) id34_95))"
"(let-values(((phase_99)(if phase33_97 phase32_96(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_98)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-transformer-binding \"identifier?\" id_98)))"
"(identifier-binding$1 id_98(if phase_99(add1 phase_99) #f)))))))))"
"(case-lambda"
"((id_100)(identifier-transformer-binding35_94 id_100 #f #f))"
"((id_101 phase32_102)(identifier-transformer-binding35_94 id_101 phase32_102 #t)))))"
"(define-values"
"(1/identifier-template-binding)"
"(lambda(id_103)"
"(begin"
"(if(identifier? id_103)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-template-binding \"identifier?\" id_103)))"
"(identifier-binding$1 id_103(sub1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-label-binding)"
"(lambda(id_104)"
"(begin"
"(if(identifier? id_104)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-label-binding \"identifier?\" id_104)))"
"(identifier-binding$1 id_104 #f))))"
"(define-values"
"(1/identifier-binding-symbol)"
"(let-values(((identifier-binding-symbol40_105)"
"(lambda(id39_106 phase37_107 phase38_108)"
"(let-values(((id_109) id39_106))"
"(let-values(((phase_110)(if phase38_108 phase37_107(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_109)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding-symbol \"identifier?\" id_109)))"
"(if(phase? phase_110)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding-symbol phase?-string phase_110)))"
"(identifier-binding-symbol$1 id_109 phase_110))))))))"
"(case-lambda"
"((id_111)(identifier-binding-symbol40_105 id_111 #f #f))"
"((id_112 phase37_113)(identifier-binding-symbol40_105 id_112 phase37_113 #t)))))"
"(define-values"
"(1/identifier-prune-lexical-context)"
"(let-values(((identifier-prune-lexical-context45_114)"
"(lambda(id44_115 syms42_116 syms43_117)"
"(let-values(((id_118) id44_115))"
"(let-values(((syms_119)(if syms43_117 syms42_116 null)))"
"(let-values()"
"(begin"
"(if(identifier? id_118)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"identifier?\" id_118)))"
"(if(if(list? syms_119)(andmap2 symbol? syms_119) #f)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"(listof symbol?)\" syms_119)))"
" id_118)))))))"
"(case-lambda"
"((id_120)(identifier-prune-lexical-context45_114 id_120 #f #f))"
"((id_121 syms42_122)(identifier-prune-lexical-context45_114 id_121 syms42_122 #t)))))"
"(define-values"
"(1/syntax-debug-info)"
"(let-values(((syntax-debug-info52_123)"
"(lambda(s51_124 phase47_125 all-bindings?48_126 phase49_127 all-bindings?50_128)"
"(let-values(((s_129) s51_124))"
"(let-values(((phase_130)(if phase49_127 phase47_125(1/syntax-local-phase-level))))"
"(let-values(((all-bindings?_131)(if all-bindings?50_128 all-bindings?48_126 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_129)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-debug-info \"syntax?\" s_129)))"
"(if(phase? phase_130)"
"(void)"
"(let-values()(raise-argument-error 'syntax-debug-info phase?-string phase_130)))"
"(syntax-debug-info$1 s_129 phase_130 all-bindings?_131)))))))))"
"(case-lambda"
"((s_132)(syntax-debug-info52_123 s_132 #f #f #f #f))"
"((s_133 phase_134 all-bindings?48_135)(syntax-debug-info52_123 s_133 phase_134 all-bindings?48_135 #t #t))"
"((s_136 phase47_137)(syntax-debug-info52_123 s_136 phase47_137 #f #t #f)))))"
"(define-values"
"(1/syntax-shift-phase-level)"
"(lambda(s_138 phase_139)"
"(begin"
"      (if (syntax?$1 s_138) (void) (let-values () (raise-argument-error 'syntax-shift-phase-level \"syntax?\" s_138)))"
"(if(phase? phase_139)"
"(void)"
"(let-values()(raise-argument-error 'syntax-shift-phase-level phase?-string phase_139)))"
"(syntax-shift-phase-level$1 s_138 phase_139))))"
"(define-values"
"(1/syntax-track-origin)"
"(lambda(new-stx_140 old-stx_141 id_142)"
"(let-values((()"
"(begin"
"(if(syntax?$1 new-stx_140)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" new-stx_140)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(syntax?$1 old-stx_141)"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" old-stx_141)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? id_142)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-track-origin \"identifier?\" id_142)))"
"(values))))"
"(let-values(((s_143)(syntax-track-origin$1 new-stx_140 old-stx_141 id_142)))"
"(let-values(((ctx_144)"
"(let-values(((temp72_146) #t))(get-current-expand-context15.1 temp72_146 #t #f #f))))"
"(begin"
"(if ctx_144"
"(let-values()"
"(let-values(((obs_147)(expand-context-observer ctx_144)))"
"(if obs_147"
"(let-values()(let-values()(call-expand-observe obs_147 'track-origin s_143)))"
"(void))))"
"(void))"
" s_143))))))))"
"(define-values"
"(1/read-syntax)"
"(let-values(((read-syntax58_148)"
"(lambda(src54_149 in55_150 src56_151 in57_152)"
"(let-values(((src_153)(if src56_151 src54_149(object-name(current-input-port)))))"
"(let-values(((in_154)(if in57_152 in55_150(current-input-port))))"
"(let-values()"
"(begin"
"(if(input-port? in_154)"
"(void)"
"                            (let-values () (raise-argument-error 'read-syntax \"input-port?\" in_154)))"
"(read-syntax$1 src_153 in_154))))))))"
"(case-lambda"
"(()(read-syntax58_148 #f #f #f #f))"
"((src_155 in55_156)(read-syntax58_148 src_155 in55_156 #t #t))"
"((src54_157)(read-syntax58_148 src54_157 #f #t #f)))))"
"(define-values"
"(1/read-syntax/recursive)"
"(let-values(((read-syntax/recursive70_158)"
"(lambda(src60_159"
" in61_160"
" start62_161"
" readtable63_162"
" graph?64_163"
" src65_164"
" in66_165"
" start67_166"
" readtable68_167"
" graph?69_168)"
"(let-values(((src_169)(if src65_164 src60_159(object-name(current-input-port)))))"
"(let-values(((in_170)(if in66_165 in61_160(current-input-port))))"
"(let-values(((start_171)(if start67_166 start62_161 #f)))"
"(let-values(((readtable_172)(if readtable68_167 readtable63_162(current-readtable))))"
"(let-values(((graph?_173)(if graph?69_168 graph?64_163 #t)))"
"(let-values()"
"(begin"
"(if(input-port? in_170)"
"(void)"
"                                  (let-values () (raise-argument-error 'read-syntax/recursive \"input-port?\" in_170)))"
"(if(let-values(((or-part_174)(char? start_171)))"
"(if or-part_174 or-part_174(not start_171)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c char? #f)\" start_171)))"
"(if(let-values(((or-part_175)(readtable? readtable_172)))"
"(if or-part_175 or-part_175(not readtable_172)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c readtable? #f)\" readtable_172)))"
"(read-syntax/recursive$1 src_169 in_170 start_171 readtable_172 graph?_173)))))))))))"
"(case-lambda"
"(()(read-syntax/recursive70_158 #f #f #f #f #f #f #f #f #f #f))"
"((src_176 in_177 start_178 readtable_179 graph?64_180)"
"(read-syntax/recursive70_158 src_176 in_177 start_178 readtable_179 graph?64_180 #t #t #t #t #t))"
"((src_181 in_182 start_183 readtable63_184)"
"(read-syntax/recursive70_158 src_181 in_182 start_183 readtable63_184 #f #t #t #t #t #f))"
"((src_185 in_186 start62_187)(read-syntax/recursive70_158 src_185 in_186 start62_187 #f #f #t #t #t #f #f))"
"((src_188 in61_189)(read-syntax/recursive70_158 src_188 in61_189 #f #f #f #t #t #f #f #f))"
"((src60_190)(read-syntax/recursive70_158 src60_190 #f #f #f #f #t #f #f #f #f)))))"
"(void)"
"(void)"
"(define-values"
"(1/namespace-attach-module)"
"(let-values(((namespace-attach-module5_1)"
"(lambda(src-namespace3_2 mod-path4_3 dest-namespace1_4 dest-namespace2_5)"
"(let-values(((src-namespace_6) src-namespace3_2))"
"(let-values(((mod-path_7) mod-path4_3))"
"(let-values(((dest-namespace_8)(if dest-namespace2_5 dest-namespace1_4(1/current-namespace))))"
"(let-values()"
"(let-values(((temp22_10) 'namespace-attach-module)"
"((src-namespace23_11) src-namespace_6)"
"((mod-path24_12) mod-path_7)"
"((dest-namespace25_13) dest-namespace_8)"
"((temp26_14) #t))"
"(do-attach-module19.1"
" temp26_14"
" #t"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13)))))))))"
"(case-lambda"
"((src-namespace_15 mod-path_16)(namespace-attach-module5_1 src-namespace_15 mod-path_16 #f #f))"
"((src-namespace_17 mod-path_18 dest-namespace1_19)"
"(namespace-attach-module5_1 src-namespace_17 mod-path_18 dest-namespace1_19 #t)))))"
"(define-values"
"(1/namespace-attach-module-declaration)"
"(let-values(((namespace-attach-module-declaration11_20)"
"(lambda(src-namespace9_21 mod-path10_22 dest-namespace7_23 dest-namespace8_24)"
"(let-values(((src-namespace_25) src-namespace9_21))"
"(let-values(((mod-path_26) mod-path10_22))"
"(let-values(((dest-namespace_27)"
"(if dest-namespace8_24 dest-namespace7_23(1/current-namespace))))"
"(let-values()"
"(let-values(((temp27_29) 'namespace-attach-module-declaration)"
"((src-namespace28_30) src-namespace_25)"
"((mod-path29_31) mod-path_26)"
"((dest-namespace30_32) dest-namespace_27)"
"((temp31_33) #f))"
"(do-attach-module19.1"
" temp31_33"
" #t"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32)))))))))"
"(case-lambda"
"((src-namespace_34 mod-path_35)(namespace-attach-module-declaration11_20 src-namespace_34 mod-path_35 #f #f))"
"((src-namespace_36 mod-path_37 dest-namespace7_38)"
"(namespace-attach-module-declaration11_20 src-namespace_36 mod-path_37 dest-namespace7_38 #t)))))"
"(define-values"
"(do-attach-module19.1)"
"(lambda(attach-instances?13_39 attach-instances?14_40 who15_41 src-namespace16_42 mod-path17_43 dest-namespace18_44)"
"(let-values(((who_45) who15_41))"
"(let-values(((src-namespace_46) src-namespace16_42))"
"(let-values(((mod-path_47) mod-path17_43))"
"(let-values(((dest-namespace_48) dest-namespace18_44))"
"(let-values(((attach-instances?_49)(if attach-instances?14_40 attach-instances?13_39 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? src-namespace_46)"
"(void)"
"                                  (let-values () (raise-argument-error who_45 \"namespace?\" src-namespace_46)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_54)(1/module-path? mod-path_47)))"
"(if or-part_54 or-part_54(1/resolved-module-path? mod-path_47)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_45"
"                                       \"(or/c module-path? resolved-module-path?)\""
" mod-path_47)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? dest-namespace_48)"
"(void)"
"                                      (let-values () (raise-argument-error who_45 \"namespace?\" dest-namespace_48)))"
"(values))))"
"(let-values(((phase_50)(namespace-phase src-namespace_46)))"
"(let-values((()"
"(begin"
"(if(eqv? phase_50(namespace-phase dest-namespace_48))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                             \"source and destination namespace phases do not match\""
"                                             \"source phase\""
" phase_50"
"                                             \"destination phase\""
"(namespace-phase dest-namespace_48))))"
"(values))))"
"(let-values(((todo_51)(make-hasheq)))"
"(let-values(((missing_52)(gensym 'missing)))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_55)"
"(lambda(mpi_56"
" phase_57"
" attach-instances?_58"
" attach-phase_59)"
"(let-values(((mod-name_60)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(1/module-path-index-resolve"
" mpi_56)))))"
"(let-values(((attach-this-instance?_61)"
"(if attach-instances?_58"
"(eqv? phase_57 attach-phase_59)"
" #f)))"
"(let-values(((m-ns_62)"
"(hash-ref"
"(hash-ref"
" todo_51"
" mod-name_60"
" '#hasheqv())"
" phase_57"
" missing_52)))"
"(if(let-values(((or-part_63)"
"(eq? missing_52 m-ns_62)))"
"(if or-part_63"
" or-part_63"
"(if attach-this-instance?_61"
"(not m-ns_62)"
" #f)))"
"(let-values()"
"(let-values(((m_64)"
"(namespace->module"
" src-namespace_46"
" mod-name_60)))"
"(begin"
"(if m_64"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                     \"module not declared (in the source namespace)\""
"                                                                                     \"module name\""
" mod-name_60)))"
"(if(if(module-cross-phase-persistent?"
" m_64)"
"(if(not(label-phase? phase_57))"
"(not(zero-phase? phase_57))"
" #f)"
" #f)"
"(let-values()"
"(loop_55"
" mpi_56"
" 0"
" attach-instances?_58"
" 0))"
"(let-values()"
"(let-values(((already-m_65)"
"(namespace->module"
" dest-namespace_48"
" mod-name_60)))"
"(let-values((()"
"(begin"
"(if(if already-m_65"
"(not"
"(eq?"
" already-m_65"
" m_64))"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                           \"a different declaration is already in the destination namespace\""
"                                                                                                           \"module name\""
" mod-name_60))"
"(void))"
"(values))))"
"(let-values(((m-ns_66"
" already?_67)"
"(if attach-this-instance?_61"
"(let-values()"
"(let-values(((m-ns_68)"
"(let-values(((src-namespace32_70)"
" src-namespace_46)"
"((mod-name33_71)"
" mod-name_60)"
"((phase34_72)"
" phase_57))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace32_70"
" mod-name33_71"
" phase34_72))))"
"(let-values((()"
"(begin"
"(if m-ns_68"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                                 \"module not instantiated (in the source namespace)\""
"                                                                                                                                 \"module name\""
" mod-name_60)))"
"(values))))"
"(let-values(((already-m-ns_69)"
"(if already-m_65"
"(let-values(((dest-namespace35_73)"
" dest-namespace_48)"
"((mod-name36_74)"
" mod-name_60)"
"((phase37_75)"
" phase_57))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace35_73"
" mod-name36_74"
" phase37_75))"
" #f)))"
"(begin"
"(if(if already-m-ns_69"
"(if(not"
"(eq?"
" m-ns_68"
" already-m-ns_69))"
"(not"
"(namespace-same-instance?"
" m-ns_68"
" already-m-ns_69))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                       \"a different instance is already in the destination namespace\""
"                                                                                                                       \"module name\""
" mod-name_60))"
"(void))"
"(values"
" m-ns_68"
"(if already-m-ns_69"
" #t"
" #f)))))))"
"(let-values()"
"(begin"
"(if(if(label-phase?"
" phase_57)"
"(not"
"(let-values(((src-namespace38_76)"
" src-namespace_46)"
"((mod-name39_77)"
" mod-name_60)"
"((phase40_78)"
" phase_57))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace38_76"
" mod-name39_77"
" phase40_78)))"
" #f)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(let-values(((src-namespace41_79)"
" src-namespace_46)"
"((mpi42_80)"
" mpi_56)"
"((phase43_81)"
" phase_57))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace41_79"
" mpi42_80"
" phase43_81)))))"
"(void))"
"(values"
" #f"
"(if already-m_65"
" #t"
" #f)))))))"
"(begin"
"(hash-update!"
" todo_51"
" mod-name_60"
"(lambda(ht_82)"
"(hash-set"
" ht_82"
" phase_57"
" m-ns_66))"
" '#hasheqv())"
"(if already?_67"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_83)"
"(module-requires"
" m_64)))"
"(begin"
"(if(list? lst_83)"
"(void)"
"(let-values()"
"(in-list"
" lst_83)))"
"((letrec-values(((for-loop_84)"
"(lambda(lst_85)"
"(if(pair?"
" lst_85)"
"(let-values(((phase+reqs_86)"
"(unsafe-car"
" lst_85))"
"((rest_87)"
"(unsafe-cdr"
" lst_85)))"
"(let-values((()"
"(let-values(((lst_88)"
"(cdr"
" phase+reqs_86)))"
"(begin"
"(if(list?"
" lst_88)"
"(void)"
"(let-values()"
"(in-list"
" lst_88)))"
"((letrec-values(((for-loop_89)"
"(lambda(lst_90)"
"(if(pair?"
" lst_90)"
"(let-values(((req_91)"
"(unsafe-car"
" lst_90))"
"((rest_92)"
"(unsafe-cdr"
" lst_90)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_55"
"(module-path-index-shift"
" req_91"
"(module-self"
" m_64)"
" mpi_56)"
"(phase+"
" phase_57"
"(car"
" phase+reqs_86))"
" attach-instances?_58"
" attach-phase_59))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_89"
" rest_92)"
"(values))))"
"(values)))))"
" for-loop_89)"
" lst_88)))))"
"(if(not"
" #f)"
"(for-loop_84"
" rest_87)"
"(values))))"
"(values)))))"
" for-loop_84)"
" lst_83)))"
"(void)"
"(let-values(((lst_93)"
"(module-submodule-names"
" m_64)))"
"(begin"
"(if(list? lst_93)"
"(void)"
"(let-values()"
"(in-list"
" lst_93)))"
"((letrec-values(((for-loop_94)"
"(lambda(lst_95)"
"(if(pair?"
" lst_95)"
"(let-values(((submod-name_96)"
"(unsafe-car"
" lst_95))"
"((rest_97)"
"(unsafe-cdr"
" lst_95)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_55"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                                                                                     \".\""
" submod-name_96)"
" mpi_56)"
" #f"
" #f"
" attach-phase_59))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_94"
" rest_97)"
"(values))))"
"(values)))))"
" for-loop_94)"
" lst_93)))"
"(void)"
"(if(module-supermodule-name"
" m_64)"
"(let-values()"
"(loop_55"
"(1/module-path-index-join"
"                                                                                                        '(submod \"..\")"
" mpi_56)"
" #f"
" #f"
" attach-phase_59))"
"(void))))))))))))))"
"(void))))))))"
" loop_55)"
"(1/module-path-index-join"
"(if(1/resolved-module-path? mod-path_47)"
"(resolved-module-path->module-path mod-path_47)"
" mod-path_47)"
" #f)"
" phase_50"
" attach-instances?_49"
" phase_50)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ht_98) todo_51))"
"(begin"
"(if((lambda(ht_99)(hash? ht_99)) ht_98)"
"(void)"
"(let-values()(default-in-hash ht_98)))"
"((letrec-values(((for-loop_100)"
"(lambda(i_101)"
"(if i_101"
"(let-values(((mod-name_102 phases_103)"
"(hash-iterate-key+value"
" ht_98"
" i_101)))"
"(let-values((()"
"(let-values(((ht_104)"
" phases_103))"
"(begin"
"(if((lambda(ht_105)"
"(hash? ht_105))"
" ht_104)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_104)))"
"((letrec-values(((for-loop_106)"
"(lambda(i_107)"
"(if i_107"
"(let-values(((phase_108"
" m-ns_109)"
"(hash-iterate-key+value"
" ht_104"
" i_107)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_110)"
"(namespace->module"
" src-namespace_46"
" mod-name_102)))"
"(begin"
"(let-values(((dest-namespace44_111)"
" dest-namespace_48)"
"((m45_112)"
" m_110)"
"((mod-name46_113)"
" mod-name_102))"
"(declare-module!56.1"
" #f"
" #f"
" dest-namespace44_111"
" m45_112"
" mod-name46_113))"
"(if m-ns_109"
"(let-values()"
"(begin"
"(namespace-record-module-instance-attached!"
" src-namespace_46"
" mod-name_102"
" phase_108)"
"(let-values(((or-part_114)"
"(let-values(((dest-namespace47_115)"
" dest-namespace_48)"
"((mod-name48_116)"
" mod-name_102)"
"((phase49_117)"
" phase_108))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace47_115"
" mod-name48_116"
" phase49_117))))"
"(if or-part_114"
" or-part_114"
"(namespace-install-module-namespace!"
" dest-namespace_48"
" mod-name_102"
" phase_108"
" m_110"
" m-ns_109)))))"
"(void)))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_106"
"(hash-iterate-next"
" ht_104"
" i_107))"
"(values))))"
"(values)))))"
" for-loop_106)"
"(hash-iterate-first"
" ht_104))))))"
"(if(not #f)"
"(for-loop_100"
"(hash-iterate-next ht_98 i_101))"
"(values))))"
"(values)))))"
" for-loop_100)"
"(hash-iterate-first ht_98))))"
"(values))))"
"(let-values((()(begin(void)(values))))"
"(let-values(((mnr_53)(1/current-module-name-resolver)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" dest-namespace_48)"
"(let-values()"
"(begin"
"(let-values(((ht_118) todo_51))"
"(begin"
"(if((lambda(ht_119)(hash? ht_119)) ht_118)"
"(void)"
"(let-values()(default-in-hash-keys ht_118)))"
"((letrec-values(((for-loop_120)"
"(lambda(i_121)"
"(if i_121"
"(let-values(((mod-name_122)"
"(hash-iterate-key ht_118 i_121)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(mnr_53"
" mod-name_122"
" src-namespace_46))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_120"
"(hash-iterate-next ht_118 i_121))"
"(values))))"
"(values)))))"
" for-loop_120)"
"(hash-iterate-first ht_118))))"
"(void)))))))))))))))))))))))"
"(void)"
"(void)"
"(define-values"
"(1/make-empty-namespace)"
"(lambda()"
"(let-values(((current-ns_1)(1/current-namespace)))"
"(let-values(((phase_2)(namespace-phase current-ns_1)))"
"(let-values(((ns_3)(namespace->namespace-at-phase(make-namespace) phase_2)))"
"(begin"
"(1/namespace-attach-module current-ns_1 ''#%kernel ns_3)"
"(namespace-primitive-module-visit! ns_3 '#%kernel)"
" ns_3))))))"
"(define-values"
"(1/namespace-syntax-introduce)"
"(let-values(((namespace-syntax-introduce4_4)"
"(lambda(s3_5 ns1_6 ns2_7)"
"(let-values(((s_8) s3_5))"
"(let-values(((ns_9)(if ns2_7 ns1_6(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'namespace-syntax-introduce \"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_9)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-syntax-introduce \"namespace?\" ns_9)))"
"(values))))"
"(let-values(((root-ctx_10)(namespace-get-root-expand-ctx ns_9)))"
"(let-values(((post-scope_11)(root-expand-context-post-expansion-scope root-ctx_10)))"
"(let-values(((other-namespace-scopes_12)"
"(let-values(((ht_15)"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx root-ctx_10)"
"(namespace-phase ns_9))))"
"(begin"
"(if((lambda(ht_16)(if(hash? ht_16)(immutable? ht_16) #f)) ht_15)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(i_18)"
"(if i_18"
"(let-values(((sc_19)"
"(unsafe-immutable-hash-iterate-key"
" ht_15"
" i_18)))"
"(let-values(((post-guard-var_20)"
"(lambda() #t)))"
"(let-values()"
"(if(equal? sc_19 post-scope_11)"
"(if(post-guard-var_20)"
"(for-loop_17"
"(unsafe-immutable-hash-iterate-next"
" ht_15"
" i_18))"
" null)"
"(let-values()"
"(let-values(((elem_21)"
"(let-values()"
"(let-values()"
" sc_19))))"
"(let-values(((result_22)"
"(if(post-guard-var_20)"
"(for-loop_17"
"(unsafe-immutable-hash-iterate-next"
" ht_15"
" i_18))"
" null)))"
"(cons elem_21 result_22))))))))"
" null))))"
" for-loop_17)"
"(unsafe-immutable-hash-iterate-first ht_15))))))"
"(let-values(((add-ns-scopes_13)"
"(lambda(s_23)"
"(let-values(((temp78_25)"
"(add-scopes"
"(push-scope s_23 post-scope_11)"
" other-namespace-scopes_12))"
"((temp79_26)"
"(root-expand-context-all-scopes-stx root-ctx_10))"
"((temp80_27)"
"(let-values(((or-part_29)"
"(namespace-declaration-inspector ns_9)))"
"(if or-part_29 or-part_29(current-code-inspector))))"
"((temp81_28) #t))"
"(syntax-transfer-shifts39.1"
" temp81_28"
" #t"
" temp78_25"
" temp79_26"
" temp80_27"
" #t)))))"
"(let-values(((maybe-module-id_14)"
"(if(pair?(1/syntax-e s_8))"
"(if(identifier?(car(1/syntax-e s_8)))"
"(add-ns-scopes_13(car(1/syntax-e s_8)))"
" #f)"
" #f)))"
"(if(if maybe-module-id_14"
"(1/free-identifier=?"
" maybe-module-id_14"
"(1/namespace-module-identifier ns_9))"
" #f)"
"(let-values()"
"(1/datum->syntax"
" s_8"
"(cons maybe-module-id_14(cdr(1/syntax-e s_8)))"
" s_8"
" s_8))"
"(let-values()(add-ns-scopes_13 s_8))))))))))))))))"
"(case-lambda"
"((s_30)(namespace-syntax-introduce4_4 s_30 #f #f))"
"((s_31 ns1_32)(namespace-syntax-introduce4_4 s_31 ns1_32 #t)))))"
"(define-values"
"(1/namespace-module-identifier)"
"(let-values(((namespace-module-identifier8_33)"
"(lambda(where6_34 where7_35)"
"(let-values(((where_36)(if where7_35 where6_34(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_37)(1/namespace? where_36)))"
"(if or-part_37 or-part_37(phase? where_36)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-module-identifier"
"                             (string-append \"(or/c namespace? \" phase?-string \")\")"
" where_36)))"
"(1/datum->syntax"
"(1/syntax-shift-phase-level"
" core-stx"
"(if(1/namespace? where_36)(namespace-phase where_36) where_36))"
" 'module)))))))"
"(case-lambda"
"(()(namespace-module-identifier8_33 #f #f))"
"((where6_38)(namespace-module-identifier8_33 where6_38 #t)))))"
"(define-values"
"(1/namespace-symbol->identifier)"
"(lambda(sym_39)"
"(begin"
"      (if (symbol? sym_39) (void) (let-values () (raise-argument-error 'namespace-symbol->identifier \"symbol?\" sym_39)))"
"(1/namespace-syntax-introduce(1/datum->syntax #f sym_39)))))"
"(define-values"
"(do-namespace-require23.1)"
"(lambda(copy-variable-as-constant?13_40"
" copy-variable-as-constant?18_41"
" copy-variable-phase-level12_42"
" copy-variable-phase-level17_43"
" run?10_44"
" run?15_45"
" skip-variable-phase-level14_46"
" skip-variable-phase-level19_47"
" visit?11_48"
" visit?16_49"
" who20_50"
" req21_51"
" ns22_52)"
"(let-values(((run?_53)(if run?15_45 run?10_44 #t)))"
"(let-values(((visit?_54)(if visit?16_49 visit?11_48 #f)))"
"(let-values(((who_55) who20_50))"
"(let-values(((req_56) req21_51))"
"(let-values(((ns_57) ns22_52))"
"(let-values(((copy-variable-phase-level_58)"
"(if copy-variable-phase-level17_43 copy-variable-phase-level12_42 #f)))"
"(let-values(((copy-variable-as-constant?_59)"
"(if copy-variable-as-constant?18_41 copy-variable-as-constant?13_40 #f)))"
"(let-values(((skip-variable-phase-level_60)"
"(if skip-variable-phase-level19_47 skip-variable-phase-level14_46 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_57)"
"(void)"
"                                        (let-values () (raise-argument-error who_55 \"namespace?\" ns_57)))"
"(values))))"
"(let-values(((ctx-stx_61)"
"(add-scopes"
" empty-syntax"
"(root-expand-context-module-scopes(namespace-get-root-expand-ctx ns_57)))))"
"(if(let-values(((or-part_62)(1/module-path-index? req_56)))"
"(if or-part_62 or-part_62(1/module-path? req_56)))"
"(let-values()"
"(let-values(((temp82_64)"
"(if(1/module-path-index? req_56)"
" req_56"
"(1/module-path-index-join req_56 #f)))"
"((temp83_65) #f)"
"((temp84_66) #f)"
"((ctx-stx85_67) ctx-stx_61)"
"((ns86_68) ns_57)"
"((run?87_69) run?_53)"
"((visit?88_70) visit?_54)"
"((temp89_71)(namespace-phase ns_57))"
"((temp90_72)(namespace-phase ns_57))"
"((copy-variable-phase-level91_73) copy-variable-phase-level_58)"
"((copy-variable-as-constant?92_74) copy-variable-as-constant?_59)"
"((skip-variable-phase-level93_75) skip-variable-phase-level_60)"
"((who94_76) who_55))"
"(perform-require!74.1"
" #f"
" #f"
" #f"
" #f"
" copy-variable-as-constant?92_74"
" #t"
" copy-variable-phase-level91_73"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp89_71"
" #f"
" #f"
" temp90_72"
" run?87_69"
" #t"
" skip-variable-phase-level93_75"
" #t"
" visit?88_70"
" #t"
" who94_76"
" temp82_64"
" temp83_65"
" temp84_66"
" ctx-stx85_67"
" ns86_68)))"
"(let-values()"
"(let-values(((run?95_78) run?_53)"
"((visit?96_79) visit?_54)"
"((temp97_80)(list(1/datum->syntax ctx-stx_61 req_56)))"
"((temp98_81) #f)"
"((ns99_82) ns_57)"
"((temp100_83)(namespace-phase ns_57))"
"((temp101_84)(make-requires+provides #f))"
"((skip-variable-phase-level102_85) skip-variable-phase-level_60)"
"((who103_86) who_55))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" run?95_78"
" #t"
" #f"
" #f"
" skip-variable-phase-level102_85"
" #t"
" visit?96_79"
" #t"
" who103_86"
" temp97_80"
" temp98_81"
" ns99_82"
" temp100_83"
" temp101_84)))))))))))))))))"
"(define-values"
"(1/namespace-require)"
"(let-values(((namespace-require29_131)"
"(lambda(req28_132 ns26_133 ns27_134)"
"(let-values(((req_135) req28_132))"
"(let-values(((ns_136)(if ns27_134 ns26_133(1/current-namespace))))"
"(let-values()"
"(let-values(((temp104_137) 'namespace-require)((req105_138) req_135)((ns106_139) ns_136))"
"(do-namespace-require23.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp104_137"
" req105_138"
" ns106_139))))))))"
"(case-lambda"
"((req_140)(namespace-require29_131 req_140 #f #f))"
"((req_141 ns26_142)(namespace-require29_131 req_141 ns26_142 #t)))))"
"(define-values"
"(1/namespace-require/expansion-time)"
"(let-values(((namespace-require/expansion-time34_143)"
"(lambda(req33_144 ns31_145 ns32_146)"
"(let-values(((req_147) req33_144))"
"(let-values(((ns_148)(if ns32_146 ns31_145(1/current-namespace))))"
"(let-values()"
"(let-values(((temp107_150) #f)"
"((temp108_151) #t)"
"((temp109_152) 'namespace-require/expansion-time)"
"((req110_153) req_147)"
"((ns111_154) ns_148))"
"(do-namespace-require23.1"
" #f"
" #f"
" #f"
" #f"
" temp107_150"
" #t"
" #f"
" #f"
" temp108_151"
" #t"
" temp109_152"
" req110_153"
" ns111_154))))))))"
"(case-lambda"
"((req_155)(namespace-require/expansion-time34_143 req_155 #f #f))"
"((req_156 ns31_157)(namespace-require/expansion-time34_143 req_156 ns31_157 #t)))))"
"(define-values"
"(1/namespace-require/constant)"
"(let-values(((namespace-require/constant39_158)"
"(lambda(req38_159 ns36_160 ns37_161)"
"(let-values(((req_162) req38_159))"
"(let-values(((ns_163)(if ns37_161 ns36_160(1/current-namespace))))"
"(let-values()"
"(let-values(((temp112_165) 'namespace-require/constant)"
"((req113_166) req_162)"
"((ns114_167) ns_163)"
"((temp115_168) 0)"
"((temp116_169) #t))"
"(do-namespace-require23.1"
" temp116_169"
" #t"
" temp115_168"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp112_165"
" req113_166"
" ns114_167))))))))"
"(case-lambda"
"((req_170)(namespace-require/constant39_158 req_170 #f #f))"
"((req_171 ns36_172)(namespace-require/constant39_158 req_171 ns36_172 #t)))))"
"(define-values"
"(1/namespace-require/copy)"
"(let-values(((namespace-require/copy44_173)"
"(lambda(req43_174 ns41_175 ns42_176)"
"(let-values(((req_177) req43_174))"
"(let-values(((ns_178)(if ns42_176 ns41_175(1/current-namespace))))"
"(let-values()"
"(let-values(((temp117_180) 'namespace-require/copy)"
"((req118_181) req_177)"
"((ns119_182) ns_178)"
"((temp120_183) 0)"
"((temp121_184) 0))"
"(do-namespace-require23.1"
" #f"
" #f"
" temp120_183"
" #t"
" #f"
" #f"
" temp121_184"
" #t"
" #f"
" #f"
" temp117_180"
" req118_181"
" ns119_182))))))))"
"(case-lambda"
"((req_185)(namespace-require/copy44_173 req_185 #f #f))"
"((req_186 ns41_187)(namespace-require/copy44_173 req_186 ns41_187 #t)))))"
"(define-values"
"(1/namespace-variable-value)"
"(let-values(((namespace-variable-value53_188)"
"(lambda(sym52_189"
" use-mapping?46_190"
" failure-thunk47_191"
" ns48_192"
" use-mapping?49_193"
" failure-thunk50_194"
" ns51_195)"
"(let-values(((sym_196) sym52_189))"
"(let-values(((use-mapping?_197)(if use-mapping?49_193 use-mapping?46_190 #f)))"
"(let-values(((failure-thunk_198)(if failure-thunk50_194 failure-thunk47_191 #f)))"
"(let-values(((ns_199)(if ns51_195 ns48_192(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_196)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_196)))"
"(if(let-values(((or-part_200)(not failure-thunk_198)))"
"(if or-part_200"
" or-part_200"
"(if(procedure? failure-thunk_198)"
"(procedure-arity-includes? failure-thunk_198 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-variable-value"
"                                   \"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_198)))"
"(if(1/namespace? ns_199)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_199)))"
"((call/ec"
"(lambda(escape_201)"
"(let-values(((var-ns_202 var-phase-level_203 var-sym_204)"
"(if use-mapping?_197"
"(let-values()"
"(let-values(((id_206)(1/datum->syntax #f sym_196)))"
"(let-values(((b_207)"
"(resolve+shift/extra-inspector"
"(1/namespace-syntax-introduce id_206 ns_199)"
"(namespace-phase ns_199)"
" ns_199)))"
"(let-values((()"
"(begin"
"(if b_207"
"(let-values()"
"(namespace-visit-available-modules! ns_199))"
"(void))"
"(values))))"
"(let-values(((v_208 primitive?_209 extra-inspector_210)"
"(if b_207"
"(let-values(((b122_211) b_207)"
"((empty-env123_212) empty-env)"
"((null124_213) null)"
"((ns125_214) ns_199)"
"((temp126_215)"
"(namespace-phase ns_199))"
"((id127_216) id_206))"
"(binding-lookup48.1"
" #f"
" #f"
" #f"
" #f"
" b122_211"
" empty-env123_212"
" null124_213"
" ns125_214"
" temp126_215"
" id127_216))"
"(values variable #f #f))))"
"(begin"
"(if(variable? v_208)"
"(void)"
"(let-values()"
"(escape_201"
"(let-values(((or-part_217) failure-thunk_198))"
"(if or-part_217"
" or-part_217"
"(lambda()"
"(raise"
"(make-exn:fail:syntax$1"
"(format"
"(string-append"
"                                                                             \"namespace-variable-value: bound to syntax\\n\""
"                                                                             \"  in: ~s\")"
" sym_196)"
"(current-continuation-marks)"
" null))))))))"
"(if(module-binding? b_207)"
"(values"
"(if(top-level-module-path-index?"
"(module-binding-module b_207))"
" ns_199"
"(let-values(((ns128_219) ns_199)"
"((temp129_220)"
"(module-binding-module b_207))"
"((temp130_221)"
"(phase-"
"(namespace-phase ns_199)"
"(module-binding-phase b_207)))"
"((temp131_222) #t))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp131_222"
" #t"
" #f"
" #f"
" ns128_219"
" temp129_220"
" temp130_221)))"
"(module-binding-phase b_207)"
"(module-binding-sym b_207))"
"(values ns_199(namespace-phase ns_199) sym_196))))))))"
"(let-values()(values ns_199(namespace-phase ns_199) sym_196)))))"
"(let-values(((val_205)"
"(namespace-get-variable"
" var-ns_202"
" var-phase-level_203"
" var-sym_204"
"(lambda()"
"(escape_201"
"(let-values(((or-part_223) failure-thunk_198))"
"(if or-part_223"
" or-part_223"
"(raise"
"(exn:fail:contract:variable"
"(format"
"(string-append"
"                                                              \"namespace-variable-value: given name is not defined\\n\""
"                                                              \"  name: ~s\")"
" sym_196)"
"(current-continuation-marks)"
" sym_196)))))))))"
"(lambda() val_205)))))))))))))))"
"(case-lambda"
"((sym_224)(namespace-variable-value53_188 sym_224 #f #f #f #f #f #f))"
"((sym_225 use-mapping?_226 failure-thunk_227 ns48_228)"
"(namespace-variable-value53_188 sym_225 use-mapping?_226 failure-thunk_227 ns48_228 #t #t #t))"
"((sym_229 use-mapping?_230 failure-thunk47_231)"
"(namespace-variable-value53_188 sym_229 use-mapping?_230 failure-thunk47_231 #f #t #t #f))"
"((sym_232 use-mapping?46_233)(namespace-variable-value53_188 sym_232 use-mapping?46_233 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-set-variable-value!)"
"(let-values(((namespace-set-variable-value!63_234)"
"(lambda(sym61_235"
" val62_236"
" map?55_237"
" ns56_238"
" as-constant?57_239"
" map?58_240"
" ns59_241"
" as-constant?60_242)"
"(let-values(((sym_243) sym61_235))"
"(let-values(((val_244) val62_236))"
"(let-values(((map?_245)(if map?58_240 map?55_237 #f)))"
"(let-values(((ns_246)(if ns59_241 ns56_238(1/current-namespace))))"
"(let-values(((as-constant?_247)(if as-constant?60_242 as-constant?57_239 #f)))"
"(let-values()"
"(begin"
"(if(symbol? sym_243)"
"(void)"
"                                  (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_243)))"
"(if(1/namespace? ns_246)"
"(void)"
"                                  (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_246)))"
"(namespace-set-variable!"
" ns_246"
"(namespace-phase ns_246)"
" sym_243"
" val_244"
" as-constant?_247)"
"(if map?_245"
"(let-values()"
"(let-values((()"
"(begin"
"(namespace-unset-transformer!"
" ns_246"
"(namespace-phase ns_246)"
" sym_243)"
"(values))))"
"(let-values(((id_248)(1/datum->syntax #f sym_243)))"
"(let-values(((temp132_249)(1/namespace-syntax-introduce id_248 ns_246))"
"((temp133_250)"
"(let-values(((temp135_252)(namespace-mpi ns_246))"
"((temp136_253)(namespace-phase ns_246))"
"((sym137_254) sym_243))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp135_252"
" temp136_253"
" sym137_254)))"
"((temp134_251)(namespace-phase ns_246)))"
"(add-binding!17.1 #f #f #f #f temp132_249 temp133_250 temp134_251)))))"
"(void))))))))))))"
"(case-lambda"
"((sym_255 val_256)(namespace-set-variable-value!63_234 sym_255 val_256 #f #f #f #f #f #f))"
"((sym_257 val_258 map?_259 ns_260 as-constant?57_261)"
"(namespace-set-variable-value!63_234 sym_257 val_258 map?_259 ns_260 as-constant?57_261 #t #t #t))"
"((sym_262 val_263 map?_264 ns56_265)"
"(namespace-set-variable-value!63_234 sym_262 val_263 map?_264 ns56_265 #f #t #t #f))"
"((sym_266 val_267 map?55_268)(namespace-set-variable-value!63_234 sym_266 val_267 map?55_268 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-undefine-variable!)"
"(let-values(((namespace-undefine-variable!68_269)"
"(lambda(sym67_270 ns65_271 ns66_272)"
"(let-values(((sym_273) sym67_270))"
"(let-values(((ns_274)(if ns66_272 ns65_271(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_273)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_273)))"
"(if(1/namespace? ns_274)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_274)))"
"(namespace-unset-variable! ns_274(namespace-phase ns_274) sym_273))))))))"
"(case-lambda"
"((sym_275)(namespace-undefine-variable!68_269 sym_275 #f #f))"
"((sym_276 ns65_277)(namespace-undefine-variable!68_269 sym_276 ns65_277 #t)))))"
"(define-values"
"(1/namespace-mapped-symbols)"
"(let-values(((namespace-mapped-symbols72_278)"
"(lambda(ns70_279 ns71_280)"
"(let-values(((ns_281)(if ns71_280 ns70_279(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_281)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-mapped-symbols \"namespace?\" ns_281)))"
"(set->list"
"(set-union"
"(syntax-mapped-names"
"(root-expand-context-all-scopes-stx(namespace-get-root-expand-ctx ns_281))"
"(namespace-phase ns_281))"
"(list->set(1/instance-variable-names(namespace->instance ns_281 0)))))))))))"
"(case-lambda"
"(()(namespace-mapped-symbols72_278 #f #f))"
"((ns70_282)(namespace-mapped-symbols72_278 ns70_282 #t)))))"
"(define-values"
"(1/namespace-base-phase)"
"(let-values(((namespace-base-phase76_283)"
"(lambda(ns74_284 ns75_285)"
"(let-values(((ns_286)(if ns75_285 ns74_284(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_286)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-base-phase \"namespace?\" ns_286)))"
"(namespace-phase ns_286)))))))"
"(case-lambda(()(namespace-base-phase76_283 #f #f))((ns74_287)(namespace-base-phase76_283 ns74_287 #t)))))"
"(void)"
"(void)"
"(define-values"
"(1/eval)"
"(let-values(((eval6_11)"
"(lambda(s5_12 ns1_13 compile2_14 ns3_15 compile4_16)"
"(let-values(((s_17) s5_12))"
"(let-values(((ns_18)(if ns3_15 ns1_13(1/current-namespace))))"
"(let-values(((compile_19)"
"(if compile4_16 compile2_14(lambda(s_20 ns_21)(1/compile s_20 ns_21 #f)))))"
"(let-values()"
"(if(let-values(((or-part_22)(compiled-in-memory? s_17)))"
"(if or-part_22"
" or-part_22"
"(let-values(((or-part_23)(1/linklet-directory? s_17)))"
"(if or-part_23 or-part_23(1/linklet-bundle? s_17)))))"
"(let-values()(eval-compiled s_17 ns_18))"
"(if(if(syntax?$1 s_17)"
"(let-values(((or-part_24)(compiled-in-memory?(1/syntax-e s_17))))"
"(if or-part_24"
" or-part_24"
"(let-values(((or-part_25)(1/linklet-directory?(1/syntax-e s_17))))"
"(if or-part_25 or-part_25(1/linklet-bundle?(1/syntax-e s_17))))))"
" #f)"
"(let-values()(eval-compiled(1/syntax->datum s_17) ns_18))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:57:4_26) per-top-level66.1)"
"((s76_27) s_17)"
"((ns77_28) ns_18)"
"((temp78_29)"
"(lambda(s_30 ns_31 tail?_32)"
"(eval-compiled(compile_19 s_30 ns_31) ns_31 tail?_32))))"
"(per-top-level64.1 #f #f #f #f #f #f temp78_29 #f #f s76_27 ns77_28))))))))))))"
"(case-lambda"
"((s_33)(eval6_11 s_33 #f #f #f #f))"
"((s_34 ns_35 compile2_36)(eval6_11 s_34 ns_35 compile2_36 #t #t))"
"((s_37 ns1_38)(eval6_11 s_37 ns1_38 #f #t #f)))))"
"(define-values"
"(eval-compiled)"
"(let-values(((eval-compiled12_39)"
"(lambda(c10_40 ns11_41 as-tail?8_42 as-tail?9_43)"
"(let-values(((c_44) c10_40))"
"(let-values(((ns_45) ns11_41))"
"(let-values(((as-tail?_46)(if as-tail?9_43 as-tail?8_42 #t)))"
"(let-values()"
"(if(1/compiled-module-expression? c_44)"
"(let-values()"
"(let-values(((c79_48) c_44)((ns80_49) ns_45))"
"(eval-module8.1 ns80_49 #t #f #f #f #f c79_48)))"
"(let-values()(eval-top c_44 ns_45 eval-compiled as-tail?_46))))))))))"
"(case-lambda"
"((c_50 ns_51)(eval-compiled12_39 c_50 ns_51 #f #f))"
"((c_52 ns_53 as-tail?8_54)(eval-compiled12_39 c_52 ns_53 as-tail?8_54 #t)))))"
"(define-values"
"(1/compile)"
"(let-values(((compile23_55)"
"(lambda(s22_56"
" ns14_57"
" serializable?15_58"
" expand16_59"
" to-source?17_60"
" ns18_61"
" serializable?19_62"
" expand20_63"
" to-source?21_64)"
"(let-values(((s_65) s22_56))"
"(let-values(((ns_66)(if ns18_61 ns14_57(1/current-namespace))))"
"(let-values(((serializable?_67)(if serializable?19_62 serializable?15_58 #t)))"
"(let-values(((expand_68)(if expand20_63 expand16_59 expand$1)))"
"(let-values(((to-source?_69)(if to-source?21_64 to-source?17_60 #f)))"
"(let-values()"
"(let-values(((cs_70)"
"(if(1/compiled-expression? s_65)"
"(let-values()(list s_65))"
"(if(if(syntax?$1 s_65)(1/compiled-expression?(1/syntax-e s_65)) #f)"
"(let-values()(list(1/syntax-e s_65)))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:84:6_71) per-top-level66.1)"
"((s81_72) s_65)"
"((ns82_73) ns_66)"
"((temp83_74)"
"(lambda(s_76 ns_77 as-tail?_78)"
"(list"
"(compile-single$1"
" s_76"
" ns_77"
" expand_68"
" serializable?_67"
" to-source?_69))))"
"((append84_75) append))"
"(per-top-level64.1"
" append84_75"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp83_74"
" #f"
" #f"
" s81_72"
" ns82_73)))))))"
"(if(if(= 1(length cs_70))(not(compiled-multiple-top?(car cs_70))) #f)"
"(car cs_70)"
"(let-values(((cs85_80) cs_70)"
"((to-source?86_81) to-source?_69)"
"((serializable?87_82) serializable?_67)"
"((ns88_83) ns_66))"
"(compiled-tops->compiled-top8.1"
" serializable?87_82"
" #t"
" ns88_83"
" #t"
" to-source?86_81"
" #t"
" cs85_80)))))))))))))"
"(case-lambda"
"((s_84)(compile23_55 s_84 #f #f #f #f #f #f #f #f))"
"((s_85 ns_86 serializable?_87 expand_88 to-source?17_89)"
"(compile23_55 s_85 ns_86 serializable?_87 expand_88 to-source?17_89 #t #t #t #t))"
"((s_90 ns_91 serializable?_92 expand16_93)(compile23_55 s_90 ns_91 serializable?_92 expand16_93 #f #t #t #t #f))"
"((s_94 ns_95 serializable?15_96)(compile23_55 s_94 ns_95 serializable?15_96 #f #f #t #t #f #f))"
"((s_97 ns14_98)(compile23_55 s_97 ns14_98 #f #f #f #t #f #f #f)))))"
"(define-values"
"(compile-to-linklets)"
"(let-values(((compile-to-linklets28_99)"
"(lambda(s27_100 ns25_101 ns26_102)"
"(let-values(((s_103) s27_100))"
"(let-values(((ns_104)(if ns26_102 ns25_101(1/current-namespace))))"
"(let-values()(1/compile s_103 ns_104 #t expand$1 #t)))))))"
"(case-lambda"
"((s_105)(compile-to-linklets28_99 s_105 #f #f))"
"((s_106 ns25_107)(compile-to-linklets28_99 s_106 ns25_107 #t)))))"
"(define-values"
"(struct:lifted-parsed-begin"
" lifted-parsed-begin30.1"
" lifted-parsed-begin?"
" lifted-parsed-begin-seq"
" lifted-parsed-begin-last)"
"(let-values(((struct:_108 make-_109 ?_110 -ref_111 -set!_112)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'lifted-parsed-begin"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'lifted-parsed-begin)))))"
"(values"
" struct:_108"
" make-_109"
" ?_110"
"(make-struct-field-accessor -ref_111 0 'seq)"
"(make-struct-field-accessor -ref_111 1 'last))))"
"(define-values"
"(compile-single$1)"
"(lambda(s_133 ns_134 expand_135 serializable?_136 to-source?_137)"
"(let-values(((exp-s_138)(expand_135 s_133 ns_134 #f #t serializable?_136)))"
"((letrec-values(((loop_139)"
"(lambda(exp-s_140)"
"(if(parsed-module? exp-s_140)"
"(let-values()"
"(let-values(((exp-s90_142) exp-s_140)"
"((temp91_143)"
"(let-values(((ns94_147) ns_134))"
"(make-compile-context14.1 #f #f #f #f #f #f ns94_147 #t #f #f #f #f)))"
"((serializable?92_144) serializable?_136)"
"((to-source?93_145) to-source?_137))"
"(compile-module13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" serializable?92_144"
" #t"
" to-source?93_145"
" #t"
" exp-s90_142"
" temp91_143)))"
"(if(lifted-parsed-begin? exp-s_140)"
"(let-values()"
"(let-values(((temp95_149)"
"(let-values(((lst_151)"
"(append"
"(lifted-parsed-begin-seq exp-s_140)"
"(list(lifted-parsed-begin-last exp-s_140)))))"
"(begin"
"(if(list? lst_151)(void)(let-values()(in-list lst_151)))"
"((letrec-values(((for-loop_152)"
"(lambda(lst_153)"
"(if(pair? lst_153)"
"(let-values(((e_154)(unsafe-car lst_153))"
"((rest_155)(unsafe-cdr lst_153)))"
"(let-values(((post-guard-var_156)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_157)"
"(let-values()"
"(let-values()"
"(loop_139 e_154)))))"
"(let-values(((result_158)"
"(if(post-guard-var_156)"
"(for-loop_152 rest_155)"
" null)))"
"(cons elem_157 result_158))))))"
" null))))"
" for-loop_152)"
" lst_151))))"
"((to-source?96_150) to-source?_137))"
"(compiled-tops->compiled-top8.1 #f #f #f #f to-source?96_150 #t temp95_149)))"
"(let-values()"
"(let-values(((exp-s97_160) exp-s_140)"
"((temp98_161)"
"(let-values(((ns101_165) ns_134))"
"(make-compile-context14.1 #f #f #f #f #f #f ns101_165 #t #f #f #f #f)))"
"((serializable?99_162) serializable?_136)"
"((to-source?100_163) to-source?_137))"
"(compile-top9.1"
" serializable?99_162"
" #t"
" #f"
" #f"
" to-source?100_163"
" #t"
" exp-s97_160"
" temp98_161))))))))"
" loop_139)"
" exp-s_138))))"
"(define-values"
"(expand$1)"
"(let-values(((expand40_166)"
"(lambda(s39_167"
" ns31_168"
" log-expand?32_169"
" to-parsed?33_170"
" serializable?34_171"
" ns35_172"
" log-expand?36_173"
" to-parsed?37_174"
" serializable?38_175)"
"(let-values(((s_176) s39_167))"
"(let-values(((ns_177)(if ns35_172 ns31_168(1/current-namespace))))"
"(let-values(((log-expand?_178)(if log-expand?36_173 log-expand?32_169 #f)))"
"(let-values(((to-parsed?_179)(if to-parsed?37_174 to-parsed?33_170 #f)))"
"(let-values(((serializable?_180)(if serializable?38_175 serializable?34_171 #f)))"
"(let-values()"
"(begin"
"(if log-expand?_178(let-values()(log-expand-start))(void))"
"(let-values(((...pander/eval/main.rkt:134:2_181) per-top-level66.1)"
"((s102_182) s_176)"
"((ns103_183) ns_177)"
"((temp104_184)"
"(lambda(s_187 ns_188 as-tail?_189)"
"(expand-single s_187 ns_188 to-parsed?_179 serializable?_180)))"
"((cons105_185) cons)"
"((re-pair106_186) re-pair))"
"(per-top-level64.1"
" cons105_185"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp104_184"
" re-pair106_186"
" #t"
" s102_182"
" ns103_183))))))))))))"
"(case-lambda"
"((s_190)(expand40_166 s_190 #f #f #f #f #f #f #f #f))"
"((s_191 ns_192 log-expand?_193 to-parsed?_194 serializable?34_195)"
"(expand40_166 s_191 ns_192 log-expand?_193 to-parsed?_194 serializable?34_195 #t #t #t #t))"
"((s_196 ns_197 log-expand?_198 to-parsed?33_199)"
"(expand40_166 s_196 ns_197 log-expand?_198 to-parsed?33_199 #f #t #t #t #f))"
"((s_200 ns_201 log-expand?32_202)(expand40_166 s_200 ns_201 log-expand?32_202 #f #f #t #t #f #f))"
"((s_203 ns31_204)(expand40_166 s_203 ns31_204 #f #f #f #t #f #f #f)))))"
"(define-values"
"(expand-single)"
"(lambda(s_205 ns_206 to-parsed?_207 serializable?_208)"
"(let-values(((require-lifts_209 lifts_210 exp-s_211)"
"(expand-capturing-lifts"
" s_205"
"(let-values(((ns107_213) ns_206)"
"((to-parsed?108_214) to-parsed?_207)"
"((serializable?109_215) serializable?_208))"
"(make-expand-context8.1 serializable?109_215 #t to-parsed?108_214 #t ns107_213)))))"
"(if(if(null? require-lifts_209)(null? lifts_210) #f)"
"(let-values() exp-s_211)"
"(if to-parsed?_207"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:147:4_216) wrap-lifts-as-lifted-parsed-begin75.1)"
"((require-lifts110_217) require-lifts_209)"
"((lifts111_218) lifts_210)"
"((exp-s112_219) exp-s_211)"
"((s113_220) s_205)"
"((temp114_221)"
"(lambda(form_222)(expand-single form_222 ns_206 to-parsed?_207 serializable?_208))))"
"(wrap-lifts-as-lifted-parsed-begin73.1"
" temp114_221"
" require-lifts110_217"
" lifts111_218"
" exp-s112_219"
" s113_220)))"
"(let-values()"
"(let-values(((temp115_224)(append require-lifts_209 lifts_210))"
"((temp116_225)"
"(lambda(form_229)(expand-single form_229 ns_206 to-parsed?_207 serializable?_208)))"
"((exp-s117_226) exp-s_211)"
"((s118_227) s_205)"
"((temp119_228)(namespace-phase ns_206)))"
"(wrap-lifts-as-begin15.1 temp116_225 #t temp115_224 exp-s117_226 s118_227 temp119_228))))))))"
"(define-values"
"(expand-once$1)"
"(let-values(((expand-once45_230)"
"(lambda(s44_231 ns42_232 ns43_233)"
"(let-values(((s_234) s44_231))"
"(let-values(((ns_235)(if ns43_233 ns42_232(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:160:2_236) per-top-level66.1)"
"((s120_237) s_234)"
"((ns121_238) ns_235)"
"((temp122_239)"
"(lambda(s_243 ns_244 as-tail?_245)(expand-single-once s_243 ns_244)))"
"((cons123_240) cons)"
"((re-pair124_241) re-pair)"
"((temp125_242) #t))"
"(per-top-level64.1"
" cons123_240"
" #t"
" temp125_242"
" #t"
" #f"
" #f"
" temp122_239"
" re-pair124_241"
" #t"
" s120_237"
" ns121_238))))))))"
"(case-lambda((s_246)(expand-once45_230 s_246 #f #f))((s_247 ns42_248)(expand-once45_230 s_247 ns42_248 #t)))))"
"(define-values"
"(expand-single-once)"
"(lambda(s_249 ns_250)"
"(let-values(((require-lifts_251 lifts_252 exp-s_253)"
"(expand-capturing-lifts"
" s_249"
"(let-values(((v_254)"
"(let-values(((ns126_255) ns_250))(make-expand-context8.1 #f #f #f #f ns126_255))))"
"(let-values(((the-struct_256) v_254))"
"(if(expand-context/outer? the-struct_256)"
"(let-values(((inner127_257)"
"(let-values(((the-struct_258)(root-expand-context/outer-inner v_254)))"
"(if(expand-context/inner? the-struct_258)"
"(let-values(((just-once?128_259) #t))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_258)"
"(root-expand-context/inner-top-level-bind-scope the-struct_258)"
"(root-expand-context/inner-all-scopes-stx the-struct_258)"
"(root-expand-context/inner-defined-syms the-struct_258)"
"(root-expand-context/inner-counter the-struct_258)"
"(root-expand-context/inner-lift-key the-struct_258)"
"(expand-context/inner-to-parsed? the-struct_258)"
"(expand-context/inner-phase the-struct_258)"
"(expand-context/inner-namespace the-struct_258)"
"(expand-context/inner-user-env the-struct_258)"
" just-once?128_259"
"(expand-context/inner-module-begin-k the-struct_258)"
"(expand-context/inner-allow-unbound? the-struct_258)"
"(expand-context/inner-in-local-expand? the-struct_258)"
"(expand-context/inner-stops the-struct_258)"
"(expand-context/inner-declared-submodule-names the-struct_258)"
"(expand-context/inner-lifts the-struct_258)"
"(expand-context/inner-lift-envs the-struct_258)"
"(expand-context/inner-module-lifts the-struct_258)"
"(expand-context/inner-require-lifts the-struct_258)"
"(expand-context/inner-to-module-lifts the-struct_258)"
"(expand-context/inner-requires+provides the-struct_258)"
"(expand-context/inner-observer the-struct_258)"
"(expand-context/inner-for-serializable? the-struct_258)))"
"(raise-argument-error"
" 'struct-copy"
"                                            \"expand-context/inner?\""
" the-struct_258)))))"
"(expand-context/outer1.1"
" inner127_257"
"(root-expand-context/outer-post-expansion-scope the-struct_256)"
"(root-expand-context/outer-use-site-scopes the-struct_256)"
"(root-expand-context/outer-frame-id the-struct_256)"
"(expand-context/outer-context the-struct_256)"
"(expand-context/outer-env the-struct_256)"
"(expand-context/outer-post-expansion-scope-action the-struct_256)"
"(expand-context/outer-scopes the-struct_256)"
"(expand-context/outer-def-ctx-scopes the-struct_256)"
"(expand-context/outer-binding-layer the-struct_256)"
"(expand-context/outer-reference-records the-struct_256)"
"(expand-context/outer-only-immediate? the-struct_256)"
"(expand-context/outer-need-eventually-defined the-struct_256)"
"(expand-context/outer-current-introduction-scopes the-struct_256)"
"(expand-context/outer-name the-struct_256)))"
"                         (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_256)))))))"
"(if(if(null? require-lifts_251)(null? lifts_252) #f)"
"(let-values() exp-s_253)"
"(let-values()"
"(let-values(((temp129_260)(append require-lifts_251 lifts_252))"
"((exp-s130_261) exp-s_253)"
"((s131_262) s_249)"
"((temp132_263)(namespace-phase ns_250)))"
"(wrap-lifts-as-begin15.1 #f #f temp129_260 exp-s130_261 s131_262 temp132_263)))))))"
"(define-values"
"(expand-to-top-form$1)"
"(let-values(((expand-to-top-form50_264)"
"(lambda(s49_265 ns47_266 ns48_267)"
"(let-values(((s_268) s49_265))"
"(let-values(((ns_269)(if ns48_267 ns47_266(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:180:2_270) per-top-level66.1)"
"((s133_271) s_268)"
"((ns134_272) ns_269)"
"((temp135_273) #f))"
"(per-top-level64.1 #f #f #f #f #f #f temp135_273 #f #f s133_271 ns134_272))))))))"
"(case-lambda"
"((s_274)(expand-to-top-form50_264 s_274 #f #f))"
"((s_275 ns47_276)(expand-to-top-form50_264 s_275 ns47_276 #t)))))"
"(define-values"
"(lifted/1.1$6 lifted/2.1$6 lifted/3.1$5 lifted/4.1$5 lifted/5.1$5)"
"(make-struct-type"
" 'per-top-level"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'per-top-level"
"(case-lambda((self_277 given-s_278 ns_279)(apply missing-kw self_277 given-s_278 ns_279 null))))))"
"(current-inspector)"
"(case-lambda((self_280 given-s_281 ns_282)(apply missing-kw self_280 given-s_281 ns_282 null)))))"
"(define-values"
"(per-top-level64.1)"
"(lambda(combine53_283"
" combine58_284"
" just-once?55_285"
" just-once?60_286"
" serializable?56_287"
" serializable?61_288"
" single52_289"
" wrap54_290"
" wrap59_291"
" given-s62_292"
" ns63_293)"
"(let-values(((given-s_294) given-s62_292))"
"(let-values(((ns_295) ns63_293))"
"(let-values(((single_296) single52_289))"
"(let-values(((combine_297)(if combine58_284 combine53_283 #f)))"
"(let-values(((wrap_298)(if wrap59_291 wrap54_290 #f)))"
"(let-values(((just-once?_299)(if just-once?60_286 just-once?55_285 #f)))"
"(let-values(((serializable?_300)(if serializable?61_288 serializable?56_287 #f)))"
"(let-values()"
"(let-values(((s_301)(maybe-intro given-s_294 ns_295)))"
"(let-values(((ctx_302)"
"(let-values(((ns136_304) ns_295))(make-expand-context8.1 #f #f #f #f ns136_304))))"
"(let-values(((phase_303)(namespace-phase ns_295)))"
"((letrec-values(((loop_305)"
"(lambda(s_306 phase_307 ns_308 as-tail?_309)"
"(let-values(((tl-ctx_310)"
"(let-values(((v_315) ctx_302))"
"(let-values(((the-struct_316) v_315))"
"(if(expand-context/outer? the-struct_316)"
"(let-values(((inner137_317)"
"(let-values(((the-struct_318)"
"(root-expand-context/outer-inner"
" v_315)))"
"(if(expand-context/inner?"
" the-struct_318)"
"(let-values(((phase138_319)"
" phase_307)"
"((namespace139_320)"
" ns_308)"
"((just-once?140_321)"
" just-once?_299)"
"((for-serializable?141_322)"
" serializable?_300))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_318)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_318)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_318)"
"(root-expand-context/inner-defined-syms"
" the-struct_318)"
"(root-expand-context/inner-counter"
" the-struct_318)"
"(root-expand-context/inner-lift-key"
" the-struct_318)"
"(expand-context/inner-to-parsed?"
" the-struct_318)"
" phase138_319"
" namespace139_320"
"(expand-context/inner-user-env"
" the-struct_318)"
" just-once?140_321"
"(expand-context/inner-module-begin-k"
" the-struct_318)"
"(expand-context/inner-allow-unbound?"
" the-struct_318)"
"(expand-context/inner-in-local-expand?"
" the-struct_318)"
"(expand-context/inner-stops"
" the-struct_318)"
"(expand-context/inner-declared-submodule-names"
" the-struct_318)"
"(expand-context/inner-lifts"
" the-struct_318)"
"(expand-context/inner-lift-envs"
" the-struct_318)"
"(expand-context/inner-module-lifts"
" the-struct_318)"
"(expand-context/inner-require-lifts"
" the-struct_318)"
"(expand-context/inner-to-module-lifts"
" the-struct_318)"
"(expand-context/inner-requires+provides"
" the-struct_318)"
"(expand-context/inner-observer"
" the-struct_318)"
" for-serializable?141_322))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                     \"expand-context/inner?\""
" the-struct_318)))))"
"(expand-context/outer1.1"
" inner137_317"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_316)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_316)"
"(root-expand-context/outer-frame-id the-struct_316)"
"(expand-context/outer-context the-struct_316)"
"(expand-context/outer-env the-struct_316)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_316)"
"(expand-context/outer-scopes the-struct_316)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_316)"
"(expand-context/outer-binding-layer the-struct_316)"
"(expand-context/outer-reference-records"
" the-struct_316)"
"(expand-context/outer-only-immediate?"
" the-struct_316)"
"(expand-context/outer-need-eventually-defined"
" the-struct_316)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_316)"
"(expand-context/outer-name the-struct_316)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"expand-context/outer?\""
" the-struct_316))))))"
"(let-values(((require-lifts_311 lifts_312 exp-s_313)"
"(expand-capturing-lifts"
" s_306"
"(let-values(((v_323) tl-ctx_310))"
"(let-values(((the-struct_324) v_323))"
"(if(expand-context/outer? the-struct_324)"
"(let-values(((only-immediate?142_325) #t)"
"((def-ctx-scopes143_326)(box null))"
"((inner144_327)"
"(let-values(((the-struct_328)"
"(root-expand-context/outer-inner"
" v_323)))"
"(if(expand-context/inner?"
" the-struct_328)"
"(let-values(((phase145_329)"
" phase_307)"
"((namespace146_330)"
" ns_308))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_328)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_328)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_328)"
"(root-expand-context/inner-defined-syms"
" the-struct_328)"
"(root-expand-context/inner-counter"
" the-struct_328)"
"(root-expand-context/inner-lift-key"
" the-struct_328)"
"(expand-context/inner-to-parsed?"
" the-struct_328)"
" phase145_329"
" namespace146_330"
"(expand-context/inner-user-env"
" the-struct_328)"
"(expand-context/inner-just-once?"
" the-struct_328)"
"(expand-context/inner-module-begin-k"
" the-struct_328)"
"(expand-context/inner-allow-unbound?"
" the-struct_328)"
"(expand-context/inner-in-local-expand?"
" the-struct_328)"
"(expand-context/inner-stops"
" the-struct_328)"
"(expand-context/inner-declared-submodule-names"
" the-struct_328)"
"(expand-context/inner-lifts"
" the-struct_328)"
"(expand-context/inner-lift-envs"
" the-struct_328)"
"(expand-context/inner-module-lifts"
" the-struct_328)"
"(expand-context/inner-require-lifts"
" the-struct_328)"
"(expand-context/inner-to-module-lifts"
" the-struct_328)"
"(expand-context/inner-requires+provides"
" the-struct_328)"
"(expand-context/inner-observer"
" the-struct_328)"
"(expand-context/inner-for-serializable?"
" the-struct_328)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                        \"expand-context/inner?\""
" the-struct_328)))))"
"(expand-context/outer1.1"
" inner144_327"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_324)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_324)"
"(root-expand-context/outer-frame-id"
" the-struct_324)"
"(expand-context/outer-context the-struct_324)"
"(expand-context/outer-env the-struct_324)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_324)"
"(expand-context/outer-scopes the-struct_324)"
" def-ctx-scopes143_326"
"(expand-context/outer-binding-layer"
" the-struct_324)"
"(expand-context/outer-reference-records"
" the-struct_324)"
" only-immediate?142_325"
"(expand-context/outer-need-eventually-defined"
" the-struct_324)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_324)"
"(expand-context/outer-name the-struct_324)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                      \"expand-context/outer?\""
" the-struct_324)))))))"
"(let-values(((disarmed-exp-s_314)(syntax-disarm$1 exp-s_313)))"
"(if(let-values(((or-part_331)(pair? require-lifts_311)))"
"(if or-part_331 or-part_331(pair? lifts_312)))"
"(let-values()"
"(let-values(((new-s_332)"
"(let-values(((temp147_333)"
"(append"
" require-lifts_311"
" lifts_312))"
"((exp-s148_334) exp-s_313)"
"((s149_335) s_306)"
"((phase150_336) phase_307))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" temp147_333"
" exp-s148_334"
" s149_335"
" phase150_336))))"
"(if just-once?_299"
" new-s_332"
"(loop_305 new-s_332 phase_307 ns_308 as-tail?_309))))"
"(if(not single_296)"
"(let-values() exp-s_313)"
"(if(if just-once?_299(not(eq? exp-s_313 s_306)) #f)"
"(let-values() exp-s_313)"
"(let-values()"
"(let-values(((tmp_337)"
"(core-form-sym disarmed-exp-s_314 phase_307)))"
"(if(equal? tmp_337 'begin)"
"(let-values()"
"(let-values(((ok?_338 begin151_339 e152_340)"
"(let-values(((s_352)"
" disarmed-exp-s_314))"
"(let-values(((orig-s_353) s_352))"
"(let-values(((begin151_354"
" e152_355)"
"(let-values(((s_356)"
"(if(syntax?$1"
" s_352)"
"(syntax-e$1"
" s_352)"
" s_352)))"
"(if(pair? s_356)"
"(let-values(((begin153_357)"
"(let-values(((s_359)"
"(car"
" s_356)))"
" s_359))"
"((e154_358)"
"(let-values(((s_360)"
"(cdr"
" s_356)))"
"(let-values(((s_361)"
"(if(syntax?$1"
" s_360)"
"(syntax-e$1"
" s_360)"
" s_360)))"
"(let-values(((flat-s_362)"
"(to-syntax-list.1"
" s_361)))"
"(if(not"
" flat-s_362)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_353))"
"(let-values()"
" flat-s_362)))))))"
"(values"
" begin153_357"
" e154_358))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_353)))))"
"(values"
" #t"
" begin151_354"
" e152_355))))))"
"(letrec-values(((begin-loop_351)"
"(lambda(es_363)"
"(if(null? es_363)"
"(let-values()"
"(if combine_297 null(void)))"
"(if(if(not combine_297)"
"(null?(cdr es_363))"
" #f)"
"(let-values()"
"(loop_305"
"(car es_363)"
" phase_307"
" ns_308"
" as-tail?_309))"
"(let-values()"
"(let-values(((a_364)"
"(if combine_297"
"(loop_305"
"(car"
" es_363)"
" phase_307"
" ns_308"
" #f)"
"(begin"
"(loop_305"
"(car"
" es_363)"
" phase_307"
" ns_308"
" #f)"
"(void)))))"
"(if combine_297"
"(combine_297"
" a_364"
"(begin-loop_351"
"(cdr es_363)))"
"(begin-loop_351"
"(cdr es_363))))))))))"
"(if wrap_298"
"(wrap_298"
" begin151_339"
" exp-s_313"
"(begin-loop_351 e152_340))"
"(begin-loop_351 e152_340)))))"
"(if(equal? tmp_337 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_365"
" begin-for-syntax155_366"
" e156_367)"
"(let-values(((s_381)"
" disarmed-exp-s_314))"
"(let-values(((orig-s_382) s_381))"
"(let-values(((begin-for-syntax155_383"
" e156_384)"
"(let-values(((s_385)"
"(if(syntax?$1"
" s_381)"
"(syntax-e$1"
" s_381)"
" s_381)))"
"(if(pair? s_385)"
"(let-values(((begin-for-syntax157_386)"
"(let-values(((s_388)"
"(car"
" s_385)))"
" s_388))"
"((e158_387)"
"(let-values(((s_389)"
"(cdr"
" s_385)))"
"(let-values(((s_390)"
"(if(syntax?$1"
" s_389)"
"(syntax-e$1"
" s_389)"
" s_389)))"
"(let-values(((flat-s_391)"
"(to-syntax-list.1"
" s_390)))"
"(if(not"
" flat-s_391)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_382))"
"(let-values()"
" flat-s_391)))))))"
"(values"
" begin-for-syntax157_386"
" e158_387))"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_382)))))"
"(values"
" #t"
" begin-for-syntax155_383"
" e156_384))))))"
"(let-values(((next-phase_378)(add1 phase_307)))"
"(let-values(((next-ns_379)"
"(namespace->namespace-at-phase"
" ns_308"
" next-phase_378)))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
" next-ns_379)"
"(values))))"
"(let-values(((l_380)"
"(let-values(((lst_392)"
" e156_367))"
"(begin"
"(if(list? lst_392)"
"(void)"
"(let-values()"
"(in-list lst_392)))"
"((letrec-values(((for-loop_393)"
"(lambda(lst_394)"
"(if(pair?"
" lst_394)"
"(let-values(((s_395)"
"(unsafe-car"
" lst_394))"
"((rest_396)"
"(unsafe-cdr"
" lst_394)))"
"(let-values(((post-guard-var_397)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_398)"
"(let-values()"
"(let-values()"
"(loop_305"
" s_395"
" next-phase_378"
" next-ns_379"
" #f)))))"
"(let-values(((result_399)"
"(if(post-guard-var_397)"
"(for-loop_393"
" rest_396)"
" null)))"
"(cons"
" elem_398"
" result_399))))))"
" null))))"
" for-loop_393)"
" lst_392)))))"
"(if wrap_298"
"(let-values()"
"(wrap_298"
" begin-for-syntax155_366"
" exp-s_313"
" l_380))"
"(if combine_297"
"(let-values() l_380)"
"(let-values()(void))))))))))"
"(let-values()"
"(single_296"
" exp-s_313"
" ns_308"
" as-tail?_309)))))))))))))))"
" loop_305)"
" s_301"
" phase_303"
" ns_295"
" #t))))))))))))))"
"(define-values"
"(unpack65.1)"
"(lambda(given-kws_400 given-args_401 given-s62_402 ns63_403)"
"(let-values(((combine58_404)(if(pair? given-kws_400)(eq? '#:combine(car given-kws_400)) #f)))"
"(let-values(((combine53_405)(if combine58_404(car given-args_401)(void)))"
"((given-kws_406)(if combine58_404(cdr given-kws_400) given-kws_400))"
"((given-args_407)(if combine58_404(cdr given-args_401) given-args_401)))"
"(let-values(((just-once?60_408)(if(pair? given-kws_406)(eq? '#:just-once?(car given-kws_406)) #f)))"
"(let-values(((just-once?55_409)(if just-once?60_408(car given-args_407)(void)))"
"((given-kws_410)(if just-once?60_408(cdr given-kws_406) given-kws_406))"
"((given-args_411)(if just-once?60_408(cdr given-args_407) given-args_407)))"
"(let-values(((serializable?61_412)"
"(if(pair? given-kws_410)(eq? '#:serializable?(car given-kws_410)) #f)))"
"(let-values(((serializable?56_413)(if serializable?61_412(car given-args_411)(void)))"
"((given-kws_414)(if serializable?61_412(cdr given-kws_410) given-kws_410))"
"((given-args_415)(if serializable?61_412(cdr given-args_411) given-args_411)))"
"(let-values(((single52_416)(car given-args_415))"
"((given-kws_417)(cdr given-kws_414))"
"((given-args_418)(cdr given-args_415)))"
"(let-values(((wrap59_419)(pair? given-kws_417)))"
"(let-values(((wrap54_420)(if wrap59_419(car given-args_418)(void))))"
"(per-top-level64.1"
" combine53_405"
" combine58_404"
" just-once?55_409"
" just-once?60_408"
" serializable?56_413"
" serializable?61_412"
" single52_416"
" wrap54_420"
" wrap59_419"
" given-s62_402"
" ns63_403))))))))))))"
"(define-values"
"(per-top-level66.1)"
"(lifted/2.1$6"
"(lambda(given-kws_421 given-argc_422)"
"(if(= given-argc_422 4)"
"(subsets? '(#:single) given-kws_421 '(#:combine #:just-once? #:serializable? #:single #:wrap))"
" #f))"
"(case-lambda"
"((given-kws_423 given-args_424 given-s_425 ns_426)(unpack65.1 given-kws_423 given-args_424 given-s_425 ns_426)))"
" '(#:single)"
" '(#:combine #:just-once? #:serializable? #:single #:wrap)))"
"(define-values"
"(maybe-intro)"
"(lambda(s_427 ns_428)(if(syntax?$1 s_427) s_427(1/namespace-syntax-introduce(1/datum->syntax #f s_427) ns_428))))"
"(define-values"
"(re-pair)"
"(lambda(form-id_429 s_430 r_431)"
"(syntax-rearm$1(1/datum->syntax(syntax-disarm$1 s_430)(cons form-id_429 r_431) s_430 s_430) s_430)))"
"(define-values"
"(expand-capturing-lifts)"
"(lambda(s_432 ctx_433)"
"(let-values()"
"(let-values(((ns_434)(expand-context-namespace ctx_433)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_434)(values))))"
"(let-values(((lift-ctx_435)"
"(let-values(((temp159_438)(make-top-level-lift ctx_433)))"
"(make-lift-context6.1 #f #f temp159_438))))"
"(let-values(((require-lift-ctx_436)"
"(make-require-lift-context(namespace-phase ns_434)(make-parse-top-lifted-require ns_434))))"
"(let-values(((exp-s_437)"
"(let-values(((s160_439) s_432)"
"((temp161_440)"
"(let-values(((v_441) ctx_433))"
"(let-values(((the-struct_442) v_441))"
"(if(expand-context/outer? the-struct_442)"
"(let-values(((inner162_443)"
"(let-values(((the-struct_444)"
"(root-expand-context/outer-inner v_441)))"
"(if(expand-context/inner? the-struct_444)"
"(let-values(((lifts163_445) lift-ctx_435)"
"((module-lifts164_446) lift-ctx_435)"
"((require-lifts165_447)"
" require-lift-ctx_436))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_444)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_444)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_444)"
"(root-expand-context/inner-defined-syms"
" the-struct_444)"
"(root-expand-context/inner-counter the-struct_444)"
"(root-expand-context/inner-lift-key the-struct_444)"
"(expand-context/inner-to-parsed? the-struct_444)"
"(expand-context/inner-phase the-struct_444)"
"(expand-context/inner-namespace the-struct_444)"
"(expand-context/inner-user-env the-struct_444)"
"(expand-context/inner-just-once? the-struct_444)"
"(expand-context/inner-module-begin-k"
" the-struct_444)"
"(expand-context/inner-allow-unbound?"
" the-struct_444)"
"(expand-context/inner-in-local-expand?"
" the-struct_444)"
"(expand-context/inner-stops the-struct_444)"
"(expand-context/inner-declared-submodule-names"
" the-struct_444)"
" lifts163_445"
"(expand-context/inner-lift-envs the-struct_444)"
" module-lifts164_446"
" require-lifts165_447"
"(expand-context/inner-to-module-lifts"
" the-struct_444)"
"(expand-context/inner-requires+provides"
" the-struct_444)"
"(expand-context/inner-observer the-struct_444)"
"(expand-context/inner-for-serializable?"
" the-struct_444)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"expand-context/inner?\""
" the-struct_444)))))"
"(expand-context/outer1.1"
" inner162_443"
"(root-expand-context/outer-post-expansion-scope the-struct_442)"
"(root-expand-context/outer-use-site-scopes the-struct_442)"
"(root-expand-context/outer-frame-id the-struct_442)"
"(expand-context/outer-context the-struct_442)"
"(expand-context/outer-env the-struct_442)"
"(expand-context/outer-post-expansion-scope-action the-struct_442)"
"(expand-context/outer-scopes the-struct_442)"
"(expand-context/outer-def-ctx-scopes the-struct_442)"
"(expand-context/outer-binding-layer the-struct_442)"
"(expand-context/outer-reference-records the-struct_442)"
"(expand-context/outer-only-immediate? the-struct_442)"
"(expand-context/outer-need-eventually-defined the-struct_442)"
"(expand-context/outer-current-introduction-scopes the-struct_442)"
"(expand-context/outer-name the-struct_442)))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"expand-context/outer?\""
" the-struct_442))))))"
"(expand5.1 #f #f s160_439 temp161_440))))"
"(values"
"(get-and-clear-require-lifts! require-lift-ctx_436)"
"(get-and-clear-lifts! lift-ctx_435)"
" exp-s_437)))))))))"
"(define-values"
"(make-parse-top-lifted-require)"
"(lambda(ns_448)"
"(lambda(s_449 phase_450)"
"(let-values(((ok?_451 #%require166_452 req167_453)"
"(let-values(((s_464)(syntax-disarm$1 s_449)))"
"(let-values(((orig-s_465) s_464))"
"(let-values(((#%require166_466 req167_467)"
"(let-values(((s_468)(if(syntax?$1 s_464)(syntax-e$1 s_464) s_464)))"
"(if(pair? s_468)"
"(let-values(((#%require168_469)(let-values(((s_471)(car s_468))) s_471))"
"((req169_470)"
"(let-values(((s_472)(cdr s_468)))"
"(let-values(((s_473)"
"(if(syntax?$1 s_472)"
"(syntax-e$1 s_472)"
" s_472)))"
"(if(pair? s_473)"
"(let-values(((req170_474)"
"(let-values(((s_475)(car s_473))) s_475))"
"(()"
"(let-values(((s_476)(cdr s_473)))"
"(let-values(((s_477)"
"(if(syntax?$1 s_476)"
"(syntax-e$1 s_476)"
" s_476)))"
"(if(null? s_477)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_465))))))"
"(values req170_474))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_465))))))"
"(values #%require168_469 req169_470))"
"                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_465)))))"
"(values #t #%require166_466 req167_467))))))"
"(let-values(((temp171_479)(list req167_453))"
"((s172_480) s_449)"
"((ns173_481) ns_448)"
"((phase174_482) phase_450)"
"((phase175_483) phase_450)"
"((temp176_484)(make-requires+provides #f))"
"((temp177_485) 'require))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" phase175_483"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp177_485"
" temp171_479"
" s172_480"
" ns173_481"
" phase174_482"
" temp176_484))))))"
"(define-values"
"(lifted/6.1$4 lifted/7.1$4 lifted/8.1$4 lifted/9.1$4 lifted/10.1$4)"
"(make-struct-type"
" 'wrap-lifts-as-lifted-parsed-begin"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'wrap-lifts-as-lifted-parsed-begin"
"(case-lambda"
"((self_486 require-lifts_487 lifts_488 exp-s_489 s_490)"
"(apply missing-kw self_486 require-lifts_487 lifts_488 exp-s_489 s_490 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_491 require-lifts_492 lifts_493 exp-s_494 s_495)"
"(apply missing-kw self_491 require-lifts_492 lifts_493 exp-s_494 s_495 null)))))"
"(define-values"
"(wrap-lifts-as-lifted-parsed-begin73.1)"
"(lambda(adjust-form67_496 require-lifts69_497 lifts70_498 exp-s71_499 s72_500)"
"(let-values(((require-lifts_501) require-lifts69_497))"
"(let-values(((lifts_502) lifts70_498))"
"(let-values(((exp-s_503) exp-s71_499))"
"(let-values(((s_504) s72_500))"
"(let-values(((adjust-form_505) adjust-form67_496))"
"(let-values()"
"(lifted-parsed-begin30.1"
"(append"
"(let-values(((lst_506) require-lifts_501))"
"(begin"
"(if(list? lst_506)(void)(let-values()(in-list lst_506)))"
"((letrec-values(((for-loop_507)"
"(lambda(lst_508)"
"(if(pair? lst_508)"
"(let-values(((req_509)(unsafe-car lst_508))"
"((rest_510)(unsafe-cdr lst_508)))"
"(let-values(((post-guard-var_511)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_512)"
"(let-values()"
"(let-values()(parsed-require23.1 req_509)))))"
"(let-values(((result_513)"
"(if(post-guard-var_511)"
"(for-loop_507 rest_510)"
" null)))"
"(cons elem_512 result_513))))))"
" null))))"
" for-loop_507)"
" lst_506)))"
"(let-values(((lst_514)(get-lifts-as-lists lifts_502)))"
"(begin"
"(if(list? lst_514)(void)(let-values()(in-list lst_514)))"
"((letrec-values(((for-loop_515)"
"(lambda(lst_516)"
"(if(pair? lst_516)"
"(let-values(((ids+syms+rhs_517)(unsafe-car lst_516))"
"((rest_518)(unsafe-cdr lst_516)))"
"(let-values(((post-guard-var_519)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_520)"
"(let-values()"
"(let-values()"
"(let-values(((exp-rhs_521)"
"(adjust-form_505"
"(caddr ids+syms+rhs_517))))"
"(let-values(((just-rhs_522)"
"(if(lifted-parsed-begin?"
" exp-rhs_521)"
"(lifted-parsed-begin-last"
" exp-rhs_521)"
" exp-rhs_521)))"
"(let-values(((dv_523)"
"(parsed-define-values19.1"
" s_504"
"(car ids+syms+rhs_517)"
"(cadr ids+syms+rhs_517)"
" just-rhs_522)))"
"(if(lifted-parsed-begin? exp-rhs_521)"
"(let-values(((the-struct_524) exp-rhs_521))"
"(if(lifted-parsed-begin? the-struct_524)"
"(let-values(((last178_525) dv_523))"
"(lifted-parsed-begin30.1"
"(lifted-parsed-begin-seq"
" the-struct_524)"
" last178_525))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                 \"lifted-parsed-begin?\""
" the-struct_524)))"
" dv_523))))))))"
"(let-values(((result_526)"
"(if(post-guard-var_519)"
"(for-loop_515 rest_518)"
" null)))"
"(cons elem_520 result_526))))))"
" null))))"
" for-loop_515)"
" lst_514))))"
" exp-s_503)))))))))"
"(define-values"
"(unpack74.1)"
"(lambda(given-kws_527 given-args_528 require-lifts69_529 lifts70_530 exp-s71_531 s72_532)"
"(let-values(((adjust-form67_533)(car given-args_528)))"
"(wrap-lifts-as-lifted-parsed-begin73.1 adjust-form67_533 require-lifts69_529 lifts70_530 exp-s71_531 s72_532))))"
"(define-values"
"(wrap-lifts-as-lifted-parsed-begin75.1)"
"(lifted/7.1$4"
"(lambda(given-kws_534 given-argc_535)"
"(if(= given-argc_535 6)"
"(let-values(((l2_536) given-kws_534))"
"(if(pair? l2_536)(if(eq?(car l2_536) '#:adjust-form)(null?(cdr l2_536)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_537 given-args_538 require-lifts_539 lifts_540 exp-s_541 s_542)"
"(unpack74.1 given-kws_537 given-args_538 require-lifts_539 lifts_540 exp-s_541 s_542)))"
" '(#:adjust-form)"
" '(#:adjust-form)))"
"(void)"
"(void)"
"(define-values"
"(do-dynamic-require)"
"(let-values(((do-dynamic-require6_1)"
"(lambda(who3_2 mod-path4_3 sym5_4 fail-k1_5 fail-k2_6)"
"(let-values(((who_7) who3_2))"
"(let-values(((mod-path_8) mod-path4_3))"
"(let-values(((sym_9) sym5_4))"
"(let-values(((fail-k_10)(if fail-k2_6 fail-k1_5 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_15)(1/module-path? mod-path_8)))"
"(if or-part_15"
" or-part_15"
"(let-values(((or-part_16)(1/module-path-index? mod-path_8)))"
"(if or-part_16 or-part_16(1/resolved-module-path? mod-path_8)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_7"
"                                                 \"(or/c module-path? module-path-index? resolved-module-path?)\""
" mod-path_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_17)(symbol? sym_9)))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)(not sym_9)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)(equal? sym_9 0)))"
"(if or-part_19 or-part_19(void? sym_9)))))))"
"(void)"
"(let-values()"
"                                                  (raise-argument-error who_7 \"(or/c symbol? #f 0 void?)\" sym_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(procedure? fail-k_10)"
"(procedure-arity-includes? fail-k_10 0)"
" #f)"
"(void)"
"                                                  (let-values () (raise-argument-error who_7 \"(-> any)\" fail-k_10)))"
"(values))))"
"(let-values(((ns_11)(1/current-namespace)))"
"(let-values(((mpi_12)"
"(if(1/module-path? mod-path_8)"
"(let-values()(1/module-path-index-join mod-path_8 #f))"
"(if(1/module-path-index? mod-path_8)"
"(let-values() mod-path_8)"
"(let-values()"
"(1/module-path-index-join"
"(resolved-module-path->module-path mod-path_8)"
" #f))))))"
"(let-values(((mod-name_13)(1/module-path-index-resolve mpi_12 #t)))"
"(let-values(((phase_14)(namespace-phase ns_11)))"
"(if(not sym_9)"
"(let-values()"
"(let-values(((ns20_21) ns_11)"
"((mpi21_22) mpi_12)"
"((phase22_23) phase_14)"
"((phase23_24) phase_14)"
"((temp24_25) #f))"
"(namespace-module-instantiate!94.1"
" temp24_25"
" #t"
" phase23_24"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns20_21"
" mpi21_22"
" phase22_23)))"
"(if(equal? sym_9 0)"
"(let-values()"
"(let-values(((ns25_27) ns_11)"
"((mpi26_28) mpi_12)"
"((phase27_29) phase_14)"
"((phase28_30) phase_14))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" phase28_30"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns25_27"
" mpi26_28"
" phase27_29)))"
"(if(void? sym_9)"
"(let-values()"
"(let-values(((ns29_32) ns_11)"
"((mpi30_33) mpi_12)"
"((phase31_34) phase_14)"
"((phase32_35) phase_14))"
"(namespace-module-visit!102.1"
" phase32_35"
" #t"
" ns29_32"
" mpi30_33"
" phase31_34)))"
"(let-values()"
"(let-values(((m_36)(namespace->module ns_11 mod-name_13)))"
"(let-values((()"
"(begin"
"(if m_36"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'dynamic-require"
" mod-name_13)))"
"(values))))"
"(let-values(((binding/p_37)"
"(hash-ref"
"(hash-ref(module-provides m_36) 0 '#hasheq())"
" sym_9"
" #f)))"
"(if(not binding/p_37)"
"(let-values()"
"(if(eq? fail-k_10 default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                               \"name is not provided\""
"                                                               \"name\""
" sym_9"
"                                                               \"module\""
" mod-name_13)"
"(fail-k_10)))"
"(let-values()"
"(let-values(((binding_38)"
"(provided-as-binding binding/p_37)))"
"(let-values(((ex-sym_39)"
"(module-binding-sym binding_38)))"
"(let-values(((ex-phase_40)"
"(module-binding-phase binding_38)))"
"(let-values((()"
"(begin"
"(let-values(((ns33_47) ns_11)"
"((mpi34_48) mpi_12)"
"((phase35_49) phase_14)"
"((phase36_50) phase_14))"
"(namespace-module-instantiate!94.1"
" #f"
" #f"
" phase36_50"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns33_47"
" mpi34_48"
" phase35_49))"
"(values))))"
"(let-values(((ex-mod-name_41)"
"(1/module-path-index-resolve"
"(module-path-index-shift"
"(module-binding-module binding_38)"
"(module-self m_36)"
" mpi_12))))"
"(let-values(((m-ns_42)"
"(let-values(((ns37_52) ns_11)"
"((ex-mod-name38_53)"
" ex-mod-name_41)"
"((temp39_54)"
"(phase-"
" phase_14"
" ex-phase_40))"
"((temp40_55) #t))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" temp40_55"
" #t"
" #f"
" #f"
" ns37_52"
" ex-mod-name38_53"
" temp39_54))))"
"(let-values(((mi_43)"
"(namespace->module"
" ns_11"
" ex-mod-name_41)))"
"(let-values(((access_44)"
"(let-values(((or-part_56)"
"(module-access"
" m_36)))"
"(if or-part_56"
" or-part_56"
"(module-compute-access!"
" m_36)))))"
"(let-values((()"
"(begin"
"(if(if(not"
"(eq?"
" 'provided"
"(hash-ref"
" access_44"
" ex-sym_39"
" #f)))"
"(if(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector"
" m-ns_42)))"
"(not"
"(if(module-binding-extra-inspector"
" binding_38)"
"(inspector-superior?"
"(module-binding-extra-inspector"
" binding_38)"
"(namespace-inspector"
" m-ns_42))"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" 'dynamc-require"
"                                                                                                 \"name is protected\""
"                                                                                                 \"name\""
" sym_9"
"                                                                                                 \"module\""
" mod-name_13))"
"(void))"
"(values))))"
"(let-values(((fail_45)"
"(lambda()"
"(if(eq?"
" fail-k_10"
" default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                                 \"name's binding is missing\""
"                                                                                                 \"name\""
" sym_9"
"                                                                                                 \"module\""
" mod-name_13)"
"(fail-k_10)))))"
"(if(not"
"(provided-as-transformer?"
" binding/p_37))"
"(let-values()"
"(namespace-get-variable"
" m-ns_42"
" ex-phase_40"
" ex-sym_39"
" fail_45))"
"(let-values()"
"(let-values(((missing_57)"
"(gensym 'missing)))"
"(let-values((()"
"(begin"
"(let-values(((ns41_60)"
" ns_11)"
"((mpi42_61)"
" mpi_12)"
"((phase43_62)"
" phase_14)"
"((phase44_63)"
" phase_14))"
"(namespace-module-visit!102.1"
" phase44_63"
" #t"
" ns41_60"
" mpi42_61"
" phase43_62))"
"(values))))"
"(let-values(((t_58)"
"(namespace-get-transformer"
" m-ns_42"
" ex-phase_40"
" ex-sym_39"
" missing_57)))"
"(if(eq? t_58 missing_57)"
"(let-values()(fail_45))"
"(let-values()"
"(let-values(((tmp-ns_64)"
"(let-values(((ns45_66)"
" ns_11))"
"(new-namespace9.1"
" #f"
" #f"
" #f"
" #f"
" ns45_66"
" #t))))"
"(let-values(((mod-path_65)"
"(resolved-module-path->module-path"
" mod-name_13)))"
"(begin"
"(1/namespace-require"
" mod-path_65"
" tmp-ns_64)"
"(1/eval"
" sym_9"
" tmp-ns_64)))))))))))))))))))))))))))))))))))))))))))))"
"(case-lambda"
"((who_67 mod-path_68 sym_69)(do-dynamic-require6_1 who_67 mod-path_68 sym_69 #f #f))"
"((who_70 mod-path_71 sym_72 fail-k1_73)(do-dynamic-require6_1 who_70 mod-path_71 sym_72 fail-k1_73 #t)))))"
" (define-values (default-dynamic-require-fail-thunk) (lambda () (error \"failed\")))"
"(define-values"
"(1/dynamic-require)"
"(let-values(((dynamic-require12_74)"
"(lambda(mod-path10_75 sym11_76 fail-k8_77 fail-k9_78)"
"(let-values(((mod-path_79) mod-path10_75))"
"(let-values(((sym_80) sym11_76))"
"(let-values(((fail-k_81)(if fail-k9_78 fail-k8_77 default-dynamic-require-fail-thunk)))"
"(let-values()(do-dynamic-require 'dynamic-require mod-path_79 sym_80 fail-k_81))))))))"
"(case-lambda"
"((mod-path_82 sym_83)(dynamic-require12_74 mod-path_82 sym_83 #f #f))"
"((mod-path_84 sym_85 fail-k8_86)(dynamic-require12_74 mod-path_84 sym_85 fail-k8_86 #t)))))"
"(define-values"
"(1/dynamic-require-for-syntax)"
"(let-values(((dynamic-require-for-syntax18_87)"
"(lambda(mod-path16_88 sym17_89 fail-k14_90 fail-k15_91)"
"(let-values(((mod-path_92) mod-path16_88))"
"(let-values(((sym_93) sym17_89))"
"(let-values(((fail-k_94)(if fail-k15_91 fail-k14_90 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
"(let-values(((ns_95)(1/current-namespace)))"
"(namespace->namespace-at-phase ns_95(add1(namespace-phase ns_95)))))"
"(let-values()"
"(do-dynamic-require 'dynamic-require-for-syntax mod-path_92 sym_93 fail-k_94))))))))))"
"(case-lambda"
"((mod-path_96 sym_97)(dynamic-require-for-syntax18_87 mod-path_96 sym_97 #f #f))"
"((mod-path_98 sym_99 fail-k14_100)(dynamic-require-for-syntax18_87 mod-path_98 sym_99 fail-k14_100 #t)))))"
"(void)"
"(void)"
"(define-values"
"(eval$1)"
"(case-lambda"
"((s_1)((current-eval)(intro s_1)))"
"((s_2 ns_3)"
"(begin"
"      (if (1/namespace? ns_3) (void) (let-values () (raise-argument-error 'eval \"namespace?\" ns_3)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_3)"
"(let-values()((current-eval)(intro s_2 ns_3))))))))"
"(define-values"
"(1/eval-syntax)"
"(case-lambda"
"((s_4)"
"(begin"
"      (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_4)))"
"((current-eval) s_4)))"
"((s_5 ns_6)"
"(begin"
"      (if (syntax?$1 s_5) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_5)))"
"      (if (1/namespace? ns_6) (void) (let-values () (raise-argument-error 'eval-syntax \"namespace?\" ns_6)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_6)"
"(let-values()((current-eval) s_5)))))))"
"(define-values(compile$1)(lambda(s_7)((current-compile)(intro s_7) #f)))"
"(define-values"
"(1/compile-syntax)"
"(lambda(s_8)"
"(begin"
"      (if (syntax?$1 s_8) (void) (let-values () (raise-argument-error 'compile-syntax \"syntax?\" s_8)))"
"((current-compile) s_8 #f))))"
"(define-values(1/expand)(lambda(s_9)(expand$1(intro s_9)(1/current-namespace) #t)))"
"(define-values"
"(1/expand-syntax)"
"(lambda(s_10)"
"(begin"
"      (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'expand-syntax \"syntax?\" s_10)))"
"(expand$1 s_10(1/current-namespace) #t))))"
"(define-values(1/expand-once)(lambda(s_11)(expand-once$1(intro s_11))))"
"(define-values"
"(1/expand-syntax-once)"
"(lambda(s_12)"
"(begin"
"      (if (syntax?$1 s_12) (void) (let-values () (raise-argument-error 'expand-syntax-once \"syntax?\" s_12)))"
"(expand-once$1 s_12))))"
"(define-values(1/expand-to-top-form)(lambda(s_13)(expand-to-top-form$1(intro s_13))))"
"(define-values"
"(1/expand-syntax-to-top-form)"
"(lambda(s_14)"
"(begin"
"      (if (syntax?$1 s_14) (void) (let-values () (raise-argument-error 'expand-syntax-to-top-form \"syntax?\" s_14)))"
"(expand-to-top-form$1 s_14))))"
"(define-values"
"(intro)"
"(let-values(((intro4_15)"
"(lambda(given-s3_16 ns1_17 ns2_18)"
"(let-values(((given-s_19) given-s3_16))"
"(let-values(((ns_20)(if ns2_18 ns1_17(1/current-namespace))))"
"(let-values()"
"(let-values(((s_21)(if(syntax?$1 given-s_19) given-s_19(1/datum->syntax #f given-s_19))))"
"(1/namespace-syntax-introduce s_21 ns_20))))))))"
"(case-lambda((given-s_22)(intro4_15 given-s_22 #f #f))((given-s_23 ns1_24)(intro4_15 given-s_23 ns1_24 #t)))))"
"(void)"
"(void)"
"(define-values"
"(1/module-declared?)"
"(let-values(((module-declared?4_6)"
"(lambda(mod3_7 load?1_8 load?2_9)"
"(let-values(((mod_10) mod3_7))"
"(let-values(((load?_11)(if load?2_9 load?1_8 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_10)"
"(void)"
"(let-values()"
"(raise-argument-error 'module-declared? module-reference-str mod_10)))"
"(values))))"
"(let-values(((ns_12)(1/current-namespace)))"
"(let-values(((name_13)"
"(let-values(((...space/api-module.rkt:28:15_14)"
" reference->resolved-module-path34.1)"
"((mod35_15) mod_10)"
"((load?36_16) load?_11))"
"(reference->resolved-module-path32.1 load?36_16 mod35_15))))"
"(if(namespace->module ns_12 name_13) #t #f))))))))))"
"(case-lambda"
"((mod_17)(module-declared?4_6 mod_17 #f #f))"
"((mod_18 load?1_19)(module-declared?4_6 mod_18 load?1_19 #t)))))"
"(define-values"
"(1/module-predefined?)"
"(lambda(mod_20)"
"(let-values((()"
"(begin"
"(if(module-reference? mod_20)"
"(void)"
"(let-values()(raise-argument-error 'module-predefined? module-reference-str mod_20)))"
"(values))))"
"(let-values(((ns_21)(1/current-namespace)))"
"(let-values(((name_22)"
"(let-values(((...space/api-module.rkt:35:15_24) reference->resolved-module-path34.1)"
"((mod37_25) mod_20)"
"((temp38_26) #f))"
"(reference->resolved-module-path32.1 temp38_26 mod37_25))))"
"(let-values(((m_23)(namespace->module ns_21 name_22)))(if m_23(module-primitive? m_23) #f)))))))"
"(define-values"
"(module->)"
"(let-values(((module->11_27)"
"(lambda(extract8_28 who9_29 mod10_30 load?6_31 load?7_32)"
"(let-values(((extract_33) extract8_28))"
"(let-values(((who_34) who9_29))"
"(let-values(((mod_35) mod10_30))"
"(let-values(((load?_36)(if load?7_32 load?6_31 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_35)"
"(void)"
"(let-values()(raise-argument-error who_34 module-reference-str mod_35)))"
"(values))))"
"(let-values(((m_37)"
"(namespace->module/complain"
" who_34"
"(1/current-namespace)"
"(let-values(((...space/api-module.rkt:44:40_38)"
" reference->resolved-module-path34.1)"
"((mod39_39) mod_35)"
"((load?40_40) load?_36))"
"(reference->resolved-module-path32.1 load?40_40 mod39_39)))))"
"(extract_33 m_37)))))))))))"
"(case-lambda"
"((extract_41 who_42 mod_43)(module->11_27 extract_41 who_42 mod_43 #f #f))"
"((extract_44 who_45 mod_46 load?6_47)(module->11_27 extract_44 who_45 mod_46 load?6_47 #t)))))"
"(define-values"
"(1/module->language-info)"
"(let-values(((module->language-info16_48)"
"(lambda(mod15_49 load?13_50 load?14_51)"
"(let-values(((mod_52) mod15_49))"
"(let-values(((load?_53)(if load?14_51 load?13_50 #f)))"
"(let-values()(module-> module-language-info 'module->language-info mod_52 load?_53)))))))"
"(case-lambda"
"((mod_54)(module->language-info16_48 mod_54 #f #f))"
"((mod_55 load?13_56)(module->language-info16_48 mod_55 load?13_56 #t)))))"
"(define-values(1/module->imports)(lambda(mod_57)(module-> module-requires 'module->imports mod_57)))"
"(define-values"
"(1/module->exports)"
"(lambda(mod_58)"
"(let-values(((provides_59 self_60)"
"(module->"
"(lambda(m_61)(values(module-provides m_61)(module-self m_61)))"
" 'module->exports"
" mod_58)))"
"(provides->api-provides provides_59 self_60))))"
"(define-values"
"(1/module->indirect-exports)"
"(lambda(mod_62)"
"(module->"
"(lambda(m_63)(variables->api-nonprovides(module-provides m_63)((module-get-all-variables m_63))))"
" 'module->indirect-exports"
" mod_62)))"
"(define-values"
"(1/module-provide-protected?)"
"(lambda(mod_64 sym_65)"
"(module->"
"(lambda(m_66)"
"(let-values(((b/p_67)(hash-ref(module-provides m_66) sym_65 #f)))"
"(let-values(((or-part_68)(not b/p_67)))(if or-part_68 or-part_68(provided-as-protected? b/p_67)))))"
" 'module-provide-protected?"
" mod_64)))"
"(define-values"
"(1/module->namespace)"
"(let-values(((module->namespace21_69)"
"(lambda(mod20_70 ns18_71 ns19_72)"
"(let-values(((mod_73) mod20_70))"
"(let-values(((ns_74)(if ns19_72 ns18_71(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_73)"
"(void)"
"(let-values()"
"(raise-argument-error 'module->namespace module-reference-str mod_73)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_74)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'module->namespace \"namespace?\" ns_74)))"
"(values))))"
"(let-values(((name_75)"
"(let-values(((...space/api-module.rkt:74:15_78)"
" reference->resolved-module-path34.1)"
"((mod44_79) mod_73)"
"((temp45_80) #t))"
"(reference->resolved-module-path32.1 temp45_80 mod44_79))))"
"(let-values(((phase_76)(namespace-phase ns_74)))"
"(let-values(((m-ns_77)"
"(let-values(((ns46_81) ns_74)"
"((name47_82) name_75)"
"((phase48_83) phase_76))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns46_81"
" name47_82"
" phase48_83))))"
"(begin"
"(if m-ns_77"
"(void)"
"(let-values()"
"(begin"
"(namespace->module/complain 'module->namespace ns_74 name_75)"
"(raise-arguments-error"
" 'module->namespace"
"                                           \"module not instantiated in the current namespace\""
"                                           \"name\""
" name_75))))"
"(if(inspector-superior?(current-code-inspector)(namespace-inspector m-ns_77))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module->namespace"
"                                         \"current code inspector cannot access namespace of module\""
"                                         \"module name\""
" name_75)))"
"(if(namespace-get-root-expand-ctx m-ns_77)"
"(void)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" m-ns_77"
"(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f)))))"
"(let-values(((ns41_84) ns_74)"
"((temp42_85)(namespace-mpi m-ns_77))"
"((phase43_86) phase_76))"
"(namespace-module-make-available!110.1 #f #f ns41_84 temp42_85 phase43_86))"
" m-ns_77))))))))))))"
"(case-lambda"
"((mod_87)(module->namespace21_69 mod_87 #f #f))"
"((mod_88 ns18_89)(module->namespace21_69 mod_88 ns18_89 #t)))))"
"(define-values"
"(1/namespace-unprotect-module)"
"(let-values(((namespace-unprotect-module27_90)"
"(lambda(insp25_91 mod26_92 ns23_93 ns24_94)"
"(let-values(((insp_95) insp25_91))"
"(let-values(((mod_96) mod26_92))"
"(let-values(((ns_97)(if ns24_94 ns23_93(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(inspector? insp_95)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-unprotect-module \"inspector?\" insp_95)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod_96)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                 \"module-path?\""
" mod_96)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_97)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                   \"namespace?\""
" ns_97)))"
"(values))))"
"(let-values(((name_98)"
"(let-values(((...space/api-module.rkt:99:15_101)"
" reference->resolved-module-path34.1)"
"((mod49_102) mod_96)"
"((temp50_103) #f))"
"(reference->resolved-module-path32.1 temp50_103 mod49_102))))"
"(let-values(((phase_99)(namespace-phase ns_97)))"
"(let-values(((m-ns_100)"
"(let-values(((ns51_104) ns_97)"
"((name52_105) name_98)"
"((phase53_106) phase_99))"
"(namespace->module-namespace80.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns51_104"
" name52_105"
" phase53_106))))"
"(begin"
"(if m-ns_100"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'namespace-unprotect-module"
"                                             \"module not instantiated\""
"                                             \"module name\""
" name_98)))"
"(if(inspector-superior? insp_95(namespace-inspector m-ns_100))"
"(let-values()"
"(set-namespace-inspector!"
" m-ns_100"
"(make-inspector(current-code-inspector))))"
"(void))))))))))))))))"
"(case-lambda"
"((insp_107 mod_108)(namespace-unprotect-module27_90 insp_107 mod_108 #f #f))"
"((insp_109 mod_110 ns23_111)(namespace-unprotect-module27_90 insp_109 mod_110 ns23_111 #t)))))"
"(define-values"
"(namespace->module/complain)"
"(lambda(who_112 ns_113 name_114)"
"(let-values(((or-part_115)(namespace->module ns_113 name_114)))"
"(if or-part_115"
" or-part_115"
"        (raise-arguments-error who_112 \"unknown module in the current namespace\" \"name\" name_114)))))"
"(define-values"
"(module-reference?)"
"(lambda(mod_116)"
"(let-values(((or-part_117)(1/module-path? mod_116)))"
"(if or-part_117"
" or-part_117"
"(let-values(((or-part_118)(1/module-path-index? mod_116)))"
"(if or-part_118 or-part_118(1/resolved-module-path? mod_116)))))))"
" (define-values (module-reference-str) \"(or/c module-path? module-path-index? resolved-module-path?)\")"
"(define-values"
"(lifted/1.1$5 lifted/2.1$5 lifted/3.1$4 lifted/4.1$4 lifted/5.1$4)"
"(make-struct-type"
" 'reference->resolved-module-path"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'reference->resolved-module-path"
"(case-lambda((self_119 mod_120)(apply missing-kw self_119 mod_120 null))))))"
"(current-inspector)"
"(case-lambda((self_121 mod_122)(apply missing-kw self_121 mod_122 null)))))"
"(define-values"
"(reference->resolved-module-path32.1)"
"(lambda(load?29_123 mod31_124)"
"(let-values(((mod_125) mod31_124))"
"(let-values(((load?_126) load?29_123))"
"(let-values()"
"(if(1/resolved-module-path? mod_125)"
"(let-values() mod_125)"
"(let-values()"
"(let-values(((mpi_127)"
"(if(1/module-path-index? mod_125) mod_125(1/module-path-index-join mod_125 #f))))"
"(1/module-path-index-resolve mpi_127 load?_126)))))))))"
"(define-values"
"(unpack33.1)"
"(lambda(given-kws_128 given-args_129 mod31_130)"
"(let-values(((load?29_131)(car given-args_129)))(reference->resolved-module-path32.1 load?29_131 mod31_130))))"
"(define-values"
"(reference->resolved-module-path34.1)"
"(lifted/2.1$5"
"(lambda(given-kws_132 given-argc_133)"
"(if(= given-argc_133 3)"
"(let-values(((l2_134) given-kws_132))"
"(if(pair? l2_134)(if(eq?(car l2_134) '#:load?)(null?(cdr l2_134)) #f) #f))"
" #f))"
"(case-lambda((given-kws_135 given-args_136 mod_137)(unpack33.1 given-kws_135 given-args_136 mod_137)))"
" '(#:load?)"
" '(#:load?)))"
"(void)"
"(void)"
"(define-values"
"(1/prop:missing-module 1/exn:missing-module? 1/exn:missing-module-accessor)"
"(make-struct-type-property"
" 'missing-module"
"(lambda(v_3 info_4)"
"(begin"
"(if(if(procedure? v_3)(procedure-arity-includes? v_3 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:missing-module \"(procedure-arity-includes/c 1)\" v_3)))"
" v_3))))"
"(define-values"
"(1/struct:exn:fail:filesystem:missing-module"
" 1/make-exn:fail:filesystem:missing-module"
" 1/exn:fail:filesystem:missing-module?"
" 1/exn:fail:filesystem:missing-module-path)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:filesystem:missing-module"
" struct:exn:fail:filesystem"
" 1"
" 0"
" #f"
"(list"
"(cons 1/prop:missing-module(lambda(e_26)(1/exn:fail:filesystem:missing-module-path e_26))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:filesystem:missing-module)))))"
"(values struct:_5 make-_6 ?_7(make-struct-field-accessor -ref_8 0 'path))))"
"(define-values"
"(1/struct:exn:fail:syntax:missing-module"
" 1/make-exn:fail:syntax:missing-module"
" 1/exn:fail:syntax:missing-module?"
" 1/exn:fail:syntax:missing-module-path)"
"(let-values(((struct:_27 make-_28 ?_29 -ref_30 -set!_31)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:missing-module"
" 1/struct:exn:fail:syntax"
" 1"
" 0"
" #f"
"(list(cons 1/prop:missing-module(lambda(e_48)(1/exn:fail:syntax:missing-module-path e_48))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:syntax:missing-module)))))"
"(values struct:_27 make-_28 ?_29(make-struct-field-accessor -ref_30 0 'path))))"
"(define-values"
"(1/current-module-path-for-load)"
"(make-parameter"
" #f"
"(lambda(v_49)"
"(begin"
"(if(let-values(((or-part_50)(not v_49)))"
"(if or-part_50"
" or-part_50"
"(let-values(((or-part_51)(1/module-path? v_49)))"
"(if or-part_51 or-part_51(if(syntax?$1 v_49)(1/module-path?(syntax->datum$1 v_49)) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-path-for-load"
"(string-append"
"             \"(or/c module-path?\""
"             \" (and/c syntax? (lambda (stx) (module-path? (syntax->datum stx))))\""
"             \" #f)\")"
" v_49)))"
" v_49))))"
"(define-values"
"(maybe-raise-missing-module)"
"(lambda(name_52 filename_53 pre_54 rel_55 post_56 errstr_57)"
"(let-values(((path_58)(1/current-module-path-for-load)))"
"(if path_58"
"(let-values()"
"(begin"
"(if(syntax?$1 path_58)"
"(let-values()"
"(raise"
"(1/make-exn:fail:syntax:missing-module"
"(format"
"(string-append"
"                    \"~a: cannot open module file\\n\""
"                    \"  module path: ~a\\n\""
"                    \"  path: ~a~a~a~a\\n\""
"                    \"  system error: ~a\")"
"(if(syntax-srcloc path_58)(srcloc->string(syntax-srcloc path_58)) name_52)"
"(syntax->datum$1 path_58)"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)"
"(list path_58)"
"(syntax->datum$1 path_58))))"
"(void))"
"(raise"
"(1/make-exn:fail:filesystem:missing-module"
"(format"
"(string-append"
"                \"~a: cannot open module file\\n\""
"                \"  module path: ~a\\n\""
"                \"  path: ~a~a~a~a\\n\""
"                \"  system error: ~a\")"
" name_52"
" path_58"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)"
" path_58))))"
"(void)))))"
"(void)"
"(void)"
"(define-values"
"(1/local-expand)"
"(let-values(((local-expand6_1)"
"(lambda(s3_2 context4_3 stop-ids5_4 intdefs1_5 intdefs2_6)"
"(let-values(((s_7) s3_2))"
"(let-values(((context_8) context4_3))"
"(let-values(((stop-ids_9) stop-ids5_4))"
"(let-values(((intdefs_10)(if intdefs2_6 intdefs1_5 #f)))"
"(let-values()"
"(let-values(((temp63_11) 'local-expand)"
"((s64_12) s_7)"
"((context65_13) context_8)"
"((stop-ids66_14) stop-ids_9)"
"((intdefs67_15) intdefs_10))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp63_11"
" s64_12"
" context65_13"
" stop-ids66_14"
" intdefs67_15"
" #t))))))))))"
"(case-lambda"
"((s_16 context_17 stop-ids_18)(local-expand6_1 s_16 context_17 stop-ids_18 #f #f))"
"((s_19 context_20 stop-ids_21 intdefs1_22)(local-expand6_1 s_19 context_20 stop-ids_21 intdefs1_22 #t)))))"
"(define-values"
"(1/local-expand/capture-lifts)"
"(let-values(((local-expand/capture-lifts15_23)"
"(lambda(s12_24 context13_25 stop-ids14_26 intdefs8_27 lift-key9_28 intdefs10_29 lift-key11_30)"
"(let-values(((s_31) s12_24))"
"(let-values(((context_32) context13_25))"
"(let-values(((stop-ids_33) stop-ids14_26))"
"(let-values(((intdefs_34)(if intdefs10_29 intdefs8_27 #f)))"
"(let-values(((lift-key_35)(if lift-key11_30 lift-key9_28(generate-lift-key))))"
"(let-values()"
"(let-values(((temp68_37) 'local-expand)"
"((s69_38) s_31)"
"((context70_39) context_32)"
"((stop-ids71_40) stop-ids_33)"
"((intdefs72_41) intdefs_34)"
"((temp73_42) #t)"
"((lift-key74_43) lift-key_35))"
"(do-local-expand60.1"
" #f"
" #f"
" temp73_42"
" #t"
" lift-key74_43"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp68_37"
" s69_38"
" context70_39"
" stop-ids71_40"
" intdefs72_41"
" #t)))))))))))"
"(case-lambda"
"((s_44 context_45 stop-ids_46)(local-expand/capture-lifts15_23 s_44 context_45 stop-ids_46 #f #f #f #f))"
"((s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51)"
"(local-expand/capture-lifts15_23 s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51 #t #t))"
"((s_52 context_53 stop-ids_54 intdefs8_55)"
"(local-expand/capture-lifts15_23 s_52 context_53 stop-ids_54 intdefs8_55 #f #t #f)))))"
"(define-values"
"(1/local-transformer-expand)"
"(let-values(((local-transformer-expand22_56)"
"(lambda(s19_57 context20_58 stop-ids21_59 intdefs17_60 intdefs18_61)"
"(let-values(((s_62) s19_57))"
"(let-values(((context_63) context20_58))"
"(let-values(((stop-ids_64) stop-ids21_59))"
"(let-values(((intdefs_65)(if intdefs18_61 intdefs17_60 #f)))"
"(let-values()"
"(let-values(((temp75_67) 'local-expand)"
"((s76_68) s_62)"
"((context77_69) context_63)"
"((stop-ids78_70) stop-ids_64)"
"((intdefs79_71) intdefs_65)"
"((temp80_72) #t))"
"(do-local-expand60.1"
" temp80_72"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp75_67"
" s76_68"
" context77_69"
" stop-ids78_70"
" intdefs79_71"
" #t))))))))))"
"(case-lambda"
"((s_73 context_74 stop-ids_75)(local-transformer-expand22_56 s_73 context_74 stop-ids_75 #f #f))"
"((s_76 context_77 stop-ids_78 intdefs17_79)"
"(local-transformer-expand22_56 s_76 context_77 stop-ids_78 intdefs17_79 #t)))))"
"(define-values"
"(1/local-transformer-expand/capture-lifts)"
"(let-values(((local-transformer-expand/capture-lifts31_80)"
"(lambda(s28_81 context29_82 stop-ids30_83 intdefs24_84 lift-key25_85 intdefs26_86 lift-key27_87)"
"(let-values(((s_88) s28_81))"
"(let-values(((context_89) context29_82))"
"(let-values(((stop-ids_90) stop-ids30_83))"
"(let-values(((intdefs_91)(if intdefs26_86 intdefs24_84 #f)))"
"(let-values(((lift-key_92)(if lift-key27_87 lift-key25_85(generate-lift-key))))"
"(let-values()"
"(let-values(((temp81_94) 'local-expand)"
"((s82_95) s_88)"
"((context83_96) context_89)"
"((stop-ids84_97) stop-ids_90)"
"((intdefs85_98) intdefs_91)"
"((temp86_99) #t)"
"((temp87_100) #t)"
"((lift-key88_101) lift-key_92))"
"(do-local-expand60.1"
" temp86_99"
" #t"
" temp87_100"
" #t"
" lift-key88_101"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_94"
" s82_95"
" context83_96"
" stop-ids84_97"
" intdefs85_98"
" #t)))))))))))"
"(case-lambda"
"((s_102 context_103 stop-ids_104)"
"(local-transformer-expand/capture-lifts31_80 s_102 context_103 stop-ids_104 #f #f #f #f))"
"((s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109)"
"(local-transformer-expand/capture-lifts31_80 s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109 #t #t))"
"((s_110 context_111 stop-ids_112 intdefs24_113)"
"(local-transformer-expand/capture-lifts31_80 s_110 context_111 stop-ids_112 intdefs24_113 #f #t #f)))))"
"(define-values"
"(do-syntax-local-expand-expression39.1)"
"(lambda(local-keys33_114 local-keys35_115 local-values34_116 local-values36_117 who37_118 s38_119)"
"(let-values(((who_120) who37_118))"
"(let-values(((s_121) s38_119))"
"(let-values(((local-keys_122)(if local-keys35_115 local-keys33_114 null)))"
"(let-values(((local-values_123)(if local-values36_117 local-values34_116 null)))"
"(let-values()"
"(let-values(((exp-s_124)"
"(let-values(((who89_128) who_120)"
"((s90_129) s_121)"
"((temp91_130) 'expression)"
"((null92_131) null)"
"((temp93_132) #f)"
"((temp94_133) #t)"
"((local-keys95_134) local-keys_122)"
"((local-values96_135) local-values_123))"
"(do-local-expand60.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" local-keys95_134"
" #t"
" local-values96_135"
" #t"
" temp94_133"
" #t"
" who89_128"
" s90_129"
" temp91_130"
" null92_131"
" temp93_132"
" #t))))"
"(let-values(((ctx_125)(let-values()(get-current-expand-context15.1 #f #f #f #f))))"
"(let-values(((ae_126)"
"(already-expanded1.1"
"(flip-introduction-scopes exp-s_124 ctx_125)"
"(expand-context-binding-layer ctx_125))))"
"(begin"
"(let-values(((obs_136)(expand-context-observer ctx_125)))"
"(if obs_136"
"(let-values()(let-values()(call-expand-observe obs_136 'opaque-expr ae_126)))"
"(void)))"
"(let-values(((obs_137)(expand-context-observer ctx_125)))"
"(if obs_137"
"(let-values()(let-values()(call-expand-observe obs_137 'exit-local exp-s_124)))"
"(void)))"
"(values exp-s_124(flip-introduction-scopes(datum->syntax$1 #f ae_126) ctx_125)))))))))))))"
"(define-values"
"(1/syntax-local-expand-expression)"
"(lambda(s_161)"
"(let-values(((temp97_162) 'syntax-local-expand-expression)((s98_163) s_161))"
"(do-syntax-local-expand-expression39.1 #f #f #f #f temp97_162 s98_163))))"
"(define-values"
"(1/syntax-local-expand-expression/extend-environment)"
"(lambda(s_164 keys_165 values_166)"
"(let-values(((temp99_168) 'syntax-local-expand-expression/extend-environment)"
"((s100_169) s_164)"
"((keys101_170) keys_165)"
"((values102_171) values_166))"
"(do-syntax-local-expand-expression39.1 keys101_170 #t values102_171 #t temp99_168 s100_169))))"
"(define-values"
"(do-local-expand60.1)"
"(lambda(as-transformer?43_172"
" as-transformer?49_173"
" capture-lifts?42_174"
" capture-lifts?48_175"
" lift-key44_176"
" lift-key50_177"
" local-keys46_178"
" local-keys52_179"
" local-values47_180"
" local-values53_181"
" skip-log-exit?45_182"
" skip-log-exit?51_183"
" who56_184"
" s57_185"
" context58_186"
" stop-ids59_187"
" intdefs54_188"
" intdefs55_189)"
"(let-values(((who_190) who56_184))"
"(let-values(((s_191) s57_185))"
"(let-values(((context_192) context58_186))"
"(let-values(((stop-ids_193) stop-ids59_187))"
"(let-values(((intdefs_194)(if intdefs55_189 intdefs54_188 #f)))"
"(let-values(((capture-lifts?_195)(if capture-lifts?48_175 capture-lifts?42_174 #f)))"
"(let-values(((as-transformer?_196)(if as-transformer?49_173 as-transformer?43_172 #f)))"
"(let-values(((lift-key_197)"
"(if lift-key50_177"
" lift-key44_176"
"(if(let-values(((or-part_198) capture-lifts?_195))"
"(if or-part_198 or-part_198 as-transformer?_196))"
"(generate-lift-key)"
" #f))))"
"(let-values(((skip-log-exit?_199)(if skip-log-exit?51_183 skip-log-exit?45_182 #f)))"
"(let-values(((local-keys_200)(if local-keys52_179 local-keys46_178 null)))"
"(let-values(((local-values_201)(if local-values53_181 local-values47_180 null)))"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_191)"
"(void)"
"                                                (let-values () (raise-argument-error who_190 \"syntax?\" s_191)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_209)(list? context_192)))"
"(if or-part_209"
" or-part_209"
"(memq"
" context_192"
"(if as-transformer?_196"
" '(expression top-level)"
" '(expression top-level module module-begin)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_190"
"(if as-transformer?_196"
"                                                       \"(or/c 'expression 'top-level list?)\""
"                                                       \"(or/c 'expression 'top-level 'module 'module-begin list?)\")"
" context_192)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_210)(not stop-ids_193)))"
"(if or-part_210"
" or-part_210"
"(if(list? stop-ids_193)"
"(andmap2 identifier? stop-ids_193)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_190"
"                                                       \"(or/c (listof identifier?) #f)\""
" stop-ids_193)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_211)(not intdefs_194)))"
"(if or-part_211"
" or-part_211"
"(let-values(((or-part_212)"
"(1/internal-definition-context? intdefs_194)))"
"(if or-part_212"
" or-part_212"
"(if(list? intdefs_194)"
"(andmap2 1/internal-definition-context? intdefs_194)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_190"
"                                                         \"(or/c #f internal-definitionc-context? (listof internal-definitionc-context?))\""
" intdefs_194)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-keys_200)"
"(void)"
"(let-values()"
"                                                          (raise-argument-error who_190 \"list?\" local-keys_200)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(list? local-values_201)"
"(void)"
"(let-values()"
"                                                            (raise-argument-error who_190 \"list?\" local-values_201)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(=(length local-keys_200)(length local-values_201))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_190"
"                                                               \"different lengths for list of keys and values for extending the environment\""
"                                                               \"keys\""
" local-keys_200"
"                                                               \"values\""
" local-values_201)))"
"(values))))"
"(let-values(((ctx_202)"
"(let-values(((who103_213) who_190))"
"(get-current-expand-context15.1 #f #f who103_213 #t))))"
"(let-values(((phase_203)"
"(if as-transformer?_196"
"(add1(expand-context-phase ctx_202))"
"(expand-context-phase ctx_202))))"
"(let-values(((base-local-ctx_204)"
"(let-values(((ctx104_215) ctx_202)"
"((context105_216) context_192)"
"((phase106_217) phase_203)"
"((intdefs107_218) intdefs_194)"
"((stop-ids108_219) stop-ids_193))"
"(make-local-expand-context33.1"
" context105_216"
" intdefs107_218"
" phase106_217"
" #t"
" stop-ids108_219"
" #t"
" ctx104_215))))"
"(let-values(((local-ctx_205)"
"(let-values(((v_220) base-local-ctx_204))"
"(let-values(((the-struct_221) v_220))"
"(if(expand-context/outer? the-struct_221)"
"(let-values(((inner109_222)"
"(let-values(((the-struct_223)"
"(root-expand-context/outer-inner"
" v_220)))"
"(if(expand-context/inner?"
" the-struct_223)"
"(let-values(((user-env110_224)"
"(let-values(((user-env_225)"
"(expand-context-user-env"
" base-local-ctx_204)))"
"(let-values(((lst_226)"
" local-keys_200)"
"((lst_227)"
" local-values_201))"
"(begin"
"(if(list?"
" lst_226)"
"(void)"
"(let-values()"
"(in-list"
" lst_226)))"
"(if(list?"
" lst_227)"
"(void)"
"(let-values()"
"(in-list"
" lst_227)))"
"((letrec-values(((for-loop_228)"
"(lambda(user-env_229"
" lst_230"
" lst_231)"
"(if(if(pair?"
" lst_230)"
"(pair?"
" lst_231)"
" #f)"
"(let-values(((key_232)"
"(unsafe-car"
" lst_230))"
"((rest_233)"
"(unsafe-cdr"
" lst_230))"
"((value_234)"
"(unsafe-car"
" lst_231))"
"((rest_235)"
"(unsafe-cdr"
" lst_231)))"
"(let-values(((user-env_236)"
"(let-values(((user-env_237)"
" user-env_229))"
"(let-values(((user-env_238)"
"(let-values()"
"(hash-set"
" user-env_237"
" key_232"
" value_234))))"
"(values"
" user-env_238)))))"
"(if(not"
" #f)"
"(for-loop_228"
" user-env_236"
" rest_233"
" rest_235)"
" user-env_236)))"
" user-env_229))))"
" for-loop_228)"
" user-env_225"
" lst_226"
" lst_227))))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_223)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_223)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_223)"
"(root-expand-context/inner-defined-syms"
" the-struct_223)"
"(root-expand-context/inner-counter"
" the-struct_223)"
"(root-expand-context/inner-lift-key"
" the-struct_223)"
"(expand-context/inner-to-parsed?"
" the-struct_223)"
"(expand-context/inner-phase"
" the-struct_223)"
"(expand-context/inner-namespace"
" the-struct_223)"
" user-env110_224"
"(expand-context/inner-just-once?"
" the-struct_223)"
"(expand-context/inner-module-begin-k"
" the-struct_223)"
"(expand-context/inner-allow-unbound?"
" the-struct_223)"
"(expand-context/inner-in-local-expand?"
" the-struct_223)"
"(expand-context/inner-stops"
" the-struct_223)"
"(expand-context/inner-declared-submodule-names"
" the-struct_223)"
"(expand-context/inner-lifts"
" the-struct_223)"
"(expand-context/inner-lift-envs"
" the-struct_223)"
"(expand-context/inner-module-lifts"
" the-struct_223)"
"(expand-context/inner-require-lifts"
" the-struct_223)"
"(expand-context/inner-to-module-lifts"
" the-struct_223)"
"(expand-context/inner-requires+provides"
" the-struct_223)"
"(expand-context/inner-observer"
" the-struct_223)"
"(expand-context/inner-for-serializable?"
" the-struct_223)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                         \"expand-context/inner?\""
" the-struct_223)))))"
"(expand-context/outer1.1"
" inner109_222"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_221)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_221)"
"(root-expand-context/outer-frame-id"
" the-struct_221)"
"(expand-context/outer-context the-struct_221)"
"(expand-context/outer-env the-struct_221)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_221)"
"(expand-context/outer-scopes the-struct_221)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_221)"
"(expand-context/outer-binding-layer"
" the-struct_221)"
"(expand-context/outer-reference-records"
" the-struct_221)"
"(expand-context/outer-only-immediate?"
" the-struct_221)"
"(expand-context/outer-need-eventually-defined"
" the-struct_221)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_221)"
"(expand-context/outer-name the-struct_221)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                       \"expand-context/outer?\""
" the-struct_221))))))"
"(let-values(((input-s_206)"
"(let-values(((temp111_239)"
"(flip-introduction-scopes"
" s_191"
" ctx_202))"
"((intdefs112_240) intdefs_194))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" #f"
" #f"
" temp111_239"
" intdefs112_240))))"
"(let-values((()"
"(begin"
"(let-values(((obs_241)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_241"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_241"
" 'enter-local)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if as-transformer?_196"
"(let-values()"
"(let-values(((obs_242)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_242"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_242"
" 'phase-up)))"
"(void))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_243)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_243"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_243"
" 'local-pre"
" input-s_206)"
"(call-expand-observe"
" obs_243"
" 'start-expand))))"
"(void)))"
"(values))))"
"(let-values(((output-s_207)"
"(if(if as-transformer?_196"
" capture-lifts?_195"
" #f)"
"(let-values()"
"(let-values(((input-s113_245)"
" input-s_206)"
"((local-ctx114_246)"
" local-ctx_205)"
"((context115_247)"
" context_192)"
"((temp116_248) #f)"
"((temp117_249) #t)"
"((lift-key118_250)"
" lift-key_197)"
"((temp119_251) #t))"
"(expand-transformer43.1"
" temp119_251"
" #t"
" temp117_249"
" #t"
" context115_247"
" #t"
" temp116_248"
" #t"
" lift-key118_250"
" #t"
" input-s113_245"
" local-ctx114_246)))"
"(if as-transformer?_196"
"(let-values()"
"(let-values(((input-s120_253)"
" input-s_206)"
"((local-ctx121_254)"
" local-ctx_205)"
"((context122_255)"
" context_192)"
"((temp123_256) #f)"
"((temp124_257)"
"(eq?"
" 'top-level"
" context_192))"
"((lift-key125_258)"
" lift-key_197))"
"(expand-transformer43.1"
" #f"
" #f"
" temp124_257"
" #t"
" context122_255"
" #t"
" temp123_256"
" #t"
" lift-key125_258"
" #t"
" input-s120_253"
" local-ctx121_254)))"
"(if capture-lifts?_195"
"(let-values()"
"(let-values(((input-s126_260)"
" input-s_206)"
"((local-ctx127_261)"
" local-ctx_205)"
"((temp128_262) #t)"
"((lift-key129_263)"
" lift-key_197)"
"((temp130_264) #t))"
"(expand/capture-lifts28.1"
" temp130_264"
" #t"
" temp128_262"
" #t"
" #f"
" #f"
" lift-key129_263"
" #t"
" input-s126_260"
" local-ctx127_261)))"
"(let-values()"
"(let-values(((input-s131_265)"
" input-s_206)"
"((local-ctx132_266)"
" local-ctx_205))"
"(expand5.1"
" #f"
" #f"
" input-s131_265"
" local-ctx132_266))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_267)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_267"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_267"
" 'local-post"
" output-s_207)))"
"(void)))"
"(values))))"
"(let-values(((result-s_208)"
"(flip-introduction-scopes"
" output-s_207"
" ctx_202)))"
"(begin"
"(if skip-log-exit?_199"
"(void)"
"(let-values()"
"(let-values(((obs_268)"
"(expand-context-observer"
" local-ctx_205)))"
"(if obs_268"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_268"
" 'exit-local"
" result-s_208)))"
"(void)))))"
" result-s_208))))))))))))))))))))))))))))))))))"
"(void)"
"(void)"
"(define-values"
"(1/syntax-tainted?)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-tainted? \"syntax?\" s_1)))"
"(syntax-tainted?$1 s_1))))"
"(define-values"
"(1/syntax-arm)"
"(let-values(((syntax-arm6_2)"
"(lambda(s5_3 maybe-insp1_4 use-mode?2_5 maybe-insp3_6 use-mode?4_7)"
"(let-values(((s_8) s5_3))"
"(let-values(((maybe-insp_9)(if maybe-insp3_6 maybe-insp1_4 #f)))"
"(let-values(((use-mode?_10)(if use-mode?4_7 use-mode?2_5 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
"                                            (let-values () (raise-argument-error 'syntax-arm \"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_12)(not maybe-insp_9)))"
"(if or-part_12 or-part_12(inspector? maybe-insp_9)))"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'syntax-arm \"(or/c inspector? #f)\" maybe-insp_9)))"
"(values))))"
"(let-values(((insp_11)(inspector-for-taint maybe-insp_9)))"
"(if use-mode?_10"
"(let-values()"
"(taint-dispatch"
" s_8"
"(lambda(s_13)(syntax-arm$1 s_13 insp_11))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-arm$1 s_8 insp_11)))))))))))))"
"(case-lambda"
"((s_14)(syntax-arm6_2 s_14 #f #f #f #f))"
"((s_15 maybe-insp_16 use-mode?2_17)(syntax-arm6_2 s_15 maybe-insp_16 use-mode?2_17 #t #t))"
"((s_18 maybe-insp1_19)(syntax-arm6_2 s_18 maybe-insp1_19 #f #t #f)))))"
"(define-values"
"(1/syntax-disarm)"
"(lambda(s_20 maybe-insp_21)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_20) (void) (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_20)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_23)(not maybe-insp_21)))"
"(if or-part_23 or-part_23(inspector? maybe-insp_21)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-disarm \"(or/c inspector? #f)\" maybe-insp_21)))"
"(values))))"
"(let-values(((insp_22)(inspector-for-taint maybe-insp_21)))(syntax-disarm$1 s_20 insp_22))))))"
"(define-values"
"(1/syntax-rearm)"
"(let-values(((syntax-rearm12_24)"
"(lambda(s10_25 from-s11_26 use-mode?8_27 use-mode?9_28)"
"(let-values(((s_29) s10_25))"
"(let-values(((from-s_30) from-s11_26))"
"(let-values(((use-mode?_31)(if use-mode?9_28 use-mode?8_27 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_29)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_29)))"
"(if(syntax?$1 from-s_30)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" from-s_30)))"
"(if use-mode?_31"
"(let-values()"
"(taint-dispatch"
" s_29"
"(lambda(s_32)(syntax-rearm$1 s_32 from-s_30))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-rearm$1 s_29 from-s_30)))))))))))"
"(case-lambda"
"((s_33 from-s_34)(syntax-rearm12_24 s_33 from-s_34 #f #f))"
"((s_35 from-s_36 use-mode?8_37)(syntax-rearm12_24 s_35 from-s_36 use-mode?8_37 #t)))))"
"(define-values"
"(1/syntax-taint)"
"(lambda(s_38)"
"(begin"
"      (if (syntax?$1 s_38) (void) (let-values () (raise-argument-error 'syntax-taint \"syntax?\" s_38)))"
"(syntax-taint$1 s_38))))"
"(define-values"
"(inspector-for-taint)"
"(lambda(maybe-insp_39)"
"(let-values(((or-part_40) maybe-insp_39))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(current-module-code-inspector)))"
"(if or-part_41 or-part_41(current-code-inspector)))))))"
"(void)"
"(void)"
"(define-values"
"(1/variable-reference->empty-namespace)"
"(lambda(vr_1)"
"(begin"
"(if(1/variable-reference? vr_1)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->empty-namespace \"variable-reference?\" vr_1)))"
"(let-values(((temp1_2)(1/variable-reference->namespace vr_1)))(new-namespace9.1 #f #f #f #f temp1_2 #t)))))"
"(define-values"
"(1/variable-reference->namespace)"
"(lambda(vr_3)"
"(begin"
"(if(1/variable-reference? vr_3)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->namespace \"variable-reference?\" vr_3)))"
"(1/instance-data(1/variable-reference->instance vr_3)))))"
"(define-values"
"(1/variable-reference->module-path-index)"
"(lambda(vr_4)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_4)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-path-index \"variable-reference?\" vr_4)))"
"(values))))"
"(let-values(((mpi_5)(namespace-mpi(1/variable-reference->namespace vr_4))))"
"(if(top-level-module-path-index? mpi_5) #f mpi_5)))))"
"(define-values"
"(1/variable-reference->resolved-module-path)"
"(lambda(vr_6)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_6)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->resolved-module-path \"variable-reference?\" vr_6)))"
"(values))))"
"(let-values(((mpi_7)(1/variable-reference->module-path-index vr_6)))"
"(if mpi_7(1/module-path-index-resolve mpi_7) #f)))))"
"(define-values"
"(1/variable-reference->module-source)"
"(lambda(vr_8)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_8)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-source \"variable-reference?\" vr_8)))"
"(values))))"
"(let-values(((ns_9)(1/variable-reference->namespace vr_8)))(namespace-source-name ns_9)))))"
"(define-values"
"(1/variable-reference->phase)"
"(lambda(vr_10)"
"(begin"
"(if(1/variable-reference? vr_10)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->phase \"variable-reference?\" vr_10)))"
"(namespace-phase(1/variable-reference->namespace vr_10)))))"
"(define-values"
"(1/variable-reference->module-base-phase)"
"(lambda(vr_11)"
"(begin"
"(if(1/variable-reference? vr_11)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->module-base-phase \"variable-reference?\" vr_11)))"
"(namespace-0-phase(1/variable-reference->namespace vr_11)))))"
"(define-values"
"(1/variable-reference->module-declaration-inspector)"
"(lambda(vr_12)"
"(begin"
"(if(1/variable-reference? vr_12)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->base-phase \"variable-reference?\" vr_12)))"
"(let-values(((or-part_13)(namespace-declaration-inspector(1/variable-reference->namespace vr_12))))"
"(if or-part_13"
" or-part_13"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"           \"given variable reference is not from a module\"))))))"
"(void)"
"(void)"
"(define-values"
"(primitive-ids)"
"(seteq"
" 'syntax?"
" 'syntax-e"
" 'syntax->datum"
" 'datum->syntax"
" 'bound-identifier=?"
" 'free-identifier=?"
" 'free-transformer-identifier=?"
" 'free-template-identifier=?"
" 'free-label-identifier=?"
" 'identifier-binding"
" 'identifier-transformer-binding"
" 'identifier-template-binding"
" 'identifier-label-binding"
" 'identifier-binding-symbol"
" 'identifier-prune-lexical-context"
" 'syntax-debug-info"
" 'syntax-track-origin"
" 'syntax-shift-phase-level"
" 'syntax-source-module"
" 'identifier-prune-to-source-module"
" 'syntax-source"
" 'syntax-line"
" 'syntax-column"
" 'syntax-position"
" 'syntax-span"
" 'syntax->list"
" 'syntax-property"
" 'syntax-property-preserved?"
" 'syntax-property-symbol-keys"
" 'syntax-original?"
" 'syntax-tainted?"
" 'syntax-arm"
" 'syntax-disarm"
" 'syntax-rearm"
" 'syntax-taint"
" 'raise-syntax-error"
" 'struct:exn:fail:syntax"
" 'exn:fail:syntax"
" 'make-exn:fail:syntax"
" 'exn:fail:syntax?"
" 'exn:fail:syntax-exprs"
" 'struct:exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound"
" 'make-exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound?"
" 'current-module-path-for-load"
" 'prop:missing-module"
" 'exn:missing-module?"
" 'exn:missing-module-accessor"
" 'struct:exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module"
" 'make-exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module?"
" 'exn:fail:filesystem:missing-module-path"
" 'struct:exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module"
" 'make-exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module?"
" 'exn:fail:syntax:missing-module-path"
" 'read-syntax"
" 'read-syntax/recursive"
" 'syntax-transforming?"
" 'syntax-transforming-with-lifts?"
" 'syntax-transforming-module-expression?"
" 'syntax-local-transforming-module-provides?"
" 'syntax-local-context"
" 'syntax-local-introduce"
" 'syntax-local-identifier-as-binding"
" 'syntax-local-phase-level"
" 'syntax-local-name"
" 'make-syntax-introducer"
" 'make-syntax-delta-introducer"
" 'syntax-local-value"
" 'syntax-local-value/immediate"
" 'syntax-local-lift-expression"
" 'syntax-local-lift-values-expression"
" 'syntax-local-lift-context"
" 'syntax-local-lift-module"
" 'syntax-local-lift-require"
" 'syntax-local-lift-provide"
" 'syntax-local-lift-module-end-declaration"
" 'syntax-local-module-defined-identifiers"
" 'syntax-local-module-required-identifiers"
" 'syntax-local-module-exports"
" 'syntax-local-submodules"
" 'syntax-local-get-shadower"
" 'local-expand"
" 'local-expand/capture-lifts"
" 'local-transformer-expand"
" 'local-transformer-expand/capture-lifts"
" 'syntax-local-expand-expression"
" 'syntax-local-expand-expression/extend-environment"
" 'syntax-local-environment-ref"
" 'internal-definition-context?"
" 'syntax-local-make-definition-context"
" 'syntax-local-bind-syntaxes"
" 'internal-definition-context-binding-identifiers"
" 'internal-definition-context-introduce"
" 'internal-definition-context-seal"
" 'identifier-remove-from-definition-context"
" 'make-set!-transformer"
" 'prop:set!-transformer"
" 'set!-transformer?"
" 'set!-transformer-procedure"
" 'rename-transformer?"
" 'prop:rename-transformer"
" 'make-rename-transformer"
" 'rename-transformer-target"
" 'prop:liberal-define-context"
" 'liberal-define-context?"
" 'prop:expansion-contexts"
" 'module-path?"
" 'resolved-module-path?"
" 'make-resolved-module-path"
" 'resolved-module-path-name"
" 'module-path-index?"
" 'module-path-index-resolve"
" 'module-path-index-join"
" 'module-path-index-split"
" 'module-path-index-submodule"
" 'current-module-name-resolver"
" 'current-module-declare-name"
" 'current-module-declare-source"
" 'current-namespace"
" 'namespace-module-registry"
" 'namespace?"
" 'variable-reference->empty-namespace"
" 'variable-reference->namespace"
" 'variable-reference->resolved-module-path"
" 'variable-reference->module-path-index"
" 'variable-reference->module-source"
" 'variable-reference->phase"
" 'variable-reference->module-base-phase"
" 'variable-reference->module-declaration-inspector))"
"(call-with-values(lambda()(add-core-primitive! 'syntax? syntax?$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-e 1/syntax-e)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->datum 1/syntax->datum)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'datum->syntax 1/datum->syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'bound-identifier=? 1/bound-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-identifier=? 1/free-identifier=?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-transformer-identifier=? 1/free-transformer-identifier=?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-template-identifier=? 1/free-template-identifier=?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-label-identifier=? 1/free-label-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-binding 1/identifier-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-transformer-binding 1/identifier-transformer-binding))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-template-binding 1/identifier-template-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-label-binding 1/identifier-label-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-binding-symbol 1/identifier-binding-symbol))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-lexical-context 1/identifier-prune-lexical-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-debug-info 1/syntax-debug-info)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-track-origin 1/syntax-track-origin)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-shift-phase-level 1/syntax-shift-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source-module 1/syntax-source-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-to-source-module 1/identifier-prune-to-source-module))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source 1/syntax-source)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-line 1/syntax-line)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-column 1/syntax-column)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-position 1/syntax-position)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-span 1/syntax-span)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->list 1/syntax->list)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-property syntax-property$1)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-preserved? 1/syntax-property-preserved?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-symbol-keys 1/syntax-property-symbol-keys))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-original? 1/syntax-original?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-tainted? 1/syntax-tainted?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-arm 1/syntax-arm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-disarm 1/syntax-disarm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-rearm 1/syntax-rearm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-taint 1/syntax-taint)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'raise-syntax-error raise-syntax-error$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'struct:exn:fail:syntax 1/struct:exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax make-exn:fail:syntax$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-exn:fail:syntax make-exn:fail:syntax$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax? 1/exn:fail:syntax?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax-exprs 1/exn:fail:syntax-exprs)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'struct:exn:fail:syntax:unbound 1/struct:exn:fail:syntax:unbound))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound? 1/exn:fail:syntax:unbound?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-path-for-load 1/current-module-path-for-load))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:missing-module 1/prop:missing-module)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:missing-module? 1/exn:missing-module?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:missing-module-accessor 1/exn:missing-module-accessor))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'struct:exn:fail:filesystem:missing-module 1/struct:exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module? 1/exn:fail:filesystem:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module-path 1/exn:fail:filesystem:missing-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'struct:exn:fail:syntax:missing-module 1/struct:exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module? 1/exn:fail:syntax:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module-path 1/exn:fail:syntax:missing-module-path))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax 1/read-syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax/recursive 1/read-syntax/recursive)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-transforming? 1/syntax-transforming?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-with-lifts? 1/syntax-transforming-with-lifts?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-module-expression? 1/syntax-transforming-module-expression?))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'syntax-local-transforming-module-provides? 1/syntax-local-transforming-module-provides?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-context 1/syntax-local-context)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-introduce 1/syntax-local-introduce)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-identifier-as-binding 1/syntax-local-identifier-as-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-phase-level 1/syntax-local-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-name 1/syntax-local-name)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-syntax-introducer 1/make-syntax-introducer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-syntax-delta-introducer 1/make-syntax-delta-introducer))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-value 1/syntax-local-value)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-value/immediate 1/syntax-local-value/immediate))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-expression 1/syntax-local-lift-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-values-expression 1/syntax-local-lift-values-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-context 1/syntax-local-lift-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-lift-module 1/syntax-local-lift-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-require 1/syntax-local-lift-require))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-provide 1/syntax-local-lift-provide))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-module-end-declaration 1/syntax-local-lift-module-end-declaration))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-defined-identifiers 1/syntax-local-module-defined-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-required-identifiers 1/syntax-local-module-required-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-exports 1/syntax-local-module-exports))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-submodules 1/syntax-local-submodules)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-get-shadower 1/syntax-local-get-shadower))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-expand 1/local-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-expand/capture-lifts 1/local-expand/capture-lifts))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-transformer-expand 1/local-transformer-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-transformer-expand/capture-lifts 1/local-transformer-expand/capture-lifts))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-expand-expression 1/syntax-local-expand-expression))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'syntax-local-expand-expression/extend-environment"
" 1/syntax-local-expand-expression/extend-environment))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-environment-ref 1/syntax-local-environment-ref))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context? 1/internal-definition-context?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-make-definition-context 1/syntax-local-make-definition-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-bind-syntaxes 1/syntax-local-bind-syntaxes))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'internal-definition-context-binding-identifiers"
" 1/internal-definition-context-binding-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-introduce 1/internal-definition-context-introduce))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-seal 1/internal-definition-context-seal))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'identifier-remove-from-definition-context 1/identifier-remove-from-definition-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-set!-transformer 1/make-set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:set!-transformer 1/prop:set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'set!-transformer? 1/set!-transformer?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'set!-transformer-procedure 1/set!-transformer-procedure))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'rename-transformer? 1/rename-transformer?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:rename-transformer 1/prop:rename-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-rename-transformer 1/make-rename-transformer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'rename-transformer-target 1/rename-transformer-target))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'prop:liberal-define-context 1/prop:liberal-define-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'liberal-define-context? has-liberal-define-context-property?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:expansion-contexts 1/prop:expansion-contexts)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path? 1/module-path?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'resolved-module-path? 1/resolved-module-path?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-resolved-module-path 1/make-resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'resolved-module-path-name 1/resolved-module-path-name))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index? 1/module-path-index?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-resolve 1/module-path-index-resolve))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-join 1/module-path-index-join)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-split 1/module-path-index-split)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-submodule 1/module-path-index-submodule))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-name-resolver 1/current-module-name-resolver))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-name 1/current-module-declare-name))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-source 1/current-module-declare-source))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'current-namespace 1/current-namespace)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'namespace-module-registry 1/namespace-module-registry))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'namespace? 1/namespace?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->empty-namespace 1/variable-reference->empty-namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->namespace 1/variable-reference->namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->resolved-module-path 1/variable-reference->resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-path-index 1/variable-reference->module-path-index))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-source 1/variable-reference->module-source))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->phase 1/variable-reference->phase))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-base-phase 1/variable-reference->module-base-phase))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'variable-reference->module-declaration-inspector"
" 1/variable-reference->module-declaration-inspector))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(declare-kernel-module!6.1)"
"(lambda(eval1_25 main-ids2_26 ns5_27)"
"(let-values(((ns_28) ns5_27))"
"(let-values()"
"(let-values(((main-ids_30) main-ids2_26))"
"(let-values()"
"(begin"
"(let-values(((...nder/boot/kernel.rkt:23:2_31) copy-runtime-module!26.1)"
"((temp51_32) '#%kernel)"
"((temp52_33) '#%runtime)"
"((temp53_34)(set-union primitive-ids main-ids_30))"
"((temp54_35)"
"(hasheq"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"((ns55_36) ns_28))"
"(copy-runtime-module!24.1 #f #f temp54_35 #t ns55_36 #f #f #f #f temp53_34 #t temp52_33 #t temp51_32))"
"(let-values(((...nder/boot/kernel.rkt:30:2_37) declare-reexporting-module!50.1)"
"((temp56_38) '#%kernel)"
"((temp57_39) '(#%core #%runtime #%main))"
"((ns58_40) ns_28))"
"(declare-reexporting-module!48.1 ns58_40 #f #f temp56_38 temp57_39)))))))))"
"(define-values"
"(lifted/6.1$3 lifted/7.1$3 lifted/8.1$3 lifted/9.1$3 lifted/10.1$3)"
"(make-struct-type"
" 'copy-runtime-module!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'copy-runtime-module!(case-lambda((self_55 name_56)(apply missing-kw self_55 name_56 null))))))"
"(current-inspector)"
"(case-lambda((self_57 name_58)(apply missing-kw self_57 name_58 null)))))"
"(define-values"
"(copy-runtime-module!24.1)"
"(lambda(alts12_59"
" alts19_60"
" extras13_61"
" extras20_62"
" namespace10_63"
" primitive?14_64"
" primitive?21_65"
" protected?15_66"
" protected?22_67"
" skip11_68"
" skip18_69"
" to9_70"
" to16_71"
" name23_72)"
"(let-values(((name_73) name23_72))"
"(let-values(((to-name_74)(if to16_71 to9_70 name_73)))"
"(let-values(((ns_75) namespace10_63))"
"(let-values(((skip-syms_76)(if skip18_69 skip11_68(seteq))))"
"(let-values(((alts_77)(if alts19_60 alts12_59 '#hasheq())))"
"(let-values(((extras_78)(if extras20_62 extras13_61 '#hasheq())))"
"(let-values(((primitive?_79)(if primitive?21_65 primitive?14_64 #t)))"
"(let-values(((protected?_80)(if protected?22_67 protected?15_66 #f)))"
"(let-values()"
"(let-values(((mod-name_81)(list 'quote name_73)))"
"(let-values(((prims_82)(1/primitive-table name_73)))"
"(let-values((()"
"(begin"
"(let-values(((ht_85) prims_82))"
"(begin"
"(if((lambda(ht_86)(hash? ht_86)) ht_85)"
"(void)"
"(let-values()(default-in-hash-keys ht_85)))"
"((letrec-values(((for-loop_87)"
"(lambda(i_88)"
"(if i_88"
"(let-values(((sym_89)"
"(hash-iterate-key ht_85 i_88)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(register-built-in-symbol!"
" sym_89))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_87(hash-iterate-next ht_85 i_88))"
"(values))))"
"(values)))))"
" for-loop_87)"
"(hash-iterate-first ht_85))))"
"(values))))"
"(let-values((()(begin(void)(values))))"
"(let-values(((ht_83)"
"(let-values(((ht_90) prims_82))"
"(begin"
"(if((lambda(ht_91)(hash? ht_91)) ht_90)"
"(void)"
"(let-values()(default-in-hash ht_90)))"
"((letrec-values(((for-loop_92)"
"(lambda(table_93 i_94)"
"(if i_94"
"(let-values(((sym_95 val_96)"
"(hash-iterate-key+value"
" ht_90"
" i_94)))"
"(let-values(((table_97)"
"(let-values(((table_98)"
" table_93))"
"(if(set-member?"
" skip-syms_76"
" sym_95)"
" table_98"
"(let-values(((table_99)"
" table_98))"
"(let-values(((table_100)"
"(let-values()"
"(let-values(((key_101"
" val_102)"
"(let-values()"
"(values"
" sym_95"
"(let-values(((or-part_103)"
"(hash-ref"
" alts_77"
" sym_95"
" #f)))"
"(if or-part_103"
" or-part_103"
" val_96))))))"
"(hash-set"
" table_99"
" key_101"
" val_102)))))"
"(values table_100)))))))"
"(if(not #f)"
"(for-loop_92"
" table_97"
"(hash-iterate-next ht_90 i_94))"
" table_97)))"
" table_93))))"
" for-loop_92)"
" '#hasheq()"
"(hash-iterate-first ht_90))))))"
"(let-values(((ht+extras_84)"
"(let-values(((ht_104) extras_78))"
"(begin"
"(if((lambda(ht_105)(hash? ht_105)) ht_104)"
"(void)"
"(let-values()(default-in-hash ht_104)))"
"((letrec-values(((for-loop_106)"
"(lambda(ht_107 i_108)"
"(if i_108"
"(let-values(((k_109 v_110)"
"(hash-iterate-key+value"
" ht_104"
" i_108)))"
"(let-values(((ht_111)"
"(let-values(((ht_112) ht_107))"
"(let-values(((ht_113)"
"(let-values()"
"(hash-set"
" ht_112"
" k_109"
" v_110))))"
"(values ht_113)))))"
"(if(not #f)"
"(for-loop_106"
" ht_111"
"(hash-iterate-next ht_104 i_108))"
" ht_111)))"
" ht_107))))"
" for-loop_106)"
" ht_83"
"(hash-iterate-first ht_104))))))"
"(let-values(((...nder/boot/kernel.rkt:51:2_114) declare-hash-based-module!41.1)"
"((to-name59_115) to-name_74)"
"((ht+extras60_116) ht+extras_84)"
"((ns61_117) ns_75)"
"((primitive?62_118) primitive?_79)"
"((protected?63_119) protected?_80))"
"(declare-hash-based-module!39.1"
" ns61_117"
" primitive?62_118"
" #t"
" #f"
" #f"
" protected?63_119"
" #t"
" #f"
" #f"
" to-name59_115"
" ht+extras60_116)))))))))))))))))))"
"(define-values"
"(unpack25.1)"
"(lambda(given-kws_120 given-args_121 name23_122)"
"(let-values(((alts19_123)(if(pair? given-kws_120)(eq? '#:alts(car given-kws_120)) #f)))"
"(let-values(((alts12_124)(if alts19_123(car given-args_121)(void)))"
"((given-kws_125)(if alts19_123(cdr given-kws_120) given-kws_120))"
"((given-args_126)(if alts19_123(cdr given-args_121) given-args_121)))"
"(let-values(((extras20_127)(if(pair? given-kws_125)(eq? '#:extras(car given-kws_125)) #f)))"
"(let-values(((extras13_128)(if extras20_127(car given-args_126)(void)))"
"((given-kws_129)(if extras20_127(cdr given-kws_125) given-kws_125))"
"((given-args_130)(if extras20_127(cdr given-args_126) given-args_126)))"
"(let-values(((namespace10_131)(car given-args_130))"
"((given-kws_132)(cdr given-kws_129))"
"((given-args_133)(cdr given-args_130)))"
"(let-values(((primitive?21_134)(if(pair? given-kws_132)(eq? '#:primitive?(car given-kws_132)) #f)))"
"(let-values(((primitive?14_135)(if primitive?21_134(car given-args_133)(void)))"
"((given-kws_136)(if primitive?21_134(cdr given-kws_132) given-kws_132))"
"((given-args_137)(if primitive?21_134(cdr given-args_133) given-args_133)))"
"(let-values(((protected?22_138)"
"(if(pair? given-kws_136)(eq? '#:protected?(car given-kws_136)) #f)))"
"(let-values(((protected?15_139)(if protected?22_138(car given-args_137)(void)))"
"((given-kws_140)(if protected?22_138(cdr given-kws_136) given-kws_136))"
"((given-args_141)(if protected?22_138(cdr given-args_137) given-args_137)))"
"(let-values(((skip18_142)(if(pair? given-kws_140)(eq? '#:skip(car given-kws_140)) #f)))"
"(let-values(((skip11_143)(if skip18_142(car given-args_141)(void)))"
"((given-kws_144)(if skip18_142(cdr given-kws_140) given-kws_140))"
"((given-args_145)(if skip18_142(cdr given-args_141) given-args_141)))"
"(let-values(((to16_146)(pair? given-kws_144)))"
"(let-values(((to9_147)(if to16_146(car given-args_145)(void))))"
"(copy-runtime-module!24.1"
" alts12_124"
" alts19_123"
" extras13_128"
" extras20_127"
" namespace10_131"
" primitive?14_135"
" primitive?21_134"
" protected?15_139"
" protected?22_138"
" skip11_143"
" skip18_142"
" to9_147"
" to16_146"
" name23_122))))))))))))))))"
"(define-values"
"(copy-runtime-module!26.1)"
"(lifted/7.1$3"
"(lambda(given-kws_148 given-argc_149)"
"(if(= given-argc_149 3)"
"(subsets? '(#:namespace) given-kws_148 '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to))"
" #f))"
"(case-lambda((given-kws_150 given-args_151 name_152)(unpack25.1 given-kws_150 given-args_151 name_152)))"
" '(#:namespace)"
" '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to)))"
"(define-values"
"(lifted/11.1$2 lifted/12.1$2 lifted/13.1$2 lifted/14.1$2 lifted/15.1$2)"
"(make-struct-type"
" 'declare-hash-based-module!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'declare-hash-based-module!"
"(case-lambda((self_153 name_154 ht_155)(apply missing-kw self_153 name_154 ht_155 null))))))"
"(current-inspector)"
"(case-lambda((self_156 name_157 ht_158)(apply missing-kw self_156 name_157 ht_158 null)))))"
"(define-values"
"(declare-hash-based-module!39.1)"
"(lambda(namespace27_159"
" primitive?28_160"
" primitive?33_161"
" protected30_162"
" protected35_163"
" protected?29_164"
" protected?34_165"
" register-builtin?31_166"
" register-builtin?36_167"
" name37_168"
" ht38_169)"
"(let-values(((name_170) name37_168))"
"(let-values(((ht_171) ht38_169))"
"(let-values(((ns_172) namespace27_159))"
"(let-values(((primitive?_173)(if primitive?33_161 primitive?28_160 #f)))"
"(let-values(((protected?_174)(if protected?34_165 protected?29_164 #f)))"
"(let-values(((protected-syms_175)(if protected35_163 protected30_162 null)))"
"(let-values(((register-builtin?_176)(if register-builtin?36_167 register-builtin?31_166 #f)))"
"(let-values()"
"(let-values(((mpi_177)(1/module-path-index-join(list 'quote name_170) #f)))"
"(let-values(((ns64_178) ns_172)"
"((temp65_179)"
"(let-values(((temp67_182) #t)"
"((primitive?68_183) primitive?_173)"
"((temp69_184) #t)"
"((temp70_185)(not protected?_174))"
"((mpi71_186) mpi_177)"
"((temp72_187)"
"(hasheqv"
" 0"
"(let-values(((ht_189) ht_171))"
"(begin"
"(if((lambda(ht_190)(hash? ht_190)) ht_189)"
"(void)"
"(let-values()(default-in-hash-keys ht_189)))"
"((letrec-values(((for-loop_191)"
"(lambda(table_192 i_193)"
"(if i_193"
"(let-values(((sym_194)"
"(hash-iterate-key"
" ht_189"
" i_193)))"
"(let-values(((table_195)"
"(let-values(((table_196)"
" table_192))"
"(let-values(((table_197)"
"(let-values()"
"(let-values(((key_198"
" val_199)"
"(let-values()"
"(let-values((()"
"(begin"
"(if register-builtin?_176"
"(let-values()"
"(register-built-in-symbol!"
" sym_194))"
"(void))"
"(values))))"
"(let-values(((binding_200)"
"(let-values(((mpi74_201)"
" mpi_177)"
"((temp75_202)"
" 0)"
"((sym76_203)"
" sym_194))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi74_201"
" temp75_202"
" sym76_203))))"
"(values"
" sym_194"
"(if(let-values(((or-part_204)"
" protected?_174))"
"(if or-part_204"
" or-part_204"
"(member"
" sym_194"
" protected-syms_175)))"
"(provided1.1"
" binding_200"
" #t"
" #f)"
" binding_200)))))))"
"(hash-set"
" table_196"
" key_198"
" val_199)))))"
"(values table_197)))))"
"(if(not #f)"
"(for-loop_191"
" table_195"
"(hash-iterate-next ht_189 i_193))"
" table_195)))"
" table_192))))"
" for-loop_191)"
" '#hash()"
"(hash-iterate-first ht_189))))))"
"((temp73_188)"
"(lambda(data-box_205"
" ns_206"
" phase-shift_207"
" phase-level_208"
" self_209"
" bulk-binding-registry_210"
" insp_211)"
"(if(= 0 phase-level_208)"
"(let-values()"
"(begin"
"(let-values(((ht_212) ht_171))"
"(begin"
"(if((lambda(ht_213)(hash? ht_213)) ht_212)"
"(void)"
"(let-values()(default-in-hash ht_212)))"
"((letrec-values(((for-loop_214)"
"(lambda(i_215)"
"(if i_215"
"(let-values(((sym_216 val_217)"
"(hash-iterate-key+value"
" ht_212"
" i_215)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_206"
" 0"
" sym_216"
" val_217))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_214"
"(hash-iterate-next"
" ht_212"
" i_215))"
"(values))))"
"(values)))))"
" for-loop_214)"
"(hash-iterate-first ht_212))))"
"(void)))"
"(void)))))"
"(make-module37.1"
" temp67_182"
" #t"
" #f"
" #f"
" temp73_188"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp70_185"
" #t"
" #f"
" #f"
" temp69_184"
" #t"
" #f"
" #f"
" primitive?68_183"
" #t"
" temp72_187"
" #f"
" #f"
" mpi71_186"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((temp66_180)(1/module-path-index-resolve mpi_177)))"
"(declare-module!56.1 #f #f ns64_178 temp65_179 temp66_180)))))))))))))"
"(define-values"
"(unpack40.1)"
"(lambda(given-kws_218 given-args_219 name37_220 ht38_221)"
"(let-values(((namespace27_222)(car given-args_219))"
"((given-kws_223)(cdr given-kws_218))"
"((given-args_224)(cdr given-args_219)))"
"(let-values(((primitive?33_225)(if(pair? given-kws_223)(eq? '#:primitive?(car given-kws_223)) #f)))"
"(let-values(((primitive?28_226)(if primitive?33_225(car given-args_224)(void)))"
"((given-kws_227)(if primitive?33_225(cdr given-kws_223) given-kws_223))"
"((given-args_228)(if primitive?33_225(cdr given-args_224) given-args_224)))"
"(let-values(((protected35_229)(if(pair? given-kws_227)(eq? '#:protected(car given-kws_227)) #f)))"
"(let-values(((protected30_230)(if protected35_229(car given-args_228)(void)))"
"((given-kws_231)(if protected35_229(cdr given-kws_227) given-kws_227))"
"((given-args_232)(if protected35_229(cdr given-args_228) given-args_228)))"
"(let-values(((protected?34_233)(if(pair? given-kws_231)(eq? '#:protected?(car given-kws_231)) #f)))"
"(let-values(((protected?29_234)(if protected?34_233(car given-args_232)(void)))"
"((given-kws_235)(if protected?34_233(cdr given-kws_231) given-kws_231))"
"((given-args_236)(if protected?34_233(cdr given-args_232) given-args_232)))"
"(let-values(((register-builtin?36_237)(pair? given-kws_235)))"
"(let-values(((register-builtin?31_238)(if register-builtin?36_237(car given-args_236)(void))))"
"(declare-hash-based-module!39.1"
" namespace27_222"
" primitive?28_226"
" primitive?33_225"
" protected30_230"
" protected35_229"
" protected?29_234"
" protected?34_233"
" register-builtin?31_238"
" register-builtin?36_237"
" name37_220"
" ht38_221))))))))))))"
"(define-values"
"(declare-hash-based-module!41.1)"
"(lifted/12.1$2"
"(lambda(given-kws_239 given-argc_240)"
"(if(= given-argc_240 4)"
"(subsets? '(#:namespace) given-kws_239 '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?))"
" #f))"
"(case-lambda"
"((given-kws_241 given-args_242 name_243 ht_244)(unpack40.1 given-kws_241 given-args_242 name_243 ht_244)))"
" '(#:namespace)"
" '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?)))"
"(define-values"
"(lifted/16.1$1 lifted/17.1$1 lifted/18.1$1 lifted/19.1$1 lifted/20.1$1)"
"(make-struct-type"
" 'declare-reexporting-module!"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'declare-reexporting-module!"
"(case-lambda"
"((self_245 name_246 require-names_247)(apply missing-kw self_245 name_246 require-names_247 null))))))"
"(current-inspector)"
"(case-lambda((self_248 name_249 require-names_250)(apply missing-kw self_248 name_249 require-names_250 null)))))"
"(define-values"
"(declare-reexporting-module!48.1)"
"(lambda(namespace43_251 reexport?42_252 reexport?44_253 name46_254 require-names47_255)"
"(let-values(((name_256) name46_254))"
"(let-values(((require-names_257) require-names47_255))"
"(let-values(((reexport?_258)(if reexport?44_253 reexport?42_252 #t)))"
"(let-values(((ns_259) namespace43_251))"
"(let-values()"
"(let-values(((mpi_260)(1/module-path-index-join(list 'quote name_256) #f)))"
"(let-values(((require-mpis_261)"
"(let-values(((lst_262) require-names_257))"
"(begin"
"(if(list? lst_262)(void)(let-values()(in-list lst_262)))"
"((letrec-values(((for-loop_263)"
"(lambda(lst_264)"
"(if(pair? lst_264)"
"(let-values(((require-name_265)(unsafe-car lst_264))"
"((rest_266)(unsafe-cdr lst_264)))"
"(let-values(((post-guard-var_267)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_268)"
"(let-values()"
"(let-values()"
"(1/module-path-index-join"
"(list 'quote require-name_265)"
" #f)))))"
"(let-values(((result_269)"
"(if(post-guard-var_267)"
"(for-loop_263 rest_266)"
" null)))"
"(cons elem_268 result_269))))))"
" null))))"
" for-loop_263)"
" lst_262)))))"
"(let-values(((ns77_270) ns_259)"
"((temp78_271)"
"(let-values(((temp80_274) #t)"
"((temp81_275) #t)"
"((mpi82_276) mpi_260)"
"((temp83_277)(list(cons 0 require-mpis_261)))"
"((temp84_278)"
"(if reexport?_258"
"(hasheqv"
" 0"
"(let-values(((lst_280) require-mpis_261))"
"(begin"
"(if(list? lst_280)(void)(let-values()(in-list lst_280)))"
"((letrec-values(((for-loop_281)"
"(lambda(table_282 lst_283)"
"(if(pair? lst_283)"
"(let-values(((require-mpi_284)"
"(unsafe-car lst_283))"
"((rest_285)"
"(unsafe-cdr lst_283)))"
"(let-values(((table_286)"
"(let-values(((m_287)"
"(namespace->module"
" ns_259"
"(1/module-path-index-resolve"
" require-mpi_284))))"
"(begin"
" #t"
"((letrec-values(((for-loop_288)"
"(lambda(table_289)"
"(let-values()"
"(let-values(((table_290)"
"(let-values(((ht_291)"
"(hash-ref"
"(shift-provides-module-path-index"
"(module-provides"
" m_287)"
"(module-self"
" m_287)"
" require-mpi_284)"
" 0)))"
"(begin"
"(if((lambda(ht_292)"
"(hash?"
" ht_292))"
" ht_291)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_291)))"
"((letrec-values(((for-loop_293)"
"(lambda(table_294"
" i_295)"
"(if i_295"
"(let-values(((sym_296"
" binding_297)"
"(hash-iterate-key+value"
" ht_291"
" i_295)))"
"(let-values(((table_298)"
"(let-values(((table_299)"
" table_294))"
"(let-values(((table_300)"
"(let-values()"
"(let-values(((key_301"
" val_302)"
"(let-values()"
"(values"
" sym_296"
" binding_297))))"
"(hash-set"
" table_299"
" key_301"
" val_302)))))"
"(values"
" table_300)))))"
"(if(not"
" #f)"
"(for-loop_293"
" table_298"
"(hash-iterate-next"
" ht_291"
" i_295))"
" table_298)))"
" table_294))))"
" for-loop_293)"
" table_289"
"(hash-iterate-first"
" ht_291))))))"
" table_290)))))"
" for-loop_288)"
" table_282)))))"
"(if(not #f)"
"(for-loop_281 table_286 rest_285)"
" table_286)))"
" table_282))))"
" for-loop_281)"
" '#hash()"
" lst_280))))"
" '#hasheqv()))"
"((void85_279) void))"
"(make-module37.1"
" temp80_274"
" #t"
" #f"
" #f"
" void85_279"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_275"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp84_278"
" temp83_277"
" #t"
" mpi82_276"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((temp79_272)(1/module-path-index-resolve mpi_260)))"
"(declare-module!56.1 #f #f ns77_270 temp78_271 temp79_272)))))))))))"
"(define-values"
"(unpack49.1)"
"(lambda(given-kws_303 given-args_304 name46_305 require-names47_306)"
"(let-values(((namespace43_307)(car given-args_304))"
"((given-kws_308)(cdr given-kws_303))"
"((given-args_309)(cdr given-args_304)))"
"(let-values(((reexport?44_310)(pair? given-kws_308)))"
"(let-values(((reexport?42_311)(if reexport?44_310(car given-args_309)(void))))"
"(declare-reexporting-module!48.1"
" namespace43_307"
" reexport?42_311"
" reexport?44_310"
" name46_305"
" require-names47_306))))))"
"(define-values"
"(declare-reexporting-module!50.1)"
"(lifted/17.1$1"
"(lambda(given-kws_312 given-argc_313)"
"(if(= given-argc_313 4)(subsets? '(#:namespace) given-kws_312 '(#:namespace #:reexport?)) #f))"
"(case-lambda"
"((given-kws_314 given-args_315 name_316 require-names_317)"
"(unpack49.1 given-kws_314 given-args_315 name_316 require-names_317)))"
" '(#:namespace)"
" '(#:namespace #:reexport?)))"
"(void)"
"(void)"
"(define-values"
"(main-primitives)"
"(hasheq"
" 'eval"
" eval$1"
" 'eval-syntax"
" 1/eval-syntax"
" 'compile"
" compile$1"
" 'compile-syntax"
" 1/compile-syntax"
" 'expand"
" 1/expand"
" 'expand-syntax"
" 1/expand-syntax"
" 'expand-once"
" 1/expand-once"
" 'expand-syntax-once"
" 1/expand-syntax-once"
" 'expand-to-top-form"
" 1/expand-to-top-form"
" 'expand-syntax-to-top-form"
" 1/expand-syntax-to-top-form"
" 'dynamic-require"
" 1/dynamic-require"
" 'dynamic-require-for-syntax"
" 1/dynamic-require-for-syntax"
" 'compiled-expression?"
" 1/compiled-expression?"
" 'compiled-module-expression?"
" 1/compiled-module-expression?"
" 'module-compiled-name"
" 1/module-compiled-name"
" 'module-compiled-submodules"
" 1/module-compiled-submodules"
" 'module-compiled-language-info"
" 1/module-compiled-language-info"
" 'module-compiled-imports"
" 1/module-compiled-imports"
" 'module-compiled-exports"
" 1/module-compiled-exports"
" 'module-compiled-indirect-exports"
" 1/module-compiled-indirect-exports"
" 'make-empty-namespace"
" 1/make-empty-namespace"
" 'namespace-attach-module"
" 1/namespace-attach-module"
" 'namespace-attach-module-declaration"
" 1/namespace-attach-module-declaration"
" 'namespace-symbol->identifier"
" 1/namespace-symbol->identifier"
" 'namespace-module-identifier"
" 1/namespace-module-identifier"
" 'namespace-syntax-introduce"
" 1/namespace-syntax-introduce"
" 'namespace-require"
" 1/namespace-require"
" 'namespace-require/copy"
" 1/namespace-require/copy"
" 'namespace-require/constant"
" 1/namespace-require/constant"
" 'namespace-require/expansion-time"
" 1/namespace-require/expansion-time"
" 'namespace-variable-value"
" 1/namespace-variable-value"
" 'namespace-set-variable-value!"
" 1/namespace-set-variable-value!"
" 'namespace-undefine-variable!"
" 1/namespace-undefine-variable!"
" 'namespace-mapped-symbols"
" 1/namespace-mapped-symbols"
" 'namespace-base-phase"
" 1/namespace-base-phase"
" 'module-declared?"
" 1/module-declared?"
" 'module-predefined?"
" 1/module-predefined?"
" 'module->language-info"
" 1/module->language-info"
" 'module->imports"
" 1/module->imports"
" 'module->exports"
" 1/module->exports"
" 'module->indirect-exports"
" 1/module->indirect-exports"
" 'module-compiled-cross-phase-persistent?"
" 1/module-compiled-cross-phase-persistent?"
" 'module-provide-protected?"
" 1/module-provide-protected?"
" 'module->namespace"
" 1/module->namespace"
" 'namespace-unprotect-module"
" 1/namespace-unprotect-module))"
"(void)"
"(void)"
"(define-values"
"(utils-primitives)"
"(hasheq"
" 'path-string?"
" path-string?"
" 'normal-case-path"
" normal-case-path"
" 'path-replace-extension"
" path-replace-extension"
" 'path-add-extension"
" path-add-extension"
" 'reroot-path"
" reroot-path"
" 'path-list-string->path-list"
" path-list-string->path-list"
" 'find-executable-path"
" find-executable-path"
" 'call-with-default-reading-parameterization"
" call-with-default-reading-parameterization"
" 'collection-path"
" collection-path"
" 'collection-file-path"
" collection-file-path"
" 'find-library-collection-paths"
" find-library-collection-paths"
" 'find-library-collection-links"
" find-library-collection-links"
" 'load/use-compiled"
" load/use-compiled"
" 'find-main-config"
" find-main-config"
" 'find-main-collects"
" find-main-collects))"
"(void)"
"(void)"
"(define-values(expobs-primitives)(hasheq 'current-expand-observe current-expand-observe))"
"(void)"
"(void)"
"(define-values"
"(struct:TH-place-channel TH-place-channel TH-place-channel? TH-place-channel-ref TH-place-channel-set!)"
"(make-struct-type 'TH-place-channel #f 2 0 #f(list(cons prop:evt(lambda(x_1)(TH-place-channel-ref x_1 0))))))"
"(define-values"
"(TH-place-channel-in TH-place-channel-out)"
"(values(lambda(x_2)(TH-place-channel-ref x_2 0))(lambda(x_3)(TH-place-channel-ref x_3 1))))"
"(define-values"
"(place-struct-primitives)"
"(hasheq"
" 'struct:TH-place-channel"
" struct:TH-place-channel"
" 'TH-place-channel"
" TH-place-channel"
" 'TH-place-channel?"
" TH-place-channel?"
" 'TH-place-channel-in"
" TH-place-channel-in"
" 'TH-place-channel-out"
" TH-place-channel-out))"
"(void)"
"(void)"
"(define-values"
"(linklet-primitives)"
"(hasheq"
" 'primitive-table"
" 1/primitive-table"
" 'primitive->compiled-position"
" 1/primitive->compiled-position"
" 'compiled-position->primitive"
" 1/compiled-position->primitive"
" 'linklet?"
" 1/linklet?"
" 'compile-linklet"
" 1/compile-linklet"
" 'recompile-linklet"
" 1/recompile-linklet"
" 'eval-linklet"
" 1/eval-linklet"
" 'instantiate-linklet"
" 1/instantiate-linklet"
" 'linklet-import-variables"
" 1/linklet-import-variables"
" 'linklet-export-variables"
" 1/linklet-export-variables"
" 'instance?"
" 1/instance?"
" 'make-instance"
" 1/make-instance"
" 'instance-name"
" 1/instance-name"
" 'instance-data"
" 1/instance-data"
" 'instance-variable-names"
" 1/instance-variable-names"
" 'instance-variable-value"
" 1/instance-variable-value"
" 'instance-set-variable-value!"
" 1/instance-set-variable-value!"
" 'instance-unset-variable!"
" 1/instance-unset-variable!"
" 'linklet-directory?"
" 1/linklet-directory?"
" 'hash->linklet-directory"
" 1/hash->linklet-directory"
" 'linklet-directory->hash"
" 1/linklet-directory->hash"
" 'linklet-bundle?"
" 1/linklet-bundle?"
" 'hash->linklet-bundle"
" 1/hash->linklet-bundle"
" 'linklet-bundle->hash"
" 1/linklet-bundle->hash"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference->instance"
" 1/variable-reference->instance"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"(void)"
"(void)"
"(define-values"
"(with-module-reading-parameterization)"
"(lambda(thunk_1)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-accept-compiled"
" #t)"
"(let-values()(thunk_1)))))))"
"(define-values"
"(check-module-form)"
"(lambda(exp_5 filename_6)"
"(if(let-values(((or-part_7)(eof-object? exp_5)))(if or-part_7 or-part_7(eof-object?(1/syntax-e exp_5))))"
"(let-values()"
"(if filename_6"
"(error"
" 'load-handler"
"           (string-append \"expected a `module' declaration, but found end-of-file\\n\" \"  file: ~a\")"
" filename_6)"
" #f))"
"(if(1/compiled-module-expression?(1/syntax-e exp_5))"
"(let-values() exp_5)"
"(if(if(syntax?$1 exp_5)"
"(if(pair?(1/syntax-e exp_5))"
"(if(eq? 'module(1/syntax-e(car(1/syntax-e exp_5))))"
"(let-values(((r_8)(cdr(1/syntax-e exp_5))))"
"(let-values(((r_9)(if(syntax?$1 r_8)(1/syntax-e r_8) r_8)))"
"(if(pair? r_9)(identifier?(car r_9)) #f)))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(1/datum->syntax exp_5(cons(1/namespace-module-identifier)(cdr(1/syntax-e exp_5))) exp_5 exp_5))"
"(let-values()"
"(if filename_6"
"(error"
" 'default-load-handler"
"               (string-append \"expected a `module' declaration, but found something else\\n\" \"  file: ~a\")"
" filename_6)"
" #f)))))))"
"(void)"
"(void)"
"(define-values"
"(default-load-handler)"
"(lambda(path_1 expected-mod_2)"
"(begin"
"(if(path-string? path_1)"
"(void)"
"        (let-values () (raise-argument-error 'default-load-handler \"path-string?\" path_1)))"
"(if(let-values(((or-part_3)(not expected-mod_2)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(symbol? expected-mod_2)))"
"(if or-part_4"
" or-part_4"
"(if(pair? expected-mod_2)"
"(if(list? expected-mod_2)"
"(if(let-values(((or-part_5)(not(car expected-mod_2))))"
"(if or-part_5 or-part_5(symbol?(car expected-mod_2))))"
"(andmap2 symbol?(cdr expected-mod_2))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'default-load-handler"
"           \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" expected-mod_2)))"
"(if expected-mod_2"
"(let-values()"
"((call-with-input-module-file"
" path_1"
"(lambda(i_6)"
"(begin"
"                (if (regexp-match? '#rx\"[.]zo$\" path_1) (void) (let-values () (port-count-lines! i_6)))"
"(with-module-reading-parameterization+delay-source"
" path_1"
"(lambda()"
"(let-values(((c1_7)(linklet-directory-start i_6)))"
"(if c1_7"
"((lambda(pos_8)"
"(let-values(((b-pos_9)(search-directory i_6 pos_8(encode-symbols expected-mod_2))))"
"(if b-pos_9"
"(let-values()"
"(begin"
"(file-position i_6 b-pos_9)"
"(let-values(((or-part_10)(cached-bundle i_6)))"
"(if or-part_10"
" or-part_10"
"(let-values(((v_11)(read i_6)))"
"(if(1/compiled-module-expression? v_11)"
"(lambda()((current-eval) v_11))"
"(error"
" 'default-load-handler"
"                                           (string-append \"expected a compiled module\\n\" \"  in: ~e\\n\" \"  found: ~e\")"
"(object-name i_6)"
" v_11)))))))"
"(if(pair? expected-mod_2)"
"(let-values() void)"
"(let-values()"
"(error"
" 'default-load-handler"
"                                   (string-append \"could not find main module\\n\" \"  in: ~e\")"
"(object-name i_6)))))))"
" c1_7)"
"(if(if(pair? expected-mod_2)(not(car expected-mod_2)) #f)"
"(let-values() void)"
"(let-values(((c2_12)(cached-bundle i_6)))"
"(if c2_12"
"((lambda(thunk_13) thunk_13) c2_12)"
"(let-values()"
"(let-values(((s_14)(1/read-syntax(object-name i_6) i_6)))"
"(let-values((()"
"(begin"
"(if(eof-object? s_14)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                       \"expected a `module' declaration;\\n\""
"                                                       \" found end-of-file\\n\""
"                                                       \"  in: ~e\")"
"(object-name i_6)))"
"(void))"
"(values))))"
"(let-values(((m-s_15)(check-module-form s_14 path_1)))"
"(let-values(((s2_16)(1/read-syntax(object-name i_6) i_6)))"
"(begin"
"(if(eof-object? s2_16)"
"(void)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                               \"expected a `module' declaration;\\n\""
"                                               \" found an extra form\\n\""
"                                               \"  in: ~e\\n\""
"                                               \"  found: ~.s\")"
"(object-name i_6)"
" s2_16)))"
"(lambda()((current-eval) m-s_15))))))))))))))))))))"
"(let-values()"
"(let-values(((add-top-interaction_17)"
"(lambda(s_18)"
"(1/namespace-syntax-introduce(1/datum->syntax #f(cons '#%top-interaction s_18))))))"
"(let-values(((path1_19) path_1)"
"((temp2_20)"
"(lambda(i_21)"
"(begin"
"(port-count-lines! i_21)"
"((letrec-values(((loop_22)"
"(lambda(vals_23)"
"(let-values(((s_24)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t)"
"(let-values()"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_1))"
"(let-values()"
"(1/read-syntax(object-name i_21) i_21)))"
"(1/read-syntax(object-name i_21) i_21))))))"
"(if(eof-object? s_24)"
"(apply values vals_23)"
"(loop_22"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-values"
"(lambda()((current-eval)(add-top-interaction_17 s_24)))"
" list))"
"(default-continuation-prompt-tag)"
"(lambda args_25"
"(apply"
" abort-current-continuation"
"(default-continuation-prompt-tag)"
" args_25)))))))))"
" loop_22)"
"(list(void)))))))"
"(call-with-input-file*61.1 #f #f path1_19 temp2_20))))))))"
"(define-values"
"(linklet-bundle-or-directory-start)"
"(lambda(i_26 tag_27)"
"(let-values(((version-length_28)(string-length(version))))"
"(if(equal?(peek-byte i_26)(char->integer '#\\#))"
"(if(equal?(peek-byte i_26 1)(char->integer '#\\~))"
"(if(equal?(peek-byte i_26 2) version-length_28)"
"(if(equal?(peek-bytes version-length_28 3 i_26)(string->bytes/utf-8(version)))"
"(if(equal?(peek-byte i_26(+ 3 version-length_28))(char->integer tag_27))(+ version-length_28 4) #f)"
" #f)"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(linklet-directory-start)"
"(lambda(i_29)(let-values(((pos_30)(linklet-bundle-or-directory-start i_29 '#\\D)))(if pos_30(+ pos_30 4) #f))))"
"(define-values"
"(linklet-bundle-hash-code)"
"(lambda(i_31)"
"(let-values(((pos_32)(linklet-bundle-or-directory-start i_31 '#\\B)))"
"(let-values(((hash-code_33)(if pos_32(peek-bytes 20 pos_32 i_31) #f)))"
"(if(bytes? hash-code_33)"
"(if(= 20(bytes-length hash-code_33))"
"(if(let-values(((vec_34 len_35)"
"(let-values(((vec_36) hash-code_33))"
"(begin"
"(if(bytes? vec_36)(void)(let-values()(in-bytes vec_36)))"
"(values vec_36(bytes-length vec_36))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_37)"
"(lambda(result_38 pos_39)"
"(if(unsafe-fx< pos_39 len_35)"
"(let-values(((c_40)(bytes-ref vec_34 pos_39)))"
"(let-values(((result_41)"
"(let-values()"
"(let-values(((result_43)"
"(let-values()"
"(let-values()(not(eq? c_40 0))))))"
"(values result_43)))))"
"(if(if(not((lambda x_44 result_41) c_40))(not #f) #f)"
"(for-loop_37 result_41(unsafe-fx+ 1 pos_39))"
" result_41)))"
" result_38))))"
" for-loop_37)"
" #f"
" 0)))"
" hash-code_33"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(cached-bundle)"
"(lambda(i_45)"
"(let-values(((c3_46)(module-cache-ref(make-module-cache-key(linklet-bundle-hash-code i_45)))))"
"(if c3_46"
"((lambda(declare-module_47)(lambda()(declare-module_47(1/current-namespace)))) c3_46)"
"(let-values() #f)))))"
"(define-values"
"(read-number)"
"(lambda(i_48)"
"(let-values(((read-byte/not-eof_49)"
"(lambda(i_50)(let-values(((v_51)(read-byte i_50)))(if(eof-object? v_51) 0 v_51)))))"
"(bitwise-ior"
"(read-byte/not-eof_49 i_48)"
"(arithmetic-shift(read-byte/not-eof_49 i_48) 8)"
"(arithmetic-shift(read-byte/not-eof_49 i_48) 16)"
"(arithmetic-shift(read-byte/not-eof_49 i_48) 24)))))"
"(define-values"
"(search-directory)"
"(lambda(i_52 pos_53 bstr_54)"
"(if(zero? pos_53)"
"(let-values() #f)"
"(let-values()"
"(let-values((()(begin(file-position i_52 pos_53)(values))))"
"(let-values(((name-len_55)(read-number i_52)))"
"(let-values(((v_56)(read-bytes name-len_55 i_52)))"
"(begin"
"(if(if(bytes? v_56)(=(bytes-length v_56) name-len_55) #f)"
"(void)"
"(let-values()"
"(error"
" 'deafult-load-handler"
"(string-append"
"                      \"failure getting submodule path\\n\""
"                      \"  in: ~e\\n\""
"                      \"  at position: ~a\\n\""
"                      \"  expected bytes: ~a\\n\""
"                      \"  read bytes: ~e\")"
"(object-name i_52)"
" pos_53"
" name-len_55"
" v_56)))"
"(if(bytes=? bstr_54 v_56)"
"(let-values()(read-number i_52))"
"(if(bytes<? bstr_54 v_56)"
"(let-values()"
"(begin(read-number i_52)(read-number i_52)(search-directory i_52(read-number i_52) bstr_54)))"
"(let-values()"
"(begin"
"(read-number i_52)"
"(read-number i_52)"
"(read-number i_52)"
"(search-directory i_52(read-number i_52) bstr_54)))))))))))))"
"(define-values"
"(encode-symbols)"
"(lambda(expected-mod_57)"
"(if(symbol? expected-mod_57)"
"      (let-values () #\"\")"
"(let-values()"
"(apply"
" bytes-append"
"(let-values(((lst_58)(cdr expected-mod_57)))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(lst_60)"
"(if(pair? lst_60)"
"(let-values(((s_61)(unsafe-car lst_60))((rest_62)(unsafe-cdr lst_60)))"
"(let-values(((post-guard-var_63)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_64)"
"(let-values()"
"(let-values()"
"(let-values(((bstr_65)"
"(string->bytes/utf-8(symbol->string s_61))))"
"(let-values(((len_66)(bytes-length bstr_65)))"
"(if(< len_66 255)"
"(let-values()(bytes-append(bytes len_66) bstr_65))"
"(let-values()"
"(bytes-append"
" 255"
"(integer->integer-bytes len_66 4 #f #f)"
" bstr_65)))))))))"
"(let-values(((result_67)"
"(if(post-guard-var_63)(for-loop_59 rest_62) null)))"
"(cons elem_64 result_67))))))"
" null))))"
" for-loop_59)"
" lst_58))))))))"
"(define-values"
"(with-module-reading-parameterization+delay-source)"
"(lambda(path_68 thunk_69)"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_68))"
"(let-values()(with-module-reading-parameterization thunk_69)))"
"(with-module-reading-parameterization thunk_69))))"
"(define-values"
"(call-with-input-module-file)"
"(lambda(path_70 proc_71)"
"(let-values(((i_72) #f))"
"(dynamic-wind"
"(lambda()"
"(set! i_72"
"(let-values(((path3_74) path_70)((temp4_75) #t))(open-input-file6.1 temp4_75 #t #f #f path3_74))))"
"(lambda()(proc_71 i_72))"
"(lambda()(close-input-port i_72))))))"
"(void)"
"(void)"
"(define-values(dll-suffix)(system-type 'so-suffix))"
"(define-values"
"(default-load/use-compiled)"
"(let-values(((resolve_1)"
"(lambda(s_2)"
"(if(complete-path? s_2)"
" s_2"
"(let-values(((d_3)(current-load-relative-directory)))"
"(if d_3(path->complete-path s_2 d_3) s_2))))))"
"(let-values(((date-of-1_4)"
"(lambda(a_5)"
"(let-values(((v_6)(file-or-directory-modify-seconds a_5 #f(lambda() #f))))"
"(if v_6(cons a_5 v_6) #f)))))"
"(let-values(((date-of_7)"
"(lambda(a_8 modes_9 roots_10)"
"(ormap2"
"(lambda(root-dir_11)"
"(ormap2"
"(lambda(compiled-dir_12)"
"(let-values(((a_13)(a_8 root-dir_11 compiled-dir_12)))(date-of-1_4 a_13)))"
" modes_9))"
" roots_10))))"
"(let-values(((date>=?_14)"
"(lambda(modes_15 roots_16 a_17 bm_18)"
"(if a_17"
"(let-values(((am_19)(date-of_7 a_17 modes_15 roots_16)))"
"(let-values(((or-part_20)(if(not bm_18) am_19 #f)))"
"(if or-part_20"
" or-part_20"
"(if am_19(if bm_18(if(>=(cdr am_19)(cdr bm_18)) am_19 #f) #f) #f))))"
" #f))))"
"(let-values(((with-dir*_21)"
"(lambda(base_22 t_23)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(path? base_22) base_22(current-directory)))"
"(let-values()(t_23))))))"
"(lambda(path_24 expect-module_25)"
"(let-values((()"
"(begin"
"(if(path-string? path_24)"
"(void)"
"                                (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" path_24)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_29)(not expect-module_25)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? expect-module_25)))"
"(if or-part_30"
" or-part_30"
"(if(list? expect-module_25)"
"(if(>(length expect-module_25) 1)"
"(if(let-values(((or-part_31)(symbol?(car expect-module_25))))"
"(if or-part_31 or-part_31(not(car expect-module_25))))"
"(andmap2 symbol?(cdr expect-module_25))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'load/use-compiled"
"                                     \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" path_24)))"
"(values))))"
"(let-values(((name_26)(if expect-module_25(1/current-module-declare-name) #f)))"
"(let-values(((ns-hts_27)"
"(if name_26"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" #f)"
" #f)))"
"(let-values(((use-path/src_28)(if ns-hts_27(hash-ref(cdr ns-hts_27) name_26 #f) #f)))"
"(if use-path/src_28"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-module-declare-source"
"(cadr use-path/src_28))"
"(let-values()"
"(with-dir*_21"
"(caddr use-path/src_28)"
"(lambda()((current-load)(car use-path/src_28) expect-module_25)))))"
"(let-values(((orig-path_32)(resolve_1 path_24)))"
"(let-values(((base_33 orig-file_34 dir?_35)(split-path path_24)))"
"(let-values(((file_36 alt-file_37)"
"(if expect-module_25"
"(let-values(((b_38)(path->bytes orig-file_34)))"
"(let-values(((len_39)(bytes-length b_38)))"
"(if(if(>= len_39 4)"
"                                                        (bytes=? #\".rkt\" (subbytes b_38 (- len_39 4)))"
" #f)"
"(let-values()"
"(values"
" orig-file_34"
"(bytes->path"
"                                                        (bytes-append (subbytes b_38 0 (- len_39 4)) #\".ss\"))))"
"(let-values()(values orig-file_34 #f)))))"
"(values orig-file_34 #f))))"
"(let-values(((path_40)"
"(if(eq? file_36 orig-file_34)"
" orig-path_32"
"(build-path base_33 file_36))))"
"(let-values(((alt-path_41)"
"(if alt-file_37"
"(if(eq? alt-file_37 orig-file_34)"
" orig-path_32"
"(build-path base_33 alt-file_37))"
" #f)))"
"(let-values(((base_42)(if(eq? base_33 'relative) 'same base_33)))"
"(let-values(((modes_43)(use-compiled-file-paths)))"
"(let-values(((roots_44)(current-compiled-file-roots)))"
"(let-values(((reroot_45)"
"(lambda(p_46 d_47)"
"(if(eq? d_47 'same)"
"(let-values() p_46)"
"(if(relative-path? d_47)"
"(let-values()(build-path p_46 d_47))"
"(let-values()(reroot-path p_46 d_47)))))))"
"(let-values(((main-path-d_48)(date-of-1_4 path_40)))"
"(let-values(((alt-path-d_49)"
"(if alt-path_41"
"(if(not main-path-d_48)(date-of-1_4 alt-path_41) #f)"
" #f)))"
"(let-values(((path-d_50)"
"(let-values(((or-part_51) main-path-d_48))"
"(if or-part_51 or-part_51 alt-path-d_49))))"
"(let-values(((get-so_52)"
"(lambda(file_53 rep-sfx?_54)"
"(lambda(root-dir_55 compiled-dir_56)"
"(build-path"
"(reroot_45 base_42 root-dir_55)"
" compiled-dir_56"
"                                                                     \"native\""
"(system-library-subpath)"
"(if rep-sfx?_54"
"(path-add-extension file_53 dll-suffix)"
" file_53))))))"
"(let-values(((zo_57)"
"(lambda(root-dir_58 compiled-dir_59)"
"(build-path"
"(reroot_45 base_42 root-dir_58)"
" compiled-dir_59"
"                                                                     (path-add-extension file_36 #\".zo\")))))"
"(let-values(((alt-zo_60)"
"(lambda(root-dir_61 compiled-dir_62)"
"(build-path"
"(reroot_45 base_42 root-dir_61)"
" compiled-dir_62"
"                                                                       (path-add-extension alt-file_37 #\".zo\")))))"
"(let-values(((so_63)(get-so_52 file_36 #t)))"
"(let-values(((alt-so_64)(get-so_52 alt-file_37 #t)))"
"(let-values(((try-main?_65)"
"(let-values(((or-part_66) main-path-d_48))"
"(if or-part_66"
" or-part_66"
"(not alt-path-d_49)))))"
"(let-values(((try-alt?_67)"
"(if alt-file_37"
"(let-values(((or-part_68) alt-path-d_49))"
"(if or-part_68"
" or-part_68"
"(not main-path-d_48)))"
" #f)))"
"(let-values(((with-dir_69)"
"(lambda(t_70)"
"(with-dir*_21 base_42 t_70))))"
"(let-values(((c1_71)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" so_63"
" path-d_50)"
" #f)))"
"(if c1_71"
"((lambda(so-d_72)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_72)"
" expect-module_25))))))"
" c1_71)"
"(let-values(((c2_73)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-so_64"
" alt-path-d_49)"
" #f)))"
"(if c2_73"
"((lambda(so-d_74)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_74)"
" expect-module_25))))))"
" c2_73)"
"(let-values(((c3_75)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" zo_57"
" path-d_50)"
" #f)))"
"(if c3_75"
"((lambda(zo-d_76)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_76)"
" #f"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_76)"
" expect-module_25)))))))"
" c3_75)"
"(let-values(((c4_77)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-zo_60"
" path-d_50)"
" #f)))"
"(if c4_77"
"((lambda(zo-d_78)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_78)"
" alt-path_41"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_78)"
" expect-module_25)))))))"
" c4_77)"
"(if(let-values(((or-part_79)"
"(not"
"(pair?"
" expect-module_25))))"
"(if or-part_79"
" or-part_79"
"(car expect-module_25)))"
"(let-values()"
"(let-values(((p_80)"
"(if try-main?_65"
" path_40"
" alt-path_41)))"
"(if(if(pair? expect-module_25)"
"(not(file-exists? p_80))"
" #f)"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
"(if expect-module_25"
"(if(not try-main?_65)"
" p_80"
" #f)"
" #f))"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
" p_80"
" expect-module_25)))))))))"
"(void)))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(register-zo-path)"
"(lambda(name_81 ns-hts_82 path_83 src-path_84 base_85)"
"(if ns-hts_82(let-values()(hash-set!(cdr ns-hts_82) name_81(list path_83 src-path_84 base_85)))(void))))"
"(define-values(default-reader-guard)(lambda(path_86) path_86))"
"(define-values(-module-hash-table-table)(make-weak-hasheq))"
"(define-values(CACHE-N) 512)"
"(define-values(-path-cache)(make-vector CACHE-N #f))"
"(define-values"
"(path-cache-get)"
"(lambda(p_87)"
"(let-values(((i_88)(modulo(abs(equal-hash-code p_87)) CACHE-N)))"
"(let-values(((w_89)(vector-ref -path-cache i_88)))"
"(let-values(((l_90)(if w_89(weak-box-value w_89) #f)))"
"(if l_90(let-values(((a_91)(1/assoc p_87 l_90)))(if a_91(cdr a_91) #f)) #f))))))"
"(define-values"
"(path-cache-set!)"
"(lambda(p_92 v_93)"
"(let-values(((i_94)(modulo(abs(equal-hash-code p_92)) CACHE-N)))"
"(let-values(((w_95)(vector-ref -path-cache i_94)))"
"(let-values(((l_96)(if w_95(weak-box-value w_95) #f)))"
"(vector-set!"
" -path-cache"
" i_94"
"(make-weak-box"
"(cons(cons p_92 v_93)(let-values(((or-part_97) l_96))(if or-part_97 or-part_97 null))))))))))"
"(define-values(-loading-filename)(gensym))"
"(define-values(-loading-prompt-tag)(make-continuation-prompt-tag 'module-loading))"
"(define-values(-prev-relto) #f)"
"(define-values(-prev-relto-dir) #f)"
"(define-values"
"(split-relative-string)"
"(lambda(s_98 coll-mode?_99)"
"(let-values(((l_100)"
"((letrec-values(((loop_101)"
"(lambda(s_102)"
"(let-values(((len_103)(string-length s_102)))"
"((letrec-values(((iloop_104)"
"(lambda(i_105)"
"(if(= i_105 len_103)"
"(let-values()(list s_102))"
"(if(char=? '#\\/(string-ref s_102 i_105))"
"(let-values()"
"(cons"
"(substring s_102 0 i_105)"
"(loop_101(substring s_102(add1 i_105)))))"
"(let-values()(iloop_104(add1 i_105))))))))"
" iloop_104)"
" 0)))))"
" loop_101)"
" s_98)))"
"(if coll-mode?_99"
" l_100"
"((letrec-values(((loop_106)"
"(lambda(l_107)"
"(if(null?(cdr l_107))"
"(values null(car l_107))"
"(let-values(((c_108 f_109)(loop_106(cdr l_107))))"
"(values(cons(car l_107) c_108) f_109))))))"
" loop_106)"
" l_100)))))"
"(define-values"
"(format-source-location)"
"(lambda(stx_110)"
"(srcloc->string"
"(srcloc"
"(1/syntax-source stx_110)"
"(1/syntax-line stx_110)"
"(1/syntax-column stx_110)"
"(1/syntax-position stx_110)"
"(1/syntax-span stx_110)))))"
"(define-values(orig-paramz) #f)"
"(define-values"
"(standard-module-name-resolver)"
"(let-values()"
"(let-values(((planet-resolver_111) #f))"
"(let-values(((prep-planet-resolver!_112)"
"(lambda()"
"(if planet-resolver_111"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
" orig-paramz"
"(set! planet-resolver_111"
"                             (1/dynamic-require '(lib \"planet/resolver.rkt\") 'planet-module-name-resolver))))))))"
"(letrec-values(((standard-module-name-resolver_113)"
"(case-lambda"
"((s_114 from-namespace_115)"
"(begin"
"(if(1/resolved-module-path? s_114)"
"(void)"
"(let-values()"
"                                 (raise-argument-error 'standard-module-name-resolver \"resolved-module-path?\" s_114)))"
"(if(let-values(((or-part_116)(not from-namespace_115)))"
"(if or-part_116 or-part_116(1/namespace? from-namespace_115)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                  \"(or/c #f namespace?)\""
" from-namespace_115)))"
"(if planet-resolver_111(let-values()(planet-resolver_111 s_114))(void))"
"(let-values(((hts_117)"
"(let-values(((or-part_118)"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" #f)))"
"(if or-part_118"
" or-part_118"
"(let-values(((hts_119)(cons(make-hasheq)(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(1/namespace-module-registry(1/current-namespace))"
" hts_119)"
" hts_119))))))"
"(begin"
"(hash-set!(car hts_117) s_114 'declared)"
"(if from-namespace_115"
"(let-values()"
"(let-values(((root-name_120)"
"(if(pair?(1/resolved-module-path-name s_114))"
"(1/make-resolved-module-path"
"(car(1/resolved-module-path-name s_114)))"
" s_114))"
"((from-hts_121)"
"(hash-ref"
" -module-hash-table-table"
"(1/namespace-module-registry from-namespace_115)"
" #f)))"
"(if from-hts_121"
"(let-values()"
"(let-values(((use-path/src_122)"
"(hash-ref(cdr from-hts_121) root-name_120 #f)))"
"(if use-path/src_122"
"(let-values()(hash-set!(cdr hts_117) root-name_120 use-path/src_122))"
"(void))))"
"(void))))"
"(void))))))"
"((s_123 relto_124 stx_125)"
"(begin"
"(log-message"
"(current-logger)"
" 'error"
"                              \"default module name resolver called with three arguments (deprecated)\""
" #f)"
"(standard-module-name-resolver_113 s_123 relto_124 stx_125 #t)))"
"((s_126 relto_127 stx_128 load?_129)"
"(let-values((()"
"(begin"
"(if(1/module-path? s_126)"
"(void)"
"(let-values()"
"(if(syntax?$1 stx_128)"
"                                                 (raise-syntax-error$1 #f \"bad module path\" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"module-path?\""
" s_126))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_131)(not relto_127)))"
"(if or-part_131 or-part_131(1/resolved-module-path? relto_127)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"(or/c #f resolved-module-path?)\""
" relto_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_132)(not stx_128)))"
"(if or-part_132 or-part_132(syntax?$1 stx_128)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                    \"(or/c #f syntax?)\""
" stx_128)))"
"(values))))"
"(let-values(((flatten-sub-path_130)"
"(lambda(base_133 orig-l_134)"
"((letrec-values(((loop_135)"
"(lambda(a_136 l_137)"
"(if(null? l_137)"
"(let-values()"
"(if(null? a_136)"
" base_133"
"(cons base_133(alt-reverse a_136))))"
"                                                                       (if (equal? (car l_137) \"..\")"
"(let-values()"
"(if(null? a_136)"
"(error"
" 'standard-module-name-resolver"
"                                                                              \"too many \\\"..\\\"s in submodule path: ~.s\""
"(list*"
" 'submod"
"                                                                               (if (equal? base_133 \".\")"
" base_133"
"(if(path? base_133)"
" base_133"
"(list"
"(if(symbol? base_133) 'quote 'file)"
" base_133)))"
" orig-l_134))"
"(loop_135(cdr a_136)(cdr l_137))))"
"(let-values()"
"(loop_135"
"(cons(car l_137) a_136)"
"(cdr l_137))))))))"
" loop_135)"
" null"
" orig-l_134))))"
"(if(if(pair? s_126)(eq?(car s_126) 'quote) #f)"
"(let-values()(1/make-resolved-module-path(cadr s_126)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'quote) #f)"
" #f)"
" #f)"
"(let-values()"
"(1/make-resolved-module-path"
"(flatten-sub-path_130(cadadr s_126)(cddr s_126))))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"                                               (if (let-values (((or-part_138) (equal? (cadr s_126) \".\")))"
"                                                     (if or-part_138 or-part_138 (equal? (cadr s_126) \"..\")))"
"(if relto_127"
"(let-values(((p_139)(1/resolved-module-path-name relto_127)))"
"(let-values(((or-part_140)(symbol? p_139)))"
"(if or-part_140"
" or-part_140"
"(if(pair? p_139)(symbol?(car p_139)) #f))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((rp_141)(1/resolved-module-path-name relto_127)))"
"(1/make-resolved-module-path"
"(flatten-sub-path_130"
"(if(pair? rp_141)(car rp_141) rp_141)"
"(let-values(((r_142)"
"                                                             (if (equal? (cadr s_126) \"..\") (cdr s_126) (cddr s_126))))"
"(if(pair? rp_141)(append(cdr rp_141) r_142) r_142))))))"
"(if(if(pair? s_126)(eq?(car s_126) 'planet) #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111 s_126 relto_127 stx_128 load?_129 #f orig-paramz)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'planet) #f)"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111"
"(cadr s_126)"
" relto_127"
" stx_128"
" load?_129"
"(cddr s_126)"
" orig-paramz)))"
"(let-values()"
"(let-values(((get-dir_143)"
"(lambda()"
"(let-values(((or-part_150)"
"(if relto_127"
"(if(eq? relto_127 -prev-relto)"
" -prev-relto-dir"
"(let-values(((p_151)"
"(1/resolved-module-path-name"
" relto_127)))"
"(let-values(((p_152)"
"(if(pair? p_151)"
"(car p_151)"
" p_151)))"
"(if(path? p_152)"
"(let-values(((base_153"
" n_154"
" d?_155)"
"(split-path"
" p_152)))"
"(begin"
"(set! -prev-relto relto_127)"
"(set! -prev-relto-dir"
" base_153)"
" base_153))"
" #f))))"
" #f)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_156)"
"(current-load-relative-directory)))"
"(if or-part_156"
" or-part_156"
"(current-directory)))))))"
"((get-reg_144)"
"(lambda()"
"(1/namespace-module-registry(1/current-namespace))))"
"((show-collection-err_145)"
"(lambda(msg_157)"
"(let-values(((msg_158)"
"(string-append"
"(let-values(((or-part_159)"
"(if stx_128"
"(if(error-print-source-location)"
"(format-source-location"
" stx_128)"
" #f)"
" #f)))"
"(if or-part_159"
" or-part_159"
"                                                                                  \"standard-module-name-resolver\"))"
"                                                                              \": \""
"(regexp-replace"
"                                                                               '#rx\"\\n\""
" msg_157"
"(format"
"                                                                                \"\\n  for module path: ~s\\n\""
" s_126)))))"
"(raise"
"(if stx_128"
"(1/make-exn:fail:syntax:missing-module"
" msg_158"
"(current-continuation-marks)"
"(list stx_128)"
" s_126)"
"(1/make-exn:fail:filesystem:missing-module"
" msg_158"
"(current-continuation-marks)"
" s_126))))))"
"((ss->rkt_146)"
"(lambda(s_160)"
"(let-values(((len_161)(string-length s_160)))"
"(if(if(>= len_161 3)"
"(if(equal?"
" '#\\."
"(string-ref s_160(- len_161 3)))"
"(if(equal?"
" '#\\s"
"(string-ref s_160(- len_161 2)))"
"(equal?"
" '#\\s"
"(string-ref s_160(- len_161 1)))"
" #f)"
" #f)"
" #f)"
"(string-append"
"(substring s_160 0(- len_161 3))"
"                                                                    \".rkt\")"
" s_160))))"
"((path-ss->rkt_147)"
"(lambda(p_162)"
"(let-values(((base_163 name_164 dir?_165)"
"(split-path p_162)))"
"                                                                 (if (regexp-match '#rx\"[.]ss$\" (path->bytes name_164))"
"                                                                   (path-replace-extension p_162 #\".rkt\")"
" p_162))))"
"((s_148)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((v_166)(cadr s_126)))"
"                                                                 (if (let-values (((or-part_167) (equal? v_166 \".\")))"
"                                                                       (if or-part_167 or-part_167 (equal? v_166 \"..\")))"
"(if relto_127"
"(let-values(((p_168)"
"(1/resolved-module-path-name"
" relto_127)))"
"(if(pair? p_168)(car p_168) p_168))"
"(error"
" 'standard-module-name-resolver"
"                                                                      \"no base path for relative submodule path: ~.s\""
" s_126))"
" v_166))"
" s_126))"
"((subm-path_149)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((p_169)"
"(if(if(let-values(((or-part_170)"
"(equal?"
"(cadr s_126)"
"                                                                                                    \".\")))"
"(if or-part_170"
" or-part_170"
"                                                                                         (equal? (cadr s_126) \"..\")))"
" relto_127"
" #f)"
"(let-values(((p_171)"
"(1/resolved-module-path-name"
" relto_127))"
"((r_172)"
"(if(equal?"
"(cadr s_126)"
"                                                                                                  \"..\")"
"(cdr s_126)"
"(cddr s_126))))"
"(if(pair? p_171)"
"(flatten-sub-path_130"
"(car p_171)"
"(append(cdr p_171) r_172))"
"(flatten-sub-path_130 p_171 r_172)))"
"(flatten-sub-path_130"
"                                                                                \".\""
"                                                                                (if (equal? (cadr s_126) \"..\")"
"(cdr s_126)"
"(cddr s_126))))))"
"(if(pair? p_169)(cdr p_169) #f))"
" #f)))"
"(let-values(((s-parsed_173)"
"(if(symbol? s_148)"
"(let-values()"
"(let-values(((or-part_174)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_174"
" or-part_174"
"(let-values(((cols_175 file_176)"
"(split-relative-string"
"(symbol->string s_148)"
" #f)))"
"(let-values(((f-file_177)"
"(if(null? cols_175)"
"                                                                                         \"main.rkt\""
"(string-append"
" file_176"
"                                                                                          \".rkt\"))))"
"(find-col-file"
" show-collection-err_145"
"(if(null? cols_175)"
" file_176"
"(car cols_175))"
"(if(null? cols_175) null(cdr cols_175))"
" f-file_177"
" #t))))))"
"(if(string? s_148)"
"(let-values()"
"(let-values(((dir_178)(get-dir_143)))"
"(let-values(((or-part_179)"
"(path-cache-get"
"(cons s_148 dir_178))))"
"(if or-part_179"
" or-part_179"
"(let-values(((cols_180 file_181)"
"(split-relative-string"
" s_148"
" #f)))"
"(if(null? cols_180)"
"(build-path"
" dir_178"
"(ss->rkt_146 file_181))"
"(apply"
" build-path"
" dir_178"
"(append"
"(map2"
"(lambda(s_182)"
"                                                                                    (if (string=? s_182 \".\")"
"(let-values() 'same)"
"                                                                                      (if (string=? s_182 \"..\")"
"(let-values() 'up)"
"(let-values() s_182))))"
" cols_180)"
"(list(ss->rkt_146 file_181))))))))))"
"(if(path? s_148)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(if(complete-path? s_148)"
" s_148"
"(path->complete-path s_148(get-dir_143))))))"
"(if(eq?(car s_148) 'lib)"
"(let-values()"
"(let-values(((or-part_183)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_183"
" or-part_183"
"(let-values(((cols_184 file_185)"
"(split-relative-string"
"(cadr s_148)"
" #f)))"
"(let-values(((old-style?_186)"
"(if(null?(cddr s_148))"
"(if(null? cols_184)"
"(regexp-match?"
"                                                                                                  '#rx\"[.]\""
" file_185)"
" #f)"
" #t)))"
"(let-values(((f-file_187)"
"(if old-style?_186"
"(ss->rkt_146 file_185)"
"(if(null? cols_184)"
"                                                                                                   \"main.rkt\""
"(if(regexp-match?"
"                                                                                                        '#rx\"[.]\""
" file_185)"
"(ss->rkt_146"
" file_185)"
"(string-append"
" file_185"
"                                                                                                      \".rkt\"))))))"
"(let-values(((cols_188)"
"(if old-style?_186"
"(append"
"(if(null?"
"(cddr s_148))"
"                                                                                                      '(\"mzlib\")"
"(apply"
" append"
"(map2"
"(lambda(p_189)"
"(split-relative-string"
" p_189"
" #t))"
"(cddr s_148))))"
" cols_184)"
"(if(null? cols_184)"
"(list file_185)"
" cols_184))))"
"(find-col-file"
" show-collection-err_145"
"(car cols_188)"
"(cdr cols_188)"
" f-file_187"
" #t))))))))"
"(if(eq?(car s_148) 'file)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(path->complete-path"
"(expand-user-path(cadr s_148))"
"(get-dir_143)))))"
"(void))))))))"
"(begin"
"(if(let-values(((or-part_190)(path? s-parsed_173)))"
"(if or-part_190 or-part_190(vector? s-parsed_173)))"
"(void)"
"(let-values()"
"(if stx_128"
"(raise-syntax-error$1"
" 'require"
"(format"
"                                                             \"bad module path~a\""
"                                                             (if s-parsed_173 (car s-parsed_173) \"\"))"
" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                            \"module-path?\""
" s_148))))"
"(let-values(((filename_191)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 0)"
"(simplify-path(cleanse-path s-parsed_173) #f))))"
"(let-values(((normal-filename_192)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 1)"
"(normal-case-path filename_191))))"
"(let-values(((base_193 name_194 dir?_195)"
"(if(vector? s-parsed_173)"
"(values"
" 'ignored"
"(vector-ref s-parsed_173 2)"
" 'ignored)"
"(split-path filename_191))))"
"(let-values(((no-sfx_196)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 3)"
"                                                                           (path-replace-extension name_194 #\"\"))))"
"(let-values(((root-modname_197)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 4)"
"(1/make-resolved-module-path"
" filename_191))))"
"(let-values(((hts_198)"
"(let-values(((or-part_199)"
"(hash-ref"
" -module-hash-table-table"
"(get-reg_144)"
" #f)))"
"(if or-part_199"
" or-part_199"
"(let-values(((hts_200)"
"(cons"
"(make-hasheq)"
"(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(get-reg_144)"
" hts_200)"
" hts_200))))))"
"(let-values(((modname_201)"
"(if subm-path_149"
"(1/make-resolved-module-path"
"(cons"
"(1/resolved-module-path-name"
" root-modname_197)"
" subm-path_149))"
" root-modname_197)))"
"(begin"
"(if load?_129"
"(let-values()"
"(let-values(((got_202)"
"(hash-ref"
"(car hts_198)"
" modname_201"
" #f)))"
"(if got_202"
"(void)"
"(let-values()"
"(let-values(((loading_203)"
"(let-values(((tag_205)"
"(if(continuation-prompt-available?"
" -loading-prompt-tag)"
" -loading-prompt-tag"
"(default-continuation-prompt-tag))))"
"(continuation-mark-set-first"
" #f"
" -loading-filename"
" null"
" tag_205)))"
"((nsr_204)(get-reg_144)))"
"(begin"
"(for-each2"
"(lambda(s_206)"
"(if(if(equal?"
"(cdr s_206)"
" normal-filename_192)"
"(eq?(car s_206) nsr_204)"
" #f)"
"(let-values()"
"(error"
" 'standard-module-name-resolver"
"                                                                                           \"cycle in loading\\n  at path: ~a\\n  paths:~a\""
" filename_191"
"(apply"
" string-append"
"((letrec-values(((loop_207)"
"(lambda(l_208)"
"(if(null?"
" l_208)"
" '()"
"(list*"
"                                                                                                                   \"\\n   \""
"(path->string"
"(cdar"
" l_208))"
"(loop_207"
"(cdr"
" l_208)))))))"
" loop_207)"
"(alt-reverse"
" loading_203)))))"
"(void)))"
" loading_203)"
"((if(continuation-prompt-available?"
" -loading-prompt-tag)"
"(lambda(f_209)(f_209))"
"(lambda(f_210)"
"(call-with-continuation-prompt"
" f_210"
" -loading-prompt-tag)))"
"(lambda()"
"(with-continuation-mark"
" -loading-filename"
"(cons"
"(cons"
" nsr_204"
" normal-filename_192)"
" loading_203)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-name"
" root-modname_197"
" 1/current-module-path-for-load"
"((if stx_128"
"(lambda(p_211)"
"(1/datum->syntax"
" #f"
" p_211"
" stx_128))"
" values)"
"(if(symbol? s_148)"
"(let-values() s_148)"
"(if(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)"
"(let-values() s_148)"
"(let-values()"
"(if(1/resolved-module-path?"
" root-modname_197)"
"(let-values(((src_212)"
"(1/resolved-module-path-name"
" root-modname_197)))"
"(if(symbol?"
" src_212)"
"(list"
" 'quote"
" src_212)"
" src_212))"
" root-modname_197))))))"
"(let-values()"
"((current-load/use-compiled)"
" filename_191"
"(let-values(((sym_213)"
"(string->symbol"
"(path->string"
" no-sfx_196))))"
"(if subm-path_149"
"(if(hash-ref"
"(car hts_198)"
" root-modname_197"
" #f)"
"(cons #f subm-path_149)"
"(cons"
" sym_213"
" subm-path_149))"
" sym_213))))))))))))))"
"(void))"
"(if(if(not(vector? s-parsed_173))"
"(if load?_129"
"(let-values(((or-part_214)"
"(string? s_148)))"
"(if or-part_214"
" or-part_214"
"(let-values(((or-part_215)"
"(symbol? s_148)))"
"(if or-part_215"
" or-part_215"
"(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)))))"
" #f)"
" #f)"
"(let-values()"
"(path-cache-set!"
"(if(string? s_148)"
"(cons s_148(get-dir_143))"
"(cons s_148(get-reg_144)))"
"(vector"
" filename_191"
" normal-filename_192"
" name_194"
" no-sfx_196"
" root-modname_197)))"
"(void))"
" modname_201)))))))))))))))))))))))))"
" standard-module-name-resolver_113)))))"
"(define-values"
"(default-eval-handler)"
"(lambda(s_216)"
"(1/eval"
" s_216"
"(1/current-namespace)"
"(let-values(((c_217)(current-compile)))"
"(lambda(e_218 ns_219)"
"(if(eq? ns_219(1/current-namespace))"
"(c_217 e_218 #t)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_219)"
"(let-values()(c_217 e_218 #t)))))))))"
"(define-values"
"(default-compile-handler)"
"(lambda(s_220 immediate-eval?_221)(1/compile s_220(1/current-namespace)(not immediate-eval?_221))))"
"(define-values"
"(default-read-interaction)"
"(lambda(src_222 in_223)"
"(begin"
"(if(input-port? in_223)"
"(void)"
"        (let-values () (raise-argument-error 'default-read-interaction \"input-port?\" in_223)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #f)"
"(let-values()(1/read-syntax src_222 in_223))))))"
"(define-values"
"(boot)"
"(lambda()"
"(begin"
"(seal)"
"(1/current-module-name-resolver standard-module-name-resolver)"
"(current-load/use-compiled default-load/use-compiled)"
"(current-reader-guard default-reader-guard)"
"(current-eval default-eval-handler)"
"(current-compile default-compile-handler)"
"(current-load default-load-handler)"
"(current-read-interaction default-read-interaction))))"
"(define-values"
"(seal)"
"(lambda()(set! orig-paramz(reparameterize(continuation-mark-set-first #f parameterization-key)))))"
"(define-values(boot-primitives)(hash 'boot boot 'seal seal 'orig-paramz orig-paramz))"
"(void)"
"(void)"
"(define-values"
"(dynamic-require-reader)"
"(let-values(((dynamic-require-reader5_1)"
"(lambda(mod-path3_2 sym4_3 fail-thunk1_4 fail-thunk2_5)"
"(let-values(((mod-path_6) mod-path3_2))"
"(let-values(((sym_7) sym4_3))"
"(let-values(((fail-thunk_8)(if fail-thunk2_5 fail-thunk1_4 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values(((root-ns_9)(namespace-root-namespace(1/current-namespace))))"
"(let-values(((proc_10)"
"(if root-ns_9"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" root-ns_9)"
"(let-values()(1/dynamic-require mod-path_6 sym_7 fail-thunk_8)))"
"(1/dynamic-require mod-path_6 sym_7 fail-thunk_8))))"
"(if(if(eq? sym_7 'read-syntax)"
"(if(procedure? proc_10)(procedure-arity-includes? proc_10 6) #f)"
" #f)"
"(let-values()"
"(lambda(name_11 input_12 mod-s_13 line_14 column_15 position_16)"
"(proc_10"
" name_11"
" input_12"
"(reader-syntax->syntax mod-s_13)"
" line_14"
" column_15"
" position_16)))"
"(let-values() proc_10)))))))))))"
"(case-lambda"
"((mod-path_17 sym_18)(dynamic-require-reader5_1 mod-path_17 sym_18 #f #f))"
"((mod-path_19 sym_20 fail-thunk1_21)(dynamic-require-reader5_1 mod-path_19 sym_20 fail-thunk1_21 #t)))))"
"(void)"
"(void)"
"(define-values"
"(expand-body7.1)"
"(lambda(source1_22 stratified?2_23 stratified?4_24 bodys5_25 ctx6_26)"
"(let-values(((bodys_27) bodys5_25))"
"(let-values(((ctx_28) ctx6_26))"
"(let-values(((s_29) source1_22))"
"(let-values(((stratified?_30)(if stratified?4_24 stratified?2_23 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_39)(expand-context-observer ctx_28)))"
"(if obs_39"
"(let-values()(let-values()(call-expand-observe obs_39 'enter-block)))"
"(void)))"
"(values))))"
"(let-values(((inside-sc_31)(new-scope 'intdef)))"
"(let-values(((init-bodys_32)"
"(let-values(((lst_40) bodys_27))"
"(begin"
"(if(list? lst_40)(void)(let-values()(in-list lst_40)))"
"((letrec-values(((for-loop_41)"
"(lambda(lst_42)"
"(if(pair? lst_42)"
"(let-values(((body_43)(unsafe-car lst_42))"
"((rest_44)(unsafe-cdr lst_42)))"
"(let-values(((post-guard-var_45)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_46)"
"(let-values()"
"(let-values()"
"(add-scope body_43 inside-sc_31)))))"
"(let-values(((result_47)"
"(if(post-guard-var_45)"
"(for-loop_41 rest_44)"
" null)))"
"(cons elem_46 result_47))))))"
" null))))"
" for-loop_41)"
" lst_40)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_48)(expand-context-observer ctx_28)))"
"(if obs_48"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_48"
" 'block-renames"
"(datum->syntax$1 #f init-bodys_32)"
"(datum->syntax$1 #f bodys_27))))"
"(void)))"
"(values))))"
"(let-values(((phase_33)(expand-context-phase ctx_28)))"
"(let-values(((frame-id_34)(make-reference-record)))"
"(let-values(((def-ctx-scopes_35)(box null)))"
"(let-values(((body-ctx_36)"
"(let-values(((v_49) ctx_28))"
"(let-values(((the-struct_50) v_49))"
"(if(expand-context/outer? the-struct_50)"
"(let-values(((context48_51)(list(make-liberal-define-context)))"
"((name49_52) #f)"
"((only-immediate?50_53) #t)"
"((def-ctx-scopes51_54) def-ctx-scopes_35)"
"((post-expansion-scope52_55) inside-sc_31)"
"((post-expansion-scope-action53_56) add-scope)"
"((scopes54_57)"
"(cons inside-sc_31(expand-context-scopes ctx_28)))"
"((use-site-scopes55_58)(box null))"
"((frame-id56_59) frame-id_34)"
"((reference-records57_60)"
"(cons"
" frame-id_34"
"(expand-context-reference-records ctx_28)))"
"((inner58_61)(root-expand-context/outer-inner v_49)))"
"(expand-context/outer1.1"
" inner58_61"
" post-expansion-scope52_55"
" use-site-scopes55_58"
" frame-id56_59"
" context48_51"
"(expand-context/outer-env the-struct_50)"
" post-expansion-scope-action53_56"
" scopes54_57"
" def-ctx-scopes51_54"
"(expand-context/outer-binding-layer the-struct_50)"
" reference-records57_60"
" only-immediate?50_53"
"(expand-context/outer-need-eventually-defined the-struct_50)"
"(expand-context/outer-current-introduction-scopes the-struct_50)"
" name49_52))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"expand-context/outer?\""
" the-struct_50))))))"
"(let-values(((maybe-increment-binding-layer_37)"
"(lambda(ids_62 body-ctx_63)"
"(if(eq?"
"(expand-context-binding-layer body-ctx_63)"
"(expand-context-binding-layer ctx_28))"
"(increment-binding-layer ids_62 body-ctx_63 inside-sc_31)"
"(expand-context-binding-layer body-ctx_63)))))"
"(let-values(((name_38)(expand-context-name ctx_28)))"
"((letrec-values(((loop_64)"
"(lambda(body-ctx_65"
" bodys_66"
" done-bodys_67"
" val-idss_68"
" val-keyss_69"
" val-rhss_70"
" track-stxs_71"
" trans-idss_72"
" dups_73)"
"(if(null? bodys_66)"
"(let-values()"
"(begin"
"(let-values(((obs_74)"
"(expand-context-observer body-ctx_65)))"
"(if obs_74"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_74"
"(if(null? val-idss_68)"
" 'block->list"
" 'block->letrec))))"
"(void)))"
"(let-values(((...nder/expand/body.rkt:84:6_75)"
" finish-expanding-body28.1)"
"((body-ctx59_76) body-ctx_65)"
"((frame-id60_77) frame-id_34)"
"((def-ctx-scopes61_78) def-ctx-scopes_35)"
"((temp62_79)(alt-reverse val-idss_68))"
"((temp63_80)(alt-reverse val-keyss_69))"
"((temp64_81)(alt-reverse val-rhss_70))"
"((temp65_82)(alt-reverse track-stxs_71))"
"((temp66_83)(alt-reverse done-bodys_67))"
"((s67_84) s_29)"
"((stratified?68_85) stratified?_30)"
"((name69_86) name_38)"
"((temp70_87)(alt-reverse trans-idss_72)))"
"(finish-expanding-body26.1"
" temp70_87"
" name69_86"
" s67_84"
" stratified?68_85"
" body-ctx59_76"
" frame-id60_77"
" def-ctx-scopes61_78"
" temp62_79"
" temp63_80"
" temp64_81"
" temp65_82"
" temp66_83))))"
"(let-values()"
"(let-values(((rest-bodys_88)(cdr bodys_66)))"
"(let-values((()"
"(begin"
"(let-values(((obs_91)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_91"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_91 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_89)"
"(let-values(((temp71_92)(car bodys_66))"
"((temp72_93)"
"(if(if name_38"
"(null?(cdr bodys_66))"
" #f)"
"(let-values(((v_94)"
" body-ctx_65))"
"(let-values(((the-struct_95)"
" v_94))"
"(if(expand-context/outer?"
" the-struct_95)"
"(let-values(((name73_96)"
" name_38)"
"((inner74_97)"
"(root-expand-context/outer-inner"
" v_94)))"
"(expand-context/outer1.1"
" inner74_97"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_95)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_95)"
"(root-expand-context/outer-frame-id"
" the-struct_95)"
"(expand-context/outer-context"
" the-struct_95)"
"(expand-context/outer-env"
" the-struct_95)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_95)"
"(expand-context/outer-scopes"
" the-struct_95)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_95)"
"(expand-context/outer-binding-layer"
" the-struct_95)"
"(expand-context/outer-reference-records"
" the-struct_95)"
"(expand-context/outer-only-immediate?"
" the-struct_95)"
"(expand-context/outer-need-eventually-defined"
" the-struct_95)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_95)"
" name73_96))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                   \"expand-context/outer?\""
" the-struct_95))))"
" body-ctx_65)))"
"(expand5.1 #f #f temp71_92 temp72_93))))"
"(let-values(((disarmed-exp-body_90)"
"(syntax-disarm$1 exp-body_89)))"
"(let-values(((tmp_98)"
"(core-form-sym"
" disarmed-exp-body_90"
" phase_33)))"
"(if(equal? tmp_98 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_114)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_114"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_114"
" 'prim-begin)))"
"(void)))"
"(values))))"
"(let-values(((ok?_99 begin75_100 e76_101)"
"(let-values(((s_115)"
" disarmed-exp-body_90))"
"(let-values(((orig-s_116)"
" s_115))"
"(let-values(((begin75_117"
" e76_118)"
"(let-values(((s_119)"
"(if(syntax?$1"
" s_115)"
"(syntax-e$1"
" s_115)"
" s_115)))"
"(if(pair?"
" s_119)"
"(let-values(((begin77_120)"
"(let-values(((s_122)"
"(car"
" s_119)))"
" s_122))"
"((e78_121)"
"(let-values(((s_123)"
"(cdr"
" s_119)))"
"(let-values(((s_124)"
"(if(syntax?$1"
" s_123)"
"(syntax-e$1"
" s_123)"
" s_123)))"
"(let-values(((flat-s_125)"
"(to-syntax-list.1"
" s_124)))"
"(if(not"
" flat-s_125)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_116))"
"(let-values()"
" flat-s_125)))))))"
"(values"
" begin77_120"
" e78_121))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_116)))))"
"(values"
" #t"
" begin75_117"
" e76_118))))))"
"(let-values(((track_112)"
"(lambda(e_126)"
"(syntax-track-origin$1"
" e_126"
" exp-body_89))))"
"(let-values(((splice-bodys_113)"
"(append"
"(map2 track_112 e76_101)"
" rest-bodys_88)))"
"(begin"
"(let-values(((obs_127)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_127"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_127"
" 'splice"
" splice-bodys_113)))"
"(void)))"
"(loop_64"
" body-ctx_65"
" splice-bodys_113"
" done-bodys_67"
" val-idss_68"
" val-keyss_69"
" val-rhss_70"
" track-stxs_71"
" trans-idss_72"
" dups_73)))))))"
"(if(equal? tmp_98 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_149)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_149"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_149"
" 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_128"
" define-values79_129"
" id80_130"
" rhs81_131)"
"(let-values(((s_150)"
" disarmed-exp-body_90))"
"(let-values(((orig-s_151)"
" s_150))"
"(let-values(((define-values79_152"
" id80_153"
" rhs81_154)"
"(let-values(((s_155)"
"(if(syntax?$1"
" s_150)"
"(syntax-e$1"
" s_150)"
" s_150)))"
"(if(pair?"
" s_155)"
"(let-values(((define-values82_156)"
"(let-values(((s_159)"
"(car"
" s_155)))"
" s_159))"
"((id83_157"
" rhs84_158)"
"(let-values(((s_160)"
"(cdr"
" s_155)))"
"(let-values(((s_161)"
"(if(syntax?$1"
" s_160)"
"(syntax-e$1"
" s_160)"
" s_160)))"
"(if(pair?"
" s_161)"
"(let-values(((id85_162)"
"(let-values(((s_164)"
"(car"
" s_161)))"
"(let-values(((s_165)"
"(if(syntax?$1"
" s_164)"
"(syntax-e$1"
" s_164)"
" s_164)))"
"(let-values(((flat-s_166)"
"(to-syntax-list.1"
" s_165)))"
"(if(not"
" flat-s_166)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_151))"
"(let-values()"
"(let-values(((id_167)"
"(let-values(((lst_168)"
" flat-s_166))"
"(begin"
"(if(list?"
" lst_168)"
"(void)"
"(let-values()"
"(in-list"
" lst_168)))"
"((letrec-values(((for-loop_169)"
"(lambda(id_170"
" lst_171)"
"(if(pair?"
" lst_171)"
"(let-values(((s_172)"
"(unsafe-car"
" lst_171))"
"((rest_173)"
"(unsafe-cdr"
" lst_171)))"
"(let-values(((id_174)"
"(let-values(((id_175)"
" id_170))"
"(let-values(((id_176)"
"(let-values()"
"(let-values(((id88_177)"
"(let-values()"
"(if(let-values(((or-part_178)"
"(if(syntax?$1"
" s_172)"
"(symbol?"
"(syntax-e$1"
" s_172))"
" #f)))"
"(if or-part_178"
" or-part_178"
"(symbol?"
" s_172)))"
" s_172"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_151"
" s_172)))))"
"(cons"
" id88_177"
" id_175)))))"
"(values"
" id_176)))))"
"(if(not"
" #f)"
"(for-loop_169"
" id_174"
" rest_173)"
" id_174)))"
" id_170))))"
" for-loop_169)"
" null"
" lst_168)))))"
"(alt-reverse"
" id_167))))))))"
"((rhs86_163)"
"(let-values(((s_179)"
"(cdr"
" s_161)))"
"(let-values(((s_180)"
"(if(syntax?$1"
" s_179)"
"(syntax-e$1"
" s_179)"
" s_179)))"
"(if(pair?"
" s_180)"
"(let-values(((rhs87_181)"
"(let-values(((s_182)"
"(car"
" s_180)))"
" s_182))"
"(()"
"(let-values(((s_183)"
"(cdr"
" s_180)))"
"(let-values(((s_184)"
"(if(syntax?$1"
" s_183)"
"(syntax-e$1"
" s_183)"
" s_183)))"
"(if(null?"
" s_184)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_151))))))"
"(values"
" rhs87_181))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_151))))))"
"(values"
" id85_162"
" rhs86_163))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_151))))))"
"(values"
" define-values82_156"
" id83_157"
" rhs84_158))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_151)))))"
"(values"
" #t"
" define-values79_152"
" id80_153"
" rhs81_154))))))"
"(let-values(((ids_144)"
"(remove-use-site-scopes"
" id80_130"
" body-ctx_65)))"
"(let-values((()"
"(begin"
"(let-values(((obs_185)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_185"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_185"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_144"
" rhs81_131)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_145)"
"(let-values(((ids89_186)"
" ids_144)"
"((phase90_187)"
" phase_33)"
"((exp-body91_188)"
" exp-body_89)"
"((dups92_189)"
" dups_73))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids89_186"
" phase90_187"
" exp-body91_188"
" dups92_189"
" #t))))"
"(let-values(((counter_146)"
"(root-expand-context-counter"
" ctx_28)))"
"(let-values(((keys_147)"
"(let-values(((lst_190)"
" ids_144))"
"(begin"
"(if(list?"
" lst_190)"
"(void)"
"(let-values()"
"(in-list"
" lst_190)))"
"((letrec-values(((for-loop_191)"
"(lambda(lst_192)"
"(if(pair?"
" lst_192)"
"(let-values(((id_193)"
"(unsafe-car"
" lst_192))"
"((rest_194)"
"(unsafe-cdr"
" lst_192)))"
"(let-values(((post-guard-var_195)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_196)"
"(let-values()"
"(let-values()"
"(let-values(((id93_198)"
" id_193)"
"((phase94_199)"
" phase_33)"
"((counter95_200)"
" counter_146)"
"((frame-id96_201)"
" frame-id_34)"
"((exp-body97_202)"
" exp-body_89))"
"(add-local-binding!35.1"
" frame-id96_201"
" #t"
" exp-body97_202"
" #t"
" id93_198"
" phase94_199"
" counter95_200))))))"
"(let-values(((result_203)"
"(if(post-guard-var_195)"
"(for-loop_191"
" rest_194)"
" null)))"
"(cons"
" elem_196"
" result_203))))))"
" null))))"
" for-loop_191)"
" lst_190)))))"
"(let-values(((extended-env_148)"
"(let-values(((lst_204)"
" keys_147)"
"((lst_205)"
" ids_144))"
"(begin"
"(if(list?"
" lst_204)"
"(void)"
"(let-values()"
"(in-list"
" lst_204)))"
"(if(list?"
" lst_205)"
"(void)"
"(let-values()"
"(in-list"
" lst_205)))"
"((letrec-values(((for-loop_206)"
"(lambda(env_207"
" lst_208"
" lst_209)"
"(if(if(pair?"
" lst_208)"
"(pair?"
" lst_209)"
" #f)"
"(let-values(((key_210)"
"(unsafe-car"
" lst_208))"
"((rest_211)"
"(unsafe-cdr"
" lst_208))"
"((id_212)"
"(unsafe-car"
" lst_209))"
"((rest_213)"
"(unsafe-cdr"
" lst_209)))"
"(let-values(((env_214)"
"(let-values(((env_215)"
" env_207))"
"(let-values(((env_216)"
"(let-values()"
"(env-extend"
" env_215"
" key_210"
"(local-variable1.1"
" id_212)))))"
"(values"
" env_216)))))"
"(if(not"
" #f)"
"(for-loop_206"
" env_214"
" rest_211"
" rest_213)"
" env_214)))"
" env_207))))"
" for-loop_206)"
"(expand-context-env"
" body-ctx_65)"
" lst_204"
" lst_205)))))"
"(loop_64"
"(let-values(((v_217)"
" body-ctx_65))"
"(let-values(((the-struct_218)"
" v_217))"
"(if(expand-context/outer?"
" the-struct_218)"
"(let-values(((env98_219)"
" extended-env_148)"
"((binding-layer99_220)"
"(maybe-increment-binding-layer_37"
" ids_144"
" body-ctx_65))"
"((inner100_221)"
"(root-expand-context/outer-inner"
" v_217)))"
"(expand-context/outer1.1"
" inner100_221"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_218)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_218)"
"(root-expand-context/outer-frame-id"
" the-struct_218)"
"(expand-context/outer-context"
" the-struct_218)"
" env98_219"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_218)"
"(expand-context/outer-scopes"
" the-struct_218)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_218)"
" binding-layer99_220"
"(expand-context/outer-reference-records"
" the-struct_218)"
"(expand-context/outer-only-immediate?"
" the-struct_218)"
"(expand-context/outer-need-eventually-defined"
" the-struct_218)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_218)"
"(expand-context/outer-name"
" the-struct_218)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                  \"expand-context/outer?\""
" the-struct_218))))"
" rest-bodys_88"
" null"
"(cons"
" ids_144"
"(append"
"(let-values(((lst_222)"
" done-bodys_67))"
"(begin"
"(if(list? lst_222)"
"(void)"
"(let-values()"
"(in-list lst_222)))"
"((letrec-values(((for-loop_223)"
"(lambda(lst_224)"
"(if(pair?"
" lst_224)"
"(let-values(((done-body_225)"
"(unsafe-car"
" lst_224))"
"((rest_226)"
"(unsafe-cdr"
" lst_224)))"
"(let-values(((post-guard-var_227)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_228)"
"(let-values()"
"(let-values()"
" null))))"
"(let-values(((result_229)"
"(if(post-guard-var_227)"
"(for-loop_223"
" rest_226)"
" null)))"
"(cons"
" elem_228"
" result_229))))))"
" null))))"
" for-loop_223)"
" lst_222)))"
" val-idss_68))"
"(cons"
" keys_147"
"(append"
"(let-values(((lst_230)"
" done-bodys_67))"
"(begin"
"(if(list? lst_230)"
"(void)"
"(let-values()"
"(in-list lst_230)))"
"((letrec-values(((for-loop_231)"
"(lambda(lst_232)"
"(if(pair?"
" lst_232)"
"(let-values(((done-body_233)"
"(unsafe-car"
" lst_232))"
"((rest_234)"
"(unsafe-cdr"
" lst_232)))"
"(let-values(((post-guard-var_235)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_236)"
"(let-values()"
"(let-values()"
" null))))"
"(let-values(((result_237)"
"(if(post-guard-var_235)"
"(for-loop_231"
" rest_234)"
" null)))"
"(cons"
" elem_236"
" result_237))))))"
" null))))"
" for-loop_231)"
" lst_230)))"
" val-keyss_69))"
"(cons"
" rhs81_131"
"(append"
"(let-values(((lst_238)"
" done-bodys_67))"
"(begin"
"(if(list? lst_238)"
"(void)"
"(let-values()"
"(in-list lst_238)))"
"((letrec-values(((for-loop_239)"
"(lambda(lst_240)"
"(if(pair?"
" lst_240)"
"(let-values(((done-body_241)"
"(unsafe-car"
" lst_240))"
"((rest_242)"
"(unsafe-cdr"
" lst_240)))"
"(let-values(((post-guard-var_243)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_244)"
"(let-values()"
"(let-values()"
"(no-binds"
" done-body_241"
" s_29"
" phase_33)))))"
"(let-values(((result_245)"
"(if(post-guard-var_243)"
"(for-loop_239"
" rest_242)"
" null)))"
"(cons"
" elem_244"
" result_245))))))"
" null))))"
" for-loop_239)"
" lst_238)))"
" val-rhss_70))"
"(cons"
" exp-body_89"
"(append"
"(let-values(((lst_246)"
" done-bodys_67))"
"(begin"
"(if(list? lst_246)"
"(void)"
"(let-values()"
"(in-list lst_246)))"
"((letrec-values(((for-loop_247)"
"(lambda(lst_248)"
"(if(pair?"
" lst_248)"
"(let-values(((done-body_249)"
"(unsafe-car"
" lst_248))"
"((rest_250)"
"(unsafe-cdr"
" lst_248)))"
"(let-values(((post-guard-var_251)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_252)"
"(let-values()"
"(let-values()"
" #f))))"
"(let-values(((result_253)"
"(if(post-guard-var_251)"
"(for-loop_247"
" rest_250)"
" null)))"
"(cons"
" elem_252"
" result_253))))))"
" null))))"
" for-loop_247)"
" lst_246)))"
" track-stxs_71))"
" trans-idss_72"
" new-dups_145))))))))))"
"(if(equal? tmp_98 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_276)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_276"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_276"
" 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_254"
" define-syntaxes101_255"
" id102_256"
" rhs103_257)"
"(let-values(((s_277)"
" disarmed-exp-body_90))"
"(let-values(((orig-s_278)"
" s_277))"
"(let-values(((define-syntaxes101_279"
" id102_280"
" rhs103_281)"
"(let-values(((s_282)"
"(if(syntax?$1"
" s_277)"
"(syntax-e$1"
" s_277)"
" s_277)))"
"(if(pair?"
" s_282)"
"(let-values(((define-syntaxes104_283)"
"(let-values(((s_286)"
"(car"
" s_282)))"
" s_286))"
"((id105_284"
" rhs106_285)"
"(let-values(((s_287)"
"(cdr"
" s_282)))"
"(let-values(((s_288)"
"(if(syntax?$1"
" s_287)"
"(syntax-e$1"
" s_287)"
" s_287)))"
"(if(pair?"
" s_288)"
"(let-values(((id107_289)"
"(let-values(((s_291)"
"(car"
" s_288)))"
"(let-values(((s_292)"
"(if(syntax?$1"
" s_291)"
"(syntax-e$1"
" s_291)"
" s_291)))"
"(let-values(((flat-s_293)"
"(to-syntax-list.1"
" s_292)))"
"(if(not"
" flat-s_293)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_278))"
"(let-values()"
"(let-values(((id_294)"
"(let-values(((lst_295)"
" flat-s_293))"
"(begin"
"(if(list?"
" lst_295)"
"(void)"
"(let-values()"
"(in-list"
" lst_295)))"
"((letrec-values(((for-loop_296)"
"(lambda(id_297"
" lst_298)"
"(if(pair?"
" lst_298)"
"(let-values(((s_299)"
"(unsafe-car"
" lst_298))"
"((rest_300)"
"(unsafe-cdr"
" lst_298)))"
"(let-values(((id_301)"
"(let-values(((id_302)"
" id_297))"
"(let-values(((id_303)"
"(let-values()"
"(let-values(((id110_304)"
"(let-values()"
"(if(let-values(((or-part_305)"
"(if(syntax?$1"
" s_299)"
"(symbol?"
"(syntax-e$1"
" s_299))"
" #f)))"
"(if or-part_305"
" or-part_305"
"(symbol?"
" s_299)))"
" s_299"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_278"
" s_299)))))"
"(cons"
" id110_304"
" id_302)))))"
"(values"
" id_303)))))"
"(if(not"
" #f)"
"(for-loop_296"
" id_301"
" rest_300)"
" id_301)))"
" id_297))))"
" for-loop_296)"
" null"
" lst_295)))))"
"(alt-reverse"
" id_294))))))))"
"((rhs108_290)"
"(let-values(((s_306)"
"(cdr"
" s_288)))"
"(let-values(((s_307)"
"(if(syntax?$1"
" s_306)"
"(syntax-e$1"
" s_306)"
" s_306)))"
"(if(pair?"
" s_307)"
"(let-values(((rhs109_308)"
"(let-values(((s_309)"
"(car"
" s_307)))"
" s_309))"
"(()"
"(let-values(((s_310)"
"(cdr"
" s_307)))"
"(let-values(((s_311)"
"(if(syntax?$1"
" s_310)"
"(syntax-e$1"
" s_310)"
" s_310)))"
"(if(null?"
" s_311)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_278))))))"
"(values"
" rhs109_308))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_278))))))"
"(values"
" id107_289"
" rhs108_290))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_278))))))"
"(values"
" define-syntaxes104_283"
" id105_284"
" rhs106_285))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_278)))))"
"(values"
" #t"
" define-syntaxes101_279"
" id102_280"
" rhs103_281))))))"
"(let-values(((ids_270)"
"(remove-use-site-scopes"
" id102_256"
" body-ctx_65)))"
"(let-values((()"
"(begin"
"(let-values(((obs_312)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_312"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_312"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_270"
" rhs103_257)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_271)"
"(let-values(((ids111_313)"
" ids_270)"
"((phase112_314)"
" phase_33)"
"((exp-body113_315)"
" exp-body_89)"
"((dups114_316)"
" dups_73))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids111_313"
" phase112_314"
" exp-body113_315"
" dups114_316"
" #t))))"
"(let-values(((counter_272)"
"(root-expand-context-counter"
" ctx_28)))"
"(let-values(((keys_273)"
"(let-values(((lst_317)"
" ids_270))"
"(begin"
"(if(list?"
" lst_317)"
"(void)"
"(let-values()"
"(in-list"
" lst_317)))"
"((letrec-values(((for-loop_318)"
"(lambda(lst_319)"
"(if(pair?"
" lst_319)"
"(let-values(((id_320)"
"(unsafe-car"
" lst_319))"
"((rest_321)"
"(unsafe-cdr"
" lst_319)))"
"(let-values(((post-guard-var_322)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_323)"
"(let-values()"
"(let-values()"
"(let-values(((id115_325)"
" id_320)"
"((phase116_326)"
" phase_33)"
"((counter117_327)"
" counter_272)"
"((frame-id118_328)"
" frame-id_34)"
"((exp-body119_329)"
" exp-body_89))"
"(add-local-binding!35.1"
" frame-id118_328"
" #t"
" exp-body119_329"
" #t"
" id115_325"
" phase116_326"
" counter117_327))))))"
"(let-values(((result_330)"
"(if(post-guard-var_322)"
"(for-loop_318"
" rest_321)"
" null)))"
"(cons"
" elem_323"
" result_330))))))"
" null))))"
" for-loop_318)"
" lst_317)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_331)"
"(expand-context-observer"
" body-ctx_65)))"
"(if obs_331"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_331"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values(((vals_274)"
"(eval-for-syntaxes-binding"
" rhs103_257"
" ids_270"
" body-ctx_65)))"
"(let-values(((extended-env_275)"
"(let-values(((lst_332)"
" keys_273)"
"((lst_333)"
" vals_274)"
"((lst_334)"
" ids_270))"
"(begin"
"(if(list?"
" lst_332)"
"(void)"
"(let-values()"
"(in-list"
" lst_332)))"
"(if(list?"
" lst_333)"
"(void)"
"(let-values()"
"(in-list"
" lst_333)))"
"(if(list?"
" lst_334)"
"(void)"
"(let-values()"
"(in-list"
" lst_334)))"
"((letrec-values(((for-loop_335)"
"(lambda(env_336"
" lst_337"
" lst_338"
" lst_339)"
"(if(if(pair?"
" lst_337)"
"(if(pair?"
" lst_338)"
"(pair?"
" lst_339)"
" #f)"
" #f)"
"(let-values(((key_340)"
"(unsafe-car"
" lst_337))"
"((rest_341)"
"(unsafe-cdr"
" lst_337))"
"((val_342)"
"(unsafe-car"
" lst_338))"
"((rest_343)"
"(unsafe-cdr"
" lst_338))"
"((id_344)"
"(unsafe-car"
" lst_339))"
"((rest_345)"
"(unsafe-cdr"
" lst_339)))"
"(let-values(((env_346)"
"(let-values(((env_347)"
" env_336))"
"(let-values(((env_348)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_342"
" id_344"
" phase_33)"
"(env-extend"
" env_347"
" key_340"
" val_342)))))"
"(values"
" env_348)))))"
"(if(not"
" #f)"
"(for-loop_335"
" env_346"
" rest_341"
" rest_343"
" rest_345)"
" env_346)))"
" env_336))))"
" for-loop_335)"
"(expand-context-env"
" body-ctx_65)"
" lst_332"
" lst_333"
" lst_334)))))"
"(loop_64"
"(let-values(((v_349)"
" body-ctx_65))"
"(let-values(((the-struct_350)"
" v_349))"
"(if(expand-context/outer?"
" the-struct_350)"
"(let-values(((env120_351)"
" extended-env_275)"
"((binding-layer121_352)"
"(maybe-increment-binding-layer_37"
" ids_270"
" body-ctx_65))"
"((inner122_353)"
"(root-expand-context/outer-inner"
" v_349)))"
"(expand-context/outer1.1"
" inner122_353"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_350)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_350)"
"(root-expand-context/outer-frame-id"
" the-struct_350)"
"(expand-context/outer-context"
" the-struct_350)"
" env120_351"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_350)"
"(expand-context/outer-scopes"
" the-struct_350)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_350)"
" binding-layer121_352"
"(expand-context/outer-reference-records"
" the-struct_350)"
"(expand-context/outer-only-immediate?"
" the-struct_350)"
"(expand-context/outer-need-eventually-defined"
" the-struct_350)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_350)"
"(expand-context/outer-name"
" the-struct_350)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                        \"expand-context/outer?\""
" the-struct_350))))"
" rest-bodys_88"
" done-bodys_67"
" val-idss_68"
" val-keyss_69"
" val-rhss_70"
" track-stxs_71"
"(cons"
" ids_270"
" trans-idss_72)"
" new-dups_271))))))))))))"
"(let-values()"
"(if stratified?_30"
"(let-values()"
"(loop_64"
" body-ctx_65"
" null"
"(append"
"(alt-reverse rest-bodys_88)"
"(cons exp-body_89 done-bodys_67))"
" val-idss_68"
" val-keyss_69"
" val-rhss_70"
" track-stxs_71"
" trans-idss_72"
" dups_73))"
"(let-values()"
"(loop_64"
" body-ctx_65"
" rest-bodys_88"
"(cons exp-body_89 done-bodys_67)"
" val-idss_68"
" val-keyss_69"
" val-rhss_70"
" track-stxs_71"
" trans-idss_72"
" dups_73)))))))))))))))))"
" loop_64)"
" body-ctx_36"
" init-bodys_32"
" null"
" null"
" null"
" null"
" null"
" null"
"(make-check-no-duplicate-table)))))))))))))))))))"
"(define-values"
"(lifted/6.1$2 lifted/7.1$2 lifted/8.1$2 lifted/9.1$2 lifted/10.1$2)"
"(make-struct-type"
" 'finish-expanding-body"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'finish-expanding-body"
"(case-lambda"
"((self_369"
" body-ctx_370"
" frame-id_371"
" def-ctx-scopes_372"
" val-idss_373"
" val-keyss_374"
" val-rhss_375"
" track-stxs_376"
" done-bodys_377)"
"(apply"
" missing-kw"
" self_369"
" body-ctx_370"
" frame-id_371"
" def-ctx-scopes_372"
" val-idss_373"
" val-keyss_374"
" val-rhss_375"
" track-stxs_376"
" done-bodys_377"
" null))))))"
"(current-inspector)"
"(case-lambda"
"((self_378"
" body-ctx_379"
" frame-id_380"
" def-ctx-scopes_381"
" val-idss_382"
" val-keyss_383"
" val-rhss_384"
" track-stxs_385"
" done-bodys_386)"
"(apply"
" missing-kw"
" self_378"
" body-ctx_379"
" frame-id_380"
" def-ctx-scopes_381"
" val-idss_382"
" val-keyss_383"
" val-rhss_384"
" track-stxs_385"
" done-bodys_386"
" null)))))"
"(define-values"
"(finish-expanding-body26.1)"
"(lambda(disappeared-transformer-bindings13_387"
" name12_388"
" source10_389"
" stratified?11_390"
" body-ctx18_391"
" frame-id19_392"
" def-ctx-scopes20_393"
" val-idss21_394"
" val-keyss22_395"
" val-rhss23_396"
" track-stxs24_397"
" done-bodys25_398)"
"(let-values(((body-ctx_399) body-ctx18_391))"
"(let-values(((frame-id_400) frame-id19_392))"
"(let-values(((def-ctx-scopes_401) def-ctx-scopes20_393))"
"(let-values(((val-idss_402) val-idss21_394))"
"(let-values(((val-keyss_403) val-keyss22_395))"
"(let-values(((val-rhss_404) val-rhss23_396))"
"(let-values(((track-stxs_405) track-stxs24_397))"
"(let-values(((done-bodys_406) done-bodys25_398))"
"(let-values(((s_407) source10_389))"
"(let-values(((stratified?_408) stratified?11_390))"
"(let-values(((name_409) name12_388))"
"(let-values(((disappeared-transformer-bindings_410) disappeared-transformer-bindings13_387))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? done-bodys_406)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                   \"no expression after a sequence of internal definitions\""
" s_407))"
"(void))"
"(values))))"
"(let-values(((finish-ctx_411)"
"(let-values(((v_413)"
"(accumulate-def-ctx-scopes"
" body-ctx_399"
" def-ctx-scopes_401)))"
"(let-values(((the-struct_414) v_413))"
"(if(expand-context/outer? the-struct_414)"
"(let-values(((context123_415) 'expression)"
"((use-site-scopes124_416)(box null))"
"((scopes125_417)"
"(append"
"(unbox"
"(root-expand-context-use-site-scopes body-ctx_399))"
"(expand-context-scopes body-ctx_399)))"
"((only-immediate?126_418) #f)"
"((def-ctx-scopes127_419) #f)"
"((post-expansion-scope128_420) #f)"
"((inner129_421)"
"(root-expand-context/outer-inner v_413)))"
"(expand-context/outer1.1"
" inner129_421"
" post-expansion-scope128_420"
" use-site-scopes124_416"
"(root-expand-context/outer-frame-id the-struct_414)"
" context123_415"
"(expand-context/outer-env the-struct_414)"
"(expand-context/outer-post-expansion-scope-action the-struct_414)"
" scopes125_417"
" def-ctx-scopes127_419"
"(expand-context/outer-binding-layer the-struct_414)"
"(expand-context/outer-reference-records the-struct_414)"
" only-immediate?126_418"
"(expand-context/outer-need-eventually-defined the-struct_414)"
"(expand-context/outer-current-introduction-scopes the-struct_414)"
"(expand-context/outer-name the-struct_414)))"
"(raise-argument-error"
" 'struct-copy"
"                                                     \"expand-context/outer?\""
" the-struct_414))))))"
"(let-values(((finish-bodys_412)"
"(lambda()"
"(let-values(((block->list?_422)(null? val-idss_402)))"
"(let-values((()"
"(begin"
"(if block->list?_422"
"(void)"
"(let-values()"
"(let-values(((obs_425)"
"(expand-context-observer"
" body-ctx_399)))"
"(if obs_425"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_425"
" 'next-group)))"
"(void)))))"
"(values))))"
"(let-values((()"
"(begin"
"(if block->list?_422"
"(void)"
"(let-values()"
"(let-values(((obs_426)"
"(expand-context-observer"
" body-ctx_399)))"
"(if obs_426"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_426"
" 'prim-begin)))"
"(void)))))"
"(values))))"
"(let-values(((last-i_423)(sub1(length done-bodys_406))))"
"(let-values((()"
"(begin"
"(let-values(((obs_427)"
"(expand-context-observer"
" body-ctx_399)))"
"(if obs_427"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_427"
" 'enter-list"
" done-bodys_406)))"
"(void)))"
"(values))))"
"(let-values(((exp-bodys_424)"
"(let-values(((lst_428) done-bodys_406)"
"((start_429) 0))"
"(begin"
"(if(list? lst_428)"
"(void)"
"(let-values()(in-list lst_428)))"
"(if(exact-nonnegative-integer? start_429)"
"(void)"
"(let-values()(in-naturals start_429)))"
"((letrec-values(((for-loop_430)"
"(lambda(lst_431"
" pos_432)"
"(if(if(pair?"
" lst_431)"
" #t"
" #f)"
"(let-values(((done-body_433)"
"(unsafe-car"
" lst_431))"
"((rest_434)"
"(unsafe-cdr"
" lst_431))"
"((i_435)"
" pos_432))"
"(let-values(((post-guard-var_436)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_437)"
"(let-values()"
"(let-values()"
"(begin"
"(let-values(((obs_438)"
"(expand-context-observer"
" body-ctx_399)))"
"(if obs_438"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_438"
" 'next)))"
"(void)))"
"(let-values(((done-body130_439)"
" done-body_433)"
"((temp131_440)"
"(if(if name_409"
"(="
" i_435"
" last-i_423)"
" #f)"
"(let-values(((v_441)"
" finish-ctx_411))"
"(let-values(((the-struct_442)"
" v_441))"
"(if(expand-context/outer?"
" the-struct_442)"
"(let-values(((name132_443)"
" name_409)"
"((inner133_444)"
"(root-expand-context/outer-inner"
" v_441)))"
"(expand-context/outer1.1"
" inner133_444"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_442)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_442)"
"(root-expand-context/outer-frame-id"
" the-struct_442)"
"(expand-context/outer-context"
" the-struct_442)"
"(expand-context/outer-env"
" the-struct_442)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_442)"
"(expand-context/outer-scopes"
" the-struct_442)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_442)"
"(expand-context/outer-binding-layer"
" the-struct_442)"
"(expand-context/outer-reference-records"
" the-struct_442)"
"(expand-context/outer-only-immediate?"
" the-struct_442)"
"(expand-context/outer-need-eventually-defined"
" the-struct_442)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_442)"
" name132_443))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                     \"expand-context/outer?\""
" the-struct_442))))"
" finish-ctx_411)))"
"(expand5.1"
" #f"
" #f"
" done-body130_439"
" temp131_440)))))))"
"(let-values(((result_445)"
"(if(post-guard-var_436)"
"(for-loop_430"
" rest_434"
"(+"
" pos_432"
" 1))"
" null)))"
"(cons"
" elem_437"
" result_445))))))"
" null))))"
" for-loop_430)"
" lst_428"
" start_429)))))"
"(begin"
"(let-values(((obs_446)"
"(expand-context-observer body-ctx_399)))"
"(if obs_446"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_446"
" 'exit-list"
" exp-bodys_424)))"
"(void)))"
"(reference-record-clear! frame-id_400)"
" exp-bodys_424))))))))))"
"(if(if(null? val-idss_402)(null? disappeared-transformer-bindings_410) #f)"
"(let-values()(finish-bodys_412))"
"(let-values()"
"(let-values(((exp-s_447)"
"(let-values(((...nder/expand/body.rkt:260:18_448)"
" expand-and-split-bindings-by-reference47.1)"
"((val-idss134_449) val-idss_402)"
"((val-keyss135_450) val-keyss_403)"
"((val-rhss136_451) val-rhss_404)"
"((track-stxs137_452) track-stxs_405)"
"((temp138_453)(not stratified?_408))"
"((frame-id139_454) frame-id_400)"
"((finish-ctx140_455) finish-ctx_411)"
"((s141_456) s_407)"
"((finish-bodys142_457) finish-bodys_412)"
"((temp143_458) #f))"
"(expand-and-split-bindings-by-reference45.1"
" finish-ctx140_455"
" frame-id139_454"
" finish-bodys142_457"
" s141_456"
" temp138_453"
" temp143_458"
" val-idss134_449"
" val-keyss135_450"
" val-rhss136_451"
" track-stxs137_452))))"
"(if(expand-context-to-parsed? body-ctx_399)"
"(list exp-s_447)"
"(list"
"(attach-disappeared-transformer-bindings"
" exp-s_447"
" disappeared-transformer-bindings_410))))))))))))))))))))))))"
"(define-values"
"(unpack27.1)"
"(lambda(given-kws_459"
" given-args_460"
" body-ctx18_461"
" frame-id19_462"
" def-ctx-scopes20_463"
" val-idss21_464"
" val-keyss22_465"
" val-rhss23_466"
" track-stxs24_467"
" done-bodys25_468)"
"(let-values(((disappeared-transformer-bindings13_469)(car given-args_460))"
"((given-kws_470)(cdr given-kws_459))"
"((given-args_471)(cdr given-args_460)))"
"(let-values(((name12_472)(car given-args_471))"
"((given-kws_473)(cdr given-kws_470))"
"((given-args_474)(cdr given-args_471)))"
"(let-values(((source10_475)(car given-args_474))"
"((given-kws_476)(cdr given-kws_473))"
"((given-args_477)(cdr given-args_474)))"
"(let-values(((stratified?11_478)(car given-args_477)))"
"(finish-expanding-body26.1"
" disappeared-transformer-bindings13_469"
" name12_472"
" source10_475"
" stratified?11_478"
" body-ctx18_461"
" frame-id19_462"
" def-ctx-scopes20_463"
" val-idss21_464"
" val-keyss22_465"
" val-rhss23_466"
" track-stxs24_467"
" done-bodys25_468)))))))"
"(define-values"
"(finish-expanding-body28.1)"
"(lifted/7.1$2"
"(lambda(given-kws_479 given-argc_480)"
"(if(= given-argc_480 10)"
"(let-values(((l2_481) given-kws_479))"
"(if(pair? l2_481)"
"(if(eq?(car l2_481) '#:disappeared-transformer-bindings)"
"(let-values(((l2_482)(cdr l2_481)))"
"(if(pair? l2_482)"
"(if(eq?(car l2_482) '#:name)"
"(let-values(((l2_483)(cdr l2_482)))"
"(if(pair? l2_483)"
"(if(eq?(car l2_483) '#:source)"
"(let-values(((l2_484)(cdr l2_483)))"
"(if(pair? l2_484)(if(eq?(car l2_484) '#:stratified?)(null?(cdr l2_484)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_485"
" given-args_486"
" body-ctx_487"
" frame-id_488"
" def-ctx-scopes_489"
" val-idss_490"
" val-keyss_491"
" val-rhss_492"
" track-stxs_493"
" done-bodys_494)"
"(unpack27.1"
" given-kws_485"
" given-args_486"
" body-ctx_487"
" frame-id_488"
" def-ctx-scopes_489"
" val-idss_490"
" val-keyss_491"
" val-rhss_492"
" track-stxs_493"
" done-bodys_494)))"
" '(#:disappeared-transformer-bindings #:name #:source #:stratified?)"
" '(#:disappeared-transformer-bindings #:name #:source #:stratified?)))"
"(define-values"
"(lifted/11.1$1 lifted/12.1$1 lifted/13.1$1 lifted/14.1$1 lifted/15.1$1)"
"(make-struct-type"
" 'expand-and-split-bindings-by-reference"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-and-split-bindings-by-reference"
"(case-lambda"
"((self_495 idss_496 keyss_497 rhss_498 track-stxs_499)"
"(apply missing-kw self_495 idss_496 keyss_497 rhss_498 track-stxs_499 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_500 idss_501 keyss_502 rhss_503 track-stxs_504)"
"(apply missing-kw self_500 idss_501 keyss_502 rhss_503 track-stxs_504 null)))))"
"(define-values"
"(expand-and-split-bindings-by-reference45.1)"
"(lambda(ctx31_505"
" frame-id30_506"
" get-body33_507"
" source32_508"
" split?29_509"
" track?34_510"
" idss41_511"
" keyss42_512"
" rhss43_513"
" track-stxs44_514)"
"(let-values(((idss_515) idss41_511))"
"(let-values(((keyss_516) keyss42_512))"
"(let-values(((rhss_517) rhss43_513))"
"(let-values(((track-stxs_518) track-stxs44_514))"
"(let-values(((split?_519) split?29_509))"
"(let-values(((frame-id_520) frame-id30_506))"
"(let-values(((ctx_521) ctx31_505))"
"(let-values(((s_522) source32_508))"
"(let-values(((get-body_523) get-body33_507))"
"(let-values(((track?_524) track?34_510))"
"(let-values()"
"(let-values(((phase_525)(expand-context-phase ctx_521)))"
"((letrec-values(((loop_526)"
"(lambda(idss_527"
" keyss_528"
" rhss_529"
" track-stxs_530"
" accum-idss_531"
" accum-keyss_532"
" accum-rhss_533"
" accum-track-stxs_534"
" track?_535"
" get-list?_536)"
"(if(null? idss_527)"
"(let-values()"
"(if(if(null? accum-idss_531) get-list?_536 #f)"
"(let-values()(get-body_523))"
"(let-values()"
"(let-values(((exp-body_537)(get-body_523)))"
"(let-values(((result-s_538)"
"(if(expand-context-to-parsed? ctx_521)"
"(if(null? accum-idss_531)"
"(parsed-let-values17.1"
"(keep-properties-only s_522)"
" null"
" null"
" exp-body_537)"
"(parsed-letrec-values18.1"
"(keep-properties-only s_522)"
"(alt-reverse accum-idss_531)"
"(alt-reverse"
"(map2"
" list"
" accum-keyss_532"
" accum-rhss_533))"
" exp-body_537))"
"(let-values(((track?144_540) track?_535)"
"((s145_541) s_522)"
"((temp146_542)"
"(list*"
"(if(null? accum-idss_531)"
"(core-id"
" 'let-values"
" phase_525)"
"(core-id"
" 'letrec-values"
" phase_525))"
"(build-clauses"
" accum-idss_531"
" accum-rhss_533"
" accum-track-stxs_534)"
" exp-body_537)))"
"(rebuild62.1"
" track?144_540"
" #t"
" s145_541"
" temp146_542)))))"
"(begin"
"(if track?_535"
"(let-values()"
"(let-values(((obs_543)"
"(expand-context-observer ctx_521)))"
"(if obs_543"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_543"
" 'tag"
" result-s_538)))"
"(void))))"
"(void))"
"(if get-list?_536(list result-s_538) result-s_538)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_549)"
"(expand-context-observer ctx_521)))"
"(if obs_549"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_549 'next)))"
"(void)))"
"(values))))"
"(let-values(((ids_544)(car idss_527)))"
"(let-values(((expanded-rhs_545)"
"(let-values(((temp147_550)(car rhss_529))"
"((temp148_551)"
"(as-named-context ctx_521 ids_544)))"
"(expand5.1 #f #f temp147_550 temp148_551))))"
"(let-values(((track-stx_546)(car track-stxs_530)))"
"(let-values(((local-or-forward-references?_547)"
"(reference-record-forward-references?"
" frame-id_520)))"
"(let-values((()"
"(begin"
"(reference-record-bound!"
" frame-id_520"
"(car keyss_528))"
"(values))))"
"(let-values(((forward-references?_548)"
"(reference-record-forward-references?"
" frame-id_520)))"
"(if(if(not local-or-forward-references?_547)"
" split?_519"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? accum-idss_531)"
"(void)"
"(let-values()"
"(error"
"                                                                                           \"internal error: accumulated ids not empty\")))"
"(values))))"
"(let-values(((exp-rest_552)"
"(loop_526"
"(cdr idss_527)"
"(cdr keyss_528)"
"(cdr rhss_529)"
"(cdr track-stxs_530)"
" null"
" null"
" null"
" null"
" #f"
" #t)))"
"((if get-list?_536 list values)"
"(if(expand-context-to-parsed? ctx_521)"
"(parsed-let-values17.1"
"(keep-properties-only s_522)"
"(list ids_544)"
"(list"
"(list(car keyss_528) expanded-rhs_545))"
" exp-rest_552)"
"(let-values(((track?149_554) track?_535)"
"((s150_555) s_522)"
"((temp151_556)"
"(list*"
"(core-id"
" 'let-values"
" phase_525)"
"(list"
"(build-clause"
" ids_544"
" expanded-rhs_545"
" track-stx_546))"
" exp-rest_552)))"
"(rebuild62.1"
" track?149_554"
" #t"
" s150_555"
" temp151_556)))))))"
"(if(if(not forward-references?_548)"
"(let-values(((or-part_557) split?_519))"
"(if or-part_557"
" or-part_557"
"(null?(cdr idss_527))))"
" #f)"
"(let-values()"
"(let-values(((exp-rest_558)"
"(loop_526"
"(cdr idss_527)"
"(cdr keyss_528)"
"(cdr rhss_529)"
"(cdr track-stxs_530)"
" null"
" null"
" null"
" null"
" #f"
" #t)))"
"((if get-list?_536 list values)"
"(if(expand-context-to-parsed? ctx_521)"
"(parsed-letrec-values18.1"
"(keep-properties-only s_522)"
"(alt-reverse"
"(cons ids_544 accum-idss_531))"
"(alt-reverse"
"(cons"
"(list(car keyss_528) expanded-rhs_545)"
"(map2"
" list"
" accum-keyss_532"
" accum-rhss_533)))"
" exp-rest_558)"
"(let-values(((track?152_560) track?_535)"
"((s153_561) s_522)"
"((temp154_562)"
"(list*"
"(core-id"
" 'letrec-values"
" phase_525)"
"(build-clauses"
"(cons"
" ids_544"
" accum-idss_531)"
"(cons"
" expanded-rhs_545"
" accum-rhss_533)"
"(cons"
" track-stx_546"
" accum-track-stxs_534))"
" exp-rest_558)))"
"(rebuild62.1"
" track?152_560"
" #t"
" s153_561"
" temp154_562))))))"
"(let-values()"
"(loop_526"
"(cdr idss_527)"
"(cdr keyss_528)"
"(cdr rhss_529)"
"(cdr track-stxs_530)"
"(cons ids_544 accum-idss_531)"
"(cons(car keyss_528) accum-keyss_532)"
"(cons expanded-rhs_545 accum-rhss_533)"
"(cons track-stx_546 accum-track-stxs_534)"
" track?_535"
" get-list?_536))))))))))))))))"
" loop_526)"
" idss_515"
" keyss_516"
" rhss_517"
" track-stxs_518"
" null"
" null"
" null"
" null"
" track?_524"
" #f)))))))))))))))"
"(define-values"
"(unpack46.1$1)"
"(lambda(given-kws_563 given-args_564 idss41_565 keyss42_566 rhss43_567 track-stxs44_568)"
"(let-values(((ctx31_569)(car given-args_564))"
"((given-kws_570)(cdr given-kws_563))"
"((given-args_571)(cdr given-args_564)))"
"(let-values(((frame-id30_572)(car given-args_571))"
"((given-kws_573)(cdr given-kws_570))"
"((given-args_574)(cdr given-args_571)))"
"(let-values(((get-body33_575)(car given-args_574))"
"((given-kws_576)(cdr given-kws_573))"
"((given-args_577)(cdr given-args_574)))"
"(let-values(((source32_578)(car given-args_577))"
"((given-kws_579)(cdr given-kws_576))"
"((given-args_580)(cdr given-args_577)))"
"(let-values(((split?29_581)(car given-args_580))"
"((given-kws_582)(cdr given-kws_579))"
"((given-args_583)(cdr given-args_580)))"
"(let-values(((track?34_584)(car given-args_583)))"
"(expand-and-split-bindings-by-reference45.1"
" ctx31_569"
" frame-id30_572"
" get-body33_575"
" source32_578"
" split?29_581"
" track?34_584"
" idss41_565"
" keyss42_566"
" rhss43_567"
" track-stxs44_568)))))))))"
"(define-values"
"(expand-and-split-bindings-by-reference47.1)"
"(lifted/12.1$1"
"(lambda(given-kws_585 given-argc_586)"
"(if(= given-argc_586 6)"
"(let-values(((l2_587) given-kws_585))"
"(if(pair? l2_587)"
"(if(eq?(car l2_587) '#:ctx)"
"(let-values(((l2_588)(cdr l2_587)))"
"(if(pair? l2_588)"
"(if(eq?(car l2_588) '#:frame-id)"
"(let-values(((l2_589)(cdr l2_588)))"
"(if(pair? l2_589)"
"(if(eq?(car l2_589) '#:get-body)"
"(let-values(((l2_590)(cdr l2_589)))"
"(if(pair? l2_590)"
"(if(eq?(car l2_590) '#:source)"
"(let-values(((l2_591)(cdr l2_590)))"
"(if(pair? l2_591)"
"(if(eq?(car l2_591) '#:split?)"
"(let-values(((l2_592)(cdr l2_591)))"
"(if(pair? l2_592)(if(eq?(car l2_592) '#:track?)(null?(cdr l2_592)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_593 given-args_594 idss_595 keyss_596 rhss_597 track-stxs_598)"
"(unpack46.1$1 given-kws_593 given-args_594 idss_595 keyss_596 rhss_597 track-stxs_598)))"
" '(#:ctx #:frame-id #:get-body #:source #:split? #:track?)"
" '(#:ctx #:frame-id #:get-body #:source #:split? #:track?)))"
"(define-values"
"(build-clauses)"
"(lambda(accum-idss_599 accum-rhss_600 accum-track-stxs_601)"
"(map2 build-clause(alt-reverse accum-idss_599)(alt-reverse accum-rhss_600)(alt-reverse accum-track-stxs_601))))"
"(define-values"
"(build-clause)"
"(lambda(ids_602 rhs_603 track-stx_604)"
"(let-values(((clause_605)(datum->syntax$1 #f(list ids_602 rhs_603))))"
"(if track-stx_604(syntax-track-origin$1 clause_605 track-stx_604) clause_605))))"
"(define-values"
"(no-binds)"
"(lambda(expr_606 s_607 phase_608)"
"(let-values(((s-runtime-stx_609)(syntax-shift-phase-level$1 runtime-stx phase_608)))"
"(datum->syntax$1"
" #f"
"(list"
"(core-id 'begin phase_608)"
" expr_606"
"(list(core-id '#%app phase_608)(datum->syntax$1 s-runtime-stx_609 'values)))"
" s_607))))"
"(void)"
"(void)"
"(define-values"
"(lambda-clause-expander)"
"(lambda(s_11 disarmed-s_12 formals_13 bodys_14 ctx_15 log-renames-tag_16)"
"(let-values(((sc_17)(new-scope 'local)))"
"(let-values(((phase_18)(expand-context-phase ctx_15)))"
"(let-values(((ids_19)(parse-and-flatten-formals formals_13 sc_17 disarmed-s_12)))"
"(let-values((()"
"(begin"
"(let-values(((ids34_28) ids_19)"
"((phase35_29) phase_18)"
"((s36_30) s_11)"
"                                       ((temp37_31) \"argument name\"))"
"(check-no-duplicate-ids8.1 temp37_31 #t ids34_28 phase35_29 s36_30 #f #f))"
"(values))))"
"(let-values(((counter_20)(root-expand-context-counter ctx_15)))"
"(let-values(((keys_21)"
"(let-values(((lst_32) ids_19))"
"(begin"
"(if(list? lst_32)(void)(let-values()(in-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(lst_34)"
"(if(pair? lst_34)"
"(let-values(((id_35)(unsafe-car lst_34))"
"((rest_36)(unsafe-cdr lst_34)))"
"(let-values(((post-guard-var_37)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_38)"
"(let-values()"
"(let-values()"
"(let-values(((id38_40) id_35)"
"((phase39_41) phase_18)"
"((counter40_42) counter_20)"
"((s41_43) s_11))"
"(add-local-binding!35.1"
" #f"
" #f"
" s41_43"
" #t"
" id38_40"
" phase39_41"
" counter40_42))))))"
"(let-values(((result_44)"
"(if(post-guard-var_37)"
"(for-loop_33 rest_36)"
" null)))"
"(cons elem_38 result_44))))))"
" null))))"
" for-loop_33)"
" lst_32)))))"
"(let-values(((body-env_22)"
"(let-values(((lst_45) keys_21)((lst_46) ids_19))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"(if(list? lst_46)(void)(let-values()(in-list lst_46)))"
"((letrec-values(((for-loop_47)"
"(lambda(env_48 lst_49 lst_50)"
"(if(if(pair? lst_49)(pair? lst_50) #f)"
"(let-values(((key_51)(unsafe-car lst_49))"
"((rest_52)(unsafe-cdr lst_49))"
"((id_53)(unsafe-car lst_50))"
"((rest_54)(unsafe-cdr lst_50)))"
"(let-values(((env_55)"
"(let-values(((env_56) env_48))"
"(let-values(((env_57)"
"(let-values()"
"(env-extend"
" env_56"
" key_51"
"(local-variable1.1 id_53)))))"
"(values env_57)))))"
"(if(not #f)(for-loop_47 env_55 rest_52 rest_54) env_55)))"
" env_48))))"
" for-loop_47)"
"(expand-context-env ctx_15)"
" lst_45"
" lst_46)))))"
"(let-values(((sc-formals_23)(add-scope formals_13 sc_17)))"
"(let-values(((sc-bodys_24)"
"(let-values(((lst_58) bodys_14))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(lst_60)"
"(if(pair? lst_60)"
"(let-values(((body_61)(unsafe-car lst_60))"
"((rest_62)(unsafe-cdr lst_60)))"
"(let-values(((post-guard-var_63)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_64)"
"(let-values()"
"(let-values()"
"(add-scope body_61 sc_17)))))"
"(let-values(((result_65)"
"(if(post-guard-var_63)"
"(for-loop_59 rest_62)"
" null)))"
"(cons elem_64 result_65))))))"
" null))))"
" for-loop_59)"
" lst_58)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_66)(expand-context-observer ctx_15)))"
"(if obs_66"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_66"
" log-renames-tag_16"
" sc-formals_23"
"(datum->syntax$1 #f sc-bodys_24))))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_25)"
"(let-values(((v_67) ctx_15))"
"(let-values(((the-struct_68) v_67))"
"(if(expand-context/outer? the-struct_68)"
"(let-values(((env42_69) body-env_22)"
"((scopes43_70)(cons sc_17(expand-context-scopes ctx_15)))"
"((binding-layer44_71)"
"(increment-binding-layer ids_19 ctx_15 sc_17))"
"((frame-id45_72) #f)"
"((inner46_73)(root-expand-context/outer-inner v_67)))"
"(expand-context/outer1.1"
" inner46_73"
"(root-expand-context/outer-post-expansion-scope the-struct_68)"
"(root-expand-context/outer-use-site-scopes the-struct_68)"
" frame-id45_72"
"(expand-context/outer-context the-struct_68)"
" env42_69"
"(expand-context/outer-post-expansion-scope-action the-struct_68)"
" scopes43_70"
"(expand-context/outer-def-ctx-scopes the-struct_68)"
" binding-layer44_71"
"(expand-context/outer-reference-records the-struct_68)"
"(expand-context/outer-only-immediate? the-struct_68)"
"(expand-context/outer-need-eventually-defined the-struct_68)"
"(expand-context/outer-current-introduction-scopes the-struct_68)"
"(expand-context/outer-name the-struct_68)))"
"(raise-argument-error"
" 'struct-copy"
"                                             \"expand-context/outer?\""
" the-struct_68))))))"
"(let-values(((exp-body_26)"
"(let-values(((sc-bodys47_75) sc-bodys_24)"
"((body-ctx48_76) body-ctx_25)"
"((temp49_77)"
"(let-values(((ctx50_78) ctx_15)((s51_79) s_11))"
"(keep-as-needed55.1 #f #f ctx50_78 s51_79))))"
"(expand-body7.1 temp49_77 #f #f sc-bodys47_75 body-ctx48_76))))"
"(values"
"(if(expand-context-to-parsed? ctx_15)"
"(unflatten-like-formals keys_21 formals_13)"
" sc-formals_23)"
" exp-body_26)))))))))))))))"
"(define-values"
"(make-expand-lambda)"
"(lambda(get-lambda_80)"
"(lambda(s_81 ctx_82)"
"(let-values((()"
"(begin"
"(let-values(((obs_103)(expand-context-observer ctx_82)))"
"(if obs_103(let-values()(let-values()(call-expand-observe obs_103 'prim-lambda)))(void)))"
"(values))))"
"(let-values(((disarmed-s_83)(syntax-disarm$1 s_81)))"
"(let-values(((ok?_84 lambda52_85 formals53_86 body54_87)"
"(let-values(((s_104) disarmed-s_83))"
"(let-values(((orig-s_105) s_104))"
"(let-values(((lambda52_106 formals53_107 body54_108)"
"(let-values(((s_109)(if(syntax?$1 s_104)(syntax-e$1 s_104) s_104)))"
"(if(pair? s_109)"
"(let-values(((lambda55_110)(let-values(((s_113)(car s_109))) s_113))"
"((formals56_111 body57_112)"
"(let-values(((s_114)(cdr s_109)))"
"(let-values(((s_115)"
"(if(syntax?$1 s_114)"
"(syntax-e$1 s_114)"
" s_114)))"
"(if(pair? s_115)"
"(let-values(((formals58_116)"
"(let-values(((s_118)(car s_115)))"
" s_118))"
"((body59_117)"
"(let-values(((s_119)(cdr s_115)))"
"(let-values(((s_120)"
"(if(syntax?$1 s_119)"
"(syntax-e$1 s_119)"
" s_119)))"
"(let-values(((flat-s_121)"
"(to-syntax-list.1"
" s_120)))"
"(if(not flat-s_121)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_105))"
"(if(null? flat-s_121)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_105))"
"(let-values()"
" flat-s_121))))))))"
"(values formals58_116 body59_117))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_105))))))"
"(values lambda55_110 formals56_111 body57_112))"
"                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_105)))))"
"(values #t lambda52_106 formals53_107 body54_108))))))"
"(let-values(((rebuild-s_100)"
"(let-values(((ctx60_122) ctx_82)((s61_123) s_81))"
"(keep-as-needed55.1 #f #f ctx60_122 s61_123))))"
"(let-values(((formals_101 body_102)"
"(lambda-clause-expander s_81 disarmed-s_83 formals53_86 body54_87 ctx_82 'lambda-renames)))"
"(if(expand-context-to-parsed? ctx_82)"
"(parsed-lambda5.1 rebuild-s_100 formals_101 body_102)"
"(let-values(((rebuild-s62_124) rebuild-s_100)"
"((temp63_125)(list*(get-lambda_80 ctx_82 lambda52_85) formals_101 body_102)))"
"(rebuild62.1 #f #f rebuild-s62_124 temp63_125)))))))))))"
"(call-with-values"
"(lambda()(add-core-form! 'lambda(make-expand-lambda(lambda(ctx_126 lam-id_127) lam-id_127))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'λ"
"(make-expand-lambda"
"(lambda(ctx_128 lam-id_129)"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_128))"
" 'lambda"
" lam-id_129"
" lam-id_129)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'case-lambda"
"(lambda(s_130 ctx_131)"
"(let-values((()"
"(begin"
"(let-values(((obs_164)(expand-context-observer ctx_131)))"
"(if obs_164"
"(let-values()(let-values()(call-expand-observe obs_164 'prim-case-lambda)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_132)(syntax-disarm$1 s_130)))"
"(let-values(((ok?_133 case-lambda64_134 formals65_135 body66_136)"
"(let-values(((s_165) disarmed-s_132))"
"(let-values(((orig-s_166) s_165))"
"(let-values(((case-lambda64_167 formals65_168 body66_169)"
"(let-values(((s_170)(if(syntax?$1 s_165)(syntax-e$1 s_165) s_165)))"
"(if(pair? s_170)"
"(let-values(((case-lambda67_171)"
"(let-values(((s_174)(car s_170))) s_174))"
"((formals68_172 body69_173)"
"(let-values(((s_175)(cdr s_170)))"
"(let-values(((s_176)"
"(if(syntax?$1 s_175)"
"(syntax-e$1 s_175)"
" s_175)))"
"(let-values(((flat-s_177)(to-syntax-list.1 s_176)))"
"(if(not flat-s_177)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_166))"
"(let-values()"
"(let-values(((formals_178 body_179)"
"(let-values(((lst_180)"
" flat-s_177))"
"(begin"
"(if(list? lst_180)"
"(void)"
"(let-values()"
"(in-list lst_180)))"
"((letrec-values(((for-loop_181)"
"(lambda(formals_182"
" body_183"
" lst_184)"
"(if(pair?"
" lst_184)"
"(let-values(((s_185)"
"(unsafe-car"
" lst_184))"
"((rest_186)"
"(unsafe-cdr"
" lst_184)))"
"(let-values(((formals_187"
" body_188)"
"(let-values(((formals_189)"
" formals_182)"
"((body_190)"
" body_183))"
"(let-values(((formals_191"
" body_192)"
"(let-values()"
"(let-values(((formals76_193"
" body77_194)"
"(let-values()"
"(let-values(((s_195)"
"(if(syntax?$1"
" s_185)"
"(syntax-e$1"
" s_185)"
" s_185)))"
"(if(pair?"
" s_195)"
"(let-values(((formals70_196)"
"(let-values(((s_198)"
"(car"
" s_195)))"
" s_198))"
"((body71_197)"
"(let-values(((s_199)"
"(cdr"
" s_195)))"
"(let-values(((s_200)"
"(if(syntax?$1"
" s_199)"
"(syntax-e$1"
" s_199)"
" s_199)))"
"(let-values(((flat-s_201)"
"(to-syntax-list.1"
" s_200)))"
"(if(not"
" flat-s_201)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"bad syntax\""
" orig-s_166))"
"(if(null?"
" flat-s_201)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"bad syntax\""
" orig-s_166))"
"(let-values()"
" flat-s_201))))))))"
"(values"
" formals70_196"
" body71_197))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                      \"bad syntax\""
" orig-s_166))))))"
"(values"
"(cons"
" formals76_193"
" formals_189)"
"(cons"
" body77_194"
" body_190))))))"
"(values"
" formals_191"
" body_192)))))"
"(if(not"
" #f)"
"(for-loop_181"
" formals_187"
" body_188"
" rest_186)"
"(values"
" formals_187"
" body_188))))"
"(values"
" formals_182"
" body_183)))))"
" for-loop_181)"
" null"
" null"
" lst_180)))))"
"(values"
"(alt-reverse formals_178)"
"(alt-reverse body_179))))))))))"
"(values case-lambda67_171 formals68_172 body69_173))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_166)))))"
"(values #t case-lambda64_167 formals65_168 body66_169))))))"
"(let-values(((ok?_149 case-lambda72_150 clause73_151)"
"(let-values(((s_202) disarmed-s_132))"
"(let-values(((orig-s_203) s_202))"
"(let-values(((case-lambda72_204 clause73_205)"
"(let-values(((s_206)(if(syntax?$1 s_202)(syntax-e$1 s_202) s_202)))"
"(if(pair? s_206)"
"(let-values(((case-lambda74_207)"
"(let-values(((s_209)(car s_206))) s_209))"
"((clause75_208)"
"(let-values(((s_210)(cdr s_206)))"
"(let-values(((s_211)"
"(if(syntax?$1 s_210)"
"(syntax-e$1 s_210)"
" s_210)))"
"(let-values(((flat-s_212)(to-syntax-list.1 s_211)))"
"(if(not flat-s_212)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_203))"
"(let-values() flat-s_212)))))))"
"(values case-lambda74_207 clause75_208))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_203)))))"
"(values #t case-lambda72_204 clause73_205))))))"
"(let-values(((rebuild-s_162)"
"(let-values(((ctx78_213) ctx_131)((s79_214) s_130))"
"(keep-as-needed55.1 #f #f ctx78_213 s79_214))))"
"(let-values(((clauses_163)"
"(let-values(((lst_215) formals65_135)((lst_216) body66_136)((lst_217) clause73_151))"
"(begin"
"(if(list? lst_215)(void)(let-values()(in-list lst_215)))"
"(if(list? lst_216)(void)(let-values()(in-list lst_216)))"
"(if(list? lst_217)(void)(let-values()(in-list lst_217)))"
"((letrec-values(((for-loop_218)"
"(lambda(lst_219 lst_220 lst_221)"
"(if(if(pair? lst_219)"
"(if(pair? lst_220)(pair? lst_221) #f)"
" #f)"
"(let-values(((formals_222)(unsafe-car lst_219))"
"((rest_223)(unsafe-cdr lst_219))"
"((body_224)(unsafe-car lst_220))"
"((rest_225)(unsafe-cdr lst_220))"
"((clause_226)(unsafe-car lst_221))"
"((rest_227)(unsafe-cdr lst_221)))"
"(let-values(((post-guard-var_228)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_229)"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_233)"
"(expand-context-observer"
" ctx_131)))"
"(if obs_233"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_233"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((rebuild-clause_230)"
"(let-values(((ctx80_234)"
" ctx_131)"
"((clause81_235)"
" clause_226))"
"(keep-as-needed55.1"
" #f"
" #f"
" ctx80_234"
" clause81_235))))"
"(let-values(((exp-formals_231"
" exp-body_232)"
"(lambda-clause-expander"
" s_130"
" disarmed-s_132"
" formals_222"
" body_224"
" ctx_131"
" 'case-lambda-renames)))"
"(if(expand-context-to-parsed?"
" ctx_131)"
"(list"
" exp-formals_231"
" exp-body_232)"
"(let-values(((rebuild-clause82_236)"
" rebuild-clause_230)"
"((temp83_237)"
"(list*"
" exp-formals_231"
" exp-body_232)))"
"(rebuild62.1"
" #f"
" #f"
" rebuild-clause82_236"
" temp83_237))))))))))"
"(let-values(((result_238)"
"(if(post-guard-var_228)"
"(for-loop_218"
" rest_223"
" rest_225"
" rest_227)"
" null)))"
"(cons elem_229 result_238))))))"
" null))))"
" for-loop_218)"
" lst_215"
" lst_216"
" lst_217)))))"
"(if(expand-context-to-parsed? ctx_131)"
"(parsed-case-lambda6.1 rebuild-s_162 clauses_163)"
"(let-values(((rebuild-s84_239) rebuild-s_162)"
"((temp85_240)(list* case-lambda64_134 clauses_163)))"
"(rebuild62.1 #f #f rebuild-s84_239 temp85_240))))))))))))"
" print-values)"
"(define-values"
"(parse-and-flatten-formals)"
"(lambda(all-formals_241 sc_242 s_243)"
"((letrec-values(((loop_244)"
"(lambda(formals_245)"
"(if(identifier? formals_245)"
"(let-values()(list(add-scope formals_245 sc_242)))"
"(if(syntax?$1 formals_245)"
"(let-values()"
"(let-values(((p_246)(syntax-e$1 formals_245)))"
"(if(pair? p_246)"
"(let-values()(loop_244 p_246))"
"(if(null? p_246)"
"(let-values() null)"
"                                    (let-values () (raise-syntax-error$1 #f \"not an identifier\" s_243 p_246))))))"
"(if(pair? formals_245)"
"(let-values()"
"(begin"
"(if(identifier?(car formals_245))"
"(void)"
"(let-values()"
"                                      (raise-syntax-error$1 #f \"not an identifier\" s_243 (car formals_245))))"
"(cons(add-scope(car formals_245) sc_242)(loop_244(cdr formals_245)))))"
"(if(null? formals_245)"
"(let-values() null)"
"(let-values()"
"                                  (raise-syntax-error$1 \"bad argument sequence\" s_243 all-formals_241)))))))))"
" loop_244)"
" all-formals_241)))"
"(define-values"
"(unflatten-like-formals)"
"(lambda(keys_247 formals_248)"
"((letrec-values(((loop_249)"
"(lambda(keys_250 formals_251)"
"(if(null? formals_251)"
"(let-values() null)"
"(if(pair? formals_251)"
"(let-values()(cons(car keys_250)(loop_249(cdr keys_250)(cdr formals_251))))"
"(if(syntax?$1 formals_251)"
"(let-values()(loop_249 keys_250(syntax-e$1 formals_251)))"
"(let-values()(car keys_250))))))))"
" loop_249)"
" keys_247"
" formals_248)))"
"(define-values"
"(make-let-values-form11.1)"
"(lambda(log-tag1_254"
" rec?3_255"
" rec?8_256"
" renames-log-tag5_257"
" renames-log-tag10_258"
" split-by-reference?4_259"
" split-by-reference?9_260"
" syntaxes?2_261"
" syntaxes?7_262)"
"(let-values(((log-tag_263) log-tag1_254))"
"(let-values(((syntaxes?_264)(if syntaxes?7_262 syntaxes?2_261 #f)))"
"(let-values(((rec?_265)(if rec?8_256 rec?3_255 #f)))"
"(let-values(((split-by-reference?_266)(if split-by-reference?9_260 split-by-reference?4_259 #f)))"
"(let-values(((renames-log-tag_267)(if renames-log-tag10_258 renames-log-tag5_257 'let-renames)))"
"(let-values()"
"(lambda(s_268 ctx_269)"
"(let-values((()"
"(begin"
"(let-values(((obs_335)(expand-context-observer ctx_269)))"
"(if obs_335"
"(let-values()(let-values()(call-expand-observe obs_335 log-tag_263)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_270)(syntax-disarm$1 s_268)))"
"(let-values(((ok?_271"
" letrec-syntaxes+values86_272"
" id:trans87_273"
" trans-rhs88_274"
" id:val89_275"
" val-rhs90_276"
" body91_277)"
"(let-values(((s_336) disarmed-s_270))"
"(if(if syntaxes?_264 #t #f)"
"(let-values(((orig-s_337) s_336))"
"(let-values(((letrec-syntaxes+values86_338"
" id:trans87_339"
" trans-rhs88_340"
" id:val89_341"
" val-rhs90_342"
" body91_343)"
"(let-values(((s_344)"
"(if(syntax?$1 s_336)(syntax-e$1 s_336) s_336)))"
"(if(pair? s_344)"
"(let-values(((letrec-syntaxes+values92_345)"
"(let-values(((s_351)(car s_344))) s_351))"
"((id:trans93_346"
" trans-rhs94_347"
" id:val95_348"
" val-rhs96_349"
" body97_350)"
"(let-values(((s_352)(cdr s_344)))"
"(let-values(((s_353)"
"(if(syntax?$1 s_352)"
"(syntax-e$1 s_352)"
" s_352)))"
"(if(pair? s_353)"
"(let-values(((id:trans98_354"
" trans-rhs99_355)"
"(let-values(((s_359)"
"(car"
" s_353)))"
"(let-values(((s_360)"
"(if(syntax?$1"
" s_359)"
"(syntax-e$1"
" s_359)"
" s_359)))"
"(let-values(((flat-s_361)"
"(to-syntax-list.1"
" s_360)))"
"(if(not flat-s_361)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_337))"
"(let-values()"
"(let-values(((id:trans_362"
" trans-rhs_363)"
"(let-values(((lst_364)"
" flat-s_361))"
"(begin"
"(if(list?"
" lst_364)"
"(void)"
"(let-values()"
"(in-list"
" lst_364)))"
"((letrec-values(((for-loop_365)"
"(lambda(id:trans_366"
" trans-rhs_367"
" lst_368)"
"(if(pair?"
" lst_368)"
"(let-values(((s_369)"
"(unsafe-car"
" lst_368))"
"((rest_370)"
"(unsafe-cdr"
" lst_368)))"
"(let-values(((id:trans_371"
" trans-rhs_372)"
"(let-values(((id:trans_373)"
" id:trans_366)"
"((trans-rhs_374)"
" trans-rhs_367))"
"(let-values(((id:trans_375"
" trans-rhs_376)"
"(let-values()"
"(let-values(((id:trans129_377"
" trans-rhs130_378)"
"(let-values()"
"(let-values(((s_379)"
"(if(syntax?$1"
" s_369)"
"(syntax-e$1"
" s_369)"
" s_369)))"
"(if(pair?"
" s_379)"
"(let-values(((id:trans103_380)"
"(let-values(((s_382)"
"(car"
" s_379)))"
"(let-values(((s_383)"
"(if(syntax?$1"
" s_382)"
"(syntax-e$1"
" s_382)"
" s_382)))"
"(let-values(((flat-s_384)"
"(to-syntax-list.1"
" s_383)))"
"(if(not"
" flat-s_384)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_337))"
"(let-values()"
"(let-values(((id:trans_385)"
"(let-values(((lst_386)"
" flat-s_384))"
"(begin"
"(if(list?"
" lst_386)"
"(void)"
"(let-values()"
"(in-list"
" lst_386)))"
"((letrec-values(((for-loop_387)"
"(lambda(id:trans_388"
" lst_389)"
"(if(pair?"
" lst_389)"
"(let-values(((s_390)"
"(unsafe-car"
" lst_389))"
"((rest_391)"
"(unsafe-cdr"
" lst_389)))"
"(let-values(((id:trans_392)"
"(let-values(((id:trans_393)"
" id:trans_388))"
"(let-values(((id:trans_394)"
"(let-values()"
"(let-values(((id:trans131_395)"
"(let-values()"
"(if(let-values(((or-part_396)"
"(if(syntax?$1"
" s_390)"
"(symbol?"
"(syntax-e$1"
" s_390))"
" #f)))"
"(if or-part_396"
" or-part_396"
"(symbol?"
" s_390)))"
" s_390"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_337"
" s_390)))))"
"(cons"
" id:trans131_395"
" id:trans_393)))))"
"(values"
" id:trans_394)))))"
"(if(not"
" #f)"
"(for-loop_387"
" id:trans_392"
" rest_391)"
" id:trans_392)))"
" id:trans_388))))"
" for-loop_387)"
" null"
" lst_386)))))"
"(alt-reverse"
" id:trans_385))))))))"
"((trans-rhs104_381)"
"(let-values(((s_397)"
"(cdr"
" s_379)))"
"(let-values(((s_398)"
"(if(syntax?$1"
" s_397)"
"(syntax-e$1"
" s_397)"
" s_397)))"
"(if(pair?"
" s_398)"
"(let-values(((trans-rhs105_399)"
"(let-values(((s_400)"
"(car"
" s_398)))"
" s_400))"
"(()"
"(let-values(((s_401)"
"(cdr"
" s_398)))"
"(let-values(((s_402)"
"(if(syntax?$1"
" s_401)"
"(syntax-e$1"
" s_401)"
" s_401)))"
"(if(null?"
" s_402)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_337))))))"
"(values"
" trans-rhs105_399))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_337))))))"
"(values"
" id:trans103_380"
" trans-rhs104_381))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_337))))))"
"(values"
"(cons"
" id:trans129_377"
" id:trans_373)"
"(cons"
" trans-rhs130_378"
" trans-rhs_374))))))"
"(values"
" id:trans_375"
" trans-rhs_376)))))"
"(if(not"
" #f)"
"(for-loop_365"
" id:trans_371"
" trans-rhs_372"
" rest_370)"
"(values"
" id:trans_371"
" trans-rhs_372))))"
"(values"
" id:trans_366"
" trans-rhs_367)))))"
" for-loop_365)"
" null"
" null"
" lst_364)))))"
"(values"
"(alt-reverse"
" id:trans_362)"
"(alt-reverse"
" trans-rhs_363)))))))))"
"((id:val100_356"
" val-rhs101_357"
" body102_358)"
"(let-values(((s_403)"
"(cdr"
" s_353)))"
"(let-values(((s_404)"
"(if(syntax?$1"
" s_403)"
"(syntax-e$1"
" s_403)"
" s_403)))"
"(if(pair? s_404)"
"(let-values(((id:val106_405"
" val-rhs107_406)"
"(let-values(((s_408)"
"(car"
" s_404)))"
"(let-values(((s_409)"
"(if(syntax?$1"
" s_408)"
"(syntax-e$1"
" s_408)"
" s_408)))"
"(let-values(((flat-s_410)"
"(to-syntax-list.1"
" s_409)))"
"(if(not"
" flat-s_410)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_337))"
"(let-values()"
"(let-values(((id:val_411"
" val-rhs_412)"
"(let-values(((lst_413)"
" flat-s_410))"
"(begin"
"(if(list?"
" lst_413)"
"(void)"
"(let-values()"
"(in-list"
" lst_413)))"
"((letrec-values(((for-loop_414)"
"(lambda(id:val_415"
" val-rhs_416"
" lst_417)"
"(if(pair?"
" lst_417)"
"(let-values(((s_418)"
"(unsafe-car"
" lst_417))"
"((rest_419)"
"(unsafe-cdr"
" lst_417)))"
"(let-values(((id:val_420"
" val-rhs_421)"
"(let-values(((id:val_422)"
" id:val_415)"
"((val-rhs_423)"
" val-rhs_416))"
"(let-values(((id:val_424"
" val-rhs_425)"
"(let-values()"
"(let-values(((id:val132_426"
" val-rhs133_427)"
"(let-values()"
"(let-values(((s_428)"
"(if(syntax?$1"
" s_418)"
"(syntax-e$1"
" s_418)"
" s_418)))"
"(if(pair?"
" s_428)"
"(let-values(((id:val109_429)"
"(let-values(((s_431)"
"(car"
" s_428)))"
"(let-values(((s_432)"
"(if(syntax?$1"
" s_431)"
"(syntax-e$1"
" s_431)"
" s_431)))"
"(let-values(((flat-s_433)"
"(to-syntax-list.1"
" s_432)))"
"(if(not"
" flat-s_433)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_337))"
"(let-values()"
"(let-values(((id:val_434)"
"(let-values(((lst_435)"
" flat-s_433))"
"(begin"
"(if(list?"
" lst_435)"
"(void)"
"(let-values()"
"(in-list"
" lst_435)))"
"((letrec-values(((for-loop_436)"
"(lambda(id:val_437"
" lst_438)"
"(if(pair?"
" lst_438)"
"(let-values(((s_439)"
"(unsafe-car"
" lst_438))"
"((rest_440)"
"(unsafe-cdr"
" lst_438)))"
"(let-values(((id:val_441)"
"(let-values(((id:val_442)"
" id:val_437))"
"(let-values(((id:val_443)"
"(let-values()"
"(let-values(((id:val134_444)"
"(let-values()"
"(if(let-values(((or-part_445)"
"(if(syntax?$1"
" s_439)"
"(symbol?"
"(syntax-e$1"
" s_439))"
" #f)))"
"(if or-part_445"
" or-part_445"
"(symbol?"
" s_439)))"
" s_439"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_337"
" s_439)))))"
"(cons"
" id:val134_444"
" id:val_442)))))"
"(values"
" id:val_443)))))"
"(if(not"
" #f)"
"(for-loop_436"
" id:val_441"
" rest_440)"
" id:val_441)))"
" id:val_437))))"
" for-loop_436)"
" null"
" lst_435)))))"
"(alt-reverse"
" id:val_434))))))))"
"((val-rhs110_430)"
"(let-values(((s_446)"
"(cdr"
" s_428)))"
"(let-values(((s_447)"
"(if(syntax?$1"
" s_446)"
"(syntax-e$1"
" s_446)"
" s_446)))"
"(if(pair?"
" s_447)"
"(let-values(((val-rhs111_448)"
"(let-values(((s_449)"
"(car"
" s_447)))"
" s_449))"
"(()"
"(let-values(((s_450)"
"(cdr"
" s_447)))"
"(let-values(((s_451)"
"(if(syntax?$1"
" s_450)"
"(syntax-e$1"
" s_450)"
" s_450)))"
"(if(null?"
" s_451)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_337))))))"
"(values"
" val-rhs111_448))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_337))))))"
"(values"
" id:val109_429"
" val-rhs110_430))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_337))))))"
"(values"
"(cons"
" id:val132_426"
" id:val_422)"
"(cons"
" val-rhs133_427"
" val-rhs_423))))))"
"(values"
" id:val_424"
" val-rhs_425)))))"
"(if(not"
" #f)"
"(for-loop_414"
" id:val_420"
" val-rhs_421"
" rest_419)"
"(values"
" id:val_420"
" val-rhs_421))))"
"(values"
" id:val_415"
" val-rhs_416)))))"
" for-loop_414)"
" null"
" null"
" lst_413)))))"
"(values"
"(alt-reverse"
" id:val_411)"
"(alt-reverse"
" val-rhs_412)))))))))"
"((body108_407)"
"(let-values(((s_452)"
"(cdr"
" s_404)))"
"(let-values(((s_453)"
"(if(syntax?$1"
" s_452)"
"(syntax-e$1"
" s_452)"
" s_452)))"
"(let-values(((flat-s_454)"
"(to-syntax-list.1"
" s_453)))"
"(if(not"
" flat-s_454)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_337))"
"(if(null?"
" flat-s_454)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_337))"
"(let-values()"
" flat-s_454))))))))"
"(values"
" id:val106_405"
" val-rhs107_406"
" body108_407))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_337))))))"
"(values"
" id:trans98_354"
" trans-rhs99_355"
" id:val100_356"
" val-rhs101_357"
" body102_358))"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_337))))))"
"(values"
" letrec-syntaxes+values92_345"
" id:trans93_346"
" trans-rhs94_347"
" id:val95_348"
" val-rhs96_349"
" body97_350))"
"                                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_337)))))"
"(values"
" #t"
" letrec-syntaxes+values86_338"
" id:trans87_339"
" trans-rhs88_340"
" id:val89_341"
" val-rhs90_342"
" body91_343)))"
"(values #f #f #f #f #f #f #f)))))"
"(let-values(((ok?_296 let-values112_297 id:val113_298 val-rhs114_299 body115_300)"
"(let-values(((s_455) disarmed-s_270))"
"(if(if(not syntaxes?_264) #t #f)"
"(let-values(((orig-s_456) s_455))"
"(let-values(((let-values112_457 id:val113_458 val-rhs114_459 body115_460)"
"(let-values(((s_461)"
"(if(syntax?$1 s_455)"
"(syntax-e$1 s_455)"
" s_455)))"
"(if(pair? s_461)"
"(let-values(((let-values116_462)"
"(let-values(((s_466)(car s_461))) s_466))"
"((id:val117_463 val-rhs118_464 body119_465)"
"(let-values(((s_467)(cdr s_461)))"
"(let-values(((s_468)"
"(if(syntax?$1 s_467)"
"(syntax-e$1 s_467)"
" s_467)))"
"(if(pair? s_468)"
"(let-values(((id:val120_469"
" val-rhs121_470)"
"(let-values(((s_472)"
"(car"
" s_468)))"
"(let-values(((s_473)"
"(if(syntax?$1"
" s_472)"
"(syntax-e$1"
" s_472)"
" s_472)))"
"(let-values(((flat-s_474)"
"(to-syntax-list.1"
" s_473)))"
"(if(not"
" flat-s_474)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_456))"
"(let-values()"
"(let-values(((id:val_475"
" val-rhs_476)"
"(let-values(((lst_477)"
" flat-s_474))"
"(begin"
"(if(list?"
" lst_477)"
"(void)"
"(let-values()"
"(in-list"
" lst_477)))"
"((letrec-values(((for-loop_478)"
"(lambda(id:val_479"
" val-rhs_480"
" lst_481)"
"(if(pair?"
" lst_481)"
"(let-values(((s_482)"
"(unsafe-car"
" lst_481))"
"((rest_483)"
"(unsafe-cdr"
" lst_481)))"
"(let-values(((id:val_484"
" val-rhs_485)"
"(let-values(((id:val_486)"
" id:val_479)"
"((val-rhs_487)"
" val-rhs_480))"
"(let-values(((id:val_488"
" val-rhs_489)"
"(let-values()"
"(let-values(((id:val135_490"
" val-rhs136_491)"
"(let-values()"
"(let-values(((s_492)"
"(if(syntax?$1"
" s_482)"
"(syntax-e$1"
" s_482)"
" s_482)))"
"(if(pair?"
" s_492)"
"(let-values(((id:val123_493)"
"(let-values(((s_495)"
"(car"
" s_492)))"
"(let-values(((s_496)"
"(if(syntax?$1"
" s_495)"
"(syntax-e$1"
" s_495)"
" s_495)))"
"(let-values(((flat-s_497)"
"(to-syntax-list.1"
" s_496)))"
"(if(not"
" flat-s_497)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_456))"
"(let-values()"
"(let-values(((id:val_498)"
"(let-values(((lst_499)"
" flat-s_497))"
"(begin"
"(if(list?"
" lst_499)"
"(void)"
"(let-values()"
"(in-list"
" lst_499)))"
"((letrec-values(((for-loop_500)"
"(lambda(id:val_501"
" lst_502)"
"(if(pair?"
" lst_502)"
"(let-values(((s_503)"
"(unsafe-car"
" lst_502))"
"((rest_504)"
"(unsafe-cdr"
" lst_502)))"
"(let-values(((id:val_505)"
"(let-values(((id:val_506)"
" id:val_501))"
"(let-values(((id:val_507)"
"(let-values()"
"(let-values(((id:val137_508)"
"(let-values()"
"(if(let-values(((or-part_509)"
"(if(syntax?$1"
" s_503)"
"(symbol?"
"(syntax-e$1"
" s_503))"
" #f)))"
"(if or-part_509"
" or-part_509"
"(symbol?"
" s_503)))"
" s_503"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_456"
" s_503)))))"
"(cons"
" id:val137_508"
" id:val_506)))))"
"(values"
" id:val_507)))))"
"(if(not"
" #f)"
"(for-loop_500"
" id:val_505"
" rest_504)"
" id:val_505)))"
" id:val_501))))"
" for-loop_500)"
" null"
" lst_499)))))"
"(alt-reverse"
" id:val_498))))))))"
"((val-rhs124_494)"
"(let-values(((s_510)"
"(cdr"
" s_492)))"
"(let-values(((s_511)"
"(if(syntax?$1"
" s_510)"
"(syntax-e$1"
" s_510)"
" s_510)))"
"(if(pair?"
" s_511)"
"(let-values(((val-rhs125_512)"
"(let-values(((s_513)"
"(car"
" s_511)))"
" s_513))"
"(()"
"(let-values(((s_514)"
"(cdr"
" s_511)))"
"(let-values(((s_515)"
"(if(syntax?$1"
" s_514)"
"(syntax-e$1"
" s_514)"
" s_514)))"
"(if(null?"
" s_515)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_456))))))"
"(values"
" val-rhs125_512))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_456))))))"
"(values"
" id:val123_493"
" val-rhs124_494))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_456))))))"
"(values"
"(cons"
" id:val135_490"
" id:val_486)"
"(cons"
" val-rhs136_491"
" val-rhs_487))))))"
"(values"
" id:val_488"
" val-rhs_489)))))"
"(if(not"
" #f)"
"(for-loop_478"
" id:val_484"
" val-rhs_485"
" rest_483)"
"(values"
" id:val_484"
" val-rhs_485))))"
"(values"
" id:val_479"
" val-rhs_480)))))"
" for-loop_478)"
" null"
" null"
" lst_477)))))"
"(values"
"(alt-reverse"
" id:val_475)"
"(alt-reverse"
" val-rhs_476)))))))))"
"((body122_471)"
"(let-values(((s_516)"
"(cdr"
" s_468)))"
"(let-values(((s_517)"
"(if(syntax?$1"
" s_516)"
"(syntax-e$1"
" s_516)"
" s_516)))"
"(let-values(((flat-s_518)"
"(to-syntax-list.1"
" s_517)))"
"(if(not"
" flat-s_518)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_456))"
"(if(null?"
" flat-s_518)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_456))"
"(let-values()"
" flat-s_518))))))))"
"(values"
" id:val120_469"
" val-rhs121_470"
" body122_471))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_456))))))"
"(values"
" let-values116_462"
" id:val117_463"
" val-rhs118_464"
" body119_465))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_456)))))"
"(values #t let-values112_457 id:val113_458 val-rhs114_459 body115_460)))"
"(values #f #f #f #f #f)))))"
"(let-values(((sc_315)(new-scope 'local)))"
"(let-values(((phase_316)(expand-context-phase ctx_269)))"
"(let-values(((frame-id_317)(if syntaxes?_264(make-reference-record) #f)))"
"(let-values(((trans-idss_318)"
"(let-values(((lst_519)(if syntaxes?_264 id:trans87_273 null)))"
"(begin"
"(if(list? lst_519)(void)(let-values()(in-list lst_519)))"
"((letrec-values(((for-loop_520)"
"(lambda(lst_521)"
"(if(pair? lst_521)"
"(let-values(((ids_522)(unsafe-car lst_521))"
"((rest_523)(unsafe-cdr lst_521)))"
"(let-values(((post-guard-var_524)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_525)"
"(let-values()"
"(let-values()"
"(let-values(((lst_526)"
" ids_522))"
"(begin"
"(if(list? lst_526)"
"(void)"
"(let-values()"
"(in-list"
" lst_526)))"
"((letrec-values(((for-loop_527)"
"(lambda(lst_528)"
"(if(pair?"
" lst_528)"
"(let-values(((id_529)"
"(unsafe-car"
" lst_528))"
"((rest_530)"
"(unsafe-cdr"
" lst_528)))"
"(let-values(((post-guard-var_531)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_532)"
"(let-values()"
"(let-values()"
"(add-scope"
" id_529"
" sc_315)))))"
"(let-values(((result_533)"
"(if(post-guard-var_531)"
"(for-loop_527"
" rest_530)"
" null)))"
"(cons"
" elem_532"
" result_533))))))"
" null))))"
" for-loop_527)"
" lst_526)))))))"
"(let-values(((result_534)"
"(if(post-guard-var_524)"
"(for-loop_520 rest_523)"
" null)))"
"(cons elem_525 result_534))))))"
" null))))"
" for-loop_520)"
" lst_519)))))"
"(let-values(((val-idss_319)"
"(let-values(((lst_535)(if syntaxes?_264 id:val89_275 id:val113_298)))"
"(begin"
"(if(list? lst_535)(void)(let-values()(in-list lst_535)))"
"((letrec-values(((for-loop_536)"
"(lambda(lst_537)"
"(if(pair? lst_537)"
"(let-values(((ids_538)(unsafe-car lst_537))"
"((rest_539)"
"(unsafe-cdr lst_537)))"
"(let-values(((post-guard-var_540)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_541)"
"(let-values()"
"(let-values()"
"(let-values(((lst_542)"
" ids_538))"
"(begin"
"(if(list?"
" lst_542)"
"(void)"
"(let-values()"
"(in-list"
" lst_542)))"
"((letrec-values(((for-loop_543)"
"(lambda(lst_544)"
"(if(pair?"
" lst_544)"
"(let-values(((id_545)"
"(unsafe-car"
" lst_544))"
"((rest_546)"
"(unsafe-cdr"
" lst_544)))"
"(let-values(((post-guard-var_547)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_548)"
"(let-values()"
"(let-values()"
"(add-scope"
" id_545"
" sc_315)))))"
"(let-values(((result_549)"
"(if(post-guard-var_547)"
"(for-loop_543"
" rest_546)"
" null)))"
"(cons"
" elem_548"
" result_549))))))"
" null))))"
" for-loop_543)"
" lst_542)))))))"
"(let-values(((result_550)"
"(if(post-guard-var_540)"
"(for-loop_536"
" rest_539)"
" null)))"
"(cons elem_541 result_550))))))"
" null))))"
" for-loop_536)"
" lst_535)))))"
"(let-values((()"
"(begin"
"(let-values(((temp126_551)(list trans-idss_318 val-idss_319))"
"((phase127_552) phase_316)"
"((s128_553) s_268))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" temp126_551"
" phase127_552"
" s128_553"
" #f"
" #f))"
"(values))))"
"(let-values(((counter_320)(root-expand-context-counter ctx_269)))"
"(let-values(((trans-keyss_321)"
"(let-values(((lst_554) trans-idss_318))"
"(begin"
"(if(list? lst_554)(void)(let-values()(in-list lst_554)))"
"((letrec-values(((for-loop_555)"
"(lambda(lst_556)"
"(if(pair? lst_556)"
"(let-values(((ids_557)"
"(unsafe-car lst_556))"
"((rest_558)"
"(unsafe-cdr lst_556)))"
"(let-values(((post-guard-var_559)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_560)"
"(let-values()"
"(let-values()"
"(let-values(((lst_561)"
" ids_557))"
"(begin"
"(if(list?"
" lst_561)"
"(void)"
"(let-values()"
"(in-list"
" lst_561)))"
"((letrec-values(((for-loop_562)"
"(lambda(lst_563)"
"(if(pair?"
" lst_563)"
"(let-values(((id_564)"
"(unsafe-car"
" lst_563))"
"((rest_565)"
"(unsafe-cdr"
" lst_563)))"
"(let-values(((post-guard-var_566)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_567)"
"(let-values()"
"(let-values()"
"(let-values(((id138_569)"
" id_564)"
"((phase139_570)"
" phase_316)"
"((counter140_571)"
" counter_320)"
"((frame-id141_572)"
" frame-id_317)"
"((s142_573)"
" s_268))"
"(add-local-binding!35.1"
" frame-id141_572"
" #t"
" s142_573"
" #t"
" id138_569"
" phase139_570"
" counter140_571))))))"
"(let-values(((result_574)"
"(if(post-guard-var_566)"
"(for-loop_562"
" rest_565)"
" null)))"
"(cons"
" elem_567"
" result_574))))))"
" null))))"
" for-loop_562)"
" lst_561)))))))"
"(let-values(((result_575)"
"(if(post-guard-var_559)"
"(for-loop_555"
" rest_558)"
" null)))"
"(cons"
" elem_560"
" result_575))))))"
" null))))"
" for-loop_555)"
" lst_554)))))"
"(let-values(((val-keyss_322)"
"(let-values(((lst_576) val-idss_319))"
"(begin"
"(if(list? lst_576)"
"(void)"
"(let-values()(in-list lst_576)))"
"((letrec-values(((for-loop_577)"
"(lambda(lst_578)"
"(if(pair? lst_578)"
"(let-values(((ids_579)"
"(unsafe-car lst_578))"
"((rest_580)"
"(unsafe-cdr lst_578)))"
"(let-values(((post-guard-var_581)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_582)"
"(let-values()"
"(let-values()"
"(let-values(((lst_583)"
" ids_579))"
"(begin"
"(if(list?"
" lst_583)"
"(void)"
"(let-values()"
"(in-list"
" lst_583)))"
"((letrec-values(((for-loop_584)"
"(lambda(lst_585)"
"(if(pair?"
" lst_585)"
"(let-values(((id_586)"
"(unsafe-car"
" lst_585))"
"((rest_587)"
"(unsafe-cdr"
" lst_585)))"
"(let-values(((post-guard-var_588)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_589)"
"(let-values()"
"(let-values()"
"(let-values(((id143_591)"
" id_586)"
"((phase144_592)"
" phase_316)"
"((counter145_593)"
" counter_320)"
"((frame-id146_594)"
" frame-id_317)"
"((s147_595)"
" s_268))"
"(add-local-binding!35.1"
" frame-id146_594"
" #t"
" s147_595"
" #t"
" id143_591"
" phase144_592"
" counter145_593))))))"
"(let-values(((result_596)"
"(if(post-guard-var_588)"
"(for-loop_584"
" rest_587)"
" null)))"
"(cons"
" elem_589"
" result_596))))))"
" null))))"
" for-loop_584)"
" lst_583)))))))"
"(let-values(((result_597)"
"(if(post-guard-var_581)"
"(for-loop_577"
" rest_580)"
" null)))"
"(cons"
" elem_582"
" result_597))))))"
" null))))"
" for-loop_577)"
" lst_576)))))"
"(let-values(((bodys_323)"
"(let-values(((lst_598)"
"(if syntaxes?_264 body91_277 body115_300)))"
"(begin"
"(if(list? lst_598)"
"(void)"
"(let-values()(in-list lst_598)))"
"((letrec-values(((for-loop_599)"
"(lambda(lst_600)"
"(if(pair? lst_600)"
"(let-values(((body_601)"
"(unsafe-car lst_600))"
"((rest_602)"
"(unsafe-cdr lst_600)))"
"(let-values(((post-guard-var_603)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_604)"
"(let-values()"
"(let-values()"
"(add-scope"
" body_601"
" sc_315)))))"
"(let-values(((result_605)"
"(if(post-guard-var_603)"
"(for-loop_599"
" rest_602)"
" null)))"
"(cons"
" elem_604"
" result_605))))))"
" null))))"
" for-loop_599)"
" lst_598)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_606)"
"(expand-context-observer ctx_269)))"
"(if obs_606"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_606"
" renames-log-tag_267"
" val-idss_319"
"(datum->syntax$1 #f bodys_323))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if syntaxes?_264"
"(let-values()"
"(begin"
"(let-values(((obs_607)"
"(expand-context-observer ctx_269)))"
"(if obs_607"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_607"
" 'prepare-env)))"
"(void)))"
"(let-values(((obs_608)"
"(expand-context-observer ctx_269)))"
"(if obs_608"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_608"
" 'enter-bind)))"
"(void)))))"
"(void))"
"(values))))"
"(let-values(((trans-valss_324)"
"(let-values(((lst_609)"
"(if syntaxes?_264 trans-rhs88_274 '()))"
"((lst_610) trans-idss_318))"
"(begin"
"(if(list? lst_609)"
"(void)"
"(let-values()(in-list lst_609)))"
"(if(list? lst_610)"
"(void)"
"(let-values()(in-list lst_610)))"
"((letrec-values(((for-loop_611)"
"(lambda(lst_612 lst_613)"
"(if(if(pair? lst_612)"
"(pair? lst_613)"
" #f)"
"(let-values(((rhs_614)"
"(unsafe-car"
" lst_612))"
"((rest_615)"
"(unsafe-cdr"
" lst_612))"
"((ids_616)"
"(unsafe-car"
" lst_613))"
"((rest_617)"
"(unsafe-cdr"
" lst_613)))"
"(let-values(((post-guard-var_618)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_619)"
"(let-values()"
"(let-values()"
"(begin"
"(let-values(((obs_620)"
"(expand-context-observer"
" ctx_269)))"
"(if obs_620"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_620"
" 'next)))"
"(void)))"
"(eval-for-syntaxes-binding"
"(add-scope"
" rhs_614"
" sc_315)"
" ids_616"
" ctx_269))))))"
"(let-values(((result_621)"
"(if(post-guard-var_618)"
"(for-loop_611"
" rest_615"
" rest_617)"
" null)))"
"(cons"
" elem_619"
" result_621))))))"
" null))))"
" for-loop_611)"
" lst_609"
" lst_610)))))"
"(let-values(((rec-val-env_325)"
"(let-values(((lst_622) val-keyss_322)"
"((lst_623) val-idss_319))"
"(begin"
"(if(list? lst_622)"
"(void)"
"(let-values()(in-list lst_622)))"
"(if(list? lst_623)"
"(void)"
"(let-values()(in-list lst_623)))"
"((letrec-values(((for-loop_624)"
"(lambda(env_625"
" lst_626"
" lst_627)"
"(if(if(pair? lst_626)"
"(pair? lst_627)"
" #f)"
"(let-values(((keys_628)"
"(unsafe-car"
" lst_626))"
"((rest_629)"
"(unsafe-cdr"
" lst_626))"
"((ids_630)"
"(unsafe-car"
" lst_627))"
"((rest_631)"
"(unsafe-cdr"
" lst_627)))"
"(let-values(((env_632)"
"(let-values(((env_633)"
" env_625))"
"(let-values(((lst_634)"
" keys_628)"
"((lst_635)"
" ids_630))"
"(begin"
"(if(list?"
" lst_634)"
"(void)"
"(let-values()"
"(in-list"
" lst_634)))"
"(if(list?"
" lst_635)"
"(void)"
"(let-values()"
"(in-list"
" lst_635)))"
"((letrec-values(((for-loop_636)"
"(lambda(env_637"
" lst_638"
" lst_639)"
"(if(if(pair?"
" lst_638)"
"(pair?"
" lst_639)"
" #f)"
"(let-values(((key_640)"
"(unsafe-car"
" lst_638))"
"((rest_641)"
"(unsafe-cdr"
" lst_638))"
"((id_642)"
"(unsafe-car"
" lst_639))"
"((rest_643)"
"(unsafe-cdr"
" lst_639)))"
"(let-values(((env_644)"
"(let-values(((env_645)"
" env_637))"
"(let-values(((env_646)"
"(let-values()"
"(env-extend"
" env_645"
" key_640"
"(local-variable1.1"
" id_642)))))"
"(values"
" env_646)))))"
"(if(not"
" #f)"
"(for-loop_636"
" env_644"
" rest_641"
" rest_643)"
" env_644)))"
" env_637))))"
" for-loop_636)"
" env_633"
" lst_634"
" lst_635))))))"
"(if(not #f)"
"(for-loop_624"
" env_632"
" rest_629"
" rest_631)"
" env_632)))"
" env_625))))"
" for-loop_624)"
"(expand-context-env ctx_269)"
" lst_622"
" lst_623)))))"
"(let-values(((rec-env_326)"
"(let-values(((lst_647) trans-keyss_321)"
"((lst_648) trans-valss_324)"
"((lst_649) trans-idss_318))"
"(begin"
"(if(list? lst_647)"
"(void)"
"(let-values()(in-list lst_647)))"
"(if(list? lst_648)"
"(void)"
"(let-values()(in-list lst_648)))"
"(if(list? lst_649)"
"(void)"
"(let-values()(in-list lst_649)))"
"((letrec-values(((for-loop_650)"
"(lambda(env_651"
" lst_652"
" lst_653"
" lst_654)"
"(if(if(pair? lst_652)"
"(if(pair? lst_653)"
"(pair? lst_654)"
" #f)"
" #f)"
"(let-values(((keys_655)"
"(unsafe-car"
" lst_652))"
"((rest_656)"
"(unsafe-cdr"
" lst_652))"
"((vals_657)"
"(unsafe-car"
" lst_653))"
"((rest_658)"
"(unsafe-cdr"
" lst_653))"
"((ids_659)"
"(unsafe-car"
" lst_654))"
"((rest_660)"
"(unsafe-cdr"
" lst_654)))"
"(let-values(((env_661)"
"(let-values(((env_662)"
" env_651))"
"(let-values(((env_663)"
"(let-values()"
"(let-values(((lst_664)"
" keys_655)"
"((lst_665)"
" vals_657)"
"((lst_666)"
" ids_659))"
"(begin"
"(if(list?"
" lst_664)"
"(void)"
"(let-values()"
"(in-list"
" lst_664)))"
"(if(list?"
" lst_665)"
"(void)"
"(let-values()"
"(in-list"
" lst_665)))"
"(if(list?"
" lst_666)"
"(void)"
"(let-values()"
"(in-list"
" lst_666)))"
"((letrec-values(((for-loop_667)"
"(lambda(env_668"
" lst_669"
" lst_670"
" lst_671)"
"(if(if(pair?"
" lst_669)"
"(if(pair?"
" lst_670)"
"(pair?"
" lst_671)"
" #f)"
" #f)"
"(let-values(((key_672)"
"(unsafe-car"
" lst_669))"
"((rest_673)"
"(unsafe-cdr"
" lst_669))"
"((val_674)"
"(unsafe-car"
" lst_670))"
"((rest_675)"
"(unsafe-cdr"
" lst_670))"
"((id_676)"
"(unsafe-car"
" lst_671))"
"((rest_677)"
"(unsafe-cdr"
" lst_671)))"
"(let-values(((env_678)"
"(let-values(((env_679)"
" env_668))"
"(let-values(((env_680)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_674"
" id_676"
" phase_316)"
"(env-extend"
" env_679"
" key_672"
" val_674)))))"
"(values"
" env_680)))))"
"(if(not"
" #f)"
"(for-loop_667"
" env_678"
" rest_673"
" rest_675"
" rest_677)"
" env_678)))"
" env_668))))"
" for-loop_667)"
" env_662"
" lst_664"
" lst_665"
" lst_666))))))"
"(values"
" env_663)))))"
"(if(not #f)"
"(for-loop_650"
" env_661"
" rest_656"
" rest_658"
" rest_660)"
" env_661)))"
" env_651))))"
" for-loop_650)"
" rec-val-env_325"
" lst_647"
" lst_648"
" lst_649)))))"
"(let-values((()"
"(begin"
"(if syntaxes?_264"
"(let-values()"
"(let-values(((obs_681)"
"(expand-context-observer"
" ctx_269)))"
"(if obs_681"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_681"
" 'exit-bind)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((expr-ctx_327)(as-expression-context ctx_269)))"
"(let-values(((orig-rrs_328)"
"(expand-context-reference-records"
" expr-ctx_327)))"
"(let-values(((rec-ctx_329)"
"(let-values(((v_682) expr-ctx_327))"
"(let-values(((the-struct_683) v_682))"
"(if(expand-context/outer?"
" the-struct_683)"
"(let-values(((env148_684)"
" rec-env_326)"
"((scopes149_685)"
"(cons"
" sc_315"
"(expand-context-scopes"
" ctx_269)))"
"((reference-records150_686)"
"(if split-by-reference?_266"
"(cons"
" frame-id_317"
" orig-rrs_328)"
" orig-rrs_328))"
"((binding-layer151_687)"
"(increment-binding-layer"
"(cons"
" trans-idss_318"
" val-idss_319)"
" ctx_269"
" sc_315))"
"((inner152_688)"
"(root-expand-context/outer-inner"
" v_682)))"
"(expand-context/outer1.1"
" inner152_688"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_683)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_683)"
"(root-expand-context/outer-frame-id"
" the-struct_683)"
"(expand-context/outer-context"
" the-struct_683)"
" env148_684"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_683)"
" scopes149_685"
"(expand-context/outer-def-ctx-scopes"
" the-struct_683)"
" binding-layer151_687"
" reference-records150_686"
"(expand-context/outer-only-immediate?"
" the-struct_683)"
"(expand-context/outer-need-eventually-defined"
" the-struct_683)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_683)"
"(expand-context/outer-name"
" the-struct_683)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                   \"expand-context/outer?\""
" the-struct_683))))))"
"(let-values(((letrec-values-id_330)"
"(if(not"
"(expand-context-to-parsed? ctx_269))"
"(if syntaxes?_264"
"(core-id 'letrec-values phase_316)"
" let-values112_297)"
" #f)))"
"(let-values(((rebuild-s_331)"
"(let-values(((ctx153_689) ctx_269)"
"((s154_690) s_268))"
"(keep-as-needed55.1"
" #f"
" #f"
" ctx153_689"
" s154_690))))"
"(let-values(((val-name-idss_332)"
"(if(expand-context-to-parsed?"
" ctx_269)"
"(let-values(((lst_691)"
" val-idss_319))"
"(begin"
"(if(list? lst_691)"
"(void)"
"(let-values()"
"(in-list lst_691)))"
"((letrec-values(((for-loop_692)"
"(lambda(lst_693)"
"(if(pair?"
" lst_693)"
"(let-values(((val-ids_694)"
"(unsafe-car"
" lst_693))"
"((rest_695)"
"(unsafe-cdr"
" lst_693)))"
"(let-values(((post-guard-var_696)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_697)"
"(let-values()"
"(let-values()"
"(let-values(((lst_698)"
" val-ids_694))"
"(begin"
"(if(list?"
" lst_698)"
"(void)"
"(let-values()"
"(in-list"
" lst_698)))"
"((letrec-values(((for-loop_699)"
"(lambda(lst_700)"
"(if(pair?"
" lst_700)"
"(let-values(((val-id_701)"
"(unsafe-car"
" lst_700))"
"((rest_702)"
"(unsafe-cdr"
" lst_700)))"
"(let-values(((post-guard-var_703)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_704)"
"(let-values()"
"(let-values()"
"(datum->syntax$1"
" #f"
"(syntax-e$1"
" val-id_701)"
" val-id_701"
" val-id_701)))))"
"(let-values(((result_705)"
"(if(post-guard-var_703)"
"(for-loop_699"
" rest_702)"
" null)))"
"(cons"
" elem_704"
" result_705))))))"
" null))))"
" for-loop_699)"
" lst_698)))))))"
"(let-values(((result_706)"
"(if(post-guard-var_696)"
"(for-loop_692"
" rest_695)"
" null)))"
"(cons"
" elem_697"
" result_706))))))"
" null))))"
" for-loop_692)"
" lst_691)))"
" val-idss_319)))"
"(let-values(((get-body_333)"
"(lambda()"
"(let-values((()"
"(begin"
"(let-values(((obs_708)"
"(expand-context-observer"
" ctx_269)))"
"(if obs_708"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_708"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_707)"
"(let-values(((v_709)"
" rec-ctx_329))"
"(let-values(((the-struct_710)"
" v_709))"
"(if(expand-context/outer?"
" the-struct_710)"
"(let-values(((reference-records158_711)"
" orig-rrs_328)"
"((inner159_712)"
"(root-expand-context/outer-inner"
" v_709)))"
"(expand-context/outer1.1"
" inner159_712"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_710)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_710)"
"(root-expand-context/outer-frame-id"
" the-struct_710)"
"(expand-context/outer-context"
" the-struct_710)"
"(expand-context/outer-env"
" the-struct_710)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_710)"
"(expand-context/outer-scopes"
" the-struct_710)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_710)"
"(expand-context/outer-binding-layer"
" the-struct_710)"
" reference-records158_711"
"(expand-context/outer-only-immediate?"
" the-struct_710)"
"(expand-context/outer-need-eventually-defined"
" the-struct_710)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_710)"
"(expand-context/outer-name"
" the-struct_710)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                             \"expand-context/outer?\""
" the-struct_710))))))"
"(let-values(((bodys155_714)"
" bodys_323)"
"((temp156_715)"
"(let-values(((body-ctx160_718)"
" body-ctx_707)"
"((ctx161_719)"
" ctx_269))"
"(as-tail-context21.1"
" ctx161_719"
" body-ctx160_718)))"
"((rebuild-s157_716)"
" rebuild-s_331))"
"(expand-body7.1"
" rebuild-s157_716"
" #f"
" #f"
" bodys155_714"
" temp156_715)))))))"
"(let-values(((result-s_334)"
"(if(not split-by-reference?_266)"
"(let-values()"
"(let-values(((clauses_720)"
"(let-values(((lst_722)"
" val-name-idss_332)"
"((lst_723)"
" val-keyss_322)"
"((lst_724)"
"(if syntaxes?_264"
" val-rhs90_276"
" val-rhs114_299)))"
"(begin"
"(if(list?"
" lst_722)"
"(void)"
"(let-values()"
"(in-list"
" lst_722)))"
"(if(list?"
" lst_723)"
"(void)"
"(let-values()"
"(in-list"
" lst_723)))"
"(if(list?"
" lst_724)"
"(void)"
"(let-values()"
"(in-list"
" lst_724)))"
"((letrec-values(((for-loop_725)"
"(lambda(lst_726"
" lst_727"
" lst_728)"
"(if(if(pair?"
" lst_726)"
"(if(pair?"
" lst_727)"
"(pair?"
" lst_728)"
" #f)"
" #f)"
"(let-values(((ids_729)"
"(unsafe-car"
" lst_726))"
"((rest_730)"
"(unsafe-cdr"
" lst_726))"
"((keys_731)"
"(unsafe-car"
" lst_727))"
"((rest_732)"
"(unsafe-cdr"
" lst_727))"
"((rhs_733)"
"(unsafe-car"
" lst_728))"
"((rest_734)"
"(unsafe-cdr"
" lst_728)))"
"(let-values(((post-guard-var_735)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_736)"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_738)"
"(expand-context-observer"
" ctx_269)))"
"(if obs_738"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_738"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-rhs_737)"
"(if rec?_265"
"(let-values(((temp162_739)"
"(add-scope"
" rhs_733"
" sc_315))"
"((temp163_740)"
"(as-named-context"
" rec-ctx_329"
" ids_729)))"
"(expand5.1"
" #f"
" #f"
" temp162_739"
" temp163_740))"
"(let-values(((rhs164_741)"
" rhs_733)"
"((temp165_742)"
"(as-named-context"
" expr-ctx_327"
" ids_729)))"
"(expand5.1"
" #f"
" #f"
" rhs164_741"
" temp165_742)))))"
"(if(expand-context-to-parsed?"
" ctx_269)"
"(list"
" keys_731"
" exp-rhs_737)"
"(list"
" ids_729"
" exp-rhs_737))))))))"
"(let-values(((result_743)"
"(if(post-guard-var_735)"
"(for-loop_725"
" rest_730"
" rest_732"
" rest_734)"
" null)))"
"(cons"
" elem_736"
" result_743))))))"
" null))))"
" for-loop_725)"
" lst_722"
" lst_723"
" lst_724)))))"
"(let-values(((exp-body_721)"
"(get-body_333)))"
"(begin"
"(if frame-id_317"
"(let-values()"
"(reference-record-clear!"
" frame-id_317))"
"(void))"
"(if(expand-context-to-parsed?"
" ctx_269)"
"(if rec?_265"
"(parsed-letrec-values18.1"
" rebuild-s_331"
" val-name-idss_332"
" clauses_720"
" exp-body_721)"
"(parsed-let-values17.1"
" rebuild-s_331"
" val-name-idss_332"
" clauses_720"
" exp-body_721))"
"(let-values(((rebuild-s166_744)"
" rebuild-s_331)"
"((temp167_745)"
"(list*"
" letrec-values-id_330"
" clauses_720"
" exp-body_721)))"
"(rebuild62.1"
" #f"
" #f"
" rebuild-s166_744"
" temp167_745)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_747)"
"(expand-context-observer"
" ctx_269)))"
"(if obs_747"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_747"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_748)"
"(expand-context-observer"
" ctx_269)))"
"(if obs_748"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_748"
" 'letrec-values)))"
"(void)))"
"(values))))"
"(let-values(((val-rhss_746)"
"(let-values(((lst_749)"
"(if syntaxes?_264"
" val-rhs90_276"
" val-rhs114_299)))"
"(begin"
"(if(list?"
" lst_749)"
"(void)"
"(let-values()"
"(in-list"
" lst_749)))"
"((letrec-values(((for-loop_750)"
"(lambda(lst_751)"
"(if(pair?"
" lst_751)"
"(let-values(((rhs_752)"
"(unsafe-car"
" lst_751))"
"((rest_753)"
"(unsafe-cdr"
" lst_751)))"
"(let-values(((post-guard-var_754)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_755)"
"(let-values()"
"(let-values()"
"(add-scope"
" rhs_752"
" sc_315)))))"
"(let-values(((result_756)"
"(if(post-guard-var_754)"
"(for-loop_750"
" rest_753)"
" null)))"
"(cons"
" elem_755"
" result_756))))))"
" null))))"
" for-loop_750)"
" lst_749)))))"
"(let-values(((val-idss168_758)"
" val-idss_319)"
"((val-keyss169_759)"
" val-keyss_322)"
"((val-rhss170_760)"
" val-rhss_746)"
"((temp171_761)"
"(let-values(((lst_768)"
" val-idss_319))"
"(begin"
"(if(list?"
" lst_768)"
"(void)"
"(let-values()"
"(in-list"
" lst_768)))"
"((letrec-values(((for-loop_769)"
"(lambda(lst_770)"
"(if(pair?"
" lst_770)"
"(let-values(((rhs_771)"
"(unsafe-car"
" lst_770))"
"((rest_772)"
"(unsafe-cdr"
" lst_770)))"
"(let-values(((post-guard-var_773)"
"(lambda()"
" #t)))"
"(let-values()"
"(let-values(((elem_774)"
"(let-values()"
"(let-values()"
" #f))))"
"(let-values(((result_775)"
"(if(post-guard-var_773)"
"(for-loop_769"
" rest_772)"
" null)))"
"(cons"
" elem_774"
" result_775))))))"
" null))))"
" for-loop_769)"
" lst_768))))"
"((temp172_762)"
" #t)"
"((frame-id173_763)"
" frame-id_317)"
"((rec-ctx174_764)"
" rec-ctx_329)"
"((rebuild-s175_765)"
" rebuild-s_331)"
"((get-body176_766)"
" get-body_333)"
"((temp177_767)"
" #t))"
"(expand-and-split-bindings-by-reference45.1"
" rec-ctx174_764"
" frame-id173_763"
" get-body176_766"
" rebuild-s175_765"
" temp172_762"
" temp177_767"
" val-idss168_758"
" val-keyss169_759"
" val-rhss170_760"
" temp171_761)))))))))"
"(if(expand-context-to-parsed? ctx_269)"
" result-s_334"
"(attach-disappeared-transformer-bindings"
" result-s_334"
" trans-idss_318)))))))))))))))))))))))))))))))))))))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'let-values"
"(let-values(((temp178_800) 'prim-let-values))(make-let-values-form11.1 temp178_800 #f #f #f #f #f #f #f #f))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-values"
"(let-values(((temp179_802) #t)((temp180_803) 'prim-letrec-values))"
"(make-let-values-form11.1 temp180_803 temp179_802 #t #f #f #f #f #f #f))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-syntaxes+values"
"(let-values(((temp181_805) #t)"
"((temp182_806) #t)"
"((temp183_807) #t)"
"((temp184_808) 'prim-letrec-syntaxes+values)"
"((temp185_809) 'letrec-syntaxes-renames))"
"(make-let-values-form11.1 temp184_808 temp182_806 #t temp185_809 #t temp183_807 #t temp181_805 #t))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%stratified-body"
"(lambda(s_810 ctx_811)"
"(let-values((()"
"(begin"
"(let-values(((obs_828)(expand-context-observer ctx_811)))"
"(if obs_828"
"(let-values()(let-values()(call-expand-observe obs_828 'prim-#%stratified)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_812)(syntax-disarm$1 s_810)))"
"(let-values(((ok?_813 #%stratified-body186_814 body187_815)"
"(let-values(((s_829) disarmed-s_812))"
"(let-values(((orig-s_830) s_829))"
"(let-values(((#%stratified-body186_831 body187_832)"
"(let-values(((s_833)(if(syntax?$1 s_829)(syntax-e$1 s_829) s_829)))"
"(if(pair? s_833)"
"(let-values(((#%stratified-body188_834)"
"(let-values(((s_836)(car s_833))) s_836))"
"((body189_835)"
"(let-values(((s_837)(cdr s_833)))"
"(let-values(((s_838)"
"(if(syntax?$1 s_837)"
"(syntax-e$1 s_837)"
" s_837)))"
"(let-values(((flat-s_839)(to-syntax-list.1 s_838)))"
"(if(not flat-s_839)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_830))"
"(if(null? flat-s_839)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_830))"
"(let-values() flat-s_839))))))))"
"(values #%stratified-body188_834 body189_835))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_830)))))"
"(values #t #%stratified-body186_831 body187_832))))))"
"(let-values(((rebuild-s_826)"
"(let-values(((ctx190_840) ctx_811)((s191_841) s_810))"
"(keep-as-needed55.1 #f #f ctx190_840 s191_841))))"
"(let-values(((exp-body_827)"
"(let-values(((temp192_843) body187_815)"
"((ctx193_844) ctx_811)"
"((temp194_845) #t)"
"((rebuild-s195_846) rebuild-s_826))"
"(expand-body7.1 rebuild-s195_846 temp194_845 #t temp192_843 ctx193_844))))"
"(if(expand-context-to-parsed? ctx_811)"
"(parsed-begin12.1 rebuild-s_826 exp-body_827)"
"(let-values(((rebuild-s196_847) rebuild-s_826)"
"((temp197_848)(list*(core-id 'begin(expand-context-phase ctx_811)) exp-body_827)))"
"(rebuild62.1 #f #f rebuild-s196_847 temp197_848)))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%datum"
"(lambda(s_849 ctx_850)"
"(let-values((()"
"(begin"
"(let-values(((obs_867)(expand-context-observer ctx_850)))"
"(if obs_867"
"(let-values()(let-values()(call-expand-observe obs_867 'prim-#%datum)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_851)(syntax-disarm$1 s_849)))"
"(let-values(((ok?_852 #%datum198_853 datum199_854)"
"(let-values(((s_868) disarmed-s_851))"
"(let-values(((orig-s_869) s_868))"
"(let-values(((#%datum198_870 datum199_871)"
"(let-values(((s_872)(if(syntax?$1 s_868)(syntax-e$1 s_868) s_868)))"
"(if(pair? s_872)"
"(let-values(((#%datum200_873)"
"(let-values(((s_875)(car s_872))) s_875))"
"((datum201_874)(let-values(((s_876)(cdr s_872))) s_876)))"
"(values #%datum200_873 datum201_874))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_869)))))"
"(values #t #%datum198_870 datum199_871))))))"
"(let-values(((datum_865) datum199_854))"
"(let-values((()"
"(begin"
"(if(if(syntax?$1 datum_865)(keyword?(syntax-e$1 datum_865)) #f)"
"(let-values()"
"                                   (raise-syntax-error$1 '#%datum \"keyword misused as an expression\" #f datum_865))"
"(void))"
"(values))))"
"(let-values(((phase_866)(expand-context-phase ctx_850)))"
"(if(expand-context-to-parsed? ctx_850)"
"(parsed-quote14.1(keep-properties-only s_849)(syntax->datum$1 datum_865))"
"(let-values(((s202_877) s_849)((temp203_878)(list(core-id 'quote phase_866) datum_865)))"
"(rebuild62.1 #f #f s202_877 temp203_878))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%app"
"(lambda(s_879 ctx_880)"
"(let-values((()"
"(begin"
"(let-values(((obs_896)(expand-context-observer ctx_880)))"
"(if obs_896(let-values()(let-values()(call-expand-observe obs_896 'prim-#%app)))(void)))"
"(values))))"
"(let-values(((disarmed-s_881)(syntax-disarm$1 s_879)))"
"(let-values(((ok?_882 #%app204_883 e205_884)"
"(let-values(((s_897) disarmed-s_881))"
"(let-values(((orig-s_898) s_897))"
"(let-values(((#%app204_899 e205_900)"
"(let-values(((s_901)(if(syntax?$1 s_897)(syntax-e$1 s_897) s_897)))"
"(if(pair? s_901)"
"(let-values(((#%app206_902)(let-values(((s_904)(car s_901))) s_904))"
"((e207_903)"
"(let-values(((s_905)(cdr s_901)))"
"(let-values(((s_906)"
"(if(syntax?$1 s_905)"
"(syntax-e$1 s_905)"
" s_905)))"
"(let-values(((flat-s_907)(to-syntax-list.1 s_906)))"
"(if(not flat-s_907)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_898))"
"(let-values() flat-s_907)))))))"
"(values #%app206_902 e207_903))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_898)))))"
"(values #t #%app204_899 e205_900))))))"
"(let-values(((es_895) e205_884))"
"(if(null? es_895)"
"(let-values()"
"(let-values(((phase_908)(expand-context-phase ctx_880)))"
"(if(expand-context-to-parsed? ctx_880)"
"(parsed-quote14.1(keep-properties-only s_879) null)"
"(let-values(((s208_909) s_879)((temp209_910)(list(core-id 'quote phase_908) null)))"
"(rebuild62.1 #f #f s208_909 temp209_910)))))"
"(let-values()"
"(let-values(((rebuild-s_911)"
"(let-values(((ctx210_916) ctx_880)((s211_917) s_879))"
"(keep-as-needed55.1 #f #f ctx210_916 s211_917))))"
"(let-values(((prefixless_912)(cdr(syntax-e$1 disarmed-s_881))))"
"(let-values(((rebuild-prefixless_913)"
"(if(syntax?$1 prefixless_912)"
"(let-values(((ctx212_918) ctx_880)((prefixless213_919) prefixless_912))"
"(keep-as-needed55.1 #f #f ctx212_918 prefixless213_919))"
" prefixless_912)))"
"(let-values(((expr-ctx_914)(as-expression-context ctx_880)))"
"(let-values(((exp-es_915)"
"(let-values(((lst_920) es_895))"
"(begin"
"(if(list? lst_920)(void)(let-values()(in-list lst_920)))"
"((letrec-values(((for-loop_921)"
"(lambda(lst_922)"
"(if(pair? lst_922)"
"(let-values(((e_923)(unsafe-car lst_922))"
"((rest_924)(unsafe-cdr lst_922)))"
"(let-values(((post-guard-var_925)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_926)"
"(let-values()"
"(let-values()"
"(let-values(((e214_927)"
" e_923)"
"((expr-ctx215_928)"
" expr-ctx_914))"
"(expand5.1"
" #f"
" #f"
" e214_927"
" expr-ctx215_928))))))"
"(let-values(((result_929)"
"(if(post-guard-var_925)"
"(for-loop_921 rest_924)"
" null)))"
"(cons elem_926 result_929))))))"
" null))))"
" for-loop_921)"
" lst_920)))))"
"(if(expand-context-to-parsed? ctx_880)"
"(parsed-app7.1"
"(if(syntax?$1 rebuild-prefixless_913) rebuild-prefixless_913 rebuild-s_911)"
" exp-es_915)"
"(let-values(((rebuild-s216_930) rebuild-s_911)"
"((temp217_931)"
"(cons"
" #%app204_883"
"(if(syntax?$1 rebuild-prefixless_913)"
"(let-values(((rebuild-prefixless218_932) rebuild-prefixless_913)"
"((exp-es219_933) exp-es_915))"
"(rebuild62.1 #f #f rebuild-prefixless218_932 exp-es219_933))"
" exp-es_915))))"
"(rebuild62.1 #f #f rebuild-s216_930 temp217_931)))))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote"
"(lambda(s_934 ctx_935)"
"(let-values((()"
"(begin"
"(let-values(((obs_949)(expand-context-observer ctx_935)))"
"(if obs_949(let-values()(let-values()(call-expand-observe obs_949 'prim-quote)))(void)))"
"(values))))"
"(let-values(((ok?_936 quote220_937 datum221_938)"
"(let-values(((s_950)(syntax-disarm$1 s_934)))"
"(let-values(((orig-s_951) s_950))"
"(let-values(((quote220_952 datum221_953)"
"(let-values(((s_954)(if(syntax?$1 s_950)(syntax-e$1 s_950) s_950)))"
"(if(pair? s_954)"
"(let-values(((quote222_955)(let-values(((s_957)(car s_954))) s_957))"
"((datum223_956)"
"(let-values(((s_958)(cdr s_954)))"
"(let-values(((s_959)"
"(if(syntax?$1 s_958)"
"(syntax-e$1 s_958)"
" s_958)))"
"(if(pair? s_959)"
"(let-values(((datum224_960)"
"(let-values(((s_961)(car s_959)))"
" s_961))"
"(()"
"(let-values(((s_962)(cdr s_959)))"
"(let-values(((s_963)"
"(if(syntax?$1 s_962)"
"(syntax-e$1 s_962)"
" s_962)))"
"(if(null? s_963)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_951))))))"
"(values datum224_960))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_951))))))"
"(values quote222_955 datum223_956))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_951)))))"
"(values #t quote220_952 datum221_953))))))"
"(if(expand-context-to-parsed? ctx_935)"
"(parsed-quote14.1(keep-properties-only s_934)(syntax->datum$1 datum221_938))"
" s_934))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote-syntax"
"(lambda(s_964 ctx_965)"
"(let-values((()"
"(begin"
"(let-values(((obs_993)(expand-context-observer ctx_965)))"
"(if obs_993"
"(let-values()(let-values()(call-expand-observe obs_993 'prim-quote-syntax)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_966)(syntax-disarm$1 s_964)))"
"(let-values(((ok?_967 quote-syntax225_968 datum226_969)"
"(let-values(((s_994) disarmed-s_966))"
"(if(let-values(((s_995)(if(syntax?$1 s_994)(syntax-e$1 s_994) s_994)))"
"(if(pair? s_995)"
"(if(let-values(((s_996)(car s_995))) #t)"
"(let-values(((s_997)(cdr s_995)))"
"(let-values(((s_998)(if(syntax?$1 s_997)(syntax-e$1 s_997) s_997)))"
"(if(pair? s_998)"
"(if(let-values(((s_999)(car s_998))) #t)"
"(let-values(((s_1000)(cdr s_998)))"
"(let-values(((s_1001)"
"(if(syntax?$1 s_1000)(syntax-e$1 s_1000) s_1000)))"
"(if(pair? s_1001)"
"(if(let-values(((s_1002)(car s_1001)))"
"(let-values(((s_1003)"
"(if(syntax?$1 s_1002)"
"(syntax-e$1 s_1002)"
" s_1002)))"
"(eq? '#:local s_1003)))"
"(let-values(((s_1004)(cdr s_1001)))"
"(let-values(((s_1005)"
"(if(syntax?$1 s_1004)"
"(syntax-e$1 s_1004)"
" s_1004)))"
"(null? s_1005)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((quote-syntax225_1007 datum226_1008)"
"(let-values(((s_1009)(if(syntax?$1 s_994)(syntax-e$1 s_994) s_994)))"
"(let-values(((quote-syntax227_1010)"
"(let-values(((s_1012)(car s_1009))) s_1012))"
"((datum228_1011)"
"(let-values(((s_1013)(cdr s_1009)))"
"(let-values(((s_1014)"
"(if(syntax?$1 s_1013)"
"(syntax-e$1 s_1013)"
" s_1013)))"
"(let-values(((datum229_1015)"
"(let-values(((s_1016)(car s_1014)))"
" s_1016))"
"(()"
"(let-values(((s_1017)(cdr s_1014)))"
"(let-values(((s_1018)"
"(if(syntax?$1 s_1017)"
"(syntax-e$1 s_1017)"
" s_1017)))"
"(let-values((()"
"(let-values(((s_1019)"
"(car"
" s_1018)))"
"(let-values(((s_1020)"
"(if(syntax?$1"
" s_1019)"
"(syntax-e$1"
" s_1019)"
" s_1019)))"
"(values))))"
"(()"
"(let-values(((s_1021)"
"(cdr"
" s_1018)))"
"(let-values(((s_1022)"
"(if(syntax?$1"
" s_1021)"
"(syntax-e$1"
" s_1021)"
" s_1021)))"
"(values)))))"
"(values))))))"
"(values datum229_1015))))))"
"(values quote-syntax227_1010 datum228_1011)))))"
"(values #t quote-syntax225_1007 datum226_1008)))"
"(values #f #f #f)))))"
"(let-values(((ok?_980 quote-syntax230_981 datum231_982)"
"(let-values(((s_1023) disarmed-s_966))"
"(if(if(not ok?_967) #t #f)"
"(let-values(((orig-s_1024) s_1023))"
"(let-values(((quote-syntax230_1025 datum231_1026)"
"(let-values(((s_1027)"
"(if(syntax?$1 s_1023)(syntax-e$1 s_1023) s_1023)))"
"(if(pair? s_1027)"
"(let-values(((quote-syntax232_1028)"
"(let-values(((s_1030)(car s_1027))) s_1030))"
"((datum233_1029)"
"(let-values(((s_1031)(cdr s_1027)))"
"(let-values(((s_1032)"
"(if(syntax?$1 s_1031)"
"(syntax-e$1 s_1031)"
" s_1031)))"
"(if(pair? s_1032)"
"(let-values(((datum234_1033)"
"(let-values(((s_1034)"
"(car s_1032)))"
" s_1034))"
"(()"
"(let-values(((s_1035)"
"(cdr s_1032)))"
"(let-values(((s_1036)"
"(if(syntax?$1"
" s_1035)"
"(syntax-e$1"
" s_1035)"
" s_1035)))"
"(if(null? s_1036)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_1024))))))"
"(values datum234_1033))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_1024))))))"
"(values quote-syntax232_1028 datum233_1029))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_1024)))))"
"(values #t quote-syntax230_1025 datum231_1026)))"
"(values #f #f #f)))))"
"(if ok?_967"
"(let-values()"
"(let-values((()"
"(begin"
"(reference-records-all-used!(expand-context-reference-records ctx_965))"
"(values))))"
"(let-values(((ok?_1037 _235_1038 _236_1039 kw237_1040)"
"(let-values(((s_1053) disarmed-s_966))"
"(let-values(((orig-s_1054) s_1053))"
"(let-values(((_235_1055 _236_1056 kw237_1057)"
"(let-values(((s_1058)"
"(if(syntax?$1 s_1053)(syntax-e$1 s_1053) s_1053)))"
"(if(pair? s_1058)"
"(let-values(((_238_1059)"
"(let-values(((s_1062)(car s_1058))) s_1062))"
"((_239_1060 kw240_1061)"
"(let-values(((s_1063)(cdr s_1058)))"
"(let-values(((s_1064)"
"(if(syntax?$1 s_1063)"
"(syntax-e$1 s_1063)"
" s_1063)))"
"(if(pair? s_1064)"
"(let-values(((_241_1065)"
"(let-values(((s_1067)"
"(car s_1064)))"
" s_1067))"
"((kw242_1066)"
"(let-values(((s_1068)"
"(cdr s_1064)))"
"(let-values(((s_1069)"
"(if(syntax?$1"
" s_1068)"
"(syntax-e$1"
" s_1068)"
" s_1068)))"
"(if(pair? s_1069)"
"(let-values(((kw243_1070)"
"(let-values(((s_1071)"
"(car"
" s_1069)))"
" s_1071))"
"(()"
"(let-values(((s_1072)"
"(cdr"
" s_1069)))"
"(let-values(((s_1073)"
"(if(syntax?$1"
" s_1072)"
"(syntax-e$1"
" s_1072)"
" s_1072)))"
"(if(null?"
" s_1073)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"bad syntax\""
" orig-s_1054))))))"
"(values kw243_1070))"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_1054))))))"
"(values _241_1065 kw242_1066))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_1054))))))"
"(values _238_1059 _239_1060 kw240_1061))"
"                                                         (raise-syntax-error$1 #f \"bad syntax\" orig-s_1054)))))"
"(values #t _235_1055 _236_1056 kw237_1057))))))"
"(if(expand-context-to-parsed? ctx_965)"
"(parsed-quote-syntax15.1(keep-properties-only s_964) datum226_969)"
"(let-values(((s244_1074) s_964)"
"((temp245_1075)(list quote-syntax225_968 datum226_969 kw237_1040)))"
"(rebuild62.1 #f #f s244_1074 temp245_1075))))))"
"(let-values()"
"(let-values(((datum-s_1076)(remove-scopes datum231_982(expand-context-scopes ctx_965))))"
"(if(expand-context-to-parsed? ctx_965)"
"(parsed-quote-syntax15.1(keep-properties-only s_964) datum-s_1076)"
"(let-values(((s246_1077) s_964)((temp247_1078)(list quote-syntax230_981 datum-s_1076)))"
"(rebuild62.1 #f #f s246_1077 temp247_1078)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'if"
"(lambda(s_1079 ctx_1080)"
"(let-values((()"
"(begin"
"(let-values(((obs_1107)(expand-context-observer ctx_1080)))"
"(if obs_1107(let-values()(let-values()(call-expand-observe obs_1107 'prim-if)))(void)))"
"(values))))"
"(let-values(((disarmed-s_1081)(syntax-disarm$1 s_1079)))"
"(let-values(((ok?_1082 if248_1083 tst249_1084 thn250_1085 els251_1086)"
"(let-values(((s_1108) disarmed-s_1081))"
"(let-values(((orig-s_1109) s_1108))"
"(let-values(((if248_1110 tst249_1111 thn250_1112 els251_1113)"
"(let-values(((s_1114)(if(syntax?$1 s_1108)(syntax-e$1 s_1108) s_1108)))"
"(if(pair? s_1114)"
"(let-values(((if252_1115)(let-values(((s_1119)(car s_1114))) s_1119))"
"((tst253_1116 thn254_1117 els255_1118)"
"(let-values(((s_1120)(cdr s_1114)))"
"(let-values(((s_1121)"
"(if(syntax?$1 s_1120)"
"(syntax-e$1 s_1120)"
" s_1120)))"
"(if(pair? s_1121)"
"(let-values(((tst256_1122)"
"(let-values(((s_1125)(car s_1121)))"
" s_1125))"
"((thn257_1123 els258_1124)"
"(let-values(((s_1126)(cdr s_1121)))"
"(let-values(((s_1127)"
"(if(syntax?$1 s_1126)"
"(syntax-e$1 s_1126)"
" s_1126)))"
"(if(pair? s_1127)"
"(let-values(((thn259_1128)"
"(let-values(((s_1130)"
"(car"
" s_1127)))"
" s_1130))"
"((els260_1129)"
"(let-values(((s_1131)"
"(cdr"
" s_1127)))"
"(let-values(((s_1132)"
"(if(syntax?$1"
" s_1131)"
"(syntax-e$1"
" s_1131)"
" s_1131)))"
"(if(pair?"
" s_1132)"
"(let-values(((els261_1133)"
"(let-values(((s_1134)"
"(car"
" s_1132)))"
" s_1134))"
"(()"
"(let-values(((s_1135)"
"(cdr"
" s_1132)))"
"(let-values(((s_1136)"
"(if(syntax?$1"
" s_1135)"
"(syntax-e$1"
" s_1135)"
" s_1135)))"
"(if(null?"
" s_1136)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1109))))))"
"(values"
" els261_1133))"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1109))))))"
"(values"
" thn259_1128"
" els260_1129))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1109))))))"
"(values tst256_1122 thn257_1123 els258_1124))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1109))))))"
"(values if252_1115 tst253_1116 thn254_1117 els255_1118))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1109)))))"
"(values #t if248_1110 tst249_1111 thn250_1112 els251_1113))))))"
"(let-values(((expr-ctx_1101)(as-expression-context ctx_1080)))"
"(let-values(((tail-ctx_1102)"
"(let-values(((expr-ctx262_1138) expr-ctx_1101)((ctx263_1139) ctx_1080))"
"(as-tail-context21.1 ctx263_1139 expr-ctx262_1138))))"
"(let-values(((rebuild-s_1103)"
"(let-values(((ctx264_1140) ctx_1080)((s265_1141) s_1079))"
"(keep-as-needed55.1 #f #f ctx264_1140 s265_1141))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1142)(expand-context-observer ctx_1080)))"
"(if obs_1142"
"(let-values()(let-values()(call-expand-observe obs_1142 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((exp-tst_1104)"
"(let-values(((temp266_1143) tst249_1084)((expr-ctx267_1144) expr-ctx_1101))"
"(expand5.1 #f #f temp266_1143 expr-ctx267_1144))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1145)(expand-context-observer ctx_1080)))"
"(if obs_1145"
"(let-values()(let-values()(call-expand-observe obs_1145 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-thn_1105)"
"(let-values(((temp268_1146) thn250_1085)((tail-ctx269_1147) tail-ctx_1102))"
"(expand5.1 #f #f temp268_1146 tail-ctx269_1147))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1148)(expand-context-observer ctx_1080)))"
"(if obs_1148"
"(let-values()(let-values()(call-expand-observe obs_1148 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-els_1106)"
"(let-values(((temp270_1149) els251_1086)((tail-ctx271_1150) tail-ctx_1102))"
"(expand5.1 #f #f temp270_1149 tail-ctx271_1150))))"
"(if(expand-context-to-parsed? ctx_1080)"
"(parsed-if8.1 rebuild-s_1103 exp-tst_1104 exp-thn_1105 exp-els_1106)"
"(let-values(((rebuild-s272_1151) rebuild-s_1103)"
"((temp273_1152)(list if248_1083 exp-tst_1104 exp-thn_1105 exp-els_1106)))"
"(rebuild62.1 #f #f rebuild-s272_1151 temp273_1152))))))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'with-continuation-mark"
"(lambda(s_1153 ctx_1154)"
"(let-values((()"
"(begin"
"(let-values(((obs_1180)(expand-context-observer ctx_1154)))"
"(if obs_1180"
"(let-values()(let-values()(call-expand-observe obs_1180 'prim-with-continuation-mark)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1155)(syntax-disarm$1 s_1153)))"
"(let-values(((ok?_1156 with-continuation-mark274_1157 key275_1158 val276_1159 body277_1160)"
"(let-values(((s_1181) disarmed-s_1155))"
"(let-values(((orig-s_1182) s_1181))"
"(let-values(((with-continuation-mark274_1183 key275_1184 val276_1185 body277_1186)"
"(let-values(((s_1187)(if(syntax?$1 s_1181)(syntax-e$1 s_1181) s_1181)))"
"(if(pair? s_1187)"
"(let-values(((with-continuation-mark278_1188)"
"(let-values(((s_1192)(car s_1187))) s_1192))"
"((key279_1189 val280_1190 body281_1191)"
"(let-values(((s_1193)(cdr s_1187)))"
"(let-values(((s_1194)"
"(if(syntax?$1 s_1193)"
"(syntax-e$1 s_1193)"
" s_1193)))"
"(if(pair? s_1194)"
"(let-values(((key282_1195)"
"(let-values(((s_1198)(car s_1194)))"
" s_1198))"
"((val283_1196 body284_1197)"
"(let-values(((s_1199)(cdr s_1194)))"
"(let-values(((s_1200)"
"(if(syntax?$1 s_1199)"
"(syntax-e$1 s_1199)"
" s_1199)))"
"(if(pair? s_1200)"
"(let-values(((val285_1201)"
"(let-values(((s_1203)"
"(car"
" s_1200)))"
" s_1203))"
"((body286_1202)"
"(let-values(((s_1204)"
"(cdr"
" s_1200)))"
"(let-values(((s_1205)"
"(if(syntax?$1"
" s_1204)"
"(syntax-e$1"
" s_1204)"
" s_1204)))"
"(if(pair?"
" s_1205)"
"(let-values(((body287_1206)"
"(let-values(((s_1207)"
"(car"
" s_1205)))"
" s_1207))"
"(()"
"(let-values(((s_1208)"
"(cdr"
" s_1205)))"
"(let-values(((s_1209)"
"(if(syntax?$1"
" s_1208)"
"(syntax-e$1"
" s_1208)"
" s_1208)))"
"(if(null?"
" s_1209)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1182))))))"
"(values"
" body287_1206))"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1182))))))"
"(values"
" val285_1201"
" body286_1202))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1182))))))"
"(values key282_1195 val283_1196 body284_1197))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1182))))))"
"(values"
" with-continuation-mark278_1188"
" key279_1189"
" val280_1190"
" body281_1191))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1182)))))"
"(values #t with-continuation-mark274_1183 key275_1184 val276_1185 body277_1186))))))"
"(let-values(((expr-ctx_1175)(as-expression-context ctx_1154)))"
"(let-values(((rebuild-s_1176)"
"(let-values(((ctx288_1210) ctx_1154)((s289_1211) s_1153))"
"(keep-as-needed55.1 #f #f ctx288_1210 s289_1211))))"
"(let-values(((exp-key_1177)"
"(let-values(((temp290_1212) key275_1158)((expr-ctx291_1213) expr-ctx_1175))"
"(expand5.1 #f #f temp290_1212 expr-ctx291_1213))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1214)(expand-context-observer ctx_1154)))"
"(if obs_1214"
"(let-values()(let-values()(call-expand-observe obs_1214 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-val_1178)"
"(let-values(((temp292_1215) val276_1159)((expr-ctx293_1216) expr-ctx_1175))"
"(expand5.1 #f #f temp292_1215 expr-ctx293_1216))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1217)(expand-context-observer ctx_1154)))"
"(if obs_1217"
"(let-values()(let-values()(call-expand-observe obs_1217 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_1179)"
"(let-values(((temp294_1218) body277_1160)"
"((temp295_1219)"
"(let-values(((expr-ctx296_1221) expr-ctx_1175)"
"((ctx297_1222) ctx_1154))"
"(as-tail-context21.1 ctx297_1222 expr-ctx296_1221))))"
"(expand5.1 #f #f temp294_1218 temp295_1219))))"
"(if(expand-context-to-parsed? ctx_1154)"
"(parsed-with-continuation-mark10.1 rebuild-s_1176 exp-key_1177 exp-val_1178 exp-body_1179)"
"(let-values(((rebuild-s298_1223) rebuild-s_1176)"
"((temp299_1224)"
"(list"
" with-continuation-mark274_1157"
" exp-key_1177"
" exp-val_1178"
" exp-body_1179)))"
"(rebuild62.1 #f #f rebuild-s298_1223 temp299_1224))))))))))))))))"
" print-values)"
"(define-values"
"(make-begin20.1)"
"(lambda(last-is-tail?15_1231 list-start-index14_1232 log-tag18_1233 parsed-begin19_1234)"
"(let-values(((log-tag_1235) log-tag18_1233))"
"(let-values(((parsed-begin_1236) parsed-begin19_1234))"
"(let-values(((list-start-index_1237) list-start-index14_1232))"
"(let-values(((last-is-tail?_1238) last-is-tail?15_1231))"
"(let-values()"
"(lambda(s_1239 ctx_1240)"
"(let-values((()"
"(begin"
"(let-values(((obs_1260)(expand-context-observer ctx_1240)))"
"(if obs_1260"
"(let-values()(let-values()(call-expand-observe obs_1260 log-tag_1235)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1241)(syntax-disarm$1 s_1239)))"
"(let-values(((ok?_1242 begin300_1243 e301_1244)"
"(let-values(((s_1261) disarmed-s_1241))"
"(let-values(((orig-s_1262) s_1261))"
"(let-values(((begin300_1263 e301_1264)"
"(let-values(((s_1265)"
"(if(syntax?$1 s_1261)(syntax-e$1 s_1261) s_1261)))"
"(if(pair? s_1265)"
"(let-values(((begin302_1266)"
"(let-values(((s_1268)(car s_1265))) s_1268))"
"((e303_1267)"
"(let-values(((s_1269)(cdr s_1265)))"
"(let-values(((s_1270)"
"(if(syntax?$1 s_1269)"
"(syntax-e$1 s_1269)"
" s_1269)))"
"(let-values(((flat-s_1271)"
"(to-syntax-list.1 s_1270)))"
"(if(not flat-s_1271)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_1262))"
"(if(null? flat-s_1271)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_1262))"
"(let-values() flat-s_1271))))))))"
"(values begin302_1266 e303_1267))"
"                                                        (raise-syntax-error$1 #f \"bad syntax\" orig-s_1262)))))"
"(values #t begin300_1263 e301_1264))))))"
"(let-values(((expr-ctx_1255)"
"(if last-is-tail?_1238"
"(as-begin-expression-context ctx_1240)"
"(as-expression-context ctx_1240))))"
"(let-values(((rebuild-s_1256)"
"(let-values(((ctx304_1272) ctx_1240)((s305_1273) s_1239))"
"(keep-as-needed55.1 #f #f ctx304_1272 s305_1273))))"
"(let-values(((es_1257) e301_1244))"
"(let-values(((last-i_1258)(sub1(length es_1257))))"
"(let-values(((exp-es_1259)"
"(let-values(((lst_1274) es_1257)((start_1275) 0))"
"(begin"
"(if(list? lst_1274)(void)(let-values()(in-list lst_1274)))"
"(if(exact-nonnegative-integer? start_1275)"
"(void)"
"(let-values()(in-naturals start_1275)))"
"((letrec-values(((for-loop_1276)"
"(lambda(lst_1277 pos_1278)"
"(if(if(pair? lst_1277) #t #f)"
"(let-values(((e_1279)(unsafe-car lst_1277))"
"((rest_1280)(unsafe-cdr lst_1277))"
"((i_1281) pos_1278))"
"(let-values(((post-guard-var_1282)"
"(lambda() #t)))"
"(let-values()"
"(let-values(((elem_1283)"
"(let-values()"
"(let-values()"
"(begin"
"(if(="
" i_1281"
" list-start-index_1237)"
"(let-values()"
"(let-values(((obs_1284)"
"(expand-context-observer"
" ctx_1240)))"
"(if obs_1284"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1284"
" 'enter-list"
"(list-tail"
" es_1257"
" i_1281))))"
"(void))))"
"(void))"
"(let-values(((obs_1285)"
"(expand-context-observer"
" ctx_1240)))"
"(if obs_1285"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1285"
" 'next)))"
"(void)))"
"(let-values(((e306_1286)"
" e_1279)"
"((temp307_1287)"
"(if(if last-is-tail?_1238"
"(="
" i_1281"
" last-i_1258)"
" #f)"
"(let-values(((expr-ctx308_1289)"
" expr-ctx_1255)"
"((ctx309_1290)"
" ctx_1240))"
"(as-tail-context21.1"
" ctx309_1290"
" expr-ctx308_1289))"
" expr-ctx_1255)))"
"(expand5.1"
" #f"
" #f"
" e306_1286"
" temp307_1287)))))))"
"(let-values(((result_1291)"
"(if(post-guard-var_1282)"
"(for-loop_1276"
" rest_1280"
"(+ pos_1278 1))"
" null)))"
"(cons elem_1283 result_1291))))))"
" null))))"
" for-loop_1276)"
" lst_1274"
" start_1275)))))"
"(begin"
"(if(if(= 1 list-start-index_1237)(null?(cdr es_1257)) #f)"
"(let-values()"
"(let-values(((obs_1292)(expand-context-observer ctx_1240)))"
"(if obs_1292"
"(let-values()"
"(let-values()(call-expand-observe obs_1292 'enter-list(cdr es_1257))))"
"(void))))"
"(void))"
"(let-values(((obs_1293)(expand-context-observer ctx_1240)))"
"(if obs_1293"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1293"
" 'exit-list"
"(list-tail exp-es_1259 list-start-index_1237))))"
"(void)))"
"(if(expand-context-to-parsed? ctx_1240)"
"(parsed-begin_1236 rebuild-s_1256 exp-es_1259)"
"(let-values(((rebuild-s310_1294) rebuild-s_1256)"
"((temp311_1295)(cons begin300_1243 exp-es_1259)))"
"(rebuild62.1 #f #f rebuild-s310_1294 temp311_1295))))))))))))))))))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin"
"(let-values(((nonempty-begin_1312)"
"(let-values(((temp312_1314) 'prim-begin0)"
"((parsed-begin313_1315) parsed-begin12.1)"
"((temp314_1316) 0)"
"((temp315_1317) #t))"
"(make-begin20.1 temp315_1317 temp314_1316 temp312_1314 parsed-begin313_1315))))"
"(lambda(s_1318 ctx_1319)"
"(let-values(((context_1320)(expand-context-context ctx_1319)))"
"(if(let-values(((or-part_1321)(eq? context_1320 'top-level)))"
"(if or-part_1321 or-part_1321(eq? context_1320 'module)))"
"(let-values()"
"(let-values(((disarmed-s_1322)(syntax-disarm$1 s_1318)))"
"(let-values(((ok?_1323 begin316_1324)"
"(let-values(((s_1333) disarmed-s_1322))"
"(if(let-values(((s_1334)(if(syntax?$1 s_1333)(syntax-e$1 s_1333) s_1333)))"
"(if(pair? s_1334)"
"(if(let-values(((s_1335)(car s_1334))) #t)"
"(let-values(((s_1336)(cdr s_1334)))"
"(let-values(((s_1337)(if(syntax?$1 s_1336)(syntax-e$1 s_1336) s_1336)))"
"(null? s_1337)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((begin316_1339)"
"(let-values(((s_1340)"
"(if(syntax?$1 s_1333)(syntax-e$1 s_1333) s_1333)))"
"(let-values(((begin317_1341)"
"(let-values(((s_1342)(car s_1340))) s_1342))"
"(()"
"(let-values(((s_1343)(cdr s_1340)))"
"(let-values(((s_1344)"
"(if(syntax?$1 s_1343)"
"(syntax-e$1 s_1343)"
" s_1343)))"
"(values)))))"
"(values begin317_1341)))))"
"(values #t begin316_1339)))"
"(values #f #f)))))"
"(if ok?_1323 s_1318(nonempty-begin_1312 s_1318 ctx_1319)))))"
"(let-values()(nonempty-begin_1312 s_1318 ctx_1319))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin0"
"(let-values(((temp318_1346) 'prim-begin0)"
"((parsed-begin0319_1347) parsed-begin013.1)"
"((temp320_1348) 1)"
"((temp321_1349) #f))"
"(make-begin20.1 temp321_1349 temp320_1348 temp318_1346 parsed-begin0319_1347))))"
" print-values)"
"(define-values"
"(register-eventual-variable!?)"
"(lambda(id_1350 ctx_1351)"
"(if(if(expand-context-need-eventually-defined ctx_1351)(>=(expand-context-phase ctx_1351) 1) #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(expand-context-need-eventually-defined ctx_1351)"
"(expand-context-phase ctx_1351)"
"(lambda(l_1352)(cons id_1350 l_1352))"
" null)"
" #t))"
"(let-values() #f))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%top"
"(let-values(((core326_1353)"
"(lambda(s324_1354 ctx325_1355 implicit-omitted?322_1356 implicit-omitted?323_1357)"
"(let-values(((s_1358) s324_1354))"
"(let-values(((ctx_1359) ctx325_1355))"
"(let-values(((implicit-omitted?_1360)"
"(if implicit-omitted?323_1357 implicit-omitted?322_1356 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1364)(expand-context-observer ctx_1359)))"
"(if obs_1364"
"(let-values()"
"(let-values()(call-expand-observe obs_1364 'prim-#%top)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1361)(syntax-disarm$1 s_1358)))"
"(let-values(((id_1362)"
"(if implicit-omitted?_1360"
"(let-values() s_1358)"
"(let-values()"
"(let-values(((ok?_1365 #%top328_1366 id329_1367)"
"(let-values(((s_1378) disarmed-s_1361))"
"(let-values(((orig-s_1379) s_1378))"
"(let-values(((#%top328_1380 id329_1381)"
"(let-values(((s_1382)"
"(if(syntax?$1 s_1378)"
"(syntax-e$1 s_1378)"
" s_1378)))"
"(if(pair? s_1382)"
"(let-values(((#%top330_1383)"
"(let-values(((s_1385)"
"(car"
" s_1382)))"
" s_1385))"
"((id331_1384)"
"(let-values(((s_1386)"
"(cdr"
" s_1382)))"
"(if(let-values(((or-part_1387)"
"(if(syntax?$1"
" s_1386)"
"(symbol?"
"(syntax-e$1"
" s_1386))"
" #f)))"
"(if or-part_1387"
" or-part_1387"
"(symbol?"
" s_1386)))"
" s_1386"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"not an identifier\""
" orig-s_1379"
" s_1386)))))"
"(values"
" #%top330_1383"
" id331_1384))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1379)))))"
"(values #t #%top328_1380 id329_1381))))))"
" id329_1367)))))"
"(let-values(((b_1363)"
"(let-values(((id332_1389) id_1362)"
"((temp333_1390)(expand-context-phase ctx_1359))"
"((temp334_1391) 'ambiguous))"
"(resolve+shift30.1"
" temp334_1391"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id332_1389"
" temp333_1390))))"
"(if(eq? b_1363 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1362 ctx_1359))"
"(if(if b_1363"
"(if(module-binding? b_1363)"
"(eq?"
"(module-binding-module b_1363)"
"(namespace-mpi(expand-context-namespace ctx_1359)))"
" #f)"
" #f)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1359)"
"(parsed-id2.1 id_1362 b_1363 #f)"
"(if(top-level-module-path-index?(module-binding-module b_1363))"
"(let-values() s_1358)"
"(let-values() id_1362))))"
"(if(register-eventual-variable!? id_1362 ctx_1359)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1359)"
"(parsed-id2.1 id_1362 b_1363 #f)"
" id_1362))"
"(let-values()"
"(if(not(expand-context-allow-unbound? ctx_1359))"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" id_1362"
" #f"
" null"
"(syntax-debug-info-string id_1362 ctx_1359)))"
"(let-values()"
"(let-values(((tl-id_1392)"
"(add-scope"
" id_1362"
"(root-expand-context-top-level-bind-scope ctx_1359))))"
"(let-values(((tl-b_1393)"
"(let-values(((tl-id335_1394) tl-id_1392)"
"((temp336_1395)"
"(expand-context-phase ctx_1359)))"
"(resolve29.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" tl-id335_1394"
" temp336_1395))))"
"(if tl-b_1393"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1359)"
"(parsed-top-id4.1 tl-id_1392 tl-b_1393 #f)"
"(if implicit-omitted?_1360"
"(let-values() id_1362)"
"(let-values()"
"(let-values(((ok?_1396 #%top337_1397 id338_1398)"
"(let-values(((s_1409) disarmed-s_1361))"
"(let-values(((orig-s_1410) s_1409))"
"(let-values(((#%top337_1411"
" id338_1412)"
"(let-values(((s_1413)"
"(if(syntax?$1"
" s_1409)"
"(syntax-e$1"
" s_1409)"
" s_1409)))"
"(if(pair? s_1413)"
"(let-values(((#%top339_1414)"
"(let-values(((s_1416)"
"(car"
" s_1413)))"
" s_1416))"
"((id340_1415)"
"(let-values(((s_1417)"
"(cdr"
" s_1413)))"
"(if(let-values(((or-part_1418)"
"(if(syntax?$1"
" s_1417)"
"(symbol?"
"(syntax-e$1"
" s_1417))"
" #f)))"
"(if or-part_1418"
" or-part_1418"
"(symbol?"
" s_1417)))"
" s_1417"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"not an identifier\""
" orig-s_1410"
" s_1417)))))"
"(values"
" #%top339_1414"
" id340_1415))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1410)))))"
"(values"
" #t"
" #%top337_1411"
" id338_1412))))))"
"(let-values(((s341_1419) s_1358)"
"((temp342_1420)"
"(cons #%top337_1397 id_1362)))"
"(rebuild62.1 #f #f s341_1419 temp342_1420)))))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1359)"
"(parsed-top-id4.1 id_1362 b_1363 #f)"
" s_1358))))))))))))))))))))))"
"(case-lambda"
"((s_1421 ctx_1422)(core326_1353 s_1421 ctx_1422 #f #f))"
"((s_1423 ctx_1424 implicit-omitted?322_1425)(core326_1353 s_1423 ctx_1424 implicit-omitted?322_1425 #t))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'set!"
"(lambda(s_1426 ctx_1427)"
"(let-values((()"
"(begin"
"(let-values(((obs_1446)(expand-context-observer ctx_1427)))"
"(if obs_1446(let-values()(let-values()(call-expand-observe obs_1446 'prim-set!)))(void)))"
"(values))))"
"(let-values(((disarmed-s_1428)(syntax-disarm$1 s_1426)))"
"(let-values(((ok?_1429 set!343_1430 id344_1431 rhs345_1432)"
"(let-values(((s_1447) disarmed-s_1428))"
"(let-values(((orig-s_1448) s_1447))"
"(let-values(((set!343_1449 id344_1450 rhs345_1451)"
"(let-values(((s_1452)(if(syntax?$1 s_1447)(syntax-e$1 s_1447) s_1447)))"
"(if(pair? s_1452)"
"(let-values(((set!346_1453)"
"(let-values(((s_1456)(car s_1452))) s_1456))"
"((id347_1454 rhs348_1455)"
"(let-values(((s_1457)(cdr s_1452)))"
"(let-values(((s_1458)"
"(if(syntax?$1 s_1457)"
"(syntax-e$1 s_1457)"
" s_1457)))"
"(if(pair? s_1458)"
"(let-values(((id349_1459)"
"(let-values(((s_1461)(car s_1458)))"
"(if(let-values(((or-part_1462)"
"(if(syntax?$1"
" s_1461)"
"(symbol?"
"(syntax-e$1"
" s_1461))"
" #f)))"
"(if or-part_1462"
" or-part_1462"
"(symbol? s_1461)))"
" s_1461"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"not an identifier\""
" orig-s_1448"
" s_1461))))"
"((rhs350_1460)"
"(let-values(((s_1463)(cdr s_1458)))"
"(let-values(((s_1464)"
"(if(syntax?$1 s_1463)"
"(syntax-e$1 s_1463)"
" s_1463)))"
"(if(pair? s_1464)"
"(let-values(((rhs351_1465)"
"(let-values(((s_1466)"
"(car"
" s_1464)))"
" s_1466))"
"(()"
"(let-values(((s_1467)"
"(cdr"
" s_1464)))"
"(let-values(((s_1468)"
"(if(syntax?$1"
" s_1467)"
"(syntax-e$1"
" s_1467)"
" s_1467)))"
"(if(null?"
" s_1468)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_1448))))))"
"(values rhs351_1465))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1448))))))"
"(values id349_1459 rhs350_1460))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1448))))))"
"(values set!346_1453 id347_1454 rhs348_1455))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1448)))))"
"(values #t set!343_1449 id344_1450 rhs345_1451))))))"
"(let-values(((id_1445) id344_1431))"
"((letrec-values(((rename-loop_1469)"
"(lambda(id_1470 from-rename?_1471)"
"(let-values(((binding_1472)"
"(let-values(((id352_1477) id_1470)"
"((temp353_1478)(expand-context-phase ctx_1427))"
"((temp354_1479) 'ambiguous)"
"((temp355_1480) #t))"
"(resolve+shift30.1"
" temp354_1479"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp355_1480"
" #t"
" #f"
" #f"
" id352_1477"
" temp353_1478))))"
"(let-values((()"
"(begin"
"(if(eq? binding_1472 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1470 ctx_1427))"
"(void))"
"(values))))"
"(let-values(((t_1473 primitive?_1474 insp_1475)"
"(if binding_1472"
"(let-values(((binding356_1481) binding_1472)"
"((ctx357_1482) ctx_1427)"
"((s358_1483) s_1426))"
"(lookup15.1 #f #f #f #f binding356_1481 ctx357_1482 s358_1483))"
"(values #f #f #f))))"
"(begin"
"(let-values(((obs_1484)(expand-context-observer ctx_1427)))"
"(if obs_1484"
"(let-values()"
"(let-values()(call-expand-observe obs_1484 'resolve id_1470)))"
"(void)))"
"(if(let-values(((or-part_1485)(variable? t_1473)))"
"(if or-part_1485"
" or-part_1485"
"(if(not binding_1472)"
"(let-values(((or-part_1486)"
"(register-eventual-variable!? id_1470 ctx_1427)))"
"(if or-part_1486"
" or-part_1486"
"(expand-context-allow-unbound? ctx_1427)))"
" #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(module-binding? binding_1472)"
"(not"
"(eq?"
"(module-binding-module binding_1472)"
"(namespace-mpi"
"(expand-context-namespace ctx_1427))))"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                    \"cannot mutate module-required identifier\""
" s_1426"
" id_1470))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1489)"
"(expand-context-observer ctx_1427)))"
"(if obs_1489"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1489 'next)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(register-variable-referenced-if-local! binding_1472)"
"(values))))"
"(let-values(((rebuild-s_1487)"
"(let-values(((ctx359_1490) ctx_1427)"
"((s360_1491) s_1426))"
"(keep-as-needed55.1 #f #f ctx359_1490 s360_1491))))"
"(let-values(((exp-rhs_1488)"
"(let-values(((temp361_1492) rhs345_1432)"
"((temp362_1493)"
"(as-expression-context ctx_1427)))"
"(expand5.1 #f #f temp361_1492 temp362_1493))))"
"(if(expand-context-to-parsed? ctx_1427)"
"(parsed-set!9.1"
" rebuild-s_1487"
"(parsed-id2.1 id_1470 binding_1472 #f)"
" exp-rhs_1488)"
"(let-values(((rebuild-s363_1494) rebuild-s_1487)"
"((temp364_1495)"
"(list"
" set!343_1430"
"(let-values(((id365_1497) id_1470)"
"((t366_1498) t_1473)"
"((temp367_1499)"
"(free-id-set-empty-or-just-module*?"
"(expand-context-stops"
" ctx_1427))))"
"(substitute-variable6.1"
" temp367_1499"
" id365_1497"
" t366_1498))"
" exp-rhs_1488)))"
"(rebuild62.1 #f #f rebuild-s363_1494 temp364_1495)))))))))"
"(if(not binding_1472)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" s_1426"
" id_1470"
" null"
"(syntax-debug-info-string id_1470 ctx_1427)))"
"(if(1/set!-transformer? t_1473)"
"(let-values()"
"(if(not-in-this-expand-context? t_1473 ctx_1427)"
"(let-values()"
"(let-values(((temp368_1500)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1426"
" disarmed-s_1428"
" set!343_1430"
" rhs345_1432"
" id_1470"
" from-rename?_1471"
" ctx_1427)"
" t_1473"
" ctx_1427))"
"((ctx369_1501) ctx_1427))"
"(expand5.1 #f #f temp368_1500 ctx369_1501)))"
"(let-values()"
"(let-values(((exp-s_1502 re-ctx_1503)"
"(apply-transformer"
" t_1473"
" insp_1475"
" s_1426"
" id_1470"
" ctx_1427"
" binding_1472)))"
"(if(expand-context-just-once? ctx_1427)"
"(let-values() exp-s_1502)"
"(let-values()"
"(let-values(((exp-s370_1504) exp-s_1502)"
"((re-ctx371_1505) re-ctx_1503))"
"(expand5.1 #f #f exp-s370_1504 re-ctx371_1505))))))))"
"(if(1/rename-transformer? t_1473)"
"(let-values()"
"(if(not-in-this-expand-context? t_1473 ctx_1427)"
"(let-values()"
"(let-values(((temp372_1506)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1426"
" disarmed-s_1428"
" set!343_1430"
" rhs345_1432"
" id_1470"
" from-rename?_1471"
" ctx_1427"
" t_1473)"
" t_1473"
" ctx_1427))"
"((ctx373_1507) ctx_1427))"
"(expand5.1 #f #f temp372_1506 ctx373_1507)))"
"(let-values()"
"(rename-loop_1469"
"(rename-transformer-target-in-context t_1473 ctx_1427)"
" #t))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate syntax identifier\""
" s_1426"
" id_1470)))))))))))))"
" rename-loop_1469)"
" id_1445"
" #f))))))))"
" print-values)"
"(define-values"
"(substitute-set!-rename)"
"(let-values(((substitute-set!-rename32_1508)"
"(lambda(s25_1509"
" disarmed-s26_1510"
" set!-id27_1511"
" id28_1512"
" rhs-s29_1513"
" from-rename?30_1514"
" ctx31_1515"
" t23_1516"
" t24_1517)"
"(let-values(((s_1518) s25_1509))"
"(let-values(((disarmed-s_1519) disarmed-s26_1510))"
"(let-values(((set!-id_1520) set!-id27_1511))"
"(let-values(((id_1521) id28_1512))"
"(let-values(((rhs-s_1522) rhs-s29_1513))"
"(let-values(((from-rename?_1523) from-rename?30_1514))"
"(let-values(((ctx_1524) ctx31_1515))"
"(let-values(((t_1525)(if t24_1517 t23_1516 #f)))"
"(let-values()"
"(if(let-values(((or-part_1526) t_1525))"
"(if or-part_1526 or-part_1526 from-rename?_1523))"
"(let-values()"
"(let-values(((new-id_1527)"
"(if t_1525"
"(rename-transformer-target-in-context t_1525 ctx_1524)"
" id_1521)))"
"(syntax-rearm$1"
"(datum->syntax$1"
" disarmed-s_1519"
"(list set!-id_1520 new-id_1527 rhs-s_1522)"
" disarmed-s_1519"
" disarmed-s_1519)"
" s_1518)))"
"(let-values() s_1518))))))))))))))"
"(case-lambda"
"((s_1528 disarmed-s_1529 set!-id_1530 id_1531 rhs-s_1532 from-rename?_1533 ctx_1534)"
"(substitute-set!-rename32_1508"
" s_1528"
" disarmed-s_1529"
" set!-id_1530"
" id_1531"
" rhs-s_1532"
" from-rename?_1533"
" ctx_1534"
" #f"
" #f))"
"((s_1535 disarmed-s_1536 set!-id_1537 id_1538 rhs-s_1539 from-rename?_1540 ctx_1541 t23_1542)"
"(substitute-set!-rename32_1508"
" s_1535"
" disarmed-s_1536"
" set!-id_1537"
" id_1538"
" rhs-s_1539"
" from-rename?_1540"
" ctx_1541"
" t23_1542"
" #t)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%variable-reference"
"(lambda(s_1543 ctx_1544)"
"(let-values((()"
"(begin"
"(let-values(((obs_1585)(expand-context-observer ctx_1544)))"
"(if obs_1585"
"(let-values()(let-values()(call-expand-observe obs_1585 'prim-#%variable-reference)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1545)(syntax-disarm$1 s_1543)))"
"(let-values(((ok?_1546 #%variable-reference374_1547 id375_1548)"
"(let-values(((s_1586) disarmed-s_1545))"
"(if(let-values(((s_1587)(if(syntax?$1 s_1586)(syntax-e$1 s_1586) s_1586)))"
"(if(pair? s_1587)"
"(if(let-values(((s_1588)(car s_1587))) #t)"
"(let-values(((s_1589)(cdr s_1587)))"
"(let-values(((s_1590)(if(syntax?$1 s_1589)(syntax-e$1 s_1589) s_1589)))"
"(if(pair? s_1590)"
"(if(let-values(((s_1591)(car s_1590)))"
"(if(syntax?$1 s_1591)(symbol?(syntax-e$1 s_1591)) #f))"
"(let-values(((s_1592)(cdr s_1590)))"
"(let-values(((s_1593)"
"(if(syntax?$1 s_1592)(syntax-e$1 s_1592) s_1592)))"
"(null? s_1593)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((#%variable-reference374_1595 id375_1596)"
"(let-values(((s_1597)(if(syntax?$1 s_1586)(syntax-e$1 s_1586) s_1586)))"
"(let-values(((#%variable-reference376_1598)"
"(let-values(((s_1600)(car s_1597))) s_1600))"
"((id377_1599)"
"(let-values(((s_1601)(cdr s_1597)))"
"(let-values(((s_1602)"
"(if(syntax?$1 s_1601)"
"(syntax-e$1 s_1601)"
" s_1601)))"
"(let-values(((id378_1603)"
"(let-values(((s_1604)(car s_1602)))"
" s_1604))"
"(()"
"(let-values(((s_1605)(cdr s_1602)))"
"(let-values(((s_1606)"
"(if(syntax?$1 s_1605)"
"(syntax-e$1 s_1605)"
" s_1605)))"
"(values)))))"
"(values id378_1603))))))"
"(values #%variable-reference376_1598 id377_1599)))))"
"(values #t #%variable-reference374_1595 id375_1596)))"
"(values #f #f #f)))))"
"(let-values(((ok?_1559 #%variable-reference379_1560 #%top380_1561 id381_1562)"
"(let-values(((s_1607) disarmed-s_1545))"
"(if(if(not ok?_1546)"
"(let-values(((s_1608)(if(syntax?$1 s_1607)(syntax-e$1 s_1607) s_1607)))"
"(if(pair? s_1608)"
"(if(let-values(((s_1609)(car s_1608))) #t)"
"(let-values(((s_1610)(cdr s_1608)))"
"(let-values(((s_1611)(if(syntax?$1 s_1610)(syntax-e$1 s_1610) s_1610)))"
"(if(pair? s_1611)"
"(if(let-values(((s_1612)(car s_1611)))"
"(let-values(((s_1613)"
"(if(syntax?$1 s_1612)(syntax-e$1 s_1612) s_1612)))"
"(if(pair? s_1613)"
"(if(let-values(((s_1614)(car s_1613))) #t)"
"(let-values(((s_1615)(cdr s_1613)))"
"(if(syntax?$1 s_1615)(symbol?(syntax-e$1 s_1615)) #f))"
" #f)"
" #f)))"
"(let-values(((s_1616)(cdr s_1611)))"
"(let-values(((s_1617)"
"(if(syntax?$1 s_1616)(syntax-e$1 s_1616) s_1616)))"
"(null? s_1617)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values()"
"(let-values(((#%variable-reference379_1619 #%top380_1620 id381_1621)"
"(let-values(((s_1622)"
"(if(syntax?$1 s_1607)(syntax-e$1 s_1607) s_1607)))"
"(let-values(((#%variable-reference382_1623)"
"(let-values(((s_1626)(car s_1622))) s_1626))"
"((#%top383_1624 id384_1625)"
"(let-values(((s_1627)(cdr s_1622)))"
"(let-values(((s_1628)"
"(if(syntax?$1 s_1627)"
"(syntax-e$1 s_1627)"
" s_1627)))"
"(let-values(((#%top385_1629 id386_1630)"
"(let-values(((s_1631)(car s_1628)))"
"(let-values(((s_1632)"
"(if(syntax?$1 s_1631)"
"(syntax-e$1 s_1631)"
" s_1631)))"
"(let-values(((#%top387_1633)"
"(let-values(((s_1635)"
"(car"
" s_1632)))"
" s_1635))"
"((id388_1634)"
"(let-values(((s_1636)"
"(cdr"
" s_1632)))"
" s_1636)))"
"(values"
" #%top387_1633"
" id388_1634)))))"
"(()"
"(let-values(((s_1637)(cdr s_1628)))"
"(let-values(((s_1638)"
"(if(syntax?$1 s_1637)"
"(syntax-e$1 s_1637)"
" s_1637)))"
"(values)))))"
"(values #%top385_1629 id386_1630))))))"
"(values #%variable-reference382_1623 #%top383_1624 id384_1625)))))"
"(values #t #%variable-reference379_1619 #%top380_1620 id381_1621)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_1575 #%variable-reference389_1576)"
"(let-values(((s_1639) disarmed-s_1545))"
"(if(if(not"
"(let-values(((or-part_1640) ok?_1546))"
"(if or-part_1640 or-part_1640 ok?_1559)))"
" #t"
" #f)"
"(let-values(((orig-s_1641) s_1639))"
"(let-values(((#%variable-reference389_1642)"
"(let-values(((s_1643)"
"(if(syntax?$1 s_1639)(syntax-e$1 s_1639) s_1639)))"
"(if(pair? s_1643)"
"(let-values(((#%variable-reference390_1644)"
"(let-values(((s_1645)(car s_1643))) s_1645))"
"(()"
"(let-values(((s_1646)(cdr s_1643)))"
"(let-values(((s_1647)"
"(if(syntax?$1 s_1646)"
"(syntax-e$1 s_1646)"
" s_1646)))"
"(if(null? s_1647)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_1641))))))"
"(values #%variable-reference390_1644))"
"                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_1641)))))"
"(values #t #%variable-reference389_1642)))"
"(values #f #f)))))"
"(if(let-values(((or-part_1648) ok?_1546))(if or-part_1648 or-part_1648 ok?_1559))"
"(let-values()"
"(let-values(((var-id_1649)(if ok?_1546 id375_1548 id381_1562)))"
"(let-values(((binding_1650)"
"(let-values(((var-id391_1652) var-id_1649)"
"((temp392_1653)(expand-context-phase ctx_1544))"
"((temp393_1654) 'ambiguous))"
"(resolve+shift30.1"
" temp393_1654"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" var-id391_1652"
" temp392_1653))))"
"(begin"
"(if(eq? binding_1650 'ambiguous)"
"(let-values()(raise-ambiguous-error var-id_1649 ctx_1544))"
"(void))"
"(if binding_1650"
"(void)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                \"unbound identifier\""
" s_1543"
" var-id_1649"
" null"
"(syntax-debug-info-string var-id_1649 ctx_1544))))"
"(if(expand-context-to-parsed? ctx_1544)"
"(parsed-#%variable-reference11.1"
"(keep-properties-only s_1543)"
"(if ok?_1559"
"(parsed-top-id4.1 var-id_1649 binding_1650 #f)"
"(parsed-id2.1 var-id_1649 binding_1650 #f)))"
" s_1543)))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1544)"
"(parsed-#%variable-reference11.1(keep-properties-only s_1543) #f)"
" s_1543)))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%expression"
"(lambda(s_1655 ctx_1656)"
"(let-values((()"
"(begin"
"(let-values(((obs_1673)(expand-context-observer ctx_1656)))"
"(if obs_1673"
"(let-values()(let-values()(call-expand-observe obs_1673 'prim-#%expression)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1657)(syntax-disarm$1 s_1655)))"
"(let-values(((ok?_1658 #%expression394_1659 e395_1660)"
"(let-values(((s_1674) disarmed-s_1657))"
"(let-values(((orig-s_1675) s_1674))"
"(let-values(((#%expression394_1676 e395_1677)"
"(let-values(((s_1678)(if(syntax?$1 s_1674)(syntax-e$1 s_1674) s_1674)))"
"(if(pair? s_1678)"
"(let-values(((#%expression396_1679)"
"(let-values(((s_1681)(car s_1678))) s_1681))"
"((e397_1680)"
"(let-values(((s_1682)(cdr s_1678)))"
"(let-values(((s_1683)"
"(if(syntax?$1 s_1682)"
"(syntax-e$1 s_1682)"
" s_1682)))"
"(if(pair? s_1683)"
"(let-values(((e398_1684)"
"(let-values(((s_1685)(car s_1683)))"
" s_1685))"
"(()"
"(let-values(((s_1686)(cdr s_1683)))"
"(let-values(((s_1687)"
"(if(syntax?$1 s_1686)"
"(syntax-e$1 s_1686)"
" s_1686)))"
"(if(null? s_1687)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1675))))))"
"(values e398_1684))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_1675))))))"
"(values #%expression396_1679 e397_1680))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1675)))))"
"(values #t #%expression394_1676 e395_1677))))))"
"(let-values(((rebuild-s_1671)"
"(let-values(((ctx399_1689) ctx_1656)((s400_1690) s_1655)((temp401_1691) #t))"
"(keep-as-needed55.1 temp401_1691 #t ctx399_1689 s400_1690))))"
"(let-values(((exp-e_1672)"
"(let-values(((temp402_1692) e395_1660)"
"((temp403_1693)"
"(let-values(((temp404_1695)(as-expression-context ctx_1656))"
"((ctx405_1696) ctx_1656))"
"(as-tail-context21.1 ctx405_1696 temp404_1695))))"
"(expand5.1 #f #f temp402_1692 temp403_1693))))"
"(if(expand-context-to-parsed? ctx_1656)"
" exp-e_1672"
"(let-values(((tmp_1697)"
"(if(not(expand-context-in-local-expand? ctx_1656))"
"(expand-context-context ctx_1656)"
" #f)))"
"(if(equal? tmp_1697 'expression)"
"(let-values()"
"(let-values(((result-s_1698)(syntax-track-origin$1 exp-e_1672 rebuild-s_1671)))"
"(begin"
"(let-values(((obs_1699)(expand-context-observer ctx_1656)))"
"(if obs_1699"
"(let-values()(let-values()(call-expand-observe obs_1699 'tag result-s_1698)))"
"(void)))"
" result-s_1698)))"
"(let-values()"
"(let-values(((rebuild-s406_1700) rebuild-s_1671)"
"((temp407_1701)(list #%expression394_1659 exp-e_1672)))"
"(rebuild62.1 #f #f rebuild-s406_1700 temp407_1701))))))))))))))"
" print-values)"
"(call-with-values"
"  (lambda () (add-core-form! 'unquote (lambda (s_1702 ctx_1703) (raise-syntax-error$1 #f \"not in quasiquote\" s_1702))))"
" print-values)"
"(call-with-values"
"(lambda()"
"    (add-core-form! 'unquote-splicing (lambda (s_1704 ctx_1705) (raise-syntax-error$1 #f \"not in quasiquote\" s_1704))))"
" print-values)"
"(void)"
"(void)"
"(define-values"
"(binding-for-transformer?)"
"(lambda(b_1 id_2 at-phase_3 ns_4)"
"(if(not at-phase_3)"
"(let-values()"
"(let-values(((m_5)(namespace->module ns_4(1/module-path-index-resolve(module-binding-nominal-module b_1)))))"
"(let-values(((b/p_6)"
"(hash-ref"
"(hash-ref(module-provides m_5)(module-binding-nominal-phase b_1) '#hasheq())"
"(module-binding-nominal-sym b_1)"
" #f)))"
"(provided-as-transformer? b/p_6))))"
"(let-values()"
"(let-values(((val_7 primitive?_8 insp_9)"
"(let-values(((b1_10) b_1)"
"((empty-env2_11) empty-env)"
"((null3_12) null)"
"((ns4_13) ns_4)"
"((at-phase5_14) at-phase_3)"
"((id6_15) id_2))"
"(binding-lookup48.1 #f #f #f #f b1_10 empty-env2_11 null3_12 ns4_13 at-phase5_14 id6_15))))"
"(not(variable? val_7)))))))"
"(void)"
"(void)"
"(define-values(layers) '(raw phaseless id))"
"(define-values(provide-form-name) 'provide)"
"(define-values"
"(parse-and-expand-provides!)"
"(lambda(specs_1 orig-s_2 rp_3 self_4 phase_5 ctx_6)"
"(let-values(((ns_7)(expand-context-namespace ctx_6)))"
"((letrec-values(((loop_8)"
"(lambda(specs_9 at-phase_10 protected?_11 layer_12)"
"(let-values(((track-stxess_13 exp-specss_14)"
"(let-values(((track-stxes_15 exp-specs_16)"
"(let-values(((lst_17) specs_9))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(track-stxes_19 exp-specs_20 lst_21)"
"(if(pair? lst_21)"
"(let-values(((spec_22)"
"(unsafe-car lst_21))"
"((rest_23)"
"(unsafe-cdr lst_21)))"
"(let-values(((track-stxes_24"
" exp-specs_25)"
"(let-values(((track-stxes_26)"
" track-stxes_19)"
"((exp-specs_27)"
" exp-specs_20))"
"(let-values(((track-stxes_28"
" exp-specs_29)"
"(let-values()"
"(let-values(((track-stxes1_30"
" exp-specs2_31)"
"(let-values()"
"(let-values(((disarmed-spec_32)"
"(syntax-disarm$1"
" spec_22)))"
"(let-values(((fm_33)"
"(if(pair?"
"(syntax-e$1"
" disarmed-spec_32))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" disarmed-spec_32)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" disarmed-spec_32)))"
" #f)"
" #f)))"
"(let-values(((check-nested_34)"
"(lambda(want-layer_35)"
"(if(member"
" want-layer_35"
"(member"
" layer_12"
" layers))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"                                                                                                                                                            \"nested `~a' not allowed\""
" fm_33)"
" orig-s_2"
" spec_22))))))"
"(let-values(((tmp_36)"
" fm_33))"
"(let-values(((index_37)"
"(if(symbol?"
" tmp_36)"
"(hash-ref"
" '#hasheq((rename ."
" 5)"
"(all-from-except"
" ."
" 8)"
"(for-meta"
" ."
" 1)"
"(all-defined-except"
" ."
" 10)"
"(for-syntax"
" ."
" 2)"
"(all-from"
" ."
" 7)"
"(prefix-all-defined"
" ."
" 11)"
"(protect"
" ."
" 4)"
"(prefix-all-defined-except"
" ."
" 12)"
"(struct"
" ."
" 6)"
"(all-defined"
" ."
" 9)"
"(expand"
" ."
" 13)"
"(for-label"
" ."
" 3))"
" tmp_36"
"(lambda()"
" 0))"
" 0)))"
"(if(unsafe-fx<"
" index_37"
" 6)"
"(if(unsafe-fx<"
" index_37"
" 2)"
"(if(unsafe-fx<"
" index_37"
" 1)"
"(let-values()"
"(if(identifier?"
" spec_22)"
"(let-values()"
"(begin"
"(parse-identifier!"
" spec_22"
" orig-s_2"
"(syntax-e$1"
" spec_22)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                         \"bad syntax\""
" orig-s_2"
" spec_22))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'raw)"
"(values))))"
"(let-values(((ok?_38"
" for-meta3_39"
" phase-level4_40"
" spec5_41)"
"(let-values(((s_57)"
" disarmed-spec_32))"
"(let-values(((orig-s_58)"
" s_57))"
"(let-values(((for-meta3_59"
" phase-level4_60"
" spec5_61)"
"(let-values(((s_62)"
"(if(syntax?$1"
" s_57)"
"(syntax-e$1"
" s_57)"
" s_57)))"
"(if(pair?"
" s_62)"
"(let-values(((for-meta6_63)"
"(let-values(((s_66)"
"(car"
" s_62)))"
" s_66))"
"((phase-level7_64"
" spec8_65)"
"(let-values(((s_67)"
"(cdr"
" s_62)))"
"(let-values(((s_68)"
"(if(syntax?$1"
" s_67)"
"(syntax-e$1"
" s_67)"
" s_67)))"
"(if(pair?"
" s_68)"
"(let-values(((phase-level9_69)"
"(let-values(((s_71)"
"(car"
" s_68)))"
" s_71))"
"((spec10_70)"
"(let-values(((s_72)"
"(cdr"
" s_68)))"
"(let-values(((s_73)"
"(if(syntax?$1"
" s_72)"
"(syntax-e$1"
" s_72)"
" s_72)))"
"(let-values(((flat-s_74)"
"(to-syntax-list.1"
" s_73)))"
"(if(not"
" flat-s_74)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_58))"
"(let-values()"
" flat-s_74)))))))"
"(values"
" phase-level9_69"
" spec10_70))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_58))))))"
"(values"
" for-meta6_63"
" phase-level7_64"
" spec8_65))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_58)))))"
"(values"
" #t"
" for-meta3_59"
" phase-level4_60"
" spec5_61))))))"
"(let-values(((p_54)"
"(syntax-e$1"
" phase-level4_40)))"
"(let-values((()"
"(begin"
"(if(phase?"
" p_54)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                               \"bad `for-meta' phase\""
" orig-s_2"
" spec_22)))"
"(values))))"
"(let-values(((track-stxes_55"
" exp-specs_56)"
"(loop_8"
" spec5_41"
"(phase+"
" p_54"
" at-phase_10)"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_55"
"(let-values(((spec11_75)"
" spec_22)"
"((temp12_76)"
"(list*"
" for-meta3_39"
" phase-level4_40"
" exp-specs_56)))"
"(rebuild62.1"
" #f"
" #f"
" spec11_75"
" temp12_76))))))))))))"
"(if(unsafe-fx<"
" index_37"
" 3)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'raw)"
"(values))))"
"(let-values(((ok?_77"
" for-syntax13_78"
" spec14_79)"
"(let-values(((s_92)"
" disarmed-spec_32))"
"(let-values(((orig-s_93)"
" s_92))"
"(let-values(((for-syntax13_94"
" spec14_95)"
"(let-values(((s_96)"
"(if(syntax?$1"
" s_92)"
"(syntax-e$1"
" s_92)"
" s_92)))"
"(if(pair?"
" s_96)"
"(let-values(((for-syntax15_97)"
"(let-values(((s_99)"
"(car"
" s_96)))"
" s_99))"
"((spec16_98)"
"(let-values(((s_100)"
"(cdr"
" s_96)))"
"(let-values(((s_101)"
"(if(syntax?$1"
" s_100)"
"(syntax-e$1"
" s_100)"
" s_100)))"
"(let-values(((flat-s_102)"
"(to-syntax-list.1"
" s_101)))"
"(if(not"
" flat-s_102)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_93))"
"(let-values()"
" flat-s_102)))))))"
"(values"
" for-syntax15_97"
" spec16_98))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_93)))))"
"(values"
" #t"
" for-syntax13_94"
" spec14_95))))))"
"(let-values(((track-stxes_90"
" exp-specs_91)"
"(loop_8"
" spec14_79"
"(phase+"
" 1"
" at-phase_10)"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_90"
"(let-values(((spec17_103)"
" spec_22)"
"((temp18_104)"
"(list*"
" for-syntax13_78"
" exp-specs_91)))"
"(rebuild62.1"
" #f"
" #f"
" spec17_103"
" temp18_104)))))))))"
"(if(unsafe-fx<"
" index_37"
" 4)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'raw)"
"(values))))"
"(let-values(((ok?_105"
" for-label19_106"
" spec20_107)"
"(let-values(((s_120)"
" disarmed-spec_32))"
"(let-values(((orig-s_121)"
" s_120))"
"(let-values(((for-label19_122"
" spec20_123)"
"(let-values(((s_124)"
"(if(syntax?$1"
" s_120)"
"(syntax-e$1"
" s_120)"
" s_120)))"
"(if(pair?"
" s_124)"
"(let-values(((for-label21_125)"
"(let-values(((s_127)"
"(car"
" s_124)))"
" s_127))"
"((spec22_126)"
"(let-values(((s_128)"
"(cdr"
" s_124)))"
"(let-values(((s_129)"
"(if(syntax?$1"
" s_128)"
"(syntax-e$1"
" s_128)"
" s_128)))"
"(let-values(((flat-s_130)"
"(to-syntax-list.1"
" s_129)))"
"(if(not"
" flat-s_130)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_121))"
"(let-values()"
" flat-s_130)))))))"
"(values"
" for-label21_125"
" spec22_126))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_121)))))"
"(values"
" #t"
" for-label19_122"
" spec20_123))))))"
"(let-values(((track-stxes_118"
" exp-specs_119)"
"(loop_8"
" spec20_107"
" #f"
" protected?_11"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_118"
"(let-values(((spec23_131)"
" spec_22)"
"((temp24_132)"
"(list*"
" for-label19_106"
" exp-specs_119)))"
"(rebuild62.1"
" #f"
" #f"
" spec23_131"
" temp24_132)))))))))"
"(if(unsafe-fx<"
" index_37"
" 5)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values((()"
"(begin"
"(if protected?_11"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                               \"nested `protect' not allowed\""
" orig-s_2"
" spec_22))"
"(void))"
"(values))))"
"(let-values(((ok?_133"
" protect25_134"
" p-spec26_135)"
"(let-values(((s_148)"
" disarmed-spec_32))"
"(let-values(((orig-s_149)"
" s_148))"
"(let-values(((protect25_150"
" p-spec26_151)"
"(let-values(((s_152)"
"(if(syntax?$1"
" s_148)"
"(syntax-e$1"
" s_148)"
" s_148)))"
"(if(pair?"
" s_152)"
"(let-values(((protect27_153)"
"(let-values(((s_155)"
"(car"
" s_152)))"
" s_155))"
"((p-spec28_154)"
"(let-values(((s_156)"
"(cdr"
" s_152)))"
"(let-values(((s_157)"
"(if(syntax?$1"
" s_156)"
"(syntax-e$1"
" s_156)"
" s_156)))"
"(let-values(((flat-s_158)"
"(to-syntax-list.1"
" s_157)))"
"(if(not"
" flat-s_158)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_149))"
"(let-values()"
" flat-s_158)))))))"
"(values"
" protect27_153"
" p-spec28_154))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_149)))))"
"(values"
" #t"
" protect25_150"
" p-spec26_151))))))"
"(let-values(((track-stxes_146"
" exp-specs_147)"
"(loop_8"
" p-spec26_135"
" at-phase_10"
" #t"
" layer_12)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_146"
"(let-values(((spec29_159)"
" spec_22)"
"((temp30_160)"
"(list*"
" protect25_134"
" exp-specs_147)))"
"(rebuild62.1"
" #f"
" #f"
" spec29_159"
" temp30_160))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_161"
" rename31_162"
" id:from32_163"
" id:to33_164)"
"(let-values(((s_177)"
" disarmed-spec_32))"
"(let-values(((orig-s_178)"
" s_177))"
"(let-values(((rename31_179"
" id:from32_180"
" id:to33_181)"
"(let-values(((s_182)"
"(if(syntax?$1"
" s_177)"
"(syntax-e$1"
" s_177)"
" s_177)))"
"(if(pair?"
" s_182)"
"(let-values(((rename34_183)"
"(let-values(((s_186)"
"(car"
" s_182)))"
" s_186))"
"((id:from35_184"
" id:to36_185)"
"(let-values(((s_187)"
"(cdr"
" s_182)))"
"(let-values(((s_188)"
"(if(syntax?$1"
" s_187)"
"(syntax-e$1"
" s_187)"
" s_187)))"
"(if(pair?"
" s_188)"
"(let-values(((id:from37_189)"
"(let-values(((s_191)"
"(car"
" s_188)))"
"(if(let-values(((or-part_192)"
"(if(syntax?$1"
" s_191)"
"(symbol?"
"(syntax-e$1"
" s_191))"
" #f)))"
"(if or-part_192"
" or-part_192"
"(symbol?"
" s_191)))"
" s_191"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_178"
" s_191))))"
"((id:to38_190)"
"(let-values(((s_193)"
"(cdr"
" s_188)))"
"(let-values(((s_194)"
"(if(syntax?$1"
" s_193)"
"(syntax-e$1"
" s_193)"
" s_193)))"
"(if(pair?"
" s_194)"
"(let-values(((id:to39_195)"
"(let-values(((s_196)"
"(car"
" s_194)))"
"(if(let-values(((or-part_197)"
"(if(syntax?$1"
" s_196)"
"(symbol?"
"(syntax-e$1"
" s_196))"
" #f)))"
"(if or-part_197"
" or-part_197"
"(symbol?"
" s_196)))"
" s_196"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_178"
" s_196))))"
"(()"
"(let-values(((s_198)"
"(cdr"
" s_194)))"
"(let-values(((s_199)"
"(if(syntax?$1"
" s_198)"
"(syntax-e$1"
" s_198)"
" s_198)))"
"(if(null?"
" s_199)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_178))))))"
"(values"
" id:to39_195))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_178))))))"
"(values"
" id:from37_189"
" id:to38_190))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_178))))))"
"(values"
" rename34_183"
" id:from35_184"
" id:to36_185))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_178)))))"
"(values"
" #t"
" rename31_179"
" id:from32_180"
" id:to33_181))))))"
"(begin"
"(parse-identifier!"
" id:from32_163"
" orig-s_2"
"(syntax-e$1"
" id:to33_164)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))))))"
"(if(unsafe-fx<"
" index_37"
" 9)"
"(if(unsafe-fx<"
" index_37"
" 7)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_200"
" struct40_201"
" id:struct41_202"
" id:field42_203)"
"(let-values(((s_216)"
" disarmed-spec_32))"
"(let-values(((orig-s_217)"
" s_216))"
"(let-values(((struct40_218"
" id:struct41_219"
" id:field42_220)"
"(let-values(((s_221)"
"(if(syntax?$1"
" s_216)"
"(syntax-e$1"
" s_216)"
" s_216)))"
"(if(pair?"
" s_221)"
"(let-values(((struct43_222)"
"(let-values(((s_225)"
"(car"
" s_221)))"
" s_225))"
"((id:struct44_223"
" id:field45_224)"
"(let-values(((s_226)"
"(cdr"
" s_221)))"
"(let-values(((s_227)"
"(if(syntax?$1"
" s_226)"
"(syntax-e$1"
" s_226)"
" s_226)))"
"(if(pair?"
" s_227)"
"(let-values(((id:struct46_228)"
"(let-values(((s_230)"
"(car"
" s_227)))"
"(if(let-values(((or-part_231)"
"(if(syntax?$1"
" s_230)"
"(symbol?"
"(syntax-e$1"
" s_230))"
" #f)))"
"(if or-part_231"
" or-part_231"
"(symbol?"
" s_230)))"
" s_230"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_217"
" s_230))))"
"((id:field47_229)"
"(let-values(((s_232)"
"(cdr"
" s_227)))"
"(let-values(((s_233)"
"(if(syntax?$1"
" s_232)"
"(syntax-e$1"
" s_232)"
" s_232)))"
"(if(pair?"
" s_233)"
"(let-values(((id:field48_234)"
"(let-values(((s_235)"
"(car"
" s_233)))"
"(let-values(((s_236)"
"(if(syntax?$1"
" s_235)"
"(syntax-e$1"
" s_235)"
" s_235)))"
"(let-values(((flat-s_237)"
"(to-syntax-list.1"
" s_236)))"
"(if(not"
" flat-s_237)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_217))"
"(let-values()"
"(let-values(((id:field_238)"
"(let-values(((lst_239)"
" flat-s_237))"
"(begin"
"(if(list?"
" lst_239)"
"(void)"
"(let-values()"
"(in-list"
" lst_239)))"
"((letrec-values(((for-loop_240)"
"(lambda(id:field_241"
" lst_242)"
"(if(pair?"
" lst_242)"
"(let-values(((s_243)"
"(unsafe-car"
" lst_242))"
"((rest_244)"
"(unsafe-cdr"
" lst_242)))"
"(let-values(((id:field_245)"
"(let-values(((id:field_246)"
" id:field_241))"
"(let-values(((id:field_247)"
"(let-values()"
"(let-values(((id:field49_248)"
"(let-values()"
"(if(let-values(((or-part_249)"
"(if(syntax?$1"
" s_243)"
"(symbol?"
"(syntax-e$1"
" s_243))"
" #f)))"
"(if or-part_249"
" or-part_249"
"(symbol?"
" s_243)))"
" s_243"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_217"
" s_243)))))"
"(cons"
" id:field49_248"
" id:field_246)))))"
"(values"
" id:field_247)))))"
"(if(not"
" #f)"
"(for-loop_240"
" id:field_245"
" rest_244)"
" id:field_245)))"
" id:field_241))))"
" for-loop_240)"
" null"
" lst_239)))))"
"(alt-reverse"
" id:field_238))))))))"
"(()"
"(let-values(((s_250)"
"(cdr"
" s_233)))"
"(let-values(((s_251)"
"(if(syntax?$1"
" s_250)"
"(syntax-e$1"
" s_250)"
" s_250)))"
"(if(null?"
" s_251)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_217))))))"
"(values"
" id:field48_234))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_217))))))"
"(values"
" id:struct46_228"
" id:field47_229))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_217))))))"
"(values"
" struct43_222"
" id:struct44_223"
" id:field45_224))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_217)))))"
"(values"
" #t"
" struct40_218"
" id:struct41_219"
" id:field42_220))))))"
"(begin"
"(parse-struct!"
" id:struct41_202"
" orig-s_2"
" id:field42_203"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(if(unsafe-fx<"
" index_37"
" 8)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_252"
" all-from50_253"
" mod-path51_254)"
"(let-values(((s_265)"
" disarmed-spec_32))"
"(let-values(((orig-s_266)"
" s_265))"
"(let-values(((all-from50_267"
" mod-path51_268)"
"(let-values(((s_269)"
"(if(syntax?$1"
" s_265)"
"(syntax-e$1"
" s_265)"
" s_265)))"
"(if(pair?"
" s_269)"
"(let-values(((all-from52_270)"
"(let-values(((s_272)"
"(car"
" s_269)))"
" s_272))"
"((mod-path53_271)"
"(let-values(((s_273)"
"(cdr"
" s_269)))"
"(let-values(((s_274)"
"(if(syntax?$1"
" s_273)"
"(syntax-e$1"
" s_273)"
" s_273)))"
"(if(pair?"
" s_274)"
"(let-values(((mod-path54_275)"
"(let-values(((s_276)"
"(car"
" s_274)))"
" s_276))"
"(()"
"(let-values(((s_277)"
"(cdr"
" s_274)))"
"(let-values(((s_278)"
"(if(syntax?$1"
" s_277)"
"(syntax-e$1"
" s_277)"
" s_277)))"
"(if(null?"
" s_278)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_266))))))"
"(values"
" mod-path54_275))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_266))))))"
"(values"
" all-from52_270"
" mod-path53_271))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_266)))))"
"(values"
" #t"
" all-from50_267"
" mod-path51_268))))))"
"(begin"
"(parse-all-from"
" mod-path51_254"
" orig-s_2"
" self_4"
" null"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11"
" ctx_6)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_279"
" all-from-except55_280"
" mod-path56_281"
" id57_282)"
"(let-values(((s_295)"
" disarmed-spec_32))"
"(let-values(((orig-s_296)"
" s_295))"
"(let-values(((all-from-except55_297"
" mod-path56_298"
" id57_299)"
"(let-values(((s_300)"
"(if(syntax?$1"
" s_295)"
"(syntax-e$1"
" s_295)"
" s_295)))"
"(if(pair?"
" s_300)"
"(let-values(((all-from-except58_301)"
"(let-values(((s_304)"
"(car"
" s_300)))"
" s_304))"
"((mod-path59_302"
" id60_303)"
"(let-values(((s_305)"
"(cdr"
" s_300)))"
"(let-values(((s_306)"
"(if(syntax?$1"
" s_305)"
"(syntax-e$1"
" s_305)"
" s_305)))"
"(if(pair?"
" s_306)"
"(let-values(((mod-path61_307)"
"(let-values(((s_309)"
"(car"
" s_306)))"
" s_309))"
"((id62_308)"
"(let-values(((s_310)"
"(cdr"
" s_306)))"
"(let-values(((s_311)"
"(if(syntax?$1"
" s_310)"
"(syntax-e$1"
" s_310)"
" s_310)))"
"(let-values(((flat-s_312)"
"(to-syntax-list.1"
" s_311)))"
"(if(not"
" flat-s_312)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_296))"
"(let-values()"
"(let-values(((id_313)"
"(let-values(((lst_314)"
" flat-s_312))"
"(begin"
"(if(list?"
" lst_314)"
"(void)"
"(let-values()"
"(in-list"
" lst_314)))"
"((letrec-values(((for-loop_315)"
"(lambda(id_316"
" lst_317)"
"(if(pair?"
" lst_317)"
"(let-values(((s_318)"
"(unsafe-car"
" lst_317))"
"((rest_319)"
"(unsafe-cdr"
" lst_317)))"
"(let-values(((id_320)"
"(let-values(((id_321)"
" id_316))"
"(let-values(((id_322)"
"(let-values()"
"(let-values(((id63_323)"
"(let-values()"
"(if(let-values(((or-part_324)"
"(if(syntax?$1"
" s_318)"
"(symbol?"
"(syntax-e$1"
" s_318))"
" #f)))"
"(if or-part_324"
" or-part_324"
"(symbol?"
" s_318)))"
" s_318"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_296"
" s_318)))))"
"(cons"
" id63_323"
" id_321)))))"
"(values"
" id_322)))))"
"(if(not"
" #f)"
"(for-loop_315"
" id_320"
" rest_319)"
" id_320)))"
" id_316))))"
" for-loop_315)"
" null"
" lst_314)))))"
"(alt-reverse"
" id_313)))))))))"
"(values"
" mod-path61_307"
" id62_308))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_296))))))"
"(values"
" all-from-except58_301"
" mod-path59_302"
" id60_303))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_296)))))"
"(values"
" #t"
" all-from-except55_297"
" mod-path56_298"
" id57_299))))))"
"(begin"
"(parse-all-from"
" mod-path56_281"
" orig-s_2"
" self_4"
" id57_282"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11"
" ctx_6)"
"(values"
" null"
"(list"
" spec_22))))))))"
"(if(unsafe-fx<"
" index_37"
" 11)"
"(if(unsafe-fx<"
" index_37"
" 10)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_325"
" all-defined64_326)"
"(let-values(((s_335)"
" disarmed-spec_32))"
"(let-values(((orig-s_336)"
" s_335))"
"(let-values(((all-defined64_337)"
"(let-values(((s_338)"
"(if(syntax?$1"
" s_335)"
"(syntax-e$1"
" s_335)"
" s_335)))"
"(if(pair?"
" s_338)"
"(let-values(((all-defined65_339)"
"(let-values(((s_340)"
"(car"
" s_338)))"
" s_340))"
"(()"
"(let-values(((s_341)"
"(cdr"
" s_338)))"
"(let-values(((s_342)"
"(if(syntax?$1"
" s_341)"
"(syntax-e$1"
" s_341)"
" s_341)))"
"(if(null?"
" s_342)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_336))))))"
"(values"
" all-defined65_339))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_336)))))"
"(values"
" #t"
" all-defined64_337))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" null"
" #f"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_343"
" all-defined-except66_344"
" id67_345)"
"(let-values(((s_356)"
" disarmed-spec_32))"
"(let-values(((orig-s_357)"
" s_356))"
"(let-values(((all-defined-except66_358"
" id67_359)"
"(let-values(((s_360)"
"(if(syntax?$1"
" s_356)"
"(syntax-e$1"
" s_356)"
" s_356)))"
"(if(pair?"
" s_360)"
"(let-values(((all-defined-except68_361)"
"(let-values(((s_363)"
"(car"
" s_360)))"
" s_363))"
"((id69_362)"
"(let-values(((s_364)"
"(cdr"
" s_360)))"
"(let-values(((s_365)"
"(if(syntax?$1"
" s_364)"
"(syntax-e$1"
" s_364)"
" s_364)))"
"(let-values(((flat-s_366)"
"(to-syntax-list.1"
" s_365)))"
"(if(not"
" flat-s_366)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_357))"
"(let-values()"
"(let-values(((id_367)"
"(let-values(((lst_368)"
" flat-s_366))"
"(begin"
"(if(list?"
" lst_368)"
"(void)"
"(let-values()"
"(in-list"
" lst_368)))"
"((letrec-values(((for-loop_369)"
"(lambda(id_370"
" lst_371)"
"(if(pair?"
" lst_371)"
"(let-values(((s_372)"
"(unsafe-car"
" lst_371))"
"((rest_373)"
"(unsafe-cdr"
" lst_371)))"
"(let-values(((id_374)"
"(let-values(((id_375)"
" id_370))"
"(let-values(((id_376)"
"(let-values()"
"(let-values(((id70_377)"
"(let-values()"
"(if(let-values(((or-part_378)"
"(if(syntax?$1"
" s_372)"
"(symbol?"
"(syntax-e$1"
" s_372))"
" #f)))"
"(if or-part_378"
" or-part_378"
"(symbol?"
" s_372)))"
" s_372"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_357"
" s_372)))))"
"(cons"
" id70_377"
" id_375)))))"
"(values"
" id_376)))))"
"(if(not"
" #f)"
"(for-loop_369"
" id_374"
" rest_373)"
" id_374)))"
" id_370))))"
" for-loop_369)"
" null"
" lst_368)))))"
"(alt-reverse"
" id_367)))))))))"
"(values"
" all-defined-except68_361"
" id69_362))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_357)))))"
"(values"
" #t"
" all-defined-except66_358"
" id67_359))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" id67_345"
" #f"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22)))))))"
"(if(unsafe-fx<"
" index_37"
" 12)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_379"
" prefix-all-defined71_380"
" id:prefix72_381)"
"(let-values(((s_392)"
" disarmed-spec_32))"
"(let-values(((orig-s_393)"
" s_392))"
"(let-values(((prefix-all-defined71_394"
" id:prefix72_395)"
"(let-values(((s_396)"
"(if(syntax?$1"
" s_392)"
"(syntax-e$1"
" s_392)"
" s_392)))"
"(if(pair?"
" s_396)"
"(let-values(((prefix-all-defined73_397)"
"(let-values(((s_399)"
"(car"
" s_396)))"
" s_399))"
"((id:prefix74_398)"
"(let-values(((s_400)"
"(cdr"
" s_396)))"
"(let-values(((s_401)"
"(if(syntax?$1"
" s_400)"
"(syntax-e$1"
" s_400)"
" s_400)))"
"(if(pair?"
" s_401)"
"(let-values(((id:prefix75_402)"
"(let-values(((s_403)"
"(car"
" s_401)))"
"(if(let-values(((or-part_404)"
"(if(syntax?$1"
" s_403)"
"(symbol?"
"(syntax-e$1"
" s_403))"
" #f)))"
"(if or-part_404"
" or-part_404"
"(symbol?"
" s_403)))"
" s_403"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_393"
" s_403))))"
"(()"
"(let-values(((s_405)"
"(cdr"
" s_401)))"
"(let-values(((s_406)"
"(if(syntax?$1"
" s_405)"
"(syntax-e$1"
" s_405)"
" s_405)))"
"(if(null?"
" s_406)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_393))))))"
"(values"
" id:prefix75_402))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_393))))))"
"(values"
" prefix-all-defined73_397"
" id:prefix74_398))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_393)))))"
"(values"
" #t"
" prefix-all-defined71_394"
" id:prefix72_395))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" null"
"(syntax-e$1"
" id:prefix72_381)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(if(unsafe-fx<"
" index_37"
" 13)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_407"
" prefix-all-defined-except76_408"
" id:prefix77_409"
" id78_410)"
"(let-values(((s_423)"
" disarmed-spec_32))"
"(let-values(((orig-s_424)"
" s_423))"
"(let-values(((prefix-all-defined-except76_425"
" id:prefix77_426"
" id78_427)"
"(let-values(((s_428)"
"(if(syntax?$1"
" s_423)"
"(syntax-e$1"
" s_423)"
" s_423)))"
"(if(pair?"
" s_428)"
"(let-values(((prefix-all-defined-except79_429)"
"(let-values(((s_432)"
"(car"
" s_428)))"
" s_432))"
"((id:prefix80_430"
" id81_431)"
"(let-values(((s_433)"
"(cdr"
" s_428)))"
"(let-values(((s_434)"
"(if(syntax?$1"
" s_433)"
"(syntax-e$1"
" s_433)"
" s_433)))"
"(if(pair?"
" s_434)"
"(let-values(((id:prefix82_435)"
"(let-values(((s_437)"
"(car"
" s_434)))"
"(if(let-values(((or-part_438)"
"(if(syntax?$1"
" s_437)"
"(symbol?"
"(syntax-e$1"
" s_437))"
" #f)))"
"(if or-part_438"
" or-part_438"
"(symbol?"
" s_437)))"
" s_437"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_424"
" s_437))))"
"((id83_436)"
"(let-values(((s_439)"
"(cdr"
" s_434)))"
"(let-values(((s_440)"
"(if(syntax?$1"
" s_439)"
"(syntax-e$1"
" s_439)"
" s_439)))"
"(let-values(((flat-s_441)"
"(to-syntax-list.1"
" s_440)))"
"(if(not"
" flat-s_441)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_424))"
"(let-values()"
"(let-values(((id_442)"
"(let-values(((lst_443)"
" flat-s_441))"
"(begin"
"(if(list?"
" lst_443)"
"(void)"
"(let-values()"
"(in-list"
" lst_443)))"
"((letrec-values(((for-loop_444)"
"(lambda(id_445"
" lst_446)"
"(if(pair?"
" lst_446)"
"(let-values(((s_447)"
"(unsafe-car"
" lst_446))"
"((rest_448)"
"(unsafe-cdr"
" lst_446)))"
"(let-values(((id_449)"
"(let-values(((id_450)"
" id_445))"
"(let-values(((id_451)"
"(let-values()"
"(let-values(((id84_452)"
"(let-values()"
"(if(let-values(((or-part_453)"
"(if(syntax?$1"
" s_447)"
"(symbol?"
"(syntax-e$1"
" s_447))"
" #f)))"
"(if or-part_453"
" or-part_453"
"(symbol?"
" s_447)))"
" s_447"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_424"
" s_447)))))"
"(cons"
" id84_452"
" id_450)))))"
"(values"
" id_451)))))"
"(if(not"
" #f)"
"(for-loop_444"
" id_449"
" rest_448)"
" id_449)))"
" id_445))))"
" for-loop_444)"
" null"
" lst_443)))))"
"(alt-reverse"
" id_442)))))))))"
"(values"
" id:prefix82_435"
" id83_436))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_424))))))"
"(values"
" prefix-all-defined-except79_429"
" id:prefix80_430"
" id81_431))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_424)))))"
"(values"
" #t"
" prefix-all-defined-except76_425"
" id:prefix77_426"
" id78_427))))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_22"
" orig-s_2"
" id78_410"
"(syntax-e$1"
" id:prefix77_409)"
" at-phase_10"
" ns_7"
" rp_3"
" protected?_11)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values(((ok?_454"
" expand85_455"
" id86_456"
" datum87_457)"
"(let-values(((s_499)"
" disarmed-spec_32))"
"(let-values(((orig-s_500)"
" s_499))"
"(let-values(((expand85_501"
" id86_502"
" datum87_503)"
"(let-values(((s_504)"
"(if(syntax?$1"
" s_499)"
"(syntax-e$1"
" s_499)"
" s_499)))"
"(if(pair?"
" s_504)"
"(let-values(((expand88_505)"
"(let-values(((s_508)"
"(car"
" s_504)))"
" s_508))"
"((id89_506"
" datum90_507)"
"(let-values(((s_509)"
"(cdr"
" s_504)))"
"(let-values(((s_510)"
"(if(syntax?$1"
" s_509)"
"(syntax-e$1"
" s_509)"
" s_509)))"
"(if(pair?"
" s_510)"
"(let-values(((id91_511"
" datum92_512)"
"(let-values(((s_513)"
"(car"
" s_510)))"
"(let-values(((s_514)"
"(if(syntax?$1"
" s_513)"
"(syntax-e$1"
" s_513)"
" s_513)))"
"(if(pair?"
" s_514)"
"(let-values(((id93_515)"
"(let-values(((s_517)"
"(car"
" s_514)))"
"(if(let-values(((or-part_518)"
"(if(syntax?$1"
" s_517)"
"(symbol?"
"(syntax-e$1"
" s_517))"
" #f)))"
"(if or-part_518"
" or-part_518"
"(symbol?"
" s_517)))"
" s_517"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_500"
" s_517))))"
"((datum94_516)"
"(let-values(((s_519)"
"(cdr"
" s_514)))"
" s_519)))"
"(values"
" id93_515"
" datum94_516))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_500)))))"
"(()"
"(let-values(((s_520)"
"(cdr"
" s_510)))"
"(let-values(((s_521)"
"(if(syntax?$1"
" s_520)"
"(syntax-e$1"
" s_520)"
" s_520)))"
"(if(null?"
" s_521)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_500))))))"
"(values"
" id91_511"
" datum92_512))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_500))))))"
"(values"
" expand88_505"
" id89_506"
" datum90_507))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_500)))))"
"(values"
" #t"
" expand85_501"
" id86_502"
" datum87_503))))))"
"(let-values(((ok?_470"
" expand95_471"
" form96_472)"
"(let-values(((s_522)"
" disarmed-spec_32))"
"(let-values(((orig-s_523)"
" s_522))"
"(let-values(((expand95_524"
" form96_525)"
"(let-values(((s_526)"
"(if(syntax?$1"
" s_522)"
"(syntax-e$1"
" s_522)"
" s_522)))"
"(if(pair?"
" s_526)"
"(let-values(((expand97_527)"
"(let-values(((s_529)"
"(car"
" s_526)))"
" s_529))"
"((form98_528)"
"(let-values(((s_530)"
"(cdr"
" s_526)))"
"(let-values(((s_531)"
"(if(syntax?$1"
" s_530)"
"(syntax-e$1"
" s_530)"
" s_530)))"
"(if(pair?"
" s_531)"
"(let-values(((form99_532)"
"(let-values(((s_533)"
"(car"
" s_531)))"
" s_533))"
"(()"
"(let-values(((s_534)"
"(cdr"
" s_531)))"
"(let-values(((s_535)"
"(if(syntax?$1"
" s_534)"
"(syntax-e$1"
" s_534)"
" s_534)))"
"(if(null?"
" s_535)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_523))))))"
"(values"
" form99_532))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_523))))))"
"(values"
" expand97_527"
" form98_528))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_523)))))"
"(values"
" #t"
" expand95_524"
" form96_525))))))"
"(let-values(((exp-spec_483)"
"(let-values(((temp104_536)"
" form96_472)"
"((temp105_537)"
"(let-values(((v_538)"
" ctx_6))"
"(let-values(((the-struct_539)"
" v_538))"
"(if(expand-context/outer?"
" the-struct_539)"
"(let-values(((only-immediate?106_540)"
" #t)"
"((def-ctx-scopes107_541)"
"(box"
" null))"
"((inner108_542)"
"(root-expand-context/outer-inner"
" v_538)))"
"(expand-context/outer1.1"
" inner108_542"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_539)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_539)"
"(root-expand-context/outer-frame-id"
" the-struct_539)"
"(expand-context/outer-context"
" the-struct_539)"
"(expand-context/outer-env"
" the-struct_539)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_539)"
"(expand-context/outer-scopes"
" the-struct_539)"
" def-ctx-scopes107_541"
"(expand-context/outer-binding-layer"
" the-struct_539)"
"(expand-context/outer-reference-records"
" the-struct_539)"
" only-immediate?106_540"
"(expand-context/outer-need-eventually-defined"
" the-struct_539)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_539)"
"(expand-context/outer-name"
" the-struct_539)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                               \"expand-context/outer?\""
" the-struct_539))))))"
"(expand5.1"
" #f"
" #f"
" temp104_536"
" temp105_537))))"
"(let-values((()"
"(begin"
"(if(if(pair?"
"(syntax-e$1"
" exp-spec_483))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" exp-spec_483)))"
"(eq?"
" 'begin"
"(core-form-sym"
" exp-spec_483"
" at-phase_10))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                   \"expansion was not a `begin' sequence\""
" orig-s_2"
" spec_22)))"
"(values))))"
"(let-values(((ok?_484"
" begin100_485"
" spec101_486)"
"(let-values(((s_543)"
" exp-spec_483))"
"(let-values(((orig-s_544)"
" s_543))"
"(let-values(((begin100_545"
" spec101_546)"
"(let-values(((s_547)"
"(if(syntax?$1"
" s_543)"
"(syntax-e$1"
" s_543)"
" s_543)))"
"(if(pair?"
" s_547)"
"(let-values(((begin102_548)"
"(let-values(((s_550)"
"(car"
" s_547)))"
" s_550))"
"((spec103_549)"
"(let-values(((s_551)"
"(cdr"
" s_547)))"
"(let-values(((s_552)"
"(if(syntax?$1"
" s_551)"
"(syntax-e$1"
" s_551)"
" s_551)))"
"(let-values(((flat-s_553)"
"(to-syntax-list.1"
" s_552)))"
"(if(not"
" flat-s_553)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_544))"
"(let-values()"
" flat-s_553)))))))"
"(values"
" begin102_548"
" spec103_549))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_544)))))"
"(values"
" #t"
" begin100_545"
" spec101_546))))))"
"(let-values(((track-stxes_497"
" exp-specs_498)"
"(loop_8"
" spec101_486"
" at-phase_10"
" protected?_11"
" layer_12)))"
"(values"
"(list*"
" spec_22"
" exp-spec_483"
" track-stxes_497)"
" exp-specs_498)))))))))))))))))))))"
"(values"
"(cons"
" track-stxes1_30"
" track-stxes_26)"
"(cons"
" exp-specs2_31"
" exp-specs_27))))))"
"(values"
" track-stxes_28"
" exp-specs_29)))))"
"(if(not #f)"
"(for-loop_18"
" track-stxes_24"
" exp-specs_25"
" rest_23)"
"(values"
" track-stxes_24"
" exp-specs_25))))"
"(values track-stxes_19 exp-specs_20)))))"
" for-loop_18)"
" null"
" null"
" lst_17)))))"
"(values(alt-reverse track-stxes_15)(alt-reverse exp-specs_16)))))"
"(values(apply append track-stxess_13)(apply append exp-specss_14))))))"
" loop_8)"
" specs_1"
" phase_5"
" #f"
" 'raw))))"
"(define-values"
"(parse-identifier!)"
"(lambda(spec_554 orig-s_555 sym_556 at-phase_557 ns_558 rp_559 protected?_560)"
"(let-values(((b_561)(resolve+shift/extra-inspector spec_554 at-phase_557 ns_558)))"
"(let-values((()"
"(begin"
"(if b_561"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                           \"provided identifier is not defined or required\""
" orig-s_555"
" spec_554)))"
"(values))))"
"(let-values(((as-transformer?_562)(binding-for-transformer? b_561 spec_554 at-phase_557 ns_558)))"
"(let-values(((immed-b_563)"
"(let-values(((spec118_565) spec_554)((at-phase119_566) at-phase_557)((temp120_567) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f temp120_567 #t #f #f spec118_565 at-phase119_566))))"
"(let-values(((rp109_569) rp_559)"
"((sym110_570) sym_556)"
"((at-phase111_571) at-phase_557)"
"((b112_572) b_561)"
"((immed-b113_573) immed-b_563)"
"((spec114_574) spec_554)"
"((orig-s115_575) orig-s_555)"
"((protected?116_576) protected?_560)"
"((as-transformer?117_577) as-transformer?_562))"
"(add-provide!101.1"
" protected?116_576"
" as-transformer?117_577"
" rp109_569"
" sym110_570"
" at-phase111_571"
" b112_572"
" immed-b113_573"
" spec114_574"
" orig-s115_575))))))))"
"(define-values"
"(parse-struct!)"
"(lambda(id:struct_578 orig-s_579 fields_580 at-phase_581 ns_582 rp_583 protected?_584)"
"(let-values(((mk_585)"
"(lambda(fmt_587)"
"(let-values(((sym_588)(string->symbol(format fmt_587(syntax-e$1 id:struct_578)))))"
"(datum->syntax$1 id:struct_578 sym_588 id:struct_578)))))"
"(let-values(((mk2_586)"
"(lambda(fmt_589 field-id_590)"
"(let-values(((sym_591)"
"(string->symbol"
"(format fmt_589(syntax-e$1 id:struct_578)(syntax-e$1 field-id_590)))))"
"(datum->syntax$1 id:struct_578 sym_591 id:struct_578)))))"
"(begin"
"(let-values(((pos->vals_592 pos-pre-inc_593 pos-next_594 init_595 pos-cont?_596 val-cont?_597 all-cont?_598)"
"                        (make-sequence '(fmt) (list \"~a\" \"make-~a\" \"struct:~a\" \"~a?\"))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_599)"
"(lambda(pos_600)"
"(if(if pos-cont?_596(pos-cont?_596 pos_600) #t)"
"(let-values(((fmt_601 all-cont?/pos_602)"
"(let-values(((fmt_604)(pos->vals_592 pos_600)))"
"(values"
" fmt_604"
"(if all-cont?_598"
"(lambda(pos_605)(all-cont?_598 pos_605 fmt_604))"
" #f))))"
"((pos_603)(if pos-pre-inc_593(pos-pre-inc_593 pos_600) pos_600)))"
"(if(if val-cont?_597(val-cont?_597 fmt_601) #t)"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_606)(mk_585 fmt_601)))"
"(parse-identifier!"
" id_606"
" orig-s_579"
"(syntax-e$1 id_606)"
" at-phase_581"
" ns_582"
" rp_583"
" protected?_584)))"
"(values)))))"
"(values)))))"
"(if(if(if all-cont?/pos_602(all-cont?/pos_602 pos_603) #t)(not #f) #f)"
"(for-loop_599(pos-next_594 pos_603))"
"(values)))"
"(values)))"
"(values)))))"
" for-loop_599)"
" init_595)))"
"(void)"
"(let-values(((lst_607) fields_580))"
"(begin"
"(if(list? lst_607)(void)(let-values()(in-list lst_607)))"
"((letrec-values(((for-loop_608)"
"(lambda(lst_609)"
"(if(pair? lst_609)"
"(let-values(((field_610)(unsafe-car lst_609))((rest_611)(unsafe-cdr lst_609)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((get-id_612)"
"                                                                                        (mk2_586 \"~a-~a\" field_610)))"
"(let-values(((set-id_613)"
"(mk2_586"
"                                                                                           \"set-~a-~a!\""
" field_610)))"
"(begin"
"(parse-identifier!"
" get-id_612"
" orig-s_579"
"(syntax-e$1 get-id_612)"
" at-phase_581"
" ns_582"
" rp_583"
" protected?_584)"
"(parse-identifier!"
" set-id_613"
" orig-s_579"
"(syntax-e$1 set-id_613)"
" at-phase_581"
" ns_582"
" rp_583"
" protected?_584)))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_608 rest_611)(values))))"
"(values)))))"
" for-loop_608)"
" lst_607)))"
"(void))))))"
"(define-values"
"(parse-all-from)"
"(lambda(mod-path-stx_614 orig-s_615 self_616 except-ids_617 at-phase_618 ns_619 rp_620 protected?_621 ctx_622)"
"(let-values(((mod-path_623)(syntax->datum$1 mod-path-stx_614)))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_623)"
"(void)"
"(let-values()"
"                          (raise-syntax-error$1 provide-form-name \"not a module path\" orig-s_615 mod-path-stx_614)))"
"(values))))"
"(let-values(((mpi_624)(module-path->mpi/context mod-path_623 ctx_622)))"
"(parse-all-from-module mpi_624 #f orig-s_615 except-ids_617 #f at-phase_618 ns_619 rp_620 protected?_621))))))"
"(define-values"
"(parse-all-from-module)"
"(lambda(mpi_625 matching-stx_626 orig-s_627 except-ids_628 prefix-sym_629 at-phase_630 ns_631 rp_632 protected?_633)"
"(let-values(((requireds_634)(extract-module-requires rp_632 mpi_625 at-phase_630)))"
"(let-values(((phase-desc_635)"
"(lambda()"
"(if(zero-phase? at-phase_630)"
"                        (let-values () \"\")"
"(if(label-phase? at-phase_630)"
"                          (let-values () \" for-label\")"
"                          (let-values () (format \" for phase ~a\" at-phase_630)))))))"
"(let-values((()"
"(begin"
"(if requireds_634"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                             (format \"cannot provide from a module without a matching require~a\" (phase-desc_635))"
" orig-s_627"
" matching-stx_626)))"
"(values))))"
"(let-values(((add-prefix_636)"
"(lambda(sym_638)"
"                          (if prefix-sym_629 (string->symbol (format \"~a~a\" prefix-sym_629 sym_638)) sym_638))))"
"(let-values(((found_637)(make-hasheq)))"
"(begin"
"(let-values(((lst_639) requireds_634))"
"(begin"
"(if(list? lst_639)(void)(let-values()(in-list lst_639)))"
"((letrec-values(((for-loop_640)"
"(lambda(lst_641)"
"(if(pair? lst_641)"
"(let-values(((i_642)(unsafe-car lst_641))((rest_643)(unsafe-cdr lst_641)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_644)"
"(required-id i_642)))"
"(let-values(((phase_645)"
"(required-phase i_642)))"
"(if(let-values(((or-part_646)"
"(if matching-stx_626"
"(not"
"(if(eqv?"
" phase_645"
" at-phase_630)"
"(free-identifier=?$1"
" id_644"
"(datum->syntax$1"
" matching-stx_626"
"(syntax-e$1"
" id_644))"
" phase_645"
" phase_645)"
" #f))"
" #f)))"
"(if or-part_646"
" or-part_646"
"(let-values(((lst_647)"
" except-ids_628))"
"(begin"
"(if(list? lst_647)"
"(void)"
"(let-values()"
"(in-list lst_647)))"
"((letrec-values(((for-loop_648)"
"(lambda(result_649"
" lst_650)"
"(if(pair?"
" lst_650)"
"(let-values(((except-id_651)"
"(unsafe-car"
" lst_650))"
"((rest_652)"
"(unsafe-cdr"
" lst_650)))"
"(let-values(((result_653)"
"(let-values()"
"(let-values(((result_655)"
"(let-values()"
"(let-values()"
"(if(free-identifier=?$1"
" id_644"
" except-id_651"
" phase_645"
" phase_645)"
"(hash-set!"
" found_637"
" except-id_651"
" #t)"
" #f)))))"
"(values"
" result_655)))))"
"(if(if(not"
"((lambda x_656"
" result_653)"
" except-id_651))"
"(not"
" #f)"
" #f)"
"(for-loop_648"
" result_653"
" rest_652)"
" result_653)))"
" result_649))))"
" for-loop_648)"
" #f"
" lst_647)))))"
"(void)"
"(let-values()"
"(let-values(((b_657)"
"(resolve+shift/extra-inspector"
" id_644"
" phase_645"
" ns_631)))"
"(let-values(((immed-b_658)"
"(let-values(((id131_660)"
" id_644)"
"((phase132_661)"
" phase_645)"
"((temp133_662)"
" #t))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp133_662"
" #t"
" #f"
" #f"
" id131_660"
" phase132_661))))"
"(let-values(((rp122_664)"
" rp_632)"
"((temp123_665)"
"(add-prefix_636"
"(syntax-e$1"
" id_644)))"
"((phase124_666)"
" phase_645)"
"((b125_667)"
" b_657)"
"((immed-b126_668)"
" immed-b_658)"
"((id127_669)"
" id_644)"
"((orig-s128_670)"
" orig-s_627)"
"((protected?129_671)"
" protected?_633)"
"((temp130_672)"
"(required-as-transformer?"
" i_642)))"
"(add-provide!101.1"
" protected?129_671"
" temp130_672"
" rp122_664"
" temp123_665"
" phase124_666"
" b125_667"
" immed-b126_668"
" id127_669"
" orig-s128_670)))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_640 rest_643)(values))))"
"(values)))))"
" for-loop_640)"
" lst_639)))"
"(void)"
"(if(=(hash-count found_637)(length except-ids_628))"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_673) except-ids_628))"
"(begin"
"(if(list? lst_673)(void)(let-values()(in-list lst_673)))"
"((letrec-values(((for-loop_674)"
"(lambda(lst_675)"
"(if(pair? lst_675)"
"(let-values(((except-id_676)(unsafe-car lst_675))"
"((rest_677)(unsafe-cdr lst_675)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(let-values(((or-part_678)"
"(hash-ref"
" found_637"
" except-id_676"
" #f)))"
"(if or-part_678"
" or-part_678"
"(let-values(((lst_679)"
" requireds_634))"
"(begin"
"(if(list? lst_679)"
"(void)"
"(let-values()"
"(in-list"
" lst_679)))"
"((letrec-values(((for-loop_680)"
"(lambda(result_681"
" lst_682)"
"(if(pair?"
" lst_682)"
"(let-values(((i_683)"
"(unsafe-car"
" lst_682))"
"((rest_684)"
"(unsafe-cdr"
" lst_682)))"
"(let-values(((result_685)"
"(let-values()"
"(let-values(((result_687)"
"(let-values()"
"(let-values()"
"(let-values(((id_688)"
"(required-id"
" i_683)))"
"(let-values(((phase_689)"
"(required-phase"
" i_683)))"
"(free-identifier=?$1"
" id_688"
" except-id_676"
" phase_689"
" phase_689)))))))"
"(values"
" result_687)))))"
"(if(if(not"
"((lambda x_690"
" result_685)"
" i_683))"
"(not"
" #f)"
" #f)"
"(for-loop_680"
" result_685"
" rest_684)"
" result_685)))"
" result_681))))"
" for-loop_680)"
" #f"
" lst_679)))))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"(if matching-stx_626"
"                                                                                              \"excluded identifier was not defined or required in the module~a\""
"                                                                                              \"excluded identifier was not required from the specified module~a\")"
"(phase-desc_635))"
" orig-s_627"
" except-id_676))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_674 rest_677)(values))))"
"(values)))))"
" for-loop_674)"
" lst_673)))"
"(void))))))))))))"
"(void)"
"(void)"
"(define-values"
"(struct:expanded+parsed expanded+parsed1.1 expanded+parsed? expanded+parsed-s expanded+parsed-parsed)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expanded+parsed"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'expanded+parsed)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 's)"
"(make-struct-field-accessor -ref_4 1 'parsed))))"
"(define-values"
"(struct:semi-parsed-define-values"
" semi-parsed-define-values2.1"
" semi-parsed-define-values?"
" semi-parsed-define-values-s"
" semi-parsed-define-values-syms"
" semi-parsed-define-values-ids"
" semi-parsed-define-values-rhs)"
"(let-values(((struct:_26 make-_27 ?_28 -ref_29 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-define-values"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'semi-parsed-define-values)))))"
"(values"
" struct:_26"
" make-_27"
" ?_28"
"(make-struct-field-accessor -ref_29 0 's)"
"(make-struct-field-accessor -ref_29 1 'syms)"
"(make-struct-field-accessor -ref_29 2 'ids)"
"(make-struct-field-accessor -ref_29 3 'rhs))))"
"(define-values"
"(struct:semi-parsed-begin-for-syntax"
" semi-parsed-begin-for-syntax3.1"
" semi-parsed-begin-for-syntax?"
" semi-parsed-begin-for-syntax-s"
" semi-parsed-begin-for-syntax-body)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-begin-for-syntax"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'semi-parsed-begin-for-syntax)))))"
"(values"
" struct:_61"
" make-_62"
" ?_63"
"(make-struct-field-accessor -ref_64 0 's)"
"(make-struct-field-accessor -ref_64 1 'body))))"
"(define-values"
"(parsed-only)"
"(lambda(l_86)"
"(let-values(((lst_87) l_86))"
"(begin"
"(if(list? lst_87)(void)(let-values()(in-list lst_87)))"
"((letrec-values(((for-loop_88)"
"(lambda(lst_89)"
"(if(pair? lst_89)"
"(let-values(((i_90)(unsafe-car lst_89))((rest_91)(unsafe-cdr lst_89)))"
"(let-values(((post-guard-var_92)(lambda() #t)))"
"(let-values()"
"(if(let-values(((or-part_93)(parsed? i_90)))"
"(if or-part_93"
" or-part_93"
"(let-values(((or-part_94)(expanded+parsed? i_90)))"
"(if or-part_94 or-part_94(semi-parsed-begin-for-syntax? i_90)))))"
"(let-values()"
"(let-values(((elem_95)"
"(let-values()"
"(let-values()"
"(if(expanded+parsed? i_90)"
"(let-values()(expanded+parsed-parsed i_90))"
"(if(semi-parsed-begin-for-syntax? i_90)"
"(let-values()"
"(parsed-begin-for-syntax21.1"
"(semi-parsed-begin-for-syntax-s i_90)"
"(parsed-only"
"(semi-parsed-begin-for-syntax-body i_90))))"
"(let-values() i_90)))))))"
"(let-values(((result_96)"
"(if(post-guard-var_92)(for-loop_88 rest_91) null)))"
"(cons elem_95 result_96))))"
"(if(post-guard-var_92)(for-loop_88 rest_91) null)))))"
" null))))"
" for-loop_88)"
" lst_87)))))"
"(define-values"
"(syntax-only)"
"(lambda(l_97)"
"(let-values(((lst_98) l_97))"
"(begin"
"(if(list? lst_98)(void)(let-values()(in-list lst_98)))"
"((letrec-values(((for-loop_99)"
"(lambda(lst_100)"
"(if(pair? lst_100)"
"(let-values(((i_101)(unsafe-car lst_100))((rest_102)(unsafe-cdr lst_100)))"
"(let-values(((post-guard-var_103)(lambda() #t)))"
"(let-values()"
"(if(let-values(((or-part_104)(syntax?$1 i_101)))"
"(if or-part_104"
" or-part_104"
"(let-values(((or-part_105)(expanded+parsed? i_101)))"
"(if or-part_105 or-part_105(semi-parsed-begin-for-syntax? i_101)))))"
"(let-values()"
"(let-values(((elem_106)"
"(let-values()"
"(let-values()"
"(if(expanded+parsed? i_101)"
"(let-values()(expanded+parsed-s i_101))"
"(if(semi-parsed-begin-for-syntax? i_101)"
"(let-values()"
"(let-values(((s_107)"
"(semi-parsed-begin-for-syntax-s i_101)))"
"(let-values(((nested-bodys_108)"
"(semi-parsed-begin-for-syntax-body"
" i_101)))"
"(let-values(((disarmed-s_109)"
"(syntax-disarm$1 s_107)))"
"(let-values(((ok?_110"
" begin-for-syntax7_111"
" _8_112)"
"(let-values(((s_123)"
" disarmed-s_109))"
"(let-values(((orig-s_124) s_123))"
"(let-values(((begin-for-syntax7_125"
" _8_126)"
"(let-values(((s_127)"
"(if(syntax?$1"
" s_123)"
"(syntax-e$1"
" s_123)"
" s_123)))"
"(if(pair?"
" s_127)"
"(let-values(((begin-for-syntax9_128)"
"(let-values(((s_130)"
"(car"
" s_127)))"
" s_130))"
"((_10_129)"
"(let-values(((s_131)"
"(cdr"
" s_127)))"
"(let-values(((s_132)"
"(if(syntax?$1"
" s_131)"
"(syntax-e$1"
" s_131)"
" s_131)))"
"(let-values(((flat-s_133)"
"(to-syntax-list.1"
" s_132)))"
"(if(not"
" flat-s_133)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_124))"
"(let-values()"
" flat-s_133)))))))"
"(values"
" begin-for-syntax9_128"
" _10_129))"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_124)))))"
"(values"
" #t"
" begin-for-syntax7_125"
" _8_126))))))"
"(let-values(((s11_134) s_107)"
"((temp12_135)"
"(list*"
" begin-for-syntax7_111"
"(syntax-only nested-bodys_108))))"
"(rebuild62.1 #f #f s11_134 temp12_135)))))))"
"(let-values() i_101)))))))"
"(let-values(((result_136)"
"(if(post-guard-var_103)(for-loop_99 rest_102) null)))"
"(cons elem_106 result_136))))"
"(if(post-guard-var_103)(for-loop_99 rest_102) null)))))"
" null))))"
" for-loop_99)"
" lst_98)))))"
"(void)"
"(void)"
"(define-values(check-cross-phase-persistent-form)(lambda(bodys_1)(check-body bodys_1)))"
"(define-values"
"(check-body)"
"(lambda(bodys_2)"
"(begin"
"(let-values(((lst_3) bodys_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(lst_5)"
"(if(pair? lst_5)"
"(let-values(((body_6)(unsafe-car lst_5))((rest_7)(unsafe-cdr lst_5)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_8)"
"(if(expanded+parsed? body_6)"
"(expanded+parsed-parsed body_6)"
" body_6)))"
"(if(parsed-define-values? p_8)"
"(let-values()"
"(check-expr"
"(parsed-define-values-rhs p_8)"
"(length(parsed-define-values-syms p_8))"
" p_8))"
"(if(let-values(((or-part_9)"
"(parsed-#%declare? p_8)))"
"(if or-part_9"
" or-part_9"
"(let-values(((or-part_10)"
"(parsed-module? p_8)))"
"(if or-part_10"
" or-part_10"
"(syntax?$1 p_8)))))"
"(let-values()(void))"
"(let-values()(disallow p_8))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_4 rest_7)(values))))"
"(values)))))"
" for-loop_4)"
" lst_3)))"
"(void))))"
"(define-values"
"(check-expr)"
"(lambda(e_11 num-results_12 enclosing_13)"
"(if(let-values(((or-part_14)(parsed-lambda? e_11)))(if or-part_14 or-part_14(parsed-case-lambda? e_11)))"
"(let-values()(check-count 1 num-results_12 enclosing_13))"
"(if(parsed-quote? e_11)"
"(let-values()(begin(check-datum(parsed-quote-datum e_11) e_11)(check-count 1 num-results_12 enclosing_13)))"
"(if(parsed-app? e_11)"
"(let-values()"
"(let-values(((rands_15)(cdr(parsed-app-rator+rands e_11))))"
"(begin"
"(let-values(((lst_16) rands_15))"
"(begin"
"(if(list? lst_16)(void)(let-values()(in-list lst_16)))"
"((letrec-values(((for-loop_17)"
"(lambda(lst_18)"
"(if(pair? lst_18)"
"(let-values(((rand_19)(unsafe-car lst_18))((rest_20)(unsafe-cdr lst_18)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(check-expr rand_19 1 e_11))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_17 rest_20)(values))))"
"(values)))))"
" for-loop_17)"
" lst_16)))"
"(void)"
"(let-values(((tmp_21)(cross-phase-primitive-name(car(parsed-app-rator+rands e_11)))))"
"(if(if(equal? tmp_21 'cons) #t(equal? tmp_21 'list))"
"(let-values()(check-count 1 num-results_12 enclosing_13))"
"(if(equal? tmp_21 'make-struct-type)"
"(let-values()(check-count 5 num-results_12 enclosing_13))"
"(if(equal? tmp_21 'make-struct-type-property)"
"(let-values()(check-count 3 num-results_12 enclosing_13))"
"(if(equal? tmp_21 'gensym)"
"(let-values()"
"(if(let-values(((or-part_22)(= 0(length rands_15))))"
"(if or-part_22"
" or-part_22"
"(if(= 1(length rands_15))(quoted-string?(car rands_15)) #f)))"
"(void)"
"(let-values()(disallow e_11))))"
"(if(equal? tmp_21 'string->uninterned-symbol)"
"(let-values()"
"(if(if(= 1(length rands_15))(quoted-string?(car rands_15)) #f)"
"(void)"
"(let-values()(disallow e_11))))"
"(let-values()(disallow e_11)))))))))))"
"(void))))))"
"(define-values"
"(check-count)"
"(lambda(is-num_23 expected-num_24 enclosing_25)"
"(if(= is-num_23 expected-num_24)(void)(let-values()(disallow enclosing_25)))))"
"(define-values"
"(check-datum)"
"(lambda(d_26 e_27)"
"(if(let-values(((or-part_28)(number? d_26)))"
"(if or-part_28"
" or-part_28"
"(let-values(((or-part_29)(boolean? d_26)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? d_26)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(string? d_26)))(if or-part_31 or-part_31(bytes? d_26)))))))))"
"(let-values()(void))"
"(let-values()(disallow e_27)))))"
"(define-values(quoted-string?)(lambda(e_32)(if(parsed-quote? e_32)(string?(parsed-quote-datum e_32)) #f)))"
"(define-values"
"(cross-phase-primitive-name)"
"(lambda(id_33)"
"(if(parsed-id? id_33)"
"(let-values()"
"(let-values(((b_34)(parsed-id-binding id_33)))"
"(if(module-binding? b_34)"
"(if(eq? runtime-module-name(1/module-path-index-resolve(module-binding-module b_34)))"
"(module-binding-sym b_34)"
" #f)"
" #f)))"
"(let-values() #f))))"
"(define-values"
"(disallow)"
"(lambda(body_35)"
"(raise-syntax-error$1"
" 'module"
"     \"not allowed in a cross-phase persistent module\""
"(if(parsed? body_35)(datum->syntax$1 #f body_35(parsed-s body_35)) body_35))))"
"(void)"
"(void)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module"
"(lambda(s_51 ctx_52)"
"(begin"
"(if(eq?(expand-context-context ctx_52) 'top-level)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((obs_53)(expand-context-observer ctx_52)))"
"(if obs_53(let-values()(let-values()(call-expand-observe obs_53 'prim-module)))(void)))"
"               (raise-syntax-error$1 #f \"allowed only at the top level\" s_51))))"
"(let-values()"
"(let-values(((s225_54) s_51)((ctx226_55) ctx_52)((temp227_56) #f))"
"(expand-module18.1 #f #f #f #f #f #f #f #f #f #f #f #f #f #f s225_54 ctx226_55 temp227_56)))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module*"
"(lambda(s_57 ctx_58)"
"(begin"
"(let-values(((obs_59)(expand-context-observer ctx_58)))"
"(if obs_59(let-values()(let-values()(call-expand-observe obs_59 'prim-module)))(void)))"
"         (raise-syntax-error$1 #f \"illegal use (not in a module top-level)\" s_57)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%module-begin"
"(lambda(s_60 ctx_61)"
"(begin"
"(let-values(((obs_62)(expand-context-observer ctx_61)))"
"(if obs_62(let-values()(let-values()(call-expand-observe obs_62 'prim-module-begin)))(void)))"
"(if(eq?(expand-context-context ctx_61) 'module-begin)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not in a module-definition context\" s_60)))"
"(if(expand-context-module-begin-k ctx_61)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not currently transforming a module\" s_60)))"
"((expand-context-module-begin-k ctx_61)"
" s_60"
"(let-values(((v_63) ctx_61))"
"(let-values(((the-struct_64) v_63))"
"(if(expand-context/outer? the-struct_64)"
"(let-values(((inner228_65)"
"(let-values(((the-struct_66)(root-expand-context/outer-inner v_63)))"
"(if(expand-context/inner? the-struct_66)"
"(let-values(((module-begin-k229_67) #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_66)"
"(root-expand-context/inner-top-level-bind-scope the-struct_66)"
"(root-expand-context/inner-all-scopes-stx the-struct_66)"
"(root-expand-context/inner-defined-syms the-struct_66)"
"(root-expand-context/inner-counter the-struct_66)"
"(root-expand-context/inner-lift-key the-struct_66)"
"(expand-context/inner-to-parsed? the-struct_66)"
"(expand-context/inner-phase the-struct_66)"
"(expand-context/inner-namespace the-struct_66)"
"(expand-context/inner-user-env the-struct_66)"
"(expand-context/inner-just-once? the-struct_66)"
" module-begin-k229_67"
"(expand-context/inner-allow-unbound? the-struct_66)"
"(expand-context/inner-in-local-expand? the-struct_66)"
"(expand-context/inner-stops the-struct_66)"
"(expand-context/inner-declared-submodule-names the-struct_66)"
"(expand-context/inner-lifts the-struct_66)"
"(expand-context/inner-lift-envs the-struct_66)"
"(expand-context/inner-module-lifts the-struct_66)"
"(expand-context/inner-require-lifts the-struct_66)"
"(expand-context/inner-to-module-lifts the-struct_66)"
"(expand-context/inner-requires+provides the-struct_66)"
"(expand-context/inner-observer the-struct_66)"
"(expand-context/inner-for-serializable? the-struct_66)))"
"                                  (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_66)))))"
"(expand-context/outer1.1"
" inner228_65"
"(root-expand-context/outer-post-expansion-scope the-struct_64)"
"(root-expand-context/outer-use-site-scopes the-struct_64)"
"(root-expand-context/outer-frame-id the-struct_64)"
"(expand-context/outer-context the-struct_64)"
"(expand-context/outer-env the-struct_64)"
"(expand-context/outer-post-expansion-scope-action the-struct_64)"
"(expand-context/outer-scopes the-struct_64)"
"(expand-context/outer-def-ctx-scopes the-struct_64)"
"(expand-context/outer-binding-layer the-struct_64)"
"(expand-context/outer-reference-records the-struct_64)"
"(expand-context/outer-only-immediate? the-struct_64)"
"(expand-context/outer-need-eventually-defined the-struct_64)"
"(expand-context/outer-current-introduction-scopes the-struct_64)"
"(expand-context/outer-name the-struct_64)))"
"                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_64)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%declare"
"(lambda(s_68 ctx_69)"
"(begin"
"(let-values(((obs_70)(expand-context-observer ctx_69)))"
"(if obs_70(let-values()(let-values()(call-expand-observe obs_70 'prim-declare)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_68)))))"
" print-values)"
"(define-values"
"(expand-module18.1)"
"(lambda(always-produce-compiled?1_71"
" always-produce-compiled?8_72"
" enclosing-all-scopes-stx3_73"
" enclosing-all-scopes-stx10_74"
" enclosing-is-cross-phase-persistent?4_75"
" enclosing-is-cross-phase-persistent?11_76"
" enclosing-requires+provides5_77"
" enclosing-requires+provides12_78"
" keep-enclosing-scope-at-phase2_79"
" keep-enclosing-scope-at-phase9_80"
" modules-being-compiled7_81"
" modules-being-compiled14_82"
" mpis-for-enclosing-reset6_83"
" mpis-for-enclosing-reset13_84"
" s15_85"
" init-ctx16_86"
" enclosing-self17_87)"
"(let-values(((s_88) s15_85))"
"(let-values(((init-ctx_89) init-ctx16_86))"
"(let-values(((enclosing-self_90) enclosing-self17_87))"
"(let-values(((always-produce-compiled?_91)"
"(if always-produce-compiled?8_72 always-produce-compiled?1_71 #f)))"
"(let-values(((keep-enclosing-scope-at-phase_92)"
"(if keep-enclosing-scope-at-phase9_80 keep-enclosing-scope-at-phase2_79 #f)))"
"(let-values(((enclosing-all-scopes-stx_93)"
"(if enclosing-all-scopes-stx10_74 enclosing-all-scopes-stx3_73 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_94)"
"(if enclosing-is-cross-phase-persistent?11_76"
" enclosing-is-cross-phase-persistent?4_75"
" #f)))"
"(let-values(((enclosing-r+p_95)"
"(if enclosing-requires+provides12_78 enclosing-requires+provides5_77 #f)))"
"(let-values(((mpis-for-enclosing-reset_96)"
"(if mpis-for-enclosing-reset13_84 mpis-for-enclosing-reset6_83 #f)))"
"(let-values(((modules-being-compiled_97)"
"(if modules-being-compiled14_82 modules-being-compiled7_81(make-hasheq))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_155)(expand-context-observer init-ctx_89)))"
"(if obs_155"
"(let-values()(let-values()(call-expand-observe obs_155 'prim-module)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_98)(syntax-disarm$1 s_88)))"
"(let-values(((ok?_99"
" module230_100"
" id:module-name231_101"
" initial-require232_102"
" body233_103)"
"(let-values(((s_156) disarmed-s_98))"
"(let-values(((orig-s_157) s_156))"
"(let-values(((module230_158"
" id:module-name231_159"
" initial-require232_160"
" body233_161)"
"(let-values(((s_162)"
"(if(syntax?$1 s_156)"
"(syntax-e$1 s_156)"
" s_156)))"
"(if(pair? s_162)"
"(let-values(((module234_163)"
"(let-values(((s_167)(car s_162)))"
" s_167))"
"((id:module-name235_164"
" initial-require236_165"
" body237_166)"
"(let-values(((s_168)(cdr s_162)))"
"(let-values(((s_169)"
"(if(syntax?$1 s_168)"
"(syntax-e$1 s_168)"
" s_168)))"
"(if(pair? s_169)"
"(let-values(((id:module-name238_170)"
"(let-values(((s_173)"
"(car"
" s_169)))"
"(if(let-values(((or-part_174)"
"(if(syntax?$1"
" s_173)"
"(symbol?"
"(syntax-e$1"
" s_173))"
" #f)))"
"(if or-part_174"
" or-part_174"
"(symbol?"
" s_173)))"
" s_173"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"not an identifier\""
" orig-s_157"
" s_173))))"
"((initial-require239_171"
" body240_172)"
"(let-values(((s_175)"
"(cdr"
" s_169)))"
"(let-values(((s_176)"
"(if(syntax?$1"
" s_175)"
"(syntax-e$1"
" s_175)"
" s_175)))"
"(if(pair?"
" s_176)"
"(let-values(((initial-require241_177)"
"(let-values(((s_179)"
"(car"
" s_176)))"
" s_179))"
"((body242_178)"
"(let-values(((s_180)"
"(cdr"
" s_176)))"
"(let-values(((s_181)"
"(if(syntax?$1"
" s_180)"
"(syntax-e$1"
" s_180)"
" s_180)))"
"(let-values(((flat-s_182)"
"(to-syntax-list.1"
" s_181)))"
"(if(not"
" flat-s_182)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_157))"
"(let-values()"
" flat-s_182)))))))"
"(values"
" initial-require241_177"
" body242_178))"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_157))))))"
"(values"
" id:module-name238_170"
" initial-require239_171"
" body240_172))"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_157))))))"
"(values"
" module234_163"
" id:module-name235_164"
" initial-require236_165"
" body237_166))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_157)))))"
"(values"
" #t"
" module230_158"
" id:module-name231_159"
" initial-require232_160"
" body233_161))))))"
"(let-values(((rebuild-s_118)"
"(let-values(((init-ctx249_183) init-ctx_89)((s250_184) s_88))"
"(keep-as-needed55.1 #f #f init-ctx249_183 s250_184))))"
"(let-values(((initial-require_119)(syntax->datum$1 initial-require232_102)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_185) keep-enclosing-scope-at-phase_92))"
"(if or-part_185"
" or-part_185"
"(1/module-path? initial-require_119)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                         \"not a module path\""
" s_88"
" initial-require232_102)))"
"(values))))"
"(let-values(((phase_120) 0))"
"(let-values(((module-name-sym_121)(syntax-e$1 id:module-name231_101)))"
"(let-values(((outside-scope_122)(new-scope 'module)))"
"(let-values(((inside-scope_123)(new-multi-scope module-name-sym_121)))"
"(let-values(((self_124)"
"(make-self-module-path-index"
"(if enclosing-self_90"
" module-name-sym_121"
"(string->uninterned-symbol"
"(symbol->string module-name-sym_121)))"
" enclosing-self_90)))"
"(let-values(((enclosing-mod_125)"
"(if enclosing-self_90"
"                                                                (1/module-path-index-join '(submod \"..\") self_124)"
" #f)))"
"(let-values((()"
"(begin"
"(if(if enclosing-mod_125"
" mpis-for-enclosing-reset_96"
" #f)"
"(let-values()"
"(set-box!"
" mpis-for-enclosing-reset_96"
"(cons"
" enclosing-mod_125"
"(unbox mpis-for-enclosing-reset_96))))"
"(void))"
"(values))))"
"(let-values(((apply-module-scopes_126)"
"(make-apply-module-scopes"
" outside-scope_122"
" inside-scope_123"
" init-ctx_89"
" keep-enclosing-scope-at-phase_92"
" self_124"
" enclosing-self_90"
" enclosing-mod_125)))"
"(let-values(((initial-require-s_127)"
"(apply-module-scopes_126 initial-require232_102)))"
"(let-values(((all-scopes-s_128)"
"(if enclosing-all-scopes-stx_93"
"(apply-module-scopes_126"
"(syntax-shift-phase-level$1"
" enclosing-all-scopes-stx_93"
" keep-enclosing-scope-at-phase_92))"
" initial-require-s_127)))"
"(let-values(((root-ctx_129)"
"(let-values(((temp251_187)"
"(if keep-enclosing-scope-at-phase_92"
"(root-expand-context-module-scopes"
" init-ctx_89)"
" null))"
"((outside-scope252_188)"
" outside-scope_122)"
"((inside-scope253_189)"
" inside-scope_123)"
"((all-scopes-s254_190)"
" all-scopes-s_128))"
"(make-root-expand-context11.1"
" all-scopes-s254_190"
" #t"
" temp251_187"
" #t"
" outside-scope252_188"
" #t"
" inside-scope253_189"
" #t))))"
"(let-values(((new-module-scopes_130)"
"(root-expand-context-module-scopes"
" root-ctx_129)))"
"(let-values(((frame-id_131)"
"(root-expand-context-frame-id"
" root-ctx_129)))"
"(let-values(((make-m-ns246_133)"
"(lambda(for-submodule?243_191"
" for-submodule?244_192"
" ns245_193)"
"(let-values(((ns_194) ns245_193))"
"(let-values(((for-submodule?_195)"
"(if for-submodule?244_192"
" for-submodule?243_191"
"(if enclosing-self_90"
" #t"
" #f))))"
"(let-values()"
"(let-values(((ns255_197) ns_194)"
"((self256_198)"
" self_124)"
"((root-ctx257_199)"
" root-ctx_129)"
"((for-submodule?258_200)"
" for-submodule?_195))"
"(make-module-namespace48.1"
" for-submodule?258_200"
" self256_198"
" root-ctx257_199"
" ns255_197))))))))"
"(let-values(((unpack247_134)"
"(lambda(given-kws_201"
" given-args_202"
" ns245_203)"
"(let-values(((for-submodule?244_204)"
"(pair? given-kws_201)))"
"(let-values(((for-submodule?243_205)"
"(if for-submodule?244_204"
"(car given-args_202)"
"(void))))"
"(make-m-ns246_133"
" for-submodule?243_205"
" for-submodule?244_204"
" ns245_203))))))"
"(let-values(((make-m-ns248_135)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_206"
" given-argc_207)"
"(if(= given-argc_207 3)"
"(let-values(((l1_208)"
" given-kws_206))"
"(let-values(((l1_209)"
"(if(null?"
" l1_208)"
" l1_208"
"(if(eq?"
"(car"
" l1_208)"
" '#:for-submodule?)"
"(cdr l1_208)"
" l1_208))))"
"(null? l1_209)))"
" #f))"
"(case-lambda"
"((given-kws_210"
" given-args_211"
" ns_212)"
"(unpack247_134"
" given-kws_210"
" given-args_211"
" ns_212)))"
" null"
" '(#:for-submodule?)"
"(let-values(((make-m-ns_213)"
"(case-lambda"
"((ns_214)"
"(unpack247_134"
" null"
" null"
" ns_214)))))"
" make-m-ns_213))))"
"(let-values(((m-ns_136)"
"(let-values(((temp259_215)"
"(expand-context-namespace"
" init-ctx_89)))"
"(make-m-ns246_133"
" #f"
" #f"
" temp259_215))))"
"(let-values(((ctx_137)"
"(let-values(((v_216)"
"(copy-root-expand-context"
" init-ctx_89"
" root-ctx_129)))"
"(let-values(((the-struct_217)"
" v_216))"
"(if(expand-context/outer?"
" the-struct_217)"
"(let-values(((post-expansion-scope-action260_218)"
" add-scope)"
"((inner261_219)"
"(let-values(((the-struct_220)"
"(root-expand-context/outer-inner"
" v_216)))"
"(if(expand-context/inner?"
" the-struct_220)"
"(let-values(((allow-unbound?262_221)"
" #f)"
"((namespace263_222)"
" m-ns_136)"
"((phase264_223)"
" phase_120)"
"((just-once?265_224)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_220)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_220)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_220)"
"(root-expand-context/inner-defined-syms"
" the-struct_220)"
"(root-expand-context/inner-counter"
" the-struct_220)"
"(root-expand-context/inner-lift-key"
" the-struct_220)"
"(expand-context/inner-to-parsed?"
" the-struct_220)"
" phase264_223"
" namespace263_222"
"(expand-context/inner-user-env"
" the-struct_220)"
" just-once?265_224"
"(expand-context/inner-module-begin-k"
" the-struct_220)"
" allow-unbound?262_221"
"(expand-context/inner-in-local-expand?"
" the-struct_220)"
"(expand-context/inner-stops"
" the-struct_220)"
"(expand-context/inner-declared-submodule-names"
" the-struct_220)"
"(expand-context/inner-lifts"
" the-struct_220)"
"(expand-context/inner-lift-envs"
" the-struct_220)"
"(expand-context/inner-module-lifts"
" the-struct_220)"
"(expand-context/inner-require-lifts"
" the-struct_220)"
"(expand-context/inner-to-module-lifts"
" the-struct_220)"
"(expand-context/inner-requires+provides"
" the-struct_220)"
"(expand-context/inner-observer"
" the-struct_220)"
"(expand-context/inner-for-serializable?"
" the-struct_220)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                               \"expand-context/inner?\""
" the-struct_220)))))"
"(expand-context/outer1.1"
" inner261_219"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_217)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_217)"
"(root-expand-context/outer-frame-id"
" the-struct_217)"
"(expand-context/outer-context"
" the-struct_217)"
"(expand-context/outer-env"
" the-struct_217)"
" post-expansion-scope-action260_218"
"(expand-context/outer-scopes"
" the-struct_217)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_217)"
"(expand-context/outer-binding-layer"
" the-struct_217)"
"(expand-context/outer-reference-records"
" the-struct_217)"
"(expand-context/outer-only-immediate?"
" the-struct_217)"
"(expand-context/outer-need-eventually-defined"
" the-struct_217)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_217)"
"(expand-context/outer-name"
" the-struct_217)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                             \"expand-context/outer?\""
" the-struct_217))))))"
"(let-values(((bodys_138)"
"(let-values(((scoped-s_225)"
"(apply-module-scopes_126"
" disarmed-s_98)))"
"(let-values(((ok?_226"
" _266_227"
" _267_228"
" _268_229"
" body269_230)"
"(let-values(((s_245)"
" scoped-s_225))"
"(let-values(((orig-s_246)"
" s_245))"
"(let-values(((_266_247"
" _267_248"
" _268_249"
" body269_250)"
"(let-values(((s_251)"
"(if(syntax?$1"
" s_245)"
"(syntax-e$1"
" s_245)"
" s_245)))"
"(if(pair?"
" s_251)"
"(let-values(((_270_252)"
"(let-values(((s_256)"
"(car"
" s_251)))"
" s_256))"
"((_271_253"
" _272_254"
" body273_255)"
"(let-values(((s_257)"
"(cdr"
" s_251)))"
"(let-values(((s_258)"
"(if(syntax?$1"
" s_257)"
"(syntax-e$1"
" s_257)"
" s_257)))"
"(if(pair?"
" s_258)"
"(let-values(((_274_259)"
"(let-values(((s_262)"
"(car"
" s_258)))"
" s_262))"
"((_275_260"
" body276_261)"
"(let-values(((s_263)"
"(cdr"
" s_258)))"
"(let-values(((s_264)"
"(if(syntax?$1"
" s_263)"
"(syntax-e$1"
" s_263)"
" s_263)))"
"(if(pair?"
" s_264)"
"(let-values(((_277_265)"
"(let-values(((s_267)"
"(car"
" s_264)))"
" s_267))"
"((body278_266)"
"(let-values(((s_268)"
"(cdr"
" s_264)))"
"(let-values(((s_269)"
"(if(syntax?$1"
" s_268)"
"(syntax-e$1"
" s_268)"
" s_268)))"
"(let-values(((flat-s_270)"
"(to-syntax-list.1"
" s_269)))"
"(if(not"
" flat-s_270)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_246))"
"(let-values()"
" flat-s_270)))))))"
"(values"
" _277_265"
" body278_266))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_246))))))"
"(values"
" _274_259"
" _275_260"
" body276_261))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad syntax\""
" orig-s_246))))))"
"(values"
" _270_252"
" _271_253"
" _272_254"
" body273_255))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_246)))))"
"(values"
" #t"
" _266_247"
" _267_248"
" _268_249"
" body269_250))))))"
" body269_230))))"
"(let-values(((requires+provides_139)"
"(make-requires+provides"
" self_124)))"
"(let-values(((defined-syms_140)"
"(root-expand-context-defined-syms"
" root-ctx_129)))"
"(let-values(((compiled-submodules_141)"
"(make-hasheq)))"
"(let-values(((compiled-module-box_142)"
"(box #f)))"
"(let-values(((mpis-to-reset_143)"
"(box null)))"
"(let-values(((initial-require!_144)"
"(lambda()"
"(if(not"
" keep-enclosing-scope-at-phase_92)"
"(let-values()"
"(let-values(((initial-require279_272)"
" initial-require_119)"
"((self280_273)"
" self_124)"
"((all-scopes-s281_274)"
" all-scopes-s_128)"
"((m-ns282_275)"
" m-ns_136)"
"((requires+provides283_276)"
" requires+provides_139)"
"((temp284_277)"
" 'module))"
"(perform-initial-require!40.1"
" temp284_277"
" initial-require279_272"
" self280_273"
" all-scopes-s281_274"
" m-ns282_275"
" requires+provides283_276)))"
"(let-values()"
"(begin"
"(add-required-module!"
" requires+provides_139"
" enclosing-mod_125"
" keep-enclosing-scope-at-phase_92"
" enclosing-is-cross-phase-persistent?_94)"
"(let-values(((requires+provides285_279)"
" requires+provides_139)"
"((enclosing-r+p286_280)"
" enclosing-r+p_95)"
"((enclosing-mod287_281)"
" enclosing-mod_125)"
"((keep-enclosing-scope-at-phase288_282)"
" keep-enclosing-scope-at-phase_92))"
"(add-enclosing-module-defined-and-required!61.1"
" enclosing-r+p286_280"
" requires+provides285_279"
" enclosing-mod287_281"
" keep-enclosing-scope-at-phase288_282))"
"(let-values(((m-ns289_283)"
" m-ns_136)"
"((enclosing-mod290_284)"
" enclosing-mod_125)"
"((keep-enclosing-scope-at-phase291_285)"
" keep-enclosing-scope-at-phase_92))"
"(namespace-module-visit!102.1"
" #f"
" #f"
" m-ns289_283"
" enclosing-mod290_284"
" keep-enclosing-scope-at-phase291_285))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_286)"
"(expand-context-observer"
" init-ctx_89)))"
"(if obs_286"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_286"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(initial-require!_144)"
"(values))))"
"(let-values(((again?_145)"
" #f))"
"(let-values(((module-begin-k_146)"
"(lambda(mb-s_287"
" ctx_288)"
"(let-values((()"
"(begin"
"(if again?_145"
"(let-values()"
"(begin"
"(requires+provides-reset!"
" requires+provides_139)"
"(initial-require!_144)"
"(hash-clear!"
" compiled-submodules_141)"
"(set-box!"
" compiled-module-box_142"
" #f)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(set! again?_145"
" #t)"
"(values))))"
"(let-values(((added-s_289)"
"(add-scope"
" mb-s_287"
" inside-scope_123)))"
"(let-values((()"
"(begin"
"(let-values(((obs_317)"
"(expand-context-observer"
" ctx_288)))"
"(if obs_317"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_317"
" 'rename-one"
" added-s_289)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-mb-s_290)"
"(syntax-disarm$1"
" added-s_289)))"
"(let-values(((ok?_291"
" #%module-begin292_292"
" body293_293)"
"(let-values(((s_318)"
" disarmed-mb-s_290))"
"(let-values(((orig-s_319)"
" s_318))"
"(let-values(((#%module-begin292_320"
" body293_321)"
"(let-values(((s_322)"
"(if(syntax?$1"
" s_318)"
"(syntax-e$1"
" s_318)"
" s_318)))"
"(if(pair?"
" s_322)"
"(let-values(((#%module-begin294_323)"
"(let-values(((s_325)"
"(car"
" s_322)))"
" s_325))"
"((body295_324)"
"(let-values(((s_326)"
"(cdr"
" s_322)))"
"(let-values(((s_327)"
"(if(syntax?$1"
" s_326)"
"(syntax-e$1"
" s_326)"
" s_326)))"
"(let-values(((flat-s_328)"
"(to-syntax-list.1"
" s_327)))"
"(if(not"
" flat-s_328)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_319))"
"(let-values()"
" flat-s_328)))))))"
"(values"
" #%module-begin294_323"
" body295_324))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_319)))))"
"(values"
" #t"
" #%module-begin292_320"
" body293_321))))))"
"(let-values(((bodys_304)"
" body293_293))"
"(let-values(((rebuild-mb-s_305)"
"(let-values(((ctx296_329)"
" ctx_288)"
"((mb-s297_330)"
" mb-s_287))"
"(keep-as-needed55.1"
" #f"
" #f"
" ctx296_329"
" mb-s297_330))))"
"(let-values(((need-eventually-defined_306)"
"(make-hasheqv)))"
"(let-values(((module-ends_307)"
"(make-shared-module-ends)))"
"(let-values(((declared-keywords_308)"
"(make-hasheq)))"
"(let-values(((declared-submodule-names_309)"
"(make-hasheq)))"
"(let-values(((expression-expanded-bodys_310)"
"((letrec-values(((pass-1-and-2-loop_331)"
"(lambda(bodys_332"
" phase_333)"
"(let-values(((def-ctx-scopes_334)"
"(box"
" null)))"
"(let-values(((partial-body-ctx_335)"
"(let-values(((v_338)"
" ctx_288))"
"(let-values(((the-struct_339)"
" v_338))"
"(if(expand-context/outer?"
" the-struct_339)"
"(let-values(((context307_340)"
" 'module)"
"((only-immediate?308_341)"
" #t)"
"((def-ctx-scopes309_342)"
" def-ctx-scopes_334)"
"((need-eventually-defined310_343)"
" need-eventually-defined_306)"
"((inner311_344)"
"(let-values(((the-struct_345)"
"(root-expand-context/outer-inner"
" v_338)))"
"(if(expand-context/inner?"
" the-struct_345)"
"(let-values(((phase312_346)"
" phase_333)"
"((namespace313_347)"
"(namespace->namespace-at-phase"
" m-ns_136"
" phase_333))"
"((declared-submodule-names314_348)"
" declared-submodule-names_309)"
"((lifts315_349)"
"(let-values(((temp319_353)"
"(make-wrap-as-definition"
" self_124"
" frame-id_131"
" inside-scope_123"
" all-scopes-s_128"
" defined-syms_140"
" requires+provides_139)))"
"(make-lift-context6.1"
" #f"
" #f"
" temp319_353)))"
"((module-lifts316_350)"
"(make-module-lift-context"
" phase_333"
" #t))"
"((require-lifts317_351)"
"(make-require-lift-context"
" phase_333"
"(let-values(((...er/expand/module.rkt:292:64_354)"
" make-parse-lifted-require224.1)"
"((m-ns320_355)"
" m-ns_136)"
"((self321_356)"
" self_124)"
"((requires+provides322_357)"
" requires+provides_139)"
"((declared-submodule-names323_358)"
" declared-submodule-names_309))"
"(make-parse-lifted-require222.1"
" declared-submodule-names323_358"
" m-ns320_355"
" self321_356"
" requires+provides322_357))))"
"((to-module-lifts318_352)"
"(let-values(((phase324_360)"
" phase_333)"
"((module-ends325_361)"
" module-ends_307)"
"((temp326_362)"
" #f))"
"(make-to-module-lift-context26.1"
" temp326_362"
" module-ends325_361"
" phase324_360))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_345)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_345)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_345)"
"(root-expand-context/inner-defined-syms"
" the-struct_345)"
"(root-expand-context/inner-counter"
" the-struct_345)"
"(root-expand-context/inner-lift-key"
" the-struct_345)"
"(expand-context/inner-to-parsed?"
" the-struct_345)"
" phase312_346"
" namespace313_347"
"(expand-context/inner-user-env"
" the-struct_345)"
"(expand-context/inner-just-once?"
" the-struct_345)"
"(expand-context/inner-module-begin-k"
" the-struct_345)"
"(expand-context/inner-allow-unbound?"
" the-struct_345)"
"(expand-context/inner-in-local-expand?"
" the-struct_345)"
"(expand-context/inner-stops"
" the-struct_345)"
" declared-submodule-names314_348"
" lifts315_349"
"(expand-context/inner-lift-envs"
" the-struct_345)"
" module-lifts316_350"
" require-lifts317_351"
" to-module-lifts318_352"
"(expand-context/inner-requires+provides"
" the-struct_345)"
"(expand-context/inner-observer"
" the-struct_345)"
"(expand-context/inner-for-serializable?"
" the-struct_345)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                 \"expand-context/inner?\""
" the-struct_345)))))"
"(expand-context/outer1.1"
" inner311_344"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_339)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_339)"
"(root-expand-context/outer-frame-id"
" the-struct_339)"
" context307_340"
"(expand-context/outer-env"
" the-struct_339)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_339)"
"(expand-context/outer-scopes"
" the-struct_339)"
" def-ctx-scopes309_342"
"(expand-context/outer-binding-layer"
" the-struct_339)"
"(expand-context/outer-reference-records"
" the-struct_339)"
" only-immediate?308_341"
" need-eventually-defined310_343"
"(expand-context/outer-current-introduction-scopes"
" the-struct_339)"
"(expand-context/outer-name"
" the-struct_339)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                               \"expand-context/outer?\""
" the-struct_339))))))"
"(let-values(((partially-expanded-bodys_336)"
"(let-values(((...er/expand/module.rkt:302:11_363)"
" partially-expand-bodys83.1)"
"((bodys327_364)"
" bodys_332)"
"((temp328_365)"
"(zero?"
" phase_333))"
"((phase329_366)"
" phase_333)"
"((partial-body-ctx330_367)"
" partial-body-ctx_335)"
"((m-ns331_368)"
" m-ns_136)"
"((self332_369)"
" self_124)"
"((frame-id333_370)"
" frame-id_131)"
"((requires+provides334_371)"
" requires+provides_139)"
"((need-eventually-defined335_372)"
" need-eventually-defined_306)"
"((all-scopes-s336_373)"
" all-scopes-s_128)"
"((defined-syms337_374)"
" defined-syms_140)"
"((declared-keywords338_375)"
" declared-keywords_308)"
"((declared-submodule-names339_376)"
" declared-submodule-names_309)"
"((compiled-submodules340_377)"
" compiled-submodules_141)"
"((modules-being-compiled341_378)"
" modules-being-compiled_97)"
"((mpis-to-reset342_379)"
" mpis-to-reset_143)"
"((pass-1-and-2-loop343_380)"
" pass-1-and-2-loop_331))"
"(partially-expand-bodys81.1"
" all-scopes-s336_373"
" compiled-submodules340_377"
" partial-body-ctx330_367"
" declared-keywords338_375"
" declared-submodule-names339_376"
" defined-syms337_374"
" frame-id333_370"
" pass-1-and-2-loop343_380"
" modules-being-compiled341_378"
" mpis-to-reset342_379"
" m-ns331_368"
" need-eventually-defined335_372"
" phase329_366"
" requires+provides334_371"
" self332_369"
" temp328_365"
" bodys327_364))))"
"(let-values((()"
"(begin"
"(let-values(((obs_381)"
"(expand-context-observer"
" partial-body-ctx_335)))"
"(if obs_381"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_381"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_337)"
"(let-values(((v_382)"
"(accumulate-def-ctx-scopes"
" partial-body-ctx_335"
" def-ctx-scopes_334)))"
"(let-values(((the-struct_383)"
" v_382))"
"(if(expand-context/outer?"
" the-struct_383)"
"(let-values(((only-immediate?344_384)"
" #f)"
"((def-ctx-scopes345_385)"
" #f)"
"((post-expansion-scope346_386)"
" #f)"
"((inner347_387)"
"(let-values(((the-struct_388)"
"(root-expand-context/outer-inner"
" v_382)))"
"(if(expand-context/inner?"
" the-struct_388)"
"(let-values(((to-module-lifts348_389)"
"(let-values(((phase349_391)"
" phase_333)"
"((module-ends350_392)"
" module-ends_307)"
"((temp351_393)"
" #t))"
"(make-to-module-lift-context26.1"
" temp351_393"
" module-ends350_392"
" phase349_391))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_388)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_388)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_388)"
"(root-expand-context/inner-defined-syms"
" the-struct_388)"
"(root-expand-context/inner-counter"
" the-struct_388)"
"(root-expand-context/inner-lift-key"
" the-struct_388)"
"(expand-context/inner-to-parsed?"
" the-struct_388)"
"(expand-context/inner-phase"
" the-struct_388)"
"(expand-context/inner-namespace"
" the-struct_388)"
"(expand-context/inner-user-env"
" the-struct_388)"
"(expand-context/inner-just-once?"
" the-struct_388)"
"(expand-context/inner-module-begin-k"
" the-struct_388)"
"(expand-context/inner-allow-unbound?"
" the-struct_388)"
"(expand-context/inner-in-local-expand?"
" the-struct_388)"
"(expand-context/inner-stops"
" the-struct_388)"
"(expand-context/inner-declared-submodule-names"
" the-struct_388)"
"(expand-context/inner-lifts"
" the-struct_388)"
"(expand-context/inner-lift-envs"
" the-struct_388)"
"(expand-context/inner-module-lifts"
" the-struct_388)"
"(expand-context/inner-require-lifts"
" the-struct_388)"
" to-module-lifts348_389"
"(expand-context/inner-requires+provides"
" the-struct_388)"
"(expand-context/inner-observer"
" the-struct_388)"
"(expand-context/inner-for-serializable?"
" the-struct_388)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                       \"expand-context/inner?\""
" the-struct_388)))))"
"(expand-context/outer1.1"
" inner347_387"
" post-expansion-scope346_386"
"(root-expand-context/outer-use-site-scopes"
" the-struct_383)"
"(root-expand-context/outer-frame-id"
" the-struct_383)"
"(expand-context/outer-context"
" the-struct_383)"
"(expand-context/outer-env"
" the-struct_383)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_383)"
"(expand-context/outer-scopes"
" the-struct_383)"
" def-ctx-scopes345_385"
"(expand-context/outer-binding-layer"
" the-struct_383)"
"(expand-context/outer-reference-records"
" the-struct_383)"
" only-immediate?344_384"
"(expand-context/outer-need-eventually-defined"
" the-struct_383)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_383)"
"(expand-context/outer-name"
" the-struct_383)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                     \"expand-context/outer?\""
" the-struct_383))))))"
"(let-values(((...er/expand/module.rkt:333:9_394)"
" finish-expanding-body-expressons103.1)"
"((partially-expanded-bodys298_395)"
" partially-expanded-bodys_336)"
"((temp299_396)"
"(zero?"
" phase_333))"
"((phase300_397)"
" phase_333)"
"((body-ctx301_398)"
" body-ctx_337)"
"((self302_399)"
" self_124)"
"((declared-submodule-names303_400)"
" declared-submodule-names_309)"
"((compiled-submodules304_401)"
" compiled-submodules_141)"
"((modules-being-compiled305_402)"
" modules-being-compiled_97)"
"((mpis-to-reset306_403)"
" mpis-to-reset_143))"
"(finish-expanding-body-expressons101.1"
" compiled-submodules304_401"
" body-ctx301_398"
" declared-submodule-names303_400"
" modules-being-compiled305_402"
" mpis-to-reset306_403"
" phase300_397"
" self302_399"
" temp299_396"
" partially-expanded-bodys298_395))))))))))"
" pass-1-and-2-loop_331)"
" bodys_304"
" phase_120)))"
"(let-values((()"
"(begin"
"(check-defined-by-now"
" need-eventually-defined_306"
" self_124)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_404)"
"(expand-context-observer"
" ctx_288)))"
"(if obs_404"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_404"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((fully-expanded-bodys-except-post-submodules_311)"
"(let-values(((...er/expand/module.rkt:352:7_405)"
" resolve-provides119.1)"
"((expression-expanded-bodys352_406)"
" expression-expanded-bodys_310)"
"((requires+provides353_407)"
" requires+provides_139)"
"((declared-submodule-names354_408)"
" declared-submodule-names_309)"
"((m-ns355_409)"
" m-ns_136)"
"((phase356_410)"
" phase_120)"
"((self357_411)"
" self_124)"
"((ctx358_412)"
" ctx_288))"
"(resolve-provides117.1"
" ctx358_412"
" declared-submodule-names354_408"
" m-ns355_409"
" phase356_410"
" requires+provides353_407"
" self357_411"
" expression-expanded-bodys352_406))))"
"(let-values(((is-cross-phase-persistent?_312)"
"(hash-ref"
" declared-keywords_308"
" '#:cross-phase-persistent"
" #f)))"
"(let-values((()"
"(begin"
"(if is-cross-phase-persistent?_312"
"(let-values()"
"(begin"
"(if(requires+provides-can-cross-phase-persistent?"
" requires+provides_139)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"cannot be cross-phase persistent due to required modules\""
" s_88"
"(hash-ref"
" declared-keywords_308"
" '#:cross-phase-persistent))))"
"(check-cross-phase-persistent-form"
" fully-expanded-bodys-except-post-submodules_311)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_413)"
"(expand-context-observer"
" ctx_288)))"
"(if obs_413"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_413"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((submod-m-ns_313)"
"(let-values(((m-ns359_415)"
" m-ns_136)"
"((temp360_416)"
" #t))"
"(make-m-ns246_133"
" temp360_416"
" #t"
" m-ns359_415))))"
"(let-values(((submod-ctx_314)"
"(let-values(((v_417)"
" ctx_288))"
"(let-values(((the-struct_418)"
" v_417))"
"(if(expand-context/outer?"
" the-struct_418)"
"(let-values(((frame-id361_419)"
" #f)"
"((post-expansion-scope362_420)"
" #f)"
"((inner363_421)"
"(let-values(((the-struct_422)"
"(root-expand-context/outer-inner"
" v_417)))"
"(if(expand-context/inner?"
" the-struct_422)"
"(let-values(((namespace364_423)"
" submod-m-ns_313))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_422)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_422)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_422)"
"(root-expand-context/inner-defined-syms"
" the-struct_422)"
"(root-expand-context/inner-counter"
" the-struct_422)"
"(root-expand-context/inner-lift-key"
" the-struct_422)"
"(expand-context/inner-to-parsed?"
" the-struct_422)"
"(expand-context/inner-phase"
" the-struct_422)"
" namespace364_423"
"(expand-context/inner-user-env"
" the-struct_422)"
"(expand-context/inner-just-once?"
" the-struct_422)"
"(expand-context/inner-module-begin-k"
" the-struct_422)"
"(expand-context/inner-allow-unbound?"
" the-struct_422)"
"(expand-context/inner-in-local-expand?"
" the-struct_422)"
"(expand-context/inner-stops"
" the-struct_422)"
"(expand-context/inner-declared-submodule-names"
" the-struct_422)"
"(expand-context/inner-lifts"
" the-struct_422)"
"(expand-context/inner-lift-envs"
" the-struct_422)"
"(expand-context/inner-module-lifts"
" the-struct_422)"
"(expand-context/inner-require-lifts"
" the-struct_422)"
"(expand-context/inner-to-module-lifts"
" the-struct_422)"
"(expand-context/inner-requires+provides"
" the-struct_422)"
"(expand-context/inner-observer"
" the-struct_422)"
"(expand-context/inner-for-serializable?"
" the-struct_422)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                             \"expand-context/inner?\""
" the-struct_422)))))"
"(expand-context/outer1.1"
" inner363_421"
" post-expansion-scope362_420"
"(root-expand-context/outer-use-site-scopes"
" the-struct_418)"
" frame-id361_419"
"(expand-context/outer-context"
" the-struct_418)"
"(expand-context/outer-env"
" the-struct_418)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_418)"
"(expand-context/outer-scopes"
" the-struct_418)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_418)"
"(expand-context/outer-binding-layer"
" the-struct_418)"
"(expand-context/outer-reference-records"
" the-struct_418)"
"(expand-context/outer-only-immediate?"
" the-struct_418)"
"(expand-context/outer-need-eventually-defined"
" the-struct_418)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_418)"
"(expand-context/outer-name"
" the-struct_418)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                           \"expand-context/outer?\""
" the-struct_418))))))"
"(let-values(((declare-enclosing-module_315)"
"(delay"
"(lambda()"
"(let-values(((...er/expand/module.rkt:384:14_424)"
" declare-module-for-expansion143.1)"
"((fully-expanded-bodys-except-post-submodules365_425)"
" fully-expanded-bodys-except-post-submodules_311)"
"((temp366_426)"
" id:module-name231_101)"
"((rebuild-s367_427)"
" rebuild-s_118)"
"((requires+provides368_428)"
" requires+provides_139)"
"((submod-m-ns369_429)"
" submod-m-ns_313)"
"((self370_430)"
" self_124)"
"((enclosing-self371_431)"
" enclosing-self_90)"
"((root-ctx372_432)"
" root-ctx_129)"
"((submod-ctx373_433)"
" submod-ctx_314)"
"((modules-being-compiled374_434)"
" modules-being-compiled_97)"
"((compiled-module-box375_435)"
" compiled-module-box_142))"
"(declare-module-for-expansion141.1"
" submod-ctx373_433"
" enclosing-self371_431"
" compiled-module-box375_435"
" temp366_426"
" modules-being-compiled374_434"
" submod-m-ns369_429"
" rebuild-s367_427"
" requires+provides368_428"
" root-ctx372_432"
" self370_430"
" fully-expanded-bodys-except-post-submodules365_425))))))"
"(let-values(((fully-expanded-bodys_316)"
"(if(stop-at-module*?"
" submod-ctx_314)"
"(let-values()"
" fully-expanded-bodys-except-post-submodules_311)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:401:9_436)"
" expand-post-submodules169.1)"
"((fully-expanded-bodys-except-post-submodules376_437)"
" fully-expanded-bodys-except-post-submodules_311)"
"((declare-enclosing-module377_438)"
" declare-enclosing-module_315)"
"((phase378_439)"
" phase_120)"
"((self379_440)"
" self_124)"
"((requires+provides380_441)"
" requires+provides_139)"
"((is-cross-phase-persistent?381_442)"
" is-cross-phase-persistent?_312)"
"((all-scopes-s382_443)"
" all-scopes-s_128)"
"((mpis-to-reset383_444)"
" mpis-to-reset_143)"
"((declared-submodule-names384_445)"
" declared-submodule-names_309)"
"((compiled-submodules385_446)"
" compiled-submodules_141)"
"((modules-being-compiled386_447)"
" modules-being-compiled_97)"
"((submod-ctx387_448)"
" submod-ctx_314))"
"(expand-post-submodules167.1"
" all-scopes-s382_443"
" compiled-submodules385_446"
" submod-ctx387_448"
" declare-enclosing-module377_438"
" declared-submodule-names384_445"
" is-cross-phase-persistent?381_442"
" modules-being-compiled386_447"
" mpis-to-reset383_444"
" phase378_439"
" requires+provides380_441"
" self379_440"
" fully-expanded-bodys-except-post-submodules376_437))))))"
"(if(expand-context-to-parsed?"
" submod-ctx_314)"
"(let-values()"
"(parsed-#%module-begin24.1"
" rebuild-mb-s_305"
"(parsed-only"
" fully-expanded-bodys_316)))"
"(let-values()"
"(let-values(((mb-result-s_449)"
"(let-values(((rebuild-mb-s388_450)"
" rebuild-mb-s_305)"
"((temp389_451)"
"(list*"
" #%module-begin292_292"
"(syntax-only"
" fully-expanded-bodys_316))))"
"(rebuild62.1"
" #f"
" #f"
" rebuild-mb-s388_450"
" temp389_451))))"
"(if(not"
"(expand-context-in-local-expand?"
" submod-ctx_314))"
"(let-values()"
"(expanded+parsed1.1"
" mb-result-s_449"
"(parsed-#%module-begin24.1"
" rebuild-mb-s_305"
"(parsed-only"
" fully-expanded-bodys_316))))"
"(let-values()"
" mb-result-s_449)))))))))))))))))))))))))))))))"
"(let-values(((mb-ctx_147)"
"(let-values(((v_452)"
" ctx_137))"
"(let-values(((the-struct_453)"
" v_452))"
"(if(expand-context/outer?"
" the-struct_453)"
"(let-values(((context390_454)"
" 'module-begin)"
"((inner391_455)"
"(let-values(((the-struct_456)"
"(root-expand-context/outer-inner"
" v_452)))"
"(if(expand-context/inner?"
" the-struct_456)"
"(let-values(((module-begin-k392_457)"
" module-begin-k_146)"
"((in-local-expand?393_458)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_456)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_456)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_456)"
"(root-expand-context/inner-defined-syms"
" the-struct_456)"
"(root-expand-context/inner-counter"
" the-struct_456)"
"(root-expand-context/inner-lift-key"
" the-struct_456)"
"(expand-context/inner-to-parsed?"
" the-struct_456)"
"(expand-context/inner-phase"
" the-struct_456)"
"(expand-context/inner-namespace"
" the-struct_456)"
"(expand-context/inner-user-env"
" the-struct_456)"
"(expand-context/inner-just-once?"
" the-struct_456)"
" module-begin-k392_457"
"(expand-context/inner-allow-unbound?"
" the-struct_456)"
" in-local-expand?393_458"
"(expand-context/inner-stops"
" the-struct_456)"
"(expand-context/inner-declared-submodule-names"
" the-struct_456)"
"(expand-context/inner-lifts"
" the-struct_456)"
"(expand-context/inner-lift-envs"
" the-struct_456)"
"(expand-context/inner-module-lifts"
" the-struct_456)"
"(expand-context/inner-require-lifts"
" the-struct_456)"
"(expand-context/inner-to-module-lifts"
" the-struct_456)"
"(expand-context/inner-requires+provides"
" the-struct_456)"
"(expand-context/inner-observer"
" the-struct_456)"
"(expand-context/inner-for-serializable?"
" the-struct_456)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                       \"expand-context/inner?\""
" the-struct_456)))))"
"(expand-context/outer1.1"
" inner391_455"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_453)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_453)"
"(root-expand-context/outer-frame-id"
" the-struct_453)"
" context390_454"
"(expand-context/outer-env"
" the-struct_453)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_453)"
"(expand-context/outer-scopes"
" the-struct_453)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_453)"
"(expand-context/outer-binding-layer"
" the-struct_453)"
"(expand-context/outer-reference-records"
" the-struct_453)"
"(expand-context/outer-only-immediate?"
" the-struct_453)"
"(expand-context/outer-need-eventually-defined"
" the-struct_453)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_453)"
"(expand-context/outer-name"
" the-struct_453)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                     \"expand-context/outer?\""
" the-struct_453))))))"
"(let-values(((mb-scopes-s_148)"
"(if keep-enclosing-scope-at-phase_92"
" disarmed-s_98"
" all-scopes-s_128)))"
"(let-values(((mb_149)"
"(let-values(((...er/expand/module.rkt:454:5_459)"
" ensure-module-begin36.1)"
"((bodys394_460)"
" bodys_138)"
"((module-name-sym395_461)"
" module-name-sym_121)"
"((mb-scopes-s396_462)"
" mb-scopes-s_148)"
"((m-ns397_463)"
" m-ns_136)"
"((mb-ctx398_464)"
" mb-ctx_147)"
"((phase399_465)"
" phase_120)"
"((s400_466)"
" s_88))"
"(ensure-module-begin34.1"
" mb-ctx398_464"
" m-ns397_463"
" module-name-sym395_461"
" phase399_465"
" s400_466"
" mb-scopes-s396_462"
" bodys394_460))))"
"(let-values(((expanded-mb_150)"
"(let-values()"
"(let-values(((mb401_467)"
" mb_149)"
"((mb-ctx402_468)"
" mb-ctx_147))"
"(expand5.1"
" #f"
" #f"
" mb401_467"
" mb-ctx402_468)))))"
"(let-values(((requires_151"
" provides_152)"
"(extract-requires-and-provides"
" requires+provides_139"
" self_124"
" self_124)))"
"(let-values(((result-form_153)"
"(if(let-values(((or-part_469)"
"(expand-context-to-parsed?"
" init-ctx_89)))"
"(if or-part_469"
" or-part_469"
" always-produce-compiled?_91))"
"(parsed-module25.1"
" rebuild-s_118"
" #f"
" id:module-name231_101"
" self_124"
" requires_151"
" provides_152"
"(requires+provides-all-bindings-simple?"
" requires+provides_139)"
"(root-expand-context-encode-for-module"
" root-ctx_129"
" self_124"
" self_124)"
"(parsed-#%module-begin-body"
"(if(expanded+parsed?"
" expanded-mb_150)"
"(expanded+parsed-parsed"
" expanded-mb_150)"
" expanded-mb_150))"
"(unbox"
" compiled-module-box_142)"
" compiled-submodules_141)"
" #f)))"
"(let-values(((result-s_154)"
"(if(not"
"(expand-context-to-parsed?"
" init-ctx_89))"
"(let-values()"
"(let-values(((generic-self_470)"
"(make-generic-self-module-path-index"
" self_124)))"
"(begin"
"(imitate-generic-module-path-index!"
" self_124)"
"(let-values(((lst_471)"
"(unbox"
" mpis-to-reset_143)))"
"(begin"
"(if(list?"
" lst_471)"
"(void)"
"(let-values()"
"(in-list"
" lst_471)))"
"((letrec-values(((for-loop_472)"
"(lambda(lst_473)"
"(if(pair?"
" lst_473)"
"(let-values(((mpi_474)"
"(unsafe-car"
" lst_473))"
"((rest_475)"
"(unsafe-cdr"
" lst_473)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(imitate-generic-module-path-index!"
" mpi_474))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_472"
" rest_475)"
"(values))))"
"(values)))))"
" for-loop_472)"
" lst_471)))"
"(void)"
"(let-values(((result-s_476)"
"(let-values(((rebuild-s403_477)"
" rebuild-s_118)"
"((temp404_478)"
"(list"
" module230_100"
" id:module-name231_101"
" initial-require-s_127"
"(expanded+parsed-s"
" expanded-mb_150))))"
"(rebuild62.1"
" #f"
" #f"
" rebuild-s403_477"
" temp404_478))))"
"(let-values(((result-s_479)"
"(let-values(((result-s405_480)"
" result-s_476)"
"((self406_481)"
" self_124)"
"((generic-self407_482)"
" generic-self_470))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" result-s405_480"
" self406_481"
" generic-self407_482"
" #f"
" #f))))"
"(let-values(((result-s_483)"
"(attach-root-expand-context-properties"
" result-s_479"
" root-ctx_129"
" self_124"
" generic-self_470)))"
"(let-values(((result-s_484)"
"(if(requires+provides-all-bindings-simple?"
" requires+provides_139)"
"(syntax-property$1"
" result-s_483"
" 'module-body-context-simple?"
" #t)"
" result-s_483)))"
"(begin"
"(let-values(((obs_485)"
"(expand-context-observer"
" init-ctx_89)))"
"(if obs_485"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_485"
" 'rename-one"
" result-s_484)))"
"(void)))"
" result-s_484))))))))"
"(void))))"
"(if(expand-context-to-parsed?"
" init-ctx_89)"
"(let-values()"
" result-form_153)"
"(if always-produce-compiled?_91"
"(let-values()"
"(expanded+parsed1.1"
" result-s_154"
" result-form_153))"
"(let-values()"
" result-s_154))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(lifted/1.1 lifted/2.1 lifted/3.1 lifted/4.1 lifted/5.1)"
"(make-struct-type"
" 'ensure-module-begin"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'ensure-module-begin(case-lambda((self_542 bodys_543)(apply missing-kw self_542 bodys_543 null))))))"
"(current-inspector)"
"(case-lambda((self_544 bodys_545)(apply missing-kw self_544 bodys_545 null)))))"
"(define-values"
"(ensure-module-begin34.1)"
"(lambda(ctx24_546 m-ns23_547 module-name-sym21_548 phase25_549 s26_550 scopes-s22_551 bodys33_552)"
"(let-values(((bodys_553) bodys33_552))"
"(let-values(((module-name-sym_554) module-name-sym21_548))"
"(let-values(((scopes-s_555) scopes-s22_551))"
"(let-values()"
"(let-values(((ctx_557) ctx24_546))"
"(let-values(((phase_558) phase25_549))"
"(let-values(((s_559) s26_550))"
"(let-values()"
"(let-values(((make-mb-ctx_560)"
"(lambda()"
"(let-values(((v_562) ctx_557))"
"(let-values(((the-struct_563) v_562))"
"(if(expand-context/outer? the-struct_563)"
"(let-values(((context408_564) 'module-begin)"
"((only-immediate?409_565) #t)"
"((inner410_566)(root-expand-context/outer-inner v_562)))"
"(expand-context/outer1.1"
" inner410_566"
"(root-expand-context/outer-post-expansion-scope the-struct_563)"
"(root-expand-context/outer-use-site-scopes the-struct_563)"
"(root-expand-context/outer-frame-id the-struct_563)"
" context408_564"
"(expand-context/outer-env the-struct_563)"
"(expand-context/outer-post-expansion-scope-action the-struct_563)"
"(expand-context/outer-scopes the-struct_563)"
"(expand-context/outer-def-ctx-scopes the-struct_563)"
"(expand-context/outer-binding-layer the-struct_563)"
"(expand-context/outer-reference-records the-struct_563)"
" only-immediate?409_565"
"(expand-context/outer-need-eventually-defined the-struct_563)"
"(expand-context/outer-current-introduction-scopes the-struct_563)"
"(expand-context/outer-name the-struct_563)))"
"(raise-argument-error"
" 'struct-copy"
"                                           \"expand-context/outer?\""
" the-struct_563)))))))"
"(let-values(((mb_561)"
"(if(= 1(length bodys_553))"
"(let-values()"
"(begin"
"(let-values(((obs_567)(expand-context-observer ctx_557)))"
"(if obs_567"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_567 'rename-one(car bodys_553))))"
"(void)))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1(car bodys_553)) phase_558))"
"(let-values()(car bodys_553))"
"(let-values()"
"(let-values(((partly-expanded-body_568)"
"(let-values()"
"(let-values(((temp411_569)"
"(add-enclosing-name-property"
"(car bodys_553)"
" module-name-sym_554))"
"((temp412_570)(make-mb-ctx_560)))"
"(expand5.1 #f #f temp411_569 temp412_570)))))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym"
"(syntax-disarm$1 partly-expanded-body_568)"
" phase_558))"
"(let-values() partly-expanded-body_568)"
"(let-values()"
"(let-values(((temp413_572)(list partly-expanded-body_568))"
"((s414_573) s_559)"
"((scopes-s415_574) scopes-s_555)"
"((phase416_575) phase_558)"
"((module-name-sym417_576) module-name-sym_554)"
"((temp418_577)(make-mb-ctx_560))"
"((temp419_578) #f))"
"(add-module-begin45.1"
" temp419_578"
" #t"
" temp413_572"
" s414_573"
" scopes-s415_574"
" phase416_575"
" module-name-sym417_576"
" temp418_577)))))))))"
"(let-values()"
"(let-values(((bodys420_579) bodys_553)"
"((s421_580) s_559)"
"((scopes-s422_581) scopes-s_555)"
"((phase423_582) phase_558)"
"((module-name-sym424_583) module-name-sym_554)"
"((temp425_584)(make-mb-ctx_560)))"
"(add-module-begin45.1"
" #f"
" #f"
" bodys420_579"
" s421_580"
" scopes-s422_581"
" phase423_582"
" module-name-sym424_583"
" temp425_584))))))"
"(add-enclosing-name-property mb_561 module-name-sym_554)))))))))))))"
"(define-values"
"(unpack35.1)"
"(lambda(given-kws_585 given-args_586 bodys33_587)"
"(let-values(((ctx24_588)(car given-args_586))"
"((given-kws_589)(cdr given-kws_585))"
"((given-args_590)(cdr given-args_586)))"
"(let-values(((m-ns23_591)(car given-args_590))"
"((given-kws_592)(cdr given-kws_589))"
"((given-args_593)(cdr given-args_590)))"
"(let-values(((module-name-sym21_594)(car given-args_593))"
"((given-kws_595)(cdr given-kws_592))"
"((given-args_596)(cdr given-args_593)))"
"(let-values(((phase25_597)(car given-args_596))"
"((given-kws_598)(cdr given-kws_595))"
"((given-args_599)(cdr given-args_596)))"
"(let-values(((s26_600)(car given-args_599))"
"((given-kws_601)(cdr given-kws_598))"
"((given-args_602)(cdr given-args_599)))"
"(let-values(((scopes-s22_603)(car given-args_602)))"
"(ensure-module-begin34.1"
" ctx24_588"
" m-ns23_591"
" module-name-sym21_594"
" phase25_597"
" s26_600"
" scopes-s22_603"
" bodys33_587)))))))))"
"(define-values"
"(ensure-module-begin36.1)"
"(lifted/2.1"
"(lambda(given-kws_604 given-argc_605)"
"(if(= given-argc_605 3)"
"(let-values(((l2_606) given-kws_604))"
"(if(pair? l2_606)"
"(if(eq?(car l2_606) '#:ctx)"
"(let-values(((l2_607)(cdr l2_606)))"
"(if(pair? l2_607)"
"(if(eq?(car l2_607) '#:m-ns)"
"(let-values(((l2_608)(cdr l2_607)))"
"(if(pair? l2_608)"
"(if(eq?(car l2_608) '#:module-name-sym)"
"(let-values(((l2_609)(cdr l2_608)))"
"(if(pair? l2_609)"
"(if(eq?(car l2_609) '#:phase)"
"(let-values(((l2_610)(cdr l2_609)))"
"(if(pair? l2_610)"
"(if(eq?(car l2_610) '#:s)"
"(let-values(((l2_611)(cdr l2_610)))"
"(if(pair? l2_611)"
"(if(eq?(car l2_611) '#:scopes-s)(null?(cdr l2_611)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_612 given-args_613 bodys_614)(unpack35.1 given-kws_612 given-args_613 bodys_614)))"
" '(#:ctx #:m-ns #:module-name-sym #:phase #:s #:scopes-s)"
" '(#:ctx #:m-ns #:module-name-sym #:phase #:s #:scopes-s)))"
"(define-values"
"(add-module-begin45.1)"
"(lambda(log-rename-one?37_615"
" log-rename-one?38_616"
" bodys39_617"
" s40_618"
" scopes-s41_619"
" phase42_620"
" module-name-sym43_621"
" mb-ctx44_622)"
"(let-values(((bodys_623) bodys39_617))"
"(let-values(((s_624) s40_618))"
"(let-values(((scopes-s_625) scopes-s41_619))"
"(let-values(((phase_626) phase42_620))"
"(let-values(((module-name-sym_627) module-name-sym43_621))"
"(let-values(((mb-ctx_628) mb-ctx44_622))"
"(let-values(((log-rename-one?_629)(if log-rename-one?38_616 log-rename-one?37_615 #t)))"
"(let-values()"
"(let-values(((disarmed-scopes-s_630)(syntax-disarm$1 scopes-s_625)))"
"(let-values(((mb-id_631)(datum->syntax$1 disarmed-scopes-s_630 '#%module-begin)))"
"(let-values((()"
"(begin"
"(if(let-values(((mb-id426_634) mb-id_631)((phase427_635) phase_626))"
"(resolve29.1 #f #f #f #f #f #f #f #f mb-id426_634 phase427_635))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                             \"no #%module-begin binding in the module's language\""
" s_624)))"
"(values))))"
"(let-values(((mb_632)"
"(datum->syntax$1 disarmed-scopes-s_630(list* mb-id_631 bodys_623) s_624)))"
"(let-values((()"
"(begin"
"(let-values(((obs_636)(expand-context-observer mb-ctx_628)))"
"(if obs_636"
"(let-values()"
"(let-values()(call-expand-observe obs_636 'tag mb_632)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if log-rename-one?_629"
"(let-values()"
"(let-values(((obs_637)(expand-context-observer mb-ctx_628)))"
"(if obs_637"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_637 'rename-one mb_632)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((partly-expanded-mb_633)"
"(let-values()"
"(let-values(((temp428_638)"
"(add-enclosing-name-property mb_632 module-name-sym_627))"
"((mb-ctx429_639) mb-ctx_628))"
"(expand5.1 #f #f temp428_638 mb-ctx429_639)))))"
"(begin"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-mb_633) phase_626))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                         \"expansion of #%module-begin is not a #%plain-module-begin form\""
" s_624"
" partly-expanded-mb_633)))"
" partly-expanded-mb_633))))))))))))))))))"
"(define-values"
"(add-enclosing-name-property)"
"(lambda(stx_669 module-name-sym_670)(syntax-property$1 stx_669 'enclosing-module-name module-name-sym_670)))"
"(define-values"
"(make-apply-module-scopes)"
"(lambda(inside-scope_671"
" outside-scope_672"
" init-ctx_673"
" keep-enclosing-scope-at-phase_674"
" self_675"
" enclosing-self_676"
" enclosing-mod_677)"
"(lambda(s_678)"
"(let-values()"
"(let-values(((s-without-enclosing_679)"
"(if keep-enclosing-scope-at-phase_674"
" s_678"
"(remove-use-site-scopes"
"(remove-scopes s_678(root-expand-context-module-scopes init-ctx_673))"
" init-ctx_673))))"
"(let-values(((s-with-edges_680)"
"(add-scope(add-scope s-without-enclosing_679 outside-scope_672) inside-scope_671)))"
"(let-values(((s-with-suitable-enclosing_681)"
"(if keep-enclosing-scope-at-phase_674"
"(let-values()"
"(let-values(((s-with-edges434_682) s-with-edges_680)"
"((enclosing-self435_683) enclosing-self_676)"
"((enclosing-mod436_684) enclosing-mod_677))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" s-with-edges434_682"
" enclosing-self435_683"
" enclosing-mod436_684"
" #f"
" #f)))"
"(let-values() s-with-edges_680))))"
"(let-values(((s-with-suitable-enclosing430_685) s-with-suitable-enclosing_681)"
"((temp431_686)(make-generic-self-module-path-index self_675))"
"((self432_687) self_675)"
"((temp433_688)(current-code-inspector)))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" s-with-suitable-enclosing430_685"
" temp431_686"
" self432_687"
" temp433_688"
" #t)))))))))"
"(define-values"
"(lifted/6.1 lifted/7.1 lifted/8.1 lifted/9.1 lifted/10.1)"
"(make-struct-type"
" 'partially-expand-bodys"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons 'partially-expand-bodys(case-lambda((self_689 bodys_690)(apply missing-kw self_689 bodys_690 null))))))"
"(current-inspector)"
"(case-lambda((self_691 bodys_692)(apply missing-kw self_691 bodys_692 null)))))"
"(define-values"
"(partially-expand-bodys81.1)"
"(lambda(all-scopes-stx56_693"
" compiled-submodules60_694"
" ctx50_695"
" declared-keywords58_696"
" declared-submodule-names59_697"
" defined-syms57_698"
" frame-id53_699"
" loop63_700"
" modules-being-compiled61_701"
" mpis-to-reset62_702"
" namespace51_703"
" need-eventually-defined55_704"
" phase49_705"
" requires-and-provides54_706"
" self52_707"
" tail?48_708"
" bodys80_709)"
"(let-values(((bodys_710) bodys80_709))"
"(let-values(((tail?_711) tail?48_708))"
"(let-values(((phase_712) phase49_705))"
"(let-values(((partial-body-ctx_713) ctx50_695))"
"(let-values(((m-ns_714) namespace51_703))"
"(let-values(((self_715) self52_707))"
"(let-values(((frame-id_716) frame-id53_699))"
"(let-values(((requires+provides_717) requires-and-provides54_706))"
"(let-values(((need-eventually-defined_718) need-eventually-defined55_704))"
"(let-values(((all-scopes-stx_719) all-scopes-stx56_693))"
"(let-values(((defined-syms_720) defined-syms57_698))"
"(let-values(((declared-keywords_721) declared-keywords58_696))"
"(let-values(((declared-submodule-names_722) declared-submodule-names59_697))"
"(let-values(((compiled-submodules_723) compiled-submodules60_694))"
"(let-values(((modules-being-compiled_724) modules-being-compiled61_701))"
"(let-values(((mpis-to-reset_725) mpis-to-reset62_702))"
"(let-values(((pass-1-and-2-loop_726) loop63_700))"
"(let-values()"
"(begin"
"(namespace-visit-available-modules! m-ns_714 phase_712)"
"((letrec-values(((loop_727)"
"(lambda(tail?_728 bodys_729)"
"(if(null? bodys_729)"
"(let-values()"
"(if tail?_728"
"(let-values()"
"(let-values(((bodys_730)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_713))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_713)))))"
"(if(null? bodys_730)"
" null"
"(loop_727"
" #t"
"(add-post-expansion-scope"
" bodys_730"
" partial-body-ctx_713)))))"
"(let-values() null)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_734)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_734"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_734"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_731)"
"(let-values()"
"(let-values(((temp437_735)"
"(car bodys_729))"
"((partial-body-ctx438_736)"
" partial-body-ctx_713))"
"(expand5.1"
" #f"
" #f"
" temp437_735"
" partial-body-ctx438_736)))))"
"(let-values(((disarmed-exp-body_732)"
"(syntax-disarm$1 exp-body_731)))"
"(let-values(((lifted-defns_733)"
"(get-and-clear-lifts!"
"(expand-context-lifts"
" partial-body-ctx_713))))"
"(begin"
"(if(null? lifted-defns_733)"
"(let-values()"
"(begin"
"(let-values(((obs_737)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_737"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_737"
" 'rename-list"
" lifted-defns_733)))"
"(void)))"
"(let-values(((obs_738)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_738"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_738"
" 'module-lift-loop"
"(append"
" lifted-defns_733"
"(cons"
" exp-body_731"
"(cdr bodys_729))))))"
"(void)))))"
"(let-values()"
"(let-values(((obs_739)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_739"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_739"
" 'module-lift-end-loop"
"(cons"
" exp-body_731"
"(cdr bodys_729)))))"
"(void)))))"
"(let-values(((obs_740)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_740"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_740"
" 'rename-one"
" exp-body_731)))"
"(void)))"
"(let-values(((finish_741)"
"(lambda()"
"(let-values(((tmp_742)"
"(core-form-sym"
" disarmed-exp-body_732"
" phase_712)))"
"(if(equal?"
" tmp_742"
" 'begin)"
"(let-values()"
"(let-values(((ok?_743"
" begin439_744"
" e440_745)"
"(let-values(((s_758)"
" disarmed-exp-body_732))"
"(let-values(((orig-s_759)"
" s_758))"
"(let-values(((begin439_760"
" e440_761)"
"(let-values(((s_762)"
"(if(syntax?$1"
" s_758)"
"(syntax-e$1"
" s_758)"
" s_758)))"
"(if(pair?"
" s_762)"
"(let-values(((begin441_763)"
"(let-values(((s_765)"
"(car"
" s_762)))"
" s_765))"
"((e442_764)"
"(let-values(((s_766)"
"(cdr"
" s_762)))"
"(let-values(((s_767)"
"(if(syntax?$1"
" s_766)"
"(syntax-e$1"
" s_766)"
" s_766)))"
"(let-values(((flat-s_768)"
"(to-syntax-list.1"
" s_767)))"
"(if(not"
" flat-s_768)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_759))"
"(let-values()"
" flat-s_768)))))))"
"(values"
" begin441_763"
" e442_764))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_759)))))"
"(values"
" #t"
" begin439_760"
" e440_761))))))"
"(let-values(((track_756)"
"(lambda(e_769)"
"(syntax-track-origin$1"
" e_769"
" exp-body_731))))"
"(let-values(((spliced-bodys_757)"
"(append"
"(map2"
" track_756"
" e440_745)"
"(cdr"
" bodys_729))))"
"(begin"
"(let-values(((obs_770)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_770"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_770"
" 'splice"
" spliced-bodys_757)))"
"(void)))"
"(loop_727"
" tail?_728"
" spliced-bodys_757))))))"
"(if(equal?"
" tmp_742"
" 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_786)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_786"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_786"
" 'enter-prim"
" exp-body_731)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_787)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_787"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_787"
" 'enter-prim-begin-for-syntax)))"
"(void)))"
"(values))))"
"(let-values(((ok?_771"
" begin-for-syntax443_772"
" e444_773)"
"(let-values(((s_788)"
" disarmed-exp-body_732))"
"(let-values(((orig-s_789)"
" s_788))"
"(let-values(((begin-for-syntax443_790"
" e444_791)"
"(let-values(((s_792)"
"(if(syntax?$1"
" s_788)"
"(syntax-e$1"
" s_788)"
" s_788)))"
"(if(pair?"
" s_792)"
"(let-values(((begin-for-syntax445_793)"
"(let-values(((s_795)"
"(car"
" s_792)))"
" s_795))"
"((e446_794)"
"(let-values(((s_796)"
"(cdr"
" s_792)))"
"(let-values(((s_797)"
"(if(syntax?$1"
" s_796)"
"(syntax-e$1"
" s_796)"
" s_796)))"
"(let-values(((flat-s_798)"
"(to-syntax-list.1"
" s_797)))"
"(if(not"
" flat-s_798)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_789))"
"(let-values()"
" flat-s_798)))))))"
"(values"
" begin-for-syntax445_793"
" e446_794))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_789)))))"
"(values"
" #t"
" begin-for-syntax443_790"
" e444_791))))))"
"(let-values(((nested-bodys_784)"
"(pass-1-and-2-loop_726"
" e444_773"
"(add1"
" phase_712))))"
"(let-values(((ct-m-ns_785)"
"(namespace->namespace-at-phase"
" m-ns_714"
"(add1"
" phase_712))))"
"(begin"
"(namespace-run-available-modules!"
" m-ns_714"
"(add1"
" phase_712))"
"(eval-nested-bodys"
" nested-bodys_784"
"(add1"
" phase_712)"
" ct-m-ns_785"
" self_715"
" partial-body-ctx_713)"
"(namespace-visit-available-modules!"
" m-ns_714"
" phase_712)"
"(let-values(((obs_799)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_799"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_799"
" 'exit-prim)))"
"(void)))"
"(cons"
"(semi-parsed-begin-for-syntax3.1"
" exp-body_731"
" nested-bodys_784)"
"(loop_727"
" tail?_728"
"(cdr"
" bodys_729))))))))))"
"(if(equal?"
" tmp_742"
" 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_818)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_818"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_818"
" 'enter-prim"
" exp-body_731)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_819)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_819"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_819"
" 'enter-prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_800"
" define-values447_801"
" id448_802"
" rhs449_803)"
"(let-values(((s_820)"
" disarmed-exp-body_732))"
"(let-values(((orig-s_821)"
" s_820))"
"(let-values(((define-values447_822"
" id448_823"
" rhs449_824)"
"(let-values(((s_825)"
"(if(syntax?$1"
" s_820)"
"(syntax-e$1"
" s_820)"
" s_820)))"
"(if(pair?"
" s_825)"
"(let-values(((define-values450_826)"
"(let-values(((s_829)"
"(car"
" s_825)))"
" s_829))"
"((id451_827"
" rhs452_828)"
"(let-values(((s_830)"
"(cdr"
" s_825)))"
"(let-values(((s_831)"
"(if(syntax?$1"
" s_830)"
"(syntax-e$1"
" s_830)"
" s_830)))"
"(if(pair?"
" s_831)"
"(let-values(((id453_832)"
"(let-values(((s_834)"
"(car"
" s_831)))"
"(let-values(((s_835)"
"(if(syntax?$1"
" s_834)"
"(syntax-e$1"
" s_834)"
" s_834)))"
"(let-values(((flat-s_836)"
"(to-syntax-list.1"
" s_835)))"
"(if(not"
" flat-s_836)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_821))"
"(let-values()"
"(let-values(((id_837)"
"(let-values(((lst_838)"
" flat-s_836))"
"(begin"
"(if(list?"
" lst_838)"
"(void)"
"(let-values()"
"(in-list"
" lst_838)))"
"((letrec-values(((for-loop_839)"
"(lambda(id_840"
" lst_841)"
"(if(pair?"
" lst_841)"
"(let-values(((s_842)"
"(unsafe-car"
" lst_841))"
"((rest_843)"
"(unsafe-cdr"
" lst_841)))"
"(let-values(((id_844)"
"(let-values(((id_845)"
" id_840))"
"(let-values(((id_846)"
"(let-values()"
"(let-values(((id463_847)"
"(let-values()"
"(if(let-values(((or-part_848)"
"(if(syntax?$1"
" s_842)"
"(symbol?"
"(syntax-e$1"
" s_842))"
" #f)))"
"(if or-part_848"
" or-part_848"
"(symbol?"
" s_842)))"
" s_842"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_821"
" s_842)))))"
"(cons"
" id463_847"
" id_845)))))"
"(values"
" id_846)))))"
"(if(not"
" #f)"
"(for-loop_839"
" id_844"
" rest_843)"
" id_844)))"
" id_840))))"
" for-loop_839)"
" null"
" lst_838)))))"
"(alt-reverse"
" id_837))))))))"
"((rhs454_833)"
"(let-values(((s_849)"
"(cdr"
" s_831)))"
"(let-values(((s_850)"
"(if(syntax?$1"
" s_849)"
"(syntax-e$1"
" s_849)"
" s_849)))"
"(if(pair?"
" s_850)"
"(let-values(((rhs455_851)"
"(let-values(((s_852)"
"(car"
" s_850)))"
" s_852))"
"(()"
"(let-values(((s_853)"
"(cdr"
" s_850)))"
"(let-values(((s_854)"
"(if(syntax?$1"
" s_853)"
"(syntax-e$1"
" s_853)"
" s_853)))"
"(if(null?"
" s_854)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_821))))))"
"(values"
" rhs455_851))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_821))))))"
"(values"
" id453_832"
" rhs454_833))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_821))))))"
"(values"
" define-values450_826"
" id451_827"
" rhs452_828))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_821)))))"
"(values"
" #t"
" define-values447_822"
" id448_823"
" rhs449_824))))))"
"(let-values(((ids_816)"
"(remove-use-site-scopes"
" id448_802"
" partial-body-ctx_713)))"
"(let-values((()"
"(begin"
"(let-values(((ids456_855)"
" ids_816)"
"((phase457_856)"
" phase_712)"
"((exp-body458_857)"
" exp-body_731))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids456_855"
" phase457_856"
" exp-body458_857"
" #f"
" #f))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:723:10_858)"
" check-ids-unbound177.1)"
"((ids459_859)"
" ids_816)"
"((phase460_860)"
" phase_712)"
"((requires+provides461_861)"
" requires+provides_717)"
"((exp-body462_862)"
" exp-body_731))"
"(check-ids-unbound175.1"
" exp-body462_862"
" ids459_859"
" phase460_860"
" requires+provides461_861))"
"(values))))"
"(let-values(((syms_817)"
"(let-values(((ids464_864)"
" ids_816)"
"((defined-syms465_865)"
" defined-syms_720)"
"((self466_866)"
" self_715)"
"((phase467_867)"
" phase_712)"
"((all-scopes-stx468_868)"
" all-scopes-stx_719)"
"((frame-id469_869)"
" frame-id_716)"
"((requires+provides470_870)"
" requires+provides_717)"
"((exp-body471_871)"
" exp-body_731))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id469_869"
" exp-body471_871"
" #t"
" requires+provides470_870"
" #t"
" #f"
" #f"
" ids464_864"
" defined-syms465_865"
" self466_866"
" phase467_867"
" all-scopes-stx468_868))))"
"(begin"
"(add-defined-syms!"
" requires+provides_717"
" syms_817"
" phase_712)"
"(let-values(((obs_872)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_872"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_872"
" 'exit-prim)))"
"(void)))"
"(cons"
"(semi-parsed-define-values2.1"
" exp-body_731"
" syms_817"
" ids_816"
" rhs449_803)"
"(loop_727"
" tail?_728"
"(cdr"
" bodys_729))))))))))))"
"(if(equal?"
" tmp_742"
" 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_895)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_895"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_895"
" 'enter-prim"
" exp-body_731)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_896)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_896"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_896"
" 'enter-prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_873"
" define-syntaxes472_874"
" id473_875"
" rhs474_876)"
"(let-values(((s_897)"
" disarmed-exp-body_732))"
"(let-values(((orig-s_898)"
" s_897))"
"(let-values(((define-syntaxes472_899"
" id473_900"
" rhs474_901)"
"(let-values(((s_902)"
"(if(syntax?$1"
" s_897)"
"(syntax-e$1"
" s_897)"
" s_897)))"
"(if(pair?"
" s_902)"
"(let-values(((define-syntaxes475_903)"
"(let-values(((s_906)"
"(car"
" s_902)))"
" s_906))"
"((id476_904"
" rhs477_905)"
"(let-values(((s_907)"
"(cdr"
" s_902)))"
"(let-values(((s_908)"
"(if(syntax?$1"
" s_907)"
"(syntax-e$1"
" s_907)"
" s_907)))"
"(if(pair?"
" s_908)"
"(let-values(((id478_909)"
"(let-values(((s_911)"
"(car"
" s_908)))"
"(let-values(((s_912)"
"(if(syntax?$1"
" s_911)"
"(syntax-e$1"
" s_911)"
" s_911)))"
"(let-values(((flat-s_913)"
"(to-syntax-list.1"
" s_912)))"
"(if(not"
" flat-s_913)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_898))"
"(let-values()"
"(let-values(((id_914)"
"(let-values(((lst_915)"
" flat-s_913))"
"(begin"
"(if(list?"
" lst_915)"
"(void)"
"(let-values()"
"(in-list"
" lst_915)))"
"((letrec-values(((for-loop_916)"
"(lambda(id_917"
" lst_918)"
"(if(pair?"
" lst_918)"
"(let-values(((s_919)"
"(unsafe-car"
" lst_918))"
"((rest_920)"
"(unsafe-cdr"
" lst_918)))"
"(let-values(((id_921)"
"(let-values(((id_922)"
" id_917))"
"(let-values(((id_923)"
"(let-values()"
"(let-values(((id488_924)"
"(let-values()"
"(if(let-values(((or-part_925)"
"(if(syntax?$1"
" s_919)"
"(symbol?"
"(syntax-e$1"
" s_919))"
" #f)))"
"(if or-part_925"
" or-part_925"
"(symbol?"
" s_919)))"
" s_919"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_898"
" s_919)))))"
"(cons"
" id488_924"
" id_922)))))"
"(values"
" id_923)))))"
"(if(not"
" #f)"
"(for-loop_916"
" id_921"
" rest_920)"
" id_921)))"
" id_917))))"
" for-loop_916)"
" null"
" lst_915)))))"
"(alt-reverse"
" id_914))))))))"
"((rhs479_910)"
"(let-values(((s_926)"
"(cdr"
" s_908)))"
"(let-values(((s_927)"
"(if(syntax?$1"
" s_926)"
"(syntax-e$1"
" s_926)"
" s_926)))"
"(if(pair?"
" s_927)"
"(let-values(((rhs480_928)"
"(let-values(((s_929)"
"(car"
" s_927)))"
" s_929))"
"(()"
"(let-values(((s_930)"
"(cdr"
" s_927)))"
"(let-values(((s_931)"
"(if(syntax?$1"
" s_930)"
"(syntax-e$1"
" s_930)"
" s_930)))"
"(if(null?"
" s_931)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_898))))))"
"(values"
" rhs480_928))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                         \"bad syntax\""
" orig-s_898))))))"
"(values"
" id478_909"
" rhs479_910))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_898))))))"
"(values"
" define-syntaxes475_903"
" id476_904"
" rhs477_905))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                 \"bad syntax\""
" orig-s_898)))))"
"(values"
" #t"
" define-syntaxes472_899"
" id473_900"
" rhs474_901))))))"
"(let-values(((ids_889)"
"(remove-use-site-scopes"
" id473_875"
" partial-body-ctx_713)))"
"(let-values((()"
"(begin"
"(let-values(((ids481_932)"
" ids_889)"
"((phase482_933)"
" phase_712)"
"((exp-body483_934)"
" exp-body_731))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids481_932"
" phase482_933"
" exp-body483_934"
" #f"
" #f))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:740:10_935)"
" check-ids-unbound177.1)"
"((ids484_936)"
" ids_889)"
"((phase485_937)"
" phase_712)"
"((requires+provides486_938)"
" requires+provides_717)"
"((exp-body487_939)"
" exp-body_731))"
"(check-ids-unbound175.1"
" exp-body487_939"
" ids484_936"
" phase485_937"
" requires+provides486_938))"
"(values))))"
"(let-values(((syms_890)"
"(let-values(((ids489_941)"
" ids_889)"
"((defined-syms490_942)"
" defined-syms_720)"
"((self491_943)"
" self_715)"
"((phase492_944)"
" phase_712)"
"((all-scopes-stx493_945)"
" all-scopes-stx_719)"
"((frame-id494_946)"
" frame-id_716)"
"((requires+provides495_947)"
" requires+provides_717)"
"((exp-body496_948)"
" exp-body_731)"
"((temp497_949)"
" #t))"
"(select-defined-syms-and-bind!16.1"
" temp497_949"
" #t"
" frame-id494_946"
" exp-body496_948"
" #t"
" requires+provides495_947"
" #t"
" #f"
" #f"
" ids489_941"
" defined-syms490_942"
" self491_943"
" phase492_944"
" all-scopes-stx493_945))))"
"(let-values((()"
"(begin"
"(add-defined-syms!"
" requires+provides_717"
" syms_890"
" phase_712)"
"(values))))"
"(let-values(((exp-rhs_891"
" parsed-rhs_892"
" vals_893)"
"(expand+eval-for-syntaxes-binding"
" rhs474_876"
" ids_889"
"(let-values(((v_950)"
" partial-body-ctx_713))"
"(let-values(((the-struct_951)"
" v_950))"
"(if(expand-context/outer?"
" the-struct_951)"
"(let-values(((need-eventually-defined498_952)"
" need-eventually-defined_718)"
"((inner499_953)"
"(root-expand-context/outer-inner"
" v_950)))"
"(expand-context/outer1.1"
" inner499_953"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_951)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_951)"
"(root-expand-context/outer-frame-id"
" the-struct_951)"
"(expand-context/outer-context"
" the-struct_951)"
"(expand-context/outer-env"
" the-struct_951)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_951)"
"(expand-context/outer-scopes"
" the-struct_951)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_951)"
"(expand-context/outer-binding-layer"
" the-struct_951)"
"(expand-context/outer-reference-records"
" the-struct_951)"
"(expand-context/outer-only-immediate?"
" the-struct_951)"
" need-eventually-defined498_952"
"(expand-context/outer-current-introduction-scopes"
" the-struct_951)"
"(expand-context/outer-name"
" the-struct_951)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                              \"expand-context/outer?\""
" the-struct_951)))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_954)"
" syms_890)"
"((lst_955)"
" vals_893)"
"((lst_956)"
" ids_889))"
"(begin"
"(if(list?"
" lst_954)"
"(void)"
"(let-values()"
"(in-list"
" lst_954)))"
"(if(list?"
" lst_955)"
"(void)"
"(let-values()"
"(in-list"
" lst_955)))"
"(if(list?"
" lst_956)"
"(void)"
"(let-values()"
"(in-list"
" lst_956)))"
"((letrec-values(((for-loop_957)"
"(lambda(lst_958"
" lst_959"
" lst_960)"
"(if(if(pair?"
" lst_958)"
"(if(pair?"
" lst_959)"
"(pair?"
" lst_960)"
" #f)"
" #f)"
"(let-values(((sym_961)"
"(unsafe-car"
" lst_958))"
"((rest_962)"
"(unsafe-cdr"
" lst_958))"
"((val_963)"
"(unsafe-car"
" lst_959))"
"((rest_964)"
"(unsafe-cdr"
" lst_959))"
"((id_965)"
"(unsafe-car"
" lst_960))"
"((rest_966)"
"(unsafe-cdr"
" lst_960)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_963"
" id_965"
" phase_712)"
"(namespace-set-transformer!"
" m-ns_714"
" phase_712"
" sym_961"
" val_963)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_957"
" rest_962"
" rest_964"
" rest_966)"
"(values))))"
"(values)))))"
" for-loop_957)"
" lst_954"
" lst_955"
" lst_956)))"
"(values))))"
"(let-values((()"
"(begin"
"(void)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_967)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_967"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_967"
" 'exit-prim)))"
"(void)))"
"(values))))"
"(let-values(((parsed-body_894)"
"(parsed-define-syntaxes20.1"
"(keep-properties-only"
" exp-body_731)"
" ids_889"
" syms_890"
" parsed-rhs_892)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_713)"
" parsed-body_894"
"(expanded+parsed1.1"
"(let-values(((exp-body500_968)"
" exp-body_731)"
"((temp501_969)"
"(list"
" define-syntaxes472_874"
" ids_889"
" exp-rhs_891)))"
"(rebuild62.1"
" #f"
" #f"
" exp-body500_968"
" temp501_969))"
" parsed-body_894))"
"(loop_727"
" tail?_728"
"(cdr"
" bodys_729)))))))))))))))))"
"(if(equal?"
" tmp_742"
" '#%require)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_984)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_984"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_984"
" 'enter-prim"
" exp-body_731)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_985)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_985"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_985"
" 'enter-prim-require)))"
"(void)))"
"(values))))"
"(let-values(((ready-body_970)"
"(remove-use-site-scopes"
" disarmed-exp-body_732"
" partial-body-ctx_713)))"
"(let-values(((ok?_971"
" #%require502_972"
" req503_973)"
"(let-values(((s_986)"
" ready-body_970))"
"(let-values(((orig-s_987)"
" s_986))"
"(let-values(((#%require502_988"
" req503_989)"
"(let-values(((s_990)"
"(if(syntax?$1"
" s_986)"
"(syntax-e$1"
" s_986)"
" s_986)))"
"(if(pair?"
" s_990)"
"(let-values(((#%require504_991)"
"(let-values(((s_993)"
"(car"
" s_990)))"
" s_993))"
"((req505_992)"
"(let-values(((s_994)"
"(cdr"
" s_990)))"
"(let-values(((s_995)"
"(if(syntax?$1"
" s_994)"
"(syntax-e$1"
" s_994)"
" s_994)))"
"(let-values(((flat-s_996)"
"(to-syntax-list.1"
" s_995)))"
"(if(not"
" flat-s_996)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_987))"
"(let-values()"
" flat-s_996)))))))"
"(values"
" #%require504_991"
" req505_992))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_987)))))"
"(values"
" #t"
" #%require502_988"
" req503_989))))))"
"(begin"
"(let-values(((temp506_998)"
" req503_973)"
"((exp-body507_999)"
" exp-body_731)"
"((self508_1000)"
" self_715)"
"((m-ns509_1001)"
" m-ns_714)"
"((phase510_1002)"
" phase_712)"
"((phase511_1003)"
" phase_712)"
"((requires+provides512_1004)"
" requires+provides_717)"
"((declared-submodule-names513_1005)"
" declared-submodule-names_722)"
"((temp514_1006)"
" 'module))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names513_1005"
" #t"
" #f"
" #f"
" phase511_1003"
" #t"
" #f"
" #f"
" self508_1000"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp514_1006"
" temp506_998"
" exp-body507_999"
" m-ns509_1001"
" phase510_1002"
" requires+provides512_1004))"
"(let-values(((obs_1007)"
"(expand-context-observer"
" partial-body-ctx_713)))"
"(if obs_1007"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1007"
" 'exit-prim)))"
"(void)))"
"(cons"
" exp-body_731"
"(loop_727"
" tail?_728"
"(cdr"
" bodys_729)))))))))"
"(if(equal?"
" tmp_742"
" '#%provide)"
"(let-values()"
"(cons"
" exp-body_731"
"(loop_727"
" tail?_728"
"(cdr"
" bodys_729))))"
"(if(equal?"
" tmp_742"
" 'module)"
"(let-values()"
"(let-values(((ready-body_1008)"
"(remove-use-site-scopes"
" exp-body_731"
" partial-body-ctx_713)))"
"(let-values(((submod_1009)"
"(let-values(((...er/expand/module.rkt:790:12_1010)"
" expand-submodule201.1)"
"((ready-body515_1011)"
" ready-body_1008)"
"((self516_1012)"
" self_715)"
"((partial-body-ctx517_1013)"
" partial-body-ctx_713)"
"((temp518_1014)"
" #f)"
"((declared-submodule-names519_1015)"
" declared-submodule-names_722)"
"((mpis-to-reset520_1016)"
" mpis-to-reset_725)"
"((compiled-submodules521_1017)"
" compiled-submodules_723)"
"((modules-being-compiled522_1018)"
" modules-being-compiled_724))"
"(expand-submodule199.1"
" compiled-submodules521_1017"
" declared-submodule-names519_1015"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp518_1014"
" #f"
" #f"
" modules-being-compiled522_1018"
" mpis-to-reset520_1016"
" ready-body515_1011"
" self516_1012"
" partial-body-ctx517_1013))))"
"(cons"
" submod_1009"
"(loop_727"
" tail?_728"
"(cdr"
" bodys_729))))))"
"(if(equal?"
" tmp_742"
" 'module*)"
"(let-values()"
"(cons"
" exp-body_731"
"(loop_727"
" tail?_728"
"(cdr"
" bodys_729))))"
"(if(equal?"
" tmp_742"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_1019"
" #%declare523_1020"
" kw524_1021)"
"(let-values(((s_1033)"
" disarmed-exp-body_732))"
"(let-values(((orig-s_1034)"
" s_1033))"
"(let-values(((#%declare523_1035"
" kw524_1036)"
"(let-values(((s_1037)"
"(if(syntax?$1"
" s_1033)"
"(syntax-e$1"
" s_1033)"
" s_1033)))"
"(if(pair?"
" s_1037)"
"(let-values(((#%declare525_1038)"
"(let-values(((s_1040)"
"(car"
" s_1037)))"
" s_1040))"
"((kw526_1039)"
"(let-values(((s_1041)"
"(cdr"
" s_1037)))"
"(let-values(((s_1042)"
"(if(syntax?$1"
" s_1041)"
"(syntax-e$1"
" s_1041)"
" s_1041)))"
"(let-values(((flat-s_1043)"
"(to-syntax-list.1"
" s_1042)))"
"(if(not"
" flat-s_1043)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_1034))"
"(let-values()"
" flat-s_1043)))))))"
"(values"
" #%declare525_1038"
" kw526_1039))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_1034)))))"
"(values"
" #t"
" #%declare523_1035"
" kw524_1036))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_1044)"
" kw524_1021))"
"(begin"
"(if(list?"
" lst_1044)"
"(void)"
"(let-values()"
"(in-list"
" lst_1044)))"
"((letrec-values(((for-loop_1045)"
"(lambda(lst_1046)"
"(if(pair?"
" lst_1046)"
"(let-values(((kw_1047)"
"(unsafe-car"
" lst_1046))"
"((rest_1048)"
"(unsafe-cdr"
" lst_1046)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(keyword?"
"(syntax-e$1"
" kw_1047))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"expected a keyword\""
" exp-body_731"
" kw_1047)))"
"(if(memq"
"(syntax-e$1"
" kw_1047)"
" '(#:cross-phase-persistent"
" #:empty-namespace))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"not an allowed declaration keyword\""
" exp-body_731"
" kw_1047)))"
"(if(hash-ref"
" declared-keywords_721"
"(syntax-e$1"
" kw_1047)"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"keyword declared multiple times\""
" exp-body_731"
" kw_1047))"
"(void))"
"(hash-set!"
" declared-keywords_721"
"(syntax-e$1"
" kw_1047)"
" kw_1047)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_1045"
" rest_1048)"
"(values))))"
"(values)))))"
" for-loop_1045)"
" lst_1044)))"
"(values))))"
"(let-values((()"
"(begin"
"(void)"
"(values))))"
"(let-values(((parsed-body_1032)"
"(parsed-#%declare22.1"
" exp-body_731)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_713)"
" parsed-body_1032"
"(expanded+parsed1.1"
" exp-body_731"
" parsed-body_1032))"
"(loop_727"
" tail?_728"
"(cdr"
" bodys_729))))))))"
"(let-values()"
"(cons"
" exp-body_731"
"(loop_727"
" tail?_728"
"(cdr"
" bodys_729)))))))))))))))))"
"(let-values(((l_1049)"
"(append"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" partial-body-ctx_713))"
" lifted-defns_733"
"(loop_727"
" #f"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" partial-body-ctx_713))))))"
"(if(null? l_1049)"
"(finish_741)"
"(append"
" l_1049"
"(finish_741)))))))))))))))"
" loop_727)"
" tail?_711"
" bodys_710))))))))))))))))))))))"
"(define-values"
"(unpack82.1)"
"(lambda(given-kws_1050 given-args_1051 bodys80_1052)"
"(let-values(((all-scopes-stx56_1053)(car given-args_1051))"
"((given-kws_1054)(cdr given-kws_1050))"
"((given-args_1055)(cdr given-args_1051)))"
"(let-values(((compiled-submodules60_1056)(car given-args_1055))"
"((given-kws_1057)(cdr given-kws_1054))"
"((given-args_1058)(cdr given-args_1055)))"
"(let-values(((ctx50_1059)(car given-args_1058))"
"((given-kws_1060)(cdr given-kws_1057))"
"((given-args_1061)(cdr given-args_1058)))"
"(let-values(((declared-keywords58_1062)(car given-args_1061))"
"((given-kws_1063)(cdr given-kws_1060))"
"((given-args_1064)(cdr given-args_1061)))"
"(let-values(((declared-submodule-names59_1065)(car given-args_1064))"
"((given-kws_1066)(cdr given-kws_1063))"
"((given-args_1067)(cdr given-args_1064)))"
"(let-values(((defined-syms57_1068)(car given-args_1067))"
"((given-kws_1069)(cdr given-kws_1066))"
"((given-args_1070)(cdr given-args_1067)))"
"(let-values(((frame-id53_1071)(car given-args_1070))"
"((given-kws_1072)(cdr given-kws_1069))"
"((given-args_1073)(cdr given-args_1070)))"
"(let-values(((loop63_1074)(car given-args_1073))"
"((given-kws_1075)(cdr given-kws_1072))"
"((given-args_1076)(cdr given-args_1073)))"
"(let-values(((modules-being-compiled61_1077)(car given-args_1076))"
"((given-kws_1078)(cdr given-kws_1075))"
"((given-args_1079)(cdr given-args_1076)))"
"(let-values(((mpis-to-reset62_1080)(car given-args_1079))"
"((given-kws_1081)(cdr given-kws_1078))"
"((given-args_1082)(cdr given-args_1079)))"
"(let-values(((namespace51_1083)(car given-args_1082))"
"((given-kws_1084)(cdr given-kws_1081))"
"((given-args_1085)(cdr given-args_1082)))"
"(let-values(((need-eventually-defined55_1086)(car given-args_1085))"
"((given-kws_1087)(cdr given-kws_1084))"
"((given-args_1088)(cdr given-args_1085)))"
"(let-values(((phase49_1089)(car given-args_1088))"
"((given-kws_1090)(cdr given-kws_1087))"
"((given-args_1091)(cdr given-args_1088)))"
"(let-values(((requires-and-provides54_1092)(car given-args_1091))"
"((given-kws_1093)(cdr given-kws_1090))"
"((given-args_1094)(cdr given-args_1091)))"
"(let-values(((self52_1095)(car given-args_1094))"
"((given-kws_1096)(cdr given-kws_1093))"
"((given-args_1097)(cdr given-args_1094)))"
"(let-values(((tail?48_1098)(car given-args_1097)))"
"(partially-expand-bodys81.1"
" all-scopes-stx56_1053"
" compiled-submodules60_1056"
" ctx50_1059"
" declared-keywords58_1062"
" declared-submodule-names59_1065"
" defined-syms57_1068"
" frame-id53_1071"
" loop63_1074"
" modules-being-compiled61_1077"
" mpis-to-reset62_1080"
" namespace51_1083"
" need-eventually-defined55_1086"
" phase49_1089"
" requires-and-provides54_1092"
" self52_1095"
" tail?48_1098"
" bodys80_1052)))))))))))))))))))"
"(define-values"
"(partially-expand-bodys83.1)"
"(lifted/7.1"
"(lambda(given-kws_1099 given-argc_1100)"
"(if(= given-argc_1100 3)"
"(let-values(((l2_1101) given-kws_1099))"
"(if(pair? l2_1101)"
"(if(eq?(car l2_1101) '#:all-scopes-stx)"
"(let-values(((l2_1102)(cdr l2_1101)))"
"(if(pair? l2_1102)"
"(if(eq?(car l2_1102) '#:compiled-submodules)"
"(let-values(((l2_1103)(cdr l2_1102)))"
"(if(pair? l2_1103)"
"(if(eq?(car l2_1103) '#:ctx)"
"(let-values(((l2_1104)(cdr l2_1103)))"
"(if(pair? l2_1104)"
"(if(eq?(car l2_1104) '#:declared-keywords)"
"(let-values(((l2_1105)(cdr l2_1104)))"
"(if(pair? l2_1105)"
"(if(eq?(car l2_1105) '#:declared-submodule-names)"
"(let-values(((l2_1106)(cdr l2_1105)))"
"(if(pair? l2_1106)"
"(if(eq?(car l2_1106) '#:defined-syms)"
"(let-values(((l2_1107)(cdr l2_1106)))"
"(if(pair? l2_1107)"
"(if(eq?(car l2_1107) '#:frame-id)"
"(let-values(((l2_1108)(cdr l2_1107)))"
"(if(pair? l2_1108)"
"(if(eq?(car l2_1108) '#:loop)"
"(let-values(((l2_1109)(cdr l2_1108)))"
"(if(pair? l2_1109)"
"(if(eq?(car l2_1109) '#:modules-being-compiled)"
"(let-values(((l2_1110)(cdr l2_1109)))"
"(if(pair? l2_1110)"
"(if(eq?(car l2_1110) '#:mpis-to-reset)"
"(let-values(((l2_1111)(cdr l2_1110)))"
"(if(pair? l2_1111)"
"(if(eq?(car l2_1111) '#:namespace)"
"(let-values(((l2_1112)(cdr l2_1111)))"
"(if(pair? l2_1112)"
"(if(eq?"
"(car l2_1112)"
" '#:need-eventually-defined)"
"(let-values(((l2_1113)(cdr l2_1112)))"
"(if(pair? l2_1113)"
"(if(eq?(car l2_1113) '#:phase)"
"(let-values(((l2_1114)"
"(cdr l2_1113)))"
"(if(pair? l2_1114)"
"(if(eq?"
"(car l2_1114)"
" '#:requires-and-provides)"
"(let-values(((l2_1115)"
"(cdr l2_1114)))"
"(if(pair? l2_1115)"
"(if(eq?"
"(car l2_1115)"
" '#:self)"
"(let-values(((l2_1116)"
"(cdr"
" l2_1115)))"
"(if(pair? l2_1116)"
"(if(eq?"
"(car l2_1116)"
" '#:tail?)"
"(null?"
"(cdr l2_1116))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_1117 given-args_1118 bodys_1119)(unpack82.1 given-kws_1117 given-args_1118 bodys_1119)))"
" '(#:all-scopes-stx"
" #:compiled-submodules"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:modules-being-compiled"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" '(#:all-scopes-stx"
" #:compiled-submodules"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:modules-being-compiled"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)))"
"(define-values"
"(make-wrap-as-definition)"
"(lambda(self_1120 frame-id_1121 inside-scope_1122 all-scopes-stx_1123 defined-syms_1124 requires+provides_1125)"
"(lambda(ids_1126 rhs_1127 phase_1128)"
"(let-values(((scoped-ids_1129)"
"(let-values(((lst_1132) ids_1126))"
"(begin"
"(if(list? lst_1132)(void)(let-values()(in-list lst_1132)))"
"((letrec-values(((for-loop_1133)"
"(lambda(lst_1134)"
"(if(pair? lst_1134)"
"(let-values(((id_1135)(unsafe-car lst_1134))"
"((rest_1136)(unsafe-cdr lst_1134)))"
"(let-values(((post-guard-var_1137)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_1138)"
"(let-values()"
"(let-values()"
"(add-scope id_1135 inside-scope_1122)))))"
"(let-values(((result_1139)"
"(if(post-guard-var_1137)"
"(for-loop_1133 rest_1136)"
" null)))"
"(cons elem_1138 result_1139))))))"
" null))))"
" for-loop_1133)"
" lst_1132)))))"
"(let-values(((syms_1130)"
"(let-values(((scoped-ids527_1141) scoped-ids_1129)"
"((defined-syms528_1142) defined-syms_1124)"
"((self529_1143) self_1120)"
"((phase530_1144) phase_1128)"
"((all-scopes-stx531_1145) all-scopes-stx_1123)"
"((frame-id532_1146) frame-id_1121)"
"((requires+provides533_1147) requires+provides_1125))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id532_1146"
" #f"
" #f"
" requires+provides533_1147"
" #t"
" #f"
" #f"
" scoped-ids527_1141"
" defined-syms528_1142"
" self529_1143"
" phase530_1144"
" all-scopes-stx531_1145))))"
"(let-values(((s_1131)"
"(add-scope"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_1128) 'define-values)"
" scoped-ids_1129"
" rhs_1127))"
" inside-scope_1122)))"
"(values scoped-ids_1129(semi-parsed-define-values2.1 s_1131 syms_1130 scoped-ids_1129 rhs_1127))))))))"
"(define-values"
"(add-post-expansion-scope)"
"(lambda(bodys_1148 ctx_1149)"
"(let-values(((sc_1150)(root-expand-context-post-expansion-scope ctx_1149)))"
"(let-values(((lst_1151) bodys_1148))"
"(begin"
"(if(list? lst_1151)(void)(let-values()(in-list lst_1151)))"
"((letrec-values(((for-loop_1152)"
"(lambda(lst_1153)"
"(if(pair? lst_1153)"
"(let-values(((body_1154)(unsafe-car lst_1153))((rest_1155)(unsafe-cdr lst_1153)))"
"(let-values(((post-guard-var_1156)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_1157)"
"(let-values()(let-values()(add-scope body_1154 sc_1150)))))"
"(let-values(((result_1158)"
"(if(post-guard-var_1156)(for-loop_1152 rest_1155) null)))"
"(cons elem_1157 result_1158))))))"
" null))))"
" for-loop_1152)"
" lst_1151))))))"
"(define-values"
"(lifted/11.1 lifted/12.1 lifted/13.1 lifted/14.1 lifted/15.1)"
"(make-struct-type"
" 'finish-expanding-body-expressons"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'finish-expanding-body-expressons"
"(case-lambda"
"((self_1159 partially-expanded-bodys_1160)(apply missing-kw self_1159 partially-expanded-bodys_1160 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1161 partially-expanded-bodys_1162)(apply missing-kw self_1161 partially-expanded-bodys_1162 null)))))"
"(define-values"
"(finish-expanding-body-expressons101.1)"
"(lambda(compiled-submodules89_1163"
" ctx86_1164"
" declared-submodule-names88_1165"
" modules-being-compiled90_1166"
" mpis-to-reset91_1167"
" phase85_1168"
" self87_1169"
" tail?84_1170"
" partially-expanded-bodys100_1171)"
"(let-values(((partially-expanded-bodys_1172) partially-expanded-bodys100_1171))"
"(let-values(((tail?_1173) tail?84_1170))"
"(let-values(((phase_1174) phase85_1168))"
"(let-values(((body-ctx_1175) ctx86_1164))"
"(let-values(((self_1176) self87_1169))"
"(let-values(((declared-submodule-names_1177) declared-submodule-names88_1165))"
"(let-values(((compiled-submodules_1178) compiled-submodules89_1163))"
"(let-values(((modules-being-compiled_1179) modules-being-compiled90_1166))"
"(let-values(((mpis-to-reset_1180) mpis-to-reset91_1167))"
"(let-values()"
"((letrec-values(((loop_1181)"
"(lambda(tail?_1182 bodys_1183)"
"(if(null? bodys_1183)"
"(let-values()"
"(if tail?_1182"
"(let-values()"
"(let-values(((bodys_1184)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts body-ctx_1175))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts body-ctx_1175)))))"
"(if(null? bodys_1184) null(loop_1181 #t bodys_1184))))"
"(let-values() bodys_1183)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1190)"
"(expand-context-observer body-ctx_1175)))"
"(if obs_1190"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1190 'next)))"
"(void)))"
"(values))))"
"(let-values(((body_1185)(car bodys_1183)))"
"(let-values(((exp-body_1186)"
"(if(let-values(((or-part_1191)(parsed? body_1185)))"
"(if or-part_1191"
" or-part_1191"
"(let-values(((or-part_1192)"
"(expanded+parsed? body_1185)))"
"(if or-part_1192"
" or-part_1192"
"(semi-parsed-begin-for-syntax?"
" body_1185)))))"
"(let-values() body_1185)"
"(if(semi-parsed-define-values? body_1185)"
"(let-values()"
"(let-values(((ids_1193)"
"(semi-parsed-define-values-ids"
" body_1185)))"
"(let-values(((rhs-ctx_1194)"
"(as-named-context"
"(as-expression-context"
" body-ctx_1175)"
" ids_1193)))"
"(let-values(((exp-rhs_1195)"
"(let-values()"
"(let-values(((temp534_1199)"
"(semi-parsed-define-values-rhs"
" body_1185))"
"((rhs-ctx535_1200)"
" rhs-ctx_1194))"
"(expand5.1"
" #f"
" #f"
" temp534_1199"
" rhs-ctx535_1200)))))"
"(let-values(((syms_1196)"
"(semi-parsed-define-values-syms"
" body_1185)))"
"(let-values(((s_1197)"
"(semi-parsed-define-values-s"
" body_1185)))"
"(let-values(((comp-form_1198)"
"(parsed-define-values19.1"
"(keep-properties-only"
" s_1197)"
" ids_1193"
" syms_1196"
"(if(expand-context-to-parsed?"
" rhs-ctx_1194)"
" exp-rhs_1195"
"(let-values(((exp-rhs536_1201)"
" exp-rhs_1195)"
"((temp537_1202)"
"(as-to-parsed-context"
" rhs-ctx_1194)))"
"(expand5.1"
" #f"
" #f"
" exp-rhs536_1201"
" temp537_1202))))))"
"(if(expand-context-to-parsed?"
" rhs-ctx_1194)"
" comp-form_1198"
"(expanded+parsed1.1"
"(let-values(((disarmed-s_1203)"
"(syntax-disarm$1"
" s_1197)))"
"(let-values(((ok?_1204"
" define-values538_1205"
" _539_1206"
" _540_1207)"
"(let-values(((s_1220)"
" disarmed-s_1203))"
"(let-values(((orig-s_1221)"
" s_1220))"
"(let-values(((define-values538_1222"
" _539_1223"
" _540_1224)"
"(let-values(((s_1225)"
"(if(syntax?$1"
" s_1220)"
"(syntax-e$1"
" s_1220)"
" s_1220)))"
"(if(pair?"
" s_1225)"
"(let-values(((define-values541_1226)"
"(let-values(((s_1229)"
"(car"
" s_1225)))"
" s_1229))"
"((_542_1227"
" _543_1228)"
"(let-values(((s_1230)"
"(cdr"
" s_1225)))"
"(let-values(((s_1231)"
"(if(syntax?$1"
" s_1230)"
"(syntax-e$1"
" s_1230)"
" s_1230)))"
"(if(pair?"
" s_1231)"
"(let-values(((_544_1232)"
"(let-values(((s_1234)"
"(car"
" s_1231)))"
" s_1234))"
"((_545_1233)"
"(let-values(((s_1235)"
"(cdr"
" s_1231)))"
"(let-values(((s_1236)"
"(if(syntax?$1"
" s_1235)"
"(syntax-e$1"
" s_1235)"
" s_1235)))"
"(if(pair?"
" s_1236)"
"(let-values(((_546_1237)"
"(let-values(((s_1238)"
"(car"
" s_1236)))"
" s_1238))"
"(()"
"(let-values(((s_1239)"
"(cdr"
" s_1236)))"
"(let-values(((s_1240)"
"(if(syntax?$1"
" s_1239)"
"(syntax-e$1"
" s_1239)"
" s_1239)))"
"(if(null?"
" s_1240)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"bad syntax\""
" orig-s_1221))))))"
"(values"
" _546_1237))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                      \"bad syntax\""
" orig-s_1221))))))"
"(values"
" _544_1232"
" _545_1233))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                  \"bad syntax\""
" orig-s_1221))))))"
"(values"
" define-values541_1226"
" _542_1227"
" _543_1228))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_1221)))))"
"(values"
" #t"
" define-values538_1222"
" _539_1223"
" _540_1224))))))"
"(let-values(((s547_1241)"
" s_1197)"
"((temp548_1242)"
"(list"
" define-values538_1205"
" ids_1193"
" exp-rhs_1195)))"
"(rebuild62.1"
" #f"
" #f"
" s547_1241"
" temp548_1242))))"
" comp-form_1198)))))))))"
"(let-values()"
"(let-values(((disarmed-body_1243)"
"(syntax-disarm$1 body_1185)))"
"(let-values(((tmp_1244)"
"(core-form-sym"
" disarmed-body_1243"
" phase_1174)))"
"(if(if(equal? tmp_1244 '#%require)"
" #t"
"(if(equal? tmp_1244 '#%provide)"
" #t"
"(equal? tmp_1244 'module*)))"
"(let-values()(car bodys_1183))"
"(let-values()"
"(let-values()"
"(let-values(((exp-body_1245)"
"(let-values(((temp549_1246)"
"(car"
" bodys_1183))"
"((temp550_1247)"
"(as-expression-context"
" body-ctx_1175)))"
"(expand5.1"
" #f"
" #f"
" temp549_1246"
" temp550_1247))))"
"(if(expand-context-to-parsed?"
" body-ctx_1175)"
" exp-body_1245"
"(expanded+parsed1.1"
" exp-body_1245"
"(let-values(((exp-body551_1248)"
" exp-body_1245)"
"((temp552_1249)"
"(as-to-parsed-context"
" body-ctx_1175)))"
"(expand5.1"
" #f"
" #f"
" exp-body551_1248"
" temp552_1249)))))))))))))))"
"(let-values(((lifted-defns_1187)"
"(loop_1181"
" #f"
"(get-and-clear-lifts!"
"(expand-context-lifts body-ctx_1175)))))"
"(let-values(((lifted-requires_1188)"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts body-ctx_1175))))"
"(let-values(((lifted-modules_1189)"
"(let-values(((...er/expand/module.rkt:936:8_1250)"
" expand-non-module*-submodules216.1)"
"((temp553_1251)"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" body-ctx_1175)))"
"((phase554_1252) phase_1174)"
"((self555_1253) self_1176)"
"((body-ctx556_1254) body-ctx_1175)"
"((mpis-to-reset557_1255)"
" mpis-to-reset_1180)"
"((declared-submodule-names558_1256)"
" declared-submodule-names_1177)"
"((compiled-submodules559_1257)"
" compiled-submodules_1178)"
"((modules-being-compiled560_1258)"
" modules-being-compiled_1179))"
"(expand-non-module*-submodules214.1"
" compiled-submodules559_1257"
" declared-submodule-names558_1256"
" modules-being-compiled560_1258"
" mpis-to-reset557_1255"
" temp553_1251"
" phase554_1252"
" self555_1253"
" body-ctx556_1254))))"
"(begin"
"(if(null? lifted-defns_1187)"
"(let-values()"
"(let-values(((obs_1259)"
"(expand-context-observer"
" body-ctx_1175)))"
"(if obs_1259"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1259"
" 'module-lift-loop"
" lifted-defns_1187)))"
"(void))))"
"(let-values()"
"(let-values(((obs_1260)"
"(expand-context-observer"
" body-ctx_1175)))"
"(if obs_1260"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1260"
" 'module-lift-end-loop"
"(cons exp-body_1186(cdr bodys_1183)))))"
"(void)))))"
"(append"
" lifted-requires_1188"
" lifted-defns_1187"
" lifted-modules_1189"
"(cons"
" exp-body_1186"
"(loop_1181 tail?_1182(cdr bodys_1183))))))))))))))))"
" loop_1181)"
" tail?_1173"
" partially-expanded-bodys_1172)))))))))))))"
"(define-values"
"(unpack102.1)"
"(lambda(given-kws_1261 given-args_1262 partially-expanded-bodys100_1263)"
"(let-values(((compiled-submodules89_1264)(car given-args_1262))"
"((given-kws_1265)(cdr given-kws_1261))"
"((given-args_1266)(cdr given-args_1262)))"
"(let-values(((ctx86_1267)(car given-args_1266))"
"((given-kws_1268)(cdr given-kws_1265))"
"((given-args_1269)(cdr given-args_1266)))"
"(let-values(((declared-submodule-names88_1270)(car given-args_1269))"
"((given-kws_1271)(cdr given-kws_1268))"
"((given-args_1272)(cdr given-args_1269)))"
"(let-values(((modules-being-compiled90_1273)(car given-args_1272))"
"((given-kws_1274)(cdr given-kws_1271))"
"((given-args_1275)(cdr given-args_1272)))"
"(let-values(((mpis-to-reset91_1276)(car given-args_1275))"
"((given-kws_1277)(cdr given-kws_1274))"
"((given-args_1278)(cdr given-args_1275)))"
"(let-values(((phase85_1279)(car given-args_1278))"
"((given-kws_1280)(cdr given-kws_1277))"
"((given-args_1281)(cdr given-args_1278)))"
"(let-values(((self87_1282)(car given-args_1281))"
"((given-kws_1283)(cdr given-kws_1280))"
"((given-args_1284)(cdr given-args_1281)))"
"(let-values(((tail?84_1285)(car given-args_1284)))"
"(finish-expanding-body-expressons101.1"
" compiled-submodules89_1264"
" ctx86_1267"
" declared-submodule-names88_1270"
" modules-being-compiled90_1273"
" mpis-to-reset91_1276"
" phase85_1279"
" self87_1282"
" tail?84_1285"
" partially-expanded-bodys100_1263)))))))))))"
"(define-values"
"(finish-expanding-body-expressons103.1)"
"(lifted/12.1"
"(lambda(given-kws_1286 given-argc_1287)"
"(if(= given-argc_1287 3)"
"(let-values(((l2_1288) given-kws_1286))"
"(if(pair? l2_1288)"
"(if(eq?(car l2_1288) '#:compiled-submodules)"
"(let-values(((l2_1289)(cdr l2_1288)))"
"(if(pair? l2_1289)"
"(if(eq?(car l2_1289) '#:ctx)"
"(let-values(((l2_1290)(cdr l2_1289)))"
"(if(pair? l2_1290)"
"(if(eq?(car l2_1290) '#:declared-submodule-names)"
"(let-values(((l2_1291)(cdr l2_1290)))"
"(if(pair? l2_1291)"
"(if(eq?(car l2_1291) '#:modules-being-compiled)"
"(let-values(((l2_1292)(cdr l2_1291)))"
"(if(pair? l2_1292)"
"(if(eq?(car l2_1292) '#:mpis-to-reset)"
"(let-values(((l2_1293)(cdr l2_1292)))"
"(if(pair? l2_1293)"
"(if(eq?(car l2_1293) '#:phase)"
"(let-values(((l2_1294)(cdr l2_1293)))"
"(if(pair? l2_1294)"
"(if(eq?(car l2_1294) '#:self)"
"(let-values(((l2_1295)(cdr l2_1294)))"
"(if(pair? l2_1295)"
"(if(eq?(car l2_1295) '#:tail?)(null?(cdr l2_1295)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1296 given-args_1297 partially-expanded-bodys_1298)"
"(unpack102.1 given-kws_1296 given-args_1297 partially-expanded-bodys_1298)))"
" '(#:compiled-submodules"
" #:ctx"
" #:declared-submodule-names"
" #:modules-being-compiled"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
" '(#:compiled-submodules"
" #:ctx"
" #:declared-submodule-names"
" #:modules-being-compiled"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)))"
"(define-values"
"(check-defined-by-now)"
"(lambda(need-eventually-defined_1299 self_1300)"
"(begin"
"(let-values(((ht_1301) need-eventually-defined_1299))"
"(begin"
"(if((lambda(ht_1302)(hash? ht_1302)) ht_1301)(void)(let-values()(default-in-hash ht_1301)))"
"((letrec-values(((for-loop_1303)"
"(lambda(i_1304)"
"(if i_1304"
"(let-values(((phase_1305 l_1306)(hash-iterate-key+value ht_1301 i_1304)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((lst_1307) l_1306))"
"(begin"
"(if(list? lst_1307)"
"(void)"
"(let-values()(in-list lst_1307)))"
"((letrec-values(((for-loop_1308)"
"(lambda(lst_1309)"
"(if(pair? lst_1309)"
"(let-values(((id_1310)"
"(unsafe-car"
" lst_1309))"
"((rest_1311)"
"(unsafe-cdr"
" lst_1309)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1312)"
"(let-values(((id561_1313)"
" id_1310)"
"((phase562_1314)"
" phase_1305))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id561_1313"
" phase562_1314))))"
"(if(if b_1312"
"(if(module-binding?"
" b_1312)"
"(if(eq?"
"(module-binding-sym"
" b_1312)"
"(syntax-e$1"
" id_1310))"
"(eq?"
"(module-binding-module"
" b_1312)"
" self_1300)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"reference to an unbound identifier\""
" id_1310)))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_1308"
" rest_1311)"
"(values))))"
"(values)))))"
" for-loop_1308)"
" lst_1307)))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_1303(hash-iterate-next ht_1301 i_1304))(values))))"
"(values)))))"
" for-loop_1303)"
"(hash-iterate-first ht_1301))))"
"(void))))"
"(define-values"
"(lifted/16.1 lifted/17.1 lifted/18.1 lifted/19.1 lifted/20.1)"
"(make-struct-type"
" 'resolve-provides"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'resolve-provides"
"(case-lambda"
"((self_1315 expression-expanded-bodys_1316)(apply missing-kw self_1315 expression-expanded-bodys_1316 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1317 expression-expanded-bodys_1318)(apply missing-kw self_1317 expression-expanded-bodys_1318 null)))))"
"(define-values"
"(resolve-provides117.1)"
"(lambda(ctx109_1319"
" declared-submodule-names105_1320"
" namespace106_1321"
" phase107_1322"
" requires-and-provides104_1323"
" self108_1324"
" expression-expanded-bodys116_1325)"
"(let-values(((expression-expanded-bodys_1326) expression-expanded-bodys116_1325))"
"(let-values(((requires+provides_1327) requires-and-provides104_1323))"
"(let-values(((declared-submodule-names_1328) declared-submodule-names105_1320))"
"(let-values(((m-ns_1329) namespace106_1321))"
"(let-values(((phase_1330) phase107_1322))"
"(let-values(((self_1331) self108_1324))"
"(let-values(((ctx_1332) ctx109_1319))"
"(let-values()"
"(let-values()"
"((letrec-values(((loop_1333)"
"(lambda(bodys_1334 phase_1335)"
"(if(null? bodys_1334)"
"(let-values() null)"
"(if(let-values(((or-part_1336)(parsed?(car bodys_1334))))"
"(if or-part_1336 or-part_1336(expanded+parsed?(car bodys_1334))))"
"(let-values()"
"(cons(car bodys_1334)(loop_1333(cdr bodys_1334) phase_1335)))"
"(if(semi-parsed-begin-for-syntax?(car bodys_1334))"
"(let-values()"
"(let-values(((nested-bodys_1337)"
"(loop_1333"
"(semi-parsed-begin-for-syntax-body(car bodys_1334))"
"(add1 phase_1335))))"
"(cons"
"(let-values(((the-struct_1338)(car bodys_1334)))"
"(if(semi-parsed-begin-for-syntax? the-struct_1338)"
"(let-values(((body563_1339) nested-bodys_1337))"
"(semi-parsed-begin-for-syntax3.1"
"(semi-parsed-begin-for-syntax-s the-struct_1338)"
" body563_1339))"
"(raise-argument-error"
" 'struct-copy"
"                                                          \"semi-parsed-begin-for-syntax?\""
" the-struct_1338)))"
"(loop_1333(cdr bodys_1334) phase_1335))))"
"(let-values()"
"(let-values(((disarmed-body_1340)"
"(syntax-disarm$1(car bodys_1334))))"
"(let-values(((tmp_1341)"
"(core-form-sym disarmed-body_1340 phase_1335)))"
"(if(equal? tmp_1341 '#%provide)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1357)"
"(expand-context-observer"
" ctx_1332)))"
"(if obs_1357"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1357"
" 'enter-prim"
"(car bodys_1334))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1358)"
"(expand-context-observer"
" ctx_1332)))"
"(if obs_1358"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1358"
" 'enter-prim-provide)))"
"(void)))"
"(values))))"
"(let-values(((ok?_1342 #%provide564_1343 spec565_1344)"
"(let-values(((s_1359) disarmed-body_1340))"
"(let-values(((orig-s_1360) s_1359))"
"(let-values(((#%provide564_1361"
" spec565_1362)"
"(let-values(((s_1363)"
"(if(syntax?$1"
" s_1359)"
"(syntax-e$1"
" s_1359)"
" s_1359)))"
"(if(pair? s_1363)"
"(let-values(((#%provide566_1364)"
"(let-values(((s_1366)"
"(car"
" s_1363)))"
" s_1366))"
"((spec567_1365)"
"(let-values(((s_1367)"
"(cdr"
" s_1363)))"
"(let-values(((s_1368)"
"(if(syntax?$1"
" s_1367)"
"(syntax-e$1"
" s_1367)"
" s_1367)))"
"(let-values(((flat-s_1369)"
"(to-syntax-list.1"
" s_1368)))"
"(if(not"
" flat-s_1369)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_1360))"
"(let-values()"
" flat-s_1369)))))))"
"(values"
" #%provide566_1364"
" spec567_1365))"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_1360)))))"
"(values"
" #t"
" #%provide564_1361"
" spec565_1362))))))"
"(let-values(((track-stxes_1355 specs_1356)"
"(parse-and-expand-provides!"
" spec565_1344"
"(car bodys_1334)"
" requires+provides_1327"
" self_1331"
" phase_1335"
"(let-values(((v_1370) ctx_1332))"
"(let-values(((the-struct_1371)"
" v_1370))"
"(if(expand-context/outer?"
" the-struct_1371)"
"(let-values(((context568_1372)"
" 'top-level)"
"((inner569_1373)"
"(let-values(((the-struct_1374)"
"(root-expand-context/outer-inner"
" v_1370)))"
"(if(expand-context/inner?"
" the-struct_1374)"
"(let-values(((phase570_1375)"
" phase_1335)"
"((namespace571_1376)"
"(namespace->namespace-at-phase"
" m-ns_1329"
" phase_1335))"
"((requires+provides572_1377)"
" requires+provides_1327)"
"((declared-submodule-names573_1378)"
" declared-submodule-names_1328))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_1374)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_1374)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_1374)"
"(root-expand-context/inner-defined-syms"
" the-struct_1374)"
"(root-expand-context/inner-counter"
" the-struct_1374)"
"(root-expand-context/inner-lift-key"
" the-struct_1374)"
"(expand-context/inner-to-parsed?"
" the-struct_1374)"
" phase570_1375"
" namespace571_1376"
"(expand-context/inner-user-env"
" the-struct_1374)"
"(expand-context/inner-just-once?"
" the-struct_1374)"
"(expand-context/inner-module-begin-k"
" the-struct_1374)"
"(expand-context/inner-allow-unbound?"
" the-struct_1374)"
"(expand-context/inner-in-local-expand?"
" the-struct_1374)"
"(expand-context/inner-stops"
" the-struct_1374)"
" declared-submodule-names573_1378"
"(expand-context/inner-lifts"
" the-struct_1374)"
"(expand-context/inner-lift-envs"
" the-struct_1374)"
"(expand-context/inner-module-lifts"
" the-struct_1374)"
"(expand-context/inner-require-lifts"
" the-struct_1374)"
"(expand-context/inner-to-module-lifts"
" the-struct_1374)"
" requires+provides572_1377"
"(expand-context/inner-observer"
" the-struct_1374)"
"(expand-context/inner-for-serializable?"
" the-struct_1374)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                        \"expand-context/inner?\""
" the-struct_1374)))))"
"(expand-context/outer1.1"
" inner569_1373"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_1371)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_1371)"
"(root-expand-context/outer-frame-id"
" the-struct_1371)"
" context568_1372"
"(expand-context/outer-env"
" the-struct_1371)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_1371)"
"(expand-context/outer-scopes"
" the-struct_1371)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_1371)"
"(expand-context/outer-binding-layer"
" the-struct_1371)"
"(expand-context/outer-reference-records"
" the-struct_1371)"
"(expand-context/outer-only-immediate?"
" the-struct_1371)"
"(expand-context/outer-need-eventually-defined"
" the-struct_1371)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_1371)"
"(expand-context/outer-name"
" the-struct_1371)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                      \"expand-context/outer?\""
" the-struct_1371)))))))"
"(begin"
"(let-values(((obs_1379)"
"(expand-context-observer ctx_1332)))"
"(if obs_1379"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1379 'exit-prim)))"
"(void)))"
"(if(expand-context-to-parsed? ctx_1332)"
"(let-values()"
"(loop_1333(cdr bodys_1334) phase_1335))"
"(let-values()"
"(cons"
"(syntax-track-origin*"
" track-stxes_1355"
"(let-values(((temp574_1380)(car bodys_1334))"
"((temp575_1381)"
"(list*"
" #%provide564_1343"
" specs_1356)))"
"(rebuild62.1"
" #f"
" #f"
" temp574_1380"
" temp575_1381)))"
"(loop_1333"
"(cdr bodys_1334)"
" phase_1335))))))))))"
"(let-values()"
"(cons"
"(car bodys_1334)"
"(loop_1333(cdr bodys_1334) phase_1335)))))))))))))"
" loop_1333)"
" expression-expanded-bodys_1326"
" phase_1330))))))))))))"
"(define-values"
"(unpack118.1)"
"(lambda(given-kws_1382 given-args_1383 expression-expanded-bodys116_1384)"
"(let-values(((ctx109_1385)(car given-args_1383))"
"((given-kws_1386)(cdr given-kws_1382))"
"((given-args_1387)(cdr given-args_1383)))"
"(let-values(((declared-submodule-names105_1388)(car given-args_1387))"
"((given-kws_1389)(cdr given-kws_1386))"
"((given-args_1390)(cdr given-args_1387)))"
"(let-values(((namespace106_1391)(car given-args_1390))"
"((given-kws_1392)(cdr given-kws_1389))"
"((given-args_1393)(cdr given-args_1390)))"
"(let-values(((phase107_1394)(car given-args_1393))"
"((given-kws_1395)(cdr given-kws_1392))"
"((given-args_1396)(cdr given-args_1393)))"
"(let-values(((requires-and-provides104_1397)(car given-args_1396))"
"((given-kws_1398)(cdr given-kws_1395))"
"((given-args_1399)(cdr given-args_1396)))"
"(let-values(((self108_1400)(car given-args_1399)))"
"(resolve-provides117.1"
" ctx109_1385"
" declared-submodule-names105_1388"
" namespace106_1391"
" phase107_1394"
" requires-and-provides104_1397"
" self108_1400"
" expression-expanded-bodys116_1384)))))))))"
"(define-values"
"(resolve-provides119.1)"
"(lifted/17.1"
"(lambda(given-kws_1401 given-argc_1402)"
"(if(= given-argc_1402 3)"
"(let-values(((l2_1403) given-kws_1401))"
"(if(pair? l2_1403)"
"(if(eq?(car l2_1403) '#:ctx)"
"(let-values(((l2_1404)(cdr l2_1403)))"
"(if(pair? l2_1404)"
"(if(eq?(car l2_1404) '#:declared-submodule-names)"
"(let-values(((l2_1405)(cdr l2_1404)))"
"(if(pair? l2_1405)"
"(if(eq?(car l2_1405) '#:namespace)"
"(let-values(((l2_1406)(cdr l2_1405)))"
"(if(pair? l2_1406)"
"(if(eq?(car l2_1406) '#:phase)"
"(let-values(((l2_1407)(cdr l2_1406)))"
"(if(pair? l2_1407)"
"(if(eq?(car l2_1407) '#:requires-and-provides)"
"(let-values(((l2_1408)(cdr l2_1407)))"
"(if(pair? l2_1408)"
"(if(eq?(car l2_1408) '#:self)(null?(cdr l2_1408)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1409 given-args_1410 expression-expanded-bodys_1411)"
"(unpack118.1 given-kws_1409 given-args_1410 expression-expanded-bodys_1411)))"
" '(#:ctx #:declared-submodule-names #:namespace #:phase #:requires-and-provides #:self)"
" '(#:ctx #:declared-submodule-names #:namespace #:phase #:requires-and-provides #:self)))"
"(define-values"
"(lifted/21.1 lifted/22.1 lifted/23.1 lifted/24.1 lifted/25.1)"
"(make-struct-type"
" 'declare-module-for-expansion"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'declare-module-for-expansion"
"(case-lambda"
"((self_1412 fully-expanded-bodys-except-post-submodules_1413)"
"(apply missing-kw self_1412 fully-expanded-bodys-except-post-submodules_1413 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1414 fully-expanded-bodys-except-post-submodules_1415)"
"(apply missing-kw self_1414 fully-expanded-bodys-except-post-submodules_1415 null)))))"
"(define-values"
"(declare-module-for-expansion141.1)"
"(lambda(ctx127_1416"
" enclosing125_1417"
" fill129_1418"
" module-name-id120_1419"
" modules-being-compiled128_1420"
" namespace123_1421"
" rebuild-s121_1422"
" requires-and-provides122_1423"
" root-ctx126_1424"
" self124_1425"
" fully-expanded-bodys-except-post-submodules140_1426)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1427)"
" fully-expanded-bodys-except-post-submodules140_1426))"
"(let-values(((module-name-id_1428) module-name-id120_1419))"
"(let-values(((rebuild-s_1429) rebuild-s121_1422))"
"(let-values(((requires+provides_1430) requires-and-provides122_1423))"
"(let-values(((m-ns_1431) namespace123_1421))"
"(let-values(((self_1432) self124_1425))"
"(let-values(((enclosing-self_1433) enclosing125_1417))"
"(let-values(((root-ctx_1434) root-ctx126_1424))"
"(let-values(((ctx_1435) ctx127_1416))"
"(let-values(((modules-being-compiled_1436) modules-being-compiled128_1420))"
"(let-values(((compiled-module-box_1437) fill129_1418))"
"(let-values()"
"(let-values(((requires_1438 provides_1439)"
"(extract-requires-and-provides requires+provides_1430 self_1432 self_1432)))"
"(let-values(((parsed-mod_1440)"
"(parsed-module25.1"
" rebuild-s_1429"
" #f"
" module-name-id_1428"
" self_1432"
" requires_1438"
" provides_1439"
"(requires+provides-all-bindings-simple? requires+provides_1430)"
"(root-expand-context-encode-for-module root-ctx_1434 self_1432 self_1432)"
"(parsed-only fully-expanded-bodys-except-post-submodules_1427)"
" #f"
"(hasheq))))"
"(let-values(((module-name_1441)"
"(1/module-path-index-resolve"
"(let-values(((or-part_1444) enclosing-self_1433))"
"(if or-part_1444 or-part_1444 self_1432)))))"
"(let-values(((compiled-module_1442)"
"(let-values(((parsed-mod576_1446) parsed-mod_1440)"
"((temp577_1447)"
"(let-values(((m-ns581_1452) m-ns_1431)"
"((enclosing-self582_1453)"
" enclosing-self_1433)"
"((temp583_1454)"
"(if enclosing-self_1433"
"(1/resolved-module-path-name"
" module-name_1441)"
" #f)))"
"(make-compile-context14.1"
" temp583_1454"
" #t"
" #f"
" #f"
" enclosing-self582_1453"
" #t"
" m-ns581_1452"
" #t"
" #f"
" #f"
" #f"
" #f)))"
"((temp578_1448)"
"(expand-context-for-serializable? ctx_1435))"
"((modules-being-compiled579_1449)"
" modules-being-compiled_1436)"
"((temp580_1450) #f))"
"(compile-module13.1"
" #f"
" #f"
" modules-being-compiled579_1449"
" #t"
" temp580_1450"
" #t"
" temp578_1448"
" #t"
" #f"
" #f"
" parsed-mod576_1446"
" temp577_1447))))"
"(let-values((()"
"(begin"
"(set-box! compiled-module-box_1437 compiled-module_1442)"
"(values))))"
"(let-values(((root-module-name_1443)"
"(resolved-module-path-root-name module-name_1441)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" m-ns_1431"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1443))"
"(let-values()"
"(let-values(((compiled-module584_1456) compiled-module_1442)"
"((temp585_1457) #f))"
"(eval-module8.1"
" #f"
" #f"
" #f"
" #f"
" temp585_1457"
" #t"
" compiled-module584_1456))))))))))))))))))))))))"
"(define-values"
"(unpack142.1)"
"(lambda(given-kws_1458 given-args_1459 fully-expanded-bodys-except-post-submodules140_1460)"
"(let-values(((ctx127_1461)(car given-args_1459))"
"((given-kws_1462)(cdr given-kws_1458))"
"((given-args_1463)(cdr given-args_1459)))"
"(let-values(((enclosing125_1464)(car given-args_1463))"
"((given-kws_1465)(cdr given-kws_1462))"
"((given-args_1466)(cdr given-args_1463)))"
"(let-values(((fill129_1467)(car given-args_1466))"
"((given-kws_1468)(cdr given-kws_1465))"
"((given-args_1469)(cdr given-args_1466)))"
"(let-values(((module-name-id120_1470)(car given-args_1469))"
"((given-kws_1471)(cdr given-kws_1468))"
"((given-args_1472)(cdr given-args_1469)))"
"(let-values(((modules-being-compiled128_1473)(car given-args_1472))"
"((given-kws_1474)(cdr given-kws_1471))"
"((given-args_1475)(cdr given-args_1472)))"
"(let-values(((namespace123_1476)(car given-args_1475))"
"((given-kws_1477)(cdr given-kws_1474))"
"((given-args_1478)(cdr given-args_1475)))"
"(let-values(((rebuild-s121_1479)(car given-args_1478))"
"((given-kws_1480)(cdr given-kws_1477))"
"((given-args_1481)(cdr given-args_1478)))"
"(let-values(((requires-and-provides122_1482)(car given-args_1481))"
"((given-kws_1483)(cdr given-kws_1480))"
"((given-args_1484)(cdr given-args_1481)))"
"(let-values(((root-ctx126_1485)(car given-args_1484))"
"((given-kws_1486)(cdr given-kws_1483))"
"((given-args_1487)(cdr given-args_1484)))"
"(let-values(((self124_1488)(car given-args_1487)))"
"(declare-module-for-expansion141.1"
" ctx127_1461"
" enclosing125_1464"
" fill129_1467"
" module-name-id120_1470"
" modules-being-compiled128_1473"
" namespace123_1476"
" rebuild-s121_1479"
" requires-and-provides122_1482"
" root-ctx126_1485"
" self124_1488"
" fully-expanded-bodys-except-post-submodules140_1460)))))))))))))"
"(define-values"
"(declare-module-for-expansion143.1)"
"(lifted/22.1"
"(lambda(given-kws_1489 given-argc_1490)"
"(if(= given-argc_1490 3)"
"(let-values(((l2_1491) given-kws_1489))"
"(if(pair? l2_1491)"
"(if(eq?(car l2_1491) '#:ctx)"
"(let-values(((l2_1492)(cdr l2_1491)))"
"(if(pair? l2_1492)"
"(if(eq?(car l2_1492) '#:enclosing)"
"(let-values(((l2_1493)(cdr l2_1492)))"
"(if(pair? l2_1493)"
"(if(eq?(car l2_1493) '#:fill)"
"(let-values(((l2_1494)(cdr l2_1493)))"
"(if(pair? l2_1494)"
"(if(eq?(car l2_1494) '#:module-name-id)"
"(let-values(((l2_1495)(cdr l2_1494)))"
"(if(pair? l2_1495)"
"(if(eq?(car l2_1495) '#:modules-being-compiled)"
"(let-values(((l2_1496)(cdr l2_1495)))"
"(if(pair? l2_1496)"
"(if(eq?(car l2_1496) '#:namespace)"
"(let-values(((l2_1497)(cdr l2_1496)))"
"(if(pair? l2_1497)"
"(if(eq?(car l2_1497) '#:rebuild-s)"
"(let-values(((l2_1498)(cdr l2_1497)))"
"(if(pair? l2_1498)"
"(if(eq?(car l2_1498) '#:requires-and-provides)"
"(let-values(((l2_1499)(cdr l2_1498)))"
"(if(pair? l2_1499)"
"(if(eq?(car l2_1499) '#:root-ctx)"
"(let-values(((l2_1500)(cdr l2_1499)))"
"(if(pair? l2_1500)"
"(if(eq?(car l2_1500) '#:self)"
"(null?(cdr l2_1500))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1501 given-args_1502 fully-expanded-bodys-except-post-submodules_1503)"
"(unpack142.1 given-kws_1501 given-args_1502 fully-expanded-bodys-except-post-submodules_1503)))"
" '(#:ctx"
" #:enclosing"
" #:fill"
" #:module-name-id"
" #:modules-being-compiled"
" #:namespace"
" #:rebuild-s"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
" '(#:ctx"
" #:enclosing"
" #:fill"
" #:module-name-id"
" #:modules-being-compiled"
" #:namespace"
" #:rebuild-s"
" #:requires-and-provides"
" #:root-ctx"
" #:self)))"
"(define-values"
"(attach-root-expand-context-properties)"
"(lambda(s_1504 root-ctx_1505 orig-self_1506 new-self_1507)"
"(let-values(((s_1508)"
"(syntax-property$1 s_1504 'module-body-context(root-expand-context-all-scopes-stx root-ctx_1505))))"
"(let-values(((s_1509)"
"(syntax-property$1"
" s_1508"
" 'module-body-inside-context"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope root-ctx_1505)))))"
" s_1509))))"
"(define-values"
"(lifted/26.1 lifted/27.1 lifted/28.1 lifted/29.1 lifted/30.1)"
"(make-struct-type"
" 'expand-post-submodules"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-post-submodules"
"(case-lambda"
"((self_1510 fully-expanded-bodys-except-post-submodules_1511)"
"(apply missing-kw self_1510 fully-expanded-bodys-except-post-submodules_1511 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1512 fully-expanded-bodys-except-post-submodules_1513)"
"(apply missing-kw self_1512 fully-expanded-bodys-except-post-submodules_1513 null)))))"
"(define-values"
"(expand-post-submodules167.1)"
"(lambda(all-scopes-s149_1514"
" compiled-submodules152_1515"
" ctx154_1516"
" declare-enclosing144_1517"
" declared-submodule-names151_1518"
" enclosing-is-cross-phase-persistent?148_1519"
" modules-being-compiled153_1520"
" mpis-to-reset150_1521"
" phase145_1522"
" requires-and-provides147_1523"
" self146_1524"
" fully-expanded-bodys-except-post-submodules166_1525)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1526)"
" fully-expanded-bodys-except-post-submodules166_1525))"
"(let-values(((declare-enclosing-module_1527) declare-enclosing144_1517))"
"(let-values(((phase_1528) phase145_1522))"
"(let-values(((self_1529) self146_1524))"
"(let-values(((requires+provides_1530) requires-and-provides147_1523))"
"(let-values(((enclosing-is-cross-phase-persistent?_1531) enclosing-is-cross-phase-persistent?148_1519))"
"(let-values(((all-scopes-s_1532) all-scopes-s149_1514))"
"(let-values(((mpis-to-reset_1533) mpis-to-reset150_1521))"
"(let-values(((declared-submodule-names_1534) declared-submodule-names151_1518))"
"(let-values(((compiled-submodules_1535) compiled-submodules152_1515))"
"(let-values(((modules-being-compiled_1536) modules-being-compiled153_1520))"
"(let-values(((submod-ctx_1537) ctx154_1516))"
"(let-values()"
"((letrec-values(((loop_1538)"
"(lambda(bodys_1539 phase_1540)"
"(if(null? bodys_1539)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_1541)(car bodys_1539)))"
"(if(semi-parsed-begin-for-syntax? body_1541)"
"(let-values()"
"(let-values(((body-s_1542)"
"(semi-parsed-begin-for-syntax-s body_1541)))"
"(let-values(((nested-bodys_1543)"
"(loop_1538"
"(semi-parsed-begin-for-syntax-body"
" body_1541)"
"(add1 phase_1540))))"
"(let-values(((parsed-bfs_1544)"
"(parsed-begin-for-syntax21.1"
"(keep-properties-only body-s_1542)"
"(parsed-only nested-bodys_1543))))"
"(cons"
"(if(expand-context-to-parsed? submod-ctx_1537)"
" parsed-bfs_1544"
"(expanded+parsed1.1"
"(let-values(((disarmed-body_1545)"
"(syntax-disarm$1 body-s_1542)))"
"(let-values(((ok?_1546"
" begin-for-syntax586_1547"
" _587_1548)"
"(let-values(((s_1559)"
" disarmed-body_1545))"
"(let-values(((orig-s_1560)"
" s_1559))"
"(let-values(((begin-for-syntax586_1561"
" _587_1562)"
"(let-values(((s_1563)"
"(if(syntax?$1"
" s_1559)"
"(syntax-e$1"
" s_1559)"
" s_1559)))"
"(if(pair?"
" s_1563)"
"(let-values(((begin-for-syntax588_1564)"
"(let-values(((s_1566)"
"(car"
" s_1563)))"
" s_1566))"
"((_589_1565)"
"(let-values(((s_1567)"
"(cdr"
" s_1563)))"
"(let-values(((s_1568)"
"(if(syntax?$1"
" s_1567)"
"(syntax-e$1"
" s_1567)"
" s_1567)))"
"(let-values(((flat-s_1569)"
"(to-syntax-list.1"
" s_1568)))"
"(if(not"
" flat-s_1569)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_1560))"
"(let-values()"
" flat-s_1569)))))))"
"(values"
" begin-for-syntax588_1564"
" _589_1565))"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_1560)))))"
"(values"
" #t"
" begin-for-syntax586_1561"
" _587_1562))))))"
"(let-values(((body-s590_1570) body-s_1542)"
"((temp591_1571)"
"(list*"
" begin-for-syntax586_1547"
"(syntax-only"
" nested-bodys_1543))))"
"(rebuild62.1"
" #f"
" #f"
" body-s590_1570"
" temp591_1571))))"
" parsed-bfs_1544))"
"(loop_1538(cdr bodys_1539) phase_1540))))))"
"(if(let-values(((or-part_1572)(parsed? body_1541)))"
"(if or-part_1572"
" or-part_1572"
"(expanded+parsed? body_1541)))"
"(let-values()"
"(cons body_1541(loop_1538(cdr bodys_1539) phase_1540)))"
"(let-values()"
"(let-values(((disarmed-body_1573)"
"(syntax-disarm$1(car bodys_1539))))"
"(let-values(((tmp_1574)"
"(core-form-sym"
" disarmed-body_1573"
" phase_1540)))"
"(if(equal? tmp_1574 'module*)"
"(let-values()"
"(let-values((()"
"(begin"
"(force"
" declare-enclosing-module_1527)"
"(values))))"
"(let-values(((ready-body_1575)"
"(remove-use-site-scopes"
"(car bodys_1539)"
" submod-ctx_1537)))"
"(let-values(((ok?_1576"
" module*592_1577"
" name593_1578"
" _594_1579)"
"(let-values(((s_1593)"
" disarmed-body_1573))"
"(if(let-values(((s_1594)"
"(if(syntax?$1"
" s_1593)"
"(syntax-e$1"
" s_1593)"
" s_1593)))"
"(if(pair? s_1594)"
"(if(let-values(((s_1595)"
"(car"
" s_1594)))"
" #t)"
"(let-values(((s_1596)"
"(cdr"
" s_1594)))"
"(let-values(((s_1597)"
"(if(syntax?$1"
" s_1596)"
"(syntax-e$1"
" s_1596)"
" s_1596)))"
"(if(pair?"
" s_1597)"
"(if(let-values(((s_1598)"
"(car"
" s_1597)))"
" #t)"
"(let-values(((s_1599)"
"(cdr"
" s_1597)))"
"(let-values(((s_1600)"
"(if(syntax?$1"
" s_1599)"
"(syntax-e$1"
" s_1599)"
" s_1599)))"
"(if(pair?"
" s_1600)"
"(if(let-values(((s_1601)"
"(car"
" s_1600)))"
"(let-values(((s_1602)"
"(if(syntax?$1"
" s_1601)"
"(syntax-e$1"
" s_1601)"
" s_1601)))"
"(eq?"
" #f"
" s_1602)))"
"(let-values(((s_1603)"
"(cdr"
" s_1600)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((module*592_1605"
" name593_1606"
" _594_1607)"
"(let-values(((s_1608)"
"(if(syntax?$1"
" s_1593)"
"(syntax-e$1"
" s_1593)"
" s_1593)))"
"(let-values(((module*595_1609)"
"(let-values(((s_1612)"
"(car"
" s_1608)))"
" s_1612))"
"((name596_1610"
" _597_1611)"
"(let-values(((s_1613)"
"(cdr"
" s_1608)))"
"(let-values(((s_1614)"
"(if(syntax?$1"
" s_1613)"
"(syntax-e$1"
" s_1613)"
" s_1613)))"
"(let-values(((name598_1615)"
"(let-values(((s_1617)"
"(car"
" s_1614)))"
" s_1617))"
"((_599_1616)"
"(let-values(((s_1618)"
"(cdr"
" s_1614)))"
"(let-values(((s_1619)"
"(if(syntax?$1"
" s_1618)"
"(syntax-e$1"
" s_1618)"
" s_1618)))"
"(let-values((()"
"(let-values(((s_1621)"
"(car"
" s_1619)))"
"(let-values(((s_1622)"
"(if(syntax?$1"
" s_1621)"
"(syntax-e$1"
" s_1621)"
" s_1621)))"
"(values))))"
"((_600_1620)"
"(let-values(((s_1623)"
"(cdr"
" s_1619)))"
" s_1623)))"
"(values"
" _600_1620))))))"
"(values"
" name598_1615"
" _599_1616))))))"
"(values"
" module*595_1609"
" name596_1610"
" _597_1611)))))"
"(values"
" #t"
" module*592_1605"
" name593_1606"
" _594_1607)))"
"(values #f #f #f #f)))))"
"(let-values(((submod_1592)"
"(if ok?_1576"
"(let-values()"
"(let-values(((neg-phase_1624)"
"(phase-"
" 0"
" phase_1540)))"
"(let-values(((shifted-s_1625)"
"(syntax-shift-phase-level$1"
" ready-body_1575"
" neg-phase_1624)))"
"(let-values(((submod_1626)"
"(let-values(((...er/expand/module.rkt:1143:17_1627)"
" expand-submodule201.1)"
"((shifted-s601_1628)"
" shifted-s_1625)"
"((self602_1629)"
" self_1529)"
"((submod-ctx603_1630)"
" submod-ctx_1537)"
"((temp604_1631)"
" #t)"
"((neg-phase605_1632)"
" neg-phase_1624)"
"((all-scopes-s606_1633)"
" all-scopes-s_1532)"
"((requires+provides607_1634)"
" requires+provides_1530)"
"((enclosing-is-cross-phase-persistent?608_1635)"
" enclosing-is-cross-phase-persistent?_1531)"
"((mpis-to-reset609_1636)"
" mpis-to-reset_1533)"
"((declared-submodule-names610_1637)"
" declared-submodule-names_1534)"
"((compiled-submodules611_1638)"
" compiled-submodules_1535)"
"((modules-being-compiled612_1639)"
" modules-being-compiled_1536))"
"(expand-submodule199.1"
" compiled-submodules611_1638"
" declared-submodule-names610_1637"
" all-scopes-s606_1633"
" #t"
" enclosing-is-cross-phase-persistent?608_1635"
" #t"
" requires+provides607_1634"
" #t"
" temp604_1631"
" neg-phase605_1632"
" #t"
" modules-being-compiled612_1639"
" mpis-to-reset609_1636"
" shifted-s601_1628"
" self602_1629"
" submod-ctx603_1630))))"
"(if(parsed?"
" submod_1626)"
"(let-values()"
" submod_1626)"
"(if(expanded+parsed?"
" submod_1626)"
"(let-values()"
"(let-values(((the-struct_1640)"
" submod_1626))"
"(if(expanded+parsed?"
" the-struct_1640)"
"(let-values(((s613_1641)"
"(syntax-shift-phase-level$1"
"(expanded+parsed-s"
" submod_1626)"
" phase_1540)))"
"(expanded+parsed1.1"
" s613_1641"
"(expanded+parsed-parsed"
" the-struct_1640)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                               \"expanded+parsed?\""
" the-struct_1640))))"
"(let-values()"
"(syntax-shift-phase-level$1"
" submod_1626"
" phase_1540))))))))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1160:15_1642)"
" expand-submodule201.1)"
"((ready-body614_1643)"
" ready-body_1575)"
"((self615_1644)"
" self_1529)"
"((submod-ctx616_1645)"
" submod-ctx_1537)"
"((temp617_1646)"
" #t)"
"((mpis-to-reset618_1647)"
" mpis-to-reset_1533)"
"((declared-submodule-names619_1648)"
" declared-submodule-names_1534)"
"((compiled-submodules620_1649)"
" compiled-submodules_1535)"
"((modules-being-compiled621_1650)"
" modules-being-compiled_1536))"
"(expand-submodule199.1"
" compiled-submodules620_1649"
" declared-submodule-names619_1648"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp617_1646"
" #f"
" #f"
" modules-being-compiled621_1650"
" mpis-to-reset618_1647"
" ready-body614_1643"
" self615_1644"
" submod-ctx616_1645))))))"
"(cons"
" submod_1592"
"(loop_1538"
"(cdr bodys_1539)"
" phase_1540)))))))"
"(let-values()"
"(cons"
"(car bodys_1539)"
"(loop_1538"
"(cdr bodys_1539)"
" phase_1540)))))))))))))))"
" loop_1538)"
" fully-expanded-bodys-except-post-submodules_1526"
" phase_1528))))))))))))))))"
"(define-values"
"(unpack168.1)"
"(lambda(given-kws_1651 given-args_1652 fully-expanded-bodys-except-post-submodules166_1653)"
"(let-values(((all-scopes-s149_1654)(car given-args_1652))"
"((given-kws_1655)(cdr given-kws_1651))"
"((given-args_1656)(cdr given-args_1652)))"
"(let-values(((compiled-submodules152_1657)(car given-args_1656))"
"((given-kws_1658)(cdr given-kws_1655))"
"((given-args_1659)(cdr given-args_1656)))"
"(let-values(((ctx154_1660)(car given-args_1659))"
"((given-kws_1661)(cdr given-kws_1658))"
"((given-args_1662)(cdr given-args_1659)))"
"(let-values(((declare-enclosing144_1663)(car given-args_1662))"
"((given-kws_1664)(cdr given-kws_1661))"
"((given-args_1665)(cdr given-args_1662)))"
"(let-values(((declared-submodule-names151_1666)(car given-args_1665))"
"((given-kws_1667)(cdr given-kws_1664))"
"((given-args_1668)(cdr given-args_1665)))"
"(let-values(((enclosing-is-cross-phase-persistent?148_1669)(car given-args_1668))"
"((given-kws_1670)(cdr given-kws_1667))"
"((given-args_1671)(cdr given-args_1668)))"
"(let-values(((modules-being-compiled153_1672)(car given-args_1671))"
"((given-kws_1673)(cdr given-kws_1670))"
"((given-args_1674)(cdr given-args_1671)))"
"(let-values(((mpis-to-reset150_1675)(car given-args_1674))"
"((given-kws_1676)(cdr given-kws_1673))"
"((given-args_1677)(cdr given-args_1674)))"
"(let-values(((phase145_1678)(car given-args_1677))"
"((given-kws_1679)(cdr given-kws_1676))"
"((given-args_1680)(cdr given-args_1677)))"
"(let-values(((requires-and-provides147_1681)(car given-args_1680))"
"((given-kws_1682)(cdr given-kws_1679))"
"((given-args_1683)(cdr given-args_1680)))"
"(let-values(((self146_1684)(car given-args_1683)))"
"(expand-post-submodules167.1"
" all-scopes-s149_1654"
" compiled-submodules152_1657"
" ctx154_1660"
" declare-enclosing144_1663"
" declared-submodule-names151_1666"
" enclosing-is-cross-phase-persistent?148_1669"
" modules-being-compiled153_1672"
" mpis-to-reset150_1675"
" phase145_1678"
" requires-and-provides147_1681"
" self146_1684"
" fully-expanded-bodys-except-post-submodules166_1653))))))))))))))"
"(define-values"
"(expand-post-submodules169.1)"
"(lifted/27.1"
"(lambda(given-kws_1685 given-argc_1686)"
"(if(= given-argc_1686 3)"
"(let-values(((l2_1687) given-kws_1685))"
"(if(pair? l2_1687)"
"(if(eq?(car l2_1687) '#:all-scopes-s)"
"(let-values(((l2_1688)(cdr l2_1687)))"
"(if(pair? l2_1688)"
"(if(eq?(car l2_1688) '#:compiled-submodules)"
"(let-values(((l2_1689)(cdr l2_1688)))"
"(if(pair? l2_1689)"
"(if(eq?(car l2_1689) '#:ctx)"
"(let-values(((l2_1690)(cdr l2_1689)))"
"(if(pair? l2_1690)"
"(if(eq?(car l2_1690) '#:declare-enclosing)"
"(let-values(((l2_1691)(cdr l2_1690)))"
"(if(pair? l2_1691)"
"(if(eq?(car l2_1691) '#:declared-submodule-names)"
"(let-values(((l2_1692)(cdr l2_1691)))"
"(if(pair? l2_1692)"
"(if(eq?(car l2_1692) '#:enclosing-is-cross-phase-persistent?)"
"(let-values(((l2_1693)(cdr l2_1692)))"
"(if(pair? l2_1693)"
"(if(eq?(car l2_1693) '#:modules-being-compiled)"
"(let-values(((l2_1694)(cdr l2_1693)))"
"(if(pair? l2_1694)"
"(if(eq?(car l2_1694) '#:mpis-to-reset)"
"(let-values(((l2_1695)(cdr l2_1694)))"
"(if(pair? l2_1695)"
"(if(eq?(car l2_1695) '#:phase)"
"(let-values(((l2_1696)(cdr l2_1695)))"
"(if(pair? l2_1696)"
"(if(eq?(car l2_1696) '#:requires-and-provides)"
"(let-values(((l2_1697)(cdr l2_1696)))"
"(if(pair? l2_1697)"
"(if(eq?(car l2_1697) '#:self)"
"(null?(cdr l2_1697))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1698 given-args_1699 fully-expanded-bodys-except-post-submodules_1700)"
"(unpack168.1 given-kws_1698 given-args_1699 fully-expanded-bodys-except-post-submodules_1700)))"
" '(#:all-scopes-s"
" #:compiled-submodules"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:modules-being-compiled"
" #:mpis-to-reset"
" #:phase"
" #:requires-and-provides"
" #:self)"
" '(#:all-scopes-s"
" #:compiled-submodules"
" #:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:modules-being-compiled"
" #:mpis-to-reset"
" #:phase"
" #:requires-and-provides"
" #:self)))"
"(define-values"
"(stop-at-module*?)"
"(lambda(ctx_1701)"
"(free-id-set-member?"
"(expand-context-stops ctx_1701)"
"(expand-context-phase ctx_1701)"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx 'module*)(expand-context-phase ctx_1701)))))"
"(define-values"
"(lifted/31.1 lifted/32.1 lifted/33.1 lifted/34.1 lifted/35.1)"
"(make-struct-type"
" 'check-ids-unbound"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'check-ids-unbound"
"(case-lambda"
"((self_1702 ids_1703 phase_1704 requires+provides_1705)"
"(apply missing-kw self_1702 ids_1703 phase_1704 requires+provides_1705 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1706 ids_1707 phase_1708 requires+provides_1709)"
"(apply missing-kw self_1706 ids_1707 phase_1708 requires+provides_1709 null)))))"
"(define-values"
"(check-ids-unbound175.1)"
"(lambda(in170_1710 ids172_1711 phase173_1712 requires+provides174_1713)"
"(let-values(((ids_1714) ids172_1711))"
"(let-values(((phase_1715) phase173_1712))"
"(let-values(((requires+provides_1716) requires+provides174_1713))"
"(let-values(((s_1717) in170_1710))"
"(let-values()"
"(begin"
"(let-values(((lst_1718) ids_1714))"
"(begin"
"(if(list? lst_1718)(void)(let-values()(in-list lst_1718)))"
"((letrec-values(((for-loop_1719)"
"(lambda(lst_1720)"
"(if(pair? lst_1720)"
"(let-values(((id_1721)(unsafe-car lst_1720))"
"((rest_1722)(unsafe-cdr lst_1720)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((requires+provides622_1724)"
" requires+provides_1716)"
"((id623_1725) id_1721)"
"((phase624_1726)"
" phase_1715)"
"((s625_1727) s_1717)"
"((temp626_1728) 'module))"
"(check-not-defined87.1"
" #f"
" #f"
" #f"
" #f"
" s625_1727"
" #f"
" #f"
" #f"
" #f"
" temp626_1728"
" requires+provides622_1724"
" id623_1725"
" phase624_1726)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_1719 rest_1722)(values))))"
"(values)))))"
" for-loop_1719)"
" lst_1718)))"
"(void)))))))))"
"(define-values"
"(unpack176.1)"
"(lambda(given-kws_1729 given-args_1730 ids172_1731 phase173_1732 requires+provides174_1733)"
"(let-values(((in170_1734)(car given-args_1730)))"
"(check-ids-unbound175.1 in170_1734 ids172_1731 phase173_1732 requires+provides174_1733))))"
"(define-values"
"(check-ids-unbound177.1)"
"(lifted/32.1"
"(lambda(given-kws_1735 given-argc_1736)"
"(if(= given-argc_1736 5)"
"(let-values(((l2_1737) given-kws_1735))"
"(if(pair? l2_1737)(if(eq?(car l2_1737) '#:in)(null?(cdr l2_1737)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1738 given-args_1739 ids_1740 phase_1741 requires+provides_1742)"
"(unpack176.1 given-kws_1738 given-args_1739 ids_1740 phase_1741 requires+provides_1742)))"
" '(#:in)"
" '(#:in)))"
"(define-values"
"(eval-nested-bodys)"
"(lambda(bodys_1743 phase_1744 m-ns_1745 self_1746 ctx_1747)"
"(begin"
"(let-values(((lst_1748) bodys_1743))"
"(begin"
"(if(list? lst_1748)(void)(let-values()(in-list lst_1748)))"
"((letrec-values(((for-loop_1749)"
"(lambda(lst_1750)"
"(if(pair? lst_1750)"
"(let-values(((body_1751)(unsafe-car lst_1750))((rest_1752)(unsafe-cdr lst_1750)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_1753)"
"(if(expanded+parsed? body_1751)"
"(expanded+parsed-parsed body_1751)"
" body_1751)))"
"(if(parsed-define-values? p_1753)"
"(let-values()"
"(let-values(((ids_1754)"
"(parsed-define-values-ids"
" p_1753)))"
"(let-values(((vals_1755)"
"(eval-for-bindings"
" ids_1754"
"(parsed-define-values-rhs"
" p_1753)"
" phase_1744"
" m-ns_1745"
" ctx_1747)))"
"(begin"
"(let-values(((lst_1756) ids_1754)"
"((lst_1757)"
"(parsed-define-values-syms"
" p_1753))"
"((lst_1758) vals_1755))"
"(begin"
"(if(list? lst_1756)"
"(void)"
"(let-values()"
"(in-list lst_1756)))"
"(if(list? lst_1757)"
"(void)"
"(let-values()"
"(in-list lst_1757)))"
"(if(list? lst_1758)"
"(void)"
"(let-values()"
"(in-list lst_1758)))"
"((letrec-values(((for-loop_1759)"
"(lambda(lst_1760"
" lst_1761"
" lst_1762)"
"(if(if(pair?"
" lst_1760)"
"(if(pair?"
" lst_1761)"
"(pair?"
" lst_1762)"
" #f)"
" #f)"
"(let-values(((id_1763)"
"(unsafe-car"
" lst_1760))"
"((rest_1764)"
"(unsafe-cdr"
" lst_1760))"
"((sym_1765)"
"(unsafe-car"
" lst_1761))"
"((rest_1766)"
"(unsafe-cdr"
" lst_1761))"
"((val_1767)"
"(unsafe-car"
" lst_1762))"
"((rest_1768)"
"(unsafe-cdr"
" lst_1762)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" m-ns_1745"
" phase_1744"
" sym_1765"
" val_1767))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_1759"
" rest_1764"
" rest_1766"
" rest_1768)"
"(values))))"
"(values)))))"
" for-loop_1759)"
" lst_1756"
" lst_1757"
" lst_1758)))"
"(void)))))"
"(if(let-values(((or-part_1769)"
"(parsed-define-syntaxes?"
" p_1753)))"
"(if or-part_1769"
" or-part_1769"
"(semi-parsed-begin-for-syntax?"
" p_1753)))"
"(let-values()(void))"
"(if(let-values(((or-part_1770)"
"(parsed-#%declare?"
" p_1753)))"
"(if or-part_1770"
" or-part_1770"
"(syntax?$1 p_1753)))"
"(let-values()(void))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
" ctx_1747"
" 1/current-namespace"
" m-ns_1745)"
"(let-values()"
"(eval-single-top"
"(compile-single"
" p_1753"
"(let-values(((m-ns627_1772)"
" m-ns_1745)"
"((phase628_1773)"
" phase_1744))"
"(make-compile-context14.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" m-ns627_1772"
" #t"
" phase628_1773"
" #t"
" #f"
" #f)))"
" m-ns_1745)))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_1749 rest_1752)(values))))"
"(values)))))"
" for-loop_1749)"
" lst_1748)))"
"(void))))"
"(define-values"
"(lifted/36.1 lifted/37.1 lifted/38.1 lifted/39.1 lifted/40.1)"
"(make-struct-type"
" 'expand-submodule"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-submodule"
"(case-lambda"
"((self_1774 s_1775 self_1776 ctx_1777)(apply missing-kw self_1774 s_1775 self_1776 ctx_1777 null))))))"
"(current-inspector)"
"(case-lambda((self_1778 s_1779 self_1780 ctx_1781)(apply missing-kw self_1778 s_1779 self_1780 ctx_1781 null)))))"
"(define-values"
"(expand-submodule199.1)"
"(lambda(compiled-submodules185_1782"
" declared-submodule-names184_1783"
" enclosing-all-scopes-stx182_1784"
" enclosing-all-scopes-stx191_1785"
" enclosing-is-cross-phase-persistent?181_1786"
" enclosing-is-cross-phase-persistent?190_1787"
" enclosing-requires+provides180_1788"
" enclosing-requires+provides189_1789"
" is-star?178_1790"
" keep-enclosing-scope-at-phase179_1791"
" keep-enclosing-scope-at-phase188_1792"
" modules-being-compiled186_1793"
" mpis-to-reset183_1794"
" s196_1795"
" self197_1796"
" ctx198_1797)"
"(let-values(((s_1798) s196_1795))"
"(let-values(((self_1799) self197_1796))"
"(let-values(((ctx_1800) ctx198_1797))"
"(let-values(((is-star?_1801) is-star?178_1790))"
"(let-values(((keep-enclosing-scope-at-phase_1802)"
"(if keep-enclosing-scope-at-phase188_1792 keep-enclosing-scope-at-phase179_1791 #f)))"
"(let-values(((enclosing-r+p_1803)"
"(if enclosing-requires+provides189_1789 enclosing-requires+provides180_1788 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_1804)"
"(if enclosing-is-cross-phase-persistent?190_1787"
" enclosing-is-cross-phase-persistent?181_1786"
" #f)))"
"(let-values(((enclosing-all-scopes-stx_1805)"
"(if enclosing-all-scopes-stx191_1785 enclosing-all-scopes-stx182_1784 #f)))"
"(let-values(((mpis-to-reset_1806) mpis-to-reset183_1794))"
"(let-values(((declared-submodule-names_1807) declared-submodule-names184_1783))"
"(let-values(((compiled-submodules_1808) compiled-submodules185_1782))"
"(let-values(((modules-being-compiled_1809) modules-being-compiled186_1793))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1832)(expand-context-observer ctx_1800)))"
"(if obs_1832"
"(let-values()"
"(let-values()(call-expand-observe obs_1832 'enter-prim s_1798)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1833)(expand-context-observer ctx_1800)))"
"(if obs_1833"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1833"
"(if is-star?_1801"
" 'enter-prim-submodule*"
" 'enter-prim-submodule))))"
"(void)))"
"(values))))"
"(let-values(((ok?_1810 module629_1811 name630_1812 _631_1813)"
"(let-values(((s_1834) s_1798))"
"(let-values(((orig-s_1835) s_1834))"
"(let-values(((module629_1836 name630_1837 _631_1838)"
"(let-values(((s_1839)"
"(if(syntax?$1 s_1834)"
"(syntax-e$1 s_1834)"
" s_1834)))"
"(if(pair? s_1839)"
"(let-values(((module632_1840)"
"(let-values(((s_1843)"
"(car s_1839)))"
" s_1843))"
"((name633_1841 _634_1842)"
"(let-values(((s_1844)"
"(cdr s_1839)))"
"(let-values(((s_1845)"
"(if(syntax?$1"
" s_1844)"
"(syntax-e$1"
" s_1844)"
" s_1844)))"
"(if(pair? s_1845)"
"(let-values(((name635_1846)"
"(let-values(((s_1848)"
"(car"
" s_1845)))"
" s_1848))"
"((_636_1847)"
"(let-values(((s_1849)"
"(cdr"
" s_1845)))"
" s_1849)))"
"(values"
" name635_1846"
" _636_1847))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_1835))))))"
"(values module632_1840 name633_1841 _634_1842))"
"(raise-syntax-error$1"
" #f"
"                                                                       \"bad syntax\""
" orig-s_1835)))))"
"(values #t module629_1836 name630_1837 _631_1838))))))"
"(let-values(((name_1826)(syntax-e$1 name630_1812)))"
"(let-values((()"
"(begin"
"(if(hash-ref declared-submodule-names_1807 name_1826 #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                           \"submodule already declared with the same name\""
" s_1798"
" name_1826))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
" declared-submodule-names_1807"
" name_1826"
"(syntax-e$1 module629_1811))"
"(values))))"
"(let-values(((submod_1827)"
"(let-values(((s637_1851) s_1798)"
"((temp638_1852)"
"(let-values(((v_1861) ctx_1800))"
"(let-values(((the-struct_1862) v_1861))"
"(if(expand-context/outer? the-struct_1862)"
"(let-values(((context647_1863) 'module)"
"((only-immediate?648_1864) #f)"
"((post-expansion-scope649_1865)"
" #f)"
"((inner650_1866)"
"(root-expand-context/outer-inner"
" v_1861)))"
"(expand-context/outer1.1"
" inner650_1866"
" post-expansion-scope649_1865"
"(root-expand-context/outer-use-site-scopes"
" the-struct_1862)"
"(root-expand-context/outer-frame-id"
" the-struct_1862)"
" context647_1863"
"(expand-context/outer-env"
" the-struct_1862)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_1862)"
"(expand-context/outer-scopes"
" the-struct_1862)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_1862)"
"(expand-context/outer-binding-layer"
" the-struct_1862)"
"(expand-context/outer-reference-records"
" the-struct_1862)"
" only-immediate?648_1864"
"(expand-context/outer-need-eventually-defined"
" the-struct_1862)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_1862)"
"(expand-context/outer-name"
" the-struct_1862)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                             \"expand-context/outer?\""
" the-struct_1862)))))"
"((self639_1853) self_1799)"
"((temp640_1854) #t)"
"((keep-enclosing-scope-at-phase641_1855)"
" keep-enclosing-scope-at-phase_1802)"
"((enclosing-all-scopes-stx642_1856)"
" enclosing-all-scopes-stx_1805)"
"((enclosing-r+p643_1857) enclosing-r+p_1803)"
"((enclosing-is-cross-phase-persistent?644_1858)"
" enclosing-is-cross-phase-persistent?_1804)"
"((mpis-to-reset645_1859) mpis-to-reset_1806)"
"((modules-being-compiled646_1860)"
" modules-being-compiled_1809))"
"(expand-module18.1"
" temp640_1854"
" #t"
" enclosing-all-scopes-stx642_1856"
" #t"
" enclosing-is-cross-phase-persistent?644_1858"
" #t"
" enclosing-r+p643_1857"
" #t"
" keep-enclosing-scope-at-phase641_1855"
" #t"
" modules-being-compiled646_1860"
" #t"
" mpis-to-reset645_1859"
" #t"
" s637_1851"
" temp638_1852"
" self639_1853))))"
"(let-values(((ns_1828)(expand-context-namespace ctx_1800)))"
"(let-values(((module-name_1829)(1/module-path-index-resolve self_1799)))"
"(let-values(((root-module-name_1830)"
"(resolved-module-path-root-name module-name_1829)))"
"(let-values(((compiled-submodule_1831)"
"(let-values(((temp651_1868)"
"(if(expanded+parsed? submod_1827)"
"(expanded+parsed-parsed submod_1827)"
" submod_1827))"
"((temp652_1869)"
"(let-values(((ns657_1875) ns_1828)"
"((self658_1876) self_1799)"
"((temp659_1877)"
"(1/resolved-module-path-name"
" module-name_1829)))"
"(make-compile-context14.1"
" temp659_1877"
" #t"
" #f"
" #f"
" self658_1876"
" #t"
" ns657_1875"
" #t"
" #f"
" #f"
" #f"
" #f)))"
"((temp653_1870) #t)"
"((temp654_1871)"
"(expand-context-for-serializable?"
" ctx_1800))"
"((modules-being-compiled655_1872)"
" modules-being-compiled_1809)"
"((temp656_1873) #f))"
"(compile-module13.1"
" temp653_1870"
" #t"
" modules-being-compiled655_1872"
" #t"
" temp656_1873"
" #t"
" temp654_1871"
" #t"
" #f"
" #f"
" temp651_1868"
" temp652_1869))))"
"(begin"
"(hash-set!"
" compiled-submodules_1808"
" name_1826"
"(cons is-star?_1801 compiled-submodule_1831))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_1828"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1830))"
"(let-values()"
"(let-values(((compiled-submodule660_1879)"
" compiled-submodule_1831)"
"((temp661_1880) #f))"
"(eval-module8.1"
" #f"
" #f"
" #f"
" #f"
" temp661_1880"
" #t"
" compiled-submodule660_1879))))"
"(let-values(((obs_1881)(expand-context-observer ctx_1800)))"
"(if obs_1881"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1881 'exit-prim submod_1827)))"
"(void)))"
"(if(not is-star?_1801)"
"(let-values() submod_1827)"
"(if(expanded+parsed? submod_1827)"
"(let-values()"
"(let-values(((the-struct_1882) submod_1827))"
"(if(expanded+parsed? the-struct_1882)"
"(let-values(((parsed662_1883)"
"(let-values(((the-struct_1884)"
"(expanded+parsed-parsed"
" submod_1827)))"
"(if(parsed-module? the-struct_1884)"
"(let-values(((star?663_1885) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_1884)"
" star?663_1885"
"(parsed-module-name-id"
" the-struct_1884)"
"(parsed-module-self"
" the-struct_1884)"
"(parsed-module-requires"
" the-struct_1884)"
"(parsed-module-provides"
" the-struct_1884)"
"(parsed-module-root-ctx-simple?"
" the-struct_1884)"
"(parsed-module-encoded-root-ctx"
" the-struct_1884)"
"(parsed-module-body"
" the-struct_1884)"
"(parsed-module-compiled-module"
" the-struct_1884)"
"(parsed-module-compiled-submodules"
" the-struct_1884)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                   \"parsed-module?\""
" the-struct_1884)))))"
"(expanded+parsed1.1"
"(expanded+parsed-s the-struct_1882)"
" parsed662_1883))"
"(raise-argument-error"
" 'struct-copy"
"                                                                 \"expanded+parsed?\""
" the-struct_1882))))"
"(let-values()"
"(let-values(((the-struct_1886) submod_1827))"
"(if(parsed-module? the-struct_1886)"
"(let-values(((star?664_1887) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_1886)"
" star?664_1887"
"(parsed-module-name-id the-struct_1886)"
"(parsed-module-self the-struct_1886)"
"(parsed-module-requires the-struct_1886)"
"(parsed-module-provides the-struct_1886)"
"(parsed-module-root-ctx-simple? the-struct_1886)"
"(parsed-module-encoded-root-ctx the-struct_1886)"
"(parsed-module-body the-struct_1886)"
"(parsed-module-compiled-module the-struct_1886)"
"(parsed-module-compiled-submodules the-struct_1886)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                 \"parsed-module?\""
" the-struct_1886)))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack200.1)"
"(lambda(given-kws_1888 given-args_1889 s196_1890 self197_1891 ctx198_1892)"
"(let-values(((compiled-submodules185_1893)(car given-args_1889))"
"((given-kws_1894)(cdr given-kws_1888))"
"((given-args_1895)(cdr given-args_1889)))"
"(let-values(((declared-submodule-names184_1896)(car given-args_1895))"
"((given-kws_1897)(cdr given-kws_1894))"
"((given-args_1898)(cdr given-args_1895)))"
"(let-values(((enclosing-all-scopes-stx191_1899)"
"(if(pair? given-kws_1897)(eq? '#:enclosing-all-scopes-stx(car given-kws_1897)) #f)))"
"(let-values(((enclosing-all-scopes-stx182_1900)"
"(if enclosing-all-scopes-stx191_1899(car given-args_1898)(void)))"
"((given-kws_1901)(if enclosing-all-scopes-stx191_1899(cdr given-kws_1897) given-kws_1897))"
"((given-args_1902)(if enclosing-all-scopes-stx191_1899(cdr given-args_1898) given-args_1898)))"
"(let-values(((enclosing-is-cross-phase-persistent?190_1903)"
"(if(pair? given-kws_1901)"
"(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_1901))"
" #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?181_1904)"
"(if enclosing-is-cross-phase-persistent?190_1903(car given-args_1902)(void)))"
"((given-kws_1905)"
"(if enclosing-is-cross-phase-persistent?190_1903(cdr given-kws_1901) given-kws_1901))"
"((given-args_1906)"
"(if enclosing-is-cross-phase-persistent?190_1903(cdr given-args_1902) given-args_1902)))"
"(let-values(((enclosing-requires+provides189_1907)"
"(if(pair? given-kws_1905)(eq? '#:enclosing-requires+provides(car given-kws_1905)) #f)))"
"(let-values(((enclosing-requires+provides180_1908)"
"(if enclosing-requires+provides189_1907(car given-args_1906)(void)))"
"((given-kws_1909)"
"(if enclosing-requires+provides189_1907(cdr given-kws_1905) given-kws_1905))"
"((given-args_1910)"
"(if enclosing-requires+provides189_1907(cdr given-args_1906) given-args_1906)))"
"(let-values(((is-star?178_1911)(car given-args_1910))"
"((given-kws_1912)(cdr given-kws_1909))"
"((given-args_1913)(cdr given-args_1910)))"
"(let-values(((keep-enclosing-scope-at-phase188_1914)"
"(if(pair? given-kws_1912)"
"(eq? '#:keep-enclosing-scope-at-phase(car given-kws_1912))"
" #f)))"
"(let-values(((keep-enclosing-scope-at-phase179_1915)"
"(if keep-enclosing-scope-at-phase188_1914(car given-args_1913)(void)))"
"((given-kws_1916)"
"(if keep-enclosing-scope-at-phase188_1914(cdr given-kws_1912) given-kws_1912))"
"((given-args_1917)"
"(if keep-enclosing-scope-at-phase188_1914(cdr given-args_1913) given-args_1913)))"
"(let-values(((modules-being-compiled186_1918)(car given-args_1917))"
"((given-kws_1919)(cdr given-kws_1916))"
"((given-args_1920)(cdr given-args_1917)))"
"(let-values(((mpis-to-reset183_1921)(car given-args_1920)))"
"(expand-submodule199.1"
" compiled-submodules185_1893"
" declared-submodule-names184_1896"
" enclosing-all-scopes-stx182_1900"
" enclosing-all-scopes-stx191_1899"
" enclosing-is-cross-phase-persistent?181_1904"
" enclosing-is-cross-phase-persistent?190_1903"
" enclosing-requires+provides180_1908"
" enclosing-requires+provides189_1907"
" is-star?178_1911"
" keep-enclosing-scope-at-phase179_1915"
" keep-enclosing-scope-at-phase188_1914"
" modules-being-compiled186_1918"
" mpis-to-reset183_1921"
" s196_1890"
" self197_1891"
" ctx198_1892))))))))))))))))"
"(define-values"
"(expand-submodule201.1)"
"(lifted/37.1"
"(lambda(given-kws_1922 given-argc_1923)"
"(if(= given-argc_1923 5)"
"(subsets?"
" '(#:compiled-submodules #:declared-submodule-names #:is-star? #:modules-being-compiled #:mpis-to-reset)"
" given-kws_1922"
" '(#:compiled-submodules"
" #:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:modules-being-compiled"
" #:mpis-to-reset))"
" #f))"
"(case-lambda"
"((given-kws_1924 given-args_1925 s_1926 self_1927 ctx_1928)"
"(unpack200.1 given-kws_1924 given-args_1925 s_1926 self_1927 ctx_1928)))"
" '(#:compiled-submodules #:declared-submodule-names #:is-star? #:modules-being-compiled #:mpis-to-reset)"
" '(#:compiled-submodules"
" #:declared-submodule-names"
" #:enclosing-all-scopes-stx"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:modules-being-compiled"
" #:mpis-to-reset)))"
"(define-values"
"(lifted/41.1 lifted/42.1 lifted/43.1 lifted/44.1 lifted/45.1)"
"(make-struct-type"
" 'expand-non-module*-submodules"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'expand-non-module*-submodules"
"(case-lambda"
"((self_1929 bodys_1930 phase_1931 self_1932 ctx_1933)"
"(apply missing-kw self_1929 bodys_1930 phase_1931 self_1932 ctx_1933 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_1934 bodys_1935 phase_1936 self_1937 ctx_1938)"
"(apply missing-kw self_1934 bodys_1935 phase_1936 self_1937 ctx_1938 null)))))"
"(define-values"
"(expand-non-module*-submodules214.1)"
"(lambda(compiled-submodules204_1939"
" declared-submodule-names203_1940"
" modules-being-compiled205_1941"
" mpis-to-reset202_1942"
" bodys210_1943"
" phase211_1944"
" self212_1945"
" ctx213_1946)"
"(let-values(((bodys_1947) bodys210_1943))"
"(let-values(((phase_1948) phase211_1944))"
"(let-values(((self_1949) self212_1945))"
"(let-values(((ctx_1950) ctx213_1946))"
"(let-values(((mpis-to-reset_1951) mpis-to-reset202_1942))"
"(let-values(((declared-submodule-names_1952) declared-submodule-names203_1940))"
"(let-values(((compiled-submodules_1953) compiled-submodules204_1939))"
"(let-values(((modules-being-compiled_1954) modules-being-compiled205_1941))"
"(let-values()"
"(let-values(((lst_1955) bodys_1947))"
"(begin"
"(if(list? lst_1955)(void)(let-values()(in-list lst_1955)))"
"((letrec-values(((for-loop_1956)"
"(lambda(lst_1957)"
"(if(pair? lst_1957)"
"(let-values(((body_1958)(unsafe-car lst_1957))"
"((rest_1959)(unsafe-cdr lst_1957)))"
"(let-values(((post-guard-var_1960)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_1961)"
"(let-values()"
"(let-values()"
"(let-values(((tmp_1962)"
"(core-form-sym"
"(syntax-disarm$1 body_1958)"
" phase_1948)))"
"(if(equal? tmp_1962 'module)"
"(let-values()"
"(let-values(((body665_1964) body_1958)"
"((self666_1965) self_1949)"
"((ctx667_1966) ctx_1950)"
"((temp668_1967) #f)"
"((mpis-to-reset669_1968)"
" mpis-to-reset_1951)"
"((declared-submodule-names670_1969)"
" declared-submodule-names_1952)"
"((compiled-submodules671_1970)"
" compiled-submodules_1953)"
"((modules-being-compiled672_1971)"
" modules-being-compiled_1954))"
"(expand-submodule199.1"
" compiled-submodules671_1970"
" declared-submodule-names670_1969"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp668_1967"
" #f"
" #f"
" modules-being-compiled672_1971"
" mpis-to-reset669_1968"
" body665_1964"
" self666_1965"
" ctx667_1966)))"
"(let-values() body_1958)))))))"
"(let-values(((result_1972)"
"(if(post-guard-var_1960)"
"(for-loop_1956 rest_1959)"
" null)))"
"(cons elem_1961 result_1972))))))"
" null))))"
" for-loop_1956)"
" lst_1955))))))))))))))"
"(define-values"
"(unpack215.1)"
"(lambda(given-kws_1973 given-args_1974 bodys210_1975 phase211_1976 self212_1977 ctx213_1978)"
"(let-values(((compiled-submodules204_1979)(car given-args_1974))"
"((given-kws_1980)(cdr given-kws_1973))"
"((given-args_1981)(cdr given-args_1974)))"
"(let-values(((declared-submodule-names203_1982)(car given-args_1981))"
"((given-kws_1983)(cdr given-kws_1980))"
"((given-args_1984)(cdr given-args_1981)))"
"(let-values(((modules-being-compiled205_1985)(car given-args_1984))"
"((given-kws_1986)(cdr given-kws_1983))"
"((given-args_1987)(cdr given-args_1984)))"
"(let-values(((mpis-to-reset202_1988)(car given-args_1987)))"
"(expand-non-module*-submodules214.1"
" compiled-submodules204_1979"
" declared-submodule-names203_1982"
" modules-being-compiled205_1985"
" mpis-to-reset202_1988"
" bodys210_1975"
" phase211_1976"
" self212_1977"
" ctx213_1978)))))))"
"(define-values"
"(expand-non-module*-submodules216.1)"
"(lifted/42.1"
"(lambda(given-kws_1989 given-argc_1990)"
"(if(= given-argc_1990 6)"
"(let-values(((l2_1991) given-kws_1989))"
"(if(pair? l2_1991)"
"(if(eq?(car l2_1991) '#:compiled-submodules)"
"(let-values(((l2_1992)(cdr l2_1991)))"
"(if(pair? l2_1992)"
"(if(eq?(car l2_1992) '#:declared-submodule-names)"
"(let-values(((l2_1993)(cdr l2_1992)))"
"(if(pair? l2_1993)"
"(if(eq?(car l2_1993) '#:modules-being-compiled)"
"(let-values(((l2_1994)(cdr l2_1993)))"
"(if(pair? l2_1994)(if(eq?(car l2_1994) '#:mpis-to-reset)(null?(cdr l2_1994)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1995 given-args_1996 bodys_1997 phase_1998 self_1999 ctx_2000)"
"(unpack215.1 given-kws_1995 given-args_1996 bodys_1997 phase_1998 self_1999 ctx_2000)))"
" '(#:compiled-submodules #:declared-submodule-names #:modules-being-compiled #:mpis-to-reset)"
" '(#:compiled-submodules #:declared-submodule-names #:modules-being-compiled #:mpis-to-reset)))"
"(define-values"
"(lifted/46.1 lifted/47.1 lifted/48.1 lifted/49.1 lifted/50.1)"
"(make-struct-type"
" 'make-parse-lifted-require"
" struct:keyword-procedure/arity-error"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:named-keyword-procedure"
"(cons"
" 'make-parse-lifted-require"
"(case-lambda"
"((self_2001 m-ns_2002 self_2003 requires+provides_2004)"
"(apply missing-kw self_2001 m-ns_2002 self_2003 requires+provides_2004 null))))))"
"(current-inspector)"
"(case-lambda"
"((self_2005 m-ns_2006 self_2007 requires+provides_2008)"
"(apply missing-kw self_2005 m-ns_2006 self_2007 requires+provides_2008 null)))))"
"(define-values"
"(make-parse-lifted-require222.1)"
"(lambda(declared-submodule-names217_2009 m-ns219_2010 self220_2011 requires+provides221_2012)"
"(let-values(((m-ns_2013) m-ns219_2010))"
"(let-values(((self_2014) self220_2011))"
"(let-values(((requires+provides_2015) requires+provides221_2012))"
"(let-values(((declared-submodule-names_2016) declared-submodule-names217_2009))"
"(let-values()"
"(lambda(s_2017 phase_2018)"
"(let-values(((ok?_2019 #%require673_2020 req674_2021)"
"(let-values(((s_2032)(syntax-disarm$1 s_2017)))"
"(let-values(((orig-s_2033) s_2032))"
"(let-values(((#%require673_2034 req674_2035)"
"(let-values(((s_2036)"
"(if(syntax?$1 s_2032)(syntax-e$1 s_2032) s_2032)))"
"(if(pair? s_2036)"
"(let-values(((#%require675_2037)"
"(let-values(((s_2039)(car s_2036))) s_2039))"
"((req676_2038)"
"(let-values(((s_2040)(cdr s_2036)))"
"(let-values(((s_2041)"
"(if(syntax?$1 s_2040)"
"(syntax-e$1 s_2040)"
" s_2040)))"
"(if(pair? s_2041)"
"(let-values(((req677_2042)"
"(let-values(((s_2043)"
"(car s_2041)))"
" s_2043))"
"(()"
"(let-values(((s_2044)"
"(cdr s_2041)))"
"(let-values(((s_2045)"
"(if(syntax?$1"
" s_2044)"
"(syntax-e$1"
" s_2044)"
" s_2044)))"
"(if(null? s_2045)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_2033))))))"
"(values req677_2042))"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_2033))))))"
"(values #%require675_2037 req676_2038))"
"                                                    (raise-syntax-error$1 #f \"bad syntax\" orig-s_2033)))))"
"(values #t #%require673_2034 req674_2035))))))"
"(let-values(((temp678_2047)(list req674_2021))"
"((s679_2048) s_2017)"
"((self680_2049) self_2014)"
"((m-ns681_2050) m-ns_2013)"
"((phase682_2051) phase_2018)"
"((phase683_2052) phase_2018)"
"((requires+provides684_2053) requires+provides_2015)"
"((declared-submodule-names685_2054) declared-submodule-names_2016)"
"((temp686_2055) 'require))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names685_2054"
" #t"
" #f"
" #f"
" phase683_2052"
" #t"
" #f"
" #f"
" self680_2049"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp686_2055"
" temp678_2047"
" s679_2048"
" m-ns681_2050"
" phase682_2051"
" requires+provides684_2053)))))))))))"
"(define-values"
"(unpack223.1)"
"(lambda(given-kws_2056 given-args_2057 m-ns219_2058 self220_2059 requires+provides221_2060)"
"(let-values(((declared-submodule-names217_2061)(car given-args_2057)))"
"(make-parse-lifted-require222.1"
" declared-submodule-names217_2061"
" m-ns219_2058"
" self220_2059"
" requires+provides221_2060))))"
"(define-values"
"(make-parse-lifted-require224.1)"
"(lifted/47.1"
"(lambda(given-kws_2062 given-argc_2063)"
"(if(= given-argc_2063 5)"
"(let-values(((l2_2064) given-kws_2062))"
"(if(pair? l2_2064)(if(eq?(car l2_2064) '#:declared-submodule-names)(null?(cdr l2_2064)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_2065 given-args_2066 m-ns_2067 self_2068 requires+provides_2069)"
"(unpack223.1 given-kws_2065 given-args_2066 m-ns_2067 self_2068 requires+provides_2069)))"
" '(#:declared-submodule-names)"
" '(#:declared-submodule-names)))"
"(void)"
"(void)"
"(define-values"
"(as-expand-time-top-level-bindings)"
"(lambda(ids_1 s_2 ctx_3)"
"(let-values(((top-level-bind-scope_4)(root-expand-context-top-level-bind-scope ctx_3)))"
"(let-values(((tl-ids_5)"
"(let-values(((lst_7) ids_1))"
"(begin"
"(if(list? lst_7)(void)(let-values()(in-list lst_7)))"
"((letrec-values(((for-loop_8)"
"(lambda(lst_9)"
"(if(pair? lst_9)"
"(let-values(((id_10)(unsafe-car lst_9))((rest_11)(unsafe-cdr lst_9)))"
"(let-values(((post-guard-var_12)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_13)"
"(let-values()"
"(let-values()"
"(remove-use-site-scopes id_10 ctx_3)))))"
"(let-values(((result_14)"
"(if(post-guard-var_12)(for-loop_8 rest_11) null)))"
"(cons elem_13 result_14))))))"
" null))))"
" for-loop_8)"
" lst_7)))))"
"(let-values((()"
"(begin"
"(let-values(((tl-ids1_15) tl-ids_5)((temp2_16)(expand-context-phase ctx_3))((s3_17) s_2))"
"(check-no-duplicate-ids8.1 #f #f tl-ids1_15 temp2_16 s3_17 #f #f))"
"(values))))"
"(let-values(((tmp-bind-ids_6)"
"(let-values(((lst_18) tl-ids_5))"
"(begin"
"(if(list? lst_18)(void)(let-values()(in-list lst_18)))"
"((letrec-values(((for-loop_19)"
"(lambda(lst_20)"
"(if(pair? lst_20)"
"(let-values(((id_21)(unsafe-car lst_20))"
"((rest_22)(unsafe-cdr lst_20)))"
"(let-values(((post-guard-var_23)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_24)"
"(let-values()"
"(let-values()"
"(add-scope id_21 top-level-bind-scope_4)))))"
"(let-values(((result_25)"
"(if(post-guard-var_23)"
"(for-loop_19 rest_22)"
" null)))"
"(cons elem_24 result_25))))))"
" null))))"
" for-loop_19)"
" lst_18)))))"
"(values tl-ids_5(select-defined-syms-and-bind!/ctx tmp-bind-ids_6 ctx_3))))))))"
"(void)"
"(void)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-values"
"(lambda(s_1 ctx_2)"
"(let-values((()"
"(begin"
"(let-values(((obs_23)(expand-context-observer ctx_2)))"
"(if obs_23"
"(let-values()(let-values()(call-expand-observe obs_23 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_2) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_1)))"
"(values))))"
"(let-values(((disarmed-s_3)(syntax-disarm$1 s_1)))"
"(let-values(((ok?_4 define-values1_5 id2_6 rhs3_7)"
"(let-values(((s_24) s_1))"
"(let-values(((orig-s_25) s_24))"
"(let-values(((define-values1_26 id2_27 rhs3_28)"
"(let-values(((s_29)(if(syntax?$1 s_24)(syntax-e$1 s_24) s_24)))"
"(if(pair? s_29)"
"(let-values(((define-values4_30)"
"(let-values(((s_33)(car s_29))) s_33))"
"((id5_31 rhs6_32)"
"(let-values(((s_34)(cdr s_29)))"
"(let-values(((s_35)"
"(if(syntax?$1 s_34)"
"(syntax-e$1 s_34)"
" s_34)))"
"(if(pair? s_35)"
"(let-values(((id7_36)"
"(let-values(((s_38)(car s_35)))"
"(let-values(((s_39)"
"(if(syntax?$1 s_38)"
"(syntax-e$1 s_38)"
" s_38)))"
"(let-values(((flat-s_40)"
"(to-syntax-list.1"
" s_39)))"
"(if(not flat-s_40)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_25))"
"(let-values()"
"(let-values(((id_41)"
"(let-values(((lst_42)"
" flat-s_40))"
"(begin"
"(if(list?"
" lst_42)"
"(void)"
"(let-values()"
"(in-list"
" lst_42)))"
"((letrec-values(((for-loop_43)"
"(lambda(id_44"
" lst_45)"
"(if(pair?"
" lst_45)"
"(let-values(((s_46)"
"(unsafe-car"
" lst_45))"
"((rest_47)"
"(unsafe-cdr"
" lst_45)))"
"(let-values(((id_48)"
"(let-values(((id_49)"
" id_44))"
"(let-values(((id_50)"
"(let-values()"
"(let-values(((id10_51)"
"(let-values()"
"(if(let-values(((or-part_52)"
"(if(syntax?$1"
" s_46)"
"(symbol?"
"(syntax-e$1"
" s_46))"
" #f)))"
"(if or-part_52"
" or-part_52"
"(symbol?"
" s_46)))"
" s_46"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"not an identifier\""
" orig-s_25"
" s_46)))))"
"(cons"
" id10_51"
" id_49)))))"
"(values"
" id_50)))))"
"(if(not"
" #f)"
"(for-loop_43"
" id_48"
" rest_47)"
" id_48)))"
" id_44))))"
" for-loop_43)"
" null"
" lst_42)))))"
"(alt-reverse"
" id_41))))))))"
"((rhs8_37)"
"(let-values(((s_53)(cdr s_35)))"
"(let-values(((s_54)"
"(if(syntax?$1 s_53)"
"(syntax-e$1 s_53)"
" s_53)))"
"(if(pair? s_54)"
"(let-values(((rhs9_55)"
"(let-values(((s_56)"
"(car"
" s_54)))"
" s_56))"
"(()"
"(let-values(((s_57)"
"(cdr"
" s_54)))"
"(let-values(((s_58)"
"(if(syntax?$1"
" s_57)"
"(syntax-e$1"
" s_57)"
" s_57)))"
"(if(null?"
" s_58)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_25))))))"
"(values rhs9_55))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_25))))))"
"(values id7_36 rhs8_37))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_25))))))"
"(values define-values4_30 id5_31 rhs6_32))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_25)))))"
"(values #t define-values1_26 id2_27 rhs3_28))))))"
"(let-values(((ids_20 syms_21)(as-expand-time-top-level-bindings id2_6 s_1 ctx_2)))"
"(let-values(((exp-rhs_22)"
"(let-values(((temp11_59) rhs3_7)((temp12_60)(as-named-context ctx_2 ids_20)))"
"(expand5.1 #f #f temp11_59 temp12_60))))"
"(if(expand-context-to-parsed? ctx_2)"
"(parsed-define-values19.1 s_1 ids_20 syms_21 exp-rhs_22)"
"(let-values(((s13_61) s_1)((temp14_62)(list define-values1_5 ids_20 exp-rhs_22)))"
"(rebuild62.1 #f #f s13_61 temp14_62))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-syntaxes"
"(lambda(s_63 ctx_64)"
"(let-values((()"
"(begin"
"(let-values(((obs_85)(expand-context-observer ctx_64)))"
"(if obs_85"
"(let-values()(let-values()(call-expand-observe obs_85 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_86)(expand-context-observer ctx_64)))"
"(if obs_86(let-values()(let-values()(call-expand-observe obs_86 'prepare-env)))(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_64) 'top-level)"
"(void)"
"                             (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_63)))"
"(values))))"
"(let-values(((disarmed-s_65)(syntax-disarm$1 s_63)))"
"(let-values(((ok?_66 define-syntaxes15_67 id16_68 rhs17_69)"
"(let-values(((s_87) disarmed-s_65))"
"(let-values(((orig-s_88) s_87))"
"(let-values(((define-syntaxes15_89 id16_90 rhs17_91)"
"(let-values(((s_92)(if(syntax?$1 s_87)(syntax-e$1 s_87) s_87)))"
"(if(pair? s_92)"
"(let-values(((define-syntaxes18_93)"
"(let-values(((s_96)(car s_92))) s_96))"
"((id19_94 rhs20_95)"
"(let-values(((s_97)(cdr s_92)))"
"(let-values(((s_98)"
"(if(syntax?$1 s_97)"
"(syntax-e$1 s_97)"
" s_97)))"
"(if(pair? s_98)"
"(let-values(((id21_99)"
"(let-values(((s_101)(car s_98)))"
"(let-values(((s_102)"
"(if(syntax?$1"
" s_101)"
"(syntax-e$1"
" s_101)"
" s_101)))"
"(let-values(((flat-s_103)"
"(to-syntax-list.1"
" s_102)))"
"(if(not flat-s_103)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_88))"
"(let-values()"
"(let-values(((id_104)"
"(let-values(((lst_105)"
" flat-s_103))"
"(begin"
"(if(list?"
" lst_105)"
"(void)"
"(let-values()"
"(in-list"
" lst_105)))"
"((letrec-values(((for-loop_106)"
"(lambda(id_107"
" lst_108)"
"(if(pair?"
" lst_108)"
"(let-values(((s_109)"
"(unsafe-car"
" lst_108))"
"((rest_110)"
"(unsafe-cdr"
" lst_108)))"
"(let-values(((id_111)"
"(let-values(((id_112)"
" id_107))"
"(let-values(((id_113)"
"(let-values()"
"(let-values(((id24_114)"
"(let-values()"
"(if(let-values(((or-part_115)"
"(if(syntax?$1"
" s_109)"
"(symbol?"
"(syntax-e$1"
" s_109))"
" #f)))"
"(if or-part_115"
" or-part_115"
"(symbol?"
" s_109)))"
" s_109"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"not an identifier\""
" orig-s_88"
" s_109)))))"
"(cons"
" id24_114"
" id_112)))))"
"(values"
" id_113)))))"
"(if(not"
" #f)"
"(for-loop_106"
" id_111"
" rest_110)"
" id_111)))"
" id_107))))"
" for-loop_106)"
" null"
" lst_105)))))"
"(alt-reverse"
" id_104))))))))"
"((rhs22_100)"
"(let-values(((s_116)(cdr s_98)))"
"(let-values(((s_117)"
"(if(syntax?$1"
" s_116)"
"(syntax-e$1"
" s_116)"
" s_116)))"
"(if(pair? s_117)"
"(let-values(((rhs23_118)"
"(let-values(((s_119)"
"(car"
" s_117)))"
" s_119))"
"(()"
"(let-values(((s_120)"
"(cdr"
" s_117)))"
"(let-values(((s_121)"
"(if(syntax?$1"
" s_120)"
"(syntax-e$1"
" s_120)"
" s_120)))"
"(if(null?"
" s_121)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                \"bad syntax\""
" orig-s_88))))))"
"(values rhs23_118))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_88))))))"
"(values id21_99 rhs22_100))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_88))))))"
"(values define-syntaxes18_93 id19_94 rhs20_95))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_88)))))"
"(values #t define-syntaxes15_89 id16_90 rhs17_91))))))"
"(let-values(((ids_82 syms_83)(as-expand-time-top-level-bindings id16_68 s_63 ctx_64)))"
"(let-values(((exp-rhs_84)"
"(let-values(((temp25_122) rhs17_69)((temp26_123)(as-named-context ctx_64 ids_82)))"
"(expand-transformer43.1 #f #f #f #f #f #f #f #f #f #f temp25_122 temp26_123))))"
"(if(expand-context-to-parsed? ctx_64)"
"(parsed-define-syntaxes20.1 s_63 ids_82 syms_83 exp-rhs_84)"
"(let-values(((s27_124) s_63)((temp28_125)(list define-syntaxes15_67 ids_82 exp-rhs_84)))"
"(rebuild62.1 #f #f s27_124 temp28_125)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin-for-syntax"
"     (lambda (s_126 ctx_127) (raise-syntax-error$1 #f \"not allowed in an expression position\" s_126))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%require"
"(lambda(s_128 ctx_129)"
"(let-values((()"
"(begin"
"(let-values(((obs_145)(expand-context-observer ctx_129)))"
"(if obs_145"
"(let-values()(let-values()(call-expand-observe obs_145 'prim-require)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_129) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"allowed only in a module or the top level\" s_128)))"
"(values))))"
"(let-values(((disarmed-s_130)(syntax-disarm$1 s_128)))"
"(let-values(((ok?_131 #%require29_132 req30_133)"
"(let-values(((s_146) disarmed-s_130))"
"(let-values(((orig-s_147) s_146))"
"(let-values(((#%require29_148 req30_149)"
"(let-values(((s_150)(if(syntax?$1 s_146)(syntax-e$1 s_146) s_146)))"
"(if(pair? s_150)"
"(let-values(((#%require31_151)"
"(let-values(((s_153)(car s_150))) s_153))"
"((req32_152)"
"(let-values(((s_154)(cdr s_150)))"
"(let-values(((s_155)"
"(if(syntax?$1 s_154)"
"(syntax-e$1 s_154)"
" s_154)))"
"(let-values(((flat-s_156)(to-syntax-list.1 s_155)))"
"(if(not flat-s_156)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_147))"
"(let-values() flat-s_156)))))))"
"(values #%require31_151 req32_152))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_147)))))"
"(values #t #%require29_148 req30_149))))))"
"(let-values(((sc_144)(new-scope 'macro)))"
"(begin"
"(let-values(((temp33_158)"
"(let-values(((lst_166) req30_133))"
"(begin"
"(if(list? lst_166)(void)(let-values()(in-list lst_166)))"
"((letrec-values(((for-loop_167)"
"(lambda(lst_168)"
"(if(pair? lst_168)"
"(let-values(((req_169)(unsafe-car lst_168))"
"((rest_170)(unsafe-cdr lst_168)))"
"(let-values(((post-guard-var_171)(lambda() #t)))"
"(let-values()"
"(let-values(((elem_172)"
"(let-values()"
"(let-values()"
"(add-scope req_169 sc_144)))))"
"(let-values(((result_173)"
"(if(post-guard-var_171)"
"(for-loop_167 rest_170)"
" null)))"
"(cons elem_172 result_173))))))"
" null))))"
" for-loop_167)"
" lst_166))))"
"((s34_159) s_128)"
"((temp35_160) #f)"
"((temp36_161)(expand-context-namespace ctx_129))"
"((temp37_162)(expand-context-phase ctx_129))"
"((temp38_163)(make-requires+provides #f))"
"((temp39_164) 'require)"
"((temp40_165) #t))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp40_165"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp35_160"
" #t"
" temp39_164"
" temp33_158"
" s34_159"
" temp36_161"
" temp37_162"
" temp38_163))"
"(if(expand-context-to-parsed? ctx_129)(parsed-require23.1 s_128) s_128))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%provide"
"(lambda(s_174 ctx_175)"
"(begin"
"(let-values(((obs_176)(expand-context-observer ctx_175)))"
"(if obs_176(let-values()(let-values()(call-expand-observe obs_176 'prim-provide)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_174)))))"
" print-values)"
"(void)"
"(void)"
"(define-values(ns)(make-namespace))"
"(call-with-values(lambda()(declare-core-module! ns)) print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp1_2) '#%main)((main-primitives2_3) main-primitives)((ns3_4) ns))"
"(declare-hash-based-module!39.1 ns3_4 #f #f #f #f #f #f #f #f temp1_2 main-primitives2_3)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp4_6) '#%utils)((utils-primitives5_7) utils-primitives)((ns6_8) ns))"
"(declare-hash-based-module!39.1 ns6_8 #f #f #f #f #f #f #f #f temp4_6 utils-primitives5_7)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp7_10) '#%place-struct)"
"((place-struct-primitives8_11) place-struct-primitives)"
"((ns9_12) ns)"
"((temp10_13) '(dynamic-place)))"
"(declare-hash-based-module!39.1 ns9_12 #f #f temp10_13 #t #f #f #f #f temp7_10 place-struct-primitives8_11)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp11_15) '#%boot)((boot-primitives12_16) boot-primitives)((ns13_17) ns))"
"(declare-hash-based-module!39.1 ns13_17 #f #f #f #f #f #f #f #f temp11_15 boot-primitives12_16)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((linklet-primitives_18)"
"(hash-remove(hash-remove linklet-primitives 'variable-reference?) 'variable-reference-constant?)))"
"(let-values(((temp25_20) '#%linklet)"
"((linklet-primitives26_21) linklet-primitives_18)"
"((ns27_22) ns)"
"((temp28_23) #t)"
"((temp29_24) #t))"
"(declare-hash-based-module!39.1"
" ns27_22"
" temp28_23"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp29_24"
" #t"
" temp25_20"
" linklet-primitives26_21))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp14_26) '#%expobs)((expobs-primitives15_27) expobs-primitives)((ns16_28) ns)((temp17_29) #t))"
"(declare-hash-based-module!39.1 ns16_28 #f #f #f #f temp17_29 #t #f #f temp14_26 expobs-primitives15_27)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((ns18_31) ns)"
"((eval19_32) 1/eval)"
"((temp20_33)"
"(let-values(((ht_34) main-primitives))"
"(begin"
"(if((lambda(ht_35)(hash? ht_35)) ht_34)(void)(let-values()(default-in-hash-keys ht_34)))"
"((letrec-values(((for-loop_36)"
"(lambda(table_37 i_38)"
"(if i_38"
"(let-values(((name_39)(hash-iterate-key ht_34 i_38)))"
"(let-values(((table_40)"
"(let-values(((table_41) table_37))"
"(let-values(((table_42)"
"(let-values()"
"(let-values(((key_43 val_44)"
"(let-values()"
"(values"
"(let-values() name_39)"
" #t))))"
"(hash-set table_41 key_43 val_44)))))"
"(values table_42)))))"
"(if(not #f)"
"(for-loop_36 table_40(hash-iterate-next ht_34 i_38))"
" table_40)))"
" table_37))))"
" for-loop_36)"
" '#hash()"
"(hash-iterate-first ht_34))))))"
"(declare-kernel-module!6.1 eval19_32 temp20_33 ns18_31)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((lst_45) runtime-instances))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(lst_47)"
"(if(pair? lst_47)"
"(let-values(((name_48)(unsafe-car lst_47))((rest_49)(unsafe-cdr lst_47)))"
"(let-values((()"
"(let-values()"
"(if(eq? name_48 '#%kernel)"
"(values)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((name30_51) name_48)"
"((ns31_52) ns)"
"((temp32_53)"
"(let-values(((or-part_54)"
"(eq?"
" name_48"
" '#%foreign)))"
"(if or-part_54"
" or-part_54"
"(let-values(((or-part_55)"
"(eq?"
" name_48"
" '#%futures)))"
"(if or-part_55"
" or-part_55"
"(eq?"
" name_48"
" '#%unsafe)))))))"
"(copy-runtime-module!24.1"
" #f"
" #f"
" #f"
" #f"
" ns31_52"
" #f"
" #f"
" temp32_53"
" #t"
" #f"
" #f"
" #f"
" #f"
" name30_51)))"
"(values)))))"
"(values)))))))"
"(if(not #f)(for-loop_46 rest_49)(values))))"
"(values)))))"
" for-loop_46)"
" lst_45))))"
" print-values)"
"(call-with-values(lambda()(void)) print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((temp21_57) '#%builtin)"
"((temp22_58)(list* '#%place-struct '#%utils '#%boot '#%expobs '#%linklet runtime-instances))"
"((ns23_59) ns)"
"((temp24_60) #f))"
"(declare-reexporting-module!48.1 ns23_59 temp24_60 #t temp21_57 temp22_58)))"
" print-values)"
"(call-with-values(lambda()(1/current-namespace ns)) print-values)"
"(call-with-values(lambda()(1/dynamic-require ''#%kernel 0)) print-values)"
"(define-values(datum->kernel-syntax)(lambda(s_61)(1/datum->syntax core-stx s_61)))"
"(void))"
);
